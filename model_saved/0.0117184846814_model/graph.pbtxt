node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\275\325\354\275<\357\177\274\246\373q\275!32;\205Uq=\004v\021\2752\357P\275p\025\276=\232@G=H\023\301=\271]<\274\332\263\260\275\203G\353\275\242\301\300=Xy\261=\341s\341\275\314\315\362\274\371\304\202\274\275\241\r\275\177\311\306<\203\257w\275Cz\244\275\032\310\250\274=\221)\275\023|\316\275\2423\350\275\277\234\277<76\013=(\365\223\273^/\r=E{\355<d\226\205=\361)Z\275\272\230\236=@\225\322=\004\204_\275+\221A=\260\300\314<\317\226\232=2\374\252\273_N\204\275\371\247\270=\201\272|\274{k\245\274\325\315\247=\212yt\271\361D\221=\262\r\216\2754\005\327=\"\'\303\274y\236\232=\301\310\216=\233\336\210\275\300x\230\275l\353/\275\334\266\325\275\204*l\274&0\263=py\273\275\346^\355;\324\207\331\275\200\255\354\275Q\373\350=\362\260g=I\301\347=\241\205\345=\265\311\227=K\013Q\274\274q\223\275\260\303e\275\'\024M=\274I\266={_O<\217\025\310\275\022\266\277\274\3621\205=\224\277%\275\343\257\215\275\241\316\324=E\001*<k\200\324=\225\234\335<!\334\360\273\273\3365=\210\302\355<jr\026\272\330\\\246\275\320\323\353<\270\023\212=H\027\322=\351>)=`,}=y7\214=\260\352\353\275\010\034R=\021\306\026\275z\300\273=\340\347o<\010\352\324=\374=\232\275\r,\311;\206\220\257=\210(><\026\362\207\274\227\272n=\'5\260=%\n\266=\241\026\236\275\351\255\220\275\207\025\277<\317\324%=\357\377i\275p\035\251=\017^\356=\336\267\340<\364\340\243;\212\236\213=\320\'\231<.\300H<\243\277\336<\227\312\225=\353#\263=\377O\322\275/kv=7/<\275\345 \310\275\225\314\354<\360\004\325\275\335\355\271\275(\344\005<\352/\353\275\216\251\205<\330\005\206=\273l.=\206@\240\274\016\034O\273G\362=\275\025\230\324=\3255\347<\302y\343\275\230\340)\275Q_\303=0V\177\2756\253o9\250\360\356\275r\244\253\275\246[\316=\nj\323\275\035\371\276=\r#\220=\256\235\227\275b\006\252\275\371\250\221=f\316\273\275\210\013\212=\305\237\227=\267\365\201=uO\330=\343\010[=\317w\350<\037\276\024=o\221\305\275\014\340\373<J\271\210\275\343:\340=ST\322=\206\212&\275\336\330\315\275K(\344\275\345nx\2743\037\244=\033\257\276\275\251\3324=\027\207\315=.\364\307\275\233\006\343:isE<\246\273\313=\031\2510\272\210j\253=\214\227\3619\310\273\262=BfJ\275|?\304=DN\216;\370\345\025<\t\335\221=3\367\345<\246\327Z\275\027\343\342\275\267N\217\275]\236\264=\272S\246=xtU94;\257\275\341\334S\275\303\t`<\306\277,=5\367==\204\271\020;o\357\350\274\275\262w;4\373\223<\203I\274;\037\261\341=T\036\330\274\300O\272=6\373\335=\221%\017\275\033\320\256\275\2721\352\275\370\334\310\275\267[$<\330u\230\275\371G\310\274\215\031\261=\337\203V=\215\200\260\275\237n\232=O\336\222\273\304]s\273\322\271\237\275]\036\021\274K\014\250=\300,r=\213\300\356=\305\276\204\275\026\215\316\275[k\347=\302\020@=\233Oj\275\325=\275<\327%S=F\222Q=#\226\025\274\3315\002=\tO\250=*\'\224\274y\374\346=\301\342+<\252\322}\275\213D3\275K\\p\275\023\262P\275\356,\342\273\362\357\344;`\351\257<L\202\322\275\221L\314\275\264\343]=MO\275=\353\357\330\275/\353\270\275\014\350`<\205\356C=\020\337\321<\250\262\002\273\340A\204=e \310=\000\001\252\275\\\300A=\2608\257\2749\354\036\275\022d=\275\224\362\256\275\230\256\361<\303\"\333=\207\000\276\275\303\311\247=\nO\265\272\252}\257\274\003\307\006<#*\270=\344i7=\225\344\317\275\221\246\277=?4\256=uq\225\275E\361\017\275\226\222\230\275\0364*\274\303\247\250<\\O%<\307G\273\275\tB\254\275\002\027\223\274U\302\217\273\r5\335=\306<\245;\003\223o\275V~\316\275\356\237\215\2757n\300=N\314\375;\304\327\001\273\250mE=j\272\365\2714\2471=)2\205\275@3\t\275!\216Y\275-\361\005<R\274\205\271\327\252K\275\255D\356=\037\263\200=\275\226\321;\315\314\327<\333\240\344\274\355pm=\014\324\327=\020SB=\022\tN\275\252\345\201\275T\357\236\275\353<Z\272\036D]=\310P\'\275m\315\366<\252`l=Vz\241\275vM\341\274\367\265\226;q\326\237<\032w\255=\340\357H=\341\252\207\275[K\302=\323)\223=\'\375Q\274\266\327\306\275O\241/\273l4\325\275\210\232i=y\254\347=\255\246\226=\250\326\224\275\301\030\340=La\246\275\001\rp=\331w~\275\204\014\315\274\345\304s\275J\260\200=;o/=Xx5=\304\226\255=\211\300U<<|\352\275\213,\206=\341Z\311\275}\310\255\275A\237\336<\275L\322<UU\334\275\013(u=\335K\211=hK\255\272\246fr=\341W\035=w\361\273=%\264\205\274A\335\322\275\321\202\224\275\221`\003\274on\307=\200\025j\275\2333\267\275\333e[\2754C\321:@\023\001\275\230P\324<\035$\272\275K\"\245\274\374F\325\275De\264\274\217\213G<\004\017\201\274\261\025\343<\037\257\246<\007_W=\2008\364<y\242\350=\353_\275=\234o\345=;j$\273U\2317<S;\337=d\337\357\274\337\262%\275}\036\262\275\371\305\000=\207\372\321\273\\?\320\274\322\016H\275\023\263\302\2750\325\230=\2677\026\275\002\211\275\275\373\002\340\275\020\261n<\300\275\263\273>\317\t\275\0160\260=\333yD\275\250\264\247=\255\266\252<\202\213\217\275a+\344\275\316\217\234=\302\311B=\345~w=\305\351\237\275\311\373\342=\001\233\353=\355?\241=,0\002\271:\221~\274\360j\255=\304\205\207<\025\376\255;+\031\322=\354\231\304=\001\242\242<b^A\275\t(\026\274\246->\275\322\317\274\275\036C\220\275\345\237\327\275s<\214=\361\273\327\275\203\325\261=H\267\246\275\271\365)\274\021\'\034=\035W\227\275R\342E=0\'\374<\233\235\307=O\222\317=W~\337\275\356\271\310\274(\376\265\275\\%\276\275;JS\275\321\354\274<{\010\030<[\235S\274\343A\347=>M\024<\000\335\225\272\325X\211=\366\002\225=]5\353<\316I\345\275\364\035G=\366e\346\275\213F\201=\ru\374<V\276\356;/\224;<\266\276%=\250\266\355\274R\022\270=\315\3114;\243*\215=)\3738\274(hK\275H\226\267\275\360\007\336\275\334\020i\275\244\365\262\2755@\177=\222Y\300\274Y\3218=$h\247=\257\375\206=\340\272\352\275D+\256=\224\000?\275\0133\333\275\220g\335\275\372\301\277\275\360#\\<\306\200\244=v\225\303\275\317\343\214;b\007\256\275\271\351\343\2759l\303=\005\336\214\275\345\325\204\271\010\242\350=\206no=\203\240\340=\313\351\260\274\311\177\317=\311\010\024\275\365\201\305\275\341\216\310=b\'];\177\260\333=\207U\244=\377\334\217=\n.\n\275\355\000J\275\262}\234=\241:\331\275e#M\275\242iE=n\3609=\315;\200<@\002\340=\350\366\202\275j\242\r\275\340\340\356\2746\020\347\274\356\320\261<\342\337+;#H\236=p\332\326<\245D\017<\013.\243\275\217\207\332\275\336\021s\275\3131\323\275]\311X=S\332}=\2279~\275\302g|\275\3350\301=*\014\336=-\272\315<o\275\021<xI\017=\331\301\277\275f+\276=>\t\372<\254%\006=\203\354\371<G\311\245\275\315\333\0306\220\222\224= \002\337\275\260\016\002\275\254\304\277=\321/\213=F\220\320\271/\350<\272\364O\220\273/\2537=\222\373\276\275\037(\336=\314\213H=\310\353\212\274i,\363\274P\344\225=\246Ym<!\212e=\t\220\242=J2e\275.\224\331=X|\210=\374\026\203=8\367\231=\353\237\024\275\003\252\305\275\220\222\232=\024\366\324\275\003\316\231=\377\377\326<\366y\355=\357\017\334\275I`\321<\345d\220\275\245\313x<Z\200=:Gq =\272\324\262=x\222C<p\250\210\275\023\267^\275\255Gq=\331\366\206<+\233\026=%\271&\274\310\314\277\275\246\317\276\275\271\354\274=\307\013\201<?+\203\275!\215T=\276=\203\275\2711\275\274\277\344M=\0148\341\275\344\340~<\302\211\245\275\350\t9=\352\r\371\274\0373U\275\r\365\r\274\244{S\275u\027\346:\036T\303=6:]=\250li\27562\032=_\360\n\275\355\246\020\274+\031\302\275\030\n9\274\002\320\253=\313\237x\275\225\376\353\275\032F\204\275\203kT=X\313\346<wK\276\275q\337:\275\242\377\211\275\177\242\345<\354M\347\275\256H\215<m\231\253\275\202\332\026<v\316\324=\315\234\216<\014i\222=I.N\275\367\374\201=\262Ip\274\310\330@=\334\375u<C=\354\274\240n\215\275\234\250\236=\343_\317\275\301\340|=rJ\306=\323j\204=NO\261\275XJ\352=v\n]\274\330<q=g\331\355\275\201\245\036\275^\203\201\275\373\364\270<\315\025\235:\007\177~=\277Y\222\275{\300\304\275\321g\254=\034\030]=\243{+\275\215\351\222\275\360Q\335=\\\204\347\275(\013\275\273\006K\340\275\230\352\201\274\366\345\342\275\362}R=\340\014z\273<\310\276=\021\251\274\274I( \267)i\327\275U\216L\274\023\275\201\275P\000\360\274)\272\235\2752\'$\275\277\243\277\273\376\205\354\275\322\221\023=\251u\014=o\021\355\275Y_h\274\215\210q\275Y\324\207=\000\257F\275\216\251K\275\017E\204\2742\264n<\302E\217=n\014\274=\231\353\353=\252gO<`E\256=\206\301\210=\036#Y\274\270\265M=j%\222=\177c\312\275\016\374\000\274\300\342\034=\006\354\353\275\270y_=r[\251\275}\224\\<\001\247\227\275=\224S<\372\324\274=\022&8=#\235\365\273\263\307]\275\340\322\204<G\244u\275MTh\275\362nk<<\300{\275C\n`\275\033\313\312\275\261h\203=c)\311\275\036U\346;\351\227G=\257\260\017=\361\376\036\275>\214*;\341\317\360\274\001\'s<\032\021\301=\367\370\254<\320`\272<\201\026\274<J\215\313\275\233L\340\275\360\274\351=\224\317Y\275\347/#=\315,\276\275,z2=D\200\t\275\022\324\261\275\244\3037=\215\236\251<*\261\225\275K\246\276=3\204\240\275?\334\000\275\006\220R=}\344\276=\215\002\341=\372,\253=\037Z\221=\271\367~\275t\202\005=y\177!=\260\317W;\267\333&=\210\205p=&\003\270=L\022\265\275\207W\307\275\202\275\014=\026j(\275d\201\263\274gZn\275\225\001\021\275\017\326\277=g\307\336<m\035\004=\013\361R\275\217\204\350\274[\340?\275\024\t\204=\365F\360\274HK\300<\223\270\202\275^;\242=\033\232\"\275\236\342\014\275\'\314\247\275\345\310W\274\302(\214\275\267\025\030\275j\243\020\274a\350\025\275\313o\313=Z\230L\275G?\342\274\032\354\252\274zS\241=\244s\006=3\344j\273\231P\273\274\375\014\305=Z\360:\275\362$\223=w\223\352\275\001\204\256\275dH\255\275e\303\260=p\t\267\275\326\023\320=\334N\351;/\"\r;l$\231\274\346\347B\273\245\224\262\275gZ7\275736\274\303\352\316\274\212\032d<\030\245\237\275o\004\025\275\205s\221\274\003ba=\221a\237=\353\244\256\275L\200\313=\004\244/\275\024\277\321=\216\200\254=?j\331<\213;\223\275\037\344s=\027\265\250\275Wz\267;LR\354=\375\344\340=\010]\242=\023R\327\275#b\204\274x\362\"\275\357\002]<\305i\215=\357y\234<8\023\343<h}\330=>\327\315<\2553\256\274\177u\270\275G\237\231=\236\200\305=oW\306\275%v9;fi\236\275s\323\324=\200|\264<\250\364\263\273\242\323\231\275\3031\177=\344\222\210=\244$\354=]]v=\212V[\2751\274d\275-\217\310;*\003\266\275\272\202\233<\353\246\320=\200\216\342\275\370\377\237=\223]\356<99\274\275\263\266\233=\322\033\303<U\r\345=\3007\222=\323\353[=\370\352\250\275\310\224\315\275_\345\276=\272LM\275\276G\220\275\255*%\27429\013\275\006\032\276=\236\t\367<\273\275\364\274SXb<\263]\233\275\325\036X=\262wr\272\334\334\237=\362\033\221:\265\214c\275\025-\304\275c\005\347=\376\246\211=\325\370\037\275\033\"W\275u\207v=\350S\350\274\337)2\275\355f\202=\360\354\317\275\2144\340=S\233\262=o^\036\275+\322t=\005W\251\2757\177\273\275\311\305/\2754\242\331\275k\320 \275\257\377\224=\346\'\311\274\204\341\366\274\241I\316\275\005\367\020;\243<\336=\364\016\263\275\r8\343=\372\'\355=/w\305=7\313\016<8R\243\275[\240\310\274\271\267,\2757jT=\201\355\212=\002\000H\275\216I\001=\321|\032\275nK\037=\3206\301=O\003\317\275]\221\376\274d\300]\274-$\261\275\371\0100\275y\322\245\275!h\322\275 v\217\275\307\234X\275\376O\036=\303\340\336=\234\"\2759G\350\256\275\256\201\334:qL\316\275\237\035\305=B\355O=\252\277\215\275\214\375c\275*\351\260\275x\254[\275\314-\234\274\002\223\253=\247\343\354=\270\321\217=R\003\\\273\322K\202\274\326_\327:\246\005\272=\251\205\200\275!\344\353=\374\241\254\275\332\246\344=\212\026\244=\2422\265=9>\345=\311\235\353=)\261\343\274\203\225\222<\200\035\233<KC\315\275$\303\201\274K\251o=\335\032\033\275\336p\224\2757\270F\275\235S\300=7\r\377\274\2359\332<\235\333\364\274Zg\345\273\344\347\354\275\014\214\233<\273\374\351\275W\362o<\326\024\252\275<S\300\275c\020\353\274Y\262\341=\037\266\301\275I\036\371;|\307\225=V\020\235<\240V\227\274r\326\273=\303\317\326\274\310\002\333=+\025\303\272\364\026C=\247\334\253\275\\R\327<\360\325\251<wl\344\275c\320\365;?se=vN\275=\334\267K\275SY\313\275\227\247 \275\207\247\020=\361ZY;\020\263d=\335k\256=q\221\321\275\367L\017\275\260\000\336\275\223}\307=\310I\361\273\217\323\206=\234iz=k\354\351=\0323\316=\330X\005\275\274\304\317;\006?\322\275\201N\025\274\346yr\275o\264d\275\0162\210=b\030\347\275\270\035q\275W\257/=\314\262\'\275\013\254\306=[\237\034\275\265\345|=\313\211\221<\346\350\261\275\010\034\007=\322\360\243=\206\327\243\275\230\242t\275\344Np\274\374\256\266\2759\330\333\275\310\255t=\"\332\347=\002\3115\273\367\355\360\274\321M+=%\247\266\275R\034\353\275\260.\177=\315\r\227\275SSH=C\363\221\275\213\202\303\274\200\336\206\275\326\252:\275\314a\202=^0\031=\036\020\246=c\201\243\274\010,,\275\326\346\371\274\261\342\336\274\352\324\271=\244y\305<\355\2534\275Ow\224=ZFe;\307^\262\275\202\241\226\275z\205\344=\353\020S\275\247\301d=F\336\265=\033\332\007\274N\303\017=\002I\356\275(\261\376<X\361\207\275\223\231\361\2743\200\250\275\201\306\312=\273^\321=\025M\021\275\267\265\217\275\267\375R\274\325\260\251=\247\250\224\275\327\337\035\275\245\236T=M\340\330\273\313\367O\275\035\222C\274\240\207-\274p\r\351=47\266\275\245Z\213\275\r-=\275\004d\217\275\265\233\242=\037:\345=}\034\306=\354\236\255\275\3520\221\275\244G\302<p\340\240\275\205t\034\273\222u\252\275\213\033\202\275\373\3255\275\224\363\274=\303\255g\275\372\030\246\275\033\270\230\274\013A\307<u\202\231=Uu\253\275Z]<\275r\344\204=\014\264\313\275[\363\251\2752\360`<oC\341\275\002X\351;}_\277\275qwI=.\005\021\275)\237\345\275\321\253\316\274+i\277=\375\342\252;\2106\234;\206\214\274\275\024UE\275\2166\337=C\215r\275F\010T\275\325p\271=\027l\227=OU\241\274\350G\351\275\257\016\340<\256!7\275p\002\353=\257\215l\275\250X=\274_\022O=\312\266,\275>\330\302=l\345\337<\334]\317\274v\001\343\275\366\025\324\275\367\317\237<\355\341\000=Q\347*=\336\345\325\274\024G\n\275.\321\271\274\024u\220=\377uo\275\3237\347=G\224{=8\233\323\274\263\210\022\275\034\266\004=\245\001\260=B|\346\275\353\345\220=\302\310\227<0e\032=\230\234\302\275\255\205\206=\310\n\357<=\337\317\275T\006(=\277\324\217\275:fn\275\213k\021;=\253\024=\020\326\226\274KP\271\275\030{~\275\217\341\206\273\037\222\t=+\361\227=\242\271\260\275d\334\232=\376\021\260=\325b\242=\333\355\212\275\313\311\231=\004\212\316\275F\2279\275t\310\310=\272\t\204=\335c\257=\211\355\257\274\336\177\202=\337=?\275\271\372\326\275\356\0149=\332W\020\275\221\316<<\222\304\254\275~\033\220=\002.\013;\305\323\304\275vW:\275\242\002K\275\330\353j=\254e\021=\334\376\323\275f@\204\275\006\3206\275;2\201\275Z\017\313=\363T\232=\2100\221=\2134\221\275\366\355\356\275\222\245\227=\374\363\316=\213G\200<f\323\n=/\005\323=\322\204\261\274\323\223\260\275(\371U\275\035\324\271=\333\320\'\2750\001\243\275\244)\302\275)@\027=\261\263\222\274E\\\250\275\367I\221\275\200\377\304=I&g=\032\256C\275e\237A\275D\274\264\275\202\\\266=\323\r_\275l\005\027=\016\361\345\275\322\332\006\275\304\270\354\275n\362\274\275\240\373\353<)\\T\275}\260r\275\034\300q\275\033\204\275<w-\271\275G+G\275\211R(\275\277A\"=\361\373u=\214\220\326\275hH\331=\377g\007\275\265kk\275kd\002\275\256\273\305\275<\036\357=W\306\314\275\222Y\277\274\205\210\355\272\207\001w\275\363\354\337<\014\244\265=5\306y\275\241\376\266=\333Z\016=/\037\227\275\263q\215<\273\341\246=\2332i=6\314=\275Ti\246=\024\321\347\274\227\305\253\275c!\357<\246\253\372\274CO\210=~%\002=<\313\305\274\205\312\337\274\227\277\025=\032\303\337\275\225\204\251\275e\245^\275\352\230r\275c}\034\275N\315\035\275%y\265\274\237\\\347\274L\301\253\275\377\253\272\275/\356\256\275]]\220\273\357:\265\275\302r\217<k\315q\275\250\273s=_\225\231=\227\271\230=\203\214i<\200Q\250\275o\275\231=\243\024\311=z\346\335=\2634\334=\004n\247\274%\300\207\275\246\020&=\r\232#=\316~r\275QO\205\275m\216\264\275*q\344\275\027\207\320:q\212\340=\036\231M\275?\035\324=o\331\230\273nS\300=\355\004\366\274^\375\234;\237\301S=\2322\225=r\253\224\275y\330\235\275\226\037m\274BS$=\240\306\221=\270\032\262\275\260\317\227=\227\365\000=\374\260\246\275\201L\006\275\013\222\322\275[\207\341<\366\214\370<Mj\003\2752\205Q<\252\r\307\275h\276\270\275\377\226\234\275\337e\347\275^\"\304==\010c<zw\263<\010<\310\273^\330\321\275\351{\256=\2734>\275\314\301L\274\261\345\001\275\3547\004\275{\271)\274IT\271=\250Y\362;\301v\245;\303Q\316\274\352\006\352=\315\025)=\367\370Z\274\326\005\233=P^\236<}KV<\302\303a\274=\357\271\275\027A\243\275\036\270m\275\222\277\343\275\322\361\000=\226P\210\275\314\241\315=\347g\334=zhC\273_6\230\275\322Sl<\2012,=\010cY;\362i\203<\037>z=\266g\262\272\367\246\202\275\231\257\212\275Q\373\344=}\315\224\275\217\253\256\274:\327\245:s\233r=\346\326\262\275\220\340\031\275\314l\213=\201y\321\275\265\236\335=\275\250\200\274\024ZJ\274\360\240\027=X\274X\273+|\211\275I(\273\275\332r\217=\305!\232\275\362\211\336\273\326s\317=\002\306\330\275/\'\301<H\037g=\312\243\247<\373\2033=\322\211\320<\362^\251<\'\213\270=\314!3:\0332\256\275\351\332.=\315\003d\274\326\202\236;\000q\312=\333\354$\275oG\016\275\345\2054\275k\273\021=\273X\253\275\033\230\356\274D\022\220\275Y;\227\275\2236\020=\316P\203:r\257\266\275\215\246\206\275o\271\340\275N\373\352\275C\371~=\014\364\327\275\017Ci\275Hs\210\275\311\277\033<\253\301W=\017\207\235<s\315]\275\336\355\372:\350\266k<\373\216\250\275\203n\356\275\'\360\026<\225\034+\275\'\334\242=\323\356\304\275-\340I\275\037\377\005=A;.\271\313/\270\274\315\230\201\275;7d\273\270\373[\274\263g\242<j\343V\275\371L\216\275\372O6\275Jkv=D\031\354\275\236\373\323\275f\253\234\275\030Z\307<\031*\272=\020\314/<\277-_\274l\205\244=1\202$\275\177Y`\274z\353\253\274\276e\203\275.[\246\275\261\305\213\275\264\316\251=F\257\027=\265,9=\355\366\210\275\261\353\266\275\314{\346<<\325A=\241\3142=\320\034.<v*K\274\005\211\035\273\016rS=R\242\233\275,l\223=iG-\275tW\273\275=\234\272\275\342]\205=\322~\203=\303{\335\275\215M#=-H\032=4|\270:\223X\312\274w\242\317\275\254\013\270\275I\207\202=\030\3378=7F7\274\242\023\247=j\214\205\274\035\301\271=\230\231\215=\350\217\323\274\025Y\271\275\233f\350\275\323\274\'<\037\367R\275\227\370\264\275\314\272\352=5\330j<Y\340\277\274w\225y\275\010\024L=\002\n>\275`7.\275P\377\233;iC<\275\025\374\365\274<\250\243\275\273\014\326;U\347g= \366\010\274-\364\236=6\263K\275Z\220\005\275\361\212\250\275\242\206\343=\300\213\234<#\270r:\205n\312<\022\271\"=\355,B\275\026\257<\275|\364\251\274y\224\305\275\022\037|=\275\352\327\275y\251\224\275\312\031\363\274D\223\022\273.\032\215;\235\341\224=\342\307\025\275\310\214\260=\202\250\247=GN\231<\001\347T\275Cc\246<u\244\311\2753\311\221\275g\254\223\275\353L\301=\257\266\275\275\310\251\331=\332\2478\274\245\277\033\275/\377\355\275]Y\253\275\224K\t=ZO\303\272_Xq=\021\355\225\275\353\310\241\275\013\223\203\275Me\303\275;Y\253\275\332\367\354<\2241\342\274\262\331\370\274R\206\310\275\274\020\231<\323/\262\275\361\315\274<\027\211\322=\250\344\325<\257\310\350=\216n\312\275\335\211\303=\241\275\342\275Pwj\275_\327n=\360\272;=\203\354\317\275\365\340]\275\\\247\335=v\265\213\275\347a\244=\333\0018\275\302/\225=0\333\263=\255\346\247=pm_\274k\223\343\275\224L\206=\226\276\314;\317\034I\274\227P\301\275\016S\351<\347\006\247=\230u\221=(\252\245=\014\323\256\275\302\006\301;\313\343\306=\377\030/\274k\2015\275\000\035\366<|\262\246<2R\276=Z\333\246\275\003\036&=\221%\362\27373\303=N\211\206\275\353j\352\274 \303;=1\\\323=\251\261\200\275\246\267\314;\355\314\247\274Sf\352=d\326\037=\t\277\217=@2\324\274\266\337\223=#\353d=d\025j\275P\021\213\275\335\333\211=\313KC\274\247\216\207\275\035V\257\274p\200\365\273\3106M\275\312\034Q=\307\317\306=h\221\n=\355\373\227=a\031\272\275\024\230\242<\227\367\n=?4\345=\177\252\255=2v[=WT}<lh\323=R\375\210\275\350\275};o\316\232<\254.\356=\035\223\301\275z\262\337=\260\377\211=\033M\010=P\314U\274\002\257u\275P\000\266\275\0004\264\275\301\206\252\275\273\212\270<Y\2271\2755\312\222\273\376\357\343\275\241\325\232\275I\202\342\273\210\362\200<\273A\016\275 \347\367<\335\323\357<\370\350\325=p\251\353\275\365>\357=U(\262=\3019M=\377GD\275q\306\366\274,\321\271\274\347Q\252=\3509\261=\226\003\267=\225C\032\275\260\263\223=\220\007\271\274wY\241\275@/\330\275n\254\204\275\2472\250\275\263\020\264\273\350\004%\275R#\304\275\031\354\301\275\210\217\327=\323\253\215\275.n\234\275\264D\262=B\026&=k\224\312\274]\356\330\275\367=u\275\"\234\256=^\010\277\274\\\032\341=\005\362\301\275(x\360\274:y\203=R{\025=\224\347\302=\271\216\317=2\225\000\275\336_\331\275H\036\355\273\277\276\307\275^\342J=\334~N<\224_\212<xV\274\2756R\257<\376\242\355<\326\350\017\275\177\256\254\273\256\330\270\275\216x\225\275Q\273\242;a+\'=\213\306\375:\336\267\213=\031G\224\275\206u\337=>\343\324\274\277\016\244=\272\006\344\275`\233.\275\274\202\250<\241\353R\275{\312\300<!O\305\2741\250\n\274e\330\237\274\331\273\364;\211\217\223\275\002:\216=p8\321=aiT\275\352\212\200\275\r\226\261=\201\334\204=}\005o=~fq<\027y\244\275\217\256\202\274k\035\207\275\020\316t\275v\355\225=f\340\325=\340[\300\275\324\345@\275S\031\241=u\211Y\275\277h%=&\235\005=\251\350\213\275\232BB=1\022\264\275E\201]\272k\262\331\275\216\227\267\275\006\217\304=\320\010\305\275/\242)\275\373\346\222<\024\215\343\275=~#=\320-\343\274e\230\214\275N\206^\274r\354\270\275\025?\222\275\254\330\032<\200$\203\275\257\271\240\275\233\352\206=~\350\344\275\005\361\333=\325\234\316\275\255\220\214<QJ\013=\261\"\206\275\362\322\002=\303\324\214:5\246\250\275\004f\273\275:\001\272\275&\003\344<&\033\225\275F03=8\022/=D\212\227\274D\014\274=\241\313\323\271?R\305<\034tM=\317(\314=a\301\227<\315\370\206\274\t\r\301<\353\245\037\275>U\260\275\373[3=1X\207\274\244\226f\275\376\032\350\274\334D\220\275\306\257+\275y\246\322;XvL\275\244\236\343=\320!\2009\t\310\236<?\274\256=\021\345\254=\"\223\321\2750\350\204\275Gx\236=L\354\354\274>\0351<\215sI=\347\000H\274Z\231\250\275^\2415;\300[\273\274O\325(\275\001\273\305=\211F\253\274d\305\267\275\310\310\270\275\037\017)\2750\367\261\275\222\r\331\275g\216\220\275J\212^\275d\016\312:j\233\003\275KK\322;\316\203;=Z\3042\275\274h\241\275\262\225\211=uu\326\275>-g:\310.8=\226\031\253=\030\204\332=\313{\023\275\333$\321=\332t\260\275\031\364 \275\234\3205=\2345\323=\213AP\275\272?\213\275\362\026\352\275\036l\351\274\016\353_\275\323\020\343\275z7\320=\365P\210\275\017\037\206\275z\330\206\275\252\031\345\274z)\216<\342\331\341\274\210u\r\275\235\211\314\275ykw\275\273\215\241=\030\352\202<gaD\275S\020\314<\275l,=,\212\351=\021\266\336\275\000(\242=p\350}=\345\317\251\274\253\214|\275Q\n\322;\300\332\371\274\033\022\\=\'\357\274\275\376\310\241\274\000\n\351\275K[P\272\003\204\223\275\343UV\275\304\265\347\275\203\264\217=3\334\334\275r\355\233<\263\341\306\275\005\303,=/\334\307\275WTc=\214T\227\275\377\177\222\275\\f\032<\342.\364<\023Z\312=r\365.\275\375\340\264=\361\222\355\275\276\375\354\275\273\227C\274\361\271\216\274\205\316\226=\024\255\226:\302\023\266\275\r{7=D\327\276=I\240\207=\345[z\275l\n\216\275X~\252=0\225\335<e\321\214<\265\014(;|M\321\275\005\321\231\2752v\'<\317\201`\275\016\001U=\310Lw=\252z\311=\2548\241=F#4=\210\247q\275]L\321\275\264aD<\300\304\235\275h#\t=\344\373Z\274\222\332\207\275\362\320\345\274/\271;=k3\237\273p;\243\275\343\276\037\275\035\035\316\274\356\000\334=\024\t\245<g\352\243<?\010\207=\261S\262\275\364\323[\273\tu@=\366\267\204\275\263\370\301\274;\221y=\010E\330<:\243\334\275\267wL\2759Z\201\274iQ\327=\211I\243<\025\326b=\312\021O\275F\003\254\275\353}\244\274\330YV\275\372\\\224=\276Y\247\275\372\260v=\203!\330\275\021j\021=\341\213\305=\245\362\202\275f\021J\275q\314\201\275\r\324\222:0_\347\275\025x\204\275\240 \213\274#)\352\274fs\235=\351\2526\275\366.\360\274\317\263f=\024E\200=8\322\035\275 i\216\275\276\253\264<x\226\305\274\352&\316\274i\037\271\275I\322\200\275\214+\033\275<\033\263=U\022\305\275\376M\252=U\373\210=\r\265\212=6\252s\275\327\305\251=^`\303=\234\213\377<\016\r\272=\016\206\203\275S=Z=9c\353=0\205\275=\024\335\245\275\267\t=\275\267\200\204\275!\336s\275\232\253t=\344\303\245=\264\304\246=_@\326=\342<\001=\364\241l\275\253\275\265<Rf\243=\025Y\267\275\3374\207\275\005H\355=\032x:\275\353\032\272=h\355\232\275\363\264\254\275\361\315\217\275L)\335=B y<@\001\311\275\307\300&\273|&\227\273\\\212)=Q6\006<\312\314\340=1\370\017=\232\260\314\275\"\346\312=<\365H;/\251\236=\016\231\323\274\232g\n\275\325-\251=\266\362\263=\200\206\267=\2171+=\r\363~\275\315?\250\274\275\2767\275\304#\270<?\022R=\257\004\237\272\241\375S\274\225\020\037=\321s \2751\232\220\274Z\032\274=Y\361\223=\323d\266=\214e3=DY\314=\264\305x=\346\005\222=]g\207\275$Q\247\275\372\3418=C\003\333=\0377\276=\203\303\247=\033\345\177\273s*l=`\363\030=\315\263 =.\271\037=\354\240\214=i\027\225\275\236\274\203<8\021m\275\3160\t\275\366\200%\275\312\344\215=\255+\257\275\216\234\251=P\r\216\275\322\261\225=]\3468\275\304\213\343=\215\347\234;\227\315s=\220\202\371<\242\004\037\275\226\321\346<?3L<\343\232\351=\272\206\257\275/$x\275\037\2669\275j\251r\275\312/\324\275e\221\004\275\275\311\207\275 (^<\350\247k=!B)\275z\215\341=p\336\300=\265Z\211\275\310\344\202\275x\240%=\217\367\325\275A\303j\275\323\034\250\273,a\251<\203\007B\275\253\262\351=\357Y3\275qR\226\275\253\365\204\275\035\364o=~\202\222\275T\231\320=\323\240!\2754\006\020\275\006\225\315=$\026R\274|,\247=)\352\242;\2222\242\273\036\346e=\224\016\234<\261S7=\313\r\327<\300 \270=,\250\256=6\177\305\274\241\253\246\275\304r\034\275\310^4\275}(\035=y\240\230\275/\021G\275\266P\307<\035\316\200\275\034\223,\275\255@\315=\374\355\016\274<\265\355\275\360y[<G\240\305\274HHR\275\341n\351\275\356\350\255=2\363\002=\260\326\002=\236BM<\rp\000=\3616j\275O\320\342=\234\201\255=J\226\211\275\241x\231\275G\257\245;\255\235w=h 5\275\222\371\324\275\325i\313<\346\005\257=\203\3357\275\373\336\304\274\376\301\310=Z\2727\275\354a\316<8\002C\275\273\237\t=)L)\275\024\260\014=\342\221\333=\014\276\230=\225JN\275\347\265\017\275@\250\275=\277\347\337=n?\301=4\256\275=#)\253=\224\254\207\274\037=\371\274\t\302\035\2759\266\325=\357m\320\275eg3<v\373\240=\256+\232=\236\234\273=9\304\235\275\276\222\320=Y\347:;\2253\320=\301V\004=\235\260\200\273\014\302\304\275[\014\201\275\271E\342\275 \212\205=\r\364\000\275z\312\324\275K1b\274.C\233\275\3249V=\244\335\213=u\234\t\2758\365\347\2744\n\315=\226s\330<\365!\177\275\311\276\033\275\031\325\222=\300r\373\274[\262\276\275\272\367\256\274\030\222\202<\035\332>\275\266\\\310=/\343g=W8\364<\025\265\204\274y\211\343=@t\371<\243\237\213:o9\321\275r\260\200=ntv<\"\232\263<\225\3428<Mx\235\275\225\362\020\275\272\216$\275\201B\211=j\342\216=!\233\263\275\203\360\013\275O\254\321=\247\315\271=\237\033\321\275\332\217\222=\215(\016\2750M\\\275\365GM\275)\005\331\274L\007\316<O\314\212\2753H\006\275\016\336,<\212q\307\275Io\367<\376V\235\275t1n\2751\205y=\207\032\216\275$_\026=\266\2014=\266~e\274N\033\216\275\322P\367;\000\003\225\275\"\245?\275\267\352\373<\301\376\003\275\366\225s=/Fi<\243F\223\274e\005\336=\311;\320\275\003\334\347\275W\260\347<\204\375\244\274u\376\220\275\260\203\350=\010\356\264=\215\331\221\275\0133e=\305\027\344\273\335\233*=\007K\223\275\202\036\000\275etC=\225\275A\275Jr\346\275/\352\223\275\346M2\275UU\264=\017\037\345\275b\307Q<c\2616\275\275\016\203<\354\250\256=\014\356^\275\026\257k=5b\346=\t\375\335=\374\215\353\275\211N\246\275\241\025\305\275!\221\222\275\'E\272<\364\374\014=u3\254=\027u\345=\207\333\216=\355P\272\275\373\274\352\274\2026\017=\326\233\332\275\242\014\237\274fN\"\274\324\327\312\275\363\333\r=\025\304\234=\010\302\231\272\033^\216;[;\221=!i\334\275\232V\325=.\274\250=\375\325\336\273\337\276a\275 \"\250=\351\315e=\216\347\244=\366f\313=\271$\225\275\233\364\016\274L\3321=\235\215\227=\265\204{\275\312\005\235\275\220\204\265=\207\246\311=7[0\275\241\345\353\275\007\323\201\275\362\267\221\275\250\356\341\275\255e\261\274\010d\211\275&g?\275\355\206q=@\3542=\202b\314\275k?\342=\207\315u=W\262\354\274\016\374\244=\257\330\351=\0108\354\273\312(k\275\036H\300\274\314\332\365\274R/\325=DU\354\275\035\306\220<\211\032\233\274D\022\330\274H\004\300=\261\364\342<;k\254\275\0109\205\275^?\231=v\332\031=\201\244\252\274E\005\245<\004\315b<\226\021\034\275c5\327=\001\231\236\275\357\204\256<#\345\274\273\327\004|=\026a\200\274\003G\225\274U\312\325\274\016\005\201=\202z\351=W.><,m\013\275\233\032&\275\243\ni=z\274\344=V\001\211\275\224Oc\275G\311\342=\324P\330\274|\317J\273M\304\201<\321\356\033\275\224\331\236=4\377\304\274\360G\032=\314\343\302=\027\315k\275\315\211\027\275\031\224\276\273-3\342=C:\353=\332M&=\222\263\251=\004\255\267\275\334h\262=\235W\333=\235\312\222\275C\014\246\275\203n\216=C\031]\2754q\347=\300\007<\275\375\206\256\274\375<\331\275zoL\274Z\321\212\275\nu\340\275\255j6=\223,\214\275%*\023\274\024\004b=]\244\251<*\".\274r\364\355\275\330\r\327\275l\265\336=\021\262\325= k@\274\322\351\245\275\351\355\307=K\227J\2752\226\270\275\000}\277=\226\021\243\275\315\271\257\275\037x\307\275\341\017\342\275[>\344=\211A$\275B\332\332=ad\357\275\262\\\002<\231}4\275\364\336(\275\010\2252=\322\037\263\275\350\364\352\275\307%2\274LV\250=Hh\247=R\\F\275\335\016\302\275~\232\313\273\313\200\317\274)\220\324<3\220\251\275\221\277\365\272\333^\314\274\014\310\253\275\263{\007\275\373\330\347\272\361\334%\275\270\227a\275\027\n\205\275\371`\253\274\t\336\265<\010?\253\275LI\351;\037\030d<\026\270t\275\367\331\352=g~\265\275\363\267u\275\371\345\354=\230\262\303<\220\320f;\270\232.<\234<\303\275\t\244\354<\375\205\231\274\222\265\217<\243\335\260\275\370\275\340=\307\270\006<\203\254\262\275\276\277,\274A\021\226\275v\257\212\275us\322\275\3514\267\275\367\316\207\275\354\212@\275\377\335\274\2753&\222\274|]\177=Y8\247;\330}\037\275\207\343\274=cd\214<\t`\014=\247\316\025=\307\220\216\275\350d\344\275:g\340\274\370[\345\274\362\347s<\363\364X=\240\346\212\275\374\036\036\2758\215\265\275\243\234\345=\300\323-<\3237\327\275r\236p=\030\177\314=`\031\026\275\223\037\314\275\321\351\261\275\213\271\326:\022t[=\022(\277\275P\255\351\2750\271\215\275\3772\263\275JZ\221=ls\277=$\025o=^l_=\035\304\200=\263\r\016\275k\363]\275P\310+=W\206l\275\2617\357\275o\354\250=\272\333\335=\332\004\233\275C\021\323=aF\313\275\262N\r=W\005\233=\212&\267=\016\246w\273\353t\r\275Rd\275\274I*\310\275\217\010\251;vF\266\275\273D\372<t[\340\275\360\2605\274\367\240\232\275)\326\212=\351\024r<\226\256\335\275 \332g=\216\365\203\275\212\034a\2757\312\332;\000\020\242=\031P\220=\315\325@=U\257)=cm\245\275\362\255X\275\000\263\250\275\352\265\236\275H\251\351=)1\323\274\277\215\311=\3070g=\225\243?\273\023\2222=i}\204\275\363\243\242=D\232\234=x\335\022\275\330tO\275p\361Q9\005\337 \275h\212\360<\251*d\275\256l\311=\220\275\312\275\337\275\271=4\325\250\275\330/\213=\276\227\266=\212y\251\275XU\320=\356\020\205\2759\364\227=\207\221o=\245F\257\274\nW]=\277\331\221;(\331\323=;\013t=\003\206\225=O\265!\275O$\205\274\266\357\321<\276%\223\274\367\026\342=S\322\273=\310\020\204\27501\277=\241\233 ;\357S_<\307\362\270\275\352R\266=\001\277\'\275\020\035\316=b\3720=\277e\320\274\373Q\177\275hkD\275\376\206\030=\316m]=!h\337=F\215\210\275\354(\315=\365m\202=\336a\216\275\346v\303<aL\247\275zh\327=\032o\235\275y1\255=\276\372\n\273N\261\303\275K\004\020\275\'\0237\275\220\275\305\275\206.j\275\325\036\205=^$\356<\34205=\013p\234\275h\034\026=@\326\355=\273\344\225\275\212\377\304\275X\366\022=O\223\303=\267\230\343<\305E\212\275\320\207\325=\364\346\356=\375%\260\275\312\314\303=\346m\220=m\353\221\275\352\235p=\246\214\233\273>\217\226\275l\241\213\275\t4\267\275g!\225<\356+\311=\350d\253=\376L\253==\325\245\275\204<\302=\231*\240=\305\324\327=o\332\237\275\371\020\307\275\232%\221\274\247\306\203\274\r\216\231:yUb=yt\254=\221\303\302<8\377\005=\324\027\246\275}\'\027=%L\027=\236\325\372<<\357\'\275\267K\201={\243Y=%#\315=\275\363\353=\232\227\260=\207[\352\275\202\204\203=\302\207?=\346\006\331\275\310\210\310=*\374\013=3\037\335\275:CT=\340\206\320=Q\210K\275\363\237\356<R\324>\275\010D\261=\"X\302\274k\370\265=\006\004\221=\260\335h=\014\343\250<M!\316\275\030\001\212\274\032\251=\275\374\033,\275X%9\275\361\322\001=\177\306\254\275qx\204\272\301\310\357;57\264\2758\313\226<\341*\235\275\214\205\3529?\031\220\275\364\347\277\275J\325[=\351\024\216<\315\207\220=u\212\310\275M\021*=\027\202H\274\224\032\254\274\205\255\311;\236\215\252=.\204\326\273\232_\255=\re\350=n\357\235\273GM{=\320\317\317\275\300\023B\274\373\210\001=\002\324\203\275\316\333D\275\365\232!=.\246\245<\343\230&=\030\270)=\377Y\225\275\336B\202=\253:i=\273F1=\205)\301=\254\262\215=\337d\231\2758\325S=\374:\317\275\354m8\274\341@w<E\207k\273\273\226\213=\234c\223\275\022\243U=\205\004\277\275\214\007\021\275\271P\027=\235\342\304\275D\336}=\216\034W=v\014\264\275\252\223Q=\020\345\347\275\231\267\252\272\301\323~<\337h\003=\032\225\262<\026\252B\275\217\026\202\274\305\n\352=4\354\336\275\352\253\267\275S\376,<\231\253i\275\353^\305\275\200\355\303\273\361\336y=\267\030\326=\036\260\242\274\244K\213=\220\254\340=\221\204\217;\342f\245=w\035\310\275\244w\231\275\327\345/\275\\\345\362<\032\235\230=\303\241\350;\t\200\244\275\373m\321=\324)\301=G\030X=P0l\275\313\256B=\316@\241\275\314\006\267=\220\366\220\275UT\007=;\365\230\275g\211\355\275\025o\327<\240?,\275\237\377\304=4)\271=\317\214\201\275\270\253\222=;\304\200\275A2?\275C8\016\275tLU\275B\231\341=3-\275={\312\322\275g\2346=\235\014\221=\243\024Q<\303\230\343\275\277a\247\275\211^Q\274bT\272=\200;\230\275\267\336\317=\013\327\234<\265\373\273=?:\250=\242\331\307\275c\220d\275\235\215\n\275e\256y=@>|\275*x\370\274\275\323\326=gl\331\275\035\014\242\275s\240\305\275\022\255\306=\363\320\306\275\273N\022\275\221\211\201=\017V\264\274\337\332\265=\\\371\330\274&\255\263\274Uk\314=<\033b=\245\307\260=\313\274\020=\315\312\027\275\361u\326=\311V\253=\327\352~\2756c7\274\344\007]\275\247\363\360\274$$\242\275\261\344\355\275\242U\207\273\353\216\324\275\"\233\265\274\027\203\246\275,\223\"\275!c%=\032OX=\313\027\203\275GM\307=Y\346\274=\244\216\217=0\314\266\275\314\217\211\275\212\367\201;t\374\221=Tt\305\274r@\252\275\354\022y\275\200\007\357=[R\300\275\314\020\217\273\0262\223=\351Zg=uy\200<\267\300\251=2\252\223\275\351\317\253=\252\300\'\275\200\237\206:\361\221\301<\226\273\235=\362\220\207=\262Z|=\203\245\303\275\253\210\214=xQ\307\275s\032\243\275\306\2260\275\212\263\036\275Y\312\256\275\314\263\334\275\321\013\233\275eZk<Z\3035\273Iy\245==n\321<tnj=\024\331\352\274\272]\034\275\000\250\266\275\316\377\000\275j<\300\275\312\331\310\275(\021\317\274B\304\207\275oD\225\275\334\336\226=\370\252\322\275\032\243\320=\263}\034\2750R\301\275\367\261\265\275\351,\254\275\245,\354=\333\211H=\270\242Q=M\277,<\033;\376;_\346N=iE(\275iav=\373[\274<D\232\216\275\0031X=\307sq\274\215\342\272=\313l\310=>e\230\275\022\357\325\275\243s\215\275\366\326\230\275\204\271\007=\266\237\201=7\237\330=\"\274\327;\030\240\324=\204i\310=\302\216\211=K\016\342\274\330\002\230=\203\271\242\275\214\363\255=\256\222\220\275\372\352I<\212P\346\275ti*=\215\222\335<c6\357;\354+\350\274a\276\354\275bR =\216q\217\275Di\206;~\233\007<U:!=5\207J\274\212?B=\242\215\327=g\356\364\274\245\265\355=\035\371\333=%\301\320=\227~w=QK\264\275\017&\276=\267X\265=\243{\342=\210\332\037=\322G}<\036\316#\275\022\327\340\275\030\315\243\275\323\035\257=\222\'Y<c\3367\275L\200\343=\217-\350<\266\260\210=\3161\310\275\017\010\233\275\321\256\005\275\337\305\200=\021\003\n=\335\260\017\273~\335\264\275A\325\216\274\253\361\341=\334@\242\275\257\323%\275\034\232\023=P\017\244=\327\265\331\275\374K7\275\016\257\222\275D\345\252;\341,@\274.\213\265\2754\225\353\2759\367\306=\323^d\275#\337\353=2Lv=\016\004\227<\n&E\275\225\346\261=\225\313t<\024\214\246\275\217/\021=\233\325\274=&\016\326=\003\273\352<\316m\340<\267+\231\275\206\313\213=#\274!\274:\345N\275\026\010\244=\324f-=\343/a=\253&\376<\207\252\247\275\232\005\254=\305-\330\275\357\275\300\275\006\270\250\274&\r\227\275\r\367\222\275\030m\325=\230:\036<\032\021\327\275\203\372\274<\307\217\241=d\255\022\274\377lm=\303|\346=ml\257\275:28\273RVU\275n\023\020=.]\203\275\333\256\231\2751\0268=\014\tM\275\242M\025\275\311\337S\275\311\002\314\273\241\0108==0\035\275X\203R=\277\326{=\0015*\275\2533\224\274\370@\205=P3\256\274T\375\277\275~\231\014\275K?\301\275\322\216\266<\305[\226\275l\240\260=\361\003\352\275.\360\013=\225y\314\275\275\267d\275}\362\336=\261:\010\273\005\213\337\275\033k`=I\022\223\274|\226W=7\230\326\275\014vj\275\347\3578\275\211M^<\347\032\324\275\345\370\345=e\206f\274\256\226\264<\343\324\214\275&\351\354=u\316\327\274\274~\346=\343\007\367\274\3173`\275\003m\235=\374\\\033=)\363\254\273\270\327\363\274\266*\277=qp\274\272\004\223\224\275\220\305\203\274\310b\263\275|\273c=Q\240\254=O$\272\272\274,\313\273\212\230\261=_\0200<$\006\226\275\0225\357=f\272\244\275\215\014\303<\\8\251\275\302Y6\275\345\035\321\275\320\277`\273\375\312\334\275\345=\231=\360\006\353=\344.\324\274\321\'\236=]n\257\275\007\246\\=\317\211\016=o\273\217=i\244\301=9\003\244=\365\204\232=5\200\331=|\375:\275\352\376\221=\325:\000=(u\240<7\343\036\275n\352U\275%\234\317=\304\270\312=:P~\275\255,\245=J\357\222\275~f\312<\027F\3229*\026\306=nI\213=o\347\362\274\375\247\264\275x\354\240\274;\021\223\275\010\243D={\030\244\274j\3309=\"*f\275\341\275\246=(\310\355=\273\253\243\275\030>\002\274\254\326J=\246\025\356=e\301W\275kJa\275\007\030A</\034#=\352\342\221\275H\222\331\275C\3642=\233\341\304=\330JU\274\336c\314=B\267\335\275\220\203\237\275\356{ \275\361\315d\275;\201\211\275C\336\215=O`\325=\333J\205\275\013\000[<\241(\247=\nU6\272\336r9=\211B\262\274\324\347\207\275raf\2754\232\203\274\261T`\275\020\273\305<A\"\342=\323\024o\275\000\304j<\271\333\220=\021{\221=\231\205_\275\324W\251\275q\331m\275\023\353\r<3R\003=J1\347=\341e\267=\003\"\031\274\232\t\260\274h\205\264\273M\263\256=\353\323\317=\255?\344<\255\223\202\275SJ\335=\321L\357\274\265\007\202\275?\264\226=Y\305\251\274\306R\306\275_\026\255\2756\002\243\2759\325\\=\212#\005\274<\006\223\274\"\265\243=\312q\332\275cR\277=\262\327\251<vm\237\275\037\246\216=N\375\352\275\263\017)=l\001\263=\257\244\263\275\347\0233<gh\317=\010\376\207\275\255+\276\275]\376M=\026\0032\275;\250\323=+\267\204\275i\274\237=\336\234-<\013I\332=\251\200\352= \037\301=\361Lx\275\226\022P\275j\246\214=\004\227\215\275\013RW\275\353\231<\275\247\235c\274\350\2227<\305\255\306\275[\307\034=\363\320C=\330\221|=\032\036K= \002\255\275\3661\256<\360\022\311=\344-\330=r\r\324=\243\232\263\2750\221\217\275\306\022W\275\221\320\346;\231\033\235=\361\301\352<\312?\353<\\[b=\000\361 =\017\242Z\275:\2743\275\314\317\254=\323\033\303\275\312\242\003<\217\023\177<{\305\217\275\001\254\226=\266\321\273=tF\335\275\204\243J\275\004T\201=\201\274\315\273\253\304U<\216\177\244\275\314\201F\273\213k\341\273\224\357\233=\251\220\315=\213\003\311\275\260\375r=\331\215\335\274\204a\266\275\250\344;=_\033\225\275\237\026\016\274.\226\250\275\217\023\226=g+\203\275M\207\327\275\222\322\024<P\201\350=\23172\275\346\312\221\275\333\344\352\275\016\321r<\223\226\277\275e\304\357<\311\310\272\275\007Vx=7\307\345\275{\205A\275\236L@\275i\301\315=\302\314\316\275\261\230c=z\007F=\354\350\327\274\277\240\202\275_%\205\2759\n\277<\233\022\225={\370\226\273VT\310\274\304\036\232=\361U\341=[\375\016\275\332N\"=\260S\342=\215\303\251=\"\216\222<pG\245\275\343&\340=P\'\235=\236\202\327\275\032\367\337=\005\224\230=\0268\325\275i\371W<\233\207I\275Q\273\366\274[Y\300=\266\250\'\273\rC\261=t\223\200=\322\327\362\273\226\006p\275\000\317\370\274X\374\322=\201q\272=(`\222\275\371O\307\274\010\221\001\274J\353l\274\204\210\334\275\311\316`\2756\0072:\016q =\266\266J<\357<\206=\225\345\251=\002\201\354<*\216\014\275q\017`\275\275__\274\362\323\034\275\023(\203\275\211{\236\274\353\255\346\275\303\352\232=\324\025\256=\270\276\217\275b\334\336=w(\234=\333\373s\275\310\233\033\275^O\'\274\210\223\246\275O\306\207\275\356\025\261\275\267\023\003==\261\221\2759ty\275_\332\346\275kB\343\275\316\t\213\275\372x\210=$\300\021=\030\216|\275[\222\335=\302\312\231\275E\371D<Ja\270\275\215\244\3037\341\370\n\275\323k\314\274B\311\317<~\245A=\261\020\305=rn\347=(\272&=\344V\321=Z|\207<\3100\230\275\336c\334\275\310X\322\275\360A\332\274`IV<A:\'\275qU\026\275In\310=\276L\352\275j\214R=\242p\350\275K\346\n\273\2706\213=K,@=Q\002\242\275f\325\256=\321\020\241\275\364\240=\275\020\001\214=\273\306Y\275,q\030\2757\370\317\274\3358\021\275\204S\267=:N\263<,Q\370\273q\2364=\2716I=\344L\322=\n\001l\275\215\332U=\233&\226=\224\360\035\272a\341\016=\'\030E\275\247\373\302\273n2\345\274\303\n\373\274^^z\275\n\325\255<\241\361\335<\274}J<\233\224\342\275Y0/\275W\267\242\275\311\177\330\275d\240\024=\013\014\230=\223i\022=-k\017\275\022\333m=\271\021\270<\n\037\272\275\275\246\247<\271y\300\275\343\014\255\275\241UI\272\337R\017=\336\343\312<\327\245\347=\212\024\312\272\nw\342\274\277Kj\275\350\357?\2756\266_\275\372\r\321\274\243\006*\275\331u\013=\333*\262<8\352s\275\3059\241=\237nq\275\321\031\307<l\317\301={\240\264\275D\357\262=\350\317v\275\346m\355\274m\000\226\275\342p\004\275\331H\311\275\223\026\356=\361\234\323:\356\035\362;\347\034 \275r\330\322=\004\201\335=\273\275\242=s\301l\274K-\214\275C\352\177\275X\033\'\275 \210\017<\014m\227=\030]\304\275Aw\t\275\t\262\206=u\335\251\275\374\320\007=p\'\351=\313_[\274\301\032\275=o\314\270\275\004\177\324\275x\006\373<b\3539= +_=\277\247\321\274;\'\003=9K\247<\271\n4\275\242<\2559L\371 =\214~E\275\370dt<\"\n\214=h\325\226\275\023<D\275\343%\255\2753\275\262\275\231\301\226=\373\236\005<\364\001\237=\315JK\275\320a\265\275\257Z7\274\'1\363\274\036\217\264=\343\233\253=I\247\215=\030SE=\274!\317\275\214\226\223\274\364\254\214:\332\026\337=\025\210\366\274\'\251_=\354\240\244\275\344 \225=O\230t\275Y\026\216=V\305\246=\306\320\367\272\311O\032=+\021\241=\225L\200\275\235\305\226\275\007\252\275=|\256g=\000\323\276=\302n\223<\211\305\351=f\334\367\274\325\262k\275\370\353\314=\216\205\025=\303s\213\274k\031\347\274\250\346\240=2\272;\275\357,\363<\325\367\"=Z1d=\304=\343\275\030)\273=;\232K:\256\032\260=\207\356\204\275\325aM=\207\377\217:\"\347\333\275PV\321\275\017\021\207\273/I\324\275\206 \037\275\317\314\242\275\010\220\302=\230\330\317=\177\'\251=\247\232{\275yM\\=\001\237\317\275/\350\227\275\363\202\343\275,\312w\275\306\345\226=\217\003\025\275\224\033\365\274!\002\314\275\243\341.\275\317\326\030;O\205\222=@\210\263\273\344\212\001\275\221;\212\275\036$l=}|\332=@\346\177\275u\020u=\347\252j<\301\\\251\273\255k\374\274\256lx\275\251\366\354<!q\272<\255\025\211=v\217\305\275\035\243\210=\216\362\336=\374Y`=1\264\357\274D\346P\275\370\275\241\274\013\001a\275\247$\346;\n\001w=\036\226\204=\375\004\352=\224s\274\275\277\232 =\323\\\277\275\257\037\032=\027\365.\275\010v\247\274\240\334\263=1W\312\274;2\252=\001N\021\275\366\303\262=\353\017\005\275BQ\246\275\204.\304=\rcY=oF\311\275\355\372\246<\002\300\212\275aM\272\275-4\302\275\3341q=\275\345\037=Mc\276\275Z]\321<\230\313\"\2750\301\266\274O\025:=\037\255\021=)\003b\273G`\033<\224\372\330\275@\205\024\275\022\302v\275\007QX\275/\236\021<\312\260K=.F\277<\217(\200=\277\017\356\2746l\276=(G~\275q\206\276=\344\317\313\274u\026r<\236V\256=\276p\213\275\215\364U\275\217\365\217\274\246Y3=\247D\314=\242\350\255=\201\243k=\265\355\335\275\324\376\271\275\313\236\337=\331\251\225=(\300\022=\315\260\306=\257\302\340=(\355~\274\254\352\205\275\217\314\"=\271vv=a\207\240=\303f\032=d\364\317=;\261\321\275\304=\314=\235?N\274\327\355G\275\307`a\274\243\370\237;\274\301g\2758\013\305=%s\201<\344\204\257\275F),=N\235\356\275\227\241\206\274\003\261\342=\233{\216=2\363\225<\264^8<w\300i\275\263~\335\275X-\223=|\022C=\004\360b\275\343\373U\275\253[\324\275\321N\216\275\302^i=\253\362\t<IG\210;\212M\217\275[\334@\273#\023\352\273\352g\203\275\022\361\246=A\374\214=\005m\276\275m*\022\275\334B^\2731m\033=\204,\301=\262,\357\275\273u\326\275\231Oc\275-n\034=O\203\347\275\343\264\271\274V\333\343;!\0044=\200\2350\275\267\307Q=\255 \302\275\332\347\243\274\333\n\210<\235\'\010;\025\323l\274\321\277\013=W\307\213\274\030\203\214\274Mp\304=\302\301\217\274p1y\275\365\312\255\275\321\230\205;I\322.\275\214\354\026=\342=\236\275\235\206s=\226=\354\275{|\246=\222\301Z\275-\370o\274\226\337x=\325F\332\274\231\366\026:l\343\304\275\2406\244\275\262\350\234=\365\355\263=\353T\356\275i\334\034\275V\002v\275\354a\203=>\362\356=t]\254=kP\254\275 \037\305\275}{m\272zq\330=`\312\000\275,\306\257=\r\360\264;lR,=\331\\\022\275\2320\352\275~\372\225=P\000\253\275\253\325\265=\336\213\202=m\370\230\275\030\361\226\275\231a\014\275\276\332}=\231*\335\275\237H\272=\357\357\255\275^\224\226\275\300\233\336\273\335d\310=\3376\213=\217\025\255\275\306\006\203\275\327\344\220\272c\224\273=\214\305\006=\210i\035\275\006\237\337\275\247h\2379\270\241\326\275\"\260=\274\265\007\003<7,:\275/6\201=\230\246o=\233\273\202=\002\246\200\275B\307N=.U\320\275\020\363\220=\\ \223\275\241\336\241<w\323\202=\317A\243=\\\013$\275V\2370\274XP\342\275o=\231\275\347Ao\275\014\252g=V\267!=\346\245r\275\214EC\275\220\205U<4u\352<\2037\211\275\177\025\221\271.\026\237\275\331J\220\275\315r\240=a\010\355=7>\327\275\361\031\344;\242Nf\275\244W\330=\345g\202=\263\227\206\275\361`\216\275W\365\321\273B\312&\274\273\255F\274\312?\374<7\025*=Yy\201\275\311\216\367;,Z\241<\242\256h\274\337\226\276\275S\261\376\273\233\352\250;\014@\247=^\304\227=uT\031\275?\272\260=\022\201\321\27502\335=\030\231\201=C\242\354=\237\202#=V\r\235=\326\020\266<b\006\014=Ec\302\275\363\314\356=\223\371\200<\344\005\257\273\315\177#=\250/;=\256\032\330\275\216\250\304\275h1\205=A\351x\275\235\007\000\274X\005\212\2757\376\341\275>\271\326\275\002\374\327\273\340\031@=\265$3;/\320\342\274\270Y\226\275\362 \373\274\270\345g\275\2054\001\275\276<\264=\346a\343=Lk\251\275E\210\306\275\036\346\033\275\306\200!=\305? =3\351\201=\024ne\275\021\024\324<|\306\334\275\202\376H=\235:\210:\366H\336=`K\216\275A-u=\006K\225<\214;\270=\245\\\331=\021\273O\271\256\203\"\275\024\236B=kim=Y\205%\275\340\237,=~I\312\275X \215=\3205\364\274\003\305\201=\322g\351<~\242H\275=\032\022\275\231\253\326=\n\'\201\273\310\030\256\275?\023\370\274\315\0327;\312\363\267\273\032B\325=\026S\257=k\317j\275he>\275\036y\326\274\202\351\234\275\227\037\001=\025\275\201=\333\212\351=s \306\275`\347\020\275\254\354\211\275@\256\331\275\374\263\200=\007M\311\274\24655\275%v\353=2\345\277\275\014\010\336\275d\227_\275\341\242\254=\275\0075=\273\000\352\274\033x\017\275\263\010\245\274\240\202\254=\021\267\200;o\027\205\274=\272l=\331\332\222\274^O\325=\026(\247\274@\335\317=\335\237\354=\tM\266=\033%\237\274\223>\321\274=\301\250\275o\200.=\224\235\260=\202\215\331=\357\276\317\275\001\244 \275\213\237\306=\263U\201\275\030]9\275\264\211\314\275a\204\250\2754(r\274\364Y\350\275\222`\t\275\024`\216\274[n\304<\262\204\203<~0\264\274\246\356\263<\200^\350=\252,\016=\336\331\340=6\327T=\325\311Y=1\203+=\006\002\371;\006\234\207\274o31\275\305q]\274\2021v<ch\220=\276\365\343=\372\024\336\274\276J\021\275\024\032\301\275\366\334\240=dO\205\275\304\177\243=j\217\203=8\241$<\010\3017\275\306*\241=\274\373j\273\265.\240<=\207\002=\020\377w=\027|5<\312\n\016\275\274p\265\275\232l,\275Rp\217\275\314\314\356\275\r\334\271=]\301\204\275\361\023\263=\326\354\301<Z\335\216=Z\341\261\275\275\315\'<W.H=\300\276\003\275\252\360\210\275\250\360\214=\375\377\033;\356\250\271=\335@\n\274\014\230V=\316\000h\275\tO1=\001\226\267< \214\221\272\325\264\036=\342\355\222\275\203\333\252=7\203\'\275\276\016L=)G\223=\320\3411<\224\311\221\273\014p\317\275\277\270v\275\240\3537\275\241z\201<\r\243\342=\250t\"=\016\217)\274v`d<\006\247\367<\007\214\024=}N\346=\300b\26597\241\026\274\254B\325;\326R\244\275\352\276\216=\333\" \275\240\326\242=n\253\340\273\256\233\315=\274U`=%4+=\343\365\023\275\370\256;\2755I\"=J\320\\=x\3526\275x$\244\275\316\346\353\275\353\221\315\275\311\201\214\275\256\342\3728D^\n;Uv\367\274\205Q\302=\354-\325\275\002K\230=\337}\224\275\227U\201\275i\006\320\275\227\220r<\261\355\233=&Ri<%\t\031=\360\243\245\275p\201\207\274\330q\333\275o\254\351<2\254\351=\313(\311\275\225rX\274\364k1=\014\272%=\367m\306\275\2606\177\275\206\312\271=+\273\245=\036\261\334=\270\215\303=\327\257\307=\207\310\327=I2\214\275\354r\023=\327\244\213<\335\224\257=\214\245\245<@Z\311=Q\241\265\274*\225\334\275\247\037\206\275N\023\243\275gv7=na<=N\013\354\275\212\342`\275[\3256<\300u\250=\005\3067<z\262W\274\002\032\n=\371\225\220=:\375\211=\301\213\204\275\313\214\211\275\310\262\352=p\223\316\275\"\356\017=\332,\275\275\010\253\274=\004\371y;\311\237\021<\227$\000\275\014\351\275\275U\3033\275QMi\275\377\0205=\321\257`=\2273\236\275 \243\305\275\217u\014=&\033\244\275\333\033\207=\205\235e\275\376\203y\275N\214\247\275Yx\342\275\010\252?=\321\025\205\275P\252:\274\307+\265=gy\315=\224\271\200<=\266\343\275\216ru\275A\340o=\206\364\200=\027\367H\274$\021\020\275K{k=\204Z\216;\002\365\223=?\001\226\274\323\301\006=[2\357\274\357\335\023=\242;\201\275\034\245\356=\241D\315\275\326\003\333=\331\256c\274Ms\300=\304O\354\275\3222>=\322\207-\274\264\032\227<\271\201\212=\206\367\306=\235\346\003=\262@\241=\250\300\274<\244\\\022=\030\364\252\275We\213\275\224\310$=\216}\032<`1\307\275M\036\321\275\370w\224\275N\334\367;\340$\234\270\242\221\244\275\317\275\246=`\"\312\274,#\021\275]4d=\242\201\257\275\350|{\275d\267\260\275\031d\235<*\237d<\316\220\244\275\312\226\252\275\247\306\351\275Y\352\255=\2207\312=\211O\313= \225E\274\367Ez\273\215\030\006\275\006\310\230\274VG\267\275\324\354\302=A\266\240\275\177|\035\275Xz\327=\322\352\331=\303\321\241={\033\223=i\231A<S\206\272\275E\326\204\274\013\243\224=\303\333\303\2748d\034=\023\327\315\275\324\353n\275\035\2610=x5v=\260\316\235=.\317\257=\026\322\027=\325\026\265;\326\340\345=\241\377\007=\030\307\226=\227!\323\275w\330z\275;W\007\275\356\247\314=\210\351\253\275\363\245\035\275\246%\225=\031x\305\275a\223#\275\024E\204\275\000v\334\275\266\230+\275\333<p\275\025\231\022=\214\003\317\275fX\341=\033l\346\275\311\305\262\275a\375\315=\211\002\314;\r#\232=*\271\355=A\251\243\275P\255M=G\366h\274m\260\325=]\213#\275\320\253\305<8\370\231=\354\242A=\247t\271<\"\266\253\275\211i\321=\325\244\221=\344\341\244=\001\024\352<\362\276\025=\375\"\004=\223\247\235\275\206\257\002\274\200r\025\275 Q\347\275W\361\267\275`(\236\275l::\275\260ms\273\2532\370<\252\242\201;\222\344\211\274\247;\222=z\022\245\274\326\r\304\275\"\177\340\274\024\337\356<;\340\355\274\345^\020<\366!\261=X\321B<s}\232\275\215\022\273\273\0366\\=\371S\236\274\234\r\334\275\361\254f;\262\240\321\274F\317\221\275C\344\277\275\211!\253\275\263\265\252=u9\345\275\333X\341\275\376#\037=h\277\274=w\217}<\232\356@=B\235\321\275\\t\257\275\336\2201=2S\324\273\241\014\311=4X\304=%\304\200=\211\\\274=a\373\274=\3361-\275\352\362\363<\005b\246\275H0\265=\347b\\\273\301b\331=\245\230\315\275\035\201\236=.Q\276\274S/\016\274+\216\026=MP\364<\210\2303=\304B.<\225\010\005\275k\203\235\275\342\375z\274\232&\251;\226\2005<\262D\345<\376\267\2729\362\265\350<\"\177\354\274)\326\246\275X\301)\275\220\321\256\275@\004\340=\304s\302\275\320\376\231<\323#@=\205\010\205\275\241\272\'=\233\201w\275\022\2115\275\217\360\236\275\004\020\256\275\355\373B=#\336\310\275G\240\275\275\360\nO\275\376j\313=\303\034\013\27516\212=\346`v\275\270\203\231<\210p\226\275Y8\265=[\022G=j\215\222\275\214\337\262\275B\321d\275G\251\217=~\017\336\274\253\364\362<T\271\324\274\207\314\330=\013\317\350\275}\037\023;G\301J=\263\307\215=\014 \340=NmB\275\373\207\251\275\336,I\275\263\245\206\274\275\035\025=_H\237\275\001[\317=.T=\275{\254a<s\312\340=z\264s\275\240\336\213=\256\034\322\275\204N\002\275\313\013\344\275$\365\350=l%\305\274\246d\316=Hv\277\2751\007|\275\364=\356=\364\\0=\325\333\325<\272l\304=\0353\234\2742\022\337=\326\344\227=\261\371\r\275\302V\340\270\310s\t:\364?t\275\322/V=\007B\225\273k\201\277\274\375\223\230=^\302\003\275tL\242=;\004\271\275J\321\337\275\240\214\227=0J\307=+\322\305;\316\212\247=\365r\276\275\347s\343\275 \344\233<\027\305\323=\340KE=\233\256\351<\000\211\216\275a\265\016=\313\307\347\275N\252p\275z\016\n\274\205Yq\275\205\014\363;N?\200=\306\230\305;\301u\224\2751\216\\\275\257\2235<\254O\211\2759h\245=\3516\326\275\203\262q;%\272\343=\332\250U=x%\225\275\216h\201=G\275\003\275&\340\243\274Pq\254=\362\317k\275H\333{\275$\231\335\275\n\355l\275\261\372L\275\263\270\224\274\252C =\314\316\213=\367\035?=\240X\236\275#E\263=$\317\260\275\366\017\327=\262\214\270\275\\\001\177=\365\342\225=\367Q\002\275\360\226=\275`\'\235<\221D;\275\245AJ\2751\323\351=\207\034\231=,\371\203=L\2346\275a\337W\275<K\352=\342\034\310<\223\375B=\363\311\177\275@\371\224\275\027X\210<\370\352\202\275P,\302\273\262\304\203=\'$V;\025\017\323=\332\220\315=P\350\222<\310\334H=\333\254i\274\335\274\273\275\005(\302\275\206\036D\275)\000\205<\271\334\235=T\024\225=\372\323\300==\307\037=Ra\257\275Q\362q\272i3\357\275\325\r|=\351\340 =\034\222\304\275\017\362\336=\003D\206=S\025\t=E\202\007\274\211\004\035<\036\002\300=\212\313\252=\205\037\204\275\315\312Y\275U}.\274\020\314\261=\376c\337\275\361J\313\275KF\237\275-\323\365\273\002j\334\275\225x\227\274\312c\357\275\363\010\232\274r\350\016;\314\253\243\273\304Mq<\363\327O=\215E\257\275\210\363\210=\325\313\207\275\361v\266\275\255\312\267=\263\330\240=\352\000o=\177\266\001=\313uU=G\226 <\320$-=|\261l=\300\004c\275}\032u=\335>\264\275\2341\321\275_t\215<\303\023\373<\232Y\353=\226\220\033\274k\271\214=\236\324[<S\237\321;\033\317\324=s\240\203\275\3229;\275\236?\311=\204\322\227=\027<\333<\"\254\212\275\n>\366\274\007u3\275\021\323\267\275\242\010\327=\303\216\202\274\\\247y\275U\t\310=Vb\200\274\243\253\257=]XJ\275\025\200\273=\331jB\273\353\272\355\275\353\325\\=\374]G\274\004\362.<\0173\356=F\263\317=\276\316!\275\247\376\251\275\030w\352\274]|w<kk\221\275\306[x=j\230\325\274\361J\355=\022\274T\275\221.\246\274\252\365\220\274$\277\343\275\021\324\326=\2462\311=\331Y\236\274\375\200\341<5\ro=\223\320\000\275\377<\337\275\027\270~\275\360A =\363\322\235\275]\353\255<\"/2=[_\322<7\037\215\275U\227\277<\345\023\365\274\3211`<\0311\203=A]\304=k\351\224\275Q\305\217=\330\264m\275\237\006\204=\340\224\010=t\270\205\274z\237\307<SE\340\275\352B\220\275+\250\342=\332C\235\275K9\354\274$}(=uC\224=\304\263\203\273c\017E\275\215\262e=1\232\200\275T\327\353\275\354[W=\027\213\357\274e\321r<\025{*\275\225\032\020=$\264V=\353-\275=e\240o\270\272\354\003=\021C\310=\217\n\302=\030\357\363\274\366@\203\274J\000\016<#\000\275;3\335|=7\273%\274E\315j\275\2338\271=\000Kv\275\266\025\026=\247\016:=A\270g<-P$<\\\223l=Wq(\275I`\205\275c\352h=\257F\262=\034p\235=\312\326:=Y\325\007<It\025<DX\327\275\242\274\301\275\346\232\307\275c\305q<\315\275\314\275x\256\207<\266\354E=\207X\232=X\230\247=\0228\255\275g\\\335\275\030\230\356\275\264\322\342\275Yw*=O\322\243=&\307$<\326\333\004\274\365Nm<\344\025\316\275\365x\307\2756=@\275\203\023)<\317\014\275\275\245\017\374\272\260H\311\275\026\3018<\3363\"<\367v.\275\230\263)=\260D\024\275\223\001\212\2756[\314\2740\366\263\275\305\233t=\237\226_=MO\300\2751\235g=\234\310R<\326\"O\275\2715}\274J}o=\325\220\304\275\340\336\304<\367(\246\275jqz\275\377\312\211\275:B\332\275\346\306\230<\356\026\243\275b\246\031\274\361\005E;\324\273\305\274\032J\200\273\317r\240=\373O\205\275Y\235h\275\036\373\324\275\3762\200<\227\262H=.\242\306\275l\333(\274+M\303\275\266YK=\252b!\274,C1;q\241\301<\302\007\010\274dR0\275\210\267\027\275v\'\003\275 \302\244\275\200\024\264\275X\2647\275B\373\002\2756?\225\275\200\021e=\354\301\336<\337\265\024=h\177\210\275\017\376\220=\r\\\313<\346\331\222=\273\314\320\275\3072\305\275H\263\003=\216[\265;\355\213\302\275\367\330\341=\234\"\372\274\321.`\275\234V\237\273d\014h=\367y&\275%\001Z\2750G{=\256\227\221\275\277B\202\275\314J\303=^\365\324=\337\t\236=\226}<=\374\246\220\275\2664F<\304$\215=\220r0=*\034S=[\246\315\275\347\334\244\275\025t\317\274jJ\200\275\350\271\243\275;\375\267\275M\313\336=\0241\236<\366\310\262\275\352\036\270\275W\344\307\275r<\335\275t\240\203=\033\320\350=\266\010\270=\244q\\<\211\037\002\275\212-\333;\366\222\264\275&D\300=\033s\374<z\244\343\274K5\021\275\2244\023\275\247:\323=\361yR\274G\004\302<+m\344=\006{\220\275\374\203C;\tNp\275|\002\225=\262\246q\275\352\215o=\204&$<\316X\027\275|\271=\275\273\332\316=s\235\n\275\312\324\225<\352\312\236=\316\253\316\274\246O\331=;\354\234\274\212A\275\274\\.\302;\372\312\203\275]\322\252<\271\376\032\271\302\025\334<\350\215\210<V\030\354=\316\305\251\271\177\246A\275\315\226H\275\344\257\206\274\217\235\266\275\327\347\366;00\261\275*B\307\275\365\244\263=\244.i=\357k\322=\254g\252;\357h\353=f\204@=\232\363\'<7\325\304\274\364\363\364\274\371\332\332=\205\362\300\274\271\337\244;\273\024\346\2752d\337<\005\t\030=\274\033x=\211\244N=\373G\320\274\206[\023\275\357c\341\275.\004C;\256N\266\275\016g\251<\027[\356\274\033\255\263\275\313\261f=\026\201\244\274\261N\034<E\207\352\273\031\000)=4\250\245=\334)\"\272\036\034\311<\206\262\316=Y\331/<\3140\312\275]WM=3\211\024=\\\"\013=z\323\025=v\342\342\275q+#=\370.\243=VSs=\323\315l=\261\267.\274\342\256\274=O\242F\275c\245\321<\275\216\300\273)\316\345\275O<J\275\002\234\275\275q\222\177;\347q\275\272\367\356\346\275.\023\256\274@{\331\275\312i\205<D\014\n=Ya\305\275\214\205\034\275u\017\274\2755~\232=VT\242\2753\350\023\275\033\203\240\275@\260$=\000=\241\275>\"\314\273\177_\217\275F\257\275\272!&\250=\211M)\275A\005\235<\035\252\207=\0145\203\275/\246\272\274\276\211\355=\272/\243\274F\337t=Z+\037\275\256\366\330\275\360\222\264\275\017\211\256=\237C\264=\337n\036\275\342\353\266\274#|\313\275\224\022\321\275\375,\350\2741\021\234\275\023>\301;!\245\205\275\333\225\267\275\277#\266\271\3506\021=wMP;\2347\r=\200\346\256=wb\316=g\335\266\275\367x\307\2754\234\317<\007\241\007;\2431\257<\371\365n=\231\256\236=o\365r=\243\245 \275r[\365\274\236\301\220=\314\214\326\275\375\213\301=\007\255\n<\301\232\215\275\215\256T\274\256\217k=\257<#=-\270\345\275\266\351:\273\014\360\032=\271\233x=\2724\220\274\014;\224\275\336\302\211\274\366\330\247=\354\343\277=Y\212l;+)\326=\323\020\013<e\300\272=\241\241P\275\367\267\313\275V\373_\275U\272$=F\251\241=\264_\211=_\007[\275\353\354\315\275V\343\271=\211\321`\275\355\316\027\274\362\250\264\275`\206\t\275\223((\275l\212\322<w\302\265=\374\344\340\275\335\251\266<\3450\303<\360a\252=\342\374\313\275r\301\322\275B\300x=\244\364\350=\314\222\277=\032\227\222\275\002\336\312=K-\314\274\203]\004\275`\250\224;p\373\262=n\221\272=\374t\307=\363k\322\275}U\327=c\357\356\274\315dq\275\260\263\207=6\302\237\275Pf\255=\335\334\354<t\255\274;\251_\327=\022W\356\275\342\310t\275\352\2766=RO-=\370e\233\274\016\366\035\274\256\301\246\275\245\327\217=\275/\333=`U\353=\337\021\307\275@\330==r\2742\275}\205\312\275:\346\361<\204{\363\273\377\365;=4\255y\275\n\r\317\275\211\271\377\274\026?\354=\311M\356\275\341\335\337=j\344i=\306\263\203=;Z\315=\312\276\022\275]\200\032\274CF\273=\3212\035=<\036\212=\001W\306=\304`\272\274\302o\304<\320\201\271;\350\022\235=x\353[\275=ys=<\314\273\272k\341\247=\255\013\305\274\367K\204\274\261\023\320=\215\362\265<cJ\251\275\n\"\227=\302H\302\275\204\205(\274\307\206\276=\033?\206\275\354\006\347\275\010n+\275(^\261=\252\212{\275\212\n\340\275W\255\300=\360\006\341<.\310\246=\371\336\272=\243,#\275\320\216Y<\235c\364\274\260\243\344=\314!\253\275\300\357H=R\233~=\320\\\313=\237N\010=\352N@\275U;\300<]\033\227={\374\236\275\341\005M\275\342\253g\275\026\001\252\275\366\314\357<\3535\300=I\035\000<\025\326\350;]\333\303\274\232Z\251\275\022t\322=\253\354\336\275\261\235b=\314\363\343\275c\320\177=\263ts=\347\221\034\275N\274\300\275\036\311\344=\025\242F=\370T1\275\315\310\257\272_pl=\340\337\316\275\275g\350=\366\315T=\256\255\250=p\013\233<\254\357\242<\277\'\351\2759V\352\275\223\323\351\275\237\220\366\274\312R\212\274\263\266\371<@\177\\=\273m\215\275\350\257\224=\022\340\220\274u\266I<.7.\275(\376\227\275]O\214\275\373\205\242\275!\343\300=F\240\314<\021\266\034<\216\231\256\2751?\353=<E\251=\250\324\206= >\340\275\\\001\301=B\'\334\275n\355\252\275\232\205_\275pu\370<:\250-=iA\006\275\033\231\230\275\026\276\356=\037\257\365\274d@\257=\0067\304=\211LE=D\370\362<~\006\271=l\336\316\275CU\270\275#*\014=\276\331\303=\203\265\024=r\227+\275\265\253S=\333\033\210<\347\216\265\273\301\360\320=\026\233\374\273\r\245\230=c\321R=\302:^<pzo\275\263\333\342=\235\236\303<\"\037\356\275S{\254\275\357\332\277\275\2276S:j\223]=n\245e=4\314]\275R\240\260\275k\337\354\274f\035\355=\2219\225=\342\2538\271\311,\026;U\275\353=\035\203l\274\211\333\216=\311a\230\275\033\036\266=\n\026\"\273Pb\354=\305\021\t</\256:=a\202\252\275\204y\214<a\240\300=\264\261(=\330Q\372\274\273\021t=\331\305o\275\246\014\332<\250\310\226<\366\030\261\275\221\317f=<\2477\275\353\376\003=\234\\\347<jML\275\251\367r\275\277\342-\274\314F\213=x+D\275\211\265\265\275:Ml=\360\200\325=\373\307\325=\261\204\226\275\323\355\032<\332\2748\275v~\255\275\277\261\213=m\016%\274\017\0334\275\214\304H\274\303:\270=36\205\275\373\352\223\275;\201\005\275\241\353S\275a\276\270=P\"\244=\335Y-=\3358\337\2755\203\344=\255\336\374<\036A\243=L\353T\275\3560=\275[/\330=J\315\242\275\300:@\275\272k\n=Q\246\332\275\326\236\242\275 f\231=_\341\353\275\206\254\257\275\306\254\326\275%D\317\275\t\261\343;\306S\217=\037l\000\275\013\022_\275\347\302\224\273\221\005\033\274A\333\252=\231\031\232=\355\221b=F\354q\275\315\300\265\274\332W`=\036?\340=f\005\354\275\335ln\275\363\007\276\275\032>T<\256\302\236=\253\334\367\274\016+\254\275>:\223\275om[=r\344\230<s\026\212\275\345\335\227\2759\310\207=M\236\n=\374\227\210=7\367\004=<4\027\275\325\245\346=>\267\255\274\330a\344\275\365H]\275p\260\026\275\005p\216\275v\010\272\275\217\"M\275\236;\252=\220\023W\275?L\010\275\367\223\030\275i\274\325<\335\016\235\274\277\372\331<\301\013\014=\315{\320\273W\264\311\273\222\357\203=\256\\\363\274\252\035\363\273\367\372\347\275\216C\315=s\240\306\275H\220\032\273\023K\021=b\343\006=?\374}=\256\n\035=2\233\211=v\275\331\275\210\347\240<\317\241\321\275\355\307\212=EeE\275\245\273\325=\350\202<=\241\024`\275\251C>\275*U\357<\n\247\'=\343+\246<M\202\024=\236\270`\274\ta}\275r(\336=0^Z\275K\376\347\274\263\332\354\275gk\320=M\356\344\274&i\302=\373\201\251<b\315%\273x\243\355=&\262\322\275\363\006\205=\202\305\r=\230\315\240=I\034\267<\030\203\337\272\360\213\244<\321 \302\274|\003\037\275\004\262\254=\254\371\275\273\355\014:\273\0044\206\274(y\245;\260)\302;\304VD=W\322\234\275{:\256\274\016\235\341;\253\256\241\275\206\373\265<\332\365\222=\255\333\255\275\005\232\333\275\025\260:=\303\341)<\246q\340=X\363\256=Q\013\200=|\330\005<w\030\315:B\275\261\274\321\243\217;\313\024\260==4s=\304{\315\274\025\2772=\274\361\345=8\177\317=[\265\346=\245>\354\275\010\3625=\233\312|=\007\n\274\274iQ\003\275\0103\003=\212c\356\275X\006\021\275\274\3539=\212xi\275\241\232\252=\370V\303\275J\274\213\275m\260\332<\2128X:Mo\366\274\306\352\273<+\242o\275\372\353\247=c\302$\274\276\031\301\275(\335\243=\2367\321=JU;\2756\271\322=\267S\203\275\353\024\232<$\212\222\275g+\243=_\352\336=9i\225=9\261\350\273f\243\333\274p\371\203<\221|\217<\360}\350\275\230\017\277\274\367\203\302=\372\234S=,\244\336=\177\2715\275\006\327\250\275\346\006|\275\003_z\274\210c\231\275\003\2609\275\334\351\\\275\243\266\266=in0\275b\rz<\013\362\271=\221\245;\27529W\275\306\245\216=B\225\265=B\244\201=!\301g=\251zE\274?9\024<\353O\177\275\243\262\210<BU\026=\240b\214=\321E\362\274\374\245\352\274\3448\215=\"\025\031=\002\003\314\274`\026\250\275]\240g=\366e\304;t\374\215\275\246\207\333\274PQ\354=\337>s=aV\340=\372w\234=\005E\315\2734f\244=\265\000\336\2758\313\'=\237\207\311\275\2452\277\275\341\275\227\275[\225\232=a\370\222<6\006.=I?\241<\321\346\324=B\260\352:\026\034\\<\302s$\275\\j\314=\267[_=\336\265\334=\237&\210=i\343\320\275R\013\364<^\275&\273\t+ =u\017\316\2759\312\241\274#7\211<Z\334\357\274\010\031\225\275\313\277^=3\000\203=0S\312\275\335t\303\275L\2724=\302G\260\275z\301\024\274A\025 \275\002\256\322\2740N8=v\326s=\343g\225\272\017\214\240\275\315sB\274\341\177\211\274\335\t\222\2740GD<\030v\024\275?\303\210=\252\253\340\275\320\001\265=nA\324<\223j\206=go\327<*$\"\275tF{\274\277\364\222\274\215X\243\273\013+\230\273\022\001\215\275r\257\226\275\022\037\350=\014\024\344=\260!\325\275\231\364\014\275w\373\2008y~\233\274\210O\201\274\023\307\272\275\373+\341\275\302\014\273=_\226\213=\270\275\025:\250\022\247\274\257p\347=+\205\320<\010\022;\275\001\226\001\275L\311\336;\240\257\324;\253\202E\273\254U\341\275bH\032=\031h2<\007\342y\274~S<\275\352\001\337=\272\2003<\325\337G=\027\253b<\3048\226=V\201\241\274v5\351\275H[|=&\245a\274\370\211\033\274\321H\\\274\013\224\222\275\036\360\337=\376\000.\274H\250j\275\363\317`<2\021\354\274X\\\266\2747X,\274\347\240\305=\376\307\372<c\266!=\010B\330<k\370\321\275\300\\\020=\213\r\\=\3314\000= \034\204\275\021\035\313\275\021L\017<C6\256<\216\333\277\275\342\3563\274\031\010\303\274v.\243=\355\204/=\033\315\263\275\307_B=]\035\357=of\\<\254\331\210\275\220\"\315=\256;{=\334\312\371\274\2712r\275\227\022\312=\004\311\231\275\355b\331\274\003M\245\275\345\207\356\275\351 \331\274.\226\213\275\337\260\255\275\367\022;=o\230\263=\001GB\275W\275s=\220\371\0339\251j\233\273\3009r\275\373\000\365\274\0063 <\376{\344\274\314TT=+\240!=\230\t\315\275d\025\276\2758\350_=\'\342\276\274\032\317\325=p\226\266=2\270\251=\014T\255;a\250\233<\035\023&\275\357\223\223\275\r\212s\275j[{=&&t=\231\3109=\177IB<\t\337\266=\007\361\300=\222l\r\271\231\363f\275;b&\275\300\302\'=^\225\353\275:\343\216\274T\253Q\275\314\212c=\353\374\247=\037\352\277;\336\355t=\177[\360<\366\371\312\275\307K\336<\277u[=I\335\262\275\210\353\351\275\254\320%\275\277Q\252;n\311\203\274\217\373\214=\177\203\023=n\033\301\274\007\035;\275\264BB\275\226\226\212\275\232\021\346\274\267d\271=\037v\261\275\213\036\342\274\306@\216\275\372\242\322\274~a\201=\307\350\240\275\362<A=\303\360\036\275\315\353\037\275\217_\207=\201<\222=^a\273=\273\333E\275\322M\254=\302Q\243<\340!\013=h\223\033\275\245]\267<\320\206\336\275\316O\310=uM\2308\240>\314\275A\272\016=\250\243\231=/+\344\274 \226\323\275\330I>=\361\310M\275\233]\313\275\202\002k\275WAa\275\231i\336:\001\321\200=\224x\201=\330\365\236\275\240\355\236=\224}\234\275I$I\2755\000\361<}\013\311=\353\205\336=\374\204\212<G?<\275j\245\273=\241=x=*m\335=_C\312\275\333\352\300\274\226\201j\275T\246\213=Q\310\240=\036+\241\274:L\376\274\320\014<<\256{\243\275\254\343\315\275\035<\032=\364\340\036\275\231~M\275R&O\275Z\024\313=\261\342+\274\n\364z=\341n\356\275\222g\342=\006(\255=;o3\275\300\360n=\310\221\247=YpP=\021\243\374<\034\004\207=\005\206\335\273\230!\350<\343\006\310\2758\200\250<\354\343|=H3\275\275\006\326\226\274RB\303\274\313\377\222<B/B\275\317\252U\275\373\005\306\274\347n\014\275%\367\226=\352\225X\275C\207\240<\033\320\331<\256\374o\275\275\364\305=\351H\324<\271\204\332=\307\211\224\275\210e =\033B\303=\025+\313\275\342>\213\274\326z\223\275Q\257\206\274=\033\343\274T\245\344=\347\010\224= \272\310\275B\346\034\2750ZB=o\265\354\275@\217!=\347\301{=\317\341\300=G3\223=\230\275\215\275:\315\234=oV\214=\311\272D=:M*=\237\265\216\273\3345U=\030\252\355=.\013\246\274\233v\252\275\350s\237\274l\227\347\275W#k<\223tU\274\034\203\205\273$\301\234=$\206\324\275c\252\346\275\276Wn=,\236\305=\367\267\211\273\013/W\2756\013\320<R\013S\274\2545\215=\314\300\217\275jO\315=|S\244\274;k\'=\367\234\002=\006\034\336\275\250G\315\275\002P\263\273-\220|\274\010\210y=\026\367O=`\215\022\274\340\255\262\275\357\317=\275f\027\006=\320\346A=\227\333\247\275\032\333\273=\373\0163=\036c#\275~\205\330\274+\276\335=\327\264\230<n\373y\275\343K\275\272\004\024\310<\210\234\277=[\323p=j\025M=\300\356\322\2752\312\273\275C\235\207\275Bs\306=\231\357\354\275e\351\354\275\347\211J\275\234y\346<Q\274\363\273!\321\311\275 \001h=\272\036\372<\245?\311=o{Q=+<\274\275\242\"@\2753\272u=\360W\350=8\\\336=0^!=\\\023\006=\030\306\000=L49\275m\321\267\275\003\211\350=\314?\356\274\242\221\263\275e\313\321\275\026\307N=\245\375\234=POo\274\024\202\340=/!\226\275PFd\274\212b\200=\217\0212<\256\346\213\275\355U\312=\316\272Q=\036\346\272\273\375\232\275\275\213\300\203\274 2\233=4\250`\275\tM\274<iS\250\275`\203\270\275\177\016::\247\330\367\273\312\311\345\275\326z\234\275\262\025\272=\300\017\350=\032\252\341\273\231\335\306\275\330At<7,\373\274\245p\203=h\035\251=%\272\273\274\361\324\205=\374\313\346\275R\312\230=y\366k\2752\206\215=E4\307<\320\020\331<\270,\\=b@\305\275\352\344\300\275\353=8=:\037\312\275\326\277\244=\232\006\013\274\2708s<\307\307\325\274|\017S\271z;\353=P\272\300=\'\233\306<\367d\347=O\033\320\275\310Kh=\3216\203={L\276=\313\020\261\275\204\320\216=\000Tg\275\214\027\026<e\346.=\204\273\250=h/\023\275\344\230r=\006\345\314=\220\231\235\274#\306\246\275\310\035!\275\000\0019\2752A\034<\356\225\213<+E\225\274\031#(\275\343\372\001\275Z\370\000\273\006H\270=v\005\353\275IG\214=\024eC\275\201\373\034\275k&\315=E\250X\275\316a\212=o\204\353=\362t\334=\342\276\347\275\205\000C\275\210\177\216=\006\335\251\275\213\242\303=\332\260\022\275\275D\223\274\203\\\213\275\020S\341<5\341\307;\207lk=9\213\354\275nr\277\274-\213`\275:.p<\253KS\2750\240\273\275\350\022\337=1Q\256\275\004\241\321\273\372_\300\275B\304\007=WL\341\275\341\345\242<X@\234=\003@\037=\234\004\022\2735\021);?v\351\275\031\313\273=\003\252\264\2750\301\220:XC\215\274\334$\223\275\315h\327=\221\370r\2754\377,\275\010W\231\275m\331\263\275F)\271\275\276_0\274C\305\002\275+\367\336=\214\202\033\2752\034h\275\2038\264=\251d\216\2756\257y\275\023\202\221\275V\304\200=\301\333\254\275\324c\323=\373U\236=K\035\301<\232\213\212\275\271\303==j%\016\275\0219\233=\225.\265=\337\034{=\364M\301\275\352X\274=\343]0=K\257\374\274\017\344\032<S\356\246\275\310|\020=,\n\314\2759\313\'=\370\210\204\275V\243\352\275\314\346\270=4\307\304\274\233\003e=\321)\272\275)N\346=v\360\237\275\204\212i=\232#\246<\314\222\245=w9\317<\025\367\251\274\274\023\237\275\367\376|\275\326\370\256=\250\316=\275&\317\223\275\005\310\343\275h20\275_\322\273</\252\020\275\234\325W\275\240:\001\275\003\307\315\275\323H\200<`X\001\275\270\232\026\274\272\270\343=G\233\222\275\275E\352\275zE\245=\210\335\330\2759\263\274=\004\223\t=\037\314\243\275\250\224\263;\177\323G=R\364\031\275\251\001\240\275\272A-\275R%?=\256k\357\275\263,\006=2F\324=\374\365K<\034S\313\275\273c\254\275\310o\374<\230\311\246\275w\262\270=Y9\252=\334\363\200=\204X\310=+\217:\275\250\034\002=x\351\306\274\305\357E;\341\013v\275\304\237\214\274\361?\252\275q\333:\274\275\312H\273\345]J\275\004\226o\275\267\224<\274\005\244\303\275\305\022\227<\014\311\r9;\\\356=w\204\271<F4\313=\350\252\270\275\350\260\355=\352\r\302\274\314h\261=\036\344[\275b[v\275R\270\014=\0023\355\275.r\276\274\317\'\253\275\210\216\266\275\230\311\307\273\217\017\037=\007\324\377;\224r\026\275\253<F=N\333\033<(\270\205=\217T\337=B_|\275=\346\355=\247\211\242\275\0353\311=\365\342\356=,L\263\275p(l\275[\353\254\275\333X\034\275@\277i\275]\353\277\275&\323\276\275\352&\313\275QHM=N\037y=*=&\273v\350\320=o)k\275\262-\200\274\350\"\240\275\024\212\t\274\204`V\275\325\331\220\275\313b\200=\212w\t=x\204\373<w%\227\275\035tM<\330\233\346;\000,\302<a\307e<K\336\017=\343e\276\275\010w\004=\332T\223=\345\026\333\275\351K\010\275.\271i\274\362|N=1\250\276\275?\376\311\275\0313\330\275~\210\317\274\002C\303=\374\321\210\274Z@\213=\224D\202=+\331R\275x\205\300=\255\220\266\275\3340\264=\267\247J=tJ`\275\333r\301=O\221\217\275-\342\020\275\275z\013<O\330<\275F7\207\275y\312,=\334^K<\006\261\325\274\365\031\005\275\'|\317=\314}\207;\016\342\210\275\303\026\261\275\033\305\273\275Sn\025=\032mD\275\200\001\222\275\362\340\310\275l\337\210=\266\243]<\371\'\240=\240\345\355:\030\322m\275\205\274p=\016\337\321\275\213\343\223\274\"X0\275\257;\212\275\034-\024\275P\373\247\274(>\004=\022\007\244\275Fji=\266\375\324=/\326x\274qx\000\275@<V=\025\031\232\274\3518\215;+\362-\275\202\342\327=\354>\221=\342,\347=?\220~=;\254\303=\225\364\310=g\350\305\274\241B\254=\003\257\257\275\276\375\221<\010e\003\275\324\2378\275\252Co\275\374u\005\273\317\372\035\275e\303\353\275\022\232&\275[m\353\275\\\220s\275[\201`:`?\376\273\344\362\215<\355\255v=\213*\202<(\211\256\274\217\205\225:j\217\002=#\350\273\275ylH=V\207\\;\035]\361\273\364k\300;d#\025\274b\220w\271x\024\200\275\227\215\302=bK\274=gz\277\275\235\002\212\274\216g\026<\356\202v=\353}\340\274\252U\273=\032,\263\275~\347i=\314J\240=\2535\276\275\346s\350=\"Gf\275=6\345\275\331\326\252<\344\327\251\275\002\340\260\275\024\214\313<\347\234\327\275\335\241\210\273!~\245=\301@\207=[q\321=\347\221@\275@\r]\2756/\242\275\272\234\250=O\324O=\303@\237\275zIl\2753-f=`\270\355<\005s\272\274\326\331\207\275\367&\272\275\312y\277=\201`\006=\254\3421=\361\335\234=\215\275\334=\343\201\346\274`\344\027\275\264\335\027=\030\223\227\275\3467\022<\207\375\206\275\207i\314\275\275\021\331=\247\200@\275\243x\310\275}\202.=\253\034\357\274\004)\254\275\352D\030=;J\250=\342\351y;\327\266\210\274W\315\244\275$\332\221\272\325\255\013\275\2123\210\275\337\317\347<\373o\224=\223|\323:\rX\365\273\322\270\253=\374\357\277\275\317\260\031\275\017\022\312=\377\\h\275@m,\275I\213\256\275\225nF=\305\331\232\273\360\014\217=c\035\362\274\362\356\260\274?\350\314=\321k\302\274\201\027\225=\345\357\302=\276\263\344\274?xC\275\305*\342=n\345\325=\266\2473\274sXk<1U\355=\275\347\203=k\337D=\233br\275\0133\2008>\014\244=\307O\314=o7:\274F\222z=gA[\2755\313\334;\262\3479\275\031Q+\275j\035\257\275\351{\341\275\242\n\322\274\277\251\277\275\031\326\216\275\374\234I=\214\237i\275\034\361\002\274\030]/=\225\025\330\275\346\245\266\275\345\247M=\026\344\332\275J\355\256\275u\222O\275\rF\226\275\234mt=\013\315\253\275 c>\275\323\027\205\275\325\271\366\273\361s\343=\244P\261=\344\245\257=\253[\332=[\373\247=\2709\277\275\306\036\013=B\355^<\266\310\017<\246\224\225=\210r\351\275\303\357k\274\322\353\314\275\341\245\350\273\025r\271\273O\257\272\275\030-\216\275\304R>\275\264NM=\220Q\303=\346-\364<\036\360\367<\023\200&=e\244\274\2751\242\306=7\304Y\275bS\037\275\336\025\231\275\230\353\310\275\024\036\267=\257d\313;\317\223\264=\211\006\236\274\364k\244=\216\230\307\275\331\320\221=\302S\263=\016\033\224\275\303\350\227<\314z\024\275\315@\312\2752CD=\221\216\233=Tz\363\274\373D\334\275\235H\330\275<\237\242=\270S\232\272;n\251\275%\330\347=\302\260Y\275T\234o\275s\212\260=E\213\023<L\304\350\275\277b\272=\020<D=\376\217\264=^\302/\274M\355a\275\301\311\261=\277\251\342\274`\217\333=~e\036=\225G\224\275\306V\265\275?\204\224=\205v\223\275\013\370Q\274\273\201\266\274\251\006\025=\351@\270\275\'\032i\275,\363\216=\0146\260=\366l\264=Zw\374<?\367\256\275\215c\001=%:\201\275\3104o=\214\"\017\275\205\226o=i3\336\275x\233\302=\257.\337<\022\n\326=h\030\023\275\262\271\206\275n\247\340=\024\355\351\275\016v\353=\302d\'=\036;f=C\023\037=\014*\333=\263\225\376\274&\\\264\275>\306\344=\275?t=nP\323\275\354&\306=:\210#=\367\312\320\275K\206\275=\257\311\364<\260uI\275\313:\357=\360\244\254;\\K\254=\353\033\315\275\270C\010\275\002\224~\275\270B\333\275\321O\353=\004.\205\274c8\336\274\336N\362;\027\373\315=\030\177X\275\361\340\335\275n\245p=\306\1772==V\210=\177\252\217<\375y\340=#)\005\275\354\037\201\273((2\274E8M<\215j\322=\276\027\261\274r\344\350=qf-\275\026!\220=vF}\274\025\267.=\200\326\247\275B\321\300\275\021J\355\274\202\361\272\274\245\030\251\275\333uK\275?\366\245\275@\300\333\275%\374\331=\260\236\262\275}A\234=\340\027\323\275]:\224;E\346%=\217V\201=+\374T=K!\232\275yC\360\273\377\005\364<df1\275\002\252\020<sCD=\360N\225=JY\264=\362\274\302=\233\212\216=\303\262\335=\001U\336=n\r\243\275\222\361\022\275\371\227K=\005\223f\274\240\235\231<\\\256\226=\376K\353\274\231Mo\273\312 \305=Oa\'\275\007\211\256<bc=\275\300N.\275-uH\274\344\241\001\275x\247M\275l}\350\275?\372\313\274\327t\266=\302k\037\275\346\230\352\274\000\277\234:\374\207\204<AE\\=\276uz\275I\306\336=\024\223\274\274\240\005\235<\342\022\365\271\021e\322;Q\314\333=-\243\336\275}\327\316\274\246d\336=\301\3647\275q\332\303\275E\034w=\207\243\322\2756\240\n=\341q1=\2152\345= b\231=\365\r\243=\242\254\343=>Q>=\201\232\261\274c\341#\275\214\377\022\275<\257D=k\377I\275\366!s=\277\365|=Y;f<6\340\016\275\244\321\307\273\255\375\306=\316\335\320<\323*\226=\307\222\253\275\024{\030=\354\220\227=\340J\262\275m\340\211\274\262\336\322=o\200\026\275fr$=\006\013\310<\214\273\316\275Q\361G=\rJ\374<d+g\2744\355\025=`V\005=~\304O\275\352\337\3558\373\261\207\274\224\0321\274\234\221\"<\307\336\265=t\310\354=45&=P\357o\275\374\313\303=\000\270\270=\367;\r=(\275\366\274_r\312\275\200\023\275\275\030\321\306\272\365\333\013=\035(\210\275\341\275\310=\205`\334=:L\266\275\177\267\356=\334\270\365\274-&\321=\257\332\217\2752\345\031\274\277\356A=\217\nv=\321i\2679G\363x=}\216a=\2070\246\275\304\267\256\275]E\275\275o\310\212=Zt\303\275\000\264\256<x\000\227\274\322O\325=\315\315\336\275\r\3703\275\356\246\305\275\306Q\370\27451\265=\262_\327\275\241\021\202=\254\210\372<\3104\331\275I\311\237\274\327\205E\275\274\324\270=\002\266<\275r\334g=(E*=]\236\274=\340\342?=d\036\214\275:Uz=\251\335\335=:\340[\275\260\300\260<p\002\032\275\316\007H=^\313\242\275^\274\221\2758\333\314\275!{U\274Ie(\275l\317;=\247\264\255=\013\222\323=\r\342\262\275]\\J<\222\211v\274\277\320\271\274bS\357\275\332\267\'\274\231Oi\274F\023b=S\376\254\274\224u\301\274\256h\240=\036\021D;-`4=\347\245t<\264a\022\275U\211\262\274\321b\267;\234\023$\274\241M}\275\215\315\257=\365(n\275\272\234Y=YK\227\275\260t\206\273Y\026\247\274M\235\006<>\247\343=\013~\363\273\202\2320=\215\321\205\275.\216\025=\203\177\\\274;\261\245=\216\324\260=\n\341B\275 P\337\274g\320$\274\364f\257<\2458\236\275]\253\201=\341\370\371<z\346\312\275~{\341=\036\360\240=\031\017P\275\320\3202<T\017r\274\010\005\300\275a\367u=\273\215\306=s\274Y\275.\370\257\275\376\261\273\273F|\267=p-\332=3\036\300<\r\274\331\274\005Ns=\254\202\222\275H\202\350<\252\322\201\2751\335\260\274\313\367~<\224\220\231\275>\332\314=\334t\001=\250x\351\275\3565\341;\3775\003=\352\\\036=$J\265=\235\317\237=~|\241=\350X\265\275?i\222\275\331t\341\275(7\271=\244\307\337\2757Q\003\274\212\371\235\274a\"\337\274\325\227\312:\232Y:\275\t\0042:G\337\250\272\354\025\032\274=\342\334\275\215\372\200\275\300F\333<\352Ak=x~\232\275\2610\230=4Z\204=\177\t\336<fbK<\313\344x\275\207\031\226<?\204Z\274\211\177\204\275{\251\334=\260\033\271\274\372\352D<\303\333\235=\374S-\274\244\0107;l\233\317\275\213\004\315=\272\260O=\005\342\337={\254\020\275\353\324\275:\307\317\301<9K\234=\305\306\272=\346\253-=kG\024;\347\354\277=\277\363T=\361\252\307\275l\215k=\244Ld=\367p\333=R\034d\275)|\017=5x\314\275G\226\345=\344\231\352=RR\260=4\036\357\275\336\023\342<\236\013\367\274!\374?\274Z\201\327\275\245\202V\274\373e\325<\367b\001\275u\020\301=\'B-=\372\327\346\275\025h\206\275\251\366\250\275n\315\252\275\244\001\021<\313\303\226\274\277\025\276=H\310\r\275\335/\266=kQ\004\275-E\205=\237\206\315\275\001\"\302=\03440=\000&\305=\240\010\316\274\300]A\275\250U\035:\204\261\255=\230\007 <hYf=1V0\275\245S\276\274:\027\270=\200\265\271\273\275\273\222=\264\315\r=e\350\022\274\200&\303\275\364\233\r\274\204\376\267\275S\342\266=\335S\313=[\307\333<\000DO<8\374:\275\213dw=\372:\363\274\037\025\006\275*u\256=\302+\210=\251\226\361<\036\330\336<\250\331&9K%s=\r\1778\275\003\252*=r\202\330=\363\n\252\275\321\2536\275d2+=\375\253\216\275<`t\275!Z\237;#\036\272=M\237g=d\010\372<\006D8=\313t\205\275\016V\224\275\301cX\275^\275&=&\240\006\273\224\376\337;\252\205\232\275\\\362\242\275\013\216\252<d\314\325\275\365\262\'\275\266&\237=\023\223\327\275/\356\311\275,\327\252<\037g>\275H\353.\274\003)|=\213\001\216=c\007\241\274\2130\346\275\273\346\341=j$\322\274\202\215\225=\211\361\217=\206\022\366\274T\021\324=?\016\315=u\350\331=\362\032\343\2751\310%\273\345\235e\275\033\253\271<\335\244u=a\004B=\247o\254\273@\323O\274o\222\235=8F\273=E\3146\274\256\n\241\275\315\037$\274\227 8=N\231\244\275\356\254u=p\210\035=%B\303=\020R\303\275\340\"\325\273yD\265=`\225\254\275#^\272\274EU0<\264\211\326\275}\325-\274\021\233\374\274\217\377\304\274\371\033,\275y\037\237\271\345&\236=\377\332\200=_\017\271\275\340\004\241<\001\306\236\275[7\263\275\314\004\227\274\033\305a\275\223^\231\275n\177\210\275\223\345\344\275\325\002\315\275\363}\023\275\373\202\027\275\337 \272\275\357\306\221\274\313\031\310\275\373\320\206\273F\\;\274\0012\310=$\231\221\274\024\306\245\275o9\351<\270\331<=\273\205\254=\025h\214=\246wl=\n[\266\274\300\353\332<\206,\301=\374]\216\275\370\025\220\275\222\233\305\2758u\347=\335\226\340=_c\324<\364\241\203\275L1\217\275\350\322\315=\323\341\025\275\n\nq=A@\251=\021C\341\275hj\374\274L\373\266\275D\374\270=v_\234<\036\367\316\275\035\265\032\274F\352T=+\322\306=\304w\206=\265\037\272=`\272O=\220k\005\275\305\261\211\275\343\203\023\275\275\353\341\274\227Y\227\275*\377C=\234!\306=\341D\304=\362\334E\275\177O\013=&\262\226\273\251d\320\274J\211\243=\324;:<r\214\277\274\277\357#:\261\030\276=\022C\215=\234\373\317\273\360\307i=\370\330\216\275K\205\210\274\332\337\347=\212\256\237=\257\014\323\275\t\247\256<\000Q\304\275*\355\364\274[\"@=\251\037\334\275\204\377\271<\000\246\270\275\304\312\237=\353#\255=\245d9\275\024\254\355<\255d\271<\'\001\241\2757\016\340\272m\315\032=gu\220\275\364%T\274V\315O=W\002\324\274\336\014\357\275\201\374s\275\254~\221=2\2012\275a\010\332=.kf\275\213\277\307\275\261\217\344\275DB\314\275\364\373\265\275\301\023t\274\324FN\275WV\212=\253DX=\312\225\277=\r\001K\274\327\347\216\275\226\303\277<\305\0023<]\202\225<\2459@=)\t\315\273Xk\232\274\010\020\207<\300\312p<xQ\224=\032\274\341=\341\250,\275\215\313\334=\3531\013=C>f\275?\010\236\275\031\003e=^\014\336\275&B\340\275\035\330&\275\232\334\324\274\206\211\214\275>Km\275\211,\207\275\277\260\200\274\273\213\232\275\327\033\331<\022\"\233\275\266\324+<\222\027\034\274\335\366K\273KW\222\275\\\006\002\275r\233\220\275\202-\020=\010\366\303\275\352\256\246\275\"\321\224\275\334\3622=\346\364\255<\026x\214=\264\231,=\010\2602\274\316\204\310=\351\003\307=\340\207\307=f\020\304=!\234\321\275\233\346\313=\013\347\326=\333\343Y<\202h\260\275\026P[<\315!\236<G\224\037\274\233\010\337\275\347D\267<3\236a=\021\027\200\275\237\345?=\211\347\340\275\260/\204=@\371\204\274\262LV\275\226\022B\275\233a\265=\376\003O=\3417\r\275@\227\325=\243\205\326=P\001u;[\372\355\275\337\307\213=\204;\201=L\336\331\275\020\312!=\214\014\377;e\267\002\275\302\226\022\275\305\355\326=\353\350\206=\2253\317=A[\264=\020\273M=\213x\273\275F\330\276\275zX\266;;\357\213\272\234\317\305<\231\370\206\274\355\351\324<\377\226(\275\032\261\305\274\000\t*\275\334,\322\275$#\016\275\313<\233\2750\376%=\341\342\254\275\375\262o\275\236/\337\274\352\247\024\274\252\"s<\215\344/\275\332kP\275F\375}\275\303\033\273=\033\035\006\275\354\357H\275\303\222\027=\tD,=\221\3223=\365\022\330=\32783=\346\007\320=i\201\274\275\264\3077\274\014\370\002<\344\361\351\275\367A\240\275AT\300\274>rT=\220\337E\273i\212\301=D(C=\317\315\311\274\306\035+\275\352E\337=\350jY\275Ba\363\274\226_\346\275\372\377\177\274R\000B\275\264|U=\370\000\273=\003\340\327\275\313\344\004=\356\247\200\275\326\273\255\275\355\277\007<\334\273o=j\361\301\274\022\270\235\275\304\212*\273W_\234\275\224=\275;\021\311.9\206Y\344=\233J\325=H\276b\2751\262\234=Q\'\353<\250\373\345<\302\200R=\320\243\320\275\225\375\354\275\221\206\270\274\375\352\342\275\304\360\324=\247&\276=o\2668\275#\352\215=\303r!=X$\234<\341^\257=\017\241\265=|\316`\275\307\323\227\275\377\304\275=\014IW;\311\315\201=&\216\241\275\331\3266=`\005\266\275\014sh<\"\007Q\275#\375\266=\273\031\235\272K\013\227=\363\311\302=]n\374\274e\031q\274\325\312\302\275NH:=\313\315\177<\016\221g\274\323\336\242=CI\234\275\211,\200\275m\343\257\275\034)P\275\261A\365<\377\355\320\2757V\346\275Y\253\347=eU2<\255y7=\007\251\335=w_\272=\233\316v\275\267\3416\275\035\270\335<\352\'S<\275\266\242=\340\r\270=\203\016\377<\2554\200=\361\030\346\274Q\252:=\204\372\211=\020\361\223\275\004\3154=\\l\302\275\373E\251\275\027\023\234\2754?,<1\303\322;\275\310\322\274\014 k\2743\254\301\275\t\226\202=\326\256\232\275l\344\352=\010 j\275\027\001\020=\2412\340\274\235\314\025=x@L=\262dL<!\342v\275@E\347=y!\214=V\216\353;\006\334V\275\231\311\313\2740]\036=\377\232\333=P\274\332\274-\330\353\275o\341a=\227\340\325=\r\275\225\275\243\202\262\275\017\333x\275\026\021Z=\300\266\207=\226\355\233\275\314\344B\274\034\000\236=R\321a\275\327\334\216\274k\333\262\274\032\236\254\275|\265\031=\321\242\355\275\273\236\253<^\341`=\000\207\212=\227Z&=\366\237\334=\363\005\325=\334\214\244=g*u=\274\217/=\377\364\310=)z\264\273\'\332\255=\373\253n\274\376t\270\275`\\\244\275\366\252\326\275\203SB<!|\223=Wj\024\275\371~\206=\377\307R=\210\341\246;3\203\355\275A\331n\275lw\212=\257\274\210;\270\366T\274\316\022\242\274\241\352\316<\367\246:\275\346\177\002\275lw+=4=\"=\220\321\342<L|\252\2757A\304<)a\330\275R\021\242<\003\000\255\274\021\365\300=\017F\344=\202\327\355\275\243\003\255\274\371\213\330\275\357\337&=\257:\235=\302\004\207=B\036\337=\352\263u=^\366\221\272\317\245\003<\013\341\200<\365_\271\275`\252I\274)\343\303;8\"\000=4\232\366<\345\325\326\275\221\t\232\274\362|\016=\344@\241\275q\230<\274\003e\257=\310\001`\275A\371=\275\007ym=\235\nA=\344\202i<\265l\200=~+\351\275;`\311\274\336\337;=\363\2034=\316\363\351\275s\030\311=\332\206\260\2750:~\275\026tI=\\\262\252\275\322\023T\275[\314u=\352\364\317=\025\237\245\275\227\372\330<T\024\214=-\202\201\275\240C\204\275W\225\267=\211\241A\275\203\t\242\275\314\351`\2751\227\247=\221\301\345\274\007\033\352=\314\377\255\275y\032\014=\321\023j\274\372\014\232=[\362N\275\nj\256<\304i`=h>s<\215\350,=\030\262?\275\200\237\223=\245\006\215\275cRG\275\257Px<\212rp\275\320\314\221=\001G\341\275\354-\303=M\225!=v\307\201=Z\2765=\353p\261\275+?.\275\247\266\344\275\372\307\220\275\006s\313\275\265+\326\275\271\264!=\260\333c=\372m\273\275\344&\237\275n\323\241\274\247\312E\275\022:\224<\270x\226=Z\254\024\275r\317~<\271\343N\275\220:\200=\200\370b;\234\3221\275\032#\324=-S7=e^\010=\237-\205\275\367\373\232=B\2425=.13\2754(\035=_. \275\244\221-=P\204\347\275\007\006\303\275\024B\\=M+\206=\010o\341\274\016@\024=\224;(=I\253\210=\211\376{=\306\037\346\275.\204\317<\357\3367<\245\222\272\273\243\240L=d&\253\274\216\022\223\275b\364\274=&i\023=q\300\316\275\267\037\177=\305\354z=>\262%=~\227\301=\354\234\311=\215q\310\274\210{\320<#IU\275\212U\354\275\343\031\005\274<\0204\275\037_d;)\023\237\274\3359\353={m\256<\236\330\245\275E\256\352\275\262\267\267\275\017_B<VH\325=\034\326x=U\330\257\275\265\032\300=\363\367\306<\350V\272\275\317\212o=\214\312\324<\343\210\014=D\276\'\275\2674\320\274\200Ix\275[\003\247=\375\302\246<\311\226P=a\203m\275\261?\214=\363I\306\275\\!=;\274;\230\275\352\"\332=\023\315D=\347\376\200\275\257\014\317\275.Y\316\275\374\226\277;\302\241\240\275\227\371\325\275\215\023>=\236\362\216\275\003lM\275\353\034\252\275J\013\214\275\035\313=\273X\310\262\275\037\201-\275\266\230\201<\0338D=wg\233\275EO\370<\022\373\263\275\213\362&\275sf\272;\355\330\331=\212T\222\275\312;\271\271X\017\266\274U[\270\274 U\264\274\346A\300<n3\315=\n\027\032<\213yg\275\005\004\237\275\321\274L=\337\202\211\275|C^:\203\2623=\354\312\321=\356\234X<\224!\234=u\tZ\275P2N<\n\357\222\275\237!\210;\365\363\316<\260s\337\275\307K\320\275F,\307\274\374\2332;\232@\232\275!\375L\275A:\233=\300nq=qI\213\275g\337\366<\365\243\345=\347\312\316=GMB==(\210=e\005\025\275\022\250\225=#z(\275\335a\304\275E]\245\275\316\312\024;\216F\265\275K\020~=\262g9\274\236(q\274\326\n\342\273\340\003\344\275\363\232Y\275\353R\005\274\371\nV\275\267|\302=\214*r\275\330\344B<K\240\250=\224\327\'\275(\255\347:)\212\032\274\361\375\026\275\035\207\332=\310\302\202\275\365\351\256=N\255q=]\226\253\275\321.\206\275\204\301\235<\273\211\027=\0007\340<@\204\376\274N4]\27555\263=\376\227\200=\321\263\253=0LR\275\261^\240;ZvJ\275\373G\257\274\307j\303=\330\305\302=u\254o\275\010\211\342\275iX\331<\344\216\237\275\201;\346=~\367\334\275\266\267\245;9\264\271\2751(\243\275M\203@\275\275\025#\275\245/\202=\017\315\230;\032{\357;}\n\327\275\237\327t<\021\3152<\215c?\274\246\334\220\275\327\312\223\275\353\274\303=)\347\247=\"\342:\275\272\3503\275\265\320\224\274\2316\263\275<\031-=\250D\314\275\021\327\222\275\204f\302=r*\347\274\017Z\207\274\014c1</\"\227=\334\242]\275\253\031\200=\242O\262\275\204\t\023=a\347.=]\315\344=\213\377\311\275\343\t$\275R+%\275\033_.=R;\236<\263\314\006\275\237\203\233\275\264\267\230\275\326\220\216=j2\257=\004\373\020\275gR\207\275\245\245\251\2755\272\030=\232\352\346\275\317\315\271\273=\235\217<\277S\351\275\024\361\334=\016,\350\275\2021\352\275\242\256w=3EB\272l\267#\275=\033\324\274\241\274\177\275U\321\205<\217\323\357<\360D\202=\350!\355=Q\352k\275\222\244\272\275{\215h\274\236\304\244\2759\237\032\274p!\020\275<G\002\274`\177\351\275\370\365\234\275s\352\256\275\222\363\273\275\322\273\240\273D\277\n\275X\2356=\377]\210=J\245\235\275 \r\020=\245\341\271<\344\302\336\273\342\257R\275\005\203s\275\305\262\255\274,\275E<\322f\242\275\366\244\254<\247\377\007=L\372\003\275\n\036~\275\306\3616\275\232sD\275\333\361\260<\221\231\272=2\351p<\342\356Y=;\220e\273\230k)\272\243\350\200\273\203\305\265=L\263S<3V\272=\233\216Z=\027\030\016=\326\273o\275\300\276\275\275\336\030\227=Nq\017\275\230r\010\274\230f\017<\036\322\213\275h\276\241=\353Y+=s=\202\275\313\014\203\275\251m\030=\223\272\214\275\372\330\335=\026c\230=\355?\215\275\204\360/=\365w-<5\310o\275\377K\256=\377\341\252=\'-\245=\360\326x=0G\354=\367P\264=\341&`;8\206w=}\216.=\257\300\333=G\304_\274\276{\322<P\0279=\024\'\240\274\243\215\316\274*\314\320=|\013\313=\334\204E\275\033E\026\275\2269\200<\346k}<B)C;\275\017\305=R\347\360;\312\017\364\274\2409\322<\311\003\335;\016\330\323\275z\364\237=\372\266\321\275\2603n=[\206\246\275\200\265\244=\234\332\020=\317Kw\275[\313\022=\307\335\327=\'\3004=\372\357\204\275|X\210<q\\\202=\237$\322\275\216\"\226\275\303\344\255=\231\377\333=\237\252C=OV+\274\303\212\241\275s\302u\275\025\033T\274e~\234=*\370\214=\013\036\n\275Ir-\275\252a\274:\365\350\003\275N\246\337=[\002\274<\345\013c;\372\277\270=\034\365X\275e\031h=\302\241\007=\340\030\257\275\223T\234\274\346\017\224<\'\237\200<B\333\233=\203\331\261=\347\345\240\275\376\'\240:\333.N\274#\250\341\275h\375\312<\317\273\204\275\255f\305\275d\230\255=|\347\271=\341\243\374<\005\023\304\275\350D\274=;\223\244=R\013\225=\313\236\342\275\224\333\240\274\026*\002\275\210\366\301\275\310\240_\274\205N*\275\206\316\350=\322\343\033\273\242\277\336=z&\277\274\251\323\252<@\266\254=\223UP=l\262\255\275\256\374\344\274\353\026\262<,5\273<8\307\027=\200\017\271=\217\202\247\275\255\275\240<-J,\275\343;\310<$\267\270=`n^\275\272)\020\275,\351\247\274\205\211;=QA\272\274\000\024\350:\241a\265=\034\207\313=\233\357\325\275\304\230\224=\222j\263\272\277\327\027\275\352\210\\=\036j\262\2756\343\301\274\352\376\234=\376\324\354\275e\265o=$\250\244\275\351\260\353<x0\206<q~\200=\352\021\324=\302K\252=\233\'\254\275\251\016\242\273\246\243;\273\240-\023=kz\307\275\250\"\275\274\324\272h\275k\233\263\273%\345\213=s\333\224\275)\216!=b\212\323=l\256\214\275(\224h\275\237\002\254\275\360n\211:=P\\<\213\327\203=\025\231\243\275\2663/\275*k[=N=\266\275\226o\213\275Vt\250=\275\257#=:\307\234\275@#|=\216\263\202=\355\343\227=\010p.\2757\323\233=\313y\243\275`\270L;G\236\200=\342\n\203=\330\016b;\261\255+\275;E\240\2756\357\226<\375~P\275\304tJ\275\004{\304\275\327i\260\274@\373\301<\321\236V=\"\326\237=\251\314\007=<K\215<\014,\353<-%0<8-\262\274\356\360/\275,\270\236\2741X\'=\002F\362\273\362\257\262\275\027\210\274\275\200yK\274G\311_=\323\247\000=\266/T\275\2029h=\336\255\033=\234A\310\275c2\222\275\215\334)=\227$D\275C\330\357<>\325\270=Ii\256=\215\203\207<\t\254\215=?\217\216<(\021\214\275\2104\325\275U\030\276\275\255y\221=\275\325\305\275\214\366Q\274=\220\225=s\355Z=\361_D=\033;\270\275w\210\345\275\270\220\217\2752e\216\275\264\"\265=\007\027\030\275\205V\227=\231\273\353=L\203\273:\331\331\257=\250g\264=)\344\234\275\261\245+\275\007\356}=\262\327\325\275C\211\303\275\215x\006=On\207\274\n\007\267\274\257\311\007=\337\210\262\275\302\022\343<A\301\264\275\305j\330==\256\231\275d\376\333=b<Q<\343\271\335=\371\261\223\274Z\221\025<\346*\203\275\216\346\364<\254\022\007;\341[\262\274\363\211\271=}\336a\273_~\250=\272\023\214\275\260\224\001:R1]=7\245\203\2754*Q\275\031\317\252\275{\366#\275L\341n\274\365\345\221=\323b\217\275\306l&=\004\361\203\275\337\314\005<]Cw\275\275_\316\275{\236=\274+5\022<:\t\325\275JF0\275\321\304\253=\353\307K\273\007 b=;\016\266=~\2566\275\030#\275\274\226\321\201=\270\377\001=q\342\333\275\257t\266\274\002z\\=.\320\245\275\332?\300\275\375\217\226\275;\027\204\275\257\211\016=R\205K=\236\205\333=\374\272\250\275e\234K=f\312\324=\215\324=\2730\257\376\273oHR=\243\266>\275\017\n\340=x g\274\220\002\245\273<{\363<\240\246\232\275\327\200b\275oOf=\363\276\331\275\365\233\177\275\367\243\260\275\217\271l=s\363\275=w4\312=V\235-=\035\3030=\342\364(=\256I.=I:\'\275\231\360\003=\375\033O=\266\216\217\274s& =Q\266\312=\3271\035\275?\335\352=\023\257\217:R\200\207\274o\323\017=\357M\253=\3269\313=\231n\263<\177g\221\275\344\301\265==\353P<\004W\347=\221;\270=\"\361\320\275IT\330<Z\031\204\275\371\327T\275D(;\275\226\264\267=\212\024\t=\035\323\202\275e\316\223=\314\345\222=\250\\l=uI\235\275O\n\266\273>2=\275Fc\350\275z\340K=\340\2513\274\356\326\316=\352\257\323\275\333\036\304\275\366\264\200=]\357\277\275]u\315=\252\214E=\322\201\324=\210\314\201=4\246\322\275\n\317\257\2742\207\324\275\027\235\214\273knN\275\315V\002=\242\337`\275\n)\344\275\222]\006=\036\031X=\023M\235=\351\037\226=\371\371\251\274\034P\367\274b4\244\275\237v\335=\320\240\205=\005\302\317\275B4<\274\373\nG=\321\']\2743\337\271\275ZN\272\275\354\323\323\275\033 B=\255\374\030=\340\346\234\274P|O\274\334\375C\275\347\243\265=~\310\221:\037\365\205\275\323\340\317;]\266$=\360\313\235<\262i\202=\302#\207=Ah\303<\310\225.\275w\333\311=\210r\234=Ypd=\375g\272=w\2450\274\344\257\331=Lr\220\2756\212\014\275Bt3\275\200\275\206\273a\311\216=[\233\212\275\363\013\317=qp\306\275\023r\213\275\343\016\301=\334\037\307\275\310\230&=\207Q&=\366\256\313=\346\241?\273\243\273v\275))\026\275\027\031\262=1~\253=\341B =\000\'\325\275]2\267<9&\330=[\001!\275t\256\217\275^\t\013=\337\"\306\275\343\226\031;\327(\357\275C$\205=!w\310=\035\264C=\344\317\304=~^\321\270\214Y}=\272\373\301\275\n\337\207\275#\024\352<\030R\330=\357,&=B\213\322;q\301t\273\021\036\271\273,\013\264=\212\371\266<\246\"|\274;\330\273=\\\203\260\274Ui\031=\'\350\216\274\303\271\322\275Sr\232=W\033\003;\010\252\027=I\260\r\273\215\035\305\275\234\033\323\273\016td<\006\370\r=\266\274\302\275\347\213>=r\360\242\275\264\216\005<!\261\240<\376\373\n\275&\234V=/\301\214=\014\n\347=P\000}\275aP\357\275\224\032&=\nL\374<>\240\231\275u\014\363<\260\237\350\274\225\233\221<V\255\316=Z\335\236=j.\252=r\010\227<.*\252\273LI\214=L\355\231=\037\334\235\275\364@\234=0\317\315=m\004n\275\355\310\350\275\261e\002=\000\341\372\274\353%j<\343\3535\275\260\007\211\274f\336@\275\334\365\262=\223\004\345\275g\262\327<\215`3=\037\260+\275\206\257\000\275\022\005\357\275;\360\266=v\002\224=\357\006\263\275\221o|=\242\350f:\234\356\264=rt\223\275qH\315\275c)\257\274\020\017\341\275\254\'\222=\273\374\253\274\010\337\251=\217\212\305=]\2247=\265\347\334<\020\346\271\275Z\t\035=C\000\210\274\376l\210=\210UC=\236\354R\275\275\023\341\275\025\206\036=,\222\242<\337\203\335;F\3260=\277\253\327<\'J\024\275\371\277\302=\207\201\201<\216\251\\=\311\217l\274\267\267\244=\213\203\336=\234&\201\274\310`J\275\035l\331\275Y\036\275\275\3622\220\2756]\202=\367\362\201=\025}\203\275\321\346\263\275\252\377\315=@\211U=[,\223\275Jf\212=\234\311\350\275\025\003\215=j\262\243\2750D\250\275\354\001\337=\037r\206\272\254\305\350=\344\307\222:/\027\300\275\216Y,=+\177\224=,B\233\273#\356K<\311\230*\275\347\2233\275\236\257\240=\217U_=\244\026\356\275\211\332\345:\274\254\255<;\366\002\275\263F\337=\033\301\261\273^\231\216\275\336\337X=\350\362\347==?^\274\226\301\303\275\270\357\343\2759\345\307=P\321\315\275\320\314\215\275hZ#\275*\001\340=\262\' =\021>\265<|Z\332\275|/\334=\250J)=1\273\365\274H\036\316=\345z\211=\222\337\315\275\233[\341=\336\201\212\274u+ =\374\245J<\257\344\334=\206\343\202=0\010\300\275z\217\361<\373\221N<\322x\351=\273e\006=\215\275(=%\314\022\275\t\337h<\346t\300\275\202\272\326\275\274\262\216\275\206\223g=R4\323\275\3076\245\275h\311\221=\320=T=\242\312X\275Z\224\344\275\266\032\250\275\243\005I\275\005\224\347=\344H\246\274B\247\330=\333\254\245<v\232\233\275\201hF\275\027ks<\007\2500<T\346t\275Z\246\321\275\225q\262=\013\301\001=\360\277\335\2747\320\343=\"V\312\275.qv\275_\t\317\275\367O\317=\\r\344\273\021\276\224\275\010\373\217\273\230\275i\275\264\016\336\275V\204\200\275\313\025\321\275^u\270\275\221\021\312=\364\210\352=n\242\236\275\322\225\331=)y\023<W\263 =\302\344\244=\333\250\260\275=i\244\274\261\354\331=T\327t=\257\017\214\274&\214\027=\250\330\310\274\0300\234=\201n\010\275z\007\303\274\364\000\256\275\016\013r\275\353\260\n=\240Z\241=Nw}\275b^\276\275\346G\"\275\222\032\257\275\372\r\001=\366\306]\275\321\337\n\275\272@\252\275\030\211\263=\0241\252<\307\223\301\275\r\tO\2754/d=\261G`=S\322k<M\231\203<$\357\210\275S,^=\262k4=\346\311\262\275a\203\243=\262\270\022:\3476\220\2750\207P<d\023\357\275\275`\206<\271\326\317\2747<:\275\200\017T\275u\"\210=#\350\200=\010Q\272\275\3621g\273\327,\207=\263\310\323<{f@=5\312X\275p\232E\273r\377\t\273%\206\334\275\227\250\"=T\304\260\275$\237\\\275{7z=\310\006I\275\326\t\346=E\322\305=C}\342\275\034\207\010\275\017v\307\275\307\007\266\275~\036\243\274N\352\272=\372\010t\275\272\216\251\274n\0163=t\235\005\275\262\245\327\275\265\357\227\275-\272\005=\210\307\246\2752\340,=\341h\341\275\2004\302\275\335\372\032\275\0203\307<\305>\000\275\312b\347\275\364\257\032\275\346\207\257\2759n\001=\363\355\247=h\345\224\275Q!r=9\346\263\275\207b\322<N\177\344\275\214s\361<\001_\312=\006|\014=\375\211\273=4\365\314=n\337\323\275\017z\272=b\267\350=\177\005\263\275H\336\300\2750\025\347=\267\016\247=s\0312=\223IV\275\2324\277\275\361\336\266=\356\365\276=\313\246/<\2012\226=\007I\275=-2\240\274\257\006-\2751\364%=3\267\313<\014\224\r\275q\244\217\275\021%\343\275\250\301d\275\255\242\234\272\203\237\214=\343\231N;\025\333\342=\273g\322\275W\322[\275\352\336F=um\252\275\n\177&=\363\366*=\327\243\224\274\312\225\221<\267\213\233\275\322\377\273<\306\024\324=(\235\253=\331%\314\275_\356\351=z(\250\274\324\317&=h?\320;ly\217=7\220`\273Mu\330\275x\340\267\275\223\r\237\274\224\\m=\360]H=\257\t\337\274\321e\335\275\262\232\363\2741\237\243\275\241\236\213\273`\214\242=T[\354\274\213\313\200=\347/\333\275\036\035Q=\241\n\277\275,\356\370<d\346\266=\025!\311\275e\272\344<\261\036N=\366\343\235=\027\245\214=\260`\315\274\333\224\272=7\025\261\274\014t\021=a\316u\275\305W\211\275)\274\340=\313\n\317=L\370\206\275\304\2630=/\3009<u\000\216<(\277\234=\236\254\252=\026g\325\273\031\222k=\242\254\235<\007\224\340=h%J\274\234\272\212=\006}\242<tM\373<q\221\367\274\221E\244=\342\r\310\275\350Kb\274\254`\202\275\026\276\r=\212\240\010\274\027\342\232=q\324\007=\361K7\275\360\377f\275\005b\023<b\245u<\003Y\370\27475\210\275\2025\243=\367\310\030<\373\340z\274s\310\027=\222\353\251<J\244\247=\020\300A\275\021\034\251=h\017\356=\300\232}\274\007\234\335\275>k\243\275\245A\272\274\036u\241\275\307\274,=-\275>\274h\211+=\237l\211:\350F\252\275<\2076=\031\021\342\275\361\026U=\215\320\343\275\227Fa=\314\230\324=#E\250\275h,\333=\257\204}\275Uj\2209\"~\210\275#\327p\275\344\375f\275\000\377\244\275\023\355\310=\367\007\307\275\'\331\260=\251\353Q<a\251\217\275#}\347<\221S\371<0w\332:\254%\273\275\330/\220=\301Gn\275\332Y\335=\023\307\345<\'\265\301\274\027\206\312\275\214\246\350;p[\205=\002X\315\275\335\016(\275\246\271\256=\3414\323\275\352\254\345<\254\362\307\275d\377\177\275\326\251\263\275ZI\336\275\357\t\231=\361\370\222\275\3121\334=\202?7\275\035(\255\275\247\323i;5#\242<x\270\353=\003;\326=G\261\216\275\206B\230;s\016\313\275G>@=\220\273\225\275rF\'=\320h\367<m\275\266=\222nz<W{\270<\252\031\240\275\235\336\362\274\035\246y={\"-\275F\200G=\001\375\345\275\212\325v\275s/\326\273\343V\350\273gX\267\275]z\'=\032s\215\275F\241\213\275\013\035\177;\371`Y\275\252\361\343\275C\023g=\354;\246\275\326\360\217=%g\267\273>\250\306=\235\352\233=(\307R\275\275\240B=\363\334\244=T\234\311\275\256\241\014\275\\\024\275\274x\254n\275\267\177q<\034\257\353\275\014\315\333\275\337\335\310\274\021\375\206=+\374\236\275A\314z\275\222\255\264=sP\243=\246@\247<\351\210\247=\330\336\231=9\314\310=}U\352<\")L=\035\304\341;\274/ \274\210\365\225=\270t\232\275\256\266\001=\364wB=\032\331(\275\304\177\227<&c\036\275\240\t\325=\354\001\260\270<G\272=\345MS\271\256>\204\275\207 9\274\t[\253<\322\333\006\275o$\375<\360\264\245\275%\274\200\275\327rc\275@\267\200;\007p\230\275\037~\211<\035r\320\2750\303v=\332Z~=\301\307\216=\260\020\344\275_l\247=\377ET\275\361\004\356=\363\204K\274v\272\267\275\027`B=|\300\235\275\253\267\003\275K6\301\274\244\003(\275\010\365@=\214\232\322=\202\326\241=w\330\236=\340\266\030\275\013f\340=\202\364\315=\213\004z<[\342\340\274\245\316\010=\315\246\360<\222~\305<\003\321Y\275\t\013\351=\277\037\022\275~\200\221\274\325\350\242\274\304\253\262\275hg\324\275\030\212)\275\255^\205\274\235\010i\275W\320\300\274K_\206\275Mx\263=\2073\347\275\237\330|=\256\'\273=\020\037\311<\247\360\265<R\251\233=\263\312\346=4s\266\275\372\367\005\275\261\332\272\275\034X\224\275\334\216\246\275d\004\220<\270\345\177=\327\027\304\274s(I=\014\270\215<\r^\342\274\332\367#=\037\032\344=4\344\327=\311\350\351=\2238\220=\034\010\213\275\313\230#\274\217\332\024<\211F\274\275\250\240\340\275\n<u\275\326\006};\026\230\344=EMW=\254\267j\275\027Q\235\275\326\257<=\341-,<+\363\002= A-\275\353R\327=\331~\232\275\260\033\'=\312At\275F\353u=\313b\267\275^\304\353=#\006\023=q*\231=\025\325\270\274\"\001\212\275Vi\300<\267\211\037\275`L`=0\223\344=\035\317\251<\232\007\233=J\324\034<,\223\261\275&\266\310=-\036g=K\304\303\275H\342\244\275\301\232\216=\250\020^\2743\327\017\275\354\203\275\273\253F\210=\213\325\241=\264T\266\275\375(\231\275\201w\264=7\221\273\275\037\036\353=R\371\246\274\267h\313=c\261\270=\177\356\352<I3#\275}\224\203\275\241\323\003\275\366\354\203\274B\204?\275\326\377\273\275\322%\341\275\2440\316;)\332?=@+\350=\226\302\342=JU\233\275\030\030\353\273\300\020\035\275\024;N<\264r\210=n\241\335=[\211\247=p\001\237\274\013u\023=8\275R=w=\217=)0\244\274e\375\345\275\2231\270\275B\275\242\275t^\371\273\260\354\261=\257\230c\275\002\000\001\275\035[\302=\350\357\233=Q\002\233\274HEQ\2750\371\035\274\245\246\231\275\037\266\266\275\360\216\305={{\216\275\333J\261<M\270\273;\364G\346=5\t-=\006\276\310\275\027\027\257=\':\211\274\217U2\275\0001%\275\264\243z\275\331\3523=\251\374\257\274!\\U<g\356\302=\252\313\216;>\026`=x\"\337\275\3467\303=3.S=C\t\320=I\367\305\275\030\367\215\275\246?\254\272\277\3450=\366ME\274\342\366R=z\372\203\275\303\2625\275\306,\013<\310\325\354\275h\217\366<E\343h\275\345Cv<\223l\256=\016\177N=\0345\251=\235\324\205=U/M=\211!\226<A\n\212\275>\233B\275\255\350\033=\220#\020\275\363p\333=\201\373\304\275[d\256=P\304\207\275\035\324\340=\026W\322<|cF\274,\377\207=\340\235\267=\202\265\344=\311g\330\275\206p\245\274{\021y<6\344\\\275`\373\t=\320\255\356=\300YL=\347\020\332\274~%\034=8\035\240\275\3755\344\275%\335\213\273N\330\267=\373\027\205\275*\332U\275\010\335\206=\376/\306\275\352\332\256\275zs\221=\310\023p\274\377\257\263\275nD\276\274\226E\016\275/C\276\275F!\350\275\372\256\212\275V\002K\275\251O\347=\374\034\244\275u\220\330<\"\352!=\360\245>\275@\034\031=\246\325c\275\347b\356\274\020\"\242=\341Z\322=\347,\350\273\251\251\330=\270\232\245\275kr\347\275\213\335\017\275{\231\303=\2043,\275\313\351==\375\036\277=]\276\246=%\317@\274\357\354\322\275G\224\276\275\321\004]=\217&i=d\376\231\274M\217\245\275q\221\314=\375\373?=,Zk=m\031\342\275<,\200=+\333Y=\323\351\326=\265t.\275\225B:\275e/\276\274\2644\354\275\337\025\304\273\366M\274=\3448\317=\343\242\354=\367\253\306=\306h\216\275\213\375\245=WW6\2754\217\225:\317\340\007<\357+s\273>\200\362\274D\264\242=\':g\275xW\320\273\036| =\r\212\272=h@!\275H\030\226=\276\344\302\274\260\365\262\275,\215)=\344\027l=Wm\232\275d\375\004\275Z\246\242\275W\020\343\274\005\360\353\275\345IQ=*\234\017<\223x\223\275%\031/\275w\007l=\225\324p\275\312\263\311=\010\253\244\275]\363T=\207Q\212=\026\246\214=\237SS=\363\206\254\274\313-\177\274\235a\215=\213\340Q\275\323g\\=\n\231D=\210q\327=\036\205\224=\360X\303=J\316\201\275\230\367\304\275\302L\352<\347\r\352=\306Ci=\225\342\271=\t\212\217=k\223\261\274\013p]\275\246\330/\275f\325\273\273\204K\321\274\341\244\327\2751s\001\275T\035\330;\216\372\345<\361!\256\27526\264=\200\277\273=\334\345\332=\312\233\350\275\030\016\333<\340C\357<\224\265\004=0\324\226=+\234\347<\346\210?<\325\030\230\275o\226\326\2748#\032\275\347l\261=\261~\275=\005En\275\351Z\306\275\t\027\317=\223K\244\275\346\215\260\275\222\262\314<\334J\314=\347\206\204\275\264\271\"\275{\352\037=\263:Y=Wv\237;\242\332i\275\331\273\331\274\210\236\242=\302\264\270=\005T\246\274\307\232\307=Fnu\272\000\025\332\275\342\306\212<\367V\270\274Tz\274=\325\354\314\275\331\024\213<q\205\331\27421O\275D\n\366\274\214O\247\275\t\344\261\274\260]@=A\303\207\275\360NK=\343(\324=\221\177\250\275aI\\\275I\207\313=\256x\231==\'\346=\240\273\351<\370\3326=\261\353\263\275\337\217\332\274k{\335\273\t-\253<\212\243\263=6\313\235=\207D\212\274\326`\243\275\252\036C=\330\331-=\203\032\263<UU\357\275\233p\001\275\006j\265\275\032\275\336=\224M\356\275\3263\354\275b]\227\275v\375M=\035\372\252=\337-\200=`\206\213\275\323\302\027=\324M\273=\362\253Z=\240\3518=\317\305\305\275n(\001<\021\341\205\275sJ\362\2741\327\306<\340\345\374\274\273\240\244\272\307B\027\275\254\366G\274\321\363\223\2754\276\366\273cx\365<\021\204\327\275A^w;O\267\205\275\rr{=\021\255\277=s\242\326\275\035\377\026\274\373\317\263<\302L =2\266/=\007Q\306=\273\334m=\276\201\315=\324\200\316=i\304\340=J\362:=\r\207\245=O\222\216\275\277\311\221=\361\335\200=O\001\270\275\246\367\215=`\277\005\275\001B\t=pm\257<?=\351=\266\203\021\275W\312\310;\366<x\274\371\016\220\275\225\253\355\275)A\034\274\021A\351\275\3135C=SG\250=\234\002\265\275+a\232=\302d\256:\263A\375<\244\006\035\275\205@\307\275~0\313\275\263;\255\275g\246\000=U\225\301\274\221\326\245=\276\271\261=\272\300\t\275\204W\254\275\336\\\033\275\3000\"\275oQ\300<\027l\353;\315\374\362\274\000\312\003\275\225\232k\275S\335\223\275\374\303\232<\220\342\231=\221\262\256\275i\375\251\274\300\204\207=\370$\331\275\265)\215\275<\331\356=\341m\350<\224\240\251\275\231*o=\\\350\300<7\325\330\275.\2162=\230\353\216=\r~F\274\236\341\320\275\254\366\241<\027\356\344\275\330R\212\274\202n\276=g\202~=\243\351[\275\251\002\337\275d\212R\274\'j\236=\030I\203=\026*\272\275\236\t;=y=\341=\004p\302\275\303\346\273\275\235\"\t=|\222\271\275\355\315\274=\270\277\255\2752\\\252=\300\372\323\275\014\315!\275\347\022\n=08\240\274Ke\213=I\002\254\275\0221,\274(jc\274\311\277\201<\247\250\322=\306LD=(&\314=\017K\351=\017{\276=!\217[\275i\3766\275:\'\242=\234h\224=d\264\343;yT\305=\374\355\247=[\001\324<l\251\221<\337~\213=\332\025\356\275\377\373\311=\341\243\307\275\257\230)=Z\345\352\274P\247\264\274F\233)\275\271\343\217\274\340\271\363<\017\267\365\272\026\223\230=\272\360\271<2\204\321=\252\364\355\275\205\301\356=\211\202M=\001/\275=\275\236\375<\306\357\237\275\324\235d<\n\230\031=\033C\245\275#,\323\275R/\270\275X\0076=\255\350\262\275^\260\344=\321\355\253=\352\025Q=\350\267\305\275\250EG\275<$u=\2309O=\334J~\275P\017\275\274\203\361I\274\027\230\305<\315L\001\274j\274\317\275I\220\260\275\r\224\'\275\225r\222\275\3212\262\271F\004V\275k\337}\274\336\275\234=i\324\250=\0269\253\2757\313g<\357\222\027\272W@s9\314r\233\274\304e\210=Q\306\253\275q\355\276=\374I\'\275\210\307\305=t0\207\274\312\253\264\275\217c\240\275)9\256\275\345W\231\275_\377}\275\314\357>\275\302\212E=`\351\303\275\332\261t=B\200\354=N\274\235=\336\034y<\035h\260\275\375\205\277\275Do\371;\020\224;=\n\314\311\274\344\357l\275X\274l=\002\310w=d\212[=\217\024C\274\363\217\200\275R+\202\273\271\337\205\275\232,\235=\276\010\301\274\323\"S=\330\342\265\273\203\332\324\275\301\241\304\274\304\035}\274i\013\235<.t\034\275\241W\251\275\010>f\274\312\327\324\275\235\331\332\275~\017 =u\023\356\275\212\251\243\275\270\226\366\274\372\366\327=Q\275t:\207@\331<rAU=\340\021\213=\032o\333\275O/\304;\214\035Z=\365\036\256=2\343f\275)\345\277=\317a#\275\236\325\201\273\214_\325=\024\317\271<qI\203\275N\2138\275\325\002\217\275\273\'@\275\336\311p\275\001i\303=4D\"\275\355\r\260\274\236\005\240\275\353[h\274\001\301\205\275\337\354\'\275#M\260=\334\325f\275\302r\036\275\253\td\274\034\256\212=\327\2644=\013H\334=Vq\214\275`w\370\274B\027*\275\356L\022=L\252\216=\240\254\337\274$1\216\275!\342\246\274\001\010\303=\363\005\347=\227j\260\275\232\365\204\275:\017W=_qv<\273k\213=\340;\274\274\355\027\303\274\025\\T=\3730\274\275\317C\267=\247_k=\334ZU=E\352\022\275At\311=\216\342N\272\013\025\226\27555\021=\201\367(=J\017\221=9\320\325<\n\345T=\2745]\275W\323G\275\316\2273=\031\362q=\034\363:\274T\255r<\305\367g<\375\375\366;B\210]\275\351\370\337\275\347\245\026=\037\366\025\275\035\000L<7Q[=\035/\324\275\031\305\253\275-<\274\275\004~\227\275\215\206\205<4\205\214<\355m\224=|\367y=Y\307\237\275\225\340\314\274veX\275\303\006\014\275U\241k\275W\360\320=L\020Q\275\002\237\223\275\337(\263;\225\337\203=ej\347=?\313\"\275x^G<A\215\365\274\315\276\335<\377\210\217\275\301\265f<\031\255\313<\010\322\263=\2401\317=?\204x=V\201\232\275(\265\216\275\232\355\207\275\267\"\240=W\340\\\275+3\332\275\036\227\236=\177\272\345\275K\222\364<\374\357\036=\332\031\342= \314\033\275\026\022\275=$\204\343=\356!\325\275P\211\t\275\316\350\372\274)\343^\275\016h\335=\317\020\253\274 \014\234=\311\001\273\275\267MV=\'d\245\275G\332\025=\372\203\010=n`\352\275qZ\022=\363\215\016\275\001^\232\275BDh<\336)\017=\316\265\322\274\352\330\305=\360I\251=\003*\231=:V9<\321 \260:s6\260=\200\216&=\375Y\314\2739\315\336\275\242\314\267\275\237\317\022=\301L\263=\244\326\357\274e\327U=\276\350%;Y\263\223\275\316\220\332\275Dm\214=v\020\213\275\325\223\244=\216\007\352\275S}\034\275P\213\246=\3058\224<\366\341!\275\377E\314\275\252\010[=9\037\006\274s1\026=?\326V=\'\215\353\275C_k<Jy\231=i\331L=i\000\224=\362\020a\274\307\371\222;^\232\320\274@\340\301=\014\221\307=\\\345r=\340yw\274\0061\245=9\232\247\275fK\202<\334\200\222\275\375\0355=\235\033\305<\004\350\254=\266c\244\275\022\305\361<\332n5=Q\220\005\275\231\203b=\253\010\211\275\276a\201\275\246\363\352=\326H\277=xj\210\275\226\272I\2753r\263\275~\'\241\275\222p4=\346R\266\275!\355]<S\301\203=\235\375\223=\007\037\270<Z\200\017=\3311\262;\t\277\317\274\244\005\304=\360\200?\275\3206\257\275^\270\347=\314>\324\275\201\323g\275D$\202=m\032\227=\010\342\325=g\374\237\274\340e\235\275pq\202\275i\376\243=\274b\241=mo\227\2753\305\227\275bD\335\275aH\314\274\255\'\271\274)\340\n\2730\035\301<\264h\324\274\326H;=\270}g=\367-\262\274U\320\302\274vD\201\275.\027==P\357\336\275\200\347\024=d\022\324=U]<\274\215i\256\274(\031\222\275\201\331\212<\312%\3208:+\373<\264\243\351\275M\0100=\242\330\217=\264\360\251\275\220\n\303\275\203\361\314<\304O\266;K\004\300=\221i\231=<+h=T%\271=Df\314=\324\020\255=\313:V\275\223q\r\274!\013E=\273\202\360\272\216y\220=\211\035\367<\316\256^=\327Q\332:\376\341\372\2741\r\312\275\270rr<\340\313\320\273Y4\177\275rc\261=\004\n\017=\212)w=\226\327\350\274\361\277\355=\241&\323\275&A\266\275\212\224\343\275x\313`\275`v\330=\305\021D<\203\325\317=\223\313c\275%\020\315=9\225\231\272\212\374\331\274\375\010p\275\235W\214\275\222\217\224\275\366><=\377U\242\275\210\005\311=q\267\220\275\014\037\205\275`6\357<hLX<|\344\340\275\336\234\240\274\375iN\275\037\244o\274\306\261\277=\177\177C\274\303\360\256<J\330\r\275\347,\341=\255\0052\275\023\302w\275+-+\275\311\010\312\273x\354\032\274\351t\317\275\003\006\027\275!;\037\274Z9\215=A\004\266\274$v\243=^\252\351<\365\032H<fT\247\275\327\215\232\275\274xq\274RA\266\275G\273\261=\215\300g=\325^/\275\256y\265=\367\010\223=r\231\300\275!I9\275\363\2352\275\206H:=\025\344\014\275\266D<\2758\r\254\274];\305\274Pg\266=\007\005E<#\030\335\274~,\316=yG\323=9s\002=\020\205\267\274\032M\220<7\026\214:\310H\263\274\216\"\316=\312\252\256=R\210C\275\013k\236=OP\337=I\"\260\275\345:\253<BP\213;\257\335\241\274+4(=4\326\224\275\376\224\332=r\271\207\274D\007\006\275WcG;\234\371\'\275\342\275\220\274\215\007\r\275\214a\307=f\025}=\372\027\242=\'+\237<\031\321\255\275<\027\017\275\273\367\013<\367y:\2746\354\246\275.^\337<I\r~<\226\004\224\274h\340\347=\2366\343\275\276\265G\275I\206\257=?j\313=`\353Z\275F\242\276=\266\321\266\274;\014\337\273\322u\035\274\201\262\325;\030\rc\274\335/]\275\203\021\342=N\263\221\273\313\334i=r\375S=\031S\220\275)\237.=_4\331\275[\203^<d\305\322<\r\267\222<\306\305/\275wYt\275\237!\306\275\305\224\225\2755\332l=\325\260\224=\000\351\257=C\367\344<\245A=\274\242m\327=\357~\227\275\316{\330=O\261\021=\273\314\313=\257\363h\275\202\224\213<\260Sm=\361\3019\275\004\327\034=k\252\336=JW\270;D\312\213\275\255d\363\274\321\217\241\275+\220C\275\271\260\375<\262,Q=\r\240\353=Av\270<\223D\270=\302`\317\275G)R==\364p\275\00629\275P]\311=#\211\330\275^(\210\274I\214\276\275\310\307\332\275\226\375s=\254h\221=-Z\357\274O\231\325\275\307:\332\275\373\312@\275\326\004\323=\177eX\273\205\226\304<4Q\236\2751\270\271\275\003\326I<\031\177\277=x\305\341=Os:\275$R\324\275\r\366\001\27517\024<\354\010R\275\345\255\230=$\243g=:\214\275\275\351J\245=\341@\244\275\221V\025\275\264\243\226\274uj\236=u\264\222=\232\027E=\"\266\344=\304>\337=\352\202\217\275;\245\237\273\\\024\"\274\341 \265\275A\307\210\275\021\005\216;\005\262\213<\375oJ<M]\246=Pd\226=\247\3258=C\202\250\274\324\334\254=\316\261\031\275\023dS=\375\026.\2758\223\014=G\311L\275\272\n\321=\315\005\325=J\233n<\203\321\235\275\234}I\275\366\263\313<Ie\224<\260\003G=\342\370`<bx\316=\232K\335=,\243\330\275\364$e\275\266\264\300\275\223\255U<\026\356\346;L\327\345\274\377\022\211\275\212%\350=\275\261\270\275\177\300\213=\035\351\320=\266\325\244=\303\322\277\274\326v4=\243\252\223=\304\013\323\275\033\201\205\275Z\373y\274\252 >\275*\212\024\275\222\277:\274\223\203\227=\r8\337\275\253\325\345=6\233\223=\340j\225\275\367v0\275]\264\253=\006V\013\275\362\"\270=\224\226\200\273u\333\304=\267\270\237=)B7\275\t\275U=a\320\331\275f\347\211\2753Hu\274Xk\320=\345v\221;,\271\227\275\240\367\323\275\307\300j<\232\361\203=f;m\274\374e(\275\370a\326=i|\350\275\301\207\262=\303L\275\274x\023\277=\353\275q\274\361H\032;\367\377t=\320\371\265=i\345|=\3101\300\275pM\273\274c\246\305\275\322\314\244\275\274)\355\275\004%\261=a\372\207=\354\225\025\274\331o\335\274\237\n\357;\020=\233\275\357\224G=\345\304\203\274\000\256\024=\337\374\243<\014\200\337\275\333U\223\275>\235\226=\026F\245=\327-\236\275\235S\246=\260\006\231\274\000\323\014\275NM\340=\200\204\335\275\312=\341=kb\342\275\221\027\225;\330\321\341=c!\000\275\340\037\335\275\274^\322\274\252\\w<H\251\345=\r6{\273\205\"l\275u\324\322\275{`>\275\356\3165=<\241\344<\237\207\320=\376\253\210=\004\026f\275\213\025t\275\030W$=Zg\342\274\020\024\301=\271Mb=\031\2215=\320\300\251=D8\324\275\"\337\265\275\231\234\261=\277r}\275|.\232=\005\216\304=\305\245\217=8k>\274\236\036\334\275\323\035\265\2747\312\223=[!\367;\016=\320=\307c\006\275\317\245\234\275\225\276\245\275\317\352\256=j\246\346=X\330\353=\263\"w=\314o\370\274|\226\322<p\376\303=?\255\270=\306[\371<\233tu=\272\237\243\274\200w2\274\tl\315\275\005\237\262\275h\244\224\275\310w\342\275\370|\255\275r1q\275\330\375+\274\274/v\274n`j\275^\275\266\274\371\003Y\275\276\362\351\274\242\330\272\275\264-\226=\036\315 =\241uF=s\013\317=\t`\273\275\241N\350=\2130\330\275\310\362\216<\2565\354\275e`\322=\031\256\275=\233*\005=\275\247\216\275\333\024\210=\356U\327=\3610\017=\327\264?\275,q\355\275xs\321\274d\032\225=g\277\213<)\264\375\274\246)\003\275!,\023\274\223\0252<G\014\247\275\335[\203\275\035\357}=\377\'w\274\213%\355=\342\201\t=T\305\303\275\275\200\201\275\341\274\212=\266\367\275\275W}\020=[\323\251=\0023\022\275\341Q\247=y\336\243\275\302\234\343=\220Z\226=\342T\333=g\244\003=\274\032[\275\177>[\2754\211\220\275\315z;\275:C\025\274\330\251\352=\307\006@\275\301\035\252=\331\312\274;XG\227\275\361Y\261=nG\257\275\217/\301\275\031b\337\274.\007\006\275\311{\251\274\251\266\315\275 {j\275\202\267w\275\017r\241\274\253\351=<\024v\035\274S.\256=*\326\237=?\364\320=\026\221\261\274\300\211V\275]c\333\273\2158\357=\237\233\332\275;%\312\275{\302\306=\\\354\014=\325\246\270\2743?\227=\304\020\305;WZ\257=2j\000=/\273_=\251LB\275Y\340\352\275\332\0242\275\266<\027\275\334\325\210\274\036\214/\2754\016\205=.\322\206=H\202\261\2755n\301\275D\0060=\231\351\242=\036\263\271\274\372\030\364\274RU+=hS6\274\352\352J\275r\010\225=\373\001\330\275_\272\310\273\r\"\336\275\320J\264=Dy\246;\271/3\274\'\362d=\274\177\325<,3\323\275\016\332r=\316\376\323=\223\352J;\242\217\233<C\364\322\275\330*\256\275g\233\021=\037)\212\275IJ\2609\324\246g;\3123\305\275-(1\275$L\251=\260\270\354;d%\354=\267\212\020\275~\267\232=$\353*=\215\236\250=\036\013\227=y{\323\274\240\235\204\275\312\350t=\252~\265=\312\333\316\275\001\201\206\274\351\300m=,\262\001\274\301\236\323\273\343D\334=\305X\321\275S\275\004=m\032\300\275\014t;=!\340\302=G\233\260:\326\222\320\274$\342\335<\247C\234=\330\206=<bp\202=\263\036\367:\324~\220\275< \246\275\342\006L\274\0073\020<^f\252=\032F-\272\324\033R\275\244\370\203<\211PB;Y\'\265<\023\373\275\274\346H\t=\313\331\251=3\320\267\275l`\001;;\275\270<c\306T\275c*\251\275\032\237\235=\264\355\354\275n\356\203=\257\226\372\2745!L=\2041\267\275$\266\367\274\235\331\001=3\304\025=\rE\002=t\\4\274Sh\234=\3652\313\275\232oa\275\371\226\276<8\270\r\275,\330\215=k\240\026=\331N\312<|h\302\275\245u\272\275{\262\346=h\013:=k=\340=\022\257\330\275\034\371\343\275\226\301\207\2749\321\341\275\006\243\212=\244\024\262\274\241rr\275.V\n\275\002\204\030\275\213N\213\275\236\034\263\275\336:\354:X%\377\274\207\014\035=\262\265\274=?f\215=\026\032\337=\266\200F=\326\223\267=\013\340Y\273o\203\257=4N\347\275\353\245\250\275\336{\205;,~\303<\234\246\211\275\356\265Y\275T\026\260\275\345\352\323\275\320[\346=\226\014\237=\343\201\226=|\r\376<[\353\306\275~\031y\274\276\253b=,\177\310\275_\372\007\274o\001\250<\261%*\275\017&\236=\001m\272\274AP\246=VS\301\275\315\266g\275\324\343\260\275\231\254\004\275\225\276T=\247\2575=O\243\213=\355\360\203\274\002\246\251=#\304\322=\\P\224\275\365\203\220\275+\351G=\320D3=\023\005\204:\226\262\203=\332wD=\022T\253<\271\217U\275$\024\016\275Z\367\021=J#}=\372\035G=)\301O\275X\237\227=g\231D\275\027\274P\275u\344\244\274\352\352{\275\202\270\270=WC\234=%\202\031\275)\223\331=\302\200\320\275\270-.\275\035\217\340\275\203%\026=\355C\200=\357\274\031=z\376\230<\'Ek=\273\346\237=6\304\224\275\217\0246\274\021pL\275\375\233\245\274\351\2439=\023`e\275|#\204\275\212\224\253\275Cq\317\275\237\242\312=^+\331\275\210\270\336\275\\\3429<\335\014\344=:\317k=N-W<\226\226\261\273\230\331\355=\333\027\260=\2260\317\274\027\032\351=\t\2057\274\301\253\245\275\340\257\203=\022\325%=\351\337\343<8\364\236\275d\275\027\275\360\376\017\274\206\223>=\273o\214\275\340\"\355<h\230\304\275fs\205=\343o\204\275-\033%\27504\037\275\232\317\274\275H\240\214;\202\351\307\274\227i\271\275\000MR;\256\245^\274\037\035\337<*\266\266=\274\225\345\275\347q\342\275\322>\311\274c>V\275\013!\324\275\254J\230\275\033\355\211=\272u\275\275\266\225\352=\275\335\234=\344\026\000\274\027m\312=\004\270\363\274\233\030\245\2725G\275;\275\021\362;\026\3463\275nyo\275\235\224\030\275\225\017i\274\350\032T;]/\233\275\251?\t=\206\372\347\275\035i\313=\374jR\275\204\352|;i\244C\275\006\252\357\274R\251\267=}\217\004=\235\303\206=\374<\262=\243\177\236=(\213\241\275kT[\275Y\303D\27550\024\275V\020;\275j\366k\275S2\206=\t\272\271=O\177\026=\251\377\374\271\367\177K=\306:\263\275\226\234\311<\214\000\n\274\323g^\275 I\312=|q\367\274\016*!\275\237O\327\275\211-!\273-<\337<{Y\256\274\205\310\237\275g\270\274=f\244\265\275\036x\017\274x$\230\274\330\266\307\274#\324\331=\373\331\022\2757BE\274C\232*\275\347\203:\272\253\364\337\275\302\330G=x\300\312=bF\025=\262\206k=\342\200\354\275\357\'\225=g\330\376\274f\377\324</\275R\275\274\223\202\274G{\316=\335\310\226\273\033\223\312<Q\204\267\275\215\232\235=\222%\272<R\333Q\275\025\t\320\275\370,\264\275jF\224=y\306{=_*\314\275\303W\371\274\221\212\204\275\013\376l=\005I\355<\217M\324=\336ad=Y\350\343=\322\305\341\274\343\356\312=\3635?\274B\255h\275eW\312\275<U\354=\216\350\266=2\261\344<\022m\240\275z\260j\275\253\373,<m\342\354<\"\336\300\275\3319\200=T\313\001\271\322\305;<\022de\275\372n~=oz\345=\t\363\346<\202\361\220\27468`\275i\032\025\272\230\200x=\333\251;\275\313\272\216=K\226z\275\202HF=\347\356\242=um*=m\306\003\275f\300\206=\332\307\240<\313\000f=\313\240j\275v\354\326=\200\223k=(\'\250\275zz\341=\333\177\234=5\037\306\275]\n\341=\0246\251=b\340k\275\247\377\332=\312\277j\274@^\260=\323#\375<\026\325\"\273\271\271\303\274Z\215\201\275\362E\004\275\035\224\344\275j\233\312=B\024\247\275\360E\352=\0009\325\275\352;g\275\327\356\371<\003A\231\275\202#\343=\211\363:\275O\227\333\274\230\272\220\275\377\334\333\275\013o<<\034\340\356=\377\352*=*P\241\275\250\335\235=c`\200=\021\232\263\275\227\225\310\273i\007\311=\336J\352=0\003\222<\315\306N=&i\202\275NMS=\350\257$\275\206\341\266=\016\367\265\275\330\001\252=\360\342\274\275d\027\033<\360\354&;\364\026\206\275s\244\r\274\034\257\271\275\231\217\222=\341{\335<\240\256\244=8\257]=\227\323\037;\\\357\255\275\302\013\235\272\271\342P=FU\330<\345\t\262\275\242=c\275ZF\353\275g\n\252=\350z\205\275\327\203\214\273\017\227\356\275\024\222\366\2747w\224=\266\201e\274<;R\275\024\235\210=^\307\350=\302\235E=Q\363\034\274\254 \221\274\025\315-\275\361\334\212=1\321\261\275\261C\210=\351\324Y\275\222W\272\274\351H\332<\332fh\275\356\3127=\345r\336=!g\207=\326[\342=%\215<\275\323$\n<\032m\323\275\201\231\211<\344\021\347\274N\336\257\275/\263\t=\324\352\235\274\016\334\305\275$\2720\275\3048\013<_u6\275\277\212\226\274\020\227\270=H\376g=\215Q\331=\253\3700<*\301\247\274\251\224\213=\375@6=\277\351\350\275\337\345\024\275xNT=\024\303\320<\353\223\270\275\004\345f\275\226\265H\275m\002I\275\347\033\r=\207\347\020=\263\021\264=jF\315\274\317\351k<\000\240\222=\314H\030=M\000\313\275\201\266\354\274\336\277\177=0\002\003\275g\\l=0\340\247=\016a\010\275\215\273\341\275BN\225=\\\310\311\275\034D\233\275\325\307\313\275\315\0139=\"\"\027<\"\014R\275*\220\355\275k\220)\275\324\033\210\275_\360x\275\271\n\211\275\235\003\371<9^}\275\210nX=-\214\344=S\323:=v0\267=\324,\330=\036\310\243=\264\027\333\275\244\247\235\275\213:\253\275?9\206<\230\202\014<\227\014\216\275\351\363!\275D\263\340=\274\302\353=*;g\275fa\254\275\232\203\306=E\257\331\275\200*\205\275\370D\221=\360\226\210\275\367\373\332;\374\247\231\275\317\2276\275\215\346\310\275\032\322\327=\240\031(\274\031\315\314=[\375N\275\233e~\275\365\2709<4\036\333=\304\301\351\274\'cG<\210\202f\275/C\266\275m8\004<\007H\337\275\364c\346:\317\257\271=\0148\330=\024\344C<\360\237\204\2757-\215=\250\245\031;\343\221\260\275@\377\376\274u\227\253\275X\212\356\275k\"K=\311^5=@\365\230=\205\217\331=xF\264\273-\031\025\275\005DM=\004\267j\275+A\350\274\217[Y=\343w1=\262\237\177\275X\010\027=D\007\203=\256>8\275\322D\271=8\354\264\275\002\231\244\275\035D*\274W\025v\274u\246z\274\000w\224=\004~\352<\032%\306\275\r\263\001\275g\r\352=\201s\013\275\021kf\275O\0001;\336>.=i+\241=\265\000\243=\267{n\275\016|\331=\017D\306\271-\353\232\274\276\335g=[\262\230\274\336\247\255\275\366V\327=\363Of=1\210\\\275\374\326:\275O \360\274Bj\274\274k\324M=tt\222\275\376\246\221\275C\037\302=6\346\206=\374<b\275(\237\225=\257h\301=L\247)\275l\000\227\275u,\020<\252(c<\351\313/=\023\006\322=\016\271\225\275\357c/=\361\214\302\275\004\014\320\275[c\226\275\331K\026\275-\300;\275\337\243>\274\033\334\306=\3724\233=\3115\321=s3\367\274P?\230\275[p\352<b\354\341<\354\220\325=\243\352\216\275\237\003\271\274|\316L\275v/\235\275\262\273\302\275\000gU\275\234U\027\275\020\363\025\273\235\271\314\275:\216\323\275<\006\222\273]\227\307:\365\206\274;\370\361?=#\025{\2740G\241=\205Y\274=(\251\304<\253\251Y\275J\351\242\275\013\215\346=\001\201\230=\242f\213=\361\245\264=\232\351\241;\332\217\224\274\221\307A\275\301\301\236\275\3775d=\271\215\343\275\251.\317<\340Xd= i\217\2752\034?=)\341\343<\203\326\223\275g\301\274\274\364\266Q\274e\203\241;\211\017`\275\214\314Q<\014x\251\275I\314X<Er\331\275;E\357\275<;\303=\312\215\005\275\205\266\310\275kq\354\275h`\251\275-d\305=\013}\236\275(\320\203=\251\233\260=\200\310\321\275\250\301\247\273\374\325\274\275\205\361\351=l\334\200=\325h\243\274\327\'\341<v\2150=\013Fn\275\223\362`=\007\213\316\2757Y\214=\320\370o\274eP\276=\010<\302<i5:\275_\241\374;A\362\032\275)\3702\275\334\265{=s]_=+\022\341=\002\210\301=\014`\251\275\312\251\202\2755;I=\322\235\237=da\304<a\005\313\274w=\017=\177g\267\274\254t\310=L\305\201\275\334\250\211\275X\023\325=\254\010\331\275\2412\r=d\022*=\031\267f\275\216{\310;\333\2503\275\246\256\345\275)w\341;z\352\323=\270\336\345=\224e0\275\257\361\022\274\374\241\350\275\r\235\342\275a\001@\275\304_\010;\230\337\216=aT\313\275T&\265=\231\212\337=\327e\365;I-\365<\3503\332\274\236\266\254<\335\264\256\275d\037\026\275\0073)=e\213\231=&\373f=\3635\227\275\001.\355\275\326\315d=\365U\033=*y\353\274\323v\036<t\t\230\274a~\227<\334n\337<\221\016\220=\266\3516=`D\217\272\311QR=L\345A=\251b\333=\227\016\177\275\372\246\270;kz\354\275\"[\332=\310\004\260\275\252\002\272\274K\022\307\274\023V\264\275\350\007\264\275\003\373\201=\005\245\220=\312\322\356\275m\017\207\275[\376_\275\017#K=\233f\034\275=\335\003\274\222\235\251<\n\343\224=\317\017V\275\226_\317;\030\230j\275\t\377J=\325\335\340\275\300E\226\275IJ\221\274z$c<9.[;\276\007\314=@\271\007<\333\351\035=mN\363<nH\254\275eP}\275l\020\032=\277\365\200<\354\211\311\2753\246\317\275\231+\327\275\323\253\320\2749]\265=\300\270\025=nL4=<\320l\275\001\023u=\016F\240\274\353r\342\273u\266\225</\036\337\275@\332\001=\335n%\275\232\272\274=\023s\210=\237%\243=\256\375d\275\347z\231\274\321\324\"<\346\274\317=\022Yc\275\323|\247=\017\276\364<\327(\307\275\235`g=\327\304\312=\002\344\033\275\236_)\275HT@\273C\313\236\275\266\346\261;\365u|\274\326\315d<p\224\345\275 \311\310\275\211\346\244\275\200\210\022=\213u\333=lK\340=\366\363q\275\372\003\315=5\215^=\227\376\247=\345\010,=-K\214=\202-\276\274\207P\336\272\271O[\275\376\336\262\275\026\227\242\275U\251\316\274\362x\211\275\006\302\340<\032a>;\265\023\n=d\227\301\275\'\353\321\275\251:\013\275\251By\274{\300i=\336G!\274H\032%\275$\237\344=\350Z\262\275g@}\275\026\031\315\275\210\032\226=q\357\260\275\323\207\337<\227\333D<\2320\215=\335\311\005=u&\016\275\3201\334\275d\034\255\275\250\251\310=)\224\002\275.\037\007=\354\232\306\275\213\\\243=np\275\275\177#\261\274O^\221\2751\024\247\274\231\232.=\344\252\355=c\367\305=\376\373\200\275\337\200\342=%\3460<\006\253\037\275\221\362s\274U\375i\275\027\020\244\275N;\227=\226\220&\275\210\231v=\313\334\263\275z \216\275yhi\275\351\344\241<t\353\275=\221\3578\275\024j>=\341\026\317\275&\037\343=\250\275\314\275L\272\222=\300\006\356<\034/\336=\005\320\225\274\240\250\231\275\361nz=\242\003z=H\277\207\273\264\'v=\266z\273<\210~\261\275c\242\354=\267j\305=\2258\230\274\376\205R\2750\035)\275\332W4=\031}\337=\210\241q=v\215#\273a~{=-0\352=\251\303\342=\217\310/=\325\0352=\347\367\354=\000C\211\275\212\3638=QM\225=\247X\352=]\271G<\240\210\233\275?,f\275\241\327\202<?C\014\274,\251\206\275\351\307\215\273f6\003=L:\212\2758\237_\274\345N\277;\217\350\342=fZ\030\275\321)\300\275\034\206\204\275\253(p=\301\030B\275.\027\323=\220\316\253\274V\214\216\273\305 \255<&\363\251=\035#y=\336e\321=\211J\033\275\240\275\215=\2272\314<\353P\306\275\333\344+\275\312J\026\274\2758\314\275\370\274\353\275u\3168;\346`\355<5\265]\275M\"\234=?A\312\275\000\260O\274\314\275\232=\216\322\031\274B\333@\275]\231l=\\C\201\275p\263\237\275K\235\353=T\356\344\275\2070Y<\303\325\336=\351\2127\275\036Uw<\377\270\240<uO\335=\321,\300=\223\220^\2743\221\350=*\317$\273\025\021\246\274\301\355\363<\330\321\316=\314J\243=*\236\216\274\2048\326= \274x\275U\335\205\275\267\242T<\333\210\202<\214\274\246=r\220\331\275\321\304\321<\010\215\240<\254\256%=\237\266\331=\277\200\236\274\334\350\344=\205B\356=\010_\202=\277r\'\275\356\332\313\274\304\322\217\275Hd\320\275u\371\334\274,\355B<\\\222@\274F\314\320;k\273\254<\026hL=Q>\225\273\206!\327\275\352\225i\275\201\300\253<\317t3<Iob\275~\032\321\275\252ZM=P1\231\275\265\240\005=\370\217\314\275J\032\250=\267\347\265<\300\230\004\275\246\312\325\2756B\240\275x\330\225\275\006\351\216\275SA\327\272\206<\205<\345\342+=\335\202\017<0\255\272;\200G\223=\177\023\344\274\252\377.\275\261D\204=\023\017\035<\274e\014\274\211\222\024\275\226#x=O\016)=\317p\234\275t7\334\273_\247\207\274\2615\033;<\024;<\370\305\344\275\315y\214=\265\345d=?u\344\275\2403\232\274^\'/\275rc\275=>\360\010\275\336\263\030=\333\037\227=\252\026\010=l\236\022<\'\260-\275\024\315m;-2_\275S\314\277\275\'\256\222=9\260\256=28\323\275\210\200\201=Sb\350\275\000C\352\275\031\257\260\275\326\025\273\275t\273\231\274\341&\234=z\013~=\206\010\334\275\224\364\217\274\334O0\275\334\220\364\274Tk\273=\350<\322=RMW=\247\200\271\275$B\242\275\240\332\346=\016WZ\273\251\272}\275\347\365E=\336>\263\275\275\252\313\273\332\003\032\275Y\032\270\275\226\312&\275\2543\263\275\375\256\031\275iY\250\274\261\377p\275F\033\210\275\341\016-\275\'\024\220\272\367u\211\274\303xy=\354\207\276=&\321\232<WY\256\275t\003\225<2\334G\275/\223\315\275\202D\216\275\314\036\023=D\023O\274\314\263\022\275\373\002\357\275\n\300\302\274\325\340e=\037\312c\275\360\224\261\274\213k\205\275\354\310\257\273\035\367?=>\276,<\346U\213\275Q\350j=\353\220\217=_\246K\275:\006\236;\322\267\207\275w\251y=,7\347=\257\375\333\275A/\324=\002\345\310<,\305\335;fP\327\275\235\313m=\337\242\244=\3611!\275k\335\235=\237\314\247=\263F\225<F\262\256=i\201\n=Y\222G\274G\016\201\275\230\375\334=\267k\205\275\005\257\211<w\261O\275\231\314\324\275\242*|;\242\221\246<\232\261\316=\256\270u\275T\270\006=&Wd;O\246\"<\327\226n=\246o\033\275\230LI\275\314Az\274\215\341a\275q}P=]\232\256\275W\331\226<e\\9\275\363\350\353=(R7\275\n\224f\275pF\213<\315\031\276\275\236\000\212\275`\274\222\274\360\263\020=:jh<h\332\226=\023\264\342<nf\'\273}\373\177\275\271\277\267\275\334\177d\272\343\214\204\275j5X\275i\303\000\275\016\371\355\2751\331\350\275\324\237\237\275S\327\346;\274\337\213<\302I\005<\242j\254=\004M-\275\260\333\320\275\267\236\256\275{lW=&\373\321\2756\301\030=\036Xh\275&\232\014<\3376\270\271F\307\221\275\272 \200=\233U\"=IL|\271\301\305\253\275\034\256\353<O\341\247=\025D\314\275>\256\312\275x\243\302\275\014Wh=g\006\372:%\"\'\275^\216{\275*o\"=\367\300\204\275\374\300\340\2751j\212=_\r\203=\236\366\001=\337\343:\275RK\303=\036\263\277\275\006HH=\370\233\036=\357\207\276\275\300~\214\275{\235\302=\302\200Z\275\214\261\031\275\231\365\245\275\nNK=\324P\357\275\034N\352<ot\022;\242\320\302\275l\005\207=w&\215=\231\021\351=\362\212\302\275\265\366 \275\037\250\243\275\205\033\357\275\224~\227\273\327.\323\275H#\276\274}\272\234=\035\354\021\275q\234b=x\374W\275\240n\272=\235\231\263\275\254\337\276<2t\302\274]O\243<\t\372\334\275\017\"f<\027\354c\275z\023\263=p\227\235<\207\374\024\275vN\352\274_\347$\275\342.;\275\270\321\272=k\230\256\274lL5\275\261\351\354\275\371=\335\273\265`\261\275%\274\344<}\247\304:\025\\\357\275\330]\251=\345\237\201\275\246|\364;()\337=\243T\323=\266\357\342\274\304\323\003=\036\005y\275\320\265\200=v\314.\275\203x(<\022\214\324\275V-\323\275\200\002\337\275VpC< \201\230;\224\315\316\275F\021\236=\364T\227\274[\313n=\362\210\203\274\313\217\304=\3550\212<\220\327\202\275X\325\230<oL\232\275\273\222\034=?\367\310;\035FU\275h\313^\275\000&\034=r\232\251\2743\177\303\275\267\330\272\275\364\001\035\274@\340\200\274\374\236&<CM\206=8j\335=\301$\006=\351^\236=\034\033\260\275\313Q\346=\347qC=n\010\301=\220#\207\275\247P\312\275G\267\014<\331q\224<\221\202\264\275H\243\342=\252_\326=\014\203J\275t\254\225\275^\326\200\275\357_\253<l\364\\;\304\322\235=9\206\374\274\277\360\204\273`\331Q=\345$\350\275\2272\026=\023\366\355\274\246,\233\274\255\211\206\274\232\322X<r\376\333=)8I\275t\3737=\r\216\006\275%_S=6\223\367;\013\245\210=\034B=\275\232\346g<\223\020C<\032\013\252\2757|\223\273_\335\317=\2206\202\274;f\323=X\300\014=\325\026\261\275/\336\351\275=D\211<\027F\273<fL}<\321@\335=\367$\254=zt\335=tb\330={\213\030\275\226\002\254\275o/\n=\323\227h\275\373\267\354=\246\325\3519\246\014\257\274/\245\354\275\220\254\241=1k\222\275.\317\225\274\211d\357\275\377\312?\275&\030\235\274\217\264:\275\362\010\331<\225\277\232\274w#E\275Y\271\334=\202\273\241\275+8\324\275.\361\304=\342\341\337\275\357\377\262<\353\236\356\274Q:A\273\255\325\304\275\247\024B\275C\177\355\275\021t\353<\251\267\023=\n\260\347=\330l\032\274\3716\257\274\211lZ\274\312\326`=j|\022\274\"b\270=\361\274\324=\210\355\340<\002\254r=\235\217v\2759]\242\275\254\304\222\275\274\216\323\274\336\364\034\275\024\213\205\275g\375\214=\272\223\363<u1\351;/[-=r\304\350=5\030\311\273L]\341=\341g-<1+p=\336\343\036\274\363H\342\275\326\207\244\275CL\350\275\026\005\014\275\017\317\226\274\322\233\016=\370b\323<\300\360\217=\025\356\302\275\276\347\305\275z\014&\274\342\231\037\275\336\276U<\027?\245=\3012\365\274\317\202\356\274\020}r=!\216\370\274&\021x=\004\250\347\275(\025\246<\004@\315\275\311\"\370<\374\367\006\273\271\243\214\275\321\322\242=\326<0\275\023t\343\275\3323\224\273\227\3571\275\203\250\333\274\333\377\303=\340!\255\275B\204J\275\026\035\345\275\214\251Q=\021\002\254\2757\300\300\275\001QY<\362\274\037\275J\330G=\247\342\037=s\232\232\275\263:\340\274\337p\355<\005-\273<\345-\274\275d\024\242\275\351\264\316\275\024\265\236\275\010\230\201=\267u\220=\325\2628=\366\003\232\275\326l{=\276\022\264=\257F?\275\036\221\263\275\263\3547\275r\307\356\275\255\013\234=\212\350\006=\347\235n\275.u\356=\266\317\342=Sj\201=\000dI<\254\362\347\274\2079\346\275]\261\271\274/\323\210\275\335\336E\275\313\326\037\275\222\032\246\275\016\324\255\272\224\025?\275\002\032\200\274\033zx\274\330V\216=\303\305Q=ulI\275\"i\n\275\014\255\354\275\241\253\331=\252\367\030\275\236\205\276=\263us<`;\264\273\343\304\234=k\363\314=\222\236\210<\303\215\253\275\247\276r\274\261\002\243\274V)G<F\\\346\271\202O\240=\201\215\321\275\242\330\300=\305\250Q\275 \027E=2T\357=E\310?\275\373:=\275\340y\273\275\246di=\253p\007\275,\262o\272\204~\200:S\033m\275\345\240\255=\363\311\226<\23117<(\003\340<\356\311\313\275\201\"\225\274\004\356\203\2750z|=\t\216\240=\201\361\300\275C\021,\274\204y\250=\336@j=\223\'\243\275\020\355\255=\307\221\320=A;\250\275\364\3437=\225\240\235\275\256\307C\275e\244\301\275\230\277H<\'\301\256=\262Dd\274\227\232\263\275l\237\000=\250\033\321=\377\034\317\274\003\360\244\275P\271\325=7\234\300\275\020\353\272\275\212@\304\275\317\347\000=\362\214\244\275X\250\310\274y\360\241=\251h\327=(\034A=V\036\237=\033\371V<\353\343z=K\341\021=\372\266\312=\365\244\322\275\370\033\305=\037m\327\273\340;\034\275\026+<<\344:\306=\276Y\272=\364\313\237\27364\274=\262c4\274\367\356\261=w\264\217\275\202Z\246=s\324@9t\254\205=\337&\035=\233^n\275\271\244\237=\021\265=\275\231\037s\275\037\312\244\274\273\360\375\274B\203\263\275\210\217\365<.j\002=I\000\344\274.N\256\275\334\037\r<\241\004\277\274\312\037\267=\245\354\305\275\226\273\213\275\324\021\314=F\333\006\275K\273\336=%\261\275\275\250\3126\274\252\206\345\2743\230\253;zt\244=[\212\235\275\302\206\221\275\322\220\r<\334\213\323<\003\331V\275\325\343d\275|\340\272=\177\226\251\275\221o-=\021\221J;j\323\300=U5\221\275\331\317\271\275V\245\357\274\223\342\337=@\277\260=M\020\326\275\337\245.\273\245\032\251=\"v\213=\007\216\024\274\323y\033:\336(\375;\306\275?\275$\tw\274\346\355\301\275\n\031\'=\251K\231\275\317zc<@:\000=t\2453\275\351\017\306=\3750\340\274\227\032\205\275W\336\247\274P\250\004=\337a\345=\372\362\232=}\233\356\275\356\357\315\275>\276\272<\312\352\214\275E\304\255=[\357\232=,c\234=r>\253\275k4\251=\365+q=\270\301\347\275\262\220\322\275h\215\250\274\344\343)=7J\'<\257J\014\275\025\306b\275-!#=X\246\312\274\206\305\202\274{W*\274\010F\304\273PQw\275\260Q\275=K\022\235\275\332\234\246=\252\340N<\213\323\215\274\024\2509\274+\333\177=\276\006\312=\254\2629\275\234C\010=X\036O\275z\244w\274(\261c;\335bE=<L\316\274X\026\350\275}\0026=\262\314\304=\263\233s=\310\270\247\275gM|\275,\225\206\275\024\2441=\271(\245=\325\340\223\275v0\037=Q\275\224<\216h\311=\033\373\223;P9\311=\354\264\336<\022\270(=\001~\236=\354\007T=\204F\331=\345\t\324=\034s\235\275\n\323\344\2743@`=\331\322\275=LR\003\275\205h\353<\232\323\231\274\307m\253\275\267\233\306\275\"0\351\274)\211\217=$[\216=S&\332\274/\350\301\2754@\236\274\024\257\236\274\300Q#\275\321\302\336\275\rv\236=\344)\231\275\234\231\334=(5\234=\376\314\262\275M\344\243<\315\027\200=\024\260&=ERA=\r\225\214\275$$7\274\021\305=\275~\220\354\275T\272m=L\200\351\275k\262\265<q\027P\275\017\221\254=\243QP\275\275H\313\275K\321\337\275sux\275\020\260\310\275\016\320\345\275\007\223a=\032mw\275{\314A;)\326&\275}v\305=u\367\022\275\356\023\002\275\267\261\352=\351\177\263\275xFe<\245\214\203\2751\301\214=\354-O=a\223E\275\35455=5\251\\=\232!\370\274@\326\266=\307D\203\274\357\343\347;\241]n\2734n\245<\'\2452=D\003\277\275\350\266\346<]\247/=\365n\373<?\371\324\2758yh\275\237&\316\2754\332\313=\241\035\330=c\307]\275\273\336\374<*\322\310<\252\276\253\275\347\004\350\275\3760\035\275\323\311\303=\354\225h\274\301\030\351\275L\na\275\001\177\025=\357@\357\275\025d\357=r\021\245=\327_\024\275\215\316\247=b\336\212\274+9\254\275\366_P\275zGC=zV\351\275R|\331=\007\332\035\275\031\323\335\275\374\225\303\275/\260>\275\305f\276=\222\030c\275\2361\213=\305L\223=\371\244\214=,\365Z=>\365\333\275\363\204\200\275\277[\351=\014\n\354\275\254G\231\275\222\217\265=Tv#\274\212\2603\275\251Q\255\274\275\217\351\275o\234\322\275\032k\342=\357\267\323\274I)}\275\376\354\372\274\351\n\207\275\333p\245=)\307\026=\352{e\275\0362V\275\272\332\267<ozP=\242o\247\273\350X\312\275\034\252\321=\300Q\262\27500\237<l\224\317\274\'lg=\275\036\271=\370\357\037=5p\240=\240\000p=\224\214\262=ArE\275\'\304B\273\252\263\273\275@\240\276\275\337\227F=Jw\255<\213\311\346=\237\342\353=\321\016\250=\256\034\356=\010<\216\275\236\005\037\275e\330\200\275\376\007\324=\300!\033=\316\337\341=+\203\205\274UW\263\275~\002\315\273\235a\352\274\377\232\260=x\274\035\275\256S?\275\"\002B=4\321\306;%\323\351=@\326\210=\354\034Q;i\026\251=\r\222\273=gG\311\275\002\335\\=\237K\231=E\201\227\275Y\333\206\274\360p><\2349\274=\221\311\007\272\236\343\026<\027\351\027\275K\300\217=nX\336\275\3607\324\275\352j\323\275_\272\312=\245\313\227\274c\275\255\275\333\276\322=\245\366\225=\246k\210\275\006\004\240=P\221\272=\305p\265\275\330\375\213\275\242X\221\274z\003\307\275\322\330D\275\240G\243\275\320\344\355\274\207l\223\275\203\0041=\225\232k\275\202\217\006=[\037\353\274\260b\230\275\377+\010=\257qT=\216\334\215\275-\376\221\275\026\320%\275f\"\202\273ii\304\275\340~\255<\230\024\330\274\000,\205<\335\302\327\275BI\225\275k\310\301=x\'\302=\364\352^\274\346\000\237\275F/T=\0018>\275\022\375\304=M\177\222\275\305au;\013\215\020\275h\005.\275S\002\005\2736\307\027=u\362\316\275\327\350\273\275\225\242\352=\317pJ\274\222\372\342\275 W\356=N\215\217<\302\016B\275\2666\343=\253\034\246\275\217\022\345\274=\333\272=\025i\350=\"\021\225\274\245h\334=\222f\200\275\353\210\260\274\322\002A\275\234&\025\275\020f\344\275Xz\226\274\377\336\034=IU\317=\004\n\320=\004{\213=[\216<\275w;\212=?\2738=IS\322=\322\024\324=\355S\014\275\313HH=nZR\275\002\022\226\2757N\"\274\273\274\307\275\212sJ\275\275\230\254=\230\337\316\273\006?\002==\234\256\275\376\001y\274\254\025\257\275\025;w=n\306\322<\374\343\240;\267\365\250\274P\234L=.\314\313<\362\224e=\337P\366;de\003\275\271(\234\275+\317\330\273`\002\'<\362\314><1\226\271\275|\274\274=dN\334\275A\230\210\275\005\300\202\274\314\021^=\217\022\303=T\010!=\0005\253=\220\356\340\275g\241\251;m\374\301\275\031\351\307\2752\177\317=_w\001=\312\233\244\275\373?\244=\361\002\255=\200\261P=b\304b=\314dw\275\303p\326\275\t\2744\275\234u0=\317\023\316\273\377\361\371\273\233\002\022\275\267W*\275\315D\346\275\337\005\345\275\013\301\321\274P\032\301;\345\010l\274\335!\223\274\200h =\022\216y\275\266\313\217=\250\316\316\274cKJ\2750c\273\275\245\r\271=\250z\225\274\3276=\275\265\376\333<5\340\332=x?\334\275\232i\243\275L2\266\275\357w\342\274\000&\222\275X\ra\275\014#\200\275 \235\'\275\251\376y<_\r\370<i\2749=\350\243\302=\364i\330=6\2058=\n\240\256<\267\210\213:4\"\251\275\270\261\300=\221\0207\274K\333\245=\306\3612\275\342\330\007=\216\024\317=>4\307=R\261b\275\232\357+=@}O=\324\313\224<O\336\235=\274\006G=\253\330\317\275a\354\003=\320\027\303\274\026\022\336=\334\306Z\274R\226\252\275o\256\333\275i\371T=d\243Y\275v\354\246\275\370\014?\274\033\241\335=\361\244)\274?\253\243\275\351\202\267=z\303j=\310\337\260:O_\325=H\205/\275r\347P=\231\304\320\274\250\241\244=\3756\340\275\017\035\354=\344@\260<\303*\356=\322\031\317=\361N\016<\275\256\247\275\323\265\337\275\356r\245=\3119\325=\274\030\277=\036BU;)Gs=1\217\371<\2254B\275v\241\355;\330\270\203=\260\250\350\275\003\327}\274\363L\"=\322y\351\275j\250%=\251_l=\306\260\212\27585\265\274\201\347\347=2n\255\275\222\344N\275\355Y\031<\322\026C;q\000\212=\202\363\261<\360\355a=\020\210\344\275\272\036\315=\327\335:\275\341\317\226=\001\026\304\275s\004\200\275a\226r= \315\277\275\022ZB\275Y\213\362<~;\217\274X\223h\275\301\276\242=\037\002\354\274*\201\315\275\203\222\265\275>\315\331=\017\027\344=\200\021\205\275\205;\230\274(w\320=\357\272\210=\330l\325\275C\235~\275Z\005\341\275yV\024=A%\332\275\257\223\024=\031\343\035<~;\230=?~\264=\250\276\350=G*\263\275x\346\345=\230\006\276\275iN\203\273Gv:<\272\227\345=~\007\254\275\351\211\314\275\354\023o<E\304:=\253\370^=jv\354=u\030}\275\231Ur=\204A\013=\220\2603=\320\t8=\226\375\255=M\277\313\275\317\027\200\275\247\333<\275\243@3={f\344\274!s\005\275\337\3416=s\"\332\275\254S\231=\r\234\272=\363\212p<G\251\200\275\027>D\275M\241\234\275\001\356\344\275\250\317\024\275\344\0266;\335\271\255=v\037\246=\243\210\003\275\177\013\363;\250\277\014=\020\rP\275\365\237\266=\267\330\365<\024\267\327=\366E\315=x\333\304\275\224\233c=\313\013\307=?\306\353\275~x4=\001\341h\275\214X`\275i\220!<d{\346=sx\000;P\301\201=\324\324l=9\036\250=\243_p<\024\322n=\332?\010=D2C\275\220*4\275\001\331Z\275\366D\335\275\346I\343\275\265@\353=\322\226\351=\343\276\221=\327$\353\275\341\231\252\273\244\334\n\275T\302C<\024\017\031\275\271^\0048\334d\274=G\325\270\275gy\274\275\255\332\267=+\262\243\275\013;W=\253;z\2752\311\242=\350l\352\275\356\236\271\275\222!\352=\342Z\255=\005\2152\275\005\217*\275\361\2229=\332\'\236<\336E\337<&\r\214=Bm\315\2755\331\303=iu\356\275\254\372\006<\"X\352=\374\274C=\351;\212<\365A\277=Vj\317<W\016\013\275\213\210\272=6\3464\275\320\017\344\275\020\300\251=\253\242\263\273\035q\304=\374\341\245\275\037X\216\275\244:!=\217\261\354\275\341B\340=L0\260\275\301\243d\273\020\215\334\275\214;\351\274\370t\250=\275\034\214\275\221\343\252\275m\357(\275\376\325\031<\337\361f=\365\335\260=q\300i=\376\324\325\275l*\332\275\317b\202=\000\013J=\223\321\242=\275\n\013;\351\244\226=\243N\303\275\330S*\275-YC=\357\203\230<\266\026\356=\217\373|=\240Z\316\275X\370\233<v\367V\275\251\226\311\2749\364\314=\332$\251<\021\325\306<\037\343\006=\273\365\330=\310\347Q=\231X.=\321\271A=G\342\310;_v(=<\335\246<\212\036\313<\010\366h<\272?a\275\202\302\026=\225\2752<a\223G<W\232\212=\356TX\275\340%\237\275\014\001\357\275@\260O\273\262B\010<\036\264\256<j\370\344\275pw\301\274$sU\275\210D~\275Us\223\2747\312\t=\211\261\347=\n\361\'=T\222k\275,\310\234\274[\031\344=\340.q\275\326r\244<\322#\340\2756\221\035=\t\207\311<\363\266\344\275\232\361}=\212/\332<\325 \326\274t\032?=\266\325\333\275f\t\000<\003b\265\275\235\250\232\275#\016R\275\303\346w\275\300}c\2748\377\253\275\240\327\020=\363\275\354=\265\235\021=F7\265=\333\337\036;\031\340\021\273}\267\336\275\306\350\200=P)\357\275\023n)\274\215@\244\275\250\002k\275W\310\241\274\226\235\033=\325\263\304=\321A\276\274]\226\252\275)\304\330\274\n\211\330=\227\035\227=9\363\004=\275\256}=\213\347\305\275\374(\250\275gv\272=4{\003\275\025\265\341\275\000oH\275\251\322\323\274^\261\016=\021\"\325\275\247\315z<\360fF;\211\213\004:\357\205\310=\n%\245\275.\005\344;\223\220\225=\306\263\267\275;\334\305\275\215!\333\275\3679\264\275)\025\216\274\220~\341=3?\202\275\317\251==5?w\275\243\270T\275b@\316=H\237\310\2751R\003\275\257\360#\274\210.\211\275\223\033\r=\354\341\335=\220\337E\275\224\201\333\274\327/\363\273\314\246\324=\206\351\335\275\317\026?\274\244\362\252\275\344\376\276=\1772\200\275W\352\177\275\225\006\250\274[/\302\275\002\257\177\275\202\353\340\275_\255\026=\n\035\302\275]\\\263=\370\327\361\274\235\243\370\274\263\250\352<~\351\310<74\237\274C\206\302\274q\351(\275\272\212\035\275\275\331\252\2747\352u<a\250\247<\316\366\262\275a\355\333\274\250\215\321\272\211\023$=\210\233\353=\304\r\254<6\200\t=:\312\232<#\235\245\275~{e\275\316\356R\275\232\363\220=\253\347N\275n\213\341=\351%\010<\367\257\225<\r\361:\275($\206\275\024\204\316=\362~\300\275C#\326\273\034{\333\275\204\002\013\275\213E\207=\232\207\020\275\201\235\\<P\213\323=\261\366\212<\264<F=\213G%\275Y\260\026\275G\000\212\2751\210\207\275\235d\t=\027\200\253=\001\263\373<5\265/<z\031\314\275Ot%=\273\340\313\275\322\203&\275\350\3644\274y#\026=\246\021:<D\364\377</\256\345\274\247A\223\271\017+\254=\343\2700=\020!\220\275\265\016/\275U\344c\27424\276=\233\202\243=G@\270=\000\371u=\360\222 \275\333\332\352=\r\312\305\275\200\'\345\275\242\321\352\275q\270\256\275\200\222\213=\340\205\301\275Bf==\007\274\032\275^\005I\274\255R\354=\260\301R\275Vj`\274\255\377\366<wF\206=pe\352< \207\275\275\266\265\353\274\004\351h<\212\371|=z2\252=\240\006f=\232b\203=\333S\245\274<P\270\275\004m\004\275\252<\302\274\332\331\'=.8\346\275\351\346;=\035d{=\205R\035=\242\312>=X\3713<w\353\235=\337XT\275\315\274\026\275\004(\220;%\027%\273\363\365\336<}\210\321=\031\341\210\275\370\177\314=\256?\306<\332\327t=\355\207O<)T<\275v\355\361<u\254\230\275\201\266\234\274B\\\264\275k.\n\275\356\027\251\275+\033\312\275\016\364\376\274\014G\210=|[\331\275\r^C;\271d\006\274vC\341=\204\366d=U\013\246=\035[\241=\212Y\207\275\361\205\237\275\245\003b\275\270\014H<\375\353\226\274\253\222\217\275)e\271\275\321c\264\275y\260\227<\201\205A<\2030\314=\352\277)=X\224\351\275\nf\326\275\0276\035=\314\325x\2758h\216=\022X\253=\213\340\267=\334\313\020=\225\224\236=\257\332\305;\">\235=\\\036\205\275\302Z\320\275\036\321s<\377\206!=g\344\200\274\004\213]\273\305<\345=we\330\275\203\234\233\272\262\246\260=\240K!\274\201\001\334\275\327\037\334\274\322\372\333\275-*\277=9dA=[\223\276=\007,9\275\326\214$\274\251\316\222=B\017d\274\250S\335=Y\211H\275\010\237\330\275R\200\353<\017\336\254\274\346pn\275K)\215;\365l =\342/\255\274J\353\212\274\313\317\352\275\273d#=Xn\347\274qh\265\274\272\257\034=\003\314\276\275\327\333\362<\214\003S\2747d\274\275\231\016\273\275-2\203=$\005U=M\316\233\275p\275\230=\220B\256\275\314\263\346\275\327\252\243\275\311S\216\274\353\004\231\273\332kJ\274n\217\271\275[U\316=\303\n\321=\245W\300\274K{\201=Ji\221\275\222+\250\2753\014\251=\255\362t\275\231\370\272\272v:\207=\257=Z=Y\363\003\275\372\334P\275\300\237i\275\0243\334\275\232]\325=\026\273\205\2744\272V=\314IV\275^\373\332\275\003\020\322\275\266L9=\'\1778<\200u\235\274I\245\322=S\244\316=\224\003\306\275\007\030\246\273\231\3730\275\361X\305\275\256S\270=\217\234\213=\372s\276=\331T\351\273:\'\324:p\002\324\275-\226\266=\236=\013\275\331q\263\274P\347\235\274\221/\227=\036\370\231\275:i\200<\221\364\330\275E~\302=\261\333\275=^\024\256\275\211\343\023\275\027&\205<\036W\350=V\225|\2753\033~\2751\261\331=#^a=\234\307\034=\217\275f=Q\353\271=\340\263p\275\000\331\036=g\275\272\275\304\357\350=i\370X=0\216\316\275\026>1<sl\207\275\303\270\342=;\2175\275\005\241\322=dY/\275\322\010\000\275)(\344=\r%7\275\237\020\337\275@N\251=}\255\215=2\221\330=~O\352\2747\227\351\275\200\022>=3\312\202=\206\301\311\275\003aM=\376\203\325=\272\363\340<!d\201\275\322\326\255=\na\341=\313\277\244\275\375g7\275\007\177\276\275D\273\263=Z\331\331\275a\377\220\275\220\327\267\275z2\013=X\207g=\003>w<2\351A=\350\356\264=\205=\336\275\016\006_=\304I\t\273`*\325=\300\365a=W\362d\275\377\357\271=\332\020U<Q\216\260=\352+\020=$]\223\2752\204\224=6\235\206;\304\375r<\010ZE\274\341\372\334\275\005\206\233\274\376@\027\275J\301\257\275w\310%\275:\201\301\275_\351\257\275\023,\260=\235H\325=\016w\210\271c\336\270=U*o=$\242\304\2755\010\216=\363\261\353\275w\247j\275\334\215=\275\014}\023\275\010g\301\275\023+\261=\217\242\243<\016.b<\215\311\313\275\205a\3609\003\212\306\275\3145t\275%\347\317=\320\371r\275\360|\202=\332\'\024\275cP,\275\310\177\337\275\260\360\335=\0005\202\275\335\352\311<\357\203N<&\232\221=\004\241\013\274\214\217\205<\233\373w=\304H\217\274|E\027\275\274\365\355\275\025\213\211\275\330\217\330=\376\376\243\275W \343=|\260-\273\'\r(=\305Q\347\275X|\345==\353\265=\325\334\243\275\033t\031\272\223\215\274=\274YH=)!\314=\315\037\236=!\257s\274e\207\250\275\346\016\261:\027\223]=\334\272\277\275\360B\306\275\231\027\267\275\247\223\231\275v\241\357\274z\222\255=\021n\324=\303h\264\273\251\017\300=\306\314p=\t\252\267=\2031\217\275\371\035Q<\366(\240=\342LZ\275\236u+;x3\010\275\352\215\201<Sk\177\275\342g\313\274\023l\014=\272\003O=v\027\327\275\333Y\027\274C\223\217\275S\240*\275!\346y= /\201\275\276\301\267\273T\"\277=~\365\341\275\340y\271;\231\221\222=\217\007\227\275h\266\247=\253\330Z=\025\366\316=\0104\307\275\037\353\202=\355\355:=\357Xd<H\r\2219\316\345\203=\024\263?\275i\344\210=\237h\236=<Y\326=_\353\235\275|;\216\273\003\230\306=\202\250]=\006\275\202\275\356\3318\274\003\223\271=l\347?\275\\\214\341=\325\324\216\274\260\257\330<3\367\305\275h\316\274\274r\207/\275%B\221<\240\361\362<\245\261\266\274\354n\347\2757s\367\274\347R\026=\306\340\266<\340\235\231=\303c\346=\036C\r=\000\327S\2754\273\r\275\217\232\326=\353,v=D2\346\2746?\327<\245s\240\275y\344\304<\036\246\005<\241e\353=\213N\327=!~\035=\214\024\242\275W\377\232=\033\302\210\275O5\336=Fd\220=\211\200}=\217[\001=K\344\343\274\264\366\221=\270W\000\2753q\237\275\023\233Z\275B\303\216\274@\016\250=f\345\022\275n\304\"\275Z\376\300\275\322\225\307=ZV\273\275\360%\373\274g\357\017<\346\272\311\275ew\273=\021\214\037\275\240\366\331;Iud\275\247I\242=\200\303\253=\276sQ=\2665[=\253\343\002\275$\271\244=Qu\243=\r\316\233;\n\365:\274\332\366\232\275x\321\343=\3644\211\275\271\204\365\274\036\375\204<\335\235\351\275\002\314\222<SF\215\273\005\254\203\275\n\244\344=\260DJ=\277_\354=x\200\226\2754G\305\275\014\014+=\243\373\223<\201\241\375\273\261\362\237\273\326\353\335\274\253\'\222=\267op=\2470\276\275\267j\350=Z\342\323\275$<\314\273\313\262\001\275V\225g=,f\361<\324Y\266<\002\350\376;\345N\255=\327\014\227\275\332\305\003=\017\317\243=<z\274=l\252\305=[\030\263\275\260\265\314\275\017\351\307;\211\241P\275\020H7=\2559\241=\333p\244\275%\355\336<R\222\203\275\202b\010\275\302\353\252=b\364\334\273^>\334\274a\016\227=}\206\356\275\020\344{\274x\244\266\275\253\007\002\275\351\225C\274xj\307=|\335\253=\203\013\267\275\022D\262=\244\264\302\275<[\310\275m\346\241=f\245b\275W.\355=\023,\277\275@\313\007\272\224\003\214<ZH\001\2714-\334=\005U\244\274\220\367,=\224\214\257\275I\017\250\275V&\351<\013\253\232=\004\377\234\274\345\301\324\275`\330\331\275\216\254\277\275\020\203\333\275,\244\007\275h\313\230=\275f\342<\350\350M=\245{K\274\311\364\236\273h\r\324\275\225\317\250\275S\037\220\275\364\321\350=}\021\203\275\217A \274\327~,\275)U\205\275B\327]=\024\272\331\275\362h\213\272\2332\244\275\337l\235=\254\201\213\275\375\031\344=v\242\340=\220\320\232\274d5\371<\357\364\206\275\262=\247<8}\030\2733R\324=\207\006\r\275\030\243\270=\276\363\306=\r(L\275\213\260\347=\361m\317=n\036|=\210%\017=\203\203i=\245Y\256\275\343\225\216=\330\264Q<5JZ\275\312\025\006\274\335\311\322=\224\004\271=\334@\272\275\345,\255=\207\033\316=\360\"\245\274\325\300\345:1,\201=\n;<=B:\016\275y\371\254\275\321\352\334\275q\244\302=\321\033\254\275\255\3362\275\332\3561=\270{\340=\236p\225=3A\241<|\323\212\275\374\253\255=\2075\201\2753\255\356=@z\313\275\252\243\221\275n\004\321\275\212V\373<\221\037N\275^\235\230\274\253\201\246\275W\235\262\275\206\303$=\001\3747\274\266\225\320\275\356\027\276\2759]\345\275-\206\316=\235O\353\273\333\357\360<sze=\014\013l=\177I\032\275\234\211\206=\270\275\306=\314\246\257\275\354|\232\275\260\356\322=\\\234\350\275\332\367\310\274\213%\320=R\355\234\275\2660\307=\341\0307\275\254\032\305=F\027_\275\242\227m=\245\337\027\275\322F\327\275\210`\216\275=\026\335;2\375\330\275g\243\214\275\326J6<\276X\334=\017\257\276\275b[S\275\2223@\275f\332\330=\213d\310\273e\235\335\275o[\014\275:^\263\275\263W\252\274\026\001\317\275y\313\253\275@\231\304\275\235\223\216=\010\001\336=i\353M=\253k\225=\212%\342\275\210\357\217\275\207\\\252=\220\357\347\275\006z\003=\361\274\252\275s\215\327\275q\020\206\2750\315X=\232O\253\273= \315\274U\344=<1X9\275_\036\275<\336G\341;\3336\334\274qU\323=\211l\251=\200\324\360\272\005\343\313=\347#\310\275\375\340<=4f\241=g\237\251\275.T3\274h\034\323\275d\201-\275\005\340\221\274L\022\261\275\022\022\271=\353&\202\274\340\332\262=\263+\247<}\224\205\275B\324?=\241c\225\273D\374\316=!o\306=\030q/=#E\304\2748\374\225<d\356\006=Q\276\020=-<\257=w\037\335=\235\232\353\275\341\302A=\257cY\273A\317\006\2740\237 \274; `\274e\3477\273#\205\221=\305%\245=\320.0<\343]\275\274\261\212\244=2\236\201\275\251\021\211<Z\204\035\275\267\255m=Wp\226\275\021)+\275\325\332}\274\332\032\376\2737\371\2269\217\037\262=\231\2245<\207@\344=p\302\206\275\277\270\251;\265p\333<\210>\230\275\246\035\271\275\037\\\310=,\313\014=~\325\305\275\321>\351=\201\247F\275\006\371\356=\244\210\307\274\304\347\215\275^\225r=\333\212D=\346\022f\275A\202\221\270@\365\203\275\024o\213=\246\\\262\274\257=\210=\305,}\275\023\033\226<\247\244>\2748e\246\275\376}\232\2755\3634=\347\021R=\242\202\271=\203\275\262=\013o\272=\366\256\204=H~\276=\214]\255=\031\271\343\275\336\005\223\274\0163\310=/\371g\2735\213m=m1\355\2753?\317\275\014\036\336\275\337f\315=t{\341\274\304n\326=L\024k=%\177\025\275\200A\222\275\337\226\312=\013\234\027\275UJH\274G\"\320\275{\310\245<L\253\237\274\0203\236=GX;<\202\332\2549>\002\352\275u\264\240=\344\367\276=\211\246\323\275\353!\333<\0012\237=\367\254\222\275\225\240\206\275b\327%\274Tw\324\275J\343\017\275\225\300\021\275\244:\351=\022\2677:cW\236\275U\227j<IQ\326\275\361.\234\274!\317\343<\215\210\262\275\200\220\257=\272\365\324=\024\262\216\274\373\373\316\275\260Bk=\3656\030\275v\tW=\021&\340<\302\216\255=\t\222\204\275\022\265\223=HM\260\2757]k\275\3416\2167\266[\262=L\324%=\005k\230\274B~\217\275\023\251\005=$\0050=\321\325\366\274\026\276\202=\305\037\334==\314\334\275\313\273\342\274\023\206\332\275\274\360\277<\303Ut\275\335\246\003=w\241\275=\022x\316<O%\022\275\005\332\340\275:b\330=\372<\'\273\260IK=\007\3369\274\n\271\351\275<\321\007=\224\272\342\275\340\373\223\275wC\004\275P\206\235=\206\314\342=\365z\223\275\025\006\177\275x\001\244<)\234\205\275\303\234\245=l\260\\\275\321\326\270\275w\227^;B8\322=xm\202=\034\214+\275\347\312\315\272\366\034y\274\002\322\347\275\213\004-\274q-X\275PZ\353=\263\302s=\024]p=\374u\311\275\036\306\351\275\353\'\266\275\271~\002=\371\361\256\275\216\367\300\2749Z\321\275\221W\301\275\0019\325\275s\010\321\275\342\251\273=/\316\231=\024\364\343;\317\021N=\311\020\357\274\230[:=\301\347\303<\335\207\225<xI\317\275fd_;\257\372s\275{\352\001=\277w\260=\t\022#=z\017\234\274+\332>=J3\302=\364\373\257=P\024\314<x!\345\275<\357\210\275\026\025\273=R\245\316=\030U\242\275Ne\001\275\232\257p<\342\277V<a\363\305\275\370\000\317\275S\252\003=\267\206A\275]\324\262=+!\346\275\306\205\325\2754\206\313\275\323\251\305\275\210\341\277<0\023\332<\025rY\275;\346N\275\302\250\262==M\242\275\350\214\035=\215\243\355\275e\363\313\275\242\336g= _\343=p\r/\275~O\213\274.R\351=\370\277\255=\030\250\371\274/\233\341\274-\347\005<\255\301x=\310\023\224=\307\372\327;\2659\235=\016\206\\=\244\347\243=$\262f\275\252P\332=\320\271\313\274\306`V=\361\035\224\275\024\252\324=8$\333\275\276\202\341\275\331 \247==\355\310=\340o]=~,\207=\210\253\216=*J\006\275\221\037\323=I\312\271\274\256\"\273=\374(\\\275*q\333\275\305\0022=QlZ=\314\335\273=\327?\342=\232a\254=H=\272=\324\234\214\274i\241~=\350\223\215=$\304\277\274\344y\231=\002/j\275w\034.\274\322(\351\2756\211\203=]\250\355=\343tK\275\307\005\313=\320}\366\272\334\341\225\275\230\216\344\275\177\252\\;\367\036\022=~E\342<\2406\272\275\023<\274=H\325\002\275\333\264=\275\004\250+\275J\310\301\275\234\275W=\322\030`=\3519k\275\337%Y=\027k\276\2759\275\017\275\373B/\275\200\026\031\275v\235\034<\036\222\315=\241\314\325\274\316\002\366;\366\310G\275X7\226=\022\262\247<k,{\275\037I\312=\364\016\250<J\242\202\275u\200\337\275#aZ=\275\017\277\275\022\351\322=/\027<\275\200w\336\275S\004\277<U\032\246\275\252\001\206<2\331~\2753\334\213=\255\261\355=\221-\343=\036\304\362<\2216\332\275\256>\017\275\274\210A\275\024F\273<I\217\320=\31026<W\353\346\275x\3739\275\271\002\323\274\033Y\254=\224\207D=?\252\336;yH\221\273\313\367\274<\342\342\234<i\377\213=(\254\270\275>E\316\275EE/=a\272L\275\235\364|\275b\340\311\273\320\223\304<\3738\031\275\200Tq=K\205\340\275\345\225\226\275C`\250=l\327f\275\236\373;;G\374\324\275\333}\034=I>\"\275(\215\364<\230\"\336\274\325\206\207<\3613\262\275\323,O=\2757\325\275\212\236\332=\205n\230\275\257\375\222\275%e\237=HO\261\275laE=gO\030\275Q\033\310=\037\307\236\275\314\225\304\274\237\374\310\275\221\355\200\2754I\256\274QH\253\275{\234\200=\206,\254\274|\314\256\275w\367D\275_\010\245=\361e\006=zY\300=)#\221=\204@\347<\002\255(\275\342\200\367<Zh\307\275\377PC\275a\234\000=\371\244\230\274\255m\311=z\202\"\272L\252\302\275\n\274\350\273\237i\314\275\253\004\352=\030\246\235\274\032\206\210=\337M\315\275h&\305=5\026\251=0e)=\321\365\247\274\355su=Uz\211=\t\364\313\275\211\234\324\275\224\'a\275\361\014\204<\375\0134\275\022\272+=\213\264B=\n>l\275P\200\\=\322\300\216\275m\331\'<O\005\315\275\200r\323\275#\300\234=\241\r\004=\335\013\325=\327\032\303=\274\013j<\217\252\255:\320G\262<\363\257\371<\006\276\337\275\253\305\010=T:!=)Q\245=*\257V\275\010\026\316\275Z\n\266\2758!\325\275\370\370\275=B\3312\275\231\365\327\274\372>\260\274\016]-=\037\346h=\242\251\315\275Tf\261\274\030\317\265\275\020~\006=\267C7\275L\204\014<\235\256\336=\321\350\356=\\\231\001=\231\224\352=_\2272\275\002\223\253\275)\252\022\275[\275\207=OO\363\274\242\322\336\275\233\303\304=\327\013\222\275\357\2707<M\200\256\275`n\356\275\320Y=\274V\0109\275\270$\215<`\0361=\250\274V=;\201\341\274\020C\250\275p\332U<d\003\277=.\017m\274`\003\207\274\021\262\310\274\033+\274=cS\315=\003\251.\274H\271i<C\306`\275\376\226\227\275\213\221\351\275~\333\340=L`\006=N9\262\275\037\231\306\2742\006o;\200\231u=l\356\212\275\247\227\251\275\rz\246=\257\243~\275\222\233X=Q\376\004\275\014\304f;\350\356\310\275u:\253\275\034R\364<*7)\275M\227\217=gb\267;/1h\275\255\232\335\275\316C\303\275z\301\273=\251s\203=AO\357=\360A\226<\336\265\202=\370m\336\275W\030\312\275\r*\346\275\335\267\251\275\t\260\355=\210\315Y=\374\365y\275Y,i\275\273Y\351\275\0250\333\275\321\311i\275J.\236\275\333\343\301\275\262C\224\274h\342\261\274\360\211_<\275\240Q;y\n\331=\356*\261\275\301\234\025\275\304\013\326=\014:\314=\243\304\264\275D\240\205\275\250@\214\275\345\372\245=\235H\320=3q\212\2738\204)\275\321>\307\275C-\337\275\237\023\317\275\323\242\304\275Y[\271\275\245\345=\275\262\025\226<\225.q\275\344\'\356=A\233`\275\207\r\323\274\303\267\252=\2656\002\274\372F\032;\204\034\347\275\302Zb=\321\202{<\224Z\003=\301A\343<i<_\275\315\235\320\275\302*\210\275\327\200\324=T\274\027\274>\376\232=\305-\217=[\244\"=\277\'\213=\352\260J=\260\255\343\275`Ww=\343%\026<\031\003\321<R\304\260\275\235\314\215<\025:\234\272\331vB=\255\227\204\275{R\224=K\207\036=\215\371\305\275x\333l\275\201\030\346\274\376\n\373:\332|D\275\277\223\200\275\374\3163\275s\202\354=\340}H=\306L\227\275\331I\000\275w\327\033\275\005b\034\275X\314\354\275\002p\322\275\250\347\255\275\321\344\335=\2749\344\275\3578\215<\237E\000=\317*\352=Fe\320;@\037\n=\227\261\260\272c\024\246=t\352\231=\232w\256\275\226-\024\275\375M\313=\037\336\326\275\330?b\275G*[<5\372K=\375BT\273\014|\241\275\341O\353=\300\261j\275s\364\236=o\343f\275\375\261\305\2759\314\342\275\330\212$<\251`\230=ux\213=\361\242\354=\201\366\326=~a4=\250\231\334=\356/k\275N\253\234\275\004!2=z2\320\275\313\375\243\275\035\325k\275U\276\314\274\340\001\276\275\266]7\275s\'\354=B\022\035\275X\004P\275\374s\214\275^I\177=[\302\244=h\'\204<2D\274\275\313\"\202=)\234\324\275/\025\225\275\007\373\024\275%\265\004;G\336^\275\234E\231=\335\235\246\274\270\332\322=\207&j<E\200\241\274{\222G\274\303\351\347\275\306\363\220=\211\002\210\275\337\310s\275\317c;=7\300\305=\237\037\226\275\331\356\310\2750\0257=\274\326\333\274*f\342\275\025\"\311\273\212\233\220=_\364\333=l\013\200=\344\233\";\323p\365\274\234\372J=\334\245\250\275E\341\013\275\314\313\341\275\261X\010=\264\t6=\343?\322\275\300O\332\275\333q\342\275Ne\004=\004J\332\275+\235\331\275Q\334)\275,\377\010=\234\277H\275w:\270\274\025/~=\351\353\352=\244#\344=\244\375\310=\352\237\246=\330Q#<mG\327=\266I\333\274j\204\027:\356*0\275\355\341\277\273(=\344<2(\020<a\224$\275\200\333\370<\0068\036\274\312\307H;\215)~=\0344\200\275\016\274\316;\267\025\313\274\262S\257=\305|\361;\252h\327<\3772\357\270=\360U=\230J\242<\304\201\241=\335\310\245=\316\016\201=l\277\207<\004\230\"=I)\257=\337\333/\275\013\2070=\342/,=\227\354\236=\001\245U=\315\260\016=T\031\\=\223x\\\274\036X\310\275\025s\216=Y0\340\275$\361\347=\304\237\205=\014;\006\275\361\351\303=z\"\253;\035gS\274\223\365\274=\000\014o<\262*\255\274\217u\033\275\026W\230\274\311Z\246=\316\026A\275\352\246o\275\332\322.\275C|\313\274k\334\n\275\2727S\275\200\335\325=\273\263\021=\262\313D\273\356\203\345=n\226j<\013^j\275\244\257\241=\216T\032=0u/<IS\217=\203\263+=:\256N;\314\240\252\275\232\343\343=GT-=\237\022\321<dl\227\275\330wC\275\252\322\240<\234\224\335\275\354\225\333;<1\201\274\361\n\205\2753\322\206=\376\036\233\274bX\311\275WZ\321\274_ \314==\010\016=\254\272h\275\r&\334=\225\035\276\275\373\331\351\275\341\317\264=\372\344\241=\347\260\370\274\335H\225\275\014\276\017\275\r\026\262=\270\220q\275)\203\253=\342\275\331\275\364\2749=rC!\275\352\374\222\275M\312I=\237\261n=s:\264\275\205\233\337=\266\327o\273\247\354\"\275\003\234\367<\003\234\263\275\246l\\=\352\2247\275\317\334\240=-\376J\275\352\r\227<\317\345\371;\350j\264=\364\320f=.\033\301\274!\304\230\274^\362N=-F\340\275\315,\254=\264V\262=\217k5=\326)\005=\0210\273<\260\356\216\274\026R\311\275k\333\322=\361\251\241\274Z\237\025<Wh<\275\365\013\\=\r\236\271=\274\243\000\275\242\362Y=\261c <\261\353\351\275N\340\260=\251\025\230\275\201\340\201=\260U\241\275.\251\371\274b&:\275\'\353\026<\234\331\005\273\257\340\"\274\300\323X\275\261\\\n\275\242\016\311=\034\345\340=0\017\354\275\243\177\323\274{&\371\274F\005\221=Q\350\351\275*\003\312;\240\241\231=\274&\357\275\201\001\030\275\240\210\220=\327\235J\275\373\205I=V\311\353\275a\353\267=\017\242!=\r\254\267=k\377\305=\376\3235=\034\337\207=\253\204n\275}\323\307\275\036\255P=iG$=W]\300\275J\355\345\275t\204+=\272D\315=\223\327\024=K\302\306\275)DI=\236\007\317\275\353\n\r\273>\331\350\275\324F\267\273\200\256}\275-\2111=\355\223\322\275\206\020\331\275\271)\324=\221\333\305=\226<\252=\253\310\032\275\273\310]\275\034c\347=\243\274Q=\242\340\313=\373\207\315\275B\205\332\275!\252\036\273U q<\327Zv\275\344\355\301\275\260Q\240\275\334P\302=\3641\356\273\357\320\303\275\367\014-\275\031h:=\364\274\334\275\232\002\251\272\3427\322\2755w\224=\316\363\201=\306\305\345=\253\314\233=\315\360\325=\307ZV\273\374\264\321\275\252\352\331=\255\010\224\275e\274\203\275/\216K=\26252;:\323\247=\256\256\306\275\036\260\314=4\304\214\273\273\331D\275:m4\275w\306\235=\020[%\275\360\034\200\275\266\036y\275;4|\275[\3573\275Lz\345\275\002\242\271=\000C\206\275\247\313m=\303\032\240\275\300\037\342\275k5\227\275\353\301\317=w\355\350=\030&-\275\315N\331=\321\263\345=v\343\340\275\243\350\230\275p\330\323=\031/\230\275\014q\313=%\322\365<\010\007\212=\246\3171\275(\0004=c\017\311=p\325\246\275F&\307=\307\363\213=\355\346\032=P\\Z\275\\\233\r\274\0322\273=+X\010=\177\010\245\275\252n\234\275\354>o=UP4=\347\0271\273B\337}<\262@i=o\307\t\275\242\321A\275\307j\346\2751\366u=%r\242=\301?T\275T=\257\275\262\0061=N\004z=w}\034=\345\014\272\273\314L\337=T{\351\275\321\204\261\275\254\264\007<\337\316==\201\312\243<\216@\260\275h\2215=\215\366\375<v\000e=6\323\r\275\213\310\372\274,\033\232\274\017\207\315\275\205\2164;\244K\213=0\372\020=\3774\315\275\265\226\311=\364\310z=\226\376\240=?\366\304\275\334\267\342=_\310n=\237\035C\275y\275\365\272\322\264\316\275B\024\256=R\223\244\275\306\217\306\275z\354\352\275\206!\245=#\222\251=}\356\336=\306\366(=\276\254\311\275eH\211=c;\357=\200\310:=\2325\321=8\222\264<f(\264\274\316\301C\275\315t\267=]0a\274\213\321d=C\253\327=.\201\376\274\307z\353=\235\2402=g\t\030=\316T\337=\261YJ=\371}\252\275\205\005\225\275\260B\340<\021\211?\275\206\336\260\275B}\202=,9\335\275(\357\005=\345\022M\271p\221f=e\326\221=?>\023=&@\220<}\001\346=\217\304\342=7\324\215\275#\224\346=^\"\334;0{\277\275\324\030e\275\177p\336\275\223\247{\275\367Tw=\275>\330=\302/\275\2756\325\243\275\233\361\0309rFu=\004\270!\275-\213\317\273]\234\026=\250\325h<<\246\204=\275\264\200<\322\234\315< \244\267=F\303\214\275y\317[\275\352\240\202=T8:=\311\230X\275\305\030b\275\036\274\351=\371\357\236\274\333\226\326\275\373\307\250<\334i\354=\317\377\202<S\021\317\275\201T\316\275\"\332\200\275/\256\232\275\220\215\215=;\210f=w\270\313\275i\356\354\275g\276c=\273\033\225\275\366\342\203\275\233v\027=\035$\357\275\306f<\275\312g:<4\3000\275/\376\245<H7\353=];$\275\005\307S\274\367\266\273=\372u\336\275y\\\341\275\326\305o=V\371#=\207\234M;R>\343\275\216\227\221<l\213\220\274\343x,\275\027-C=\366F\213\275\262^q\275\302|\022\275\033\261\001\275\340\306\265\275j\274C\275+\304\243\274\3720;;sh4\275\304\315\376\274P\323\276\2745W\231\275%\214a=\302\032\241=\005\030&=\372D\237\275&\313\240=N\203\326=[\240\202=l+\261\275\361\240\341:\213\271\006\275\267;\206\275\234G\213\275 )\210=|\201|\275\211g7<\377\231\211\275\237\315F\275.\221y\275\344\246\204\275\233@\021=\024\000\n\274\034\016\006\273`\266F\274Z\216\323\275\271\021\'=\276\005\261\2750\347\342=\332\371p\275\036\3528\275\330D\215\275u\000\337=\225\0365=\237`\234\275I\3155\275E\033\"=\375/\314=\214Us\275\244\305\021=\023<|\275\324\316\033\275\0338\242\275}d}\275\321\356!:\003\375\276\275ng\210=\302\317\337\275\241[\000\274\004,\351\275\371}\301\275Q\230\025\275\252\341\350\275\256\235Z\270\306\266\201\275c<\201=\250\211\310=\347\265\262\275\203\336(\275WE\336;\204a\313\275\343a\322<\306Q\206\275dMQ\273\r\327*=J\257\207\275\305EC\275\235#\016=\271\036\272=\306\271\t\275\370=\252=\252\241]\274\260\312\035\274\224i\306=\253\275\212\274\226\323\242\275\255\3725=,&\244=\223\345\235\275\004\036\371\273\244\262z\275\246@\271\275\261\363\254\274J@\236=\317\324\240\274\2758\254=Y\'\254\2759\375\232=\217I\003\275\333{<\275\237$\321=vV\221\274$Q.=%\352|=\361\350\260=\211\366\271=?\355P=v\014\264\275|\272\267=\231\237J=\230\033\r\275_8\225\274\330H\316<\t\215U=\315\020\302<\345Wt<\335\260\257\275MW\226=\366\347q\2753:\272<o\255\203=\323\200\313\275\207]\336=\214\351\347\275\"\317\000;\225\344\000=P\251\214=S\201H\273\246\034\217<\303\212\353:\310\275\254=\001h\031\275\261\002\303\275\364.\177\274\334>\026\273P\215\325\275\177\250\253\275\240\324\373<\221\367\230=\200w\010=L\306\317\275T\247\325\275\\\300R=,G\340<\222\206v=\377\355\311\275)\352\301=\367\332V=\2517\"\275R@\277=\022C\305\275\375\n==j\'\354\275\366\371\033= \370h\274wfG\2757g\347\273\373\021h\275\'\022\266=\254\001\221\275\024\267\355=\3638\320\274\221\001\301=\252d\373\274\256\276(\275T%R<3\211\265=`\234\263\274\0137\234\275\247\323\006\2754\310\317=)\227\236\275\232\267\376\273~h3=[\324\333\274\366\375\252=\275p\024<T\203\027=\264\237W\274 \312\201=\332\014\243<\217\'/=\314\242\360\272\302\315\206=\275\307c=qN\215\274\024\022\242=3\232K=%\"\240\275\230\2312=v\276\334\270-#\210=^\316\234<\r7\255\273\373\026\221\275\326\245\251\275\347\333K\274\271\033\024\275\2054\007<\364\2347=<\2220\275.\255\326<\322\352:\274\213\246\203=/\nw\275\365\030\222=>\326\264=\247q\026<\232\016\347<\316H\225<\203J\222\274#Dw=\246\252\375\274\303\271S\275\016\246\260<sb\303\275^\247\323=\220F;\275\346\243\231=Kl\255\275\331\262\\\2752\343\234=\177]\224=\360~\307<\360o\325=\350l\304\275Uo\312<\3665\205\274\370\245t=q\363\334;\333\337\226\275\252|\300\275b\305\274=\t\025\334=\216\203\251\275\014\252\226=d\266>\275\316u\343\274\020\245\204\2736E&\2753\351\262=\017\204\230\275:\305\257=\270\215\271=\277\213\004=\371\344\223\274\365o\234=\254\262.\275i\250\264=\212+\211=\373\330\301;C\n\342\275xU\230=\331,\247=\223G)\275\325+\350\274\372\262\330=\340\321\304=\256S\355\274\324g\221\275y\214\322\275#\035Y<\355B\023\275\010\274\245=\r\342g\275\025*\213;\tB\350\274\016\357\225=k\340o\275\205\210\200=\034\314\240\274v:\034=\276=\233\274_\226`=@\350\355\274\325G\014=\323\360f\2755\330\243\275\006\037~<B\t\207=B\204\221=\025\224\267=P\300}\275}\321\255\275\356Dw\275\346$;\274r\337\021=\245\260\326\275$\305\221\273>P\225\275<\001\361\274\267\034\014\274ff\274\275{\306\326=\362\254\274\275\263\213r=\177N\251\275\202\372\234=R1\316;\362\200\324\2756K\256\275]\235\255\274\377{\240=\333\000\036<\202\340@\274\205G\021=n\214\340=\364$\350=\322\276T\275?\322\212\2751\'\247=t\331\230=\344\236W<8\264[\275\217\217\265\274U\016J=\0216\034=\3617@<\327\342L\274\023\332S\274\236j\330\275\260O<\275\034\330Q\274\245F\250=\275\366\230=\364F\253<\252\366\246\274\233\231\244=\232\356\330<\263B)=~\343\347\274W\243t\274\270Kr=\002S\357<\374\022j\275\0032p<\302\251\262;\342P\333:\267J\n\275{0p\275\340\227g=?\261\247\275\273\226\035=s\024z\275\356\227^=\200\027\333= \033\241=\362L\225\275\202\177\014\275\260h\353\275nAt\275k\234\241=~ep\2751\310\215<Pd\021=u\362\266\275\206\216\227\275u\236\223\275a\314\n=\206=\241\274x\352L\274X5T\275T\013\274\275\247p\207\275\214\365c<\000)\317\275\025\343\000=\307\025\257=\317\271\310=l\t\225\275\312q\013\2756\332\260=\203\020\200\274\322\336\260\275\010\305\351\275\376\262\207=lHz<\242X\351=\320\231\025\274\254H\355\275\2134\250=\000\325\264=t\235|=\022)P=y\032\030;R\340%=\265\364\336\274\027uR\275ul\234=\006[\255=e\261B\274\204Y\224\275\322\335\306<\013\262\222=\301\337\233=\315\343$=\245G\327<,P2\275\303\331\201=\342v\264\275\200\323\253=\2679\256\274\330\326\224=\270\333\256=\"\323\322\275\347\030\333;\230q\225\275\240\350%<!\001\273=\221j\322\272R\032T\274sp+=\243\231q=\255\000\250=\30190=\003(\273=fQ\340\275\243\035\333=\262\0008\273\033w\262\275\344!\274\273h\261\250\275\331\365\260\2744\334\334\275\252\240\212\275I:\263<_\334s\275E\215\200\275\322\247\036=\002\342\227=\270\371\230\275\246l\251<K\014U;\314\220\242<\356\024\225\275\335\204\005\275j\321+\275 >\343\274\231o\274=\032bA\275\203\235f\275\221\007\273<\263J\271\275x\235y;\362\373\275=s\013:\275\206\251\177\275\304\004\020=[\370\303=L \026=$\2251<\007\037==>\203\302=y\332\026\275G\022\352=*?\254\275m\366(=\225\253\321\275\262\301\303\275\262\275\334\274\235\021\335<\'i+\2759[A\275+w\n=\024F\365<\032\247\334\2752\n\333=2T\316=E\254\304=\314\211\035=\354\250~\274O\014j\275}\266\252\274-\312\234=[W\037\274@\307q\275?\336\242\275p\351\251=\204\304\277\275y?\315\275\227\177\254=j\226\215=3v9=I*\177\275\234\337\337\275\342\320K<B+\334;(\336}<\330\203\024<-p\235\275\204\201\317=[\315\331\275#|\343=w\326#<\372?\200\273\2537u\275\332*\314\275\236\203\277\275:\321\215=\266\313&\275\206{\271\275\326\021\364\274x\014\272=\323\362\264=r8\344<\267\370\356\275\320\375\271<\303\2653=\274\037D=*\256|\275Q(\352\275V\307\303=/\223\244=7\307S=\'\340[=5h\377\273\033\310\214=0I\003=\272l\322\274\007\212#=\205$\'\275?\016\306=\267\221\220;\261J4\275Yl\343\271\035\241-\275\020\356\332\274\265y\023\272^kw=\252\252&\275\346\215\350<\313D$\275\355L\320\275c\036\320\275\201hd=\2719\037\275\261V\226\275\265\335A\275\031\032:\275\262\362\326=\232U\255=\tZ\313=\300\000\026<\3334 =\322\370\332\274Q\017^;\217=\013<\315\332\260\275\361\372l=\240(\004\275\022\002\263\275\030\236\234\275\376\314\227;\311\377\350=\340~ =\222\364H\275\333,\215=\010\352\351\274\243\355\347=,\252\204\274x\002\262\275b\263\'\275\016.\201\275\027\373/=V\353\276\274\035\240\246<\262Z\272\274\365\262\\=\237e|=\021\277\224=\003\266\215\275d\326\236<\226M\311=\317\'\237\2758\243\302=R\231\233=n\377\354=\236PR\275\300L\257=\352c\274\274\346\023\375\271^k\355=R\227\316=\321A\302=\004\360\236\275c)8\275:\3559\275\353\315\237\273{\336\204=\220\276\217=\2652\337\274\215\t\270\275k\017\330\275\003\020\201\275/\232L\275\327R\253\275\277F;\2748e\342\275\263Z\256;\205\273\216\275c\263\210=g\314]=\350X\222\274Uw\326\275\212`\007=\204p\213<\244\021*=\013\350\232=c\206$\275\361\272\352\273E\212\\\275O\'\251=U\255\004\275\242@\035<\032DF\275@\376\305\275\033/A\275\32110\274\334\366)\275\337k\352\275Ja\216=\342\203\266=\352\227\271\275\234&\243<\212\336l<[\250:\275\232y/=\321\377d=\235 \032=\034\262\235<\320BY\275c\373\247=\010\277\344\275\3251\224\275\205\346\000\275\010~\300\274\027\272\322\275t\000\320\275m\010\007=\230\355\227=\205\362b=\313\240t\275\313\2657\275\250\373\214\275\340\375p=\253\221#=3\375\243\275\374\262\246\274\345\206\310=qK\014= \370.<+\034;\275\307\311\325=\351h\271\275I\216\225\275\254fr\275XM\230=\377[\331=\013\263\342\275\207\236\322=\266\225!\275\352\372F=\237\326\310\275\373Z\312\275\372\263}\275G\245\251;k\2654=qg \274h`\233<\257\362\212\275\'\3453<+bY==\215J=\261\277\205\275\224\253\206=(t\254\274\203\350\034=\243\300p;\033C\245=\224\267L\275\240r2=\003\n7\274\266\316)\274\0329B\2738R\230<\301\242\314=f\023k\275\245\244\215\275\373\235\215\274A\302\341<\377x1\273\032@B\275;\276\247=\241\337\213=\t\241\245\275\347#\261=\023\'\237\275b\217l\274\262\302\274\274>Q+\275\256\246\303\275\213\013K=\031?`=\326\271\255\275\025W\370\274\213\305\025\275\302\225\'\275j\352\250=\353_\355=\263>\237=jP\177\2750\337.\274)\312\233\274\301mY=\271\214\261\274!:\342=\210\257\306=\031\341\210\274?Z\224\274}\356\341=r1h=\365\270\276\274\277\245\021\275\354\273\r\275^\214\302\275\233\304\313=\032\301\237=\265)F<\302\276\310=\255/\255\275\"\351Y<\330\275\264\275\335}_=JF\277=\034\343\340<\230\202\264=\212\243\257=\224\002\376<@\316\235=\261PH\275a#\324\274\317W\036\274!\226\255<\232\265k<\225I<\275\\~\341=wL\273\275A/\347\273\177\374w=\370\367\324\275E?\020=\201\256\221=4g\320\275\030O\240=\326L\211<\' \224<\200#\302=\000\324\230\275\204\027\300\275\222\027\335=\204\"\336=\337\347\246\273ac3\275\232\276\324=N\334\360\274\327\341\231=\2260/=*Ud<\252\307\202\275^\3063\275\000\262\314\275v\227\323=hL\277\275E!\026\275\323\230\313\275\326\"U\275-W\302<o\364\236=lCX\275\336\340\023=\024s\026=\250M\320\275\310\370\033=#\024\255=$\320,\275\266sc=ym\205\275\343$\315=\251t\323\275M\214\302=\231,\324=\2318\336;\327I\010=_\305g=\023\017\276;\210\324\r<\r7\025\275\333\267\270\274\244\346\205\275\311 \233=q}\266\275`\307:\275J\361\260\275w\277\021\274\256X\255=a\344M\274\376\300;\275q\224N\274\026S{=O\007\315=~3c=\211\317\354\275\033~\320=\331\341\347=]\001\233=}\275g=\256|\225\275\005\351\351=\302\340u=\304\'\014=\317\374\204=B\223?=\037\251\205\274oo\263\275\004\316\346;\242\177\307\273\226d\243\275\235t\250=\257<\022=\270\227\223\275uY:<O\276\217=\311\017\222\275\353G\306=\363\017b=]\212\222=\027\257\253=\352C\270=\243\302\251\275\032\221\342\275\315M\317:\327\250\027=\366%\024\275\213<\'\275\037\246\354\275\310\334\207=J\325\233=\325\210\226=2E\247\275\211\2741=\0146\262=m\241-<\301\023\233\275\033\204\234=\363\216\275\274^\335\335=\355\'+<\343\232\265\275\271cd=\231\315\342=O\217\262\274\313\r\273\275\347:V\274M\017\310\275\317\360B\275\264\177\372\272$\210\250=\217\007\n\274\\x\316=\375\276\246\275i\344\353=iL\246<\357\335\256\275m\202f\275\202\3348\274\257\2334=j\236c\274\332\037<\275\223s\247=} a\274\344c\227=\211jC\275\345\325f9\017n\006=L\344\250\275\217\3757=\271\\]=\264\024\010<\203\350\267\275ApZ=\2359\242=\353c ;\256\343\024=\035Oh<D7\276\274 l\243<\017d+\275:J\366<\n2f=$(S\275Z\354\330=a\265L\275\201\327\207\274$\244\n\275\236T\211=\223~\350=\310v\302\274\032 Y\275;\352\216\274\327\275\347\275:\246.\275\256\202\023=\'!x9\005\356\325:R1\347;\032\233\345\275B\276\335=<\352\334=\217i\303<\2708\204\274\331}\024=\334\034_=]\020\330=\030\216\254\274ap\356=\356\262\203=\026v`9\235\243\311=\177\215\025=\235\300\256\275\360\352\261<EA\272\275\212\277\230\275\226\270$<\301\316\234=\317\032O\275\277+\302\275.\360\207;\301V%\275\034\276\345<\203u&\273\177:/=b\373\323\275\375\224#=\321\202\250=\311Oq\275i\010\264\274)+\363\274\372\220\202=\016HR\274\360\237\317=\222 A=\231\277\347\274\032S\260=\010r\350\275\245\242\203\273n\345\241\275/\201T\275F\376\034=vFs=S\367\260\274\255\325\217\275nP\356=tM8=\235\2272=\023S\270\275\214\264\025=\332\004\325\273I\253\253\275X\031\356\275Lr\327\275\364\273\272=\'\001\"\275\253\233F\275t\373\333<\262\031\346=\216FV=\223\313\336\275\000\'\210=\376\330\023=\345-\352=p\355\034\275*\020h\275rn\217\275\334\031_\273\347\023\234\274\312E\352\275\003\007~\275\004a\227\274N\316+\275nO\004=\302\366\025\275\373\006\337\274F\215$=6#\'\275k\006\205=\376m\304\274I9\230\274\333#\274=.{\230\274\310\316\237=\000s\341\275\235\003\312\275\016\033\033\275C\247\301\275\336e\t=\243\263\354\275r\031\205<uI\306\275\242\255\310=\250\353\262\272\266I\305=\226E\005\275Qb\220\275\314<\250\275`\270\230\274\313\263\213=>\323\254;Q\034\256;\376@o<\265,\033=\362\237\301;\023\031\205\274\217>\300=\032!\260=,\014\376\274/o\271=hw\346=\214\343s\274\232e\275\2737\337@\275d\270\214=\031\312\230\275\367\255\344\274%\300\207\274rG\355=*<c;\273c\253=A\272\014=\037f\251<a\264\342<{X-\275\t(\026\275\306\\\302\275\347\242\226\274$\\\267=&\273]=\242\273\342=\027\315\334<x\260C\275\207\367#=\367\347P<\371J\305=\030\262\326=\337\006\303\275(\307z\273qPU=\035\326\315=lv\247<;\323\263=\266\014\317\275\206\326\310\275y%\256\275\202\375\204\275\005$\341=\304\361\t\275*\311\321=\276E&\275\013y\226\275\306\244\224\2754\243?<\275\203\271=\227\357-\275\026\004\366<\022r\311:\213\252\017\275\266\227\352=\\\373D\275\017\002\230;\024v\256=\200\273\217\275\371\023m\275fN\313=5; \275\313F\256\275\265\224\255=/\005\266\275\215%\324=\312\022,=\200\001\250<\207\240\016=o\226n\274\300\2027=\025\342\257=\254\004\315=\257\017\t\275\314\232\352\275\224J^\275\337\335\273=\245\260\233\275{\311\247=\227\3256;#e\220=\362F\027\274ie\261=\237\013r;\002\013\263=\307q\035\275t\224\266\275\205\014\335\274}\236\313=\253Z\332\274\r\2377\275\306\301\017;&\364F=_\017\225=\233\232\305\275-\307\005<f\260\334=\204\004\206\274I\315+\275\346C\003=\322\277\276=o\305P=\243\035\354=\206\367\203<\374\212\237\274\220\312\315<.\017[=\245\322\337=\336Hq<\227W\235\274Spp=\257 u=\"\026\264=\300\310\346\275\363\336\316=\364\312\340\273\210\374I=\311.\240=\340.\314;\010\336l=6\216\243=\265\205\227\274\230o\336=j\253\353=i\326\307\275L\270\017=\232\245\345=\251\201\312=\330\216\302\275\022\203\214=EL\245=\214\315\3459\340`\355=\333\r\336=\241\277\331:Sa\270\275\325v\262\273\216\353{=4\253\277=\037]\245=\311`\345;H\031\1777y\370:=\264\024-<\260G\212\275\025\243\243\275\236\320\026=VF\347=K\t\337=^J\036\275wL\342=\2428\272\275~r\340\273\256j\255=\323C\254=\246\352\317\275\016]\202=\355\242\323\275u\360\351\275`\202\223\275+\023\266=_\312\323=\317\363\207=\245\"\275\275r\300\347\2759K%=\022\376N=\241V\264\274\242+\330\275!\264\342=Z\341^\275\375\355M\275X\025\301\275\375\351m=\022-\347=\306\210P=\204\227\332=\020\014\254=;\353b\275r:L=;Z\027;\250\214\351\275\027n\226=\346z\202=\367\027\336<\212sz\275i\tx=\210\225\231\275Q)-\273\366^3\273$6d\275\210T\347=\330\016\210\275?D\273\275Fas\275\343\263\003=W\021\231<\272D\234\275\262?\221<\243\005\024=\346c\341<\201\222H\275\2775*\275\226\361\217=/\026\262\275p\2303\274\356]\351=\314{\344=\345\351W\275\277\371*\275b\2143\275\334l\020=\272\305\354\275t\325\322\275\2712\036\275,\277j\272|+M\274\276\200d\273\242,\210=\316]\025=\377\\\304\275[\274\272\2754\360\216\275\n\341\352<H\235\317\275T\314\331\275\305\r\220=\231\311\220=\244o\325=\225\266\243\274\327\310\234\275\210$\223<\357\210\230\275\177\372\014=e\232T;c\263\217=\2673\035\274\030\257\353\275s\204\205=O\270\316=t\325`=\376\323\314\275]\206\260\275\306\016Y\274s\234F\275\201J\316=\371\201\321<\326\014\242=\204\371\007=z\310\327=\264M0=\013\035A\275.\345>=}i>=\261\345]\275m\266\215\274J\273\252\275\344\352\265<%\332\355=\353:\226=e|]=m\305\220\275LW\331;\030\225\226=0\376\322=\005t\344\275@\005\355\275T\331\271=?\000\342=\217\242\215<(\006r\274\372C\260\274{D\315<\324\320\232\275\221\030\245=\200\334\351\275\337\335\231\274\254\020\005= \373\310\275\272}\332\275\204\031\227\275\245\013\226\274\314\336K\275X\221\317\275`L\370<\327\212;\275\335uh\274\327\302Z=\202@\262\275\236\242\300<\265vG\275u\303L\274)\206\354=\230\245Z\273\344\014g\275\322\020;=\367\327\277=^\356\334=\000\223\201=\003N+=\025\3327\275\341[\203\275\013\036\333\275C\250\254=\260\277.=\360\320\222\275qP\325\275#\317@\275\253\213\'\274\004\321\312=\240\202\222\275\260\017L\274C\232W\275\214\235\266\275\251J\251<\341ZA<o\220+\275\237\363\356\275\376A\276<1\002\357=\215\023\364<\001s\177=\201\247n=u\225\203=<K\345\275h\304\256=\346\270\231\274P\334\322<T0!=\340Q*=\242>\344\275\262\373\333\2752\364\313<\351\324\310\275\372(\314\275W0\351=^\026\r=sWZ\275\005[j\274\006\"\303<\n\226\024\274\223c*\275\3027m\275\007\263\310;\220\007\262\274\3510\234\273\024\271\344=?s\342=\324\005\344=\356\201\274=\271\204\010\274Y\237x=\330\362\355\275k\033\250<P.\354=\035~\302=\014\250\347<\222b\260\275P4\323=U&\335\275\336\320\337\275\026\213\252<\266\366\245=[\330\356\273\247\313\342\275\254p\247\273O\270^<Ny\276=C\242\235=\360\335u<L\302\207=\016\367\204\275\355W\213=\342h\203\275\373\020\307\275\023\261\257=\022\370\267\2755\226\314=\333\210\351\275\321\226L=ft\202=x\371\010=h\031Z\275z\314\213=\245F\363<\321\236\341\275\356\377\212<\032\177\234\274T\224\247=\262Y\263\275q\303\243=&K\273\275c\213\260=\250\324\271\274{\013\327=\264\331\330\271\025p,=\247\300X=\\e*=\341\372\260=\204\343w\275\216\366\027\275gMv=^j\343=\325A\312\274\254N\244=T\300\342:\370\302)\274\314\010\332=\251\354+\275\266\227 \275\356\233\317\275o\002\351\274\234\n@\275.\363\266=\032\030\305=W\263\210\275\345/\321\275B\256R=\2615\246\275Y\005\331\275*\317\227=\341\211\337=\006\301\222\275K\373\314<nm\336\275\340\366]=\317\225\223\274\366\375\246=\254D\337=\241R\244\275y\221Z\273\304Hf<I\031\212=M\300\345<s*\030<\035\353_\274\342\211\026\275\330\271\277;\227\333\203<.+\234=\227\004_;\245\323x;\001Q\207=:\260\270<\344\270H<3\023*=\315y\343\275\314\227\234\273\346\346\333\275\376\225\304\275vW\307\275\020+\200\273P\267S=\260\354\n\274\324\260z=%\304\237<K\032\370\272K\337\267\275{\347)=\271\340\321\275\375\301|\275@+\272=\335&\332\275\336\246\234<\344\245\\<\231\213|\274\366Pa=\377\257\220=\311L\225<\240Ky=\353\360l\275\220\250\230\275\003\326\310=&O\272\272\373\211\021\275\346\356\211\275^`\247=\266\212r\275\322\205\262\275\212\'\013=\277\357\237=\365G\225\275\r\025\336\275\241\251\366<8\246\220\275I\356y=8\215\243\274sS\021=\335\027\020\275`\357\304=1\r\223\275&\022\312=\273\232\255=A\230\234=\021f\237=\372\254\326\275\360\025\213\275n\335\025\274\210\225\213:\373\270\257\275\341V\025\275#\201\256\275\251j\377<\246\017\336\275AN\212\275H\001J\275\024n\243\275\220\303n\275\3217\343=\023\304:<\350\207\335<b\207\343\275F)\244:\030\234\262\2754rB\275\213/\320\274PT\207\275\374\017\325\275X\r\355\275!g\223\274\272\r\274\275\261}\261<\332%\277\275\277#{\275G?\221;\001\232 =\364\013\254\275\004g\323=ic\325\274a\305&\275\271\"\204\275\276\210\230\275\352o\033\275\226\370\006\273\357\325H=\313\335\007\275\002on=E\236R=\350\377B=\211\222\313=yQ\321=\\M\215\274\212\345\272=\342\014\212=(B\314;\027\321y\275:8\252<{\000E\275\ti\243\275\303\277\207\274\345\000\334\273\342\372\243\275\366\376\224;\214U%\274\207\362\240<h\233\207\275\236\252J\275H\207\200=\215\233S\275\263\245\001\275\370\021\004=\276\341\333=\340\371\315\275\364@n=\201\335G<\352y\246=mh\013<C\355\343=\276\225\334=m<\277\275\276b\'\275?\300\'\274\230\200\240\274|\210F\275A\233\035=\267\354\337=\221\026\246\275\262\203\261=\341+\267=\006\246T=\332\014\203=PQ\373\2742\236\212<\031\373\234\275\347L\221\275/HK\273[\265\313<\372\033F=P\036\312=\333\327\034;\371\t|\2752\343\253\275\345$\310=\337I\304\275\022Z\202\275\3245\215\275W\376\263=\277\205\252\274\\\310\353\275@\030\245\275\300)\276\274\352\227_\275\356w\244<\314\036\330\275p\361p\275\r!\205\275\354\337\021=T\313\276\274+s(=\253\265\273=o@\310\2757\207\032\275\347\303\001<=\005\216=\230\216\203=\372\355\275=L\221\030<\037\224\333=\316\347a\275\325\233K=\224[\264<\013\246\320=\225\r\212<\302\304\211\275\337\035\336\275w6@=y\026\210\274\311\036\217\275mIS\275\240\364\267=\233\300$=\355\255\217\275l\274\221\275\007\272C=\206x\237=\313=\264\275\255)n\275@Vj\273\301\306(=\240\362\333\275IR\232=\336m\223=\324?\221\274TT\233=\255~\262=\2065\232<\263W\032\275\000\266\316\2755\306\273\275\301\270\322\275\032\325\013\275\272\277\342\275fd\213=\\\004\342\275\251\330K=q.\025=;}\274\274\307\022P\275\353\337\020\274RRK\275<\243C=\332a\203\275\233F\241\2752\032\254\275\031\264\313\275\232\210\204=\256 \330\275\274\030\254\275\304\244%=\255\350\354=\236\342\314=\262\023\223<\270li\274K{\033==z\202\274\004\211\377<\305\325\332=\004\rq\275\215\262\000\275\376\034B\274\3446\223=\217\001\331=#\362w=T/\210\275Q\251&=_\312\276\275\242\033\335=\215\375\302\275C.&=\326\034F;\363\203\252\275\033\200\312\275\242<n\275Z\204\250=\265\\\255\275\0134\272\274H\003\343=.\"s;4\225\226\275\331\357\354=sm\267:O\007\267\274\006`v\272Ob\\\275m\261\350\2757x\342\275c\205\261\274\222V\035;\364\324\203=\325\232\337\2755\356\237=\257\2416\275\300\345\211\275\002N\212\274\263\031|=U\356\210\2740z\032\275n\317\177\275\024\036\244\274>\342\224\275\035-\003=\271\311\277\275\005Z\322=H4\273\275\364\332 \273\366\230u\275\364>F\275:\234\021\275\377\255\261=i*7\275\ru\324=\254\371\215<\034_\220\275J\202\017=\202\240\322=\271\204S;\035\023\327\275H\236\037\275y\201\n\275\315\003\374:\260\324A\274\224=\214\275\253\276\254\275\211#\007=\300\310p\275\237\227\312=M8_<-\240\352\275-T\025=\375\246\033=qU/<\267\037Z=\311\314\200\275\306\262\335=\350W\254\275\243\365\356<\177*{=oK \275)\377R\275\316\013\212=j\027\307\275Y\275\300=\355\202a\275\013\007&<\0033\332\275\2173\225\274\355\022\200\274\0369\245=G\234\016\274\241\020\251\275\003-\313\275)\204\014<\362>\324=\277\334\347\275\003\341\013:\366\021\271=o\326\246\275\036\033`;\322\267\351<K\030(\275\036\212\200\275\025\202\367<g\\)\275U\317\211\273OI3:~\017\225\275E\035]=\255V\243\275\177W\342<\270\326\343\275\353Y\003=!,\277=\362\0356;\260\223\321\275\262\020\202\275\033\204\356\275\313\240t=#\370\305;\242\3351\275{\031\336=\307\037\031\275\250@\000<\362\005\273\275\326cT=\307\016@=\023\201\300\275\'\n\354\275j\352\007=6^4\275\024\341;=\374\377\306=>\032\241\275\024p\355<1\263\301\273\253/\235=\355Ef=\242\220\227=Y\205\210=\204\005\216\274\254\361\263\275\003\360\342\2758\234\274\275\020\035\247=\366\031\206\275\037\202\236\274$\367\313\2756\367\225;L\316\202\275(\226\273\275\241\370#\275e\323\345\274R\260\327\275D8\"\275%\375\222\275\036\377\037\275x\257\264\275\017l#=2\352<;r\3535\275\357\010\355=\225K\252=\036\177\210=B)\324\275\242\034\215\275\033\263w\275\323\002\345\275\000\013\205\275\266\312\222\275\211-L=:X\013=\007\266\203\275\250{\352=ye\264=\021U\237\273G\227\317=\003j\235\270\363\271\211\275|Al=\t\"\210\272\017\204^;\215s\262=\376\320\346\275\215\277\'=\270\376.=\344{\313=2\367\254\271F\250&\274\207H\344=8\255\240=P\247;\275\266\323\010\274Y1\307=\301\340\356=\3248\333\275\202\005Q\274\305T\026\275\263\230(\275\320J^\275\300\207\231=\324\262\313=\220\244\234=\301&\023=\23027=(\245\304\275D\321\224=g\310\276\275\014\360\250=\255h?=\2507\370\273\265a`=\315\336?\275\224Q\321\2758ty\275\331I\242\274\312.?\275\013Q\354\275\233\317d\275\347\332~\275\254{\273<c\267\236<\302\375\253\273L\336\321=M\027\266=+>\306\275\256k@=\333\306\216;\356\274\261\275H>\037=\312\306\214=\240\017\232=\246\332\204\274\031\263r=\324\255\253\275{]\227\275\226\357m;\265\375\033\272Y.1=>\231\002=\002\344\252=\240t2=\002\212p\275:l\241\275\016qz=,\242\217=\306$\002=)m^=\'\201\351=7\233\302=\314\037/\274\243X\222\275\014UN\275;\344\223=%\223\342\275?\004\266<\034\013\356<\234\266\316\275Z\367\346\275\214\026,<\345\320b=I`\347\275\303s!=c2\302\275\t\325\300\275\325\226N\275\321?d\2748V\256=<\376\207\275\257\212\312\275\323\263o=\245H\347\275f\373\345\274\256\215\224\275HN!=\023J\337=\231\321\031=9[r\275\330O<\275\007\261\301=\020\225\313=G\2427\275\276n\326=&\363\336=x\223\275=\376\346\205=M\311\346=\304v8\275\221\242\221=\252\334j\275\203\236\326= j*\275D\346==H\234\273=\354\317\233=\n\324\322\275\241Z4\274H\202C=hp\222=\2634R\274\332[\200=\234\321T;\272i\210\275\2425\233<d6\234\275\020\262\316\271Y \207\273~\304\216\275\264s\"\275\315e\213\271\3379N\275\340\203u=\316\315\276=\227Q\314=\267\245\257\275\024\'\267\275$\030\333\275~\261\315=\257\201\261=\362\337\276\275\234\232\027=z\014\340\274\206\\_\275\375Q\232\275\230s\243<\3003\330\275\364\370b\272X\306\264\275n\004p;Ho\226\274g\312I\275\223A{<\200\036\214=\232b\226=\314\301\330\275\003}}\275\330\320\343\275x\247t\275\272\246\252=9E\'\275~\261\246\275\302\345\247=\320\241\265=,u\037=\026z\331\275V\362\342\275]4\024\275\322a\241=\"t\232\2731\251\313\272\3039O\275\000\200\210=\233\322a=\251a\260=/\332p\275\203te\275\203\010<\275}9\237\275\216L\346\275\205m,\273:\320\225=\305y3\275H?/=\022\204\304=\301\005\275\274`u\212<v\t\303=l\026\331\275\276\216.\275\350w\251\274\203W@=\235\3275=\254N\276=\353\307d<J\033=\275\007\177\302=\355\232\227\275\216.\031\274\243\217\325=\311\266\r=8}+;\227\035\"=\204\337N\2758\013\323\275\336}\235=N\337\300=26\203=\240c\353\274\362\332\010\273\271\307\013\275\3164\345=\243\323\276=W\272\341\275\350)-\275\365t\226<\273\274:\274\376{\273\2751\013\351=\315\177\264<\033\312\360<\010\3761=\235\302\264=?\333\254\275\327\021\312\275\322\302\263\275\231\0333<\306\214\274\274!Y\036\273Mz\256\275\210\355\237\274\202\227\274<\252\363\204\275F\331\315\274\335/\274=!\2526=\321S1\275r\225\316\275#\207\025=\023D\020\275f\001\325\275\235X\214\275Z\245\340\275\306\366#=\n\325\265=\257\026>\273V\370\262<\324xm=\313!\312=\\\033\237=\271R\214\274\001\265\276=3qx\275=v\3748\233OK\275\354a\264=u\350/\275\017\\[=V`\322=\371\317\236\275\352\246\263=\205\017\216\2741\364\354\275\375\215\304=[6\227=}\'y\275iR|=\037\275\351=C\226\307=\215\326\340<\202\325\273\275\024\364H=\276\020\265\2759\030\267=\254\035\323=\032S\031=\274\351\320\275\306\324p\275\353\224q\275\033>\346=d.\252=\017\326\230\274bR\250\275\350i\276=\t\r\307=2\211\031\275\272\301\355\275\234\361]<`]\205=7\001\325=T\337\343\275\270\272\353=\354\213\354=\353\326\305\274\376\014\200==wx\275F\265\216<\351\222\233\275Y\270\356\275\000E\307\275\250\355D\272\263\005\233\275F\305y\275\202J\224<\334F\336\275\320\357\306\275\251\020\214\275B\234\024\2750U\300<P\034]=j\363\341=UJ\322=\276/.=\236\344\321\275\300\214\256\275?\303\252\274r\335;=K\305\305=\216\016\352:!\331\312\274*\336\273\274\303#;=\342\003\237\275\273\235\336\273I\002y\2733\352\256<\204,\352=\354_\334=\310\177\246\274\275\255\215=\301Z,\275y\363\267\275& \362\274\276\352K=\023\205\341=\260\017\331\275\007\007\273<b.\357=\353\222\211\274K\354O\275T\354\354\274\305z\216=/\316\203\275\207T\353=UI\265=|\336\351=H\302\241\2754\255?<\300i(\275\222\223f\275\266\034\324\275\325&0\275\217\323\325\274\247\202r=\226\201\276\275\020\340-\275X\244\016\275s\301\267=B\305\334\274RMz=\321\312^\275<,\330\275f\364\352=Q\r\275=:\353\254\275\027\337\260\275\031j\210\272u\334\205<\024\366\272\2751\303\271\275\270t\001\2747\316\214\274m\007\245\274\377\340\255=\352\256\230\275wV\224\274R\2306\274\031t\253\275\020\201\212=QFT=\345d1=\355\014\233\274\005\273N=.9\246\274\340\211\310\274\327\316v=3W\024\275\310x\257\273-\325\255\273\374\266z:B\227\246\275\034Q=\275\361\345\247\275\300\250\324=\t\336\221\274\024\3410\275\267~\341=Gl\323=S\334\355=su\242\2743\021\311\274j3\006\275\227\223$<+9-=\344*\351=zw\354\275\356\313\267;\257O\247=\365H\017\275\274\311w;R1X\274\231\207\221=\321m\250=\353\010\342=\2273\317=:\270\265\275B|\225\273\253\201u=b\010\263\275\263z\324=\376_\242=\237\032\302=\334w\307=M:\213\275xm\317=\r\014|\272\204\002S\275w\\;=\001\r\203=\037O\215\275\222\261\344\274\3300\206=\311\230\314\275\311#K<\252X;=.\305\002=\020C\255=3\224\256\274Qh\273\273&\362\224=(\266\374<\013\333O=\007\357x=A\005\031\275\255\311\\=\346V\346=;*\020=g\241Q\275\004\343\326\275\330J\320;\304c\246=\215\305\340<\235\353\265=\310\233=\275\027\257\321=-\313\200\273]\253|\274\000\366R=7X\324=\013\321\342=\271\240I\275\304\326n\275[5\336<^\334\214=x0\302\275\367\336\246=\317\021\226=]\027]\275\351\335\025\273w\327\253\275\214\034\241=\356E\021\275\243|\262\274\340\317\201\275\362\201\346=s\202\260<\345N{=\204sl=\313\317\273\275\373\216\271=\356\316\030=\032Z\025\275\330Z\247\275\376<\214\275%\275\357\274A\302\270;\215*\326\275\024\317a=\014\366_=6\312\332\275\033\376Z\275rJ0=\022v\264\275\227\350)\275\243\232\211\275f8\203\275\266\215\246\274\3220(\275@Z\261\275\321\031\023=\350\020\200\2747\032\312\275\250\030d<\222\023g\275\207.\336\275\266\231\244<\340\202\313=N!a=\\\377s=zc\007\275\274\332\331\275W\227:=\332!\224\273UQf=\377\241h\275G\340T=\n\251\355=e\000\304=AS\354=m?\357\275\317\350\\\275\246\004\267=\373^\313\275\376\020\261=f\302w<>\\\261\275\355\232\275\275\272\252\255;\307%\347:\247!\302=_L\t\274t|\321\275e\325\306=\177\270\201\275\r/\357=Q\360\006=\215\326\276=\0310\202\275\327U==\203\301\262\273\035\3221=-\366H\275M\014\323<\233`\330;yk\r\275\027\004\302\275\362\242\223\274~\343\313=p\374\343<3\355\314\274\262[\250=\265\240\205=\351W\335=\000W\206=\235q<=\n\252t=\251\344\001\2747\226H\274\272\364\302<c\013\252<\227R\245=\302\324g<!\245\327=\t\310\017\275\347\367e\275m)\222=a\320u=\035\365\350\275+\235q\275\030(\333=i\021+\275\217\302\014\275\363#\265\275\376\0200\275\272\374s\275\226\225\277\275\313\317\036<{KJ\275K\264\306\275\006Q\255\275\002\365&\275\354(\356=Ch\005\275o\347x\274\006\255\210=\200\345\313;\242\367o<\304\231\220=\222\247\234\275\032m\277\275\315r\217\275\224\354W\275X3\304\275\037$\321=\221\365\223==\317\323=\240\217,\275\3645\243\274\370\237\014;Ct\242\275\230o\307\275!\007\251\275\352\331\317\275\353)\327:\254\372\323=\004\020\236<v,\275\275mK\231=\024\t\220=}\307\272=?\202\321=l!y=\t\207\354\275\352m\031=\203@\202=\341f\007\274\366\305\341\274\216S\324=\321+\205\274*gh\275;\031\002=JH\265;\212b\354\274\220\037\034\275\2560\243\275x\017H\275C\004\276\275I\211\212=\325\272\314<\360\273\317<\327\327\301\275t\201d\275\325Q\037=53X=:\266\343\275\376\224\201\2757\030\316\275PE\250<\331%I=9T\005<\026\r\323=\245\346\007\275\275\312\024=\372z\266<\337\315\346\272\255\372\247\274K\004\267\275\357\032\300\275\000\230\251\275\021\364Z<\\\250\264<\203\242\223=7\367\262\274\027\267\240=>4j\275u[)=\033\023\245=\3676M\274\232\315i\273E>\370<X\317\233\275`\322\001=D\030r\275\336\217\242\275\370J\201\275}*\365<\027\246\254\273x\235-\275\251\366r=\322\232)\275\322\243\352\274s5\201\275\275\021\212\275k\361\276=\207IV\275d\273~\274\370\"\225<\273\246\n\275\230Z\225=\227\215\252\275\274\271\345<.\332\272=\322\300\001\274\337\004\313\275\344\300\177<\021\366\221=\032\353\217=\266\363\304\275\235Z\277=\337B\362<\'\343\220\275\357\321\263\275\252\325\314=\007\036\307=qE\272\275\240\341\257\275J\221\375\273P*\343\274Vc\322=\013?\004\275\000\277\240\275\273\027\212=\363\346O\275\377\315\000;\321 \211\275\205\n\234=k\217\227\275\021p\255<\241\307H=\311\341\312\273\366F\256\275/N\265\274\343\210\203\275\307\234\315\275@\306\231<\001]\350=V\323`\275Y\340\371<\304\342\320=\027*\323<\307\236\207\274\311\347|\275\3509\306=\\x\225\274\273K\255=\315I\322<Y\225[\275\242(\336<p\326\224=vfX=^\207\254\275i\363\243\275DP\241=\305\335A=\022@\355=\037\201\354\275C;\200;V_&\275\256\316\267\274\004\236\006\275a\344Z\275\255}1\2758.\310=\260\334\204\275l\023\317<\277\032\035\275\025}\222;\360\355H\275$7j\273\257-\r\275G|\265=\307\361\236\275H\034\372\274o\333\226<\260\036\213\275\241\234\341=\303\243\004=\0012\275\275(\031\244\275\261\277\206\275\210y\350=\233k\243\275\026\345\352\274\320\365\0009\027\270\'=\337g\177=g\3300\275\231\216=\275\212\252\305\275\336\005F\275\303r\214=J\302\341\275\034n\302\275\341\034\304\275\323\274^\275Y\255\200\275\021\205\025=\245\243\237\275\346\031\214=\367Y\344\275\036\332]=6\255\225\275\304q\004=n}\341\275\346\216\305=L\037\226\274\261\2544\275S\312\242=[\017\260\275b\371\340\274\"hy\275k-i\275\214\0143<\206\237\330\275\332E\213\274\306$\275=\243\343\273\275\235\2750\275LM\332<5\002\221=^\305K\274U\226+=J\n\203=C\324\210\275=2\314\275\220\303\355=\324$\267<Qb\337=\325\365a\2754n\277\274\237\315\320;>\301H=\3043\263\275\377\306\252=\355\270\222=*~,=#\023\331\275r\267\327\274\217\327\275<\037K\262=\316r\265=\303\216P\274y\375\305=\030\371\261\274k\270\264\274\335\345\356\275\361^j=\211\263\203=\344a\225=EV)\275\347\0143\275H\2769\275Z\357\345=\032\354V\275\014\374\250\275\006\207\377\274\314{\272=\177\305\236\275\017p\324\273\202\264\276=\371\210\251=^\327D\275\356\377b=\334\t\027\274\346U\235\275?M\275\275\253\206\312=\317Z1\274\035\206\262\275\305e\235=\r\036\327\274\251b^=\301`\344\275\r\220\314=:7\271=\027d\326=\3411\312=\026E\307<8a\320=O\341c\274\007\004\020=\321\365\226=f\377\261\274\241\031\231;9\'\002\275\273\265\214\274\374\350E\275\006<\243\275\346\301\304\275G\223\016\273\256\204}\275X{\261=*\013i=V1\216\271\023`\336\275\343\376\023\275\322\253^\273\300\363a=y\213#\275\237\265\302\275\033\253\201<\233\243\236\274M\263\273<\350T\227=\276\020\336=\317\274\250\275\225\t\330\275\254\364E\274\221\333\341\275\243c\262\274Xy\302=\321\253\002=\253;I\275\177\261\300\275u\244\315=\346\204\001\275\006$\311=4p\001\275\250\370\305\274\257 \341\275p\017\233\275_\r\331=\224I\347<\034\261\334\274\350\370\330=\310G\232=H\264\326=]\362W<@\355\220=\231\372\235=\367\035\326\275<\376\353=\355\350\261\275\251?t=\024\341\247\275\270\203\212=!R\245\275,\207\253=#Z\224=\237\225\326=\206\246-\275\370;%\275+\307\353=\022e\271=8\r@=\374*\332\275;\030\254\275\330\240\341\275\001\311\377<L\2041<{\346\260\275\306\253\264=\352`\372<O\344\325\275!\260};$2\267=\334\"\337\275j\255\234\2751\373F\275\361m\300;L\001\227<\"\364\374<\241#\334=\220.g=\001\355\277=\267\345\335\275n7\004\275\350\271\310\275S\364|\275L\303U\274\261\276\344\274\213%\354=\211g\252\275\014\035P=\026\036\276=\374\242a\275\310\032\255\275\2333m=\000\027\267\275\377\267\253\275 \373\262<1\221\177=;\266q\275*\3142;\212w\301\274\3553\247\275n\341\211=\206\252T\275\352\252l=\227\254S\275:c\321\275\254\243\273\275\361\371\273\2744\310R\275D\001\317=eb\234\275#b\257<w\320\267=\000\320\305\2757\335\210\274\232\333D\275\216\021\306\275\224\353\261\275\331F\177\275\3710\332\275\201\2071\275rQ\304\275.,\313=.G\342\275\241\231\304\275\3671\336=]\242C\274)\342\347=y\003F\275\320\031\331=\236]\302=\304E:\2743\213[\275\036\026\315=\203aY=\240\215\332=L\345a\275]\366\301<J\262:\275U\223\250\275BF9\275}\271]\275\355\020\345\274\2662*=\266\245;=\240cW\275@4\003=V\367\327=\202\376 ==\360~\275\016\224\225\274m.\202\275?\006a=\321J\031=-,\250=5\245\237\275\262\207$\275\365\232\211=\355\200\314\275\215\2422\275\276\000P=\002{\213\275\377!\353<H\250\332\275\007R\006\274\214\223\251\275\024\365t<+~\260=\371\226\255\274\017\273\326=(\341\302\275\253(\347\273\330\223\252=\306C\354\274\024\344\344=\014LV\275{\364A=\314\224\235\275\307w\335;\014\326\352\275\236\014\227<\305\322\235=\035\347\227\275G\257\203\275\375\255a\275\312\034O\273\257\311\201\274\315\274\231=\302N\277=\335,\212\275w\200w\275XR\263\272\034\322\347\275\201\230\257\275!\177\225=<Iw\275\035X\243<\213\214\273<@h\224=\033\304p\275a\032H\275\345\365\340\275Gs\021=\222\006\034\275\266\017m\275D\263/\274\270U\324<\370\315\302=\327\263\257=vU\177\275\037\020`=}a\302=\363\261x;\005$&\275\r\026\321\275\224\333\355\275\260% =\004\004\226\2740f\221=\361\352\314\275\211\254\325\275x\326\321=\206\363g\275i\211 =\247\2160=\366\014\357\275\333 n\275\227\326\302=n\020f=\326\027\003\275\"\317\220\274\006i\310\275x\235\265\275\314\326\001= W\355\275\363`\230\275+:\235==z#\274\006\0272=d\241\253;\254H\224=\261\210\235\275\271B[<\302J\032\274\315*\313=\321{Y\274\301\250\002\275\323\342\312<\274\303\254\274\225r\276\275\204\325R\275\032\320p\275\357;`\275\'\003\344=\351\243g=j\033\357\275\377\274\266\273\034\3358=\032\023\322=\301\037\343\275\213U\333=\367\252\266\275\366*\247\275\246\204\236<\215\202\004<S\341\311=\024\017\316=\234\251\305\275u[\317\275\324a\301\275\316@\336\275\022\377\373\274\002\250\300=\306\237\002\275\246T\331<A\320\227;\245\321\260\275p\014\200=\333\224\224\275)\023\221\273\314\026\316=1\014\320<mF\267\275f[\013=_\312\305\274\030\213A\274\000\272]=#\242z\275\256\276)\275\246\327\264\275\370\306\271\275\210+\270\275\3609\004=\003\244I<\016\r\314=K\327\305<\275\032\216=\355\024\305=\004\214\023=[\326\310=\233y\330\275=\323\342<?\256\340=\222\335\201=\025\304\265\275\263K\233=[\304]\275\323\305\333\275ud\357;\265I\344=q?\315=\271\256\003\275M\035\322\275\265b\377\274\032\266\304\274\227[\"=T\235\200=b\217\351<\235~!\275\236B\262\275i\225\260=\334\035\327\274\344I\326\275\001\215\272<\212\340\316<Qh\320=\344\356\317=\276\262\001=J.\031\275\253%\323\275\312\353\350\274eO\361\274\232\347(\275\250\222\000\275\364%k=O%\204=\252w\341\275\032\241[=]1\253=\024c\375<K\365\231<by\031\275He\233=o\254\321\275\\\233\325\273WV\245\275\350\310\343;\240\373\270=3\267\204\275\217\336\177\275\241`\336\275\275\370;=\t\023\004\275-\t\231\274\310%\235\275\037 \335=\027\002\344=Hv\211\274\310@\213=%\025\257=\330\026\235=Tf\010<\3558\2229 Y^\275\356\261\201=]5\235=\024\227\241=\376!\333\273qfw=\343?\326=4\331\236=\205!\206\275\'\310\343\274\2757\303\274\006\036\241\274\010\312\246<\004\017\235\274\360<\372\274e\001\250\275\343\212\314\273\352Z\323\275\362\313\312\275\367\243\362\274\320\010\250=.\225v=E\002\335\275q\225\327\275\215^\244\275\341z\210=\376\363\\=t\037\243=\004b\223=A\344\322\274t/I\275\027\332\344=\022\032\211\275\251\302\333=@\206\032\275\357\316\267\275q|M\275\230\311\263\275>\221\"\275\017?\237<\227!w\275\245\254%=\343\322\310\275\335\220V=\267.X=A2\222=#\370\315\274\036\304$\274\254.\305<~zc=\250\254\233<J~\313=\026ta=\3538\350=A\376(=+\022\207\275h\346\223\275\250\223\242=\222\250\332\274\031\210\034\275r\002B\274\334\221\336\271n\272g\275\371@#\275\262\374r\274-\023\325\2757Op\275\205\016\300<\205k\375<\222\263\000=\205\316\256=\334\236-\275\rW\220=\365\252\307\275\247U\321<~\213\315<e\237\331=\034\233\216=Ru\276\275\010\257\237;5\273<\275>\347\260=\215\330L=\035\277\350<r\245\341\273(U\315=\2222\004\275\010c\354\274-\010[\275co\202=\r8\275\275\237\371\253\275X\227\023\275\202\250w\275\3645\242=zM\253\275|}\344\274\366E\321\275\225\370\353=\220m\251=P\000\034\275\313\341\272\275=I\233=J\264\301=\227\376\305\275\214\222\345\275\346c\023\275\031\232\232=l\\\025=\216\333C\275\220)^=\215\267\273<Y\261\326=\036P\236=x\354\177=]\365\326=\350\266\t:\002Q\202\275\206\215$<5\225\336\274n%6=j\330\247\274\2155\327\275gr\256\275%\245\237\275\020\231\324<\245\033\254=\253\035\013\275\233K\035=\332\363T\274\303\010\226=\337>\262=\3753\300=\210!?\275\243\213\303\275G\325\304=\376\370\330=\230U\327=\215%\211\275lG\352<sXl\275\025\303\201\275#5\247\274\367\227\221\275\271\256\256\275\235\002\"<\033X\233\275\026\206\361\274\202Z\356\275\221\025\203\274v\272\311=N\350\210=\267\030\267\275\366y\310\275\315 \t=F@\321\275g\336\275\275n\271\267\275\247\321\313<\255D\226=(<B<\032\372\340\274\237E\371<dW\227=fR#\275l\020V=\301M\245\275vz\002\275\252xv\275\nY\004=\250\027M<(lZ<\355\326\307=\235\235\211;{g\357=\336\260\312\275l\371M\275\231F\324=\025\214A=J\367\315\275g\317\312\275\324\242s=7\345f\2740\262\347=\2736B\275\267z\255\275&\255\"\274\257\263\264=\005\256x\275\270m\327\275V\220\202=!\214U\275Q\037:\275\360\033\276\275`t\302=C}\276\275\211\021\265\275\332\264\233\275\035v\307=\333u`\275\260\034\205=\207\263\274\275\273\331\313<3\032\321\2758\213\351;wJ\326\274@ZF=\246\353E\275Z6\242<\204bP=F\313\312\274\037\265\260;h\331\026\273\231\r\314=L\234\264\275\tn\303\273\326\330\221\273n\2232\275x\351\"=\"\357\240\274\010\232\214;\310\236c\274\340Zk\274\376\214\334=o\352\205\275\307\313\'\275\030\306\325\275\304W\341\275\r\270\222=6\313\355\275RHR=\034Y\025=\342cK=\256\034I\272\035\3063\274\345\307U\275\223/\034\275\231s\t=\237\203z=n\317\306\275M\'a=\256$]=O\353\237=\300HF\275\251\3213=Yr&\275\211{\261:\321\222B\275F\213\241=\226\'\257=\277\350\252;\373\360p=W\336\350;\016Z\021\273!\270\245=2\274\271\275\347r\310=S\241\024<:\276\032\274?\360\337\275\014LB\275\353\323\320\273_\210\036\275\313\361Q=\r\213\252\274\037\347s\275\037H\206=zX\234=\177Y:=\325\250\326\275u`O\275{\331\221=\236Z4:a\372\347\275\342\373\204\275\370\037P\275\244\205D=\355\210J\275US\301=\020a\264\275\220\223 \274ev(<\025w\314\275\337\201\253<\317\270\324\273\320o\333=\354\314\252\275\301\250\261=U\026\311\275=R\323=\241\365/=\024%\247\275\207E\251\275\027\365\240=Q\'\256\273\301r\327=T\264d=\362\0241\275g\025\265\275w\362\323\275\370\244\215\2754Hq=]\331\272=K\002J=NL\263=(\007\301=\021\324^=y\361\245\275\367\027\263\275\305\241\302\275oqm=\355>\354\275\324\377\315<$s\221=\262\333\223=9\315\343;\222\"\037=\3762D\275\350\022^;n \267=\315{\204=\016[\016=\354\275 =e]\341=\335G\236=B\016\237=\261\227\223=v\260\354=t\354\311=\270n\006<\267|\232=P\032\216\275\005\272\247=?\2774;\235\360<\275M\233\357\274\022A\234=\363\254\302\275\324\033m\275\330pO=\034\333\235\275^g\220\275\300-b<\036P\331\275H\272\263=pG\200\275\013i\217=\t\267\017\274\375~\340=\252\036\177\275\005\341\265\275\007\234\330=\007\247\016\275h:\341\275K\026N\275\252\007\023;E@\234\275{Q\316;\210\324\010=\254E\343\274\177\201\254\275\0170\275;/\254n<\0303\001=\225\333D=\364\206k\275\325?\204\275\307T\'=>\177\323\275\312\002\234\275\271\356\204\275\375\357\010\275\222\250\256<H+\220=\307\245\202\275\020\351\232\2757\267|\275&\t\304=\364\203\r=\014X9=\212\216\262<t\227r\273\352\362N=iQr=\312O=\275?kc\275\241Xo=\275\357\247\275~=\240=\236\323\270<\330\314\316\275\310\234\303=OnR\275\237\277\253<\260\256r\274\234\351\317:\017>b<|\317\216=>\264\334\274\010\327\343=\350\255\324<\363t\303<\277\2029\274\316d\024<fR\227\275\200Q\226\275\036\323\336\275\301\303\305\275\274\271\256=\354n\336=X\221\r\275\365\263\247\275ob\300\275\3700\320=\251\357P=^\032\244<\',\010=\232\0232\275E\367\345\275\027o\307=c\234\027\274$T\256=C\"Y<8\213\230\275n\233\344\275\203\236o\275\302\255 ;\037\250\276\275\326\360P\275Z\312\252=Z_*\274\010r\244<Rl\202=\233\237\310=\245\207\r\275\030i`\275\265\304a\274\320\350\336\274\352\321\216=\266\265\315=\324-\303\275\204u~\275m\316\223=\024Q\322=\021\273\271=\316W\302\275w\354\236\275\372\025S=\001\223H=k\217\327=68g=V\351d8i\307\306;\264\342\321\275\266\355\327\275\272\253\223\275\204\266\373\273\214A <\366\321R\275\214h\240=X\332k=\214\217/=\342e\025\275\276\002X\275\265W]=.\331?\275\321`\210\274\241\267\270\275\260S\216<q\220\341=\351<\023=\237\305-\275\306l\203=\243\201\236=o7\353=\270\221\243=\253F\233\275h\007\217=D6\'\275s\001}\274x\t\306\275\345\225O=Q\003\205\2740\233\360<\340\233\312=\271\255\300=\314\377\243\273\340\212\323=\177\223\270\275\2236n\274\310\251,\275\230P\353<\022\221x<.\254\037\275\231\225N\275M\355\216\275\020\372\010;\026\233\311\275\235\242\300\275\214\254\355\2751:\201=%\264\033\275\272\206\205=\026\346\000\275]Z\340\275\343\304\233=5\324\353=\017\204\003\275&\216]\275\236L\307=\024\302\273\274\336\207}\275\300\023\276=\243\222\004\275\242w\311<\375\251\353\272\000\021\244\274X\205\325=1E\330=\251\035v\275\301\034\235\275\"\277\220;\304Sl\275Z;\251<\365,i;\342\262p\275Jwb<6\351\260=\373\003\213<\350>\237=\n\363\222=\2226\200\275\206\374#\2749\003V\275e\237\273\275\373\001\234\275\033\330\221=n\232\323\275C;\257<#(\200=\004/\323=.\260\202=N\215\267\274\366\264\036\273f~\217=\207%@\2740K\276\275%\301\300=\340\304\000<]+u\274_T/\275\242g\031<\361\347}\275\227\025\361\274\215\017\177\275\227\211\345=\013 i=\312_\227:!\217\237<\rD\322\275]\002\211=M\231\347\275<\375n\275\332o\203\275\371\273b;\374\207\212\2750\000\250\274h\014\320\275Z\377\371\274\322V\347\275\006\212\347=[\234\351=\276\306\214<\233\264b<\230\245B\274\240\251\331\274\\Y\217\275\\\374w\274tt\215\275\341\343\233=\261\231\346\273c\t7=\264\362{\275xjV\275\"\231\303=\035\362\034\274}\321S=M}\241\275\030V\272\275\230n\023=\266$\245=|\226\245=[\223\257\275kK\343=\372;\361;\2064\027\275b\261j\275&\307\330=7|\235=d8\234=_#\345\275\275a\311=\305Y\246\275\255\274\274=3\314\247=k\331R\274U\375\355\275\324\320\321=\372\200\350\275C\347\310\274S\306\314\274y\001\034=\200\202\344=-^\234\273\314\025\t\275x,\310<\335\031X\275\304\334\200=\335\274\320\275\000\311\325=\004y\037=u5\360<\370\004\307=\367\205\274\275\337\316\232\2753\2749\275\033\267\317<\266\360\200\273]Dt\275p-\035;\3641\250\275.\367\272=lx\210\275\312\033\333=\340L\301\275\276\327*\275{.\340=\205\233\030\275\202\305\261<<\247\215=\261\n@=\315>\221\275*B\"\275\327\3168<\353\032\357\274[\216l=p\230\330=\212\033\354=)5\203=\346u7=\271j@\275\005\\G\274\222>\241\275\010-\235\275\325\230\230=\272\311/;\001\223u\275\243dJ\275mi\224<\032~\227\275y;1=\243*~=\242\222|=\215\223\217<\274\241\245\274\370\017\304=RU\230\275\035\014\312=\302\373\315\275Z\231\256\275\343W\263=/7P\275V\007\313=\244\235,\2742~+=\000\034L=\223\016\260=X\r\334\275G\335j:\340\010(\275\257\226\331\275\313\352\253\275_E\230\275\002\367\351\275\357GC\274\3127\356\275\201w-<\275\036\337\275\331\362\247=XJ\312\275\277\252\270;\005a\272\275\3263N=!=\334=\262\027\337\275.}\255<y*\224=/\014\003\274\037J\345=\306\365\301\275\031\201\221=\361\025\305<\275\347\220\274^\251\204=\223mG=\2435\233=\222\307i=\265\263\353\275\013Z\270\275\260c\336\2750\365\010<\333B\243=\034\t\207\275\r\202\231=2q\361\274\222\"5=\034Ij\273\205\010\354\275\345\020\014=\345M\243\275A\222\245\275\204I0\275\215l\016=im\226=B\376-\275\231\275\241\275\266oz\275\317\352\250=\236\364\225=\353\210u\275~\230\240\275\2068\002\275U\326\350\2743\007\304\275e\215\010=\375\023\252\275\007\350\345=kh\221=\013\315\327=:\017\352=\267\3142=\250\241\n\273\"\316\274\275\013\\\240\275Iv\225=o\245\223\275W\326\"=p\347%=i\221\245\275a\307C\275\231\226\256<\243~\350=\262`\241\275c\031\240=\344\006\372\273\367\240\226\275\375\275\240=\277\215\246=\300\3639\275\250\202\261\275>\027\354<^\023\273\274i=\306=\260\320:=\002_b<\334\202\256<\\\264\320<T\270\262\275u\000\"\275Ct/\274\230q\322= \260\212\274\264\275*\275\2105F;\255\315(=M\261\345\2745\031]\275\370\301\215\275\304\243m=oxi=\013L;=\001^G\275^_\221=};\203=\312k.\2742x\243\275\252\0171\275\246~\332=\345\365|=\213\016\371\274\242f\313=\t\275\027\274\223\021\216=\267\205\247=\333Z8=\026\016\232<\222&\026=P\302\234\275\313^\311\275mA\247<_t\244\275\016\250\267\275\342\262\276<h\037\301=\220u\242=\222\252X\275\347[\346\272v7\025\272\361\r\220=\212\356\374<\217\273\304=\231\270\350=\367a\276<\315\277\023<OX\271=(\270\205=\304S\201=\267\267\326=\3673\333\275Z\310\304=\242\266:=\354\336N\275%\332\352\274\330\266\351=\257\007\177=h\301\267\275c\tQ\274H\231[==2\347\275\266\300\007=)\201R;\374\211w\275\260\2070=\364\013\343=\242\323\037\273G$\212=e\2418=\360e-\274^\365\330=\017$4=!\031\025\275\306T2\275\210\031V=\336\214]<9\0368\275\027\364)\275,3\347\274Z!\256\275\350cz\274\024\273\036\275\363m\221\275\\\220\257=5\227\207\275\323\024\271<90B;v\227\207<\033\2135<h\244\316=\316K\316=`&\231\275\2442L=\325\323*\275\215\352\273\275\216\2036=\354P\274\273\023\270\007\275\3660\266=\022V\222\273\223#\240\275la\365\2744Tz\275\300\236\323\275\n\355\323\275\376\347m=\377/\362\273\020m\250<qyd\273\026\376\254\275l\035\273=\3515A=\314<\336\275:\177]=\224q\321=p\006\257\275\001\242\231=f\371\266\275\037\023\300\273\363\350\223<\235\320x\275\207\002\240\274e\354!\275\303\233G=\350L\227=T\2508\2751\236\366<g\257\030<\246\256\215\275A\243\245\274\333\332\177\275.\004&<\010\201\256\275\216\345\247\273&\364\014=\373w0=9\033\307=L\2575\275\334\271\323=f\316\227\275\204-\306=\013(\311\274j\333a=\377(\223=w\273\205=\010\361Z\275\244\343\305=\017\2732\274\215\256>\275\347\253\201\275\372p[\275\024A\354<;\333\223\275\211\326\026=\204\344\200\275\227\246R=\375R)=\"\014R=V\033|\275\004B\273\275\236V\240\275*\'\017=L\362\344=P^4\275\0167\272<\316\017\267=\"\351\344\275Ml,=\370n\250\274aR\246<vy}\275\257U\301=\3260\257=R\217\236\275\374\352\207\275\261C\334\275\345cR\273\222\214\212=\313\273\220\273\004\300\336=\006\361\027\275\225\262\224\274\365\220\177\275\200\024V=uk\257=<B\303\275.\372\003=-2\220=\335\210\335\275\240Ff;=\373E\274\263\320\262=\262P\013\275\365\234:\275C@ \274\367\341~\275\035\0130\275Q\352\222=O\277\324=\206\303\260=\300l\003\272\341,\332=\207\344\021\274\002\035\324\275\356Xq\274>-0<\213\240Q=\313\325!\275\200\220N\275\300\314=\275\342S\226=Lm{=\334\266\005\275E\t\231\2740o\325\275\374(\320\275DV\303=\307$\263\274\342\204\351\274\325\036\252=Ii\247<]\354P=\360\223\210=M\351\267\2757\252\347=\232\035d=@\304\003<\2329\250\273\266\217\331\275\266\364\363<e\264\216=@e\321\275\347{\354=\224\233\322\275\241vf\274\206\316f\275\354\277\302\275\272\305\335=F3j<\366\335\003=\026\313\202=\003\271\313\275}o\304=f\322\210=\0068\220=\002\367$=\263C\227=\202\200\032=:]\302=c\317\315\275\t\036\214\275w7\271=\226\240D\274\n\305f=`\333\312\273=[\240=\n\273\203=\352\332\224=\370\322\355\275R\037\r=L\324\033=\336r\356\275\310G\353\275\007.\265\275\276\251|=f\367\320\275\225b\237<\254r0\2751\236\203\274^&\365:;\371A\275\'\220\200=\373\216\325=1\370\226\275\016f\014\275O\346\253\273\2079\230=\207\211\332\275\003\234\331=\3354\214=8o\373\274\224\265\344\275VK\335<y\200\006<\032N3=1\262\254\274o\245u=\325\314\212=W\256\216\275t\326\331<\353\236\227<\223%\312\275\010N\366<\375}X\275\307\302\316\275\367\327\306\275\317\342d=\372q\031\274?\266\252\275\021\217\313=\006SV\275)\027\275=R\t\306=\216\321\201\275\332.\034=qx\250\272\017\234{=\017\215\311\273l\243\355\275>h\004=\257\264\232=\\z\340\275\024\237\273\274\242\t\246\275}\311T\275\350\021\330=\021m(\275jr\305=tlG=T\353\332\275\327\002\030=\300\336\200\273\305\227+\275\325n\231<\355\372\r=\023Q\251=\245\222 \274\345v\345\274\263\206\217\275\351\202\241=\336F\325=\245\025\210=\326^\242=I_\261\275\226\366\350\275\001\200\340\275\355`\213=\342&\243\275z\007\301\275cg]\275`U\263\274\007\231\327;~j1\275N\200M\274\203!\237<\314\214\202\275\216\206\270\275g\002\245\275\360\256\255=\007\033);\207\201\\\275a7\"<\375\353A\275g\372s\275\250\021\346\275\254\216D\275\264\225\215\275KC\321=\354\005\311\275\177vH\275\240\301\003\275\375\301;<q\215\'=q)\247\275\226]\336\274\345\2223\275g\362s\275\207\321\300\275\3635\341\275t\335\301\275:\302\305=\373\245\324\275\002a\246=p.\240\275\360\373|=[X\307\275\276\'-=\030\271\241\274\341\266\273\2740\006Y<JJ\316\275\331\010\251=\372Q\033\275\336t\372<\312\364\316\274I\231\"=\236\326\016\275G\303\305=\2509\322=\273I>=\020\201\274=\257\202\360;\263\251;<\266\303w\275@\024r<o\251]\275wOQ=\233.\026<\371b\307\275\2679\024;\177{j\274a\216\035<\370N\303\275\216\351e\274\345P\247<IM)=l\320\220=\001\271\272\275L\027\261=\346\251!\2758\350\262=p\2326=\310\017\321\275\210qe<Z\021\225\275\010\274\343\275\245\312\263\275@_\177=\354\212\302\275\347\360N\275\202M\203=|a\001=\207\000l=rR\214=\265V\322\275d\337\374<m\t`\2756\035\\\275\313\260\361\274<\210\343\275\272\355\242=\263\355\241=\000\362\232\273\273\315\273\275\361P+=t\002\312\275\177Tt=Z\347\027=\'\363\333\275B\374\264=\213+\252\275\245\326\211=Sb\r<\233\322\314\275\356\013_\275n\370\302\275\337\247\034\274\273X\363\274\367r\335<@\203\356\275\221\251L=\275\317\206<\231\323\314\274\351\311\215=J\243\223=\361\201\265\275\246\265\t=\223\331%\275\217\n\303\275\001y\353\275\235\017\216\275_\033\243=\3268M\275\277\245O=RN\307=%\245o\275\320\273\325<\243V\024;X\177\260\275~\003\313\275\206\036\210=\236\352\203\275\245\003\357<\000\004\347\275O\364\275=\341\250\262\275\213\314\341=\316\001\322=\220\177\202\275\206\200_=\016\007\001\275o\363>\275\'\227\246<\010\253\202\274\212\253\346=\313\'k\275\265/\231\275\277\022\337=\305\274#\275\305d\033=U:\273\275B!\223\275\354\rp\274; \222=D\257\021\275[9!\275\211\2202\274\265S\206;\230i\233=\323=\224=T\210\020=\315\244\224\273g:0=\220?\234=\223\301\247<\013z\322\2748!\356\275D1\224=&\257\265=\326B\275\275\320+\303<8\354\326\275\337\372\256=\022\335\375;\367Zp=\326{\265\275\031\334\322;ag\246=\027c\313\275\222\000.=i\334\034\273\013\232]=M\t\203\275\276x\201\273\007\\\316\275\227^(;\337\232\232=0\317\204<\260\300\'<\3426F=\220\007\216\275\326\235T=0Vm\275\354!\242\275FA\323\2750s\202;\007\006\327=HH\255\274\325\350(\275\305\005\202\273\226F\250\273\234J\260\272\275\263\322=\221\233\206;\374?\376<O\360\005=E\027\345<\014\207\253\275\330\332\254=\326\302)<5\\>=\345mB=\321IT\275O!\200\272.\313\027\274\305\010\005=\232H\236\275h\273\300\273\rT\314<=\037\007\275Y\352\275\275\235\312/\275\n#&\275\2121\257\275\333W\200=\r\002\230\274^\204\205\272\201\224\252\274L\351\276\2753\275\323=\366\216\345\274\030\345\264<\010N\337\275\365O\255\275I\255\244=\215\266*=UR\220\275\363e\214=\244R\300;\205\241\035\275\365\376\207\275\375B\005=\336\222\201\275\244w\347=Z\312*\275\374\310\303=\371\t\234\274\353\203X<\030\260X=aA\335=\263\017_=\352 \266\275\213\373\004\275(7\327=\240\303\264=\227\004d<zA\007\274+\316\307\275\3477\307\274\356\330\347\274\310\017\353<t\343\026\275r\242W\275\204\353*=\271\377\224\275\252\262z\275\370\210\243\275n\261j=\035>\200=Fr\235\275z\331\270\274-\316\340=\345\252\372<\031>\n<\337a\254\275\203\363\013\275\003\244\252\275\021nS\275*-\315\275q\254>\275]0==\246\2502<\302\027\225=\325\303\307={\210\254=_*\243=o\031\232=\360|\202\274\365ID\275M\255n<V\322\323\275QA\246\275\256\225\226=\272-s=a\2611=\224\315\307;n\325\227=\253v\272<\2008A\275\027m\245\275\303\200\332\275\377\021$=yv\267=@y\020<\362\260\277<\3312\333=\350\344\305\274\305\256]\275Cm\021\275\232o\256\274\021T\353\275\034\274:<\347\243\304\275\313\264\236\275\322\214\330\274\360\347\262\275\232\025f\275\332\2510<\337\261\033=q\312_=|\226\204\275F\231\330=\037R\371\274r\306\010\275<LW;\036\215\206=\220T\022=\264\007\371<AJ\000\274\'C\312\275I\337\341\275\357\322\'=\374\350\242=zi\301\275\227\361\253=I\"\306=\251\257x\274\314\326\304=\231sU\274\023\n\336\274K\352\250\275\270\304\210<^\335\361<\302\320\202=N\366\'=\212\004\201=\016\021\313\2730\250\037=\025\023\243\275\0340Z\275yD\364\272\230\350x\275\022\014\235;Il\230\275\251\346y\275W\330F\275\343A\205=\345\221\277\273\010\340\352\275\361/\021=\223\204\266<\214\312\241\275\312;\254<\250Yk\275\nI@<+\027\272\275p\002\237=\035\246\315\275RM\017\275\016oy\275\372\343\314=\351\267A=\237\256\253=\271h\250=\347y\r=St\211=<$\265\275\240\313\037\274\201\341\212\275\365\246\025<\237&u=\305Q\320\275\330FJ=\216\336\251\275\364\036\347\273\333\216\227\275D\033i=e\266i<\307\273`=\250?\334<\342\210\351\275\327\237\306= \366f\275hl\315<\260\3264\275\236\310\331\275\003\314\266\275\237\202\336=;\275\334<\233b\306=\326\221\273\274\2358\211\275{\250\240\275\271\202\304<R\2267=\001&\316=\211\304P\275\244\214\232\275r\021\245<m\n\344=\355Y%<\264\255\257=\351?\326=\212\010\252\275\211x\200\275\367@\200=\325\035\310\2740\200\331\275}i\224<r3\n\275\037\341\266=\306\277\277;\337\300?\275\372\016\342=\274I\330<\225\274\371;B8\230<\031\341\220:\206\370\263=\027\t:\275\355\200e\275Py\226\275\374\325/=\211\265\212\274\024\332\347<.\374K\275\227gY\274\240X\251\275\237\2151\275\340C\243\274_\352\272<\355\232\002\275\204\255a\275;\306P\275\372#K<\031\216W\275\273+R=\370\374\330\275\230\327\360\273\354\001\207\275\364\212\233=\216e\324=@X\231=#J&;m\023V\273\210\265\337=\222\244\350=#:9=\235\305\324\275\374/E\275W\360\206\275\223W_=\351\346\234\272\355\016\275\274\220\t\351\275\265H\333=\2360v=\373\363_\275v6F\275\227\007\356=\036.\203=\024\363\327\2758\350b=\021_\272\275h\276\342\275\374\025\240\275E+i\275\013\243\236;\352\331\341\2758\004\275=x\3327=\035\251\201\275*\315\334=\373\305\345\274\362\215\241\275\030\320\215\275\227\343\261=\030\247\000\275=\274\315=\214m\335=\221 \270=c\305\352\275>k\326\275C4\211=\350\265\275\275\366\271\271\274\225e(\275P\243d\275u\0238\274?1\227\275\366y\242\275\232\305 <\325\347\323=U\010\271\275pN`\275\236\221w=\241\317\343\275\313\332\333=\024\255\034\275\376v\272\275U_\242=\270\023\304\275\354\254t=\304\321\304=*I\007\274x\'\276=@0\201\274qTN=\347\2715=\004]\316=\226\366\226=x\350\347=\351\374\212<I`\215=\246\365\313<\226\202\270<\177iE=w\031\231=\036$\232\274\272\267\241=(@(=\355\365\355\274\205\376E\274\325\253\232\275\300\016\270<\214\332\305<Fs\355\275y\327\206\275\006\335\035=\323\303\337<\024\352\247=\250c\255\274\332\310X=\265Q\250\275] \260=sp]=\016\n\240<\325\303\262\275\373v~\274\3649f\274\375d\177\275\256/\323\275W\030\351\275[GC\275\310!\241\275v9\233<\003\274\342\275\303\254-=\3750\325\275\257\231\343\275\361\217\013=\224\303t=\274\253\004\275\334\026\301\275\371\314\232=\243\372\276=t\276\363;\363y\240=\217=\212=w\354\314\273\002\322a\275fX\037\275&\220\303\275\315\035\302\275B\217\266=\355t\006\275\022D\263=1Z8\275\221\337\350\274a\203\250=\265\244\316\2756\207y=\310\250g\275l\210z=M\026M=\210\255\205<\034\321u=qp\3019\236 \273=\034`\303=T\224v=u\355W=b\036\345=NJ\346\275s\232\252<\30053\275,\365\323\275\236\222\200=@|\374\273\267\345\352\274q\326\256=\246>\320<\260\220\316\274\370\024\225=\037\014\331=;XS\275\343S\246\275F@\354\2753\230\324=\315\272\202\275R\210i=F\266h\275\366\356\254=l\232$\274\346x\347\275sw<=\376/U=\341\356\303\275\002\364\340\275UdN=\202\225g\275z\340\311\275=\306\270=\240\254\251\273\337h\206\275f\177\301=\331\366\351\275\222\205$<g\200j<\301C{\275s\347\371\274J\247\265\275mY\302\275\226\263\341\273t:\345=\227y\231\274<Z3\275\375\264\262\275\017\337D\2751\301\036=\022\316\007=\214\367D=\036\321\250=\224\351n\275]5c=aAQ=\263!\337\275L\010\317<\014\277M<\307\322\221\274~77<e\207\306\275\365c\211=\036\321\227\275X\"\252<1\235\300\275\022\356\326\275\354\367\256<\3335\205\275\"\331\304\275\001\306\252<\304\243\270\275\220\316\212\275\231Y\002\275R_\206\275zF\206=\017\276\265=\005\364\334=\004)+\275I \204\275\274\315}\275\252\032\312<\216\310\003\274\324\227\316\275\360\323\221\275g\350\014<\2566\266<\360\320\242\275\000\344\023\275\317\250\240=\006Bz\275\232D\344\274I\275C=\307M\214\275>\274\230\2758|\341\275\236\366\240\275o$\220\275V*\313<\373\310X\275\271\361\002\274\366~\234\275\266\337;\275?\007\332=\200[\037<\215\256?=t\321\203\275\363\313[=\252\021g\275\010\312\"=\362\'\261\275\272\007\004=\347j2<\224\025\\\275\355!\260\275\214\374\r\275\243\336==\020\317\253\275\243\356\326=\300Q\237\275F\257\342=\336\377\263\275,\370d\275\332\033\317=\005b\'\275\314\241\341=\031i\352\275Z\276#=k\276{<\330\326\006\275,\332\361<\251\340q\274)\252\234<\325}r;\321\354\013=$\207\320;\030T\322\275\037\023\301\2759\001\346=\372\017\263;0\357p=\307m\232\275\261\000Z\274\364\357<\275&\352d\275\326\017l\275xV\027=\2718\322\275\226\204}=\305\357\244\275\036\261\335=\367\217\244\275\020\216\324=\324\310\\\275d\037\t\275\037`\306\275?\243\260\275\030\035\226=\265\035\352=\376\243\274=\240K\202\275\'\004\251=A\024\333=\230f\262=\032\035U:`5\350\275\253\211N\275\351O\211<.\223\334\275\376\306\356=\\\t\027\275?\327\017\275rMQ\275U\025\342\275\325GI\275\022H\203\275o\037M;\212Xo\275\035\031\314\275\331D\336\275\001JL\275\236\237 \275N\307\333\275\311\370\004\275\"\266\224\275P\002\355\274\377\035\245=\321\204\257\275\035\027\222\275Y\035`=\177\342\277=\341\335\240=\243\032\320=!\034\243\275U\220\213\275>@V\274\270_u\275B3.\275\032$\300\274w\036\335\272y\254\304=\326x\3548@\003B\275`\2675=\354\323h=\350e\250=\31716\275\233\214\217<\232\317\242\275\206\363\252\275;\302\317=\036O\335\275\243sm=\242\216\204\275\366\332\220\274M\310\252=\307\372\251<\rJ\016=(]\244<\340\304\356<\355E\233;\205\234.\275\232\177\021\275\002\206\260\275\202q.=\300O\243\275g~\"=\325N\317<sz\326=\251\207\001\275\n-\305\275\020rD=\261O\273\275`x^\275*\323\262\275\023@\306\275\217\261\222\274D`\246\274\376\247\202\275\356\']\275\300\242\364\274\331i\313\275,~\342=\252\302-\274K\270B=\017\250\275\275\245\033\356=\304\224\207\275\2436,\275\261c\271\275\341+\250\274a.\002=\211]\334=\302X\345=U\210\350\274\002\001\'=\310\344\313\275\315[\357\272\300d-=G\177&\275\356^b<\262N\273<\326\222\010\275\036\211\203=\0317\231\275\377\213l\273\302\265\303\275\321\205*=-\364\310<\332\036\352=e`\327=\243\230g=\253\005\325=\254k\\=\305\267\342=sH-\275a*\217\274\214G\317=\214\325C\275\220\314\305\275\r\247t=\007u\354=v\310\234=\311.\335\275\'7\212=\270\004\207\274\021\324\227<\331\334\311\275\026i\305\275\317\202\262=\256\037=\273C/t\275D\026\237\274j\t\316\273\231\004L=\223\376\275=_\014[=\230\005\326<\032\000\270\273\230V\220=\272%\254\274\356%\037\274\2713,=\335\332\244\275Zc \275\235\254\001\275\244\030\223<|\017\260=R\214x=&\203\302\274\254\373x\274\305cG\275,c/\275\003S\266=]\376\260=\323\2226\275\216\211\203\275\303\346\203=z9\344=\302eP<\304\220p=\210\'|=\305\232\244\274\204}\231<\034\3227=\032\025\275=\333c\337=\225((=\322\215\217\275\223O\301=\013\344\255\275\265\3114=\252\343\316\275s\247\242\275\334\245<=\220\016l=]\214\246\275\243W =\274\260E=\206\315\201\275;U\330\275T\241e\273a\377\346<\006\220\230\275\257\317m\275\306\240\255=\020\322\256\274F?\225=\232\326\350=\014%\344=\233\215\314\275I\355T=\344\264\203\275,\342\032;\356\214\335<&#\351\275\221>\264;U\241/\272\3574\221\274\025\211\237=\216%\271\275\013\225\245\275\203\347\031=\035\377\030\275\376\277\355\275Nn\307\275\204>\177=Q]\235=.\256\310=\332F\027=\273\366\366\273\303}\'\275\207\350\200\274A\356.=\264;\251\275\374\247\236\274.$\275\275\225\222l\272\267\027\360\274\200{\200\275\316.K=0\200-=m\231\245\275\344\021\346\275\026\300=\275Bu\314\2752\266\323\275{\037\026\275R\256s\274-d\263\275\270\177\316=\264\234\227\275\"v\022=\253\004\215=\361\345^=\200b\225\275\211\327\210\275\322S\330=\034t\225=\250V\303=\311\305\237=V\203\234\274i\374\235\2757A\310=s\005P=\243\354\355\275U\n:\274\244\201\253=\224.\262\275\325\363\241\275)\252K\275\355\274\230:\232\351\332<\nAe\275&E\306=YF\257\273\255\370x=\353\273|=\016p\207=\313hY=\321\375\337=\201\370\276=\214\243\215\275\036\327\300=h\321\004\274-\317\304<\2551\351\275A-E=\352\244\314=\301\343A\275t\205\273\275\220K-=ul\312=\216\230\246=\020\274\027=P\264\340=\303\326t\275\003\242\030=\035U\227=\317\356\305=\355:\231\275V\\J\275\016H\260=\211\312\021=N\270y=v\264\332=\016@\375\273\314\214K\274g\257&=\0067==CTM\275\210-\250\275\220Vr\275\366\223\013=\200G\300\275\320N\274\275\006_\253\274\n\200\344=\206\255\315=VjG=&\224\202\275c\300\246\275\345\310\262\275E]\274\275\316G\214=\275\006d\275\026\256\222<\261\272\317\275\266B\031<iZ\351\275Q\352:\275\253\237\333\275z\302\013\275a\342\331=\023@\010=\037\215\332=\322\016\263;\255\201\231\275@\244\327\275\024\363\215\274\314.\034\275\367\201\370\274)\036\273\275\364\257\317=\350x\352=*\343\224<g\352\032\275\n\312Z=B\334\246=\274f\314\275\237\264\254\275\265N\025<|\312h\274.\262\322\275\t;\213<\0164\207\275\210V\307\275\230a\236=\262\325\324<\365\335\256\275m8\027\275\276\342\214=:\355H=sb\037=\266e\254\274\226\330g\275\317\271-=\2024\213\273\303\313\337=\336\322\322\275\377C\211=_;\004;\033+\354=5\034N=i.0=\243\314\233\275WUO=\026B\253=^\322\231=\032,\224\275\271;\343\275\254J=\274G\253\263=\313\262\306\275+l\252\275\036\021\274\275x\002\037=@\370\323<K\356W=\243\245!\274\023\350\354=\365\376B<|%\223=\226\367\220=]&\212:\365\254\225\274\271<\274\275\327\264\254\275\313\021\270\274\000\307\366<,\233\215=t\022\331=\177\345\223=\236\014 \275:\226\333\274\006\336\234=u\006\222\275\337\276\201\273Q\203s\275\274K\350\275\362J\256\275J\302\353=\335\365V\275z\231O\274\200\027P<\372_\301\275\211\312\322\275\0173\276=\362o\345=\276e\331\274x\312I=\261\3045=\025K\334\275\252\216\001=\373\377\000\275\366&\330=N_;\274\306(<\274x)\177=\250\363#=\264\341P=ob\257\274_q\335\275\022\225\305\275\020r\316\275\027\372\334\274\274\331\305=\343|\177=H\3508<j\337\303\273d\331$=[j\227=\237k\352\274=O\241\275\"}\221\275\227\234\201=x\270\265\275g\355\323\275\213\004\034\274n}\273=\001\017\342\275\205\016\237=L\216\256\275$R\r\275\325O9\275\0029=\275\334\030O=!\370\220=P6\234=\027,\223\275\036S\332\275E\253\302;BH\037\275nG*\275\336q\307\274!%\270=]X\370;\256\210\212\275\255T$=\260\346\324\275LD\260\275\342\242\274;\361*E<-o\226=Cp\340=\030P\313=-\003\212=}Q\031\274\363>\342\275\254\221\205\275q-W=F\350\202=\236hd=\246\242\305=\022\263#=J\377;\275`o\233;^\277\206<d\333\252\275\320w\257\274\372N\210\274V\005\342\275YF\245\274\006=\317\275\037\023\322=fM\223<y\220a\275M\366\234\275V\240\317\2742\365\314=\030>\201\275\354\233\370<!X\307\275=\267\226\275\267\221b\275\273\212\352=\026\302\353=\314\277\337\274\252ZS\275G\232\254=]^\327<\370\351(\275)}f=\237\271$<\376\303\224\275q\271\245=\n\243\204\275fS\306\275N\265\270<\\\215\212=\261@\342=t\337k=\024Xi\275\216\304\307=\036\263\337\275W\245\261=\023\251r=\2558\211\274\217J\260\275\276\352\213\273C\222\312\274\261J\243=\010A\200=\366\023s<uF\350\275\330(f=\356\302\255=\276\207\310\273}\375\002:%\333\331\274\226\014\263\2754\314\233=\217\004\252=\276\375\t\275\302\274\\\275\322\'T\275iV\230=|\005\205<[\305\237;\214]\013\275a\024\271=\261\010\341\275\254OH\275WA\312=B\343\310=\224J\014<oH\n\275\304\322\303=\227\343$=\340\271&=8v\214\275j\347\343\275i\244\000<8\001K=\277\344[\275t\323\255=\272\310\260\275S\021\333\274\215u\223\274\023/\326\275\377\334\'\2752\023\242=\004JS\275Ga\333\275\233\337(\275\220\311\352<\246P\200\274\331\370\206=\325\230\020\275\340\036\273\275t|\304\273V\361\273=\003K\313=\247\202\303\275\266\311\220=(\235\333=\251q\262\275\271}\001={3\205\275\276%#\275\252\271\364\273\\-\347=O\206\315\275\202\225\243\275\336\311\n\275d\376W=\355\267\001<r[\353\275\206 \346=\004\247s=\002\212\376<\313\3052\275\026-.=\306M\250\274\371\267o=\300\n\225\275\307% =a\245 <b\344\215=\006|\271=\360\024F\275\356l\360\274\265\374\356<\317;\356\275\265\375\314<=\236\253\275\3153-\275]\232\312;\355\023\252\275w\316}=V\037\240\275\023\314C\275\032\345+\275\236\300\346\274m2W\275\265\263W\274\020\276<\275\033\235/\275\313\240\"\275\245\207(=v\301\275=75\307\273S\274\237=0-\277\275\250gz=\351\363\223\275Y\257\301= E\316\275\251\000c\274ZV\205<&QA\275\230W&<\311\202&=S\3356<$\327n=\335\270\255=u\207\367<7`\233=\274\177\304\2755f\235=\374\313\337\275\336\233\241\274`\357\274;\345\276\235\275\330\367\326\275\245\373\233;;C\275\275\320\317$\275\034i\252=?\263\265\275\300\000S\275\266\323\205\2744\273*=0\266\177\275d\354\220=\244\017\345=\344\375)=&\025\203=\256\030P=\336R\350=\0249\321\275\223\247s\274`@L=\006\350(=~\351\262<C5\337<\nu\226=\342\376Z<7#\311=\343`\n\275E\236\276\275\023\317\342=\310O\342\275S9\007\275*?\214\274\222\0256;R,\231\275\263C\321\275Lh\251\275\007\277\315=\333B\027=\013\326\207<\374\252\007<\241\021\036\274\016\027\245=T\231D\275\234g6\275x\254\036=X\237\327\275+\025\361\273\364^j=iK\241\275,A\315=[\025\306\275U\306\245=0\343\204\275\334\307^</\252\000\275h\231\247\275]\361\246\275\325RN\273\365\205\354=\331\305\300=T\205\246=Rx\303\275\207\017\264\275\307\360\204\275K\027\\=\032>\301=K\313A=0AS\275*\225\255\275\320\243\347=\274\335\363\274\353\243\350=Q\024\037=\024\307\302<\231_\277\275\223\256\027\275\227F\211=\345\310O\275\352W\364\274\'\225>\275\207[@=V\226\263\275W\271F\275v\300\326=\256\264\322=\002\321\230\274\345\\\321\274g\332 <\251\004\260=#\364\325\275&_\323=\304\376\206\275\002\240\013=\234\000\241\273}\"\271\275\367p\253<\333\334%=\007J\265<\270{\262\275\004W0<D\275\254\275\350\3546\275x{\"=\262r\311<\255X\347\275K\305c\274\\\025$\275X\273\247:\366\245n=\201\002\317\274E\r\303\275\"B\355\275\376p\307=)/4=\211j\204\275\305\351\313< W\331\274\312\374\271=W>\357=2\207m=\330y\200=I\310\010\274\250\301z\275_\315\240\273\026\034Z<c\376$8\037\370\323\275*\256\257\275\360\022\254=\316\364\313\274\372\2504\275\265R\205\273\212tA=\004\260\256=\301\223\037\273\245\177\313<\311H\357<,\267\257=\263\250\273\275\271\321\347\274{\255\231\275E\351\360\274q\344\200<\341:\253=\273\275\326\275\034t\301\275,\344s\275\2247\204\274\020\002\240<\024\001\364\274\246V\247\275\347\303<\275\021\353\314=\005\177L\275m\024\177\274\232\255|<0\330\036\275\351;r\275\342\236\241\275\223\211b=\367@\315\275\311\225\272=-\301\025\275\313c\351=\005-\224=\325\265\215\275[\376\351\275\367\260\230\275YD\325=\372\202\252\275\373\037e\274%\366\301=\310\320\347\275Q\013J<\334\247\340\275\251\301\352=&4\000\274$FW=\330\275C<\356/\272=-\035\356\275\200\026\203=)]\274\275|e\332=\201\242\213\275\001VY=\370:\220\275\206v\333=j\326n<\030\\G\275\375\372a\2756\361\247=\262\354e<b\224\311\275\363\262\257=U\030/=\2005s\275N\306\005\27449\265\275\005\t\331=\177\017E\275\216\360\373\274J`\326<\346\274?\275\327\014#\275S\343\273\275[\277\223\275\241n\332=\007b\005\275g\035\246=\332\257\377;\273.[=\314P\277=\201\n\010\275 \333\177=F\372\304<\002\262\236\275\023k\236<U`#=\353M,\275_;O=\301\332?\274\357\331\253=\246\231\365;\325\235\244=]g\332\275\n\003\375;+j\256\2754\207\235\274\244\372m\275v5\271=w\253\226\275\303\314\001=\252@[\274\267\240\212\275ZF\257\275\025\0137=\"y\220\273\030\226\332=5i\020\275\301\200\352\275\356\345@=\274\003D=b-A\2758\263\350\275g\221\303\275\222\177\341\275P\022\214\275o\n\375;\270o\033=\231\305\343=\004\001\223=\315\365v\275H\204\243\275\237\364\354=\n\313\004;\214a\216<2\334\237\275X\026\263\275c\252\241=^`7\275\203@K\275\032{\212\275\254\216|\275\270`H=)3\302\275\311^\300\275d\t\017=\211\340\305=\032+\217=`\307\312=\275\352\304\275\270\331\022=\350ao\275\242\354\'=,\022==\301\311\316<J\277\233=\235L\320:\2641\330\275\354\266\254<\324\244\310\275kq\017=\277\221\260\2757\020\360\274\350\024\267=\037\302\002=4H\342\275z\313\213\275\t5n\274g\177\353\274\212\340\321\275U\210G\275mE\340\275\300\335\013\275-$\206=.\345h\2744(%=\202?|\275\211\232\004=\373\025\232<\301\207\310\275\027tR=E\\h=\357T\323\275\376\243\245\275\233\301\316=\323K\330<\2065\223=\311Q\000:\223)\347\275\277\3632=Yf\327=\266\254\014\274\204\361t=\022\342\256\275\031\257\016\273\3244$\275\356\270\221=l\035\217=\006@\227=\261\035\332\275pda:P\307?\275XU\207:h\270P=M\246\006=\223\321\204=_\207\243=\241\212\210=\220R.<?\336\222=\252\020\376\274*\024\233\274\366n\305\275Q.\322=\343\252\232\275\355{\235<\020\374\352<nX\316=\222\n\022=h\360\352\275)2Z\273\307}\346=\254`\326\275@\317F=\250\252r\275\304\365\271=\320\006(\275\2663R\274$_j<H\223\223\275\363\220q=2\323\353\274\350m\316=\020\007\355\275fu><\257\201\355\275\262\206f=\256\330\323=\035\275\273\274%u\312=}8Q=\016\034\262\275\311\361\223=\224#\221<\020\215\207\275H0\177=\211-\236\274\220\245<\274\312K\026=\262\326\271=gR\357\275\266\301\022\275\273\005\337\273x\344\245=\365\314\r=\305\300\273\275\325t\266\275\003`\30281\355\253<\006#\362\274\367\356o\274\250\371b\275\360U\343\272)\362\203\271\026\177\224\2759.X\275\005>\261\275\325r\356\275R\r\026=\023\216\024=\357\362\332;\005\365\021\274\246\300\036:zP|=\3441\304<\332\265\344<\030 \215\273%\020\243=\3111\336\275\356\377\324\275\234\250\300=:\030\313\275\336!L\275*\233\237=\026\340\305\275\311\2279\273R/\377\274\037\251\203=9\210\201\275\346X\006\273\236Y\305\2751$\243\275\334\362\231\275\255\270P\275\036\037\236\275\026F\347=+\"\256\275\312Q\266=\341b0\275M\204\204<z\211\242;g\220\033=\024\\\317\275\232\036\310\2724\326\304\274-&\336=d\314\325<H\274c\275\314\225\225=\220+0=\2516\233=\242\0164\275\323\002\227=\373^\344\274\331I\303\275\242t\021\2758\254x\275[\005\213\275u0\327\275\275\273[=\200L\216\275\215\320\221<\276P\021\275Q>\206\275p\346\205\275\312\335;\274\027\\\215<\234I\251\275H\200\327=%r(\275|j\003<\253\302#\275)t\277\275\327\242\337\275\275\231\264\271\0278Z\275m\252\321\275@\372\302\275\253\326\313;R\000\003\275\336Nd<\277\035\240\274\242nr\275\201\236\315=\361\307\001<6V\226\275\336H\305\2747\264\304\275C\2310\274\3050S=\256\377\203\275\375$\307\275\352\235&\275x[\244=\014c\350=i\203\353\274x2I\274>\304\344<\024\364\266=\tn\007\275\035\314&=\375x\214\275E;\007\273\264_\221<\334\003\354\275\31024=\3316\247\275\213\223\327;,\0318\273\355\022&=5\212(=u\r\227=\001F\262\275\201\335,<\370\347\344\275\024\274c\275\t\322\247<O0D\275)*\263=\346\276\301\275\242\321\354\275\334_\032=\370i\235<\374\211m\275\256\367\241\275+\232\340\275\000-\335=\321}\231\275\341\r\327\274\317\006\351<\362\333\220=VQJ=\351\266|\275j`\357\275\314nS\275\307\211\342\275\221Q\266\275\373\035.=\001\t\307=P\304\337=\237\\\340=\261\311$\275LT\270=\007c\316\274\312\330\274=\301P\351\275fQ\224=\n\210\346\275\362\223\204\274w\361\345\275d\244\335\275RG\205\275\310\267\340\275\031\np\275\307*%=Gu\267\275b\246x\274BR\341=3\034\353<\034\366\254\274%\030\334=Sz\240=\317}\"\275\203\234\3508M\'\321=>\200\264\275\326\355\235\274\372\t\317=R#\260=\020\027\306\275\373\210\260\275\375\241\206\275{Ak;psZ\275\032\363u=Vn\261=x{\254\2756\006\225\273\302\335\262\275\026\315\231\274b\364\301=\347J\313\275\213\272\332=\014\235\273\275W\327\215\275\370\263\315=\035\016\211\275\305\255\255\275\273A\232=k\365Q<\265f\347<O\373\257<=\021\320=z\205\034\275K\332\201\275Y]\263\275\313\255,\275\331B\016\275rn\225<5\214\205=_Z\225=\377f3\275i\035w=\357\225\253;\351\177u\274\310\200\202\275\376R\\\2751\227\350=\316=%\275\262\002\003\275(0}<\235&\275=\034]\335\275.\253x\275#a\344=\022\334\346=\016\233\263\274\036|\240<\211|\300=\265\255O=\031\004\336\2730\t\224\274QP~=\321\223\230\275q\337\200=\371\340t\275]r\023\275N\233\347\275\2353p\275\253&\333\275\n\311\344\275:\203\215=\326\033\270\274\311\265\270<\207\321\211=\302\301/\273O`\342=\325\332;\275\\\220\266<\2627\264=\265\021X\273\260\356\262=\210\327\267\275\006\2362;D\347\352\2754\233\330\274M\\\322\275gx\216=\250\365f\275\317\366Y\274\210\357\336=\210\251(\275\237\030H=\266\350\231\275\230\315]=\\\004\311;u\215\256\275\237U\235\274\363p\341<~\246\317\275\\\242\260\275\260\274\342\274\277\026\346=\211\"\310\273\242\352\264\275n.2\273)= =r\337\226\275/\\\026=\345Ql=B\323x=\302\177\236\275*\345\007\275\025W\262=\032\333\210\275\332\347\022\274uq\233=\275\374\271<\336\353\214\274A$\306=\222\343Y<\356\325\002\273\307\257\311=\207r\340=\026\025\322=>i\033\275YC\203\275\221\325\323=2\253\357\274`\341\340=\227\234\214=?h\274<7\207\244=\346\206\221\275\235/\310\275\003&\260=\022\333\276=9\371\242<\310xo=V\000\346=C3\202=\252\273\345\275@\014R\273\262\332\201\273\003*\275\273L\003\236\275\252\363\261=!?\271=\265\215\273\275\271|\226\275\265\347\343\275\370C\236=O\203\311\275\314Uk\275)\255\024:\203\376\255\275\346\346\223=3\306\323=\005#\334\275\251\033\356\275Px\304=\245n\r\2729\201\001:\'u\335<9th\275\310x\010\275 x\265\275\2464\225\274\324d\363\274`c\324\275\027e\237<X\014\234=h\264-=\021\227(=\2411\016\275\322Dm=4\300\220\275\312U\241\273\254\023\216=/\303\331\275\333\263\337\275\222\204\330\275|\037\303\274\232;n=\374\223\223=%\376\261=O\357\343\274G\214\267\275\336\304\276\275C\n\255\275\316^\230<\3229%\275(p\035\275\267(\006<\343\323\251=\221\263\270\275\"\3205\275\343\221\200=mc\r\274O\302\022=\241o\305=&9\n\275D\345\2758\235\352\225;\232\265\311\274\210w\273\274k\361\373\271\273\031\024\275\307\n\250\275\354d\267\275\276\334\351=*\327\003\275\017sI\275<\3228=o\201\202\2752\310\262\275\3347$=\246k\300=\200\231\350\275\250\321\347\275\317\351\211;*r\t;\310\257#\273\235\376\323=l\226\212=[\251\345\275P=v=\241\206\303=g\322#\275\'c\033=jV\214==\023\200=\200l4=,\030\302\275\2278\252;\014%\333\275\206\020\324=\022\023\276=\250S\006=3\302\255\275\203c\323=sk\001\275(\260_==\343S\273aLX\275\177\205\227=\330\311\033<\242\357\315\274jT\307\275\\\203\211\275\337L\326\275\255x\303=\250\240\363\273X\264\233\275\256\350\206\274\210(`=kV8\275y\006\233=\261\210\307=\216w\224=3X\230=O\331\313=\266Ox<W^\311\2753\244\250=\335\232:=S1\210\275\221\221\243=u\230\r\275\242\255\302\275\316I\313\275ff\356\275\366\234\356\275\010\243L=5\201\212<\340J\246\274#2r\275JDE=\205\337[<\341$\305={&\206\274\025\206\265=\003\000I<\344\201\273=v\253#;\336\032\304\275\2115A=\320\351C\275\2173\273\275\365\323h<o\261\321<h\007\326\273\'\210\\\275\014\036\000\274\307\204\355\275~I\236=\256\031\237\275\232\355\225=\204X\200=.\367\246\275\000GC=7\256c\275.p\242\275\204\272\261= E\376\274V\340\230\275\356\036\301\275\177\211Y\275\236H\002:\260b\306\275\220E\033\275;\025\252=\331\310\316<\342h\316=\225D\'=\205!\360\274@h\262\274\026F1\275\375\267\354\275b\277@\275\326\267I=>\270k<\354\273\332\275\'\215\311=\224\3064<\037\277\201=\324\305\323=0\315\021\275`,\321=;\357\257\275\025\221\235=5X\353=:gk=L\354I\275]\220\261\275w\331\322=!S\315=\207\215\324\275\236\271\327\274\310Q{=\234\032\220<j\027\303=\374\303\270\273^\230\222=\313\353\264<B\254\356\275\200\224\272=\330<D=\375\026\272=\366\326\325\2751\270J\275\343h\"=\2151\033\273\r\244\023=7\270\261\275 \244\227\2757\031\206=^\r\232=\304\271\253\275\377\301\240\275\001q\371<\234\326\252<\340\226%=\016\017\337\274\255Z]=\372\232b\275\312\223\020<\210v\343=\021\310\325\274\260\266\222\275\236p\271\275\033\353\203<\213a[=\035\321^\275\371\303\207\275\365\373J\273\361B\023\275\3660\350\275[{\017<\371\343\350=\210v\231=\t\006\246=`n\273\275[y\316\275\216\313\331\275t\022\277\275\243\331\026\275\367\201\264=\256y =c\256\263=p\226\026\274\245\207\245\274\274\301\254\275\350V\331\275\3014\222;\343\t\322=\234\303\324=w\302\256\275\333&\200\275?s\006\275\'\303)<\260\233\333\2757\005O=jd\206\275j\206\322=\363\362e\275\004>\216=\245\273\332<E\365D=7Z\313=\022\316\214=\220\367n=\231\"\360;\360/\261\275R\355\352<\370\273\271;\321\314\245<\217i@\275\276e\355=\014\255T\275\3379\337=RzW=J\336\217\274Tb\322\274\207U\333=M&d<\013\254\000\275\245P\256\275!g\022\275y\214\232=\317\350\217\275\311.c\275\257\241\236=B\213\237=\223\334\347\275Z`\350<\rE\243\275\340\267\022<\014\346\001<1\267\'\275\027\337\t=\221\005\267=T\364\232=\266*\341<cI:\275\261Z\215=\353a\242<\335J\266\274\205\230\203;*\"\236=-\311\345\275\231\223\246\275vn\226=\335\324\302=q\276e\275_-\364\274\315\225\236\274\221x\271\275\315\013\221\275\241x\305<\n\317T;?X\357\272\242)\241\275\340\243\211=\010\t\246\275\345\303\340\275\031_\036=\231\345\314\274\361\343\214<1*\337\275[\211\254=\375[\243=\342.\277\275(>\227\275\034\375\250=cR\216=2\373\232=r\215\3218\200r1\275\r\342\206=l\233\346;\201\363}\275h\202\333=\354\376\241\275T\365K=l\243h=\312\026\225\275,\342J=#\255y=T\241F\275\355\323\250\275\330\273\302=\211\024\312<\250\2078=\007\200\203\275\004\027\317=e\034\314\275\014\234\"=q/\351=!\226\322=\362\253\263=\005;\340<~\330\250\275\263\220A=E}\217\274\325w\004\275l\244\365\273\267\206\265\274\355k\253=z`\257\275\313\"\243\275m\252\322=\202\241\264=\036\362\346=\242\261\027\275dCo\271z}6\275\260\317\232<\341\177\250=J\344\"\274\035%\255<d\262\210=Q\364\315=\334\371\350=~\374\354=<\337]\275\030&\200\275Fr\252\274OQ\303\275bIC\2751\304R=\221\306\307<n\331}=)\235\237=\335#\266\273O\267\323=_\371\037=pe@\275\016`\325=\341\311\237<\214>\241<\036tv=q\'f\275\022S\211<6\000\342\275H~\346=V\216\220<\216\373\227=k\305\247\275I\303\201\275X\366\337\274w:\241=)\207\254\275\276v\303<\376\036\036=\037\211\342\275$\307\256\273\210\214\377\274?Fa\274X\372\335\275\362B\273=\326\006\262<\017\216\332=\370\307\201=\366\224\343\275\177D\304=\313\206C\275\350\203n\274\211\330\207=\254\300w\275\311.Q=$\203p=\032\362\344\275r\204\361\274\322\370Z\274\rC\233:a\222q={\351\331\275\262`v\273\235\356\204=x\241Y\2756t\333=\340/\216=\214\375\303=\023p\346\275\246\302!<0U\035\275\3260\222<"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\307\256;\275\301^\220=\322\304\373\274FL\031>\271v\336=\177\232\231=|\276\224=+\"\221=\203\362\337=H\204\036>\311&\364<\177P[>m>E>e\215\242\275\214\r\030>\030\214\334=J\341\246\274z\204\017>d4E\275!\240<>\340#\027\276F\260:\276\005j\322=\001\327\257=\034CL\276\365Z\005\276\247\310J\276h\'J>\271c7>\252\233\010<\357I\347=\307\325\300\275G\027<\2762J\026>\351G\'\276BK:\275\013(w=\244\303\271\275\365\003:<4\214\356=\351\'\027\275\345\375\363\275s\224\034\276E\254\241=\\)D>\305\203N\275\372i1\276\347U->\333\271\330=A/\366\274\322\022\017\276\300Q\307\274\353\306]>n\361\221\275\367L\374\275\212\351X>!\241\311\275\'>=\276\301\247G\2767\336S\276\334\221Z\276Y\362\201\275\275\250H\276\n\013\260\275\221\343\321\275\266\261\352\275\036\002\307\275=\231\250=\013\331\330=g\357\231\275j\315&=\241\363V>\026\205\275=I\'1>\016\032\023>\032\2269\276\363N\362=\356\\z\275\356\2438>\362v\303\275\336;F>\277\222/=:\314\303\275\204\270E>z\031\325\275\333D\\\275\203^\237=\255v\003\274\365\245Y>\013N\245\275n\234\005>\002d%\276b\306#>\214\225\357=\034m\340\274\024X\370=`\304X>\360\003\267=\202\342$>\335A}\275\331<\267\275t\rG\276p\250\204=+\337\'\276\274\013B>\211DB\276\315\356\t=5h\021\274s\3732\276+\210\016>+\013\024\275\300XT>\017XJ>\3324\262\275VH#>\252:\205\275X]N<\021\302\'>\020\037O>\023\217\303=\267Wb>D\256a> \217\235\275\365\242\025>{\254\216=\212\027\270\275\257\336V\276b\250\356=\000\026G>\233g\001>\032O\220;\327\231\034\276v\314\'\276D\014\247=\230\233#\276\020\356~=}\016\007>|R+\276\260\353\245\272\305\346\021\276\374$\005>r\t,\276=G\033\276\252\251\036\276_4\243\273\2653,>\315de>\342\253\030=\000>\205\275\010s\225\275s\310$>#|\036\276\224\243Y\276\366\315\236=\205\221\014\276&3\325=Ek@\275I\001\r\276w\234\232=c\320\335=\214N\200\2746\235\236=\016\033Z=}\210\247=W\305\034\275b\243\003\276\244\"\006>[9T\275\376\020\275=\222,r\273\376\037X\276AoV>\265\205\274\275\202\243\033>Gc \276\314 K\276T\372X>\344\023X>\035\030(\276\233\326g\275\305\357y=\357\252h=\242\\W\275\246\370&\276\031U\212\275}q\007>,\271a\276\362\335\254\275I\333\003<\371\376\332\275\202\374V>/\010W>\304m\004\275\203}B\276\310\025#>\361\332\377=\\\315:\276m\004\221=8_o=\341\3236\275\254\255\245=\232\363F>\256\337R>x\364\027>\247d\316\275*h >\270\250.\276\217]\001=\256)\223=\277`\003>\245?\331\274&\014\020\276\355R\016\2748$S\275\'\r&\276\323\323\314\275\377\362\005\275v\024\367\275\233\335\000\2765K\016>(\253R\275\235\2527>/\\\020\276\204\337\306=\217\346)>\321\363`\276\341\260\322={\014a>F!7>S\025O\275#;\275=*\234A>\177\265\207\275ah\004\276-w\246\275\004\016\005>p\234c\276\231\255U>\3704\326\275*\351\n>\037\362\030>\212V\272<\372\212\221=\005\227S>\025\251.>\316\r\305\275\nf\240;+\332\n>\037\367\314=D\341;\276\2123\255\275\r@\221\273$ \204\274\036\006;\276\rR1\276y\035\337=\200\211\312\274u\261\343\274_\200\014\276Y\336\327=z\241\033>\371\036\352=\307\242\233\274P\337A\276/c\322=\276B\332\275\257\304_>\026w\266=\243\307C\275\006]`\276]\271#>\246\302\313\275\313$\311\275\007\321&>\254\\\326\275%\010\216<1\311\356<XN\337<\260\375\333\274\347\372c>T\354\006>77\035>[\004\365\2753a\237=\375\3305\274\022\366\244\275\035\224\324\275\227\002\213;\037@%>\213\324\305\275\026\367\025\275#d^>\360\034\367=]w\026\276\2460\252\275z\322\212\2740y\010>\374d\233\275\234M\230\275\202@\331\275M@\376<\232\2403\276\246M\226<\217 F\276\245>\247\273\322\366D>2\203\314=eX\304=\235\022\371=\007\240\205=#*A>:\322\010\274\370-D>x\307\364=p\257\307=B\355\233\275\377\325\017\275\251\t\003\2756\300[\276\231\021\021\275\252|\005\276Og-=\323p\257\273\250\324\356<\317S0\275\r\224\036\2758\270W\276\346\243)\275w\350\272=a\343 \2768\265\017\276\200*\016\275L\343\021\276\242B/\276\220\337\373=mx4\276\206\231a>\37440>pH\007\276/\344\204\275\302\027K=\356\010\007>\341L\205\275\n\nR>\340\300W>}D\335=\205r#>\326\317]=\021\357:\275\020\313\014\275\263\344U>\274;L\275\315\256\r=\3141H\275\320@\306=[\017\010=\3145F\276\232r\362\274U\360A>\010\366l\275\271=\365\273&X?\276\220A\240=\3029\035<l\340\007>\302.\001\276\255_P\274u+\'>\302\317i\275y\003\321=\305E4=\352\230\306=9 \362\275\325V\370\275\020\023\366;G\343\300=\220\364\264\275\221?]=}\240\206\275W\346\346=\2328\010=\270f\316\275\363\222\204<\001\032\031>.\262\034\275\333\233R>\205\206\307\275\037n\364\274y\030\213=\032\2422>uk6>f\341\241<>C\024\275\372\355\243=\343\235\"\276\326\364\215=\001\307\364=\320\235\037\2740FF\276i\243\304\275\003\3126>\206hP\276\367X\325<\365^\255\275\347\245\345\275\303:b\276\273nF>\024\372\030\276\335\221\341\275\005h\r>Nj\005>\223\3158\276\234\366\014\276\334\373\247\2759U\374\275\266\317/;\023#\273=\256\315`>\255\324\265\275k0\014>x\323\003>\234\2469>\363\256\366\275?\211\277\275\312\337[\276\351e\013>\332\221N\276~Z\232=\030\3441>\035\326\247=\276\323\034\276_\021\274=\177}\036\276\022i\253=\213j#>\2476\253<\270\226\371\274t\340D\272\003\334\027>\372\022\035=\301\2768\276\001\265\031>R\t\313=\3305\345\275\351\222\006\276\367r\204=\322\264\261=\371\216(\276\0358v=\360\3078>\334=\017>\332\315\007\276\010\211\260=\371r?\276b\225\364=u\177@\276\274_S>o\251\016>t\365\004>#{\244\275WX\353=L\271w\275\235\310B>8\277\032\276=c\312\275{)\010\276\000\230\030\276\266!e=#\0259\276`\247\244=yV\003>\213\254P>\243\001\300\274[\236&=\244%A=\277\233\327<\355\\D\2757\342\031\276\322R^\276w\322\241<\026\213%\276\235\307\327=,\271\234<\217\271]>=\201\276\275\211\234\030>.\002\266\275\357@R\276\007\203.>b\263\002>\255H\016>\322\014L>t\332\314\274\001\354\305=_\210\267\275\245}`\275\212\254=>3<\243\274\366v\037=qkA>\0019\t\276\373\017\366<\016\177\033\276\020\347\353=lc?\275\377\006&<t+\317\275\221\007C>\343\351\262\275\034\203\324<\305\367\306=\222h!=~\276\224\275\031>/=\247\362/>\265\2772>F\204\020>\025%\360\275\005\371\270\274c\245\203\275\210T\232\274\346\331\225=/\014?>q\305\262\275\240\275\232=A\224\207=Q\277\206=4\223\025>\202\272\325<\303\342L>\263\2552\2767=2>\266\316\234=\346\253\016>\0072\007>{e\334=\375\204\230=\030\202i\275/\323\001\276V/\006\276\007G\357=\330\233;=\237\3037>\223\217\037\276>\354\000\276v\345\226=\211\244\000>\204\205\023=1{\274=\177\233\016\276*\036\033>\227\023\017\276`\274;\273\3426C>r\361\274\2754CI>\334\030\353\275\236w\320;\377\266\033>%o\033\276\020\250.>\227\211\226=\274\010\224=\272\350\323=\005\207\021\274\350\206\227\274\004\316\336=7;\304\275L\336\377=\263o\032\276\320\227\247=c=%>\300A\223=a\366D>\235\333\364\275{\270\036>Y\023\036\276\336Ue\275#LF\276=\tL>\000S\034\276\206\244\r>0\010Q\275X\022\001>p\257\016>\375n\315\275\3524\377\275A\005\236<\243\244\310\275v\333c>g\0017>)\364\006>\306tB\276\300=\036>|\311\000=\037\357!\274\377\0174\276\362\316G\276\373\350F<}o\364\274we\264=\204S\327\275u|-=\362\337\301=\356\314P<\206\302\250<\265k.\274e\245\024\275\213\303!\276\306\"\007>\247\203^\276\266z\365\273\211\346f=\377\2630>K:\325=^\256\367=\376N\024\275s\251\252=\251\177.>J\355\010\276\021.N\274\370O\023>\362p\037\274F\032\013>{%k=\317\350\020\276l\323\315=\376@i=\203\2600>\033\253\037>(F\033>\213\034\302\275}\033I\275\370\236\320\275a\202\251\275\223\277\270\275\232\026\315\275\266\034\300\275k\253\021\274g\232F=\370& >\330(B\276|\227\006\275\330\365V\2764\344\333\274t\035\013\276W\216$\276\326Y\252\275.\030\003>,r\225=2\207\006\275\376\231\271\275\223\372\253<\204\3724=\231\265\227={/N\276\221&#<\226\241\250\2754\315\365\275X\3631=Hb\023=\225\323B>\006\377T>\230\350R>L\211\314=\277*H>P{\014>k\0342>\347\340c>\343\022\022>\035[4\275E\250\031>\3359\336=i\335\246\275\246\313,>\316\007N\276\002f\276\275?(\233<\357\260<\276\367\007\016\276{X0>\315J\261\275\222\201+\273\270\333\322\275`\261\t\276\177\265\334\275\274d\016\276W=1\276\361G^>\341Q\326\275\251J\260=\243\023\301\275\341\235\323=\256[\242<\334\263^>`\363\232\275k\t\037>\003\226\241<\373%f=\3754u\275W\232\263\275\013\031O\2767\374\027>\342\202x<\320\364?\276\007n>=mac>\205ua\275E\331\335\275L\210Y>l\365)>\223\341\264\275\320X$=\220UF<\03650\276R\232_=b\026\031\273\330*T\276\354\330[\276\'\t\224= \276[\276o\3474>\200E\\>,\350b\274\213\376$><\254\275=\370\034&\276~\206\235\275\376\204L\276T:\250\275]\030?>S.\031=\'=h<W\365Q\276\256\272\013>\236\274P\276%\035->1\014>\275\361?X>\303\311\275\272\333 \217=\331\033b>E\031a\276A\267\001\276Q\214<\276)\357\220\275f\207 \276\374A/>p\'Q>\035\262P\276\232\221\307\275\\\234A>{\245\357\275\330\265.\276\327&=\276\267\235E>\375\363\342\275GB\366\274\234E\033>\370\214P>\035\242\013\275\302\250\330\274z\317P=\265W\023\276\326t\253=\243\320\r\274\276oL<)\272\345=\004e\034=\027\2602>\253\246c>7\372\252=C$\263\275\370q\274\2758\211\305\275W\3006\275L\234F>\336\313\032>\260\007\340<\302RF\276a\013A>\254C~=\353\201J>M\316\357=b\007\023\276\'C\203\275n\351L>\233\316B>\372m)>\213\253\233\2757o\244=2d4\276\352\245B\276\014\205\022\276C\014\035\276\355\371<<\253R\302:\205\221r=\020\316\320=\324-\266=\372I\264\275@\032\252;s\024\210\275_\237\270\275\357\014\014>\355\367\275<\371\343\304\274\343\216\343\275\226\375\207\274\246O\276<\317\264n;\236\273J\276\275>B=\315P?\275\363\324D=0Fb\276\247|\002<\262\320\340\275\316\237\312=\250\311\010>N6(>-\374\252<W\\\322=/:N\276\303D\370=\255)\\>\0337 =l\210Q\275\'A#>\253\0178\276`\306\n\274A\263@>\\\240\305\275cj\357\275\004e\022>\267\tr=,\354L>_J\323=u\305+>\326V\036\276\322\3730>R\334\331\275UN\351=Q\303^>) \315\275\034\206/<\271 \004\276\223\375\344=\373\244\210=\020\t\244\273W\002:\276\233\360\343=p\345\r\275\253\356\230=\216\3746=\017\320\342=\374\361 \276O\013#\275\325\217\014>m@\033\276\016J\260;nb\374=\002\247U\276\256\"H:\000\352\320\275\t\367O>6\0354>\240D3\276\2003c\2764\346\234;\026\351R\276\034\233->\267\315L\276\334\342\243\275\004\215\007>\264\331\034>\276\000\002>\314WH>\220K\020>\n\3261\276\026/S>\206\264a<c\025\250\275(\211E>`\230V\276.\227\277=\226m\037>Y\360|=~e\240;P\3015\276q\231\206=\317K<<u\333Y>\323\033\r=\250\227_>\372\230\017\276\210\002\306=R\0249\276\300;\263=\206|+>><\335\275\317\317]=I\016\035>\372\336\320\275*s\354\275\317\357=>\001\275@\2760\024I>\026v\240=P\2467\276\241L0\276j\236\005\276p\1772\276\210\021\367\273\367\331I>\360\332\341\275?\031\331\274\300\310\234\275W\317\002\276\227\023\240:\303L\016<\304nW\276\207\265=\274!;\344=\211\010\030>\331\355?>\336h\037\276D\350\006>\333\375\001\275)\367]\276\372\206\357=\243\2139>\007\3663>C\274\306=\216\315\236=\000:9\276\247\377\315\275dn\026\276\240\204\251=\200\306\025>M\005->\022\240(=\335\253\023\276\254\024\021\276\246\205\324=H\3633\276\247)\265=\020\033#>x\014\322\275\353\334\010>R\004\245\275\270g9\276\354\353\007>X)\253=\352\255\231=\022\3240>\005x\177=\247\3121\276\007\335a=\211\232\203<\346h\311=\263\t\006<~\030\364\275\032\331.\276\005\303K\276S\004\275\274\246W.\276\006~\266:y\007<=\247\004`\275\200|5\276\353AB\276\360*\004\274?7Y>\016 \321\275\304U\021>\27160>[\207D>\013\362\352\273\365\014\242<\220\005\362\274#\222\204=\352Ps\275D\320\023>\324>H=\005\260Q>\\\341O>\331\n\026>i\376\033>\245-\211\275\273\006\310\275\366\211\264=\350\360\256\275xo\t\276\276B\332=\354N\251\275\372oB>\227y\003\276\031D+=\375i\264=\366\256.>H\351\035=\010\027)\276\027B\345\274\273\241\210\275{x\377\274\275\221e\276\037\276Z>\200\014]\276\247G\"\275\t@\026>\313\246T\276\351C|\275\276\303\000\276\246\254\266\274H^\006\276$$:>\332\267\003\276\327Y\240\274\333\365 \276\017\366\340=\357\010\"\276d\310F\276vk:\276\201g\347=C\365\211\275#\365J>\330\244!\276K\235\330\275\n\355\245\275Y\261\021><+-\2751I~<\231\010\212\275\020D\305\275q\246\267\275\201/m=\322Fb\275)Kg=\204\262\260=x\374G=\344~\025\276Mm\232\275\315\323\034\276\007\021D\276/\273\351\275\230`\351=\"0\346=\356\036\247\275LaD\274\177\030\017>\374*\264\275\024\345e\276\362\265\021>\244\376\027<h|\252=\030\007\022\276I?\215\275\272\306\321=\334\345\314=\223\234\370\275\232\367\327\274j?\377=\263\202X>\256\021\300\275(\323\016\276Y\030\253:k<$\276\275\241\214\275\316[Y\276\016\264\250=\350e)=0q\010>P\351<>`\265u\2747\032=>h\352\321=\255\255\r>+\265\325\275\305\227c>\204\236\033>\224\021\024>5\355\037\276|{\265=v\357\226\274\246\016\020>`\243!\274\250I2>\327\323d=\352\252\014\276\325 Z\275\212\346\210=&\232\262\275\253\245J\276\221H#\276\274\227F>\241\273\361\274\rj\022>\247\024(\276\202\260\307\275\203\'\030\276B\301\377\275t\341\t=_\212\233=\273\306\353=a\372\206=\35016>\306\346\004\276G\240I\275w\357\354\275F$[\275\2132_\275h\314:>\017\256[\276\206\t\030\276\177>-\276\306\327^>x~\r\276\024m\210=\343\331\353\275\245);=\233\274g\273\204\010\301\274\273\tH>\024vO=[\007#\275\220B\320=\356\002\377=_\322L\276\244h\364\275r\245\263=\313\217\340\274\220$B\276\rI\232\275\203^9\276\345\206X>H\263\007\27622G>\177\330a>FF\266=s\344\372\274\321\330\364\274c\334Z\276\325\\;>M\240S\276\020\034A\275\033h\354\274:\243\275=\027\206^\276\027AM\276\333\322Y>\223\350\006>\247\367\223\275%m\261\275\277b\335\274\236DI\276\236\374\236\274\244\361\006>h2G>\3229J>\315\027)\276\256\270\221\275|\3479\27531\200\275\376\233\313=(\\S\276\250X\\>\350E.>\316y\001=\030\2702\276\217\320\310\275\314\214\242\275\366\324V\275\310\004\374=T\034z=2\254(\276\016\267X\276-\373\001=\367\022\273;%\3316\276\000j\343=d\346m<.=\364=@ ?\276\212\202Y>\rf\216=\255\352\247=!\213\332\275\252\252\340\275V\211\353=\010&\032\275\233\266K\276\232\370,\276\265dd\273\262\357\254\275\363\375\023\276\261@\237=\317+\326\274\203\236\251\274\266\022A>p\245\355\275b!\363\275\332\r_\276\364\216\231\275\030\367\210\275\200g_=\365\224\202\275\205\236\334\275F\314\324\275\370\376B<*\034\017\275\027\315E\276-\261C>\201\317\027\276Q\2124\276\025\316\223=\271U_\276\024\234#\276\002\246\206\275\377\017\037\276\222\207O\275\340\266\215=\026\224C\275\314\234b\276P\210S\276\325M\215\275\031C\321=Q\342K\276T\251\211=w\266A>\177\022*>\373\243.\276S(\260=,\007\366\275\344\361M\276\006\345\346\2738+v=8 \335=\330\034S\276\365\266\030>a\316\352\275\211\217\236=\341n\375=\345p\236=\353Bb>\226\234_\276`0\252\275\240\274R>a\272>>^I\206\275\274\324\026\276\354\231)\276@\n.>E.b>\231\020\010\276\321\027\t>\214z\361\275\017\274\302\274z\375\016>>1Z\275\301\3049\276\205&O>\357&\316\275\\2\027<[\311\220<#\370\010\276\217c\237<\343\372%=\330\252\027>\r4\"\276\021\223\023=y\222N\276\227T\251\275\231t \276\375jT>\203\235N=\202B<>>\260\313\275\270\212\241=_\033w=`\010/\276\026\323W\2764\010\340\275>\302\247\275\370!\032>\271-c>\344#c>b\320E\276t\350D\276\253\255\351\275\214)\021>\205.\260=\350\t\270=\022?\306\275\332_e=\240#e\275Q\251?\274\374\305F>\253\377\317=\331\211\235=\274G\356\275\031 \010\276\022G\375\273N\2140\276\006\250\r\276\341$\n>\022?O=\013d\245\275\267j\017\276\236\270A>\r\022\007>Uy.>\232\0335>\323X(>a\323\307\275\315 N\276\352k\000>)\256E>\216\241.>\231C*\275ZT\037\276\366\246\314=R\304F>\333\344*>\332\226\266<\037\301B\274\034\330\302\274\235\032\002>\025\351\020>N=K>~FA\276\303\345\026\276\255$#<h\0029=*a\026\275+\371\333\273>\256\027\275QDE>8\334y;\207\346\033\2769\265a=\362\271\030>v\343\317=\235\014X\276\330U;\2755D\361\2753\031k=\363-\030>\351\201\317\275h\365$>\270\327\364\275\226\201&\275\260\225\212\275\235\013S>\025\002\313\275J\034\276\275\010rB\276\204\205A>95\253\275\354p\331\275H\262\224=\317\340\226\275\311\330\231<\030\372\261:\3058\027\276*_\274\275R\222\200\274\265\210\234\2747l\003\275^\202X\276\036\243\215\275\222d\030>\n\201\002>\242V5>}\336\276\274&*%>\305N\371=V9\242=\330\274\235=\216\352\240\275n\201\305\275\215\024F\276\215\340\001\276\3556\236\275\010.7\273*][=C\363\005=\005\213_\276b\356\333=\207\000\345=)\302\260=\205\032\273\275x\230\020>\225\334\324=M\206\244\275,\240U=\373^$\276\226\363\311\2750\3614\276-\264\306\274e\352\204\274\'\350\001\276o#\242\273p\264\334\274(b\212\275ox\371=,\314.>^\342\341\274\253\234\016>\267\037\210\275S\222&>\350\373_\276\031\373\321=vHc\276r\003P\276\350l\001\276\376X\033>v9+\276X\270\200<\237\004\344=\325\372\272=cD\370=Wp0\276\344\342\202=C\251>\276\315mQ\276\003\373d>\007\3667>\330\232\231<\200\304\206\275\203\350?\276\314T\021>\014#0\276\320\376L\276\374\273\002=!1\361\275-I\340\271r\177\211<b\010+=9dc\276\035\021\256<\212\312\027=\2153C>\350)\362\275C\231<\276\325\277\350\275\001KJ\276!yG>Yq\312\274\352bS\276\014\256\305=\206\362\373=W\333\036=w\030\244=\021U\312=\'\3641\275\366\342(>\311\276\245\274\204!m=\271|\306=\357m$=\300\022E\2761\372V=A\267\246=\031\261(\276=\227*\276\214?S\276\334m\203<vY\204\275\027\017\023\276\331sa>\202A\316=r\262=<\343]\r\276\323F\273=\030\371\363\275\002\3464=\222\316Z\276p\237_\276\207N\006>f&\320<\204\022&>\354L\317\274N\2560>\207(\"\276m\t7\276\231\3762>\220F)\275\221\366\310\274$\313\025>\373\\\273;cB9\276\236\300\007>\275-;>:hP\276\277(Q\276[Pc=\355\346/>\242x\234\2750|@=\345\240\030>\347~U\276\215\325\337\275\366p\272\275?dD>:\273\300=\213G\035\273%d\315\275.\246\035>FV.\276\220M\002>u`\217=\300\313\317=\010\263\272\275I\016G\275\324\321:\276\235\254\r\276\222\367\034=4\2103\276\364\3354\276\241C\n\276\344H\"\276\251\204\276\271O\234\034>\372c\241\275\005\357\000=V\353\'\2769\"\027\276g\246\353<w\2060\276b9\007>\251\001\t\276\343\316e\276\350|E>\367IK>\360?\245\274\342\377\013>3<\013\276\257\246\376\275\302\344\\\276\361\2023\276\037WD=\261@L\2760\365\243=\216\342\016>\361\024C\276\341\025\016>\262\250\'>\205\371\264=,\302\037\274\347~a\276\245%\006>%ka>:\350\332\275\350\002%\276\270\242\341\275\257\214D>t\371*\276\216\n\255\275\354\2416>.b\271\275\377\310U\275\336\336\357\274S\212S>hd]>\364I,\276<\\\036\276\357\332\022\276v\311\005<\265\345\212\274@\301e>\324n\035\276Y\363\363=\202\353\237\275?\262B>\330j\215\273M)\262\275M\251,>bbz\275\266\343\247\275\333\340\000\2761\210\010\276\217qo<\031\220#>P}V=\0169A>5\303x\275\255\r\354\275U\366\274\275\311]l\272\276V0>\371Mo\272\214K\025\276\347\251z\275\213yQ\276\006\272\255\275\345\212\001=*\355-\275\356\324\014>z\355S=\344\"!\276n5H\276\267\256]\275Vp{=|^\327\274\222wB>\372\010E\276J\026\227=L\n\234< lN\276\331.\205\275\200)\333:\216&\231\274:tV\276\321\242\026>mz\367\275)\363J>O\347\006\276=\275\r>6^\037\275P\014:>\311}\254\274\2648\032\276\335\0340\276\363v\033>*\254\372\2758\207d=\317\315\027>At2\276\206&\021=]\275\036=8\2326\276\257\2611=Ew\326\275Z\372\344=\256\"\253\275!\212\245\274\353\n]\276t\313K\276e\226\017\276\275\357\334\274[\\\246=\231\310\034>\344\004=\276\235\2756\276\320\200L;\331\324\365\275\235\006M\276\003\377\225=\222\257\341<9\320e>\006k\007\276D\273W\275\002\317[>\272\267_\276s\036\205\275\333\010\025\274[\342\202\275V\205\306\275\341[ \276\3301#\274\272D\360\273\tf\200=Z\325\314=\325\304\177<h\302\323=\310uq=\272\200+>\276\226&=8\032;=\220S\257= \273\312\274\253\034\323=\215F\242=t\016\017\276\005M\243\275\366`\027\276x\255\204\275\023\236$\276\261\013d\276\0246.>\'\276\205\275G\t`\276\207W\355=Y\034\346<w\024\326=\245\321&>\232<u=\245D<\276\275\262\002>\003J\203\275J\241\370=\321 a\275L\036&\276\0200[>\2510\007>\341#\373\275\353\217$\275)7G=t\341Z\275\034\244\337=\314\0324<\247\304P>\r\273@\276\376\2374=\326\225\276\274l\021\326=\262\336\013\275\364\256O\2739q:\275\325\324\357\275\200\362!\276\313d?\276\215\000\021\276\344z-\276C9 \276i\234\034\276\035W\033\276\207Te=j\261(\276\374\345\352=\r\344\014\276\032\244\230:`\264\014\276\366k\247\274\375\250@>\254v\273=\036\226I>i\255e>=\017\026\275KJ\260\275q\025^=?\033\375\275\303\335)\275.\005\367\275~6Q>\301\354`>\373\257,\274\021\246\260=j\200\027=\' \220=\353a\031\275[`G>\024V\030>\321\240\233=\217G\251\275\235\236\000\276\374\030\204=\002s\244\275\334\366\276=p]<>\316@><\357Vn\2758\014\354\275,\005 <%PQ\276\251\324:\273\201\204U\276\235X\212=:\250\365\275Y\233\232=\204\305\241=\000\024\n=*\232\240\275\243\315\027\274\255\2572=I\216 \276H\205\220=l\237t\274\352\005\017>\274\022\231=\345Q\030=\375\364\310<v\3071>\031L\037\274\001\345\237\275\244\372.\276`.\245=\027E\201=\037\226C\276z\250&\275\216\224\330\275&6\004>\343\315(>p\371\006>\362\351\n\275\343\215J\276!\314 \275\204\220\001\276\323\365\023\273W\270X>\n\343\233\274]\322\246\2756&b\276a\r>=i\307\004\276\213\275\033\276\354\223\303=\251\036+>\275\034\344\275\353\275\036=\302Z+\276W;9>\370\356+\276\266|\020=\210\320\016>\005\347\036\276\321XQ>\223S0\276\370R\007=2\363\033\276\215\263\024\276\253\034\367\275\262\262r=\360\276-\275\224\206O\275\257\310E\275db\310=\371\n/\274\216\321\027\276\325\333S\276\223p\360\275;\307\001\274\323\207/=@&H>\250\301\037\276 \314\232\275B\233c\276\265I\256=\267\250\233=\253\035\362\273O3\260=\254\253\231\275\240 Y<\211\321\203=W&1\275U\362)\273\257\205Z\274h\276,;O\303\241\275\245\333,\276\307\375\036>\"\271\221\275\361i\022\276\343\r\335=\372\352w=\010\346\201=_\014D\275b\367N\275k|\231=L\324S=\002?(\276\211|\r>A\313\240\275P\311\215<\377\303\003\273x\303`>N\370C=Q?\216\275\246\263S\276\210\227\242\275\253\002\004>\377\016\021\275u \341\273\'\241\366\275\373\227\000\276\203i\002>1\313\301\275\216\347\t\2760\025\246\275\216\360\033=L\250\013>\204\230\367\275t?U\276\232\026!\276\264?`\276\313\3325\276\3469\301=\256\241\">M\367^\276\320k\023>\226\3031>9\2564\276e\263r\275\000\213\024>\373\267\005\276#)\317==1/\276<\177\244\275\004b\215=\001;\030>\206\276\r\276):d>\374\303#>\246\213S>G\220\346<Xw,\276\312\230%\276k\2505\276@\001\211\275\323\367c\273\361Z\016\276\245\257J>\332B\016\275S\003\323\275/\210->\211t-\276\305DX\276\345\257=>\353Q\316\275\nX\321<W\237\r\276l\235p\275\212\205\332=\374\354\237\275\r\356\n\276ClV\276l\234*\274\246e\202=:\207\010>\237\027e\276-\335\306<\301\211\254\275K[\"\276\322\273\307=\335\320 \276\036>T>\313Y\033\276<\n\316=9i\214<T\007\025\276\312\017F\275CT\r\274\355\377Y>\324J >R\204L\276ra\017>\177\276R\275\366%7>F\312\236\274\327\371V\276\r\266\345=\263\210\'>\302\326\267<@\226\200\275nA\024\2764o[\276[\034\376\274E\301\026>\326s\021=\217\324\300\275\233\245\n\276G\351\010\276\027\336\273\275y\022\370\275\336\300\032\276\376X(\276z\251\\>b\323\341\275\010?e\276XJ\226\273}nX\276\241\007>=?\211S\2768\353Z=\371\261[>\327U\r\276\263\270\014=\030\036\027=c\213a>\337\\B>\344\2013>F[C=\330O[\276\344\177G>\327_)>\241\247-\275\211\365\035>\334\210X\275\327e\345<\200\263\305=\177\240Y\276\223?\006\275\373:\037\276\274\3778>3\362R=\211R\034>\350sI<\202\005\271=\366\261\010\276\032_\203\275\353\221K\276\241z5>\266\026\373\274wz\220\275e\247\202\275\336\025\364=\024\223\017\276\037\'\036>\017\221e=2\367H\275\335\035\327=\220\010\025>k\232\301\275\337\354\006>#G\320=\204\340\n\276\001\214$>u\255l\275\224\311J=1\3338>\230\r\231;\022\301S\276\035\224\361=\007Y\035=\233\226\334\275\311\267m\275\010\262\216=\346\261K\273:\247^\2769\017\034=\t_L\276\022\311\017\274&^8>&\324\014\276\026\254e\276;?\231\274\346g2>\264\202\250=\244`G\276\2624\221=\265\351`\274\217{\225\274\360\266\3629oTU>f<\370=\272P\200\275\014CX>k\323\252\275\254\224\220\273\3123\023>\334\357\325=\003\000\370=\2339\233\275c\034\276\275\031\272\352\27435\300=T`P\276\222mv\275yk>\276\244\203\245=\037\313`>wMB=uB\226\2753~\033\276\303\321\020\275\037\005\337=8\276R\276\325M%\276\275be>\265\367\366\274\007\311#\276P\247\312\275n\353\025\275\340\335\265=\375,\327=\277N >\223\024D\276\231\240\254\275\234\215K>\025\3309\276/\002c\276\301\302<>$)\371\275\336xL\276\345\250\273\2752I\247\274\020\327\010>\006\311/=x\0243\276\253y\231\275\253N)\2768QT\275p\220c\274\305\306\006>9\320\020\276l4\025\276\322\216\";*\220P>\312\302\346\275[Dd>\1771\004\275\325-=\276\266\003\202=f\310\244\274*.V\276W\306\020>\344\221\351\274\205*\353\275\207\216x;\024]d>8z+\275U\030\327\275Q\376\323\275\265\375\230=j\247\020\276\334T\006\276\262\236G\276\244c\001>!4\230\275\016\2635\275\331\371W\276\'f]>\217\332Y\276O\0279\276\266\363E;\242\270\006>=\313\216\275W\205\352<1\027e>[\354\030>\300\024\260=V\0239>2\225$>\346\233\371\275\354\236e=\324\343+=\036l:>\t\006S>\330\261P\2769\340\006\276\023\253\033\276\233\376\277=}q\273=d\350G=[\375}\275d\244\346=\r\206\376\272\365\221\003\276jV~=\263\251\024>\215\326\035=\323\254\343\275\313\035\256;\330\377\354\275j\223%\276\232\026\221\275\236|\360\274\215z:>\004I\013>)^\350\275\274\005\036>`\3262=\247\302A=Ea3\275\334\263\031\275E ,\276%\020\022>x>.>V\376\207\274\221\214=\276\260\343\225\274\331,\365=rv\t\275\230\371.\276\365\272\322\275\205\375B<\303\373\351\275\024\363\035>,\t\001\275\331\366\331\275\013\353!>S\340]>\361\373#\276\371\017\357=\\N1>\362\206\005\275l\224\320=\237\2156=\246\231\303=x\261{<\315\247c\276\276\344D=A\214\t=>\204(\276\027\251@\276\267SW\276\325\331\222\275`\0328\276\224\360\037>;\035\031<\214\354d\276#v\345=\245^\324=\027;l\275l\277\375\273\221\005>>K\370\350\275\017H\\>\222\256\022\276\214\3314\275\306\311\r>\032\332D<wK\251=\324\342\224;:}\260=|cD\275\0367\313=\244\037$>qJ%\275\377\2456>\300:\347\275\0071\324\275\2604G\276c\341\034>!o\027>\325\230\r\276c\265\014\275>6\277\272\315\316\222<\\(\367\275Q\336\022>\225.\005>Y\2268\276/\244Y>\313\324\021>\t\370;=Jo \276-\022\374\274\\x]\276\333Y\026\276\340\223\352\275\260\351`>Kxe<\020\350\360\275\375F\004\275\000\220$\276\027\004\266=\364\214c>\022{\031\276RQ\347=x\213\234\275Ne\226\275\001\306r=\251\300\251=\370k\027\273H]\207=\032\2368;\234I\031\275\254\320\216=nyW\275\"Cb\274y+\203=F\373\315\273\344,&>\320\227\335\275Z\243\265\275<|\023=\234\014\033>g\332\226=\017\206\225\275a\316d>e\220*\276\022x\206=}#J>\300\245+\276A9\006>V5\236\275;O\326=\344\237\014>\344\333@>\"\236\026\276}\267 =\270\330g\27547\'\276\224\276#\276Q\270{=\263\252\241=\341\221(\275\010s\266<\014\021>\275I\3146>\364>P\274\201\030\026<?\022\357=Y\271\003\276\226\302\346\275(\3266\276S\340\r\276N|\211\275\316\232\274=\303\030\025>\361\177\002>I\262J>\023`\254<\201(\225\275ms;>\364E\334< \246\355\2755`?>\337\250A>\304\351A>\273\331\022>m\014\010>\237\340K\276!*\306=\200HA\275\t)&\276U\221_>\240#\316\275\0363K> \221\033\276\245\375\020\276\037\305\">\313\326W\274P\212\242=\365\341^\276\372\n\365=\020,o\275\200\377\\\275\370U\221\275\'\272\032\276\014\3451\276YJ\233=\320\0258=\232)\245=\254\211\264<\036l\311<:[\325\274\342\2509>\3427\035\276\342\262J\276t\021\342\275\037\013\327\275\271b\273\274\375#\350=\343\273\201\275\234^\010=\307\362\021>\241m\223=\364N\317=\036v\370\274\316\355\010\276IO\347=:\320\206\275I\262\262\274O\302\236\275\0275\344\274\317\207\r>\367TO\274\365k5\276\232aU=\233j\263\275\342\307J\273\265:8\276V+/>\247\030^>\311~\214=\221\262w=1\300\311;|\205\270\275_\350\016\274t\257N\274_\343\375\275\244\360$\276\224l9\276\334\033*=5ss;\332E\363\275\361\216\010>\020*`\276\016\377\214\275\315\247\245=%r\224=od\030\276\267\306\206\275\330\214\201=\361\016\r<\023q\320=\313v\"\276\204\374>\2769\"\364=\263\223\'\275\331\224\354=o\3370>+\235\253=\243\221M\276\001\377\200\275\003\277;>~\352d=\350a\014\276\375\224\033>\006n\003>\316\210/>\321\367\014>\342L[>\263Iu=\025\373\r\275^E,\276d\242\267=e\256\271\275\035f\352\2754\250\330\275\023\032&>\275\267\236\275\312\205\310\275l\336\252\275;\215Y\275\271\302B>]\336\024>\020\335T\276\022\211\364\273u\177A\276\001\263;\275\337>8>\343l<>\302-\345\275\314!C\275p- >C\212\305\275\327\307\271\275\245DV\276\027\214\037\276b\200 \274]\017h\275\374\246\202;\304[*\275\026\313\001>\206\345\033=xB\030\276\275\005\002=8\254<\275\037gM>\240\313P\275\363\311e\276$\274==m\244M>\203\351<>E\362\006\276\313\260b>\177\267)\276\332[2>\267\341\">?W_\276\367H\235<\013\342\024>G\317\375<S\206\375\275\232s\361\275DJ+<\026h\314<\311^8>\033\226\037=(3\302=\346\201E>D\325Z>\320\2128=\362\030\007>\251\235Q>\256\000\355<\251\337\341\273\324\364\301\274\327\255\343\275r\370\255\274y\335\330<v7C\276\304\253A\276b\306\265\275\021\217x\275\250\'S<\317`K=\032\2666>\217v\276\275\037\260\334\274#\240#=\325\255(\276\233\2567\276533\276\350\016\303=\270\323\366\275\003\305N>\260\330n\275\371\361J\276\210+7=K5)>dq[<)Wa\274\343\243,>\241\037\263\275\323w\302\275=\244\342=7\341\357\274\262\253\312\275\254S.\276\333D\327=\340\3314\276\2401\307=\214%\202=\244\007J>\r\374\037\276\224\243V\276*O[>\320d+\276\351\241\305\275\322U\024>U>+\274nVS\276\013\374\t>4\303Z>p\332\345\275\016sG\2761l^\276<\256G\274\302\302@\276\r\317\332\275\374\023\203\275`\262;>!\206\302=\177UA>.\243\362\273\247\236\202<T\031\"\276;_\343=\222\370P\276\340\2546=\240\000\213=X\027K>\223\205\245<\220m\271=v<q\275v\313G\276G\3043<\355\343\345\275\316\202\365\275\347)V>S\363V\276\311Eu=\204R\205\275\227_X\276&\243\242\2754\276\204\275n#:;\220\247I=\n\225I;m=G\276\235\252+>\221\247&\274\2766\212\275\216U\373\275@\211\330=\244\203\371=\315\243G>\352K[\276H\250\247\275\261\203;\275M\201J\276\276\343!\276\266\225\241\275\n\201\256=\254\037c>\006\237C>\374\244X\276\"\214<>*\263\340\274\223nR\276\341nG\276KC\326;\255\246\224\274\237\037\236\275\345\305\354\275-4\">T\335\036\274O\361\234=\252\304U>F\350e=\356\232S\2760\004B>\272=\257<sE\326\275\357\375\034>dh.>\324\030M<\005\233\002={\343\334<\036y\030=\307\035\200<\265\202$\276!r7={\277<\276\250\224O>\036j3>}C\223=\3148\036\276\212U\235\275\003\256s=\371T\200\275\007\177_\276\367bE\275:\303t\275\005\271U\276@\332\033>\232\342D\276\243\300S>}\3566\2767am=\261\205\367=\363$K>\'d >K\021\022\276\220$R>\323#,=d\366Q>\205\232\233<J\352\323=\245\270b>\226H\210=\240\031\324\275\001B\346\275\271G\363=\353\037\035\276\210\244\033>3\275\030>\341 \200\275\036\362\376\275\343\004I\276\232\306\352\275I\014\037>*\377V\276\202\300G>kMD\275`\312\364\275(\244E\2755\214\031>\374\221s=\256\221\367<\177\2235>\270H/\276w6_\276{]2>\344\344\275\274x\n\025\276j\334\213<1\271_>\020\032\200;\305}G>g\303\021\276\374\016\246=\277Z\364=4\231\021>\270=!\275\347\216i=ym\233=[,N\276c\\;\274\252\030\337\275\006\033*>7\n\\\276\365m\272\275L\232\272=\336:.\276\261\206\303\275\364\207F>]\372E\276\326\256@>\243T*\274\343&\275\275\025g\247\275\345\213O>AM\336\275\327<\345<\312\243\024=O\365 > \2105>)\237Y>\020\277 \2762\333 >4\355E=A\033%>z\275\\>O\253\342\275a\247;\275\257W:\274\211n!=\353\240\031>S\034\364\275 \221o==7\320=\022F;\276\211\3177>K\2717\2764\212\035=\345\003\327\275Nt\212\275\236\2733\276\215\007\032>\352\360\261=~\2737\276`x\227=\313[R=p3\312\275\252\213\230\273/s+\276B\002\207\274\000\225\016\2767^^\276t\016\351=R\317a>b\200\034\276\202\025\333=\036[\036\275\251H\221<\367A\262=s\005Q>\350u#\274?\305\t>\323\261\322=\030\226\017\275\273\317\357\275(\306\013\276\236\006\023\276\3000\016>\014\376\026\276(X&=\305\226\r>)q\354=\017\032\257=\nV\377=\002\031\313;\232\034R>V\"&\276\213\252M;\323\204\r=4\t\023>a\303\004>\255+\322\275h \332;\352MO>C:.>B\216\257<\014Q\033>WI]>\330\3562\274L\377:>]\200\306<\204V\261=$\034@\276\254?a>\377\tU\276P\2511\276i\037\231\274*\202.>A\257]\275*\210\004=\"H\264<X\354V\276\350\264\337\274\3079\372\275\007\260K>\377\376\321\275n7a\276\200{\205=/\203\363\275\362]=>\266\352o\275\301\267\212\275{w\232:OX\326;\036UO>6!\374=\255\363,>\266\376$\274\344~\001>>\226u\275\317\343\373\275\320=\231\274\264g\306\273\257U,>1\214\032>\322\304s=\313|:>\225\231\300=\325\037D\276<6\306\275\356\335U>q\200\336=\"si=(\272Q>\205\024\347\275EvA>\340h\340\275o\320\347\275\002o\346<\260\332d=\371<\367=\336\347\004>6^\303\275{\242I\276\321\356_>Mi<\276\320\233Q<O\013U\276|K4=\223g\275\272\"k\336\2754=\027=\317\304%\276q\350\024>\004\005!;#\343!\276\032\262s\275\021\273U\275\372m\325=?\245\240\274C\372\311=\227\323\000>e\345\267\274\353\365\360=tk\020\276\214\0316\2766\210:>o%n\275\001\245\234\274>kH>y\325r=\303oL\276\3162>>\247\327;>\"t;;t\205\365\275qA\005>U\217\235<s\3005>\256\331\214=\007h\004\276%\246\202\274v\215a>\245rd\276\370\024\324<\361+_>-\\z\275\337\276E=\003j2>rH\226\275\332\177\010>\024\364\320\275\310\326\306\272\215\376;\276\013X\004\274^\000e\275mz7>0\266\026>W\032\337=\333\377\024\276\265\271\330\275\316\370Z\274\242?\333=U\316\335\275\340\3624>\313d\221\275U\370\352\275Q\327\022>1\025G\274\342L\021>\202\331=\276\375|G\276C\245$=\343t@<D\227\025\276\271E\030;\331l\033\276J\256J>\331Y*>\253@$>blO>\272U8>\2022\364=\006x\224<\323\315\t>\202\242\030>x\022x=\312\272\355<\363\373Y\276!,\023=\010\345q\275\243$\205<a\331+=\365\315\224\274\357\226\335\275\356\221_\274\216\315\250=\271V\367<\rB\023:]\016\343=\021\213\364\275-Z+>\25186\276\na\027\276\307N\037\276\353\006]\276\362\252\t\276C\372\242\275\307&\225=u\357\377\275\312\030\r\275\025\250T>\332\315*=Q\262\336\275\260\230\332=\355\213\362=\231\234z\275\026\202\026\276#\325%>\354\341\217=\302\345\314\275\246*J\275\340\002\365\275\214\033D\276x2,>\035\034I\276\212\007\036>\032N_\275~\235\214=\013a\234\275\315\341\372\274+:p=8?$\276pY\272=\007\255q\275?\352\022\275\211[\213\275\246\241d>\340\220*>\345\234\025<`\032\253\2754\323&<\373\212\342\275f\341r=\331\353\032\276}X\007;iz\021>n\007`>\032\355\010\276\305iW>\316\336b\276-\215\033\275\361C6>\217\200\016>\002\236\277\275\205\377\240=M\241\366=\022TC>&\027\035\276\320\364R\276f\3527>d\215U\275\204\377\310\275\361]L\276\206T\224=\3270\307\275\215J\310\275\010yx=P\270\006>\252cy\275\202\334\366\275\366\273$>\004\266(=\357\376c\276\313\\\030\276\315\203\023=p\300\"<\325e\007\275G\351\207\275\227\263\037>\241n\362\274\361?j=c\230\337=P\303\017=M\212\023=\316d\371<\t\307M\276&!]>\026\202\365=|}\036>E\205\337=\017_\352=\023\3676>\244\314U<8Q^\276\037\344\\\275\271\216L\276\222\340h=eRQ>}m\267\275iq8=\004XI<\221\322:>\322\026\227<\277t\'>\354\273Q>\271\355#\275h\177\371=>Q\n>\023IA>\221\2236=\346\370h\275\203&A=|V\347<\220\037\021\274\006JF=\336\257A>jJ\240=\'\203\234\275\214\007\233=\037\360a\276\'\223\331=\343\315\027>\307r\237\275\370\2446>gI\332:vo>>A\254A\276O\331\035\276\305\233\237\275\307\332\010\276a\313\">\035\024C=\226\006*\275x\352\003\276\345t%\276-\351\305<\364\001\004\276\204\006\256=+\027\244<\236\030\343\275\027\274\324<\335\307\003>\344\023\324<\242\351\r>\033\266;\276\317\236\034\276\003];\276\027&\313\275Q\201\256\275\200a)\275\n\324\3168\355i\232=\307@\274\275\350\214\316\275P\323\035>XC\346\275\2003.\275v\177\001<-F\037=\373\376W\276\200mb\276\224b\241\273\313NQ\276Q\204\357=R\023\275\275\344y9>\350\034\033\276\003\021\256=\307\251#\276<\037\276=\303\315,\274\203|\303;_\222b=)\320.\276\031\022r\275Tz\326\275s~\331=\311W\005\276>\r\027\276\341\014\362\275\215%X\276G\006\261<@`\346\275F[\245\274!\367\n<\232aP\275\356S9\276Ix7>y\303\377=\327\301\020>\355%\013\276\3544I>[\267%\276G\207\305=\226O\014\276\334\266c=\305\0361>\247\223\223\274\202%\307\275\007\204S>\031\215\313<)J\017\275,VI>\335\034\345=\234\265\206=h\035\004\276Wc\315\274\327\317>>oj\360\275\341\223\343:t\270\257\275V\220`>\312\206;\274_\323p\275\030w\204;\264\271M\276jf\377=JT\000\276\272\325F\276\347\375\343\273O\300#\275\335\347\006\275\016\"\216=Mj\255=\261&M>\001\231\017\274\344\002c=\257\024O>f\365\"=\312\371\276\275V\240\356\275s\376\204\275\237\346\233=\233^t=c\006\021\274\307&3>g\207A\276\266\336\340\274Y\346\273<\255z >\177~\201\2757\252\206=\031(a>\006\224>>E\330a>\346gJ>\234\277J\275\266\316\243=\010\036\005\276)\367;>cPc=\276\252Q>\006V\n\276#c\347\275lLX\276\231x\017>j\tD>\232\240\310\275\273\215\222\2759,T>\202\nh=V3\233\273\316~\020\276\245\275\301\275\272aV=g\0339\276\216\264\220=G\223\211=\324VF\276\360\035\351\275\340k\026\276=\254)>\343\223\376<\242\374\275\275C*\265\275?k]>\025\262\'=[\342\003\276j\003`\276t\026\276=U\021?\2768\230\317\273\337\374\023>\243.\020=/\337\004=u\335+>|#\234\2757\251\364=,?\'\275\307D\r\276\205\304@>YhX>w\312C\276\344\356\305=g\332F\276\340YS=\242\364\260\275+$D\276\016\022C>\267\345v\2753N9\276\263\177_>ueC\276PqG\276<\345\213==\361\272\275r[\245\275\326\0308\276\252[^=\310e\016\275\3204\017\276\374?>>\027\305\t\275LgU\276vz\025>\312<\262<H\266\353\274\274@\027>\377l,>;k\220=\326a(>\361d7>Y\027\247\275\242\365X>\370I\366<\300\334\r\276\225\253\035\276\304%\340\274Job\276\000\224F\276n\327\277=\274t\016\276\333\272\006\276\302}?>\240\315\005>t\223\n>\200b\326\275A\360u=\273\330\323=\374\020\270=J\0375>\300\213\370=\304n*\275\334Z\231=\361\272-\2761F6>\255$!>\257\332 >H\374\335=\016\246\266=\264{\026>\320W\031>\"L\336<\r\030\007\276\005\315\264\274@\332\245\272\002f\270\275\3323\236=\036z3\276\3407\"\275\224\351\206\275G\254\315\275\365\256W\276Xs\200=L\326\354\275c\262\327=a,!>\360\271\275\275Vk\347\274\252A\004>D\301\004\276\314$\334;\316\312\001\276C\201\201\275\277\311\357:$\305)\275\277\232\335=\317y3\276\332?\356=\221\224)>\340\274\200\275hs@\276\267\275Y>\234\350N>\006\335\020\276\344\241B>\360z\006\276\273\224\344=\215 B>l<o=\227\315P>\tD\003>\330\346\"\276\323/,\276}\206\035\276\275\000A\276M\350M=\224\247R\276\302\251J=%\305\266\275\357\177/\276\361v\323\275Q\023\233\275\000\250\360:\013\324\027\276\266[H\276%\264\025\276\375\263\337\275\242M\021>./\203=;CM\276g#\030\276\355[T\275$\010\034\275*t&\276\335\360S\275}q|\274Y\357S>\376r\256\275>\313\n=\026\035;=\034kF\276aS7\276\352\023\025>\317\3238>\367\027\005=>0\201<|\320=\274\224\3532>\323\002\n\276!\216\315=\365\265\305\275\233 \245\275j\322\006\276\363\351\246<\312hC\276e\2362=\350\256\177\275\266\201&>\210C3=i\232\242\273\322\262!>C\241V>\260\226\304<\357\333\007=\367^1\275\013\345\316\275?\347\377\275\377\322\177\2758\232\351\274S\274u\275\343zD>\303\334T>\037\304{\275\247\371\003=\274\353,\276\212\207\367=\322\270!\276z?d\276\333\265G>:\346\247\275\034\235\037>\357\203\313=V\213\253\275\177I\376\274U32\275\257\025\304<!\016[\276k\'+=~\242\224\273\333\001\254\275\364\036\330\275\035\341\005\275%-Y\276_\206,>\331HL=M09\276\036\354\213\275\027\216\351\274\250`\023>\311\311/<\242j\314=1\341\236\275\314\035M\275\235\027\014>\353\361\275<:\366\230=J; \275\242\024_>(\360M>%\245\021>4\344\355\275\001\342?=\363\302\004\276\005\357\357=x\352\373=\272\370/>\263U,>\003vW\276Z\\0\274\375m8>\317PM>#4\020\276\260Q\013=\231N\313\275Z\021\204<)\037\226<\210\302\254=\354\214\001\276\312\350\373\275z\010\274\275\272\271S>t$I>\240t\257\275\032\310\013>\005\'Y>\321\317\341<\312\242e\275K\366\343\275}\366\027;D#C>\344\302\232=\276\223\031>\347\236/\2751\376K>\250D\\\27681\241\273\377\276\262=\314K\367\275\277\315\033>\213 |<\353JV=\362\323Q=\'\360\322<\363\025\007\275\232j\346=:NH>\205\021\375\275q\312F>\215\025x\274AW\n\276^\177\001\276\374\374W>\235\r\027=\001\350/\275\007\261\\>\004\251\347\275\3673\267\273\t\243*\276\340\300w\275\272+\252\274\217\025\207\275\215=\000;\243\224Y\276\315\024\243=n\016\022>m\311\002>\354Uq=\210fK>%\231\r=\364\'\376\275\024\301\246=\242\3470=\025\236~=T\225\037>*\255`>}1\266=\375\215\030>\245\320\250\275\2774C=2\330\225\275\257\177\217\275\023\305\315\2750aN\276H\376O\275\364\254\317\275K\031\321=\032\256S>\300*1>\265\217\321=\360C\272;\276h+\276\014t\005\275$\342I>\272\310\364\275\353\310\017>\017q\217=hI9\276\272y\242\274R\304A>v\345\214=\244LG\275\005L\321\275\315\331\202=\215\252\214\2758}\321=G\300\234=\210\271o=\230\312\227\275\2551\257\272\014\364\252\275\364\320\037\276Tz2\276D\332\266=\217\336=\276\377\271w=\306\361\177;\256\314\363=\335\255\335\275\333e>>.\374d\276\245A\275=\322*\016\275\027\344{\275v\323->\020R\306=\212>M\276>/g=\345\207\036>\030\347a>\303ja\276\033\347\r>u\300\t>f\371\214\275-\357L\274)\310K>"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
