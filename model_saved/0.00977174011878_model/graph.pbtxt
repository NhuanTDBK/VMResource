node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\265e\360=9\210\013\276\363\241\362\275z\226\267=\220b\030>\213\240\221\275?\367\356=\026VR\274\02171=9\333\263=/\016)=\317 \356\275\212\317\036>\037\366!=\205\351\020\276J<\032=\204NQ\275\314\306\247=e\021\371\275\023\230\256;d\000#=G3\333=\244\253\366\275\003\207\204\275\3001\010\276a\241U=\\2\257\275\364\247\277;6\333\340<r\345u\274.U\223=\201\377\024>\237\331\301\275\007\025\217=\251V\266=\321\237f<z\222\324=\230\342\027\276\304b\314<0=\302<j\333\201<\351\331\363=.H\261=\273L[\275Y(\234=\227\r\364=.f,=q\246>=nv\301\274\240\304\005\2769j\246\274\230\210\344\274\264\231\361\275\264\031\010>r\307\001>\317\223`=)\231g=\256s\327=\3019\262;\233\263n\274\367\246\360\274\201Kd==\364\346\274\014\267\007>\tt\025>k\004\005\275Z\377\357\275l\225\257\274\234\300\036\275\tdd\275E\227\210\274\221\027\026>`{\337=\213\000Y\275\260C\320\2759\277\270<F\221\002\276\352\035*=3r)=\266\255{=\265\007\004\275\033\273\022\275\275+\337\275\307\363\027=h\033\353=,gb=\\\207\204\275\353\003\007\274\016u\363=\371\253U\275\375d\233\275\234<\032>-\026\311\275\341I\026>i\030\350\275%\235\036>\352\217\034\276\334yF=\327$\035\276\311Z\014=!\237\221\275\241\325(<\235<\263=^\254\266=%\000\222=}L6\273y\370\027\276\304\274\330\275_\001\017>m\337\212\275\237-\007=\2407\261=e\004\014\276\255\347\257<^\332\270=\210:+\275;\027\255\275N\352\311<\240)\031\276\021\376\222=\246.\354=\2638\032\2765Mx=\332\003\t\276\017\326\300=\263F#\274\337\334\246=\307F\342\275\2066\235=!\205\034\275\177\205\306\27541\334\275Du\315\275\032\355\377\275Y\376\031\276\221V\314=:Z\350\275k\264\004>\237B\320=\3267K=9)r\275\300\030\335\273\216\034\024>j\203\352\275T\353\010\276\3137\365\274\' \221\275;\377\034\276\343\202\265=Y&\031>\255\207\363<4\261\003\276dn\032>t\320\310=\224\t\336<\264n\360<\277-{\275\324 \227\274[}\322\275\237\304\347=\322\376\217=\037\005\t>\315\215\023>\245\\\005>h\347\000\275g\367\265<\']\311\275\230\372{=\014\276\311\275\215\345\371<\023~\r\276V~\357\275\335\214\330<\373q\353\274\226\325\255\274c\317\230=\250\006f=\302\343\016>\263\270\221\275\264\315\353=,\342S\275\3706\364=\002\264J<1\034\226\275U\303X\275\311\266G=\350\307\030\276-+>\274w\022\223<\221\242b\274\272-\360\274z+T\273\320\246\257\273\233T\266\274\3136~\275\224-\025\276(\366\217:<\275\"=\210\350\223\275\330\343\224<\234Kz<\240\t[=\377j+=\250n\303=\3617\230\271\206\273\255\275\037\276\243=\024c\216=\020\245\230=L-\206=,\255\n>v\307\344=\306\303\367=\037\313\253\275K\030\026\276G\273R=^Mx=\311\223\300\275\027\213\037\275e\014\273=\rw\320\275\320`\210=\202S\332\274\025\316\344\275~\375$\275\267\226\227=c$\024\276+\324\366=WY\326\275M*\264=\266\212\033\276po2=\340\032\324\275H\210\005\275\376G_\275\266LF=|\375\004<x\223|=\274\341\350=\263\335\032\276\305\207\213<\220\371\016>\r\216\035\276\t\006\230\273\347\344\357\275\251\246B\275\242y\261\274E\241z\275\311\027\023>y\206\234\274\242\330\023=\330\335\254\273mm\273=L\360\030>|\312\371=\264\310\314\272\205\351w\273\027\327\353=\352\352>=\013l\325\273\340\306\270=\231\345h=\320X\201;\177\247\354\275}\276\t\276{\225\342\275\240h\030\276\326\366\360=\375t\306<\225`\026=\263\022\307\275j~\375<\302\340\362<\032U\247=\324M\320\274\343\035\264\275?\341\035=\274\335\212\275k\243\305=\032\022\315\275\351O\306=\337\354\315\275\231+\272=\205\213\215=\263T\327\275L\032\006\276\'@\360=\332\3406\274\233\364\t\276\025\034\205=\327\243\355=\233\231\n<\')\344\275\272\275\221\275\260T\030>.\\\226\2753X\030\276\373&\342\275\224\262\265\275\017!\300=\217\354$<\006\010\275=X7\032=\333\324\022>\260;\244\275\341\"\222;v\"\347<\241w\030>\267\034h=\311Z\333=\351\340\344\275\377*\327\275\226\262\002\276\217\022\226\275w4\032\276\267|\024>\223IS\275\334\246\217=D\251\016=+\277\225=\273a\031\275\202\204\034\276\t\275\224\275\335L\031>\235d\272\275\251\253\007=\251!s=\307\023\007>\303V\244\275\2569\254\275\n\203\033>\256)\256=9-\231\275\321\332\216;\302x\352\275\211#\000\2754\206P< \274\363=$\005\274\275\035\241\377\275`\361\247\275W\254\023>\333\343O;&O\266<\226p\277\273\236\244<=*\247[\275[\266\023<\236\030T\275\211\033\361<\223\r\006>\2149\277\275TL\320\275F!\246\273\232m\242=>\353\335=%\337\024\276\277\225v;\306Q\020>(k\307=\206\023\355=\271\325\t\275G\240\002=\036B\026\2763b\024\276yA\024>\302\242D<X\317<\275\215\017\232\275*\245\027\276yR\311\275\304\035\265\273\177\371\252=\261YA=\036\244K\275\251\326\264=\'\341\255\275\364\211\277=t~\203=@\r\367\275\260A\225\275\255\315\010>\226\021^\275\357}\251=\237\375 <\357\224\276=\210\005\217\274\316E\223\2756\333\343\275@^\250=ZZ\327\275\334Cg\275\200\353\231=\321P\226=\217\301\352\275\222\276\202=\353^c=\024\366\003<\243\177\325<\214g\233\274\327h\t>\301\330\033\276\321\027\355\275\220\353\007\276D3\010\276\307\242\035<L\321\'\275\346\221\327\274\232\215\374<K\336\n\2762y\010\276F\344\352=\252\371P\275\247\237\312=\262(\303=\346\346\271\275/\375d=%\267\316\274\267\361\002>\365\250\027\275d\360S=j\312\343;\310%\327;N\037\303=)\027c=\007\034\215<\036,\241\275;?\273\274\002)\014>\'\275\003\276\253\241\204\275\033x\326=\275\354\014\276\340\355Q=\366\264\020>x/\252\275\304\013\222\275x\371\377=\316@/\275\370;\364=\006\353\'\275}\r\272\275o\360\005\276T\335\013<\252\035\355=\362*J=\360\305\372\274k\213\221=\373\332\030\276\266<\301\275Ax\262=\361\342\327=\003\366\330\275\263\237\n>.!\034<\373\022\r\276:\221\370\275\375c\323\275\246\313\355=\361\006\244=\214\315\372\275\217\316j;O\306\354\274\255\300%=\235\222\036\2761\255\243\274\006~\206=[\230\t>\317\246\364=\226\333\010\275\311+\t>^\220\236\275\320!\223\275\322\375\270=\306\024+\275\246\025r\274\206\023\337=}\351\037\275s\215\201\275`o\005>\231\244\216=\374\215\210\274\215,\026>\211#6\275\207N\241=Z\250\340\274\301\353\373=M\025\275\275\001-\370\275\243\340\346<\340\230D=X\215?\275\300l1=t\365\224\274\231\300\202\274\316\030\010\276\'0\225<OL#<\363p\000>\020\304+<\341\374\236\275\367\274R;\370t\024\275\326\240\003>-\204\010\276\200\206\372\275\211\242\230\275\007z\003>\3569\325\272zR\333\275\252@G\274\255\201a\2759\016\271\2749\225\004>\226\356\023>9$\205\274\372\014\325:\354)\014\276\222\034g\275\315\"\033\276\222\243\330\275\317\374\237=\256\343\017\275\327^\022>z\204\244<\307\031\360\275$\344\307=V\367\346=\350;\337\275\02082=J\273\312\275\034M\031>\240mI=\310\2304\275\365\275\337=\300\023\006\276\274\345\355\274\336\205\323\275\346M\320\275\017\265\351=\370\022\221=\"\332\211=\342\207\013>\244h\032>n]\020\275D\357\255\275!\311\r\276\264<\004>\311*\247=\276\256\267<\r\213\n>\264\215\t>\030\016\257=E\333G\274\033\202)\275\003\2205\275>\005o;@\202\004>.M\224\275aW\273\275\320\312\n\2768`\223=g\242\222\275[P\262\275\267\n\n\276C\356\270<\201\322b\274\021\325\034\276\201\323\235=8\227\002\276w\022\376=\021\017\232=\031I\200<\007C{;\367\021\n=\331\251\005\276E\212\267=\371M\322\274\"\016\002\276-T\247=\3211\022=J\355\336\274i\303\010>\"#\363\275Oo\220\2758\271\321=m\317\006\276m\177\224\275\026\227\\=\262\177\247<\006\243\340=O\206Y\275o\225b=O\250\244\274\016L\317\275\236\001\014>\n\217\344=OF\014\276j\325\r>\315F\031\275G\007[\275\\\205%\2732\214\020>XV\032>\320\005\332\274\007i\317\274q1\r>\231\231\306\275\357\320\005>\374\3057=\001y\362<\264\225\346\275\246`\213=\031\314_=A\\\364=\333\351\250\2753\361\242=\263+\313\275\334\005\007>\237\276\354=p\237%=\316\346\254\275\220\340\206= \247\027>\377uz=\232LP<\0225\346\275\264\334\312=\231\262K\275m\006a\275\023\305\321\274Z\307\366\275\266\235\030\275\373p\256\274a\035\360\275\017\266\375\275\235\313\363;[>d\274\010_\250\275f\205\270\274H\206\342=V-\030>\254?T=<\225\326=.\362\347=\216\322\304=\270\324\316\275\237\317\005>\024[O\275\003\201.=g_\016\276\026\037\017\271\275\315\200\275\226\n\006\276\205\317\332=\212IO=\265H\021\276\271\036\322\275\025x\006\276\253c\\\275q\035\004>D\251\023>\262\005\035\276\240\010\256\275&+\340\273\251\004\317<\310i\021\276\002\247m=V\346\355\275wH\357\275\337\277\344;\257\2049=\210\330\316<\375*\243=&E\036\276Z\r\035=\354D\324=\266\207\016>\010\222\217=\221\270\342\275)\376\026=\2502\344=\371\346\317<\312\367\302\275\203?\233\275\344\005\004>\210r\321=6\013D\275\307\357\305\275\374\036\230\275\305|\214<c\300\360\275\037(;\275\330\377_= \377\374=\327\362\001\275\370\324\363=\361\373}=\003\361\216=\226\266m\275|\262\035=\252\220\201=\260tS\274\246\361\024>\272\324\267\274k\223\032\276Z\200.=\342\311\234=R\030}\274M\326\374\275\227\330\016>\366\321\032\276yS\223\275\223\2270=6?\033>\032L\215\275\370G\204\273#Ju<\270\237\335<\237$\253:\374_\022>\3103\205\275qXT\274\227\2623=\321\224\227\275\257&\364\274O\304\310=2\225\253\275\360Q\267=V\221`<b\340\036>\n\204p=\1774\037>\251\353<\275\256\002\025>mjW\274\250 \227<y4\031>g\200\234\274\031\320+\275\354\243\036>\227}?\275!o\366=m\211E\275XT\234=\244\252}\275\205\273\035\2764\377n\275\340\3030=\226\024\271:\224B\n>j\\\341\275*\254\231<\033\276\020\276A,\007>\275|\010>\010j\023=\026\366\317=\321o\221\272\224\'\246\275\222\360\204=hr\024>\002X =\275\211g=\306\354\303<$\247\257=\213\314\013>\377\343\000>\262\366Y\273\241!/\275\220\231\000>\360 \026\275\257\246\244=Yf\004\276\356!\366=\\\275\320=\375\214\001\276l\r\213\274\336U\026;9\342!\275\235\365\031>P\356\266\275{\216\362\275\232\253\334=\246}\n\276\357\305\324=\221X\250<\030\0037=\211L\300==\223J=\225\330\010>}m\023>\335\206\371=\262\366I:\003\361R\275\373\341\000\276;\010\225=\372>\016\276\211\334h\275\303p\266=\032\330\311=\225\235 \275\341\254@\275\223?\024\276J\022\207\275\276(\207=\233\026^=n\351\346<Ey\021>\016\256\277<\351\310\014\276\020\211\255\275\303h\317=\335\227\312=\nx\301\275\217\031F\274q_\350=\214\227\256\275f\330\341=\224\036\023\276H\026\014\276\231\242\266\275t\304\353\274{*\017>Oum<%\274\204\275\227\315\241=\233x\376\275B\344\272\275\252\237\341:\tX\361=\013\241\033>\"\230\323\275*{\225\275\264a\205=\304\370\347=I\020\025>\305_\205\273=\335\034\276d.\207=\210^O\274\314}\031\276{G\275=2M\037\275\234\233\234<\204\341\024>tj\202\275>5Y=\232\344\271<G\227\213=!&\005\275:5\275=\037\010\240\274^\025\210;\204\240\232;\240\3070=s\355\002\275\316.\006>\377\007&=\244y\260=\005\202\035>;\234\324=Q\273\005>\232}\224=\275y.\275.\374\022\276U\212\214=\203G\021\276~\344\210\272Ag\272=\250\222\374\275;\310\034\276\312i\255=o\274\006>Z\221)\275\225\373\207\275\032U~<$\231c=S\247\254\274 \360\365=\336\317\366\275t\261\024>[\322\354\275\267\275\004>H\312\035\276\327\237\003\276Y\351\364=\206\272\356\275\226\026\245\275\363\234\020\276\r\336\247\273\177\025\001=\341m\t\276%\343\236\275\000\032\026>\300\367\255\274\317\004\014>\017H\203=\024\226\325\275\321\002\371=\216\377\010\276\021\314\004>\'\3450\273D\320\262=\352\342\013>0\266\007>A\222\034>#\222\310\275-\014\013>\247\233\004>\357\271\202=\343\013\014\276\267\334\003=I<\023\273:T\033>\203\323\271=\023\220\361\275+\304,<\342\333\224\275\212\327\335=\216\362\341\274\307\251f=\257\360\266<v\362\034>\2335:<\273|\342\275Uu\016\276\322\364\243=\271\023O=\231\365\367\275\201\376\024=\234\213\013>=[\026\276~1\016>\247\024\004\276\376\271\374=$\315\337=N\273\005\276\n\2124\273\221\017\007\275a\003\246\275\323Ez<\035\261\320<\377B\017\276t\035\253\275\204\013\000\276\246\341\017\276I\311F\275\201\332,=yzW9KX\252<m\354u\275\375\2031;\340\333\206<?\353\304=\213\307R\275T\007\017>\230\036\001>.$\336\275\013\2611<\364\364\316\275\3347\031>j\252\302=\261a\216=Ua\t\276\267\351\023>\\\307\325=\372k\307<\247%\\=\023\311\336;\310\323\027\276.\345\245=D\243\214=\0216\037>\t\267\002=\236\317\n>\365\340\356\275\216\273\014\276\034O\014>\275\210\027\276\025\336\312\274\360\013\251=\306\372\001\276\n\242\020>|\306\257\275\345N\346=\204\037\032>\302M\252=\214\262J=\n\206\035\276/\357K=\327\241\010\276C\003\213=\315N\016>q#&\275)9\010>\364\037\354\275\201\352\303=\024H\261<\274v\303=\246\356\013>\242\345\370=\275Cf\274Q\362\256=\231\367~<y\023\023=\317\337\317\275p\201\301\275\003K<\275\277P\r>\246\206\237=\305\317y=(T\321\275d/\203\274\\\346\327=I\237\002\276d\353\025\275\004\353\352\275K\232\244\2740\277\332\275^F\314\275k\221X=j\006\266\275\364\224\032\275,\005x=\037\301T=\267\274?\275\0051\275\274\304\272C=\335\211J\275]s\271<\234\325s\275\355y\362\275^\342(\275 \343\220\275\277\021\323<b\277\210=\222\251\340=\242bJ=d\374\002>\334\270A<`\036\023\276\3339\242\275\345\313\222=1\0321\275\322|\357\275\20410=\242\303\260=\321\307\206=*\330\000<*\336\241=\252Y\217<\270\204\276\275P/\221={e\027=)\321\360\273\350^\315\275\005\223%\275\327\031\273=r`\004\276YS\264\275\242\374d=\255\252\005\276\246\276\312=\374l\t\276|*\n\276\311\201\213\275\236\334\324=,\251A\275+\201\327\275;-\322<\037\010\035=.z\3219!T\036>\332\371i\275\273T\222\275ep\311\275~\235\313\275\211\235R\275r>\354=\367\336\261\274n\t8=\257m\035\276\361uM;&\230=\2750\024\014\276jf\315=\254\247\033\276f\020\212=\321>\001>\361\322\200=>+]=\002\270\315\275\026\267\274=\233\021\270=D\020\034\274?\233\272=&S\241<hA\243<\342\354\340=m\0309\275\030.\312=\304\016\301\275\3271\244<\246^\033\276\313W\257=\343\225 <f\214\373=\221\304\026>x?\207=\331t|<\226\333\234=\204\344\030>\005\315\206\275\337\233\207\275\2007\337<A\367\227<5\207\007\276\234\242\201\273\253.?<1B\201<[2\005=\230\243\267\275\003+\360\275u\300\323\275`f\022;\351\261\356\274v\022\025\276d\233\000=\221l\020\276{Q^\275\316\202\302\274\363\330\340=\364n\363\274\020N\324\275\251\312\260;\010M\030\276\237\030\003\276\262^T\275\310\375\203=\316K\010\276\343\031\004\275=C\035>GG\253=\235T\034>\203Ci:\321=\364=@\323\336=Gp\311=\316+\367\275\260\006\352=\005\303\r\276\261@\332\273S\025\027\276q\320\364\275[xm=Tk\271=f\317\355\275U\250\357\275\240i\200=\'Jl\275\336\304\025\276\314\234\013\274\340\241\357=\317@Z\274&K\005\276&\200\253<4S\255=A9\003>\242\005\365\275\177\344\372\275Jn\031>\225F\264\275n\301f=\224-N=>\233\031>\276\271\023>\252\315\025>\002\316\214\275\275\263^=)\300\000>i\264\t\276\324X\255=\321J\375\275\3079\273;9\250\325\274\207\350\021\276\370$;<\316@\033=q\203a=\017\204\266\275_\326\232\2752dT\275J\033\r\276\377\351\346\274\032\310\224\2757\251\326\275\354H\204<\356\271\364==\247\007\273V\326T\275K8\205=\226S\236=A\306\252=s\245\344=\306\276x\275Du[\274b\2632=\254\024\313=\270[\356=R\363\007>\003S*=\332<\305\275\340z5\274\200K\211=>4X\275\254\320\265=\303/\232\275#\024Y\275M\232\n\276\036\304\004>\031z\n>U\"\002\276\240@\017\276\354\375\t\276\322\240\200\275\305\323\020\276\344\267-\274\311z\017\276|\320\016>s[\200=\337\022\201\275%\247\201\275,>\234\275*\266a\275L\313L\2755}\310\275\256\302\207=\000\223\342=;K\267=@\367\276\275\024Q\034>G9+\275t\342\025\276\202\026\236=[\266\023\276\244]\376=\206?\021\276\376\222\010\276\216\274\345\275\241\267\226\275\335g\025>\205{\377\275%\"\337\275R\n\363\275\212\001z\272\225\\\024>\357\224\230\275\017\217\001>\235\267y=(\246\324=\334\343\365\275\3242d=\276\221\323\275\036v\037\276\033\223\276=\2573q\275\341\272\331=SH\276\275\026\204\036>I\333\202\275a\305!=\3763\r>\211kw<\345\320\032=\216\033\377=\025\216%=H\310\330\275g\004[\275#i\211=\340\375\002\276\207D\t\276\177T\256=\361\351\346\275\024C\231=\357P\376=\251\376\312\275\241E\314\275\341\203N\275\255i\3609\027\275\307=\317w\377\275\220\271\226;?\246\311=\366\266\013\276Im\n\276\352-U\275\317/\021\276\321A\r\275q\350\217\274*\220\013\276\354\300\242\275P\013g=x\262\355=\315\300\006\276`\271\357\275\013P\024>\222\027\027>\2300-\275\2026\223=\324\326h=\207\374\342\275\204\354o\2753\020\336=\004J\244\275\260e\021>\214\177\r>\204.W\275\024\246\213<\311\375\007\276;\177\006\276;y\202\275\004\360\302\275\362-j=bi\010\276\r\347\245=\271\022\021\276\002\367\223=m\243\032\276\366+~\274e\374\n=\341\306n=Z2J\275\241e\020>\344\376p=\014\021\232=P\267J\273L\021\223\275r\345\311=f\215\023\276,|-=C\037\376=(w)\274e\217\261=\'\260o=F\'p=\323\320\004\276\365\325\022\276\207S\246\275\221v\007>\240\005\253=UL\313<\206)\203\275\315)\364;\366L\330=\376\322\315\275\371\230\033>*S\375\274>\236\215\275\031\256\242;\216!\336=\007\200\022>H\215\332=\253\324\027=\206T\005\276\345\020\310=_%\371=\025\222\342\275\201D\321\275\004\321\013\275\343\244\003>\226)r=\360\361\007>A\213\023=\345\335=\275i\322\311\275/\266\354=L\017\260\275Y\331\037=\352\273\273=k\272\036\276\242\005\010=o\211\310\274L;\034>\325\343\033\276*M\366\275\315\'@\275b\\\036>\235\241\325=\223\256\232\273;\357\256\275\374\013\367\275\302\014\032>2\017\372\275\234\361\364=\345)\307\275LB\260=\2670\254\275\245\035\177<\013\315\030>\363!\260\275\363\333\030>\333\273\256<\331\366\014\276\035\361u=\002d\345=\272\000X=)>V<K<\257=\300\344\t>\202j:=Y\237\317\274\337\021`\275\364\004\327=\024P\303=8\357X=WIx\274=Mb=\266\376\223=,\201l=\223\273\002\276H\367J\275\006\317\255=\212\327\023\275~C\026\275\366Io\274\331-\346=)n\230<\211\351\267\275\321\347\031\276n\200g\275U\004T\275\323\253[=8\212\376\275\326\251k<\366OX\275\252\352\021\276\022\001\317\274\231&\016\275B\305)\275\243\\\270=\031\243\247<j\242\257\275\210fR=\302\252\213\274\017\'\232=`\241\210<\032`\303;\370\377B=\233\177+=T\305I=\240\234\325\274<\251\322\275\337\006\032>M\311\220=\335\243\317=\370r\024\276;\341\301\275\361;\334\275\340\010\023=\250\203\205=\342\350\020=\234\207\022>3\264\342=\245\340\324\275\304\023\231<\\4\212=[\353f\274\305\343t\275}\231e=\377\253\017\276,_\013\276\336j\351=\254\202,\275\331\034\325=\210\363\351\275\206\304\232\274\277\376\261=\\\343\352\274\372\004\372=\352\377\001>}L\022=5U\016>\233P\340=\024\270\006>\262-\330\275\215\"B\275]\230\201\274\212B\006\275\234\237\006\275\305\021\313\274\031\345\341=`\341\306\274\264\260\346\275\002\337.\275\275<0\275\323B\001>b\302\005>\256\001\001\275\023\327\340=\017\207\225=\215\230\341=!\266\027=\270A\000\2762H\005\276\177yL=\000\333\224=\000\033\352<\242\256\255\275F\367\222=X\276\240\275q{Q=s\r\371\275\262\010\342\275\343\030\364=\273\224\317\275\033\305\222\275\241\260\344=\353$\232\274\204\361\261=\241\032\023=0\022C=\r\275\"=\217\301\024=\332$\031>\347\336\243=\341\270\374\275\004\353\032\276{Gw=d\270T\275\273X\024\276\332\000\221=\227\224\343\275\255\252$\275\260\301\345\275R\374\r\276X\265\233=\232z\022\275/\350\336\274;\\\205=\241!\010\276\035V\031\275\005\305\300\275*\227\021\275\352P\014>\360k\236\274\253\n\273\275\237\333\000\275q\327\336=\233\215\025\276\025\312I=\300 ==\264\026\343\274B\216\007=\\\246\022=\245\360\200\275\230z\202=\214\277\025>\305(\000>\262\236\250;\302\230\307\275\221\350\241\275gS\240\2750@\021\276\222cL=\017\226\035>\203\273\026\276s\367\357\275\301O\014>\356V%=|4\277=\213{8:Rpk\275P\265\212=\340P\265=8\273\260\275z\366\022\2769G\252\274u\332I=rm\262=K\264\023=^\025\361=\270j#\275\342\314K\274\344\340\030>d\304\240=\264p\014\276E\007\352\275\362Z\264=\307;/\275\315\017\022\276y>\373=\306\233\024=\353i\022\275\242\001\033>n[p\275}j\244\275\371H\241\275\225\234\355\275\260\300\006\276!\204\031\276\341\303\010\276/\323\013> \331l=\247\210Y;`\223\001\276\002s{\274\010\326\r>R\'\230<\177\214i=\343dB=8\365\333\275#\001\203=\205\313~=Q\336Q<\226\332M=\373]\364=S\341\256<\007(\322\275\023#\335<\304n\207<c\375d=\346^\303\275N\327\371=U\314\216=\037\224\300=\306\235\363<H\r\004\275\353&r=\'\250\021\276\r\357v\274%.\261=\336W\363;\342\267\276\275s\320\324<x\265\206\2747\324\007\276\236/\222=\247\200\032>\222g#\275T\257\235=l\"\303\275\266H\200\275Q\020\242\275m\371\t\276\'\373\306\275=\025\324=\274\332\023\276\266\014(\275\200\257\322\275\252\313\355\275\234\244\367=\013w\363=G\272\031> VU\275y\226\340\275\327\263\246=\262<\004\275gz\037>\216]\233\273\037\242\002>\376\276\305<\245\233\320\271\034\311\321=\333\263\022>\200H\265\275\342(\244\275SDr<\231L\010\276 \245\300\274\036,\223\275\240\224\262\274\014\030\222\275\311\n\331<\336\217\032\275\020\005\365\274F\3470\275\030\322\013>\000\010\022>\313^\311\275\351\022`\275\261\317\021>\035\007\216=Or\217=\366J\016\276g\347c\275\n\222\316;]\004\020>\"\346\001>s\t\251\275\246W\034\276\034\221\375\274\317\022\306\275nT<\275\325\341 \2759\306\003\276\314\323R;~\361\024>\333b\006>\301\027O=m\332\263\274<\352\222=\333#\004>\307 w=v>\010>G\365{=\225\227\013>\314\260\226=]\374\202=\372&w=\273\224:<\242!j=\241\007\025>\376,\257=\240\224\010\276\177\342{\275\237\253\016>\320\245\375;\005\3648\275\024F\271=x\311?\275\030+\316=\332az\275u\023\331=L\271\216<c\360\030>\035\035\214=\246\311\000\276\266\330\002\276\007k\315=\343+\023>f\2032=\250D\343=S\253Z=\233\302\344=A(\024>\355~e\275\366\212\317=\r7\316=\341\310\037<86\t\276\203w\032>\010\304\307\275\213\241\020\275V:\3669x\320\202\275\035\214\233\275\300\325\213\274\257\231\255=\336t\300=vG\335\274\2044\211=\201,\222\274\"o\033>\336\372\226\275@\271\260\274%o\315\275w\242\230=\235r_\275\314C8\275&\331\026>\360\013\327\275q\261\247\274V\276\025\276B\323\227\275Q)\333=\242%:\275\021\201\214=\226\353\340=\025\211\206<\250X\272=\212\312\313\274\241r\236\274C\231\036=\032\200\204\275\375\035\300=U%\313\274\374\245\023>\0309t\275\305c\035<\367\220\002>\215J\260\275\310\254\222\275j\177\037\276\261\340*\275\320\213\201\275\264\263\020\276,t\024=\203\333\326=@2\026\276_\020\306=\373\237\027\275\232\317\266\275\263\364\226<\"i\037>d\237\026\276\241\342\351\272 \375\235\275X\365\312\275\005\224\035>\274-\025\276\227s\347\275\304\267\320\274\352\205\225\275g\367W=N1\323\274\2172K\275(Y\313<\007\264\027>%v\253=\274J\027>FJ\256=\024<\321\2758\256\017>\2660\210\273\204E\013\2764*\321\275\204P\267\275\005\312\003>\236\243\360\274\345(\371<\034\236\343=nE\245=\035\212\360\274\320)\022\275z\300\375\275`\317e\275)\200\261\275\255\005$\275F\267\322\275A\036\246\275\366\207\007\275\312\261\177<\203\205\243\2757\247\205=\033\227\250\274\177<J=\244\231\002\276-FV\275\034\005\030=rqp=\331j\010>\313\224\276\274m\371\022>\037U\267\275@\024\371<$\350\025<\256g\022\275\342\274Y=\275|\375=\224+\344=\225\'\244<\232|\'=\232X\224=\007r?=K)\365<\351\020\035\272?\332\330<\301\354\032=[\227\366\275\321p\037\274\026e\352\274\350\020\326\275\206\360T=u^\352\274\360\3570\275\206\377\362<.\030\332=\360\234u\275\271\024\316\275\316\247h=\344j\327<9\351\346;e\364S\275\270\027\345\275\347 \332\275G\252\035\276a\225\313\275v\3447\275y%\345;G\243\261=\257\247\n\276\265\302\243=\241A\033>#\366\374\2757(\351\275|\246\337\273\020r\335\274\r\247\311\274B\224z\275\300\363\027=3\352\274\275\370\330l;\274\007\003\275\375d\254=\315\266\n>\215Z\314=Q\305\353=f\351\370\275\343A\036>\217\272\001>\347\243n\274o\264\246=K\036\r<\221N\253<Qw\035>w\231c\275\264\255\251=\373f<\275\333\261~=\347\023\376\274\310\t\257\275\261\024\235=\263\025\302=\2039\245\273\312\010\375=W\246i<\354\300\020=\210Y\027>^\206\017\275\031(\330=\230:\027>B\265z=3\346\024=\355\021X\275\344\353\224\275\275\304\035\276/s\014;C\312d:\312NH\275\007\262\004\276tl\n\276\n\033\000\276\177\003\035>\214\305\004=4\363\023\276\233\344\251\2756x\356\275\010\227*\275\'\004\005>\267\331\311=\266\355\302=\227Q\036\276\366v\355\275\177{\371\274\213\004\340=\203R\232<q*&\275V.\322=\317\205\345\275p[\007\273C\256\266\275\356K\037=\206z\024\276t\255\236\274\311\326H<u\347\203\275\367\230\010\275V\302\304=\372\352\377=C\232\t\276\341\035\227=\224\255\332\275;\003\325=/l\021>\367\013D=\300\305L\275\220$\337=k\314\357\275h#\236=\364g\244\275\013\305c=\352t\014\276\365b\031\274MG\343\27582O=\372h\211\274\"\353\034\275\310\302\224\275<$\034\276IH\316\274\207\216\344=4&\010\275]\270\362:\251B!\275\007\035\020\276Ev\r\276\363HS=\346\025\257:\023\374\343=\361\000\201=(^\005\276g\014\000>8z(:N\266\220=\304/\021\276\352\244\237=[*\371<a\243\305\275\301E\223\274\311\023S\275\223\007W\274\032Ji\275\3312\251\275k_\376=\207\367\223=|y\026>znc=\314\352\n\276\210t\274\275\' {:\363e\271=0\206\347=\312\007\035\274lQ\214\275]B\027>-\216\020=BN`\274\355\207\306=\2260\361=\3655\205=\035\271\230=\023p0\275\246?\356<\306N\243=<\250\356\274\247\301V\275\271J\327=\'gA\275\315\220\366=\217L\335\273\340\342\351\275l(\207=\'(\223\275n\003\t\276\212|\331=Q\321\007=\361om\275\234L3=\373\222\236<\025\362\365=\245-\353=\217\r\263<[7\370\275\214\343\237=(y\006\276#>\003>\343\245\371=\325\210|=\356\303.\275x\036w\2758\227\014\276~\274H\275\316\r\022\276\214\004R=\365W\370=X3\034>\224\346\201\275u\033\005\276D\312\221=\277j:\275\355\324\263\275\362\214\274\275\032\241\274=\335\030\023=\215\374\346\275^\263\252<\345\347<=\247\347\325=6\306\n>\231+\021\276;;>\270\256\343\004=\345WS=\322\341\265\274\235\023K=_\234\375=r\321\022:\363\261\374\272\270G\026\275+\007\024\276R\233\025\276\211\023\316\275;\177\261\275\177p\263\275\377\350\356\274B\013\365=Q\323\254\275s\236\023\273\236V^=\254\303\016\276]\250*\275&\331\013>\330\032\177\275\357D(\275\326\333\345\275\t\341\374=\r\254\252=w\345\034>\323<\245<4>\231=\251\323\264\275-T\257\275\234VX=\025eQ\272X\314\302=ZV\030>\244_\n\276\232I\035>\240\361\262\275^{\025=\270$\347<\342x\313\275\232M\342<\247\341f\275\224%\t\276\310D\266\275\226\354 =\221\274\034\275\010:]\275P\332\007>|\274\'<y\366\225\272\302\251\304\275Y/|<\027\335\253<AA\021>o&q=\310\220\036>\225\223\032>\274\301\373=\001\366\305\275->\252\275m\366N=`\023\231\275\334\013\212<n\320\342\275\275\003\032=\221\350\006>\242S\265\275\346\237\341=G4\277=\255L\316=\222\200:=?\002\202=L\'\261\271Bw\026\275A\236\310<\241>W\275\226\000\021\275\241\243\303=\261\266\266\275\340\007\003>\322\361\024\276|F\321;,[\200<\276\003\017\276\027\353s=\241f\277=G\327\007\276\313\245\365\275\342*\312\275+a\036\274\010\313\253\275\303x\023>\007\3556;\207\214\326=x\005\013>\003)\322\275\347<\344\275\004\327\323=>U\352\274p\254\351=\013{\257\275\341\222\344\274^\310%\275\000\251\257=\036\224>=\364=\340\275\243\3315\275>\177\026\2741B\022>p\256\361=\367W\343\275\250\035\002>1\365\321<\325\002\374=?g\020\276.\356\322=\265\030\221<\364\003\345\2752\032\005\276\270\341\020\276Gf\305\275\010\272\311=\251\263\256<\241\036\034\276\227\307_=\375Q^=\275\351S=\005\004\026=\027Jv\275\371\325\337<\202\377\001>\277\340\275\275\036\317\362=\2726\352=\223P\232\275\002\"\325<\237I\026>\017\215\256\275-\257\246=}T\240<\317\035\274\273\004\340\344\275\223\346\322=$*\021>\2727\367\275A;;=|\314\315\275\361E\330=\013\320\023>\005\300\257\275\233\332\246=@c\357=\023\222\373\2755b\324=\260\333\007>(\202\032\276|\243\033>\262!r\2755<\236\275\024r\n\275\305\250A<\361\235\020>\263\375\r\276\233\216\256<h\373\245\275\010V\310=o*\375\274`\365y\275\3517\245\275\3745k\275 @\310=L\216\207\275\340k.=\\\t\372\274I=\025>\014e\002\2763\276\315\275e\"%=\r\002\000\276&\363N\275k$\304\273\234t\033>\311\251\033\276\353q\006\276\214v\327=iD\314\275\343\322^\275]\032\007\276\303_\334\275#\374\036=T#\204\275\317Ja=\206A8\275C\024\002>\253(\343\275\255\354j\275\223\002\017\276\002\341\345<\331\264\003=\205\205\004\276Y\310\267<UM\314=\000 \305\275\336|\253\274z\002P=<J\301=D\024\001>\227\177\n=/tn=\263o\201=\366X\324=\277;\235=\217AV=\262N\377\275I\375\032>\027z\377\275\020\001\017\275\315\tc\275\210\254\361\274\334\306\302\273v\251\006>W\267\016>g,6\275\337Id=\323\267\232\275\226\255\005<\323)\002>\203D\"=\365\224\r\276e\230/\274A\021\214=4\3101=H\240\014\276\307\n\216\275Qa;\275\314)\230\275Au\036\276\013X6<\316\263\356\275\301\204\003>\2578\001\276Zu\217=\247\027\371=+\360}=\230F\306\275i~S\275\301\355<=\215\264\363=\035\267p\275\220D\304\275\030\201p\275K\332\002>\2612\013>\2304\355\275+\233\344\275j\262\206\275;\263\024\274\340N\262\275R\262\354\275\247\274\010\276+b\034\274\245\353\337=?\261\244\275\'\003D=6\310\313\274\350\241\377=\303=x\275h\305\021>\335\310\314\275N\347\232=\034S\351=\010\345\t\276\226f\310\275N\371\362=\371+\333=\271\")=\210\304\262=\232\275\340==\006\034\276:\225\336=_\354`\275a\242t=Ks\216<\217\024\215\274\004_\375={\317P\275J\357\036>\003 Q<\330\020\027\274\277\037\301\275\301\203\332=Jv\242=-\325\024<SY\030\275R\236\320\275\243\335\237=\267v\032>\374\027\310=\201\343\234\274\305\375\255=\303\203\030>\260J\023\276\'\337\370\275o\212\270\275\203z+=\217f\"=\272\007N\275U6.\275\240\315\022=\333j\311=I\300\270<{`\021\276\371\304\034\276\003\256\235=+\242\352=\007)\222\274(4\024\276\200\377\245=\240;\232\275\215\006\026=nA\367\275\026\364\022\276\254\2456=\\\225I\2757Z\260\275\367\347\357\274\205\302s=\324&\252<\245\353\304\275\344\024V\275j\221\023<\215\315\311\275\234~\256=\227\206\036\276t\363\036\276\221b\r\275Z7\021=Y\005\241\275\227\237\027\276F\224\030>\352\231\013\276\307w\210;|\004\365=\010m\024=\233\243\017\276\321\332j\273,\016\263\275\251\024\203\275\214\010<<\026\202\"=\032;\300=\230.\360=\036\262\364\275\314\024\017\276\303\256\232=\332\r\353\275A\331\027>\360\216u=\300^\r=\256\207\021>\026Y\250={\273\304=2]\235=F]\244\275\331\033\257;\332\357R=E\314\016\276\234o\032\276\215L\027>(\212\n\276\003\335\343\275\254}v=\227,\212\275\216)\302;%,\003\276\300\177\016\276\276\210\004>.lp=\244{\363\275\3629\025\275\276\201\202\275\360\210\317=\341\002\037\276P+\\\274\244\037\025>>\366\311\275\257\201\257=\237$\316=\261@\222=\267\355\331=\275_\223=B\030\273=x\267\325<\306\036\375=\343A\335=\231\\\217\275xeE<\346\213$=\025o<\275!6\247\274\313\265\364\275^z\210=0\300\\\275\352e\251\274\341\225\t\276\310\037\213=\237\t\350=\246\001#\275w\365\017>\336\360\024\275\362\210\313\275<\020\333=hQ\316\275\210H\366<\374E\223=)\354\023\276\261\025\257\275HG\013=\020\277\336\2737\005\020>^\315\366=\216#\310\275Cb\307\275\251 c\275k\004\243\275a\340/=\311a\274\275\2534\027<\226\025\271;_\024/=\362\220\360=\253Z\231=\215w\272={\314\260<)\266\016\276[\347\335=s\236\347\274^\317\030\276<\272\030\276\027\014\003\276\246\003\244=\340^q= E&=\272e\213\275\333Df\274\351\025\211=\376\205\214\275\317\324\262=t\315\240=\200tX\275~Q\313\275~Z\264=\371N%\274\'\024\236=\222\366}<z@\307\275\240\351\016>!@_\275\032f\372;\363L\025\276\023\002\355\275P\377q\275<\266\334\274\303hv=\230C\007>\270\270\000=\220h\340=\n\312\201\273\2174\316;\244\'\340\275\300\2503\275\310\256\313=.\320\243\274\302\254\016\276Kn\341=6~\020>\373\275\024=\255n\220=q\003:=\n\212\312=\016G6=\261\020\374=}\027\275=\305\3339\275U\000\335=\251=\031>\017\207^=\004\251\361=\261\373\336=\223\211\256=\320S\262\2747\364x=~\033\311\275\321\013\315\275M\231\322\274\210.\234\274\314\303P=\002\374\003>\226\313\033>\366\324A\274+\314\236=\243V\220\275\274\375\373=\036;\026\276F\200\366=\014\023\342=\256t\273\275z\252\353=SB\354=Xx\023>gZ>\274\\\270\336=\275| \2743m\253\274\324\212\311\275\265\262\313==t\000>\255d\024>\n\251\t\275\317\035E\275\035\230\226\274t\307\207\275{p\367=\251\007\n>\232\301\301<Zs\316<\010\306\277=\035\024\354=v\'{\273\266\237\033\276jo\035=\276\242|\275\306\214G<\241\237\t\276\'\351\024>Y\024O<)aR;\302=\033\276\177;\360\275}\303\264\275=`\236\275g$\013\276\310*\215=7\301\016\276\366}\211=#\212\252\275)w\336\275\300 \n\275\032\026\005><\260\323=\233\004\001\276\243Z\276;\214\365\002\276\3572\314\275b\241\211\275\016\344\036\276\352\350\036=\345\244\247\275vZ\031\275^\345\277\275\376\"\334\275>\345\325=\252|\237\275\027\317\002\276J_\363\275ym\216<\224\302\377\275 l\225\275\021n\036\276\274\"\357\274\340F\000\276\237\005\277=\363\211\036\276\'\360\003\276\002w\240=\245\276B\275\005\010\211\275\335\201\016\276\366\360\365<\214\347\220=\0318\223<\231\220\341=\365\236\026\275\274\212\243=\036=\363\273D)\013>\360\\\247\275\014\261\244\275\353Z\033\276\204x\214\274\336\274*=\014\000\363<\243\323\014>hH\000>\314\217\215\274\241\302X\275\212f\266\2755s\210\275O\010\374\275\250FN=SBh\274R\034\002\274\251a\037\276\363\241\310=\032&\370=\213\374\327\275E\334\237;\300\345\356\274Jc\2468\333\246\031>\240\250\301\275j\372\366\275E\354\307\275\302/\225=m\344\240\275\362\r\025>\336D\341\275U\264^< \"4\275jt\245<\275\2635=\310\224`\275\334\273\364\275\242\275n=G>\002>\034Qd\2756\330\365=\002\345\006\274\267]\033\276\240\260\371=\340-n=Zr\267\275=\022\016\276\324`\302=\211\025\346\275w\002\006\276 \346\301=&\322\305=\226$3<D\327\023<a\316\226=\255t\024<U\251\363=\000\262\260\275Dp\260\274\365\307\340\274\261\3721\273px\222<\2323\007\276\353\227\r>\036\233M\275l>X\274\241b\334\275Li\223\275\tv\\=>n\206={<\304=\"\306\220\275\2735F=]cD=\000\006\274\275\365\244\270=lC\255={\270\261\273\312\324\006=\1770{\274i\031\342\275[\353\227\275[a\315\275 \207\371=%\205\316=@\242Q\275\3734u\275j\021c=\336K\260\275\r\036>=PT\266<\222_K=y\215e=\263n2=\225\025\207=5\276\023>pS\320=\321\354\230=\340\343\301=6\311\370<:\233r\275\255\303\022>\030\013\007\276\273\215\034>A.\376\274\300X6;\300\370\265\2745\025\003>\002]\006\276\330&\217\275\317T\257=\031S\024\275a\'\271=\274\375\201<=s\356\2751!\034>\241\034\315<\355\034\315\2735;\276\275\346\266}\274\206\004^\275\325\350\330=\303\335\276\275q;\030>\\\344\2559 VZ\275\031{\014\276\251l\277=\244\036:=S\r\212\275\263l\010\276\236N\035>G\316\022>\322\256\346=z\226m\275\250\251\023>~f\314=\233\'\236\275\375\252/<W\324\315\273E\353\027\276\333\365\367\275!N\225<\326,\222=V\243\322\275_5\355=\nW\003>\222\227f\275\321p\377=\017\006\246<\355*\002>\232\204\013\276\366 \027>\307u\207=\370-\332\275\300W]=\263\031\361;\020NK=b\321\020>S4;=\362Y\365\275/m\353\275\367\225\352\275g\020\021\275\261\032\212\275\235Z\023>,\361\354=\006K\326=vu\215=8\312\341=\301\311\250\275u\327\256\274\305\261U={\233\213\274\214\255\005\276\373J\210=Z>\027\276tl\020>\227z\034\276\2461^\275\366\244-=7\301\326=C\363\033=\217\032P<\223\226\365=\201<\340\274\233\316\262=X\032\270=\033o\r>D\364\270\274\211\241\304=\217\200\337\274w\316\226\275\3148\240=\334\333\027\275\240\0059=\210C\366\274\206Y\331=\320\006\026>bq\344\274\214\245\021\276W\243\221<\n\237_\275\3453\323=\331\270\006\276c}\327\275\270\035\016\276n$\302=\2304\\=\254E\312=\243\010\231=\255\261O;*\302\221=\001\331\343=\201\233\274\275\3144\243\275\276\310\255\274\010\026\002\275\217 J\275\235b\327=\334\271U=\244\361\361\2749\302\353=PH\002\276}\037\320=\365\223\017>\263)\245;\206\205\271=eb\226=\343#\264\274\223FM\275\374\345\211=p$\327\275\025\212\031\276\037lt\275\207\217\266\275\0149\246=\230\212\263=\374Y\204<\355\267\220;\365\225\033>G\207\346;f\221\034>E\343\016\275\227A\016\2766\247^=\'kk=VJ\036=\326\014\357\275h2\247=\"\313\031>\255\342\036\275\340d.\274\314E\022\276\332\262\314\274\320\340\356=\361\374\026=\332\222\016>JI\374\2757\204\316\275\206\337\321=\273**;3d\254:\343\024\221=\363\3172=\301\353\006\276\242|\016\275p\326\314=^N\326\2748\002\027>#\004l=S\212\344\275g&\n\274\223-\271\275\t\340\'=\274C\013>\201AR\275\215\332\354\274\021\335_\275\272D\327:x\256\200\275\033:A\275\241\246\022\276s\363\300=\037{\343\275U\354\350\275\305\223\212\275\230\034Q=~ \202=\226\315\002\274\002\005\310\275\274\327\023>|\027\243\275\213\303\222\275\032\330\\\275O\0357=\022\354\257=\035\322\300\274\006\202\222=\372.\371<\204\346\337=\024r\377\275\373\351+\274nT\327<8\272\345=\016\2550\275n\256\004>\317\267\343<\200\257\225=%\004\002\274mW}=\245\024\240\275v\214w\275j)\243=\245\373\030\275\"N\213=X\254\371\274\243\215\005>\253R\277=\377\274\235\275\177s&\2758\241\355=\335\014\032>\t\377\335\275\206\275\t>\365\177\225=\317I\330=U\246\244<\001\r\343\275\337\357\351<1\316\366\274\307\363\306<\275q\013\275\254@\252\273\237\"\251\273\343n\207=\322\373\t=K\213\031\276\322#!\275{\272\222\275\355\265\002>\301eR=\302\035\217=\203\177Y<[\352\304\275\316\214\364=\016UC\275:\2529\273\237\252\221\275\317\001\027=\217\365\322=)b\230=\231$\033\275\n\"\271\275Le\210\275/\363Z\275\207\003\360<(C\033\275\301(\024\276\307\301\267=?\034\003>v\302\021\275b\215\352\275\266\225\345\275\035\306\335\274z\001\002\275\271\003\004=BF\024\276\317K\020\276zU\023>=\246\317\275\321z\033\275\372g\246=pfW\275S\233\201=\225\274\322\275\204\030\036>\373f\016\276\253\320 =w\2468\274|\263m=&R\032>`\234\331\275 \377\266\274\010\004\002>\317F\004>\030Y\367=\335:\236\275  \327=\346V\026>\035\314\000\276{\252#\275\360\010\367=\314\307\215\275\375\200\216=!r\233<\241\252\265=\273Q\340=h\300\306\275^\207\210=R\341\350=\223\367\010>uQ\263<\254\016\266\275\323\234\002>r\207\235=\242\177\033=\t\252\030\276\235\272\322=\262\322\255;@\244\030>\002\244j\275Z\215\003>\016\332V=\201\272\232=\324w\213\275\2132\222\275nq\302=t\210\252\275\257\245\377=\320\251\353=S\322\265\274v\024\313\275\352\262\360=j\245=;\240\261\225\275\376\347\245\275\243\177@=I\315p<M\332\341<\325D\274=\326\232\315\275\226Q\000\276\360T\244<]\362\002\274\363\332\027>v\202\374\275\377\241?=\313\213\363\275o\373\277=\244-\264=P\005\261=\331\204\026>\244\016\215\275,\352G\275_\304\010>\213\320\267=\227x\240\275y\177\004\276\352b\351\275\036(\260=\277\312\023\276g\022\026=^r\033\275\242=\227=\241\025\361=\nI\215\275\266\361\300=\224\025\211=p\226\222\275\245\217\376\275d\371\006>\202y\246<\351\307\251=\021S\246=\353\014\010\274\0232\004\275\326\260b=\376\370\335=Fi\213\275>)\271<$\235]\275/I\244\273\032]\002>\221\200~\275\347\330\306<\236\300\317\275$\264\207\275\216\214\002\275\235\222\036>\001\272e=\027\377\007<\332q\311=Zm\'=\313\215\265\2750l\223\275\232I9\274\\\232\257\274\325\262\032>:\377\366=(9\033>\336\302\020=\002\244\347<\221`\200=s\365\027\276%\310<=M\205\030>\361C\000>\377\231@=\212\242O=\337\233\023>-\320\234\275\313\232\014>\220\026J=\331s\024\276\353\211\003<\313\253\033\275Lr\020\276>e\332=\365\177\376=\252\317\000\276\202o\r>\220X\313\275\000\265\033>!\023\204<\200\364Z\275\2349\321\275=R\351=|\330\341\2759/\014\276X,\275\275\246\024\207<%@[=\346\275\272\275\277\360\231=*\"<\275y\025\030>\272\314V=\253\261\314=dO\310\275\rBy<K\371X\274\327\017\225\275\",\337\275\357\273\353\274\2261\002<\203^\310=\203\236\002>\324\212\202=\333-\236=[\227\021\275K\005\356=\321\300\332=d&>=\300\255\276\275\013\027\317=\315\032\225<#\304\002\275\320\342\340\275r\ni=\355\006\002\275~K\243=V=\304\275\346\n\271=\237\236\226\275\224\005\330=\367\212\317\275\013\232\204<\365\274\001>\326M\215\275\025\316\355<\355\tq\275\274\375\016>\325d\013>W>\316\275\246\217\013>\306\342\002=\303\334\205\275=b\331\271i\313\312\275\322\336\337<\213\'\251\275\264\225,=\223J\027\273e\271\001=\344\312\r>#\303\005\273\005\035\036>\r|\006\276`\224\375<\307\277\007\276\340=\026\273\222\005\262=\316\207\035>\230Y\365=\260Z\302=z\243\251\2744\325\023>3#_=\013\207\024\276(\255\257\274*s\342<\022\\?<\200s\347=M\311L=I\225\300\275\2450\\<\371\272\026\276e\247`=)n\235\275\3102\245\272\030\'\257\2757x7=\221\221\271<+\312\277\275\000\221\024=\261\251\037\275\"\026#<O\215z\274\251\365\003\276\271\006\320<\263\242\222=\002w5\275:\315\207\275\005\212\242=\364\206\350<\237Y\364\275Ox\003=\032\203\032>o\276\214\275N\336\267=\r\270\373<CG\260\275\004\326\002\271;\364Z\2757\033\276=\010\376x<v\025\202\273\237\273\276\275\216\346\034\276\005\3562=n\373\360=\334\003\275\275u\210c\275\231\250?=1+\021>l\330\037\275@\333\273\275\rM`\274\000\303\346=NAv\275n\351\021>X\013\177<)\001f\274\236\324Y\275T\215{\275\310\000\323=fD\022\276\033\343\020\276\265\362y=\236\210)=7\372\354\275\374\241\333=\374\202\037>%\tY\275\217\354\333\275\203\245\244;\003l\375\273,\213\017\275\276\330\026>\261\262\276=\030\210U=\025\272\367=\366\370\274=\222\312\314=\0178\035\276vP\n>^9\344<y\210\274=`\325\027=\224\320\006<\254\271\225\275\013u\336<\2620,\275 \254\r\276:\203\324=\215\260\005\276@\021\212\275d\007\370<\376\332\212\274,\217\305=\0277\325\275\211a!\275\230+\006>\231`\316=\'n\030\276&\032\343<\326\262x=\226\315\206= ]\345=\026\214@\275\232\273\276;\343H\374\275\020\273J\275\022B\211=\005_\033>:*\005>+\327\247=\006\203\024\275\202\232\206=\310\354\016\276\264\303\264=\216\212\016>T\005\371=\306\303\344\2750\356\251=\321\316K=J\020\327=\223H\360\275\002\231#\275 \023\024=u\251\035>\242U\316\275\360S\200=\363\177\370=TV\204\275}\022\320\274\234\253\266=\002\025\276\275\266,\203\275\370eF\275ik\257\273\255*\324\275\037\313==g\325\305\275)n.\275\241\034\377\275\261\243\272\274h\262\225=\213p\n\276\276\242\023>\034w\377<l\272\026\276\316\273U\275\225\334\305\275\025\351W\273\244\266\261=e\267\252\274v\3530\275\304\214\n>O\227\032\276\014\372a=b\330Q=O\346\027\276M~!=\256\310\217=\372v\037\2765\016\021=\375\272\240<\333\330\220=\022E+\275_*\026\276\202\367\241<~\353\262<\201\241\005>\343\251\031\276\223\014-=\363\217\005>G\345\274\275X\370\030>\253\310\023>b8\001>\221\260\025\275\376\330\017>$[\036>\350\301v\273\266\rB\273\3635M\275O\276\327\274\203\rR\275\005\330\347;\252[\343=ZDe=\221\303\204\274k\223\313=(\305\200=:\370\017\276\212G\"\274\375 \303\275\232\230\020\275m9\371\275~\022\345=\217>\352\275\360\2029=\234\251\276=\215 \322=\243\032\344\275\210`u\275Ltt\275\025O\013>o\024\253\275e\362\033\276{\346\003>H5\302=\344\037\006\275$j4\275)\200\242\275 \367\326\275w\260;=\310\215`\275\036x\037\276<\364\335==\204\240\275<\254\014\276\016\243\354=r\003.\275\323l\003\276\177+\224=\016\212\207\275\021t\206=\3468\333\275\3219\216=Y<\265=\214\310\242\275\243\002\276=i\375\251=\255,\373<\034\020W\275\032x\000>\243B(\275\232N\241=\326\231\272=\367\272\014\276\003\357\243\275\341\201$=\342\236\327\275\246xC=W\302\025\276\253\275\306\275\341J\235\275R\016\364=\307,d\275\227\255\004\276\260FP=\216\203\256<\213a\376=u\216\340<\255Ku=W\226H=\357\254\006>/\227\021\276\200p\276=\202\310\243\274\341\262\030>\3158M\275\000\271\220\274|\360\224\275$\217\t\275\036\261\273\275\210]\t\276\215\026\031>\230\320e=}\374\253\272\002=\246<J\325\317\274%\254\002>i\242\373=\3314\260\275\'FA\272\033\344\246<\335\373\240\275\375\252\316\275M\033\227=\001_\023\276\036\322\010\276`:\276=2\220\024>\265\241\341\275=\256\346\275/\002\255\275\212\357\365=E\342\236=\022+\277<\377@\313=\222\202\271<\373\302\n\275\306g\031\275\347\002!\275.Y\004=8\217\252=\353\305\000\2766\262\036\276\335\341\350\275\361\005\030=\2113\217=6\221\344;\263\310\252\275M;T\274Z+\243\275a\274\264\275\366C\323\2756\t|=~Y\200=\244z\215=;#\225\275\235T\034\276P\261\253=\037\257\252\275>\001\312=*\330,=vS\315<q\325\230=^$\362\275\010\272\302<d<\250\275\203\004\300\274\332\t\321<B5\307\275\215\351\315=v\272\260\274\211\357\013\276\220\020\245\275\325 `\275\337\227;:aZ\034=+\217\260<\216q\274=\364\354\263\275G\253\007>\013\312\000\276\362Qs=\262\220l=\247\345\257\275\373\004\301\275l\350\346<${\025\276&\207\263=\353\255g=\375\263\303;\326-3=\315fH=\353\310W=\2646\037<\262\215\360\275\260+\306=\270&\251\275g\356\340\275&\353\022\276\004\363\254\274\222:\362\275Y\356\004>y\0310\275\244\205}=r\325\021>\r#\302<s\246\374\273\360kR=\014\033\003\275\362\254\311=\263\254\036\276Tb\277<\350\227\354=R\037\032=\304G\352\274\265!\010>>\021\262\275\001\001\202\275\250\034\225=],\037=\305\226\031=\373\025{:\317\365I\275\314\346o\2754\333G\274\031\365\331=\277\260\312\275\270\203Q;=nG\275\361\342\202<R\036]\275\212Q;\273\031\036\000>u\271\256=\030>\312=\334>\275\275j\036\024>\265\203\253<&\230\271=\306\267\305\275v\374\t=\345q\236;\003\331\304<?X\203\275\034|\254\274 \247\036\275\304\257V\275\315\324\272\273\320\210\262\275\022\212I\275\247\335\304\274\242\\\002=\275\321\003=4\360\024\275`]5\275X\310\031>2|\020=BB\224=\023\261\205\275\317\016\203=\361o\031\276\020\2007:\363#\210=&\307\320=\256\225\342=\362Y\372\275\361}\017>\343\212\352\275o\017i\275\350`\017\276\366\276!\275\203\372\374\275\333\312\221=\244e\203=\236\236\274\274\202h\307\274}1i\2752\300\357= \203|\2755\321\233\273\233\200\277=\365\241\330=\207\363*=\255\353e<[\237\033=\221\315\361\274\006U\330\275V\251A\271G\246\250=\253\026l=\032\252\r\276=<:=!\353\302\275\333\360\001>\206\0145\275\247\255F;\2618\300\275 \346\247\275R\362\274=p\r\002\276\371\246\r>+\030\376\275\236m@\274\331i\300=\343\200\204\274z\236\274=\025\330\034>\304\271w\275`J/\275\213\335E\275r5\226\275|\232\033=0(\331=\211\256F\275\230C\244\275\212\303\235\275\024\037\315\275;\222\220\274G\016\225\274(\"\020>EE\013\275\230\"\322\275V\211l\2731I\002\276Qfh=@\022\235\275i\317\227\275\301\260\223\273CG9\275\3210\262\275\035n?=,\376\225\275\034\302\362\275\333\371\216<w\254\334\275\276\231\006\276\324\213\023>\263\267\030\276\266e\373\275\"I\321<\006D\031\276\003\323\031=\322\377\344\275\007[5\275\301\325\257\275\315\335\266\273\333\002\017\275\023\001\024\276_;\252=v\351\254\275wX\206=\030:Z<\371\362\016\276v\255\022\274Y+^\2733{\242=\0346\221=8\240\206\273\035\235\007\276\010\005\000>Ek\362\275\325\331\304\273\202\0226=,\036\n>\302\261N<\304\266\241\273\304\331\366\275#\221f\274a\034\346\275\235\204\224\274\246\177\n\276\277@\337=u\304`=\017h\007>\314\000\217\275\361\327\240\274}h\037\275\320$#\275\3638\352\275\304\207\250=z</=\375\n\004>!\342\220\275\314\000\315<!>\372<\026\331\337\274\272\221\025\276\373Xf\2756,E;\252U\001<\2623\030\276@\226\241=e\355\003>-@u<\214i\320\275\311d\032>\216<\310=\024\233\031\276J\266O\275\357A\276=8x\265\274t\227\234\275Wx\017=\335\033\200\275\223\261\311\274;\014h<\204\031\340=\365_\030=\034\002\024\276f\234\365\275\322\220\371=\357\250\223\275\331\225\346\275\024\251\370=.a\257\275\002Al;P\021\031\275\233\314N\273>\t\216\275H\205\t>\330i\035\275\226\024+=\202\331\025\276\230\257\311=*\231\017\275\267\205\"=!x\005=8{==\001m\257=\000[\207\274\330\251\306\275\252\262\007\275w\235\304=4b\035>k\237\242=\377\2129\275{\313\375=\264\242\017\275\005\224\032>\233\227\002\275\314bB<\202\225\263\275#\005\266\275\210\331\353\275\0048\314=@\206m<\005\206\373<sr\030\275*x\325\275\267\'4=p\352\304<\324s\037\276f4\320\275\023\227%<Q\367\033>\211\341\r;\023\322\346=A\271(=\245z\020>XL\021\275\351\220\001\2764PT=\266h\232\275qZ\010>d\323\032>1gv\274<\002\t\276\036\033\216\275h\313\225=\262)\001>[W\027>\366\213\230=\213\367\224\275E\271\036\276\211\347\306\275\367\004\213<\363\320\216\275F7\215\275m\367\217\275\347\337}\274\326!i=*$\010\274)\\\300=\347\302\234\274k\351\377=\217\206 \275\226\343d=\272\273C\275D\034\343=4mt<\322\030\315\275a\354I=\351\016\220\275\332\314\322\271\224 >\275\260\362\274=Gw\334\275\2349\336=o\344\333=\351\nD\275\242$\026>\272\261\372\275\367\247\233<\277\311M\275Z\362\331=W\265\005>e\217\002=u\230\256\275\264\305\225\275\025\014\250\275\236\201c\274\247\350\356\275\010[\032>\020M\372<3\306\204\274\271\371\r\276\025d\334\275\307p\236\273\006\371\255\275ii\312\275\017\343T\271\204\315\277\275\224\355\203\275\371\324\003>\177\223\262=#@N=\'\2354\275=W\227\275\001\032\035\276zm\020>\257Y\021\276k\337\265\2758\355\033=\253:\327=\264\013{\275\311V\241=\262\021\001>\372\361\r\276\333\253\016\274dt\016\276\236\212\371\275\250\362\235\275O[\023>\351\362\005>\352\300\014\276\014L\216<^ l=\201\n\037>\020\330\036\275\214\371\351<\256\no\275\267#\213\275\010\274$=$\271J=f3c=\220\017I=\036\255\331;p,\033>\'\217\255\275\261\232V\274\260-\272\274\365T\330=;\2643=\013*\'=W\326\003>\265b\205=(\376\375=\252\350\211\275\330\033n\275\243 \214=_\344\205<\005\246\357=\321\334\t>R\327\276\2755TF\273\t\374\337=\266\007\225\275&1\372\275\r\343\n>Pe\000>\252\332N=\330\335\322\275\254j\367=\330\\\337\273k\001K<-b\325=vEB\275P\230(<=t\277\275\003\205$\274\311;[\274\r\242\272\275~&\260\275P\256/=\306\033\010>P ,=\035\021\351\275\\\343\033\276\003<\325=`,\002\275\210nj\275\256Z\340=\267:%\275\r\204_<\351V\355\275B\r\230\275D\024\032\276\333\035k\275\243\377\360=jM\023>b\005\324=\255\010\205=\004\371<\275\361\245\032\275\204\000\021>\233JU=\243y\002>\221m\243\2751\367\241=\350\300e\275\202\347\023\276\371\240\230=\367\315\226=D\345\227=\364E\027\2767\301\325<\222\302\302\275\347\306\373=M!j=\350\233\321\275J\255 =\031\305\007>\216\0307\275\036s\036\271v\004\023<\252\312\004\276\232.\004>k\344\316\274\035\2119<\035\201\305\275\355s\206\275iO\352=\366\347\267\275>\213\243=\221w\034\276Is\021=\376\316z\275X\020\002>XQ\330=Y\022\251=\210s\224\275 O\267=nF\240=\2505\265\275\263(\251=7\370D\275\220\247\206=\224\302\362<\033\372\341=w\215\006>fb\025>\357\006\216==[\023\276\n\r\214=\361\313\366\275|\273\377\2752\261\352=n~\"<P`\204=\213\310\271\273\207\3648=\200a\033<\006\202\230\275\272O\274\275\025\276\362=X\rA=\233e~=\206;\036\276\210C\022>P\255\370\275\354\330\304;!\227\327<\373\021\354=1\273f=\230\301\207=-\345\216=`?.=\207x\377\274M\331\346\275s\330\235\275\274\372\013>y\027\007\275\332\013\177=\272\251\207=\357/\021\276\276&\317\275^F2<\373X\022=yt\033>\243\242\333\275\032\215\310<Mb\354=\357I\223=Zr\022\274\r\027\362=\336<\217\275\324\312\221<@\311\341=a\217\247<<\340\205=\032\317\022>\330p\025\274\315\220\025>i\215\013>\231\231\244\275\311\252\325<\364\003\247</\345\'=\013q\t>\251m7=?f\017\275\031\027X<v*\310=*\206\2537vJL\27453\013\276\355)\357\275\373\343\244\274\334\330 \274\306\373\t\276q\323E;\3202K<\r\037\341\275G\326\246\270\346~1=\032\351\334\274\345\177\013>\373\036\354\275\354\241\362\275\244\341\315\275\214\362l=\335\344\241=\347\244\265=\242}\366=*\303w\275\202\266\315\274\327\232\247\2751\030\372\275\377\023\327\275-\005\254\273\317-\357=\302}\305\275V\333k=\370jJ\275P\215\317=\222\252h\275<\246\211\275Xz\364\274\021?k=\272XV\275\374\203\257<\277\260\377\274\226\n\314\275\222\333\241;Wh\026\276\346\267\276=ZQG\275g\177\234=\333f)\275p\212\225\275\n\317\006\276\177v\024\276:\037\246\274\025E\326<\220\370\360\275\334\234\032\276\242\313l<\203=\240=B\273\343\275bc\254=\263s\016>\277Z\005>\320\217\214=\006\252\224=\364u\\\2719\226\230\275\266Ar=\302\261\007=*\305\n>4\016\003\275\3008\254=+.\366=\211m\304\275.\007\021=\356\212|\275\253n\241\275\177f\022>\000b0\275\323!\273=\357\223\335\275o\317\366=\254/Q=\031\361\004\275\013\031\010=\2034\207;\356\266\035\276\321(\307=\321\347\026\276\2103\233=\360\353\264\275UKk=f\027\311<A\234\270\275\206-\025\276\014\210\361\275v\262\003\276\251\222:<\307\275+\275\355}\033\276\325m\333\275\226)\003>\243\'\352\275\257z~<\241\236\377\275\234\243\272=\307 \365=\313\0244=\323\025w=#Fp=8\317c\275]\024\027\276\002\203\357=]zf=\312_\227\275\033\037\013\274\305[\361=\303a\223\275C\371\225\275R\021\025>\'\023\021>\001\224\222=p?\023>p\350\222=&\232\205=\250\240\030=\327\027\n\276\335\212\374=\272\221\024>\355\004w=A\343\005\276\316\303\331\275!\377\250\275\323\007\003>\213c\001\275\371r\027\275m\230z\275k\315\024=\327j\031\275}T\323<m\032\273<|\025\245\275Q\3004<\325[\033>\022\374\r\276\273\'M=\030\006\017:\0143\026<\t\271\021>X+\210<p\005\016\276mk\377=\252|\223\274\347\025\341=\036E\322\275\n\254\216=\311%\035=\236\242\247=\255\364\355\275^\262\004=\315\316\214\275\303\226\334=\035q\n\276<L\032\276\237\324\036<\376\035}=L\276\246<\0301\303<\354\024\'=\250\330\260\275\326\202\024\276W\207\336=\252X\275=\362\303\260\275A\303\330=\342\311~=j\311\323=\'\207X=\204\231\332\275?/\020\274\341s\342\275\217C\261<\033\030\013\276\235\356\314\275e)}<\254Q\246\275/S\201\275\034o\245\275\234^\302\275k\320\225=\001 +=\245I\317\274f2\004>w|\020>\370\013\366=\232A|\275\210\"\367=\211\025\022\276\274\373c=\321\006\276=gl\000\276\337\325\032=b\272Q\275Zi\345;\367\250\320\274YH\n<\256Q\202=i\212\226=r\003\251=W\370\030>\3355\244\275\367\355\272<\317\335\361=\'\333u\274\237D\024<\212\330\330=@\235\035=\316\203\236\275\222E\335\275n\007\027>0\037\372=\317\300\234==\364\370=\230-\320<|\n\303\2750\272\027=\324\322\t\276\227K\006>\337{<\274\007\340\022=(\355\023>\034&\334=\332\327\002>\240\265\007<\365\352\240\273\345:{\274p\231\002>\035\347\227:\365\021\023=\201\026\016\276\365\267\325\274\313\306\333=Y\026\034\273\242\253^;\340\031\217\275b\016\004>^n\026\275\365\213o\275\276^\254\271\371o\033\2767C\025=vi\203=a^\337=\2525;\275\270\324\266=\346{\327=\200\230\025\276\014\353\000<\250,\301=E\224<\275\343\350\315\274\227\244\226\275\343\337\270=@\371\362\274\310\224\n>\354\272\227\274\224\010\252=\375Q\274=K\312A\275|\237\307\275\253\036\266=Uv\324=\244\016\376=\364\367\305=\215?\366\275\002\201\030>\247\017.\275\255\351\022>\275x\247=W\005\272\275\326\310\013\276\377}\033=\033Y\367=e\212\275=\352i@\275\205\333\030\2752{\027>8\027\204\273\354z\210\272_\351t\275!S*\275\341\033!=\344\325\220=%s\347\275\013\021\034\276]\236\235\275f\227f=\025\331\373=\030r\346\274\213\205\254\275\003\347d;P\265\002\276\207\\\251=\3438\317\275. A\274]-\034>.s\244\274\024\231\374<7?\232=\304\232\244\275dI\351\275\242\247\315=\350\274\222\275v\350C=\244g\031>\357\240\343=\337\n\025<\206\022M\275\330\312\334\274_]\361\275\207\267\301\274D\202\004\276d|_=\326\030\252=\021\217\024\275l\204;\275\007\243\346=\321\365\005<\346\300\342\275\254j\030>Z\033\255\274\235-\236=\343\345G\275\372\217G<\360\337\354\275I5\365=\235W\325\274\223+\301=\214\363\002\276\032\177\352;\243\365y\275\211\003\370\275\274\227\374=\315\356|\275\276\340/\275\230\207\220\275\247N\323\275$|\031>\006\">=\235\n\221\275x\221\000=\325y\205\275F\365\343\273\226\024\360=\350P\377=\323\262\244\275\213\362\321=\271r\033\276\'F\272=\334\357-\275\366\356\017\276\246\345\020=\275Q\037\276\230\257\345;RZ\256=}p\006\275\013mP\274\314n\003\276F\333\266\275Q8u=;\336\035>o?\010>^\000\317\275\003\336\035>:\317\304\275\\\200\274=\002\206\213\275w\014\253<\237\254\335=.q\362=S`\212=\215\227\016\276\240\310\000>\354v<=\342\307\315=9\202+:.&\270=Ip3=\241k\007=\t\260Q=\323&)\273\261)\020\276\231\3231\275\200\026\314\274\250\037&\274\237\273\005\276\003\255\235\275f\327\260\275>3S\275MZ\024\276~%9\275jj\030>L\253\220\275\023\350*<#\342\007>\327`\035>\357\220\031\276\233\352\030\276\255)\315\275\365\223=\275\371\353\345=q\265Q\275\000\3325=iq\006\276P\227\340\275\365\362\330\275\345d\216\274\261\270\202=\304\230\213\275\0307\263\2750\264\371\274\217\177\344=6\301\226\274\370X\033\276@\236\036\275;\004(=\347\331\245=\213Z\216\275\237h\000>\204\300\036\276\257\262\200\274\033-\205\2759=\220\2757\316\007>\342t\232=\253\303\212\273\245_\342\274WU\241\275\3253\002\276\335\365\325<F\354\336=\'\360\n\275\342@\353=.\225\007>\213\271\035\276\032q\006\276\224F4\273X\240\221=k\017\243\275\334I\001>\211\006\030\275\247\014\310=\372\"\355\274\370\004\031\275\240\373\025=g\361\016>\320\312\266;\014UW\275\247\276\267<\232;\316=Ls[;\310j\342=\233\023^=.\372\021>\330~\005\276\267\207\375\275}Z>\275\223\204\006\276\230\320\254=\253\223\030\276\037l\347\275\251`\021>X\242\233\275E\'\337\275\237\014M\275A#0=5_a=\321\364\237=\207MA=\352\377\000\275\3425\245=\336\021\035\276\347g@\275\373\271\345=\256CI\275\2568\320=\334\031\006>:m6<\250n\025\273;`\346\274\010\307\355=\335,\223=U\303\010\276\375\203\r>\032\267\005\276\340\340\347\275\257\200p=\376`\003\276\003\232\320\275\212\216\234=l\316e=xA\000\273\346B\337\2751o\346=\322\337\206\274\032\277\000\276^m\030\276p\221\251\275\314\240\367\274t\177e=\030\262\226=jBW=\372\004\217\275\263\262\347\274F\366\332\275\'\314\325<)\244\321\275\236\250\034\276R\301;\274\003=\303=u\016\314=R\320\017=r\255\261=\013\356\027=\037\357U\275\r\013\271=T<&=R*\271\272\374\036\034>\340\222\256=\357\005\021\276\267~\301\275\343\215\257=\373\036Z=\251\352\221\275\343\345L\274\317 \277;M\371T=\337^\204\275\274m\365;\254\234\261\275\273\262\316\275\321\233[\275pT\013\276\322\010\365;J_\206\275\325\374\347=\202\010\276=\232\325\t\276\237\034\314\275\221*\t=\2338\332\275\210\030\337\274g\267\271\275\2154\250\275\276X\002\276\014\226\337<\254=\314\275\224\320\210=q\364\n>\241\206\212=\201z\031\276N\233\317<\340\263V\275\351<\352\275d\317\007\275\023\265-\274\306\032\225:\262\307\372\275\355\035\177\275\244\375\025\276I\317\030\274\035\242\246=_I\036\276\272\300F\2756o\224=q\376\014\275\243\3121=\203\021\022\275\211k\034\276\034\205\206=\007\026\020\2762\022C=Xf\367=\347\346\013>\334\253\356=l\362\354<(>\275<\323f\220<j\343\022>(\226\016>D@\213=\270\310\n>\274\325\200\275\210\264\t> \037\003\275;:\340\274`\235\007>|\252\357\274\215\334\010\276\251/\355=\\m\021\275\370E\035>\342\016\003>*[\274:2\323\333=\235\332\036\275\251k\207\275\212\t\033\276D\342\t>SA\221=\265\355\333=\364>m\275I\323\246<\021\304\014\276\252\300\026<d\\\254\274\\\022\245\274\221\360\314=\240\202\276\273)\334\376\274\355y\t>\213e\017>\342:\235\275\244\317\017>\020\267\227=\211\362\205=L\002\321\275\365\254\252\275\276\276\373\275:F|\275d\313\264=\303M\'<\323\276\304\275\365o\033>\256\243\016=\322)\001>\216\036\232=\346j\001\276\377O{\275D\000J=\377\230\003>O\214X=\244\037\201\275Az\266\273Z\377\031\2758:\014>ik\205=\340\022\000\276)\016\001<\031\315\303=l\245\311\275\211\250\021=1\206\234\275\340b\254\275, \276\275Y\032\023\276\2716T\274\211\273\345=7jk=\211\257\327\275@R\r\276\203g\002<\243\333<=O\363k\275\373Z\t\274\350\346\021>\235\\\314<\025\371\022=\252^\026\276\271\304\376=*\016\017>\002\007\035\276\001f\020\276}9\213\275b\230\036>\356ap\273o\216\301\275\244oz=\322\264\265=v\\\374=\007K\236\275\274\\\310\275\272G\364\275\025\263\t=M \247\273\356=\367=\302B\006\2767U\273\275\003\"\366\275b\241\313\275\371\325\367<\312\205\213=\352LK=\362L\r>\332P\232\275\254\'\010=-N\246\275\322\230\001\276I\340\363\274\007\373\350\272|\221\374=t/\266=\022\306\020\275t\021\t\276\336\222\330\275\347p\"<\315<X=\0014\033>\372<\251=\246\240\014>+\243\313\274\256\220\307=P\330\231\275o\t\262=5\n\274\275-\372\325\275kV\227\2750\214$\275\233D\\=\376\231\371\274G_\n>\372\272\372\275e\234\324\275\303\037\225=\201A\330\275P9|\275v\270\361\275\264\245\267=b\316\353<\215\000\002\275\255\246\334=.,\004\276\336\335\216\274\376/<\275g\235\250=\224Dc=\372O8=\203X\360=Q4a\275\324\252`\275\204\372\271=\231wG=\242\211\232=\032o\007>K\200\214\275\355\014;=\375\247\177=1\356\t\276\034>I=\353\341\013\275z\010\006>\337\376\327=\271\241\370=w\337:=\032-\r\276\320\363\313\274\325c\257\275=J\255\275\027\035\004=\0367\220\275\321m2=\\@\263\274\374Gb<\201\306%=^\325\302\275\016\300\005>\354\037y=+\363\363=\216\025\220\275\244\317b=\262\251\254=iS%=@\240\212\275)x\262\275Ev\031>_\032\273=\271\273\r>Q\026\025\276\230\316\247<\303p\335;t\344\024=r\355\255\275\313\344\237<\204B\301\275\253\033%=<\025G=\261\375X:oh\364<\200\225x==\365\275\275\177\201T\275\247r\363<\362\350\310<8\217\362=\346c\363\275\333\206\032\276:\353\n\276\245\215\350=zl\320\275V\316\300<\241y\200=\307\347W<\341:\333\275f\013\263\275y=\361=\020\010\333\274\253\262\362=\276\205\322\274<\304\n>I\310\031\276\030\274\312\275%c\363\275\016\277\035>\263\006\310\274\302R\n\276\3652\272\275\326\333\327=o\321O=\340I\231=\375s\330\2736\303\230=\353i\030=_i\260\275:1\021\276\rdN=\001\312\017\276\367O\035=\315_\376<\2277\007\276\027.\226\274\325\242\023\276<\027r=\265\t\375=\\<\267=\222\237\215=\034\027\033\276\224\325\326=\002\342\202\274V!V<\323+\002\276\351\360\022>D\ro\275B\251\216\274\023\232\323\275\222%\r\276T\371\337\275\317\235\266\275\025z\273=\217\231K=\"\337\313\275l\357\036>\330\377\244<~\367\216\275n\214\034\276U\265\222\274\366<i=\030\225\\=M\332\233=d\373\031\276\005\035\237=w^\205\273\252\022\364\275X6\306\275\316\377\353=0\276\313=\213\325}=r\017\270\273\266\301\323=\340gc\275\243\026\377=\34025\2747\t\326=\373\376\000\276\023\250\363\274\367\357\370=\375\370\337<.K+\275\304\222\016>\276a\207\275s\365\025>\273)\315=\336\325\221=>\314L=>1\037>\"\226\363=\271\273\347=@Yj\275\215q-=\367\247\340\274\346\354\r>6\036\232=\253\266\001\276kK\377<\035\270\217<\262\022\226\275\372<\300=\240\226\361\274\000\274[;\323\023\350=\nz\371<u\030L=`\347\317\275%A\002\276f\305\301\274\254\332\200=\361\260z=\322\177\330\274\220\322\364\274v\000\177=\347\203\267=\216`\004\276\031\r\350\275r\200d=\262\t\307=y\236\357\275\354\272\205=w\321\260\275K\232\210=\367r\006\276y\207\030\276\362\243\333;\344\325\205\275=\010\371=\252q\033>\373B\006\276\264Q\200\273W\252\324=Kk\266=e\rR\275\203\020\244<z\256\203=v\"|=\2032\354\274\206\337\r\276\360k\315\275\275(\327\275n\322\331<\243\237\020\275\255@9=\202\332\264\274\327\311\305<\362\371\010<g\260\023\276Y\035K=0\255\n\276\335\003\037>(\360\322<\225\375\003=_\021\025>(\313\001>\271\370\334<\0246\254\275\213#\315\275\003\234\337\2751\376\206\274\236(\275=\034\324m=\267\265\232=\372\214\273=\032,\031\274\034\200\337=\333p\326=^k\276;s\367\033=\030\'y=\025\210\372\275\364\223\005>}\317\360;\361\347\014>u\312\240=f\034\005\2765\"\330\275.\302\025\276\330\246\007<\245S\311=\023\206\276=\345B\273\275\223\244\231\274ta\304\275j\347\243\275\336\247\017>\200\374\205=u\201\217=\222\232S\275D\253T\275\252A\363\275\357\204\221<\222Uw<\360\010\262=\203\3729<\344\343\246\275_i\323=n\'\336\275nzR\275;\373\235\275F\223\225=t\211]\275\355\364\r\276a\027\227\273\236\324\277\275\253Wk\275Z\243~\274\367\344\r\275\221\325x\275\245q\356\275\333\0075=2f\022>\3679\177\275\274\376\315\275\030l;<\257\316\026\275P\377\r\276/\233^\275Q\025\344=\361\207\222=\273\360\004>\025\020\030\276\317Q\373=h=\004>\234\000\306<\344\277\r\276\325\202\032\276\232:\014>\014\036\205\275\230\243\301=\326\323\222=\310\'\006\276\204@\020\276\177\373\177<\340\253\332\274\254\234o9:w\370\274\347\033u\274\360\324\006>\"-\242<\260p+=d@|\275\373:J\274u\303\006>\221\365\203\274~\r\005\276\345X\000>\276:\020>$\224\032>\336\r\227\275\363\247s\274\343O.=\2303\326\2756\370\253=b\344\374\273\333\255\016\276\213\243\001\276o2z\273\330N\306=\347\037\341\275M\013\275<\005\204\321\274\344\'h:^q\225\275u\222\257=D\007\023\276/4\037\276\313b\027\276/\216\343\275)\242i\275;\260\036>\274qN\275:G\030>3\265\230\275\366\344\326=\006\024\365\275\314o\004\276\016\016\255\273+\341\034>\215\"\006>\226\345\247<j\033\023=\267]\214\275X\312\001>\327I\245=\205\200\271=\337\206\237\274O/\317=O\227\367\275H\203\336\273\nI\321\274\275E\367\274#\'\023=\306e\037>,\205\037>L\305\314\275P6\234\275\304\331\006\276\346\212\020>\240\033\030\276\004N\227\2754\006U=\354j\024<\007l\205=\251\037*\275O\257\215\273t\351\024=\336Q\237=\000g\210\275n\256\001>\024\356\022\275\314\277\273\274\332h\005\276\2575\032>\343\377*=\023\257\371\275\027\235C<\n\275\232\2750P\360\275\225\270Z\275[\256\374\275\256HZ=\272\231\223\275=~\023\275\254D\353=,\022\035\276)\225\321\274d\311\034=\002j,=\267\371\266\273\370\263\373\273C\366\031\276\223G\371=\271\201\305;\317\265Y\275<R\024\276qL-<\010\324\234\275\347\362\216\275\200\313\365\275XB\021\275\203\232\274==\231*\275\331\215\r>\336\321\010\276\274oX=\361`\225=\254\026&\275\275\334\203=\206\226-\275\250\275\017>&\230\351<\001\016\235\275\203\273\334=*\007&\275\305\022S\275\252\237\260\275\210\346\013>\222\031\006>\312>\036\276m$\252=\370\325\024>\331\031{=X\301\202\275\376A\331=\275\305\365=\215sY\275@H-=g9]\275ce\372<\363\304\340\274\025/s<\272\341\202\275\213\371\t>i\324\006=P\311\274=\263\361\234\275\252(>\274\nv\327<K8<\275Ct6=\037\375\254=\343F9\275\305\330\211<\2407\t\276\250^\217\274M)_=1m\023\276\356<\013>\032.\345;\317\232\014>\236\222\275=\261\032M\275\206\276\311=\267\250\023\276\231\303B<\034\375\220\275\227?\261:\2218\007<\375p\213\275fD\333=1\034\252=\211\360\033\276e&\341\275\332\372\004\276:P\354=\274xr9s\230\273\275\363\377\032\275\"\277\274=\037E\027>\001j\324=l\255\020\275\326(\005\276\264\005\355=\\\346\375\275#\227\346\275\006\264\021\276\260\312%\275\004\n\036>\335M\000>\033=\324==\221\243=\325y\025\273\206!\007\276\356\021\345<\272\0323=_\375\004\274\205\333\334=\232\350\021>Q\254\000>o\336F\275\210\260\004>b\210\242\275g\036\037\276\274\235\016\276\252\035\251=\322\010\032\276\273\220U\275\332\031\215:\3162\203=\216U\266\273\244\204\302\273\2017\313=Q[\325\275\004\262\270=\201{\350=\355\374\014\276\014G\315=\254\307\017\276\001Q\024>Q\201\025>\352\344\327=\341m\377<\227\270\242=WgM\275\332}\032>Sm\251=(m\037>\200.a\275\307N\330=\002\304\030>\203F\250\273\003\332\201\273)\216\246=4\320h\275~\360\307=\244\321@\275\367\205\234<\3564\027=\024\273\306\2753\254\363<p3\010<\274\303\245=\276m\245<\340\206\374=/]\276=\337\316\n>J\022\331\275\271\363\021>1\214\372\275S\312;=\266\016\267\275\273U\354<K\225\025>\267\351i\2758>\024>\364\315\000>R\234\217\275\030\213x\275gx\213\275\345uN<`\215\312=aj\377;\013\200\022>x\357d\2757\004\356=4\324i<\335A\314=\273p\374\275(<\002\276c\255D\275]\006o\275\231\232\235\274\272$\017\276\346\223\033\276(\245d=\026k\343\275\014Z\310;\350\367\026\276-\347\251\274\251Z\230\275,:\033>%\243\213\275\340\004\254\275\310\264\021\276\035%\220=\256M\200<U\357\355\275\010\335\026>\216\021\314\275\230\376\3578\355\233\371\275\264\325\010\275\310\366\n\275\267G\021>m\204\224=\027\263\002<R\357\026>WKR=\017\264\246=\026\202T\274\232I\360\275J\354\366\275\306\212\205\275\220a\022>\357\n<\273J\312~\274\037\026\334\272f\250\304\275\211PM\275\013\266\357\275\022>\302=\201\253\007\2752Z\302\275<\'R=\254\'\231\272\037\000\372<\336\177\344<?\245\252=\316\252\006>YA\207\275\230\354k\275\212\222\026=\375\016\352\274\351j\'=\013\334w\274\372M\345<\345\314\311\275\020\262\204\273S\306\021>\004z%\274\333\266`=\314d\005\276y\230\342=\311\217\266\273\004\305A=\263@\262<~\353\n>\005=\t>\370\237[\275\330\373\267=\215\312\220\275\346G\273=\220\375\336\275c\204d\275\225\017\226=a\"\342\275\267d@=\353\311\371=\223\236\245\275\240h\362=\036\253\333\275\306\277\006>\261\330}=5o\311\275\351\014\017\276{K\363=\253\246\331=*\024\037\276%\212!\2752\252\t<\325[\211\274}>\235=_\022\366=\323\332\272=\273\203\377<\005E\233\275V\313\014>\331\232\021>\267\035\320\275\353y\234\275\221\2757\275\353\374\324:CVY=\304\332\027\276\267?B\275\241jj=\004\025\205\275\323\244L=L\210\035\276\265\266F\274\303\021\237\275\tL\215=\251w\035\2766/\r\276\266\302j9\366\371&\275\007\301\316\274\356x\004\276\330\266\207=\007\350\n>%i\310=\003$\231=r(\372\275\367\255\312=\362\324\232\274\311\266\223=\377=\000=\341\332\177\275\240]\377\273P/\257\275\005G\001\276\000\302\214=6\303\032=Y\234\213=\016\266\200=\245b\000=;\376\361<\021\303\022\275<\302\263=\216\303\311=\310\232\215\275D\370\003<\037i\304=\t\247\264\275x\356-=\'\025\362=\223\ni=j\373\034\276B\232\014\276\355\215\311=\000\033\021\2753q\013>M2\225\275\244(\004=\341\347\250\274\377c\311=\205\270\232=MQ\216=\017R\227\275hA\237\275\"\033\032<\374\025\225\275\304\251\r>\345\002\232=JC\274=+\335\303\272\362\272\233\275+iL=5\330\322\275m;\340\274\036h\000\275ym\204<e\335\022\276\360\027\027\276\376\005\324<I\026\302\275\302\327\337;\277r\241=\201|M=\206E\200<\341\335\262<r\374\033>\260-9=}\261\273\275~O\n\276\226=l\275\037^\022=P;,<\010\313\201\274\261%\027>\357\323J\275W\036\314\275}T\343\275(\327\310=Z#\376\275\244I:=\032\266b=\324fK=X\302%\275\311\201+\275\321\353\005>@8V\275\353M\005=\241\221]\275\230\327\227\274\314,\232\274\321Z\357\275\373\355\320=W\035\013\276\251\315\001>\372\253\235=\275\001\377=1\004\266\275\017\260\341=\321\261\371\275^\204\337\275~4\036>\223\321\002>~m\315\275\366\353$<*\025T=\333\342\325=\227\222\025>\215\302\001\276l\230\356=?\023\373\275\333j\036>\255<\341\275\372\254\000>\217\206\031\276\n\t\026>\334\\\273=\237\234\343\275\037j\023>\315\327\000\276\006P\n\275\315>\316\274\310\307O\275\241\240\027>\213\227\010>\216*a=qI\376<\354\3412=\356\304\n\275\031 >\273_\237\235\273\206M\370=\335\336\010\276\255u\017>\236)7\274>\231\307\275B\366\245\275\305\033\254=\374\266\000\273\344\343\364=s\331+=F\246b\274i2.=`\033\030\274\001\366\333<\351\034\374\274\275\017I\275\213\005\251\274;72\275\206\003\004>\351g\355\275\021\340\332\275\270h\304=h\261w=\033\210{\2725\252\247\275<\340Q\275\321&\212\275j;\224=\213\304\257\275\240/\005>\2353\303=\344\246\224\275\256\021\321=\217\027\235=PB\004\276\021\002\247<5_\277=\206\365\253\275I\210\224<\312\\\026=/P\270\275\034{\024>:\014\230=\254 \214\275l/\245\274o]\322=\014\307\234=!\343\001\276&\025\000\276\023\004\306\275s\371\212;\225R\004>2*\031\276\263\363\321\275YNj\275*\234\201\275\352\251\177\275[\032\302\275\254{\005>\361\241h=\326\365\304\275\035l\003\276\327\221\216\274\007\241\216\275O\320\241=N\013\013\276\177>!=\257\216\005\276\276q:\274\322-\350=]\006\007>\212%\244<5\267q<!\363\340=\205\334\302\272\333bE;\177p\266\275\335|\301=\211L\327\275JV\022\275\003o\010=\026{\306=\336j\007\276\274\344\267\2744\337\302\274\2442\326\275\002\217\002\276Z<B=\314\344\314\273\255\354\025\276\345\222\351=\372\200\377\275\226\323\330\275!_\323<\225\214\203=};A\272,n\t=\331\210\311\273|\037\030\276>\007H=\237.\032\275L_\002>l\243]\274\177l\251<\346u:=w\020\340=\300\342\021>\\\223\263<E*\261\275_)\352\275\201\367\005\276\177\326:=\315|\341=\250\033\002>\037\322\210\275<B\341\275\325\216\274\274\303d\001\276-/\031>\202\232\264=\210\020\336\274\246\326\366<\377\276!\275\200\034\340\275\263\225\021\276\2461\326=\316\013B=\nz\354\272\245\276\030>x\232\261=P\376w=\347\273\r>\376k\031\276\352\\\341\275\312pP=\212\004\026\276&\362\024>\224\243\337=\177K\355\274H\304\241<*\237D=8!\005>\220\244h<\371\214<\275F\233\r=\001\312\342<\226\225\350=\256\252\241=\036\'\016>^h\230\275l\300\334=\324\177\273=\240\263\t\275\024J\234\275\256*\306\275\236[\207\275\232\272\255\275\263\222\"<\270\260\021\275W\0026\273^\031\201=\215\310t=\212\3146\275e\261b=\223\272\t\276\375Iy\274\033\254\215=\305\370\345=\217k\331\275\375\356\332=\"\260\274=;\367\246=0\213\217\2758)\031\275\035\362\016>S\2650=\232\006\313\275\302\227\014>4\017]=\301K\026\276\0207\222=Z&\024>\020x\334=P\363\020\276\315\277\234\275\034F\033\276\215\222\216=\236d\032\27644\331=\266/\013\276\315Z\020=C.L;t\304\364\275\206~i=\262\237$\274\322\215\245=\355\305\031>\374\336\230\272r\237:=\304u\001\275\0136\256=\036\273==\371\202\010>\362\t\202\275`\023\313<\210\016\030=\023\303\205\275J&\366\273\010#r\275\273\305\335=n\342\205=3C\027\276\006\261\300\274^\016\375;\005\212\223\275\312\306\243=\202\n\356\275\034\221\227\274qrJ=\306V{=\350\265\343\275\266\240\273=P\036G=Q\237\226\274\350DA\275\310\342\030=f+\020\275C\033\305=\321\325r<\361>\274\275\375Z\363<\352\272\367\275L\225\371=D\343\361=\213\254\017>\025H\351\275\000\0065\275\306U\357;\345\373\013\276\256?\316=\016\326\001=\365\315\307\275mA\006\276\366\310\330\274\350\331\215\275V\352\025\276\251\372\206\275+\227\026\275pi\350\275\220\307\350\275\232^\030>\001\317\210=\341\2619\275V\022\223\273\256\264\026>a\277\036\276dD\226<\356\307\213\275<\266\005>\033)n=\337\240\232=\202\3438\274]2\204<\251\303\251=\243\360\022>\222\371A\275\337\334\376\275\260\235\355=M$7=lb\216=U\244\013>\375\035\034\276)\346\253\274/\353\353=\260\2352=\365o\335=\240\255\036\276K\337\255\275:\337\255=\353L\204=\316\030\334=\205\033\311\273\240\205\363=PA\n\276\371Y\006\275\255x\025\275\221\313\251=\262\361\r>\013\222\230\275\347\033\354\275\255C\024>\224@\255=Hq\003>U\210\366=\326U3=H4\000\276\027Y \275\305\211\255=\214\201\031>\317\240o=\276\272\271=\305\263\256\275P\353>=\226\220\253<\360c\273=\362{\316\275:b\255\274\020=\351=\216:%\274\267\007\266\275h\237\006\276\267\027\033=v\327\322=\321\200\344\274v\337P=y\324\240=\351\343[<\n\327\366\274\226\030\027>R\244\202;\360\033m<\242Nh\273\271J\315=\373\235p\275\234\310\250=\204\247\313\274\301i\025>\265\336\003\276\351\210\203=\200J\236\274\273\006\242<\203\314\236=\224\234\265=\t\224\n\276*\2757<S\002\010>\375\330/<\035\313\007>?\307C\275\316\345\237\275\177\266\r>x\335\376=\253\024\007>;qD=m\031\254=\312\177G=M\237\n=\016Q\034\276\030\276\200\275\352@v\274V \034<l\364\224=7\344\010>\024cS=\217\211\037>%X\220\273\367\247\255=\314A\300=p8\024>\364z\013>\361`\376=\010\223=\275\352\304><\021\007\004>\241\025\274\275\353\355\204\274\244@\324\275\375\302\360=\373\366\t\275\2149\324\274\343\312\341;G\233\300\273a\364V<\272\003\r>#\307\241=\351S\250\274^0\003>E\376d=\002\264\027>\301*\275=\340\346\026\276l1\340\2750\223\006>\r\354\036\276\013\236\001\276_\305\024\276\200\213\032\276gy1\274\026HP\2751\341\266\274\244\341F=B5\031>\225\370N\275\314L\036>u\224\263=\273\247\270\275/:\035>X\327D=\233*\017=$o\201=\371\273\325=\332\006U\2745L\235=(\260\016>G\211I\275\324:E\275\0143\010>\031\352\006=!\272\342\275\322\237\347\275\355r\252<7\247\242\275\341#z=\232\357!<qA\027\276(\275\341\275P\352\234=:?\364\274E#\317=A3\351=\357\362\326=\315\277\006>\204\366\001\276\027\377\315\2743\244\263\275\2024\222\275\004\220\307\275\205\262\325\275\213j4\275\274\316k\275\253{\033=c\356\025>A\312\021=hG\033=&\311\324=\233\343M\275\027\030\264\273O\343\307=\033\367\026\276\034=\251=3R\r\275W\227\227\274Pz\013\276eO\271\275\027\030\344<;\265.=\034P\262=\324\212\232=?\346z\274f\002\034\275\246\026\250=1\2762\275l\204\274\275\220\025\317\275\3342\200\2747a\r\275\0011\017>\345\363\027>\t\023\035\275G\313>\275nb\'=D\260\005=\224A^\275\006/\343\275\361\304\024\276d\236\237=\363\203\r>\370; \275\264\374\263\274\024\332\214\275\344\273T=Ha\333\275k\020H\275\315(\331=\020T\\\275\252x\300=\301\217\t<\001\303\201=\",y=\300Q}<\025n\301<\206\331\177=\352g\313\2759\004|\275\343=\300=\266\334\017>\302\307\205=!\304\216=\375\347\026\273\242y\265=\316\232L\274\244A\227\274\005\253\334=\220\313\031>\267\346\234\275\310\004\317\275\246\303\207\275\364~\033\276vX_=.=\016>j\247\325<\236_a\275\220d\022>r:\313\2751\"\341\274)~\232<\005\342\005\274\254\236V\275\006\333\350=%\224\227\273\0005b=E\246\347\275pFF\275F\023\027>\2450\005>4\034\025=E~\'=\275\305\010\276\202Uw\275]\333\250=\244n\246<\214\352\034>%\335;=j\241\360=\025K\235<\304\034r=\'\014\345\275(\315\231=L\376\213=\030\001\000>\235\004-=\264\216J=\374<E=K\246\241=R\362\307=IN\310=\342\236\373\2750\354\245=\033\330\226=\255\264-\275\366p\335\275#\377\332\275\245o\274<y\313\250=\004\267\200\275\360=\273\275\242:Z=\305\0135\2743q\212=\"\352\264\275:ec<ow\351\275\014\373W\273\013\003\215\274\300\235\003=\307aT=r\373\005>w9\034>\370\017\204\270\311e\376<\372P\244=\023\037\004\276\n\264\313=\020\024\376=l8J=\342u\304=\177I\n= \323\016>`^\311=S\230\375\275L\340\262<4X\232<\376L\023\276\260\227\234;\0305\\\275;\253\030=\274\005\303=!\255\022\276?\344\017>9\326\224=\016Ef=\000<\370\274\240\013\263=h\372\025>m/\003>\273\261\237\275&\003\264=\007l\334\275\341\014\375\275X\274\271=\335\242\364=\356\024\211\275\027v\220\275]\334\343\275\253\371\036\275\037\r\r>#\247\n>_\203\036\276T8\263=e\213\022\276\311\321\224=\327\271m\275\2466\030\276\302\223v=3\205)<\211\263\356=_\271H\275U\001\200\274\\\275\274=@\244\t=R\314\356\275\270\316\030\276\331o\024>\266\247\200;\261f\003\276\273~\023>\r\310\033\276\233(!\275\330\272\000>\317^\032\274\371\032\025;\326\303\364=\254\363/\275\266\320\361=\257\243L\275\025+\007\276E\375\332<\330_\276\2738r\301\274\332\272&=8#\004\276:.\000\276\0014\356\275 7\r<\204\227\204=\316\323\010\276nC\036>m\\\022>\244\342\237=\321\021\361<*-]\275cK\272=\220\340\223\274\307\200<\275\001\314\003\276\212\002\231=~D\326\275\275Y\026>\005S\345=\301\227\210\275\214\312\262=:\017\376\275\243 \302=\233\203\025>\372\033\224\275X>\234;2\025\026\276\222\334\323=\317\351F\274;\351\342=\365T\026>\347\230\264<\364\265V\275_\023\034\275\312\266\300\274J{\304=G\236\230\274\2521\010\275\336{\006\276\232\026\210:\351x\235;\253J\330= \351\n>}\204\030\276\234J.\275\0209\032>\316\243\203=\212\220\321=}\027\357=)\227\321\274q\301\303\274\316\261D=I\274\367=Tx\003\276\034v\306=o\343\344\275\327F\300=\355\250\244\275\037\345\005>l\344!=\006<\007>\237\323\253\275QL\260;U\211\357=W\326\257=\300!\206=\'\026K\275\207,\273\274a \204=r\265\374=S\013\t\276\377m\261\275\260$\350\275rJ\004>M\276\r\276\210\330\303=\235:\004\275\215\021\242=\007\031s=%\245N=\247|\004\276V\370\030\276C6\342=\374\312x=\2433\366\2756\204\316\275j,\325;\023Pv<1\276\355\275\021\261\002=>\346\222\275\341\010\306=:\333\003\276\230h\364=/\202K\275\363r\t>\255i\014\275\204\313\351<<\371\217=;\307\013>=\2458\274\3771\260\275\246.\263=\204.\234\275I\200\031\276G\235\350=;n^\274\246X\272\272M4\254=\256y\t\276\"\366\254=\221\335\264=\247\313Q<\354\346\321\275\301\272\'=\031\303\026>\036\\\365<+,\253\275/>\374\275\255z\313=\020\035\004>6\213\353=\363\210y\2751\017q\275\r\372N\274{u\245=I\243\355;\347\310g=\346\300\027\276\307JD\27523\313\275\r\312\353=\237\305\361\275W\313\236=Y\237\027\275t\355\272=n4\211<\377\260\306\275V\274%\275xY\357=&`\021\276]\027\355=\257\226\374=\234\373\r>\013q\027\276\001h\211\275\324\256\014>\3101\225\275\205O\356\275IZ[\275L\256\220\274\303\365\315<A\244.\274\032\207\002>\270\231\342;d\272\325\274\"{/\275\357\235\303\275\217[\322=\331\335\256\2757\021\n>\306;\026>\326\246\274\273w\243\021\276v\356@\273\277\016\001>\270Q\300\275\234\007\212\275\222\274\013\276s\376\232<\264\304\034=\037\257\010\276(\017\222=}\350\365\274\251jl\275\3106\214\275\255\316^\274\277\026\335=\354\341\273<}\341d\275\252\2309<\230\250\223\275\210\364\307<\t\233\356\275\252\3605=\357\351\261=\222\202\t>\t\231\334\275\232\025^=*\232\234<.\245\204\274\302\036\206=\340\2709\275;\234\013>\366\212\020\276\234\034\270\275>1\000>7\002\205=\177C\311=\300\030U=\335_\035>\206\361\222;\235a\337=44\006\276\361\255\007\276\210m\014\276JF\341=?\313D\275P\370\357\274\367\035\023>\212\244\242<\034\331G\275U\276V;~8\003<\254\273\014\276`\306\267\275\372wF\275\372\330\365\275\361\363\223\275m\341\216\275\363\252c\274y\206`\274\265\357\262=\232\362E\275\271\3442\274m\247\342=\221+\r\275\240Tu=\n\247\327\275\376\014/=\026\245\r>JU\023>\202\323\027\275I\356\313\274\252<\004>\353\037\236\2753K\005\274\312:$\275\243\242\014\276_PL\275X\266\212<$\312\210=\342\234\232\275\207\237\231\274\364\322W\275\021`\345=\263F\035\275\377\322\031>\234x\025\276\270l\355\2753\250p\275_\263\031\275\317\361B<\274]\253\275\240v\365\275\360\007\025>^\252\210=\301\360\247<\262rC=\\\003\037\276R\334\014\276\351U\250\275\227\277l\275\370$\t\276\210\2459=\211\300\266\275\341V\027>\022\240\353\275y-Y=o[X=)\034\310\275\213\033\003\276\265x\272\275\340W\243<\317\247\261=\217<\353\275\'\266\007\276}\253\351<0\374\337=7*\024>.\240e=i\376\372\273D\201S<\330\251\004>}\027\017\276\316\017\217<\205\236\373\275\340N\020>N\363\362=\361\306\335:\213\321\357=\227Sk\274\032\306\303=]/\306\275\007\212\251<\021G]=\367V\257=V\311\257\275O\375\363\275\275F\005>\306\234\033<VI\020>\262\302\270; \252T=\244_\341<\\\332\036\276i\3359=\273\270\320<_\000\232=\366\254\020<\2767\211;\370w\025=\300\337\356\275\315\240\253\274R\355\323=.\250\201<\317\253\352\275j\273\010=G\264\207\274\237\351\310<&\312\355=\222v\371=&\336\000>\321\244\326= \353\361\275\347q\t>C\317\345\275:0\215\274\213[\322=M\002 =5{\031>y\311\007=\202,\014\275\341s\344=\307m\313=Y_\245<P[\316\275Aj\005>i\363\367\274\305\\)=\263,\221=\004\265\033\275M\255H=\317\320\214=\264\214/\273\226\326\003=\010go=\343\270\006\276\344\314\017>\270\227\r\276\361\265f\275IK\035>1@\237=\371\320H\273\254%\330\2741\033\030\276\312\324\260\275&B\032\276q\370U<]\006G\275\\Y\364\274y\242\036>\216s\244=d\335\331\274\326\245\245=~~\272=\257\274\277\275\210Q\221\275\004\213\277\275M\264\021\276\377\212]\274\301/\361\275\037\260\253\275B\000\225=\022\224\344\275\2633\000\276s\357\230=\375<\201;\273\t\337=n\262\036>m\227\332\274\226\217\237=\032\366\325\274<\317W\275\315;!\275\244\213\010\276\020\372\001>?\003\006\276\016Af\274\204@\305=\222\243\274=\231B\202\273\r\027C\275{\305\367\274L\317\221\275Qs\201\274/\351\235=i\t\242=\260\317U=\201a\006\276\341\325\024\276\027\356\332=4\0214=\225\321\222=\314\022\033\276\307bY=#~\252\275\226p\300\275n\247\315=\201\261\274=m\037\000=\311\263>=\332\261=<S\031\203\275\350\025\325=di\335\275\336\326\017\276\264\"e\275\262\361\003\276\343\364{\275}\323\216=\263i\222=\274\361\023\276\371+\221= \366\031>\207\001\230\272\374\376\020>\217\335\217=\026|+\275C\303\030\275\\K\301=O_\203=m\026\317=\364\343\324\275=\357\307=o\r~=zm\243\275l1\355=X\203\223\275\266\313\250=%\226\344<\240\365\262\275\3412\036>B\327\024=\001_\027\276\355Q\375=\\\220\002>Q)g=\261\374\r\276(x\346\274\315\356\023\276\006\325\210=\001:<=i\373\003>Ot\277<\010Y\007>\265\333\253\275\215\236\020\276_G\362\275\031m\266={P\001\276\344\333\326<\215D\031\276\343:\201\275N\333\265\275:\371\325\275d@\022=n\353\023\275\377I\026>g\347\201\275\203\223\032\276\003\263\032\276\276\036\330\274\267Y\315\275\303\374n\275\001\002\322=\325\274\242\275\304n\223\275j\321\262\275I\324\013\276\020\352\256=\363\201\007\276\033\324\013>d\375\200\275\t,}\274\325\341\023=\313\250]=\3156\t={\004\205=}\246\000\276\261\265\376=\372+\305=\215|\242\275\355\376b=\305v\036\276\250\372\035\276\355p\262\274\206\312I=ui\027\276\325\351\257=W\300\310\275\211\273\217=\330\003\022>s\211\375\273c:\344;\227\225\335\273B^\026>\302\360\307\275/P\317=\3064\034\276\375\321\010<\247\210\n\276\202\027$\275L\021\307=\317\366\377\275\376\005\270=\352\032\020\275\336\277\233\275\320\304\246\272\261\016?\275*z\332=*\271\251=\022\305\366\275\344\226\370\275\025\010\360\275\241\025H\275\234V\024>z\331\022\276v\234\271=\201#K=\300\036\022\276\262X\360\274=\270\026>x\257\327=@\2078\275\235\340\\=\004CS=\316\226\010>\014#\037\275\023\341\002\276\010\235\033\275>\344\260=\035\032\267<\025\335\232\275\227X\251\275T/\351=p\201\264\275,\021\357\275f(\216\275\202\254\016>\354\260\035\275\2334\037>\037\315\242=\022\3460\275\305\r\220=q\254\350\275<b\025>\302\303\207=u\006\016>\346\202\307\275~T\017>\336\272\204=\214\360\254\275\032\214\037\276m\035a\275\260\341\211\275l\235\231\273\373\253+=#G\034\276\027\234\034\276\233d\365\275\365A\314\275\205\\\264=Q\337\272\274\366\240\307=`\313\377\275\304\235\030\2760Y\017\274\235\213\033>\327\314\364\275_\'\027\275\271\212\314=\200\312\316=a\027\210=\025\000\237<\322]\272=\3462\331\275\225\245\032\276:\217\317=J\300\320\274\005p\251\274\'|\225\275X:\027>\257U\033\276\021y\002>\267\215\010>\351\273\223\2757\030\223\275\332\025\021>\2162H=\246l\306\275D\274\000=\314]\027\276\222\341R=X\027\000>\221o\265<\205\232I\275\244\3078=\375\3348\274R@\364=\231\245\311\275}\350\210=fS\331=U\032\003\273\375\274\003\275\323\t\032\276\233d\300\275H\201\230\275\311\2278\275\030?#\275lqU\275iH\202\275[\r\270<\"\243\244=\261\301\366\275\356\345\031<\213\003\005>H\017\023\275y\370\035\276\2006v\274x\310\031=dy?\275[\316\214=8\313\332\275E\365\246=\337\242\031\276j2\r\276_D[\275T\000\361=\245\230\257=\370\341[\275{\240\347=n\234*\275\263J\371\275\225-\227\275%\273\215\275;\255\305=\314\356\342\275\306\260\n\276\3454\"=YB\035>K\332\016\276\201\202\007\276\325q\n\276\220\376\234;s\273\336\275\373\327\327=\013\264\025\276o\302\226<\324\247\307=\016\305\302=\272\226\007<\237\362\017>u\002\013\275gK7=\215f\302=o\207)=\212\254\215\274\277\361\350\275(\205\030>\367\177\026>\364\\;<\352H\017\276\356\377\301=eI\026>=!\272=\245Y\002>\005\261\351=\327m\030\275\267\2431=\001\274\224=\304\310\027\276\232\365\001>\377\353\035\276\202\200b<\021\202\305=)\027\017>\215\241 =\010\302\007>\\\037\325\273\025\r\372=;\322\314<\303\325\000\276\240\t\360\275\266a\355<n\346\373=\323\311\225\275\2405\273=-\033\022\276\276\231\233\275RI:\275~YY=\361\327\221<%\212\030\276\232\023\002>\317\342\254\274\212\223\272\274\026\315\215=\355\305$\275I\207\226\2748,\005\276\361d\303<8&\025\276\010\316\242\275\204\255\343=\340\\n\275\306\022\001=\345\007\266=\371a\321=\017B:\275\220\225S=\2253\034\276;\003\220\275\371A\216\275g\241\024>\365\033\353\275\361>8<&\226W=l\217\027\276\304\364\027>[~\354\275\'\3678\275\003\215\306\274\352~\314\274\236\177\354=q\200\025>Q\200c=9\351\000>#\263\031\276w\234q\274\231i\026=D\240\t\274\277\034x\275^<\237\275\210D\246<\241@\342\275b\340\277=\234\324\023>\024p\221\274.-\005>\3735\320;\304\355\016>\335c\365=\030\311\322=\245;\335;i\216\323<\271\2702=O\352\211=\240\212\020>v\303\377=+:\300\275\3651\003=\233\327\027>\273\225\036>|\364\213<P{\006\275\264\204\363\274\363\207\365\273n\341\213=\263\313\030\274Y\233\013>g\265\375\273\203\223\025>\336_\230=\001\221\307\275\211\262\022>\342\364\355\275\024\246\016\276\276\033\236<W\364-<\307\255\272=h^\253=\370\016`<\250|\022>\351\372\277\275K\310\267\273\306\274\316;\354\272g=M\314\345<r\\\372\275\210u\014>A$\034\275\343u\255<\177\035\232\275\3047y<\2417\220\273\300\3433=\277\356\307=\242\360\003=\373r\225\275e\272\001>X\030\034>\014!\034=\022W\331\273xn\373\274\017\003\351\275,\225\236\274[\344\373=\303\361\000>\351\316~\275\007\316u\275\305\246[=y]\000\275\233^\351\275\347\246\272=\360\224\223=\333b\013\276\010\263\253<\257\250q\275\373|\337\272\351\347\233=\230\370\030>Se\227=\010\031t\275 \223&\275;\020\305\275\253+%< J\231\275\264E\375\275Vx\352=*\364\243\275\331\022\227=\322\024\330=uO\r\276\350\333h\275{n\023>\334\357\311\275\333\030,\274}\377\021\274\273N\367=\360\221\353=\334}\037>\247\202\373=&\212\204\275I\364\324=\305S\023\276\356\262\363\275\251j\377=\370J\020\276\315\024\234\273k%\314=d$s\275x\342\375\275I\270\345<2s\272\275\261E\006=\224P\270\275\360\215\216\274\353f\254=!\026\023>\003Q\307=$M\375<\273/\246<\216\226\254\273\215r\347\275g{\021>\3070\236=\2469+<\312 \203=\357tx<\027\264B\275\211\222\305\275\242\340\324\273Z\016\031> \364\236\275\317\t\366=`\000%\275\200\231\000\276*L\031>\002\261\365=\234\255=\274\241\223\221\275\024\033\377=\206\346\374=\247\335\250=C\335-\274-;\206=\346\260R<\3720\007>R:@\275\r\240\030>\003\371\247\274\272\r\374=\022\334\341\275\007\010\236\274\267\246\325\275\021\264\022>\266\266\022\276\362t{\274\200\311\034>\262\366B\274/`\310=}e\022\276\007\255\022\276\2005\230\275\345s%\275w\016\273\274\364\023\301\274\335\205\252=\324Q\366\275*D\017>5\250\322=\017J\241=F\007\001>[s\347;\311\274m\274\007\036\037\276\320\000\006>G=\372=\326\341\031\276\320V\037>v\272\262\275\321\365\270=\204\312\035<\020\310\374\275.yl<0\213\026\276\331\327|\275x\330\361;(F7=*\226\000>(\345\356<8\232\336<\263pX\275\311\2645=]\236\270\275\265\374\356\274\240\355\n>\0137+=\370\274\206=\243m\027>\363T*;_\253\023;\000P\r>\262\221\243\275\201/\333\275m\r\214=\251\253\336\274\373\322\370=\371,\364=jv\342=\177\323|\275 S\312\274\014z\262=\2209\r\276\337\326\340< \275\337\275;\336\021=^\214l\275\327\026\325\274\0361a=*\205\013>f\232\370\275w7r\275P\363\321=\351\307\336=a\025\016>\226]L=\004\024\014=\201,\226=\333\266\n=\330`,\275\376\327[\275\222\354f\274\216a\236=n\033\321\275{\204=\274\225\230\363\275GL\304=\347.\252=\246\323\267\275\277\344\217\275\006A\010\276\2346\016>\360X\211\275nT\377<\331\017\376\274\0007\237<\205\0164<N\013\020>\302\034\002>\3176\007>\224&s=\010\250\031>\342\032\007=\375\360\026\274\347#r\274\017e\035=\305v\353=c\333\'=rL\031\274\220d\207=\245\325\207\275\222\035\307=d\223\345\275\355\030\241\2757j\013\2768\031\312<\247\254\301\275az\005>\\e\016\275\375\372\r\276\365Q\311=\333\024X=\256o\003>-\335\n>g\t#\275\367\020\001\276\031!\000=\274\312\022>\326S\037\276\210\277\030\276\261\n\014\276\371\253\226=E\374`=}\340|\275]\252\303\275\2132\243<\275i\363;\007\237\256<_{\003>\375\"n=>^\272=B\247\363<\374\000\005>A\326\300\275\352V\242=\207\345\225\275\025\357q=0b\365=\260\'\031\276\270\364\r\275|n\022>\304\247\340\275\244{\t\275c7r=\276}\313\275Fj\360\275\310\304\200=\327\334\345\275\001\017\\\275W\262\251=\326;\334=BMW\274\tO\026\275\005\263\315\275\2755\371=\016\272\323<\302\342L<\245?\033\276%O\020\276\323\301\263\273\005%\006=\221*h=!\342q<\214;\002>\276\010\362\275!\002\013>\342\377\237=@F~;>\326\251\275\206\334\267=\n\365\201=E\343_\275\207\0214\275\363\016\360\275\020!\366\275\365\327\377\274d/\353=\237~\037>\366\032\312=\203\261\230\274&q\331\275\000\312\313=\027\274\201<\261S\"=\370\332Y\275$f\373<\376\020\360=\2039\026\275\001I`=\2423\035\276\212\200%\275\374\340.=q\375\234<\032\267\"=\004\007\317\273\307F \273J\270\227=\264\302W<H\210\032>\275Y\013\2767\306-;SW\026\275\250\250\304=j\020\r=\236\357\272=\337\201\020>\031e\221\275\264\245<=!!\000\276\253N\300\274\014\356\313=\004@\341\2728q\003>\0170\006>A*\325\274\257\251\"=\250\330\016>\262;\335=\317\016A\275\332\262\206\275\340\256\237=\301X\254\275O\304\345=\321\326\t>\377\377\327=;*\037>\375\347\307=\313\263\310\275,\233\027=\220Q\341<\301pc\275\207\3514=\344\350\315=+\223\024\276\310\000\210\275\013C\034\275\364 \003\275\375\032\333=\211\333{\275\257Q]=$z\251\275\363<u\275S\2110\275\2333\234=\007\260\260\275\267\210\034\276\"\336Q\275S\216\002\276Q\334\n=\030k\231\273\337\266\027<\241\344\335\275:\0210<hv\373\275\022\343_\275#\035\017\275T\024z=\243Z\031\276\313\320\006\276R\"\345\275\333\307\273<<\226\t>\235\2775=/\272c\2754\233\017\276f\345\350=\352\267\234\275Jr\377\275\r\352\230=\326\324\013\275\226\353\016=\263\005\305\274.\325I\273k\334\013\276=\222\201<EQ\037>\' \330=EN\032>\264\241r=]\t\363=\"\216\034>s\227\350=\022\341<=B\240\346\275\017\332\313\275\250,\001>3Y\007\276`X\000\2768\t\245\274iJ2\275\002\346\326\274\352n\016>\r>\023\276G\316\000\276\242E\033>\365\303\017>\265\374\356<\221\333N\275)9\244\273\376:b=@\366\364=r!1\274^=)\275\236\223\273\275s\313\017=\321N\036>\367\304\232\275\243\375\237\275\272\332@\275\262\215\323\275\010\243\355=*\276\240=\365(}=F\270\372\275\367T\306\274\010\261\036\276k\310Q=u\311\353\274,\227P\274/\317m\275.\203\035\276\264R\034\276zm\330\274\243&\r>\362\223\234\275\355\006\267=,\374\341;\377\307\266=\363\022\333\274\034\002\217\275\027\367\325\275\"\370\026\275A59<;DT\275\327\374\344\275\325V\027\275\313\276\005>n,\201<\366\200\205\275\305L\022>\260\360\014\276\216;\034\276~\2606=\352g\310\273\264\336\237=DN\231;\022\324\243\275\260U\202\274\326V\372\275\313\203\324<B\257\r>u}!\275\363\236\n=\023\254D\275\216\215l=\220\004\027>\252\007\223=\265\303\014\276\\\362\264=\2469\342<xw\003=\225\207\210\275\001-\205=]%;=Qe\212<\34403\275\374O\313=\254\017^=\007\377\\=\320I\033<\230\014\357\275\265\037\262\275j\355\017>\353\315\354=^C\035>\224\224\006\275}\203\227=\234\326\314\275\371Wz\275C\353w\275NLM=\364e\360=\264\013\212\275~\242\023\276\240\342D<L\366\262=\334S\240:c\353\'\275T\215\300\275\200\253\375=A\246\253\275\312%\321\273\007\255\361\275\261\345\036\276W\243\n>\310k\013>\364\215I\274;\365\271=\234\026\211=\347\325\033\276\316\034\232\275\214C\002\276\253p\232\275\027b\007\276\221\275>\275\203Z\230=|u\377=O%\016>\375E\002=K/E\275R%%<) \360\274\240\335]\275\321\243l\275\266\277\326<\216\t\276\275$7\275\275\201{\232=\316\024\037=#<\r\276\302\265|\275\"\274\231=\200\006 \274\323\257\005>\300\206\332\275\336\243\377\275\334\323\204\2759%\231\275%\300\222\275k\303\025\274e\336\346\275{\243\250\275/\204\311=\243\332\357<pd\026>\034\311e\275\324\275\303=R\317\373<\255\253E\275\321\245\000=\304\356\345;\367\2228=\364H\316\275\350\325\323\275\ttO\275\323\021\334\275\375\351\315\275{{\254\275\272\2626=x\310\035>\317g\t\276YH\032>ae\253=\215?H\274\255.\376=_\250A\275\230\'\243=\221\361\005\276)\004\310=\312\037\256\275\327\227\212=B@\375=6\253\036\276\275\363\343\275\372j\342\274\"\306\003>\340\275\"\272\227\003\350\275\276G\026\276x\2441\275pEI\275s-\010=\216\267\025>R\360~=\311=\200\275\302\273\\<\355\372\034\276\261d\324\275f\327R\275\322\2647\275\333|\300=\315\265\022>\206\003\367\275\340:\346\274\025y\024\273%?\217=\240)G<\324XQ=\352\237\344\275\255\347\314\274#\212\035=)\356\212\275\322@&\274\372v\210=;\300\362=\035]\363\275~D\325\274\333\373\207=g\214j9\316\377\203\275\001d\030\276\006\t\026\276\266\034\200=E/&<-\215\020\2764\361\017:\243\312\020>\254w\r\276G\200\354=uV\214\2756&\307=\231\020)\275\244\374\264=\021k\346\275\360R\330;Y\224\030>\357[\031\276\031\316\361\275n}\033\275(I\033=\270\356\031>\344\242\367\275\004\026\336=\225\235\027=Id\340\274g\323X=\312\304\277\274\271\216\242\275^\003\342<\321\201@\275\235Y\"\275\377(\027\276(\215\303=?\307\335\275\300\202\024\276zQ\353=\354\312g=\347;\345=/\324e\274\252N\331\275t\373\017>\3535\251<\322\351\276\274\377\327X=\3138Q\275q\247\005\276\2143\365\274\371x\267<f\330\361<E\330?\275}\000\315\275p\352\252=MS\257=\007\006\351\275\226O\214=\021_\246=1O\';\370r\007\276G\272S\274\270\305\017>\277n\271\2757\211\026\276S\376\236:T\251\021=\243\260\337=\001\212\211\275\361r\204<\320\270\243=\211\324\241\275&\213\367\275\370j\232\2753,\216\275\013\245\360<\270\236\025\276\235Hj=\020,\024>\214\375\330=\243\221\026>l|\224\275t\234\212\275\350#\321\275\214\334\000>6C\017\275\326\364\207=5\241\200=\264@m\2758\216\316\275\336\212c\274x8\001\275\263l\332=\\\026\351\275\364\'\243\275\301\335\262\275\320\266\"\275\233r\017>\312S\030=\213>U==\371\252;\215a\254\274\267\345\005\276+\tn<r\326\231=\262\273\226=`\375\341\275\350\002\360\275xN\254=\252af\275\226\227\227\274cq\023\276C\316Q\275\324\271\214\270\361a\256\274\331{\236\275C\317\377<\356^\212\275v\343\302\275_\374c=\\E\177\275\356\267\304\275\333\\?=\267,\325\275.>3\275\211\276\t\276\007\221\261\274U\034\253\273\027\326f=\256b\331=R\352\024\276FV\001\276A\323\206\275\324\331\307<u\347\374\275\010\2660\275\307\004\001>\262\304\366\2750w\212\275\242C\340\275\320\3337=)\322\347\274$\2479\2751\r\377=/\034\274=.G\213=Z\223\036\276!\2773\275\356\375\027>mC\341=\216[\000\275\225\024/=\002\236\233\275j\273\251=\315+?=\260\244.=\376\031!\275W,\346\275\177%\353=\305\030/\275\221\tm<\371O\316=\371m\376\274\2775\212\275\253\365\025\276\343\314\006>z\230\246=u\030\252=\254\014\353=Y\270\317\275(\372\t>\260\t\376\275\312\177I<\221\352]=\263\007\312\275\350U\304<\261\210\204\275G|\310\275\252\254N=\2006\275\275\213\374\266=\ni\350<\365\342\247=\031}\242\274\307\274\001>\371_\332<+\306\306=\013\2449\275\326\030\006>x\341\365\275@Iz=E\035\260=\213>\363\274\371\361\210<T]y=$\205\207=\255\305k\274\317\002\000\276\034\023\223=\307d\377\275\345y\262\275\302\305\332\275&\0243\275\2327\006\276\230Y\364=\212\036\034\2765\235\274=\201\002Q\275R\207\235=g\320\250=>\016\252\275\270\326\374=\t\364\n\276\2353\371\275\240V\235\275\324\264\305\274\r:\361\275V\212L=\024D\001=z\323$<\021\001\030\276\267Z\354\275\007T\251=\316\251\003\276\353\251\022\276\334\025,\275\230\255==\005\377\365=\245\266\354\275\0141\262=,\007\317\275\rG\337\274T\242\236\275\010\320&\275\256\364\024>\017`\006>\307\261\344\274\336\344\331\275\316[\301=\345\261a<\346\372\243=\316xg<r\326V\275\"c\203\275\300$\272<\017T\320=\352\367\262=\227,\310\273m\262\275=\\\377\273=%\233j\275\276~\026\276Zo\305;\202\314|<\302\265\032\276\003\225\031\275\270\347!=C:\336\274<\272\022=\243T\250\274\177\300\376=?\'?<\3121\267=\033\215\024>Z\243\252<z\223\357\275\330k\321=mg\200\274\207\302\222;\207\305L=\034\336\266=\270\025\334=.iU=M\226\214\275qQ\251=W\215\362=\017Q\276=\277,\274\274e\322\341=:\351\262\274\262@\300\275TQ\246\274d\343g\275\026D\235\275\356\242s=\3075\354\274\025\353\2478<\350\223<\273\237\251\274\271O\360\275\375\346\331\275>\342\006\276C\352\322\275\005V\031>U\202[\275?\314\321\274\306\252\216\275\357\265\371\275!\007\344\275,T\255\275\"\203\263=2\250\013\276\277\007\027>c\\\334\275\371*\226\2753\310\212={L0\275\247_^\274\264\344\344\275qO\312=\272\260\325\275Y)\032\276\351\217\025<\3528p\274\246H\203=\025\353\302;\260\235/\275\270<\372<\001L\306=\272\325\026\276\334\3708\275&\007\316=\244\260\n\276\353-\346=\007\277\n\274\324\016\003\275\313\"\016\276\367\254\252\275\225h\306\275\226\326\237\275\353f\021\276r\271\375\275\320\201i\275\205z\032>\341Z\375\275k\323\000\275zqt\275q\032\003\275#`S=q\265\246=\312\0254\275\032\332l\275@M\224=\251\305\353=\322\205\377=\357\266\277\275\251\032n=<\246\024\274J\032k<yi\007\276\306\371\247\275\221\220\272\275N\221\335\275\320\247\343\275,\005l\275\225\202\262\275\330}\337\275\031\"\\=ZY\024>\245\325\376\274\210\333\017\276\202%\n>-.\332=_\r\305\275:\331\227\275\027\236\343\275\220\202\026\274\334\244\022\276D\226\224\274\366\363\022=\310\224\261\275?Kf\275Z\211\312=\324\214\345\275\253|+=v\251\230\275\3507;\275\324Z\374<NA\020>\332e\210=\022\025\004>\025G\341\275xm\252\275y)\323\274\r-\305\272\020}\302=\203\335\261<\347*\036\276\347\214\300<\316\031\013\273Z\223\347=2V<;\211\201\023=\003:\020>4@\005\276\266\351\030\273\271Y\356=\273\377\223<\205M\303\275+\255P=\037\201\026\276\2462 =\n>\020\276\033\333\317\273/=z<\315\304\244\275mO\027>B\276\247\273\350\n\002\276\205\031\"=y\201\013>\271`\245;X\265\270\2753\035\360\275\302\327\037=h\013\371=\344~\337=\247\227\311=\240*\326\274\266s\240\275\315\324v=\220N\014\276y\337r=\256\033\247\275Q\340\251\275A\255\226=_@\031\276\322\023\222\273m\325\361=Q\005\307=\205\373\033<:\253\214<\345\276\207\275\271\212:=!S\037\274H\377\277\275\005\006\322=\301\256\216<\212\241\002>\353L\235\2750\202\t\276\360\t\354\274 F\341=\021p\271\275\371\203\325<\003\241\032\276\315{\342<\323^\231=\230F\353=TM\240\274\233\373\366=\200\324\"=\222S\256\275d\252\007=\226\324\001>,\200;\274\221\256|\275x\212\006>\003t\032>\\\n\344=.\355\225\273\364\217\241\275\0062\021\275+C^=}\230\000>\352\342\004\276\310\356`\275\364\366\215<8\017\226=A\352\344\275o\335\310\274\263\324\026\276\010\354\371\275\234\376\274=\311X\351\275?\025i=\0025\370=d\230\237;y\275\263=\241\337\027\276\037\312\240;\224/\252\275e\246:\275[l\n>\323i\316\275\374L\024>\225+d\275\267\235=\275]0\r>\002+\365=C\230\352\274ckZ=\322\t\305=Y\225\034>\016\342\206\275\2335\237\275\360\361N=\372}\230\275/M\207\275\325#\030>\221^\373=\003\354\254=je\034\276\010\371\262<(\302\300=\311f\363=\013z\231=)P\333\275|\365\033\2766\226W\275\021\265\317\275\2667M\274d\010\313\275\232AZ=\334\227\010>O\370\301\275r\020\324\275\216\026\025\276\326\254\236=\334 \263=\245\316J<\203\256\206\275\306\355\310\275opo=Y\250\010<\033\277\n=\327\264\230=\'M\035>l\252\255<\177\357\351\275H\371\001\274HC\321;\336*\314\275\"H\037>\362+Z<3\277a\275\240\374\304=\345A\312<\177\177\346\275\337D\264\275kyd=D\346\n\276\364\n\311=\013Ev\275V\323,=|\275\224\275d\343\034>\333zR\275\335C\252=S/\377=\021\250\035>\025\177l\273\341\312\330<\277q\220\275\326_\035\275>\306\317\275\342\253S<EP\331\275\023\353\316\275\025~\260\275\235/.=/\217\202\275e\234y=dca\275\314\276\005\276\276\227\306=O\370\364\275\377\214\301=r$\245=\254\026\375=/]\031\276\365\312\002=\203@\277\275_\331\016\276N\256?\274]7\r>Ie\234\275\334w\371\275\263F\251\275g:\357={b\215\275\261H\332=\361\254\000>\355A\301\275\260\264\301\275\260A)\275]\221\270\274\266\213\202=\244m\257=\224\327\013\276%\033\276=\267\306\314< S\223=k/\034>&\337\263\275k\233L\274\272\271\247\275#\032\031>\273\201\373<\253\352\345=\'T!\275h\312\375<\206\321\177=\3160\224\275WV\333\275%\023\017>\252\211\212<\234_\025=\356o\034\276\273\363\003>so,=\224\305\006\276\376\003\356\275\314\212\306\275B:J=\240\333\255\275\372\325\312=\017*\237=\332D\022>&\006\201=\266\263\010\276\306\201\242\274\303cl=\031\024`=\354\257\002\275\226F\224\275~\035\365=\214\202\325\274C\007\313=\213\373\010> z\364<\242\370\030>\023\352V=\267j\255\275\n\003\210<Q-\005\276\266\247\013\276\2238\036\276o\265\350\275\000b\346\275\302n\017\276\305\256\235<3C\323=\245\207\273=\310\321\205\275\200\003\r\275oK\361=\215\326\215=\273\341\273=\364\323^<b$\340\275\332W\014\276\"\n\272\275\313O\352=\253\204\234;\016\326\006=2\014\022=o\010\t>o\270\226;\310\001m= o\030\274WG\336=z\223E\275\371\203\271=\031<\210=?I\373=\224\226L<\240\224\353<$Y:=\005\343\026\276\345g\004\276:Q\224<\301\003z=P\243\327\275\364\223\344=\352\355\320\275\002\316\374=F\353\004;99[=i{\r>H\201\276\275\003\0209\275\005\030\334=\202\030\212=\201\304\017=\220\273\245\275nC\243=\014&\021>\2167/=\010\210\236\275\237-\033\2755:\007\276\246\374\022\275H1s\275\216\021\036>8\321\324=q\034\034\275\202\326\035>\r\034\354<\206!\344\274\025\240\273=y_5\275\341\215\r\276]\261\266=\001\004[\275\253\321\254\275\036\242\235=\360\327?\275Y~\354=\212\031\310=pB)=\255\346\342=\006\034\215\275:\373\002>\342^\036\276\226]\t=\310\375 =\365\013\332\275\027yL=\014\007S\275=7\373\275@\327\025\276\n\316Y={\267\177=P\364\277=8\244\346=\307\032\301=\373\233 \274\225G\037>\262c\271\275]p\020>\230\002s\274\253R\007>\356@\313=\367\276\316<\373\033\017>\222\275*=q\362\337\275\212\305\231\275\344\367\252\273\252\0227<\303=\372\274\260LB<\260\232\210=\364C9=\340\014Z\275\377\'\033\276\201q\001\276\246\030\t>\277$\250=\003l\320=\r\221\375\275f\006\005\276\001=\035\276\305\316\r>\3075~\274\211?\222=\246^k=\016\322\330\275TB\335=\007\265\373\275\214@\010\276\211\356\236\275\356m\211<\271\253\266\275\220\336\237=\021/\206<\2226\340=\226\233\335\275\375\354B\275\302\202W=\007\270\217\275h\013\032>\013G\377=u4\030\275\265\204\335\275\0030\227\275\032r\361=F\331\032>H\303\r:\017\272\316=\266\224\242=\307\322\333=y\266.\275\215\242\340=\301\306\210\274\024\274\212=U\370\365;<\244\216\275\007\003l<~\003\272\275]\364\322=\tY&\274\377\334\236\275Gg\034\276\262\341\267;}\251\033>|\364S=\030z\237\275\273\0016\274I\352\373\275VB\242\275\315\366\232=\032\202\226=\033m\336=\020\307\232\275S\224U\2752.p<\252\257\026>\001\006\247=\220>\t>W\243\177=\373\304\250\275G\032\026>o!\375<\024\356&\274\331<g\275\342\367@\275\267p\345=\246b\333=\250bh\274\202\363c=\322\273~=\322\230\022\276C\260\227=\375\220\030\276\220L]\275=5\025\276P\334\336=3\353\027>\006@\020\276\240\037j\274H\336\025=C\334\304=\037\n\316=\034\001\332\275\360V\031>FF\201=\316\354\357\275\317s\212=\206n\213;\375\305q=\351^\335=\3275\325\275h=\032\275\235\231\276;L\243\214\275\201\017\346<\221&|=\367\027\251=\324\004\266=\315\033\200=LJ\246\275\377\223\"\275\344\312\360\274\331\257g\275B\n\n\276\010\210J\275\332\343\346=\003\\\032>\254\215\201\275[\363\037\275\010\317m\274\016z\\\275\327^\246\275\",\013\276\215*O\275A\210\332<\020\275\031\276\017\'\220\275?\265\023>\0368\245=\031\363\336=\t\347\246=zOG\275\301\225\250<\272\r\371=\343\210\211<\25427\274\236\231`\275\2636F=\005\352\027\276\312\014\033\276\365\3025\274`\017\260=3\217>\273\223\177\036\276\265\346\014>\027}\366\275\311\337\371\275\235\335\241\273\332\010\312\275\201),<\213\020\017>p\031\341=\326}~=\302\202\013>\301\315\314\275\316\357\t\276m\240\217\275\306p&<\307\212=<k\276\277=\036Y\021\276 \021\370\275\265QS\275\351\302\342\275r\201y=\347\244\014>h\037\025\276\326\376\022\276\275\247)\274y\023\205\275\270\274K<[\305\376=\275@q\275\375\225A=)-\221=\212\266\367\275\361\243%\271\235V\213\274\001\340\007\274\260\345\271\274L\005\005\275z\340\007= \001x\275U\322\236=\347\004\373=\025\241\224=\335\201\006=D\376\004;$L<=\010b\373=\260\360\247=\026\216\372\275p\325\275=\351\262\361=K:5\275\264+\014\276Lj\243\275/M\303\2741s_\275-\257\001\276\004\314\242=\241\310\005\276\343\375J\275|h\033\275\322(\371\275W\356\027>!\273\223\274\346\035\035\276|7\303\275q\307\013=\246\272\016\276\3309\377=\001\357\325\275\325.\024>\3368\311=;\372\006\274yF\020>x\010\325<\277\225\305\275\326\005\025>k}\022>\276\005o=\026S\252=\265\333\035>\256z\311=\217i\310\274\006\007\370;ey\204\275\024\203\253\275RWL<Om\252\275\2601\005\275\037\n\005=\335D\233=\327\005\017\275$\242\357\2754@\021\276U3\337=H\216\336\275\035h\'\274\250B\207<\231\031\203=\247!\037>\3068\215=\230U\303=d5\022>\353t\032\276\366\335\262\275\344\ri=\351\220\366\275\340\200l;\2442\203=a!\013\276ic\202\275+\274c\272;\352\n>\247\242\311\274,1\277=?N\205<\327\263f\275P\201\374\274\245O\361\273\324\031\020>\016\247\035\276\202\327\342\274)\246}=FY\374=\222]\373=8f\350\274\353t\n\2769.\247=\311\321\354=\314\277\370=\306N\n\276\252\310\326\275\020\031\322\275M\373\031\276h53=\206\203\231<=\376\237\275\037\262\346\274=\322\355<\353\323\007=\274\013\326\275\0238\003>h\025S=D\036\024>,\365d\275_b\313\275Cj\027>)\317\030\276\337.\372\275\224~\r\276\233\255s\275W=\016>\214gS\275\217\357\252\275\303\017\242=\275F?\274\242I\243=\031\034\346\275\265+\365\275\343n\273<\272v\365<\364U1\275*p\362\274\035e@=\241\267\226\275\311\232\031=;\251\020\274\230\350\237\274!F\t\276\360\213\200\275\'\016\340<\306}y\275\255l\305=\301[;=o\000\245;q1Z\275s=\237=\033\002?=\355[\014\274\267m\304=\333&\361=~\357\377<o\342\247<\303\230\306=&\'\036\276\231\251\034>\021t\240=\030\213\026\276\021c-=Q\2351=\335L\373=\304\340\027\276\307\242\210<z\206<\275\255\332\n\276\306m\226\275\016p\222\275\177\236;\275\315\n\242\275\021$,<9\236\353=Y0\350\274\242*\220=S\006\225\275\241<\301\275\241\331\022\276\346\323\340=}J\006>\301\347[\271\325\006J\275\tM\243\274\333\260\203<oo\253=\277U\025>X\243\004<\235\216\360=\302-\n\276Z/\210\275\026\351\017=\253\177\315<\276G\313\275\256\250\203=^\355\032>\222M\305=\322\356<=\022O\317\274K$\225\275\016\247\017\2764\270 \275\254\rU\2748\235\230\275\323\262\234=uE\256=UU\362\275\301\304\346=\353\3640\275\277\322\004\276\260\320z\275\316]\317\275m%#\274\r\325\200\275\255\351\023<\344\223\007>\334F\334=\001\234\t>\250x\223=\271\321g=vg#\275\027f\013\276?7\036\276\306\264\261\275\264\316W\275k\001W\275\237h\337\275\014\237\346\2759%\006=*qg\275\n,\216=2\324\201=\270\304\004>\262\371\253\275%\220\377<\220\214\002<i\220\020>7\005\026>\3438\222\273\t8\005>J,\001\275\014\231?\275\252\362\253\275>\253\034=\355\325\336=\023\263\312=R<\237<-\361\326=\205\3236=\010\323H=\t+\321\273\367\021\310=3V\021>si\206\275\313\336\302\274\235\230\260\275f\226\232=\230\277\t\276\2026u<8\205\243\275\007\220\222<\rO\005\276\344^\n\275\367|\325=\376\273\014\275\347\352\376;a\303\206<\315(\026=\274=\007>nD\033\276fy\311=\333\005\266<0[!=\203@\221\274G\200\262=\262\212\346\275d\017\334\2756\304\032=\324\\M=\033\217\247=\000\372\026>\036\255I\274]\224\351\274\265x)\275\304\225\362\275@L\037\2767\356\374\275\3355\255\275a\350\377\275\0233\264<\016\357\371<\036\2422=\027\220\326\275\234\232\251\273\355N2\275\222\221\324<\244\212\037\276\302F\224=\243F\340<\230QE\275B\311a=\344i\337\275\224\244\315=sL\032\276\202N\265\275r\342\236<\021\037\007>\347\355`=\'\241\364\275\312}F\275\241\003\203\275\350\236\017\275i[\010>\203<J=\003\027\026\275\033\241j\275\206\314t\273\217\253\244\275:\224\021=f\304\353<\225by\274\267t\303\274\324\341\r\276CD9=#q\357\274\025\253\253\275\376\243p\275\276\372\026\275#}\250\275\271\3027\275\234\243\032>z1\277=)\nA=\206Z\205\275\334\272\260\274W\276\355<W<\235=\0107\323=\367\274\232\275\332Y\000>/\366\330\273\270\260\362=0\377\002<\236\t\356<\312\364\310\275Js~\275jT\360\275\323\275\005>:z\020=ug\262=2u\231=IkS=y\023\243\274h*\267=\363\223X\275\013G\213\275\345=\325\275\376g\271=\370\002N=\230\323\215;\316\217H<\317\305\005\275\231k\032>\312`\220=\002=\325=lR\037>\243\374\236\2746Q\201=j\361\010>\372\266\r<n\017\263\275L\010\213\2752\271\245\275?\313;<Z$\026\276|\307\t>\033\030\355\275\247\207\275\273\260}\332;\336\3640=\211L\221\275\372\'\345<8\274\337=\247\324\314=]9\030>\225,\033>7V1\275\027\330\022>\324\204\316<\364~+\274\367\240\371=Y\323\213<m\336\030\276\352A\324\275\313U\021\276\341\310\025\276\247\004\324\274\016\003\031\276\331\364\026\276_\317\220<av\030\276\004\316\321=o\216W\275S?\312\275Q\354\356\275\211AP\274m\024\n>\246o\211\275\344}\033\276\370q\017>7\303\020\276\242\350\004><\034V=\355j\344\275_\254\251\274~f\222=\360\370p=\017q\252<\355\253\n\276\325=\021>\"z\t>)\301\201=\341\314i\2756e1=\021ai\274A,\025>\255W\006>x\265\024=L\n\362=\364?\013>\275\014\202=\363\224\354=\220\243\t\276\030\252\267\275\244Ua\274\213\2663\274\336\033\267\275g\324\016\275\0351\r\276-\3256=l\312\257\2756\204\031<$/P\274\353B\362=a\353]\275]b\027\275\210\213\271=\234\325\034\276\036$\026>\272\363>=F\226\210<\267I\314\275\303v\206\275\316\276\005>\250\241\010\274\021\263\025>\365\303\203\275\312\025\332<dy\235=\232@1=\206\203w<\211C\353=3\317\013>\003O\376\275X\t\002>\300\264.\274\215hI\275\247d\337\275/&k<\010N\253=\306\014\371\275h\200\306\2751\216\335\275\227C\212<\251B\240=\257B=\2746\367\323=\275[\336=+K\364\2728\363e\275}[\374=\357\030\017\276\2452\232\275w\302\331\274\013\177N\275\243\222H\275\325\271\257\275\014\337\300\274.\177\270=E\326\353\275\026\260\031\276\005`<\275\020\023\007>\276,\251\275\362\023\271=\261\261*\275\2544.=\257\222\037\276\267\255\314=\367\256#=[\246J\273\340\207,\275smK=\234\274\351\275\032\177\251\275\260ro<&\311\351=\310\367\214\275\020X{\275\375\205\211\274\035\037\251=Zx\256\274\312\255\230\275l\250\034>\004\002\340\274\317\347c\274\340%\235=\377)\230\274\017R\010>o\n\356\275?\326\240\275\264\362R\275\256\366a=\335\367\022>vz\325\274g\"l\275\325\317\004=\367\356\351=\361\361\324=\302Yd=\200Z\036>\353,\271=0t\t>\266\274x\274\303\022\241=|\346|=\007\312\254\275\311\304\344=\263\323\276\275\360\374\312<\322M\362<\372F\026\276l\022\266\275\310K\223<\327\"\343\275c\313\351=\000P\206\275\345\t\020>\226\211I=c\267\363;r\276\036>\312\306=\275\313]\000>\364}\326<\240\377\022\276\357\324\365\275\325\362\t\276A|\255=Rc\201=q5a=D%\377=$\231\366\273\241/P\275\262\211\265\274\035\302\001\2762\344\336\274\363\255J=\247=\004\275*<\364\2756uq<a;v\275\352\246\357=Q\306\003>\\\327\025\276\216Q\n\274K\007\216\274\350e\272=\254\n\263\274\351\361\261=\335\336\010\276\254\252\374\275\3414\307=\323\211\344\275\032\0256=9Nh=\2368\003\275\026K\351=\272\217b\2739H!\275\333@\252=\005\204\237\275\275=\335\275V\365\017>s\317~= \3357\275C\203\361=[&\026\276Ws\232;\321\201\300=UE\230\275\326?\205=\212\326\277\266\177J\001>\223L\234\274\252\242\224\275\312~\320\274NBV\2749\214\245\275\261\000\n\276\0208\343=z\363e\275\343\270\317\275\272\361\020<\346\225\310\275\276\274\244=*k\277\275\375\346\351=\021\202\312\274\275\344\002>\202l\230=\376S\005>\017\221\356=\021\320\252\274?\300}\273\345W\331\273e\223#\275\320\205t=\266\314\253=\264\374\020>\223k\035>\375\273\"=\264\334\t\276\340IT\274\206\374\315\275\021J\030\276\3177}\275\302 s=\036\370\265\275\241k\247;|z\030>\277\371}=)\034\001=\206\213\215\275r\205\031=\343\336\202=\336^\357=\365\n\026>\034@\361=P\000\334=\006\177\025\276\353\311\275\273\316\265S\274\376\327e=\017\210<=\320\316\367<\257\343\257=\210\034\276=g?\032\276\316\337\261\275\202\003\317\2750\002\024>\334\225\307=\211\337\n\276\332\256\315<}\263\324\275\336S\026\276\370\374\211\275\243o!\275\251&\242\275Kn\261\275\376\371\n>\244s\245=\330W\007>\007\331\362=\021\256g=\032\013\007\276\344\307\232\274\207\r\243=>\210\202=f\034\r>_\224\212=\252\202%=B\262\017>\033\303\227\275;\231\274<\033Q\354=\367y\014\275\321\267\021=\260\342,=\312\336h=\2425\376\273H\223(\274k\346\203\274eE_\275\213k\005=B\031\230\2751\312\010>\216\200\037>v\202\272\275\226.\237\275\337\002u\273\265\376\034\276s\276\263\275Fs\326=\361\337\252\275\243k\227\275\204\004\025\276\266S\013>}\356b\275?W\001\276\252T\215\275\372\370\037\275\006\250\036\276\274\335\305\275\\7\242=\001\t\226\275\034}\036\276{\'\245\274\350\264\006\276vwV\275 \315\014\2762J\344=\000\364\343=\234I\240=\275o\323=)\025\024>c\3630\275\354\301\010=y\222\307\275\236\242\024\276\352\343\344\274O&\274<\204\246K\275\257\226\324=q\210\302=\007h\007>\306L\353\275\026\325\332\275\200\366\332\275\327\364n=\037\201\"\274\303\250\031\276<\016\230=\006\271^<\017\335\261\275E\316\251;\313\271\r\276\336\235n<&\251q\275\244\312\211=8\202\255\275C\332n\275>\2568=mSO=>D\020>\362]c\275u<\223\275\210\375\023=\n\316v<\030\024\034>\342v\031>\323a\023\276\222\037\013>\365\330\324=B\307\014\273\n\324\027>=\270\375\274\230Y\311\275\315\365\225=TV\203=\224@\307\274:\313\376\273\351NL\275{\343\027=+\213\351\275\217\313\035\276\006_C=w\202\335\275(\300\275\275\206v\033\276\2756\037\276\334\300\331=\371N\027<\003\344\343=\321H\305\275\351\225\036\274\270\211\254<\032\002\017=\230[\235=\212\335\374==^\036>\031\006\021>\310E\235;;U\327\274\357\356+\274dh\203=\005\371\255=\334R\022\275\030\227\213<\201n\277\275g\037\017>\350S{=\340\264\327=\014y\334\275\230\002\034\2765\210\027\276)\245\333\2753\023\370=\250S\r\276O?\330<Z\200\364\275\343\315\230=r\353\370\275w\271\304=\033z\256\275\345\352\355\275\205\346\311\274\245(\256\273^V\350;z\356\264=\347_\255<,m\307\275\370\343\016>z/\235=u\216\036>\002\n\337<G\371\021\276\313E\222=\335\350\321\275\346\025\036>*\323\000>>1\211=:_\037\275\tH\211=\242\027\320=\300\276\275<\031\030\030\2756\345\222;\243\265\254\274oH\006>\266J\375\275\3005\210\275\323\035\337\275\224\017\024>\336\211\020\276\343\020d=\250\347\264\275n\244\253\274\203\2179\275\2772\026\276s\203\212\274[\363\305=S\330\003\276\000\202[=\376\256\t\276Q\303T\275\302\207a\271V$\355=\314\357G\275Nv\205\275\257\332\204=\310B\024>\220\251\225\275\216\270\233\275PaA=\352\363&\274\326\232\252<:\027\253<\334\347\205=<\356\260\274\314\345\271\275\001v\260=i\201\004>\231f\221\275\370 \034\274P\255\260\275\355\314\010>=\013\306=||\332=\372\257\017>\366\000\357\275\342\025\002\276&\235\252\274U\301\264=\026\307\027\276\357\344\017>N3\342<)\177\340\274!\005\031\276\360\321\277=\202\r\032>\334\353\227=\350\214\314\2747\342\345=\200+\331=\254\177\330<\203\362\017>\325\215^=\344S\201\274\\X\020\276]\023\037\276G\024\320=i\242\024>@\342\246=\345\t\311\275,\360\020<x\336\252\275\2644\202=\276U*=\373\350&=\177J\007>\307\241\224\275)\300s\275d\201\312\275\206\261J\275Z\n\r\276\t\314\266\275^\300c:\256(z=\033\361\353=G\\\203\275\226G\365=d\037U=DO\264\275\242\376\262=fu\304\275?\212]\2746\275\021\276\023\273\356\273\021N\037>\331D\274=\232E}<\\\211\204\275\366\020\377<\245\3021<\020UD\274\273KC\275fO[\274\350\303\246\275aG\264\275!e\013\276\207H\230=\332\214\317=a\231\016\276\322\276\304\275\345\251\355\273m\034z\275\315\326\032>\265\332\222<e\235\003\276\346\033\301<\336\231\344\275*\331\354\275\345\233\230=Zh\177=\023G\n>\'\'\025>\210o\232\274\366\300\026>\372\307\357\27457H\275\031\312M\275\3346\213\275\357#1\274\305A5=\0221\274=\320\000\\\274\177$\355\275,_\212<\273\377\002>\212\202M=v\006\007\273\014\343\220=\032\303\007\276{h\021\276\316\363\223<T`\206\274\341C\247\275M\236\351\275t\363B<\246\261\331\275\245\265\333=\274\251\030\276qK\333=\240\000\211\274\2624\351=\036\352\t\276\201)P=i1\225<X\256\017=\306\024\002\275\022\005\024>X\2078=\250p\254\275\365s\024\275S\301x<\205\266v\274\301\373\375\275(\236\033\276\343\353\r\276<\351\227\275\302\310\013>\310C\004>/[\230=\003\340\260\275~\261\316\275\3110f=U\364\261=\265\210v\275l\250\032\276T\177\003>4\341\007\276\004\271\013>\273\302\362\275\\\007\326\2759H\334=\310\023\225=\270\021^=\325\201\026\276\217\301\357\275Tm\237=\nc\n\276\366\334\340=\305\'\031>\r\370*<\322\027\t\276\206E\224=\376\217\333=\276|e=\315\001P\274Q\344\355=\233\266\206\275\367\265\201=a~q\275\327\253\377\275h \376\275\214\366\326\275q\206\246\274\031\020\217=|`\344\274\337K\255\275\334I\032<O\265\254=\237\264P\274\343Q\010>r*\365=\204o\261\275\237\364\274\275gy\300\275B\007\345=1\212X\275\306\036\364=\335\226\373=\342AE\275[\352\006=v;\007\275_\226\224\275>\274N=\032\250\027> xi\275\310t\025;Py\373\275\343k!=\246uB=\221@\231\275\027S\006\276\017?\037:\323Y\035=\242\224#=\213q\t\276e\016\027>A\317\312;=I\003<\366\226\270=\201\006\332\275\272\220:\272\314_\244<4(\234\275\033\001\272\275\034\375\264\275EZ\354\272>\234K\275\002\304\027\276\367\nM\275\317~\000\276\201=\027\276\220\215.<9By=\307\374\350\275b\'\003>s\213\254=^a\303=\233\034\234=e\341\306=\327\234\022=_N\300=s\351\226\275\223C\033\276\341\215\'=\\\010\270\275D/\357=\n\243\036\276E/\357=\263\221f<\240\036\302\274\214g\353\27450\023\276\342\314\033>\272\200\025>\033s\323=\375\262\211\275\245\272\336=l\224\323\275\312Y\304;\331\247\006>\014\202\332=~*\021\276|+\255= \221\306\275\241\343\241\274,\371\213=\342\2558<\237Zj\275b\256\227<\270@\225<\"r\300\275\031\036\266=6\345J=\177\205\324=V\355\\=\'B\314\275\210e\224\275{\214\217\2738\346\006>\335n\375\275hR\232<\003\327\341=o\273\365\275\260\304\231=\037\303\004>`\301\371\275[N\334\275b\271l\275\254\\\361\275\364^\364\275~\237\255\273\262j\313\273\021M\033=m\034\333<\371\311\263\275\255\363\336\274\037\256\302<\302\262\254\275\340;9\274\357=\201<\307\324\221=\204\241!\275\355\033\n=\036_\305\275\351p\367=\272-==\263\247\240\275\370\251\262=F\300\262=/\355s\275l\031u=\250\360\t=n\315\306\275\203\361\010>iSH=\227\222\377\274\310\026\265<7\331\216=\356\316\303\275\031\022\346=\315n\265\275|\340O<@\222\337=cF\233\275c\362\014>\334\017\263\275`\232\374\275\215\027\230=-\330\326=B\221\365\275\376kB\275UY\016<\313\333\003\276;\376\340<?UL\275\327\343\200=\337\314/\275$\025\020\276\2429\250=\361\tN=\273_\210<,\246\036\276\013F\003>\206\227R;\032\373\217\275a\230D\275(%\332<\276\240\224\275;\243\361\275\306\246\301\275\321\314u<\242L\257;\257\220\033>J\037^\2755\263\032\276n\367J=\246\241\313\275\231c\237\2758\306\363\274&\263\242=\342\353\337=n^I<:\"\024\276\030*\221=\362\321+=\241d}\275\330Q\270=\221\022\007>\375\325\304<\2739\024\276\030M\021>\225\340\367\275x\313\217=\027\033\007\276\373\271\224\274\256\206\034>|\303\014\274\\S\000\276+\354\021\275\312\365{=\017O\336\274\253-\342\273\205\221\001>\\b\232=\030i\215\275\006\223\030=\303\367\344\275+\317\331=\363q\337=\377p\n>\302\243\004\276\3145\307\275\371+b=\024\365\234\274I\306\034>6Y\205\274u\370\306=g\004\316=C\364\311\275\240\236 =\342\336\032\276\316\312P=gY\247\275\000\255\271\275u\025\006=m\200V\275\035\314E=\037,\\\275\3005l\275\333\035\260=\350Q\365=\302LT\275\227y\360\2758x\244=\026U\234\274\306\223\006<\315`\256\275\nY\030\276+\030\253\2759\017\022\276\023\256\016\276\272;\022\274\003<\244=!\373\230=\201\227\322\2739\020\372\274\327\334\232=$Z\267\275\316<R\275\247\031\235\275\253\254\021\276T\233\306\275\230\017v\274l\313\013>F\235\007\276\320U\275\275\241\213\207:\r<\034>\246\241\257=\0279&=x\265\016>\021Y\316=\361g\261\2753\245\306=\254s\352<I%\362\275^w\005>\036/\035>\030W\217\275`M\311=\371\311\240=\334L\217\275\004\005\344<v;j=\371\277\266=\024\306\310\275L\032(\274\211\360\014>?Y\235\274\014\021,\275\326^\360\274a\305\241=\001\323\302=\262\336\r>\212\362\243\275MI\266\275.\267\251=\270\371\003\276\201}\021>\026y\r>|m\340=N\337\006>\251\265\262<\317\264\272\275\306%\245=l\234\037=\020\356\315=7\325\202\275#\021?=\273\204&=j\301\263=\r\010\017>\323\007r\274\306V\014\276\013]W\275ju/\274\3367\343\275\300N\037\276\3053z=\245\310\304\275x\036\023>\377\033x=\034A\025\276\025\026\030>\240\273\t=y/@=m\377\031>\300\\\274=3\240\003>\030\326\021\276\205O\347\2757\227\030>\276\2568\275\001\031\034>\205f\250\275\317l\346\274I(\t>\343t_\275\225+\317\275\372g\357\273{?\005>\204\321!<\241r\225=\031U\305<\365\035\276=\312\235\303\275nO\342=\257\317\n>\034\003\251:y\347\264=\362\323==WJ\267\275\001\313\336\275iy\013\276f\216\334=ev\024=t\247\345<\257\355\206=\201\310\005\274 {\027\275~%\246<\202\266\204=/\307\231=#\325\216\275U\"\240=\241\252\252\274\367\233\221\275\226\037\025=\207\026\005\276\350\031\031>MI\217=>\306\020\275\204X\034\276\342\352\305\2751M\245=9\256\311=\375\311\337=\373]\375\275\t\204\006\276\235\275\035=) \333\275\372\'\014>\212\315G=\2736\376\275b\275\301<g\271\311\275ssW=\326\300\264=\204H\026\276\312\024\371\274\324\211\002>\232\220\006\274}\001\234=\241\020\217\274\002\377\376\274\315\215\026\276\306Z\032\276\310\261d\275\035\t\344<\203\344v\275\325\364\307\274\347\211\203==\021\007>8\312n=\014{\001>\031\263\021\276\256[*\274\237\177\010\276\237\350\374={v\013\275\374\007\366<\260\312\003\276\222<\302<dw\235<\002\253\035\276\253\'\372\275\360\177\276\275\250\232\264\274vz\225=\000\322\004>ZB\314\274S~\226\273+F\370\273\026\230\020<\321\371U\274\004=\037>\344\014\350\275\021\245\034\276\006\353\221<\343\rt\275\362\213\244\273\263\307\315\275-\315G\275\177f\330\275\234o<\273\313i\033>\256w\202\275j*\223=\014\317\200\275w\024\244\275t\260\222\275)\256J\275\375\243\321;N&\020\276d\005\320\272\2460\037>\323x\210=_\245\300=\305\230\314<\333\213\353=\231\362\265\275bD\336=\3610\233=\025\304\355\274\t4\024=p\232\364<\351\231\017\275\014k\351\275\221bW;/ \200\275<\330\030>\244\330\361=\351\241\351=\026y\304= \273C\275\2324\240\274\330W\003>\235j\333=\237\216\345\275)\316\222=\271\010\365\275\030\332\261\275\346u\316=\337]y=\021\322\013\276nS\035\276\344#\363\275QA\216=h\234J\275\372\376\305\274\216\006\003\275\177d\274<\227\223\321\275\276\001\212=\341[\036>c\274f\274$a\033>\205c\346=q\305\014\276\252\261\010>QO\374=\363\222\010\276\257l\006\276\360\021q\275\2616\335<\255\214\013>\225A\241=\255j\240\275sR\307\275\211\321U=\0266}=v\207\267=\307\254\301<\3011\r\276X\n\004\276\310\352\026\275\036\2703\275\317\207\361<\234Kn=\336w_\275\266\332\271\274\244\033\377=\304\251\033>\234\230\346<\3556\210<\002\252\017\275\000U\246\275\272\221\304=\347\017\367=B\255i=\221U\245\274\2343\217<\006-\232\275;r\251\275\002\312\022\276\320\250\317=\317\303@=\010\373\311\275\005\032\327\274\206~\322\275Xg\213\275b\271\343\274\2165\336\274\213t\267\275dP\342\275\005\017\016\274\022>\001\275\214\207V\274\332\252\001>4\342V\275\'\316}\274G\245\032>W\347\034=\365C\343=\325\302`<?,\002\276L\r\366<\233J+\275t\027\n>\265p\001=K\361\357\275H\200\207\2753H*<\300I\027>)\361\331=h-\030>\031\\\227=\204M\004\276\3555\340\275)\210\375\275/\355\333\275\362\227)\274[\325\033\276\235\330\254=\3302\354=AOq=\225\000\330<3\030\301=\237h\257\275\013\223\267\275\267V\301\275|\314\241=\276>\004\276A\035\260\275\344\366\226\275<-\003\275\261\215F=a\253\263\273s\277\t>\341\337\232\275\026\002\224=9E\030>\271\350\334\275\343\222\341\275\221:\227\275\365\371\341\275\323\347\027\276\007\210\202\274\010R\340\272\032\340\240=9m\013\276\345\215\313=\372\354\004>\350\346o\275\026J\024\275\333G\345\275\365\352\005>\206(\330\2754a\273=\245\006\207=\366Pk=\201\354\331\273\325\372\000\276k\315\237\275\374y\331\274a\255\002>Yv\n>\307\353\320\274\362\374\273=\ti\240\274lg\037=i_\336\274l\320\212<\224\275\316\275\272b\237=\335\303`=\336\3757<\332\345\265\275\346#3\275!\312\266=(\331P<\241\363\371=\350\325p\275R\226\223=3\342\230=3\005\307\275\244mB=\001|\324=\216%\276\275\3049}\275*\207\202\273\302S*<ZE\370\274|S\007=\326\305\026\276\317HN\2735\337?\275L:\273=\020\210\032>\022\003\315=\363\336w\274\313o\361=\240R\366\275s\244X\274\232c\024>ES\007\276\366S\255\275 \215\036>\343 \275=j\3441\275v\276^;\325N\252=\301\026&=\031w\375=]\'\231\275\021\352\211\275\242z\324\275\006\r\021\276\033\343\235\275\277\035\020\276\007y\026=\274\235\331\275\222L\032\276\336^\200\275\276;\340=]Z\253\274\301\221\003>;\247\302\274\001\001\367\275\307\263\277\275\320\253\332=|\264\215<\262\262\344\274\333\214J\275\221\337\373\273A\017\264;\'~m\273;D\351\273R\206\354=+f\r>\0240\332\274\332L\000<\333P\364\275\302\303\321=\260\304*\273\222\375\035>xG\317=([\307\274F\216\021>\330C\002\276\226\033\337\275>\354\336\275\274\214\240\272\341$\031>\366\275\362;\220\204\022=\033J\251\273\334c\210\275\303\202\264=\347\202#\275`\n\232\275N\346\002\276\350\243\224\275\024l\270<\002*\357<\274\031\241=^\253\223\275\204\260\014\276\335\222&=h\351X=\244\232\224=t/\234=\377\215\355\275\355^\037\275\304\240\311=\205\243\025;5\361\275\274\021\020\000>\332g\034\276\255v\020\276\037\245\347\274\274\010\223=g$\351\274\202w\001\274\361A\223\275(A\373<\026\347v=\364O\024>j\306\211\275\t@\035>\306\027\t\276\365|\323=\325\266Q=b\231\223=\361\227\277\275o|b;J$\243=CH\314\274\352\205\232\275\202\375\223;\340\030F=H:w\275Lw\305=\272\277x\275\371;\013>\0277\004>N\035\"=RGc\275\223wp\275\035\307}\275\232w\275\275\276[2\275\334\037\200\275AJ\200\275\032S\200\275rt\266=f\257\253<\257\025\234<e:\r\276c\222\020>\337\213\377<\373C\216=\352\304\241=q\214\354\275\323y\320=\000\276\360\275\310\030\367\275\230Q\007\276r{\006>\217\341\300\275\245\2636\275\337\337\210\274\325\000\237;\370O\272\274d\332\n\2710\347\301=\215c\t>\342ic\275)&\271:jx\245\275o_D\275\333\313\310<\215\n\247\274\210\301\004\276\026\250\000\276\327|\275\274\303L\324\274)3\010>\367|0\2759\000W\275\322A\276=\371(\031=\325\377p=M\371\033>\030\242\354=/4\n\276\340\013\014<>QE\274P\207n\274\321[\313=\223\242)<\341\225\365\275\323\205\373<\347=\324<-\010H=+(\352\274\002)\355\275\0259\267=$\177\361=h\357\007>\311g\004\276\225\016\276;@\251l\275\223\260\313\275\346\375\251\275.\016b\275\301j\374\275\222\222E<\323\253\227=\236\347\032>\341\330\273=\345l\t>>\343>\274\363\231\227<\242\022\005>\243\375<\275\2471\302=_{\204=\324\361\001\276]\204\005\276\205\016L=\007s\025\276l\362\n\275\341|\201=&\r\000\272\346y\004>\"\032\311\275\206w\027\276#\035\017>\376\246\263<3Mj=\376~\037\273|\323\273\274\274DS=\357\304\237=\\*\t\276\365\"\n\275\033\010\246\275\250\305\200=\270\331\214=\271W\214\275\211\210\264;\340\024\345=Y1\217=\0271\265<\353HA\275\350u\037\274\223h\032\275o\325\036>\267\246\345\275\203\333\014>RQ\306=\316\n\014>\010\311\360\275\240L\272\274]\213h\275\t>\306<)G/= \021\034>\313j\020\276\0030\316<\r\342\010\276\007U\t=\267PG\274G\240\013\275Mr\t\276\027\263W<\216\343B\273s%\013\275\316\312\352=\003\361\232\275\2200\r\276\242\362\351=\261\267\001>\355\323\336=\234\005(=\366x\003\275\211g\304<\210\243`\274\005\357\022>\031S\223=!\341\376=K9\206\275+\031H=\010U\r\275\351>\032\275\t\t\263\2754FM\275\210\337\007\276\030\232`=\261*\026>\367I\351=\305\301\023\276\213\205\005<\232n\211=R\230\361\2748\364\267\273\007E\323=y\342|=\213c8\274\205\013]=\203\270\014\276\244\360\366=7u\037=~,\221<\346\340\006\276\362\252\r>\252\341\361\275aV\202=s\330\335\275\240k\261\275e0\265<\224\205\371=i\266{=f\266\214;J\321m\275\310\235\271=\332\371\302\275\0358\340\275\304\257\240\275,\376\377\274\020\262\023="
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "Q\0276>\026\322\002>|\034\016\276\276~\353<K\321f\275\275\2138\276\201\203D\276$\230T>\203\337b\276*WY\276\333\226L\276XS\312\273[{/>^\363\017\276\201\345F\275>\023\014>.\243O>\006\007E\276k\016\215\275\305cG>dCP>\343\271.>\377\017d\276\343\025\371\275\220\267\215\275=[\304:\332\350\365\275i\357G>P\363\314\275&\241,>\362\345Z\2760\240l\275\340\233O\276\263\204%>E\370\363<\247\016k\275\271\316I>|\036\031\276Q\226+\276\020\2231\276,\345\232=\245\223,\275\031\307\277\275/\010 >\204m<\276\253zC\276./\273=\376\344l\273\207\341\232\275\241Q\017\275\313$2\276\241\273x\275~\261\022>\265.\255=p&.=\345],>~H\330\271\027\274\215\275#Vc>\035\361\305=\353\237\376\275uuB\276\314A\020\276\262!N\276\363\200^\276\247\365\220\275\352*\227\275\224\3411>g\2262\276\360\361\243\275\262\225\241\275\303w\006>\234\366\r=\233\222I>\023_<\276\220>\254\274\007\276+>\254\010\231:\320+\215\275\376\253:>\337\016\r>\265\203C\275\3131H\276\230\321:\276\n\005\347\275/\243\320\275\242\246\366\2745\3378\276T\323\340=\323\344\223=~\030Y>\r\352\315\275i\2576><\253\031=\t\322\002\275\212$\">Z\202\307\275\3314\036=\206^d=\242cG\275\273\250\224=\021jK>\336\244\357\275\023\350\006=Fj\031\276t.\'\276@\007S>\367\034\327=\2357\036<\031\"\016\276\223\243\034>\245\375\002>\307\r\373\275u\3518=\336\350\277=\305\024[>C\307V\276]\270\200=\245\373a\275\r\240\362\275\203\330\274\274\2104\000\275\260\357\001\276\317tL\276\276n\315\273\267\031?=\341\026R\2765\254X>\226@\007\276\036\230a=\036\245\\>\370\305\347=\0219\033\276\025\t\n\276\033\376\312<Q\257\022=\202;\361\2742\rk=\021\253\005>W-V\276\363\231%=\336\377\030\276\215\r\275\274\243<\023>4\201\220=\021\313T\276Z\275Q>g\202E>\224\225\334= \367\322\275+\311\002\275\276,&\276\024\n.>^\340\340=JF\313\275SdM>\206\311->\242\327\307\275\0253U\276\347\375<>\301l\327\274\202\246\007>\243A\031\276*\3774\276\227\310>>(@&>\000\366\222=\343\345\'\276\276\031\303\273\357\032B>\216\361\235\275T\210\220={\200\010>S~\037\276\224A\264\275\023\244<\276\255\323_\276\206\311D\276B#\275=ev$\276;\252S\276y\327\036\276U\272Y<\013,\022\275{\273\330<\033\315\025>\302\366]\275\025\2322>m\353\275=C\232T\276\025\016\305\275\203\301\033\276\275\370\341=\031\357\007>\202z\221=\336V\237\275\r\332\"\275\275,3>-3\016>>\273\001\276\027\222\t\276@\210@=\010}\020>\'\002,:\023\375i:\272\234j=\001\315\005=QF5>\226N6>r\377\253\275\345\311\027>\266\351->?y\036\276\014p\246=\376\242\224\274\232\313\361\275\276a\023\275\304\t\346\275\236\212b=\361x/>\234J\273=\026\335\337\274s\313E>\300\013e>\264,\315=\241\026\025\276^!\004\276\273\302[>P\242\246\274\005\233\004\276K\211\326\275U\034\014>\341\243\375\275\244Cf\275\355Md\276S\3017\276\\q\t\275\037\216>\276\231\206(=\344\007\302<F\022,\276\326\031\033\276\223\355\244=\034\362+>\343J@\276\207\260|\2756\214\006>\355\010\271\275\224\203\243\275;2\241=V\032\372;\005i\025\275H\305[\276Fo\006< *\345\275\236\235T=\265\351\361=m\254*>\304\262)>\363\227\033\275x\265\221=%\230v\275\2631=<oR\316=\227\307\263=\005[\024>\271\322J\276\253b\272\275\327\270\240\275\246*\203\275\344\267\246\275\201\212\">\207^R>{S\350=\354\223\002\275\000\031\203\275\3600\273\275v\230$\276\223\025I>\262\250C>\317\355V>!O\235\274\202\304\262=\216\n\037>\260\000\350\275Y\010.>\234\327=\276b\022w\275\351D-={\220\257=\341\216\305=U\261\005>Q\311\355<Hl\344=3\322\355<J*J\276\3212I\274\233)\372\275\201~\240\275\206$\365\275OE\320\274\261jF\276\274\001\022\276^\330\017\276\256\361\003>\241\027,>_\233\021\276y\262 >\244\375\336=\227\306F\276\206\270\346\274\305\366\236=\372\tU>\225\004\254\275\002]\001\276\274\nW>q\037x=\273\314\027>\230W\276\275\004\033\027>\347\222P>yae\276\211\027\265\275A\354\027>\342\252\330;\326\177\366=\005\257\216=m\270\037\276\371\304U>\362\363;>J\363#\276\350\212d\276\204\372\016\275\220:\217=\366\030\223<7\003\007\275\242\366m=M\230.>\276\307\274\275\013\217d\276\000\264\224=\311\243\304=\276h\243<R-\244=7F,=\344\353\276=^\343\274\275o\026\376=\246g\241\275\373B\201\271\036\273\n>\023S\225<H\226Y\275Y\264\277\275\257x\222<\313b\230\275B\340\013\276n\365\r\276-\270\346\275[F\263\275b\335\223=;\243\306\274C\013\331;F\213_\275\213\307\266\275\316\266C\275\277PM\276\263 0\276\005\244\243=\226\226\305\275pP:\276\241-\331\275f\341\313\275M\366S\276\341\0212>+\274O\276\226A7\2764\001\374;\353\374\202\275\214\'7>7\003\300\275~\337\r\276\036\263b>\226a\352\2757\007?\276\033]\'\274*\262)=\332L\177\275\267\261\251<\226VP>\320S@\276\006\371\247=#W\250\275\345\247`>Y*,\276O@[\276\216\332\036>hH\234<\030\021\354\275\254\232\376\275Y\242\304=\233\003\302<\204$>\276e/5>\013-1>\037\342\r>vnI\27546V>\237\331\256\275)[\324\274ed\245\274\327\266\260<*\\\347\275\235\010\226\275\2000\303=\216]R>\230/\264\275r\372\033>\364\312G>\233\r\240\275]Ih=\274,H\275=\216\206\274\302\227_=\210g\334=n\204;\276\003L<>x\264\"\274F\014[>(\243a>\2334B>l\337+\276\033d\313\274\251G;\276\334\267K\276\177P\220<\211w\323\275\215\373I\276\\Z/\276\324-I>MC\300\275\320\337\354=\013\342M\275{\363]\275\"\235\366=\226.E\276t\216\312\275\261\2437\276\254\235\007\275+\364\374\275l6\036>1\244\346=$]\267\274\022x\n\276\r\3752\274\363\305f\275\3077\025\276{=D\276\314\254\025>SS\230\275\356\262\'\276\375\2002>\221=6\275\235w\331=\225\374\300\275\333\022\000\275\3678N=\327<\333\275Q\r.>\r)\272\275\300\310@\276M\255\003\275\203W\304=\255Z\001>[\367\210=C(\367\274\010x\035\276\355\013\013\276\007O+>\345zW>R\022L>G\022\352=4\247Z\276iT\274\275\270\355\250\275\363\206\034\276\347t\215\273\303X;\276\342=\333\275T%e\276\262\245\327\275\261\331\033\276\230?\030;f\376\232=\302;\026\276m\311P>\237\212e\276\344\001\020<\350\247a>r\342\262\275\241\365\315=\243\305 >.\301\361=vP\361\275\216\010\341=\036Nq=0\211\215\275\223\243\260=\207\313\257\275\223H+\276Z\335\240\2756\244;\276\223\324\331\273\373\317&\2766\322\234=\215\021\205\274c\003\210<V\304\030>\246j\274\275\001eG\276\206\344\305<\222z\340=\233r.\276v\350\256=~P\225=n\312\212\275\357\247\016\276\360r\027=\337G\032>(\014\342=\307\020L\276\020\253O\276\264\253Y\276<\264\034=\276\203\037>\257Q>\276\346C =Z\343\247\275\346\3334<\256\217\343=+lo\275\r\247\251=\250y\006>\273HO\276M\346\250=\342\372[=\245\213K\276\346\035?>\001\020M<\314FJ>\023q\251=\235\256b\275\221\263\234\274\254\261\365=\004\217\251=\325\363&\276_\023\351=\306\257\323\274\240@+>j\310_>\314JM>\004\242\342=.\326->\255(|=\343c\256;E\025@\275\202\3616\2761\262\233=\\\266\225\274W\026D>6m\010>\311\271d>I~I\275\325<\006\274\371!C\276\301\024Z\276\370\272\231=,\236?>?\340\334\275\327\2036<\320,\262=\263\366\032\275\260o\266;|\203 \276\313\250L\276\243\230-\275V\331Y>~\027+\276\031\357_=\013j\322=S\244o=\267\362Q=\347H\216\275\307\037\200\275\213z5\276u\370X>2\232\356\274\265|J\275\034\354\003\276\300\2760\275\222\330\266=D\320\024>\r\364\n>\006g\001>\224C\334\275\361V3\276\302zj\275\372\350E\275L\334\372=\224\005\376<5KG>\033_B\276\311\356n=@3\014>\227\227\034>\262.\237<\255=Q\275WG\311=\3716\370\275e\023.\276\016\336\213=%\013\024\276\014`\027\275L\032\326\275Ss\241=\356\211\355\274\361\320n=$]K>\366\310O=\030\t\020>QQ\003\276\257\t)\276\016\013\206<A5\316\275\261\222B\276.\347*\276\344\377\346\275$\355.=\325\336E\276Zl\205\274\231\312\\>\332v\240\275\272\203|=\233\004\226\275e\001\256=>\345\301<62\036>\300u]\276\213]\237\2758\373L\275\340:\360=WhS\276m^4\276\341xD>\021_D\276\274\214S>w\230\326\275+,\005\274\320J\303=Fv7>M/4>\2562\317=\261Q\245=\321\242\n>5\341Z\276~\253\277=\275\034L\2766\032Q\276\002\363h<]a,>\006\374S>\2603/\276\274\356\205\275KKZ>\221\263\235\275\014\375->\236\312\020>\236\033\260\275\034%e\276A\363I\276\335\301d>\026\320J=\035\267\331=\210\351\'\276^8+>\211\371z=\347\243V>3\351\020\276\372\365\027>\276\022\003\276t\033\241=\250)\205=\317\225?>-2g=\0032\032>\213\206~=\303T\233=R\307+\2754%\034\276]\367R\275RQq\275(\013%>#\006\'\274&\201\231=7\347\021=\305\333\t=\223\303)>KzP\276,\267}=QX\321=\2474\227\275C\351\252\275\230)\273\275N\311[\276\025\244W\276;\356P\276\356b?=\336\314\037>,M\274\273Zi\241=\267+\261;Bm$\275\237\350\254\275\352P\327<\255\037\222\275\017X\365:9\003\352<\020P\225=2\242\304\275:(#=\236]\337\275\261\223\024\276W\343\004>1\024T\276\316p8\276\336\017\037>\216$\'=\216\235G>z\242\010\276\261\225\000\275\ti\315=,\031\316:\032\262\271=\263%\303\275u\002\035=\177\342\304=\345\321\013\276\346\233\352\275U\0041>R\357X>Du?\275\352P\334\275\235M.\276IbM\2753\256\277=\001g\026\276\362\360\272=,\304R\274\251~\320=odc>\264W/<\255\277\201\275jVG\276\006\207I\276\344c\n\276\331\332~\275\213,P\276\344/e>\221G\014\276\331.\374\275\203\323\305\275\3268\366=\357\271.\275\232q\030>\317\326\027\274&\364%>\225\370Y>\273\200]>\316`\312\275#8\251=\226XQ>\036\234\033>\3705$\2769J0>\031\204\"\276\205\'\222\275<\276V>\236\203-\276A\357\020>\237\264\005\276*l\374=H\247 \274\320E\205\275\264\324H\276\311wH\274\005\271;>-\244\345<U\235/\276r]5\275c\270&>\205i\353\274\275\302Y>a\t\">\252\3763=\225/O=\226\0220>\321\346B<)uS>\361\227T>>\237\262=L\360\034<is\016>S\003\305=\356\3531<Oi\026\276\"\253|=\376Z@\276R;-\276{\374\005\276\377\017\005=\252\020\257\275\035Y@>\342j\237=\002\224M\274M\367\366\275\247t,\276/9\026\276e\367]\276\232\240\'\276\223P\026\275]\202\035>\205\303h\275%\205.= \222]\275\231\306M>\205\225\205\275Rh]\276h\260X\276\350\212F>\377\271\204=\362\323G>\224\374\034\276\375P\264\275\310r\210=\335\360\032\276\250s\001>>,K\276\233|Q\2760B\034\276H\207>\276\007\200/>\247\325\307=\220,)>\01637>o\2107\2751xI\276\036\320\244=}\350\005\273\307?V\276.\372U=k\214g=\354\035i;\020\'\001<\262\2646<\314\265\007>Q\214\333=\254\361X>5?\230\275|\377\004>@\3114\274\013P\312\275\237\003\345=mQ=\276[\003\370=\354\345\276\275\256\203+\276\207\350\362\275V[\260=\325q\031\276\364\3218=\327\353\375=<\336\341\273g\255\201\274C\200F=R`:>\2535>>\301O)>\333\026\'\276o\224:\276\306\265\215=|\303\252\274\224\354\\>pU\033>\271//>\003\0207\276\373\260\345=C\212\363\275\257\264@\276\302\216\016\276\367\230\007>JS\320=J\221\023>^i\004>\277*o\272\225>\267<\312\021&>2\010\265=\242DU\276\322\016\274=G\231\224=\205d\031>\2462\267\274\025\027\254=\352U\351\272\320\366\270<$\336\023=~\"\234;\331\026\025\274\230\326?>\235z\013=\375\n\013=:\272<\276\33107\274\350\2350\276\355\375\252\275oV\\>\200\233\035>\304\334\033\275\327:\231\2753x\013>\n\264T\274\224\341\263\274\003yF\276=\0055=\254\337\217=,3>\276\352\274\023\276m\3241\276\351\017X\276\031\214L\275u\300Q>N\255M\276\302\307U\276\244\343&<\271\'\235=\2725\265\274\360\370!>\232\221b\276\323\313\335=C\342.>&\014>\276\372Ht<\0173\335=ijK>Q\n9=\247*\352\275\007S\341=\rl\242<\333p\355\274F\200\023\276\237\247`>.\'\374\275Mq\003\276_\265\303\275\300|e>t\233\361\275B\344<\276\377\203\336=\266\343\014\273\031R4=\014]P>\236\201U\276i\253,\276\033\"\\<\335\205\241=\372\226^>z\033\340=\212\234\260\274\324u=\275in0=\253\3138>\357\316\034>)\3322=CG->\355)\365\274\3541\n\276qG\025>@\3260\276A\216\275\275\221e\354\2759m\024>y\202\010\276 \034\364<\275\365\204=\205R\312\275-\350\252=\304\2517\276\360p1\276$+8>\000sT\276\212E:>%\021H\276e\3248\276\227\233\366=\317\206\236\275{\301\'>\262\036\035\276\261\275`\276\024\305X>&\330\003\276\206\234\320\275\220+\355\275V\374!<\266m,>\263\2079\276\002[\273=\315\"6>\377\352\243=\342_\215\275\025n\214\275\306\332\302\275\310\034\332=2\202\026\276&5M=\303H\'=\347q\220=\335U\021>\366l\210=gM\243\275\316\205\202\275\314\315\013\276A\364\271\275w\201P\276\242\010\r>\037}#\276?\370\020<\234\365\023\276y\2548\276\343s\364=b\304\234\275\312\341,>\227\326c\274\330(\374=\323[\301;v]I\2767a1\275P/\203=9\'8>\022v\n=h!b>\367yX>\343\272\305=\337\323\346=\025\345]\276k\002L\276\344\341Q\276(\370O\276\356\010\212\274D\007S\275\217\246\226\275a\3329\275\261\210\204=&1\371=$\266\333\275\033_\264=\342\210\032\276~w5>\013Gd\276\322\274\264\275\261;\000<$\216X>\355\201W>\177\242\010>\216\312\247<\263M\311\275y\210\327\275\353\235\'\276*\347`\276\232\250X=\310\t\217\274T\204_>;\013B>\037\004\302=e\tW<\004\324\214\275\026\004\023\276\355zT>Z6A<\337&3\276\037\335d>\322\272\375\275\321\346\001>9\376E\276\372w<>\ra\004\275\210\2364>)\266V>yZY\276[\200\275\275\037\232\224\275\264\216F\276\235\274\232\275Z\366\226=\266N\007>\255\375\234;\225\000\026=t4F<n=K\276\355\226H\276<\262\000\276B\207F>\'\256\024<\250vV\274\033\017Z\276\002\267\016>\243\033B>\312\013G\275ZE\'=\350\256\241=\221\252\026\276\363G\'>\245\2704>\017\035\330\275\371pU>\2443\313\274\362?\267=K\2743\275\260Y\337=\226/\030>2Y<>\333\324`\276\314w[\275\032\2068>W,\366\275\205\3323\276\373\3306\276\240}\272\271\200\024\247=\276\343\">\252\270Z<\240\243\321=\3454@<MdY>V\211Z>;Iq=\227JI=\340e\\\275\356\017\030>\323\203Z>\021\350D\276\264)\313=\003\006\230\275\306\",>}\320\'>\016]%>\314(f\274)\024\360\274\256,U\276*\315\355\275\332\356\035>k\340w<\007\350Q\276\267\n\337=\024\001\016>\033A\245=\220\343\315=q\337\226<\025\332A\276\264\263O\274UK&\276J\210G<\030%\013>\000\0363\276\000\343\266\275\355}T=\366BU\276\371{8\276?d\353\2757\257,\275Bk@>\361\2649>\021\355\365\275dB\252\275\017yG\276f\252-\276\311C*\276\351\371\036>\010\377Z\276\267\336\331\275\033\337\032\276\342\210(\276\257u\036>\237\306Y\276\016T\265\2759\3238\276\300\231\002=\355\317\005=\237\030\027\276\374D\017\276\331\036\344\275\024L\231=\251\361d>zd\320=\243\345\273\274^\217\001>F\374O\275j\362?>\021R\020\276lTP\276i/\'>>\024\351=d&8>\317[J>\251\243}\275y\257X>\024\2049>\005==\276\005}\242\275j9b\276\016\0260\274+\342\247<^+&>33\n>\210p\033\276gXM\276\324\206\303=<\'I\276\264\016\223\275p\244V=2m\211=5\267V\275O\025S\276\275\242`>\2548\004>\274l\305\274\023\330\220\275\206\007\372=\253!\037\276{\314#\275\005\001\024\275<\225D\276\277\222\212\274\265\021\037=\265O0=G@ >*Y\222\275)\332O\276I\014E>;\256\241\275e\022\256\275\265\0240\276^\345\211\275b\221\366=\003\266\204\275\235>\033>\356\370[=\362$\010\276\200~\032\276\350J\245=I\022\007=\364\307n<\2530C=\363E\242<D\356h\275r\177\367\275\031E\273\274_/7>\263\005\236<^\222\303\275m\312\025\276M\257F\273S\204.\275\352\361k\274?\277\357\274;\353\311\275\361\177Y\276\\\017O>3*e\275\004[I>\301\027k=\375>\312\274\007\362\033>\"\n\262\275\241u\030\276\247M^:\324\215\027>\217/\214<0\2441>\237)S\275\351\023\031\276\'\315?>\362\206P\276\364\357\010>\315\340\"\276\234\315Q\276+\273\313\275\373\024V\276\327TD>y#\365\273+\032\024>\302\3115>U\374\335\275\333&G\276\233\265)\276K]\016\267M\013\007\275\007B\217\275Fm.>-t\345<\301\027B>\006\360\020\276\257\263\241\274\210.\323\274i\360\n\275\013\363\010\276X4\230\275\023\317-\276,C\273\275\002\207\r>\357\310\027\276\024\320e\275\000\353\002\276\257$C>G\347\241\275\262\310\221\275P\025\351\275\026QE\274\263;W\276\273\3356\276\000g)>5\225\023\276X+,\276`OJ>`[4\276\211*\004\275\313UB\276!\200$\276\371\003B\2767\251\361\272\0367\354\2752\377\020>\271q\003>\252\223\224\275\311\261\362<\360\2377\276e\3548\276\350\0004>dH\217\275\020\006(\276z\304\000\274\273\2019=Jj\363<\253\373\355\274\373\331A\276q\361\271=\t\362\250<\203H\350\275\203\317\036>\274\240\017\275\263E9\275\202y\370\272\362D(\275p\305\253=\021<+\276l\355\002\276/\357\205\274A+\222\275\014\253/\276\214)\315\274\315GI>n\264\210\275{\310\036<\360|\236=P[\027>\242\3623>\340Lz=nv\342=7\306\365=9rE\276\002nC>\241\225K\275\213\377\360<\212\335\\<]\354\361\274\321\301\242\274(1Y\276\265Bl=\270\264P\275\267\260\303\275\376>\341\275\013\350)>~sY>7\363\001\276\347(s<\035\252G\276\265\212\023\276\274\257\203\275\260\275b\276\027AF\276\005\230*\276\275\334\274<\2318W>-\032\023\276fa\262\275\225j-\276c4\342=aAD>F\272\326=\265\255\223<9\303\017>\212\243$>\'}C\275\265\261\017\276\026\350Z>\342\001\241\273oM\346=G\341,>UF\037>\014\nN\276H\026\030>\275\327\265<\240\376\223<eZ->\001\025\225\274\225\025/\2750\333\013=\301\0347\276\037\242=\275U\206\027\276\350\300*>\217\366!>\206\n\243=\330\306\362\275QP\014>^/ >\013\330\2469\217v\310=\263j\005>\267\232\333\274\025*\234\275\010\241R\276?\246Z>\224\333\221=\226Vn\275\313\202\007\276\3768\237\275\034\340<\276c\317\231;7\016\351\275\367}4\275m\262]=O\232\334\275\222,\212=\027.\005\275\210i$<\230y\255;o\337\214\273I\356x\275\227>\226=XI\007>T\231\362=\262\034e=\013\243\220\275\360f\322\275\215\021\206\275\026\014\255\275l\010\310=N\027G>\357G\344\275%\033\242\275\220\004\002\276>uS\276\353\315&\276\277J\316\274\303k\350=\027\226?>6;E=\331\370\243=\243\256\033=\036=\030>u\277\200:4@3\275\342\242\223=KY\217=j\004\307=\2543G\276{\330B\276V\253d\276\353H\275\275\327\335\025\276\002\030p\275\230p5>\321\334F>\355\n\002\275Rd\342=\260c\024=\310(\342\275\301%\376=L\260V>]y!\276U\313\214\275\3416\021>:o\344\275\315\311\324\275\351\300\365\275\203\2256\276\220\222\036\275f\373W=\346\330)>\205L+\276\0212H=\021E\370=\'s\200=3.J\276\331k\021>\240<[\2764A\014>;\264X>\343k\237\275\033\017\237=\214\274 \275\275!\317=:9c=\345\225\251\274\021\354F=\026\332\r>\376\250\006>>\316\020>P;<>\214\215H\275\026H\032\276\010\036\275\274e6\341=\262\306\333\275\354\344\307=\302\341\241\275nW\327<p\014\024>\255\371;>j/#\276\214\275O>\204\027\r>\355\\\304;\270K\262=}\365U\276\303\024I>\222\0303<\303\220\216=g\020\370=\235\033\277=8\257\225\275\001J\273=c\207\007>\3312!\275sac>\262C\010\276,\3015\275S\354\r\276f*@>\230u\006\276\357\202[\276\353E$\276 F5\275\331\320\\\276p\243b>\265%\204=\205\237<>K\274\036>#\357\\>a\3170>zb/\276\315\277\n={L\024\276m\337%\275\024P\342=R^#\276X\265{\275PTJ\276\254\246\031=\221=8\275\353\363\203\272\032\374`<\034\354\006\276\3104U\275\221}C>a\347I\276\364\013\315<N:5>VF\221=\313\0204>\306\373\027>\235kc>\000\331F>\246\\a\2762C\317=\322t\016<\355\205S\276\017aM>G~\376=4\323\034\274L\223\300=R\365X>P\205\352<\365`\004\276*tF>*\232\367<\220\364\001>?\304\023\275\215\342\031\273\321\210\034\276~0\345=\374\250\377\274\207\237\004\276\243\036a\276\217$\036\275G\004m=\212X\302\274\267YX>\357\256\n=\255\n\027=\022\3130=^!\275\275q\001D>\231\364\t>Y\206\177=\220g\345=I\367[\275\245\2622\276\351\036g=L\376\270\275\"`\330\275m\247\n>5\035\024=\211\234y=9SU=.\330\234\275fX\232\272\0339\236= i)>\352\2754> \301\217=\000\250N>\304d[\276d\213C;\255\213E\276\032\006\347\275\216<O=\r\037K>\366G\223=\305\0312>5\003\r=G\350\022\276\277t\263=qf\212<\002\243+>N\033F\276F\265Z\276\241\025+\276g\n\336\275E\211\374;\000pI>X\312:\276\261r\357\2752,$\276\350\311+=IKa>\324M\257\275\377\271\264=Z\n\275\275&*&>d\261\221<\354\255\261\275(\025c\276 \360\344=`<\033=:b\\>p4\'\276\274\345\035>\362\3439>\231\376\333<`+\232\275\331\004b\275\241\231\306\275\3444_=I\177Y=D\225\246\275\306 \267\275\221\222\201\275\036\373\026>$@A>\3532\257\274GuS\276O\252N>\252\374\r>\265\t\345\275]\225T\276+\t;\276\360T\006>l\210\240=G\310W\275\004B\006\276\240\247\345\275ag\201=\302{L\276#\315\364=\032\270\252\275\000J\245\275\251\332Z>\0065\247\272\355\2726\276\'\320r\275\267\300\353\274-\333\225\275i\013\t>\213\220\227=$8L\276\232\236\210<\277i\320=\214\350\007\276\306\3674=\343\245\213=\374>\241=\256\373\020\2742\352\315\275:v\027\276\257\372M\275\221\033\222\275\264\337\023>b\224\031>\261\031\234\275\203\343\277\275\274\355\362<\3235\"=\033\320\327\275\217\347=<w)Y=_d<\276\0222f=\326\311O\276v[\200=\363M=\275IA\365\275\243\323\213\274\215\251\035>\240\215\264<\212\022c= \326L>\307\240\002\276\3321H>2\276%\276\340H&\276\361V\223\275x#\016\274\2146m=\234\t\302\275\010\017\211\275(\2336>\320\301i\275\232\252n=|\253t\275\377\315\324\275X\017+\276\220\031\034=z\213#>\214\005\221<F\306@\276\341\343U<\232)\035=\200\255\367\275\326o\320\2756\210\000>\222\227\240=\330\213J\276Z\031@>\367XC\2765\264\263=@[\367\275\360 \233\275\240\305\016\275\322\327\361\275MQ\034>\243\215\223\274 \315\037\276\034\227e>\233M,=\307\210\337<zd\r>\324]Z\276\315\362*\276\271\332\264<\276N\205\274z\362\347=#\006\352;I\224\352<\232\220\254\2756\036\205=I\215\030>\357\345+\276\024v\031>\255\344!>6\301\341\275\353$A\276\312\016G>-\276\327\275\263\274\333\274im\020\276]x4>\002\377\227=I\364p=\375C\232;\261\307\226\273\233\273=\276S8\364\275;\201\363\275\033\221~\275\217\215/>G\201D\276\240\252V\274\213\'?\275\013@\017\276\335\301\302\275\023VT\276\243\177b=1\004\251=\322\203t=\033,\356\2753\206I\276\275U\036>\013\324S\276\331\026\372\274\'\022T=gse\276\235V=>1M?>+T\t>\213\376b\276\244}.>\352P`\276\336\271\221=\205\246=>\350\233\374=\362+\355<\344R\005\273 G\023\276\347\334\341\275108\27487<\276L\205\227\272\257sa>\310cG\276]\221\251<$s8>f\023\010>\206\265\322\275\2661\322<)\224\352<&\377C=D-\"=\250\342\014\276\010\231\026>Q\t\332=7{\342=C\302\021>\327\026*\275\317y1\276\022\032\r\276\373\035E\275\n\215a\276\336\307\037>=\372M\275)\032<<o\272\232=\224%#\276\025\036\312\2747\0201\276\223\344y:\330\227J\276\200\001k<\200\230\356\275\272\350#>GB\030\276\310>%>)\202W\276\034\333\215=(\3378>\245\r\250=.\335R>`O:\275\235f\n=\340\037\260;k\0204\276X\223\343=q\357$>`f\000\274\321\376\022>e\337\347=Y1@>\264T/\276\245\356\342=\026\300\036\276\261# \276{}\206\275f\374\337=\255H\200=`\016^\276\266x>\276L\224c\276\345\377M=Z\254\022>\324S\256=\034!\213\275\004\020o\275}\352\014\275{\262\022>\315\265\356<\017\262\376=m-\220<g\332\267\275\027\200L>\225\330e>\322T7>\032,\'\275\t\316\331<\352T\326<Y\251\025>\374\007\n=L\220t\2756\230\016\276\013\2555\276\'m\357\275\014\006=\276\316\355\266=\203*h\274\313\203\034\276C\233\303=\033\314>>\t\206[\276\243\201\324\274\254Bl<\033=\214=\366l\240\275\355\306\246=\225t\214=>\257\000\275\023C)>\361w\001>\350B:\2766\264@>\255fc>/\027\003=\301MU\274t\272\375\275\310ML\275\025!p\274-\215\034>Q\255?>x3\320=m\357|\275\304\353\337\274\206\256\006>\246Y\013\2762a/>l\322\'>\217\373\235=\210\002\031\276\335e\201=\024jC\276\262\217\204\275\032\341\347=\271De\275[j\346\2757\337b>4\027\365\275\221\212Q\276\320\333>>\342\312\366=&\370\244;\336&\354=,vO\276\314\224\021>\201\024]>\212\371\305\275\376=E>\311_\234\275\177\022P>w\202G\276}\370D\275\264\301D\275T\251.\276!\0070>&\307\344=\326&\242\275C\301;\276\377\241\017<\322\201o\275\017f\036\275\010\310B\276\204\343J\276m\254_\275\201A\252\275V\337a>\0138->\323\276>\275RW\335=\r\341&>\255\221\022>5\342f\275\213\020\025\275V\253\037\276\252\241\250\2755[\202\275\033\332\223<\216w!<\021]\320\275-\361M\274\307\262\263=.\265\030>\360j\">C\241\016=\206\253\025>\311\2335\276<\037\003\276\231\357G\276\r\001\303\275\2556G\276\302\003\000\274V\325\250==p\272\274\370D)>\010e(\276jj\363\275\200G\266\275\320\177+\276m\266c\276X\336j=\341\234\354\275\222\367\002\276\344\341X\276\257\177\\>T\275\377\274\t8H>j\212E\275\241\276\231=z\230\003\276!\214\310=\243b+>\357zU>y\010^\276\237_\020>`\024D>?EI\2767p\001>\213\021\021\276\216\327\202\275\311\030&>2\361\306\275\370\3373>\371\354\321\275\302\317\237\275\241\275M>\2309:\276\367J\326;\314\364M\276m\341r=\247\251@>\270\336\312\275\350\337\035\276\273\251\371=\254\335/>\226\010M>9\305P\276\323\2414\275\371\031\233=\333]\017\274&\304\354\275;\223\210\275\013}\205<s+\035\276@\253+>\325\360\207<>\211*\276\343\264\007\275\256\261S>\274\311^\275\240#M>\3072\266=\370/\232\275\316\257\\\276vs*>\332<\340\275\265\321\322=\265\316!\276\002:>>J\003\200=Y~\034\272\304\224\">\262\213\204\275\344l\333=,\311\002\276\242}\241\275\350\033#\276\351T3<V\313\300=\375G0\276dx\033\275 \356\037\276\241T\n<\307\241\303\2759\005\316\275;AN\276\200\331)\276c\026M>k|\241\274\320\006\367\275N\251#>c\215R>\326\235B\276E\303\n\276hz\262=\234\231\235\274\273\225\212=\221\371\265=\240\027\305=r\032\014\276\261\377E;8\356\203=\200\217C=J\202\261=\022\347/\275\233\033\274=\277\214\234<eN\372=}<A\2768\217\027<\"]\357=\177,H\276\333X\023>\207\271]>\364\375\273\274\3034\021>;\022_>sz\355\275\212x\210=0\275\330\275?6*\276\023\325b\276No\373\275?\275\342\275+#\001>\221\355\021\274\341\314\220\275\177\232C\275\257\207]=t\025\273\275\250\365\265\273\203 \376\275P~ >\2163E>n\245\314\275\336\217\251\275\305y\236=nl\211\275\265\217\263\275\024\330\230\275\017\037\237=[V\207=8\366\243\275F(E\276F\236J\276\343\354[\276h\252\312\275\256\305\007>#\317D\276K\2646\276\241.*\275v`$=\204\0226=\013\217\305=\373\204\260=\036\005\">\231:\304\275\361\217\232=\202\324\264=}\264P\276\352)\033>y:\037>\327\210\023>\205\273\265=\310`\251=\357\032\302=_b]>\036\004\365\275\336\300\035\276\324\224\247=\007NM>7\276\025>q\3436>\025\360[>p\373\337<\312\255U>\272\303W>>\362\202\274\254p\023=n\240d\275\360!P>#\301\347\275Y\315\326\275f\242\010>\213\357\035:\352\237O>\027V\256\275g\022M>\300\252\212\275,\244.\276^\301\222\2757\350?>Kq\037=\317\345\371=~\3233\275\310(\243\275D\301\303<\223\365\247\2755\226!=\234\335J;\265\212\010=k\3472>_\322\005>y\372\267\275\256;\014>\267v\\\275%\207w=\247N \276\334\341#\276E}]\276\276\302\326\274a\347/>\272\221&:\231\024R>\2256H\276E\340)=\034\344@>\322\265\305\275\207\"\276\275\335u4\275\r+\312\275fB\257\275\035=:\275\024\322\277\275Dwc\273\312\366G==\r\343=[\204E>\26432\2753\007\215\275\241j/\276\200\3002>C\0015;\036\313\262\275r\016\234=\211\357\t>\326\2528\276G\2229\276\214\251i\275>6\302\275\342q\354<8\2515>\230\221\022\275\005\355\036>\237s\274=;\234H\276\237\221\255<gr\363\275g\330]\276\005T\327=\264\006\244\275\272~\276\275/\331O>Zr?>\271\374\r>\335\241U\276\254q\203=\202\232\306=\254ES\276\326\353\342\275\214\"{=\231c\005\276\033\2529>.R\014\274~j\300=\036\302\301<~\273%\276DF*>vcJ\276\220\265\036\276f\310\025\274\216\0055>}\021\273\275\036t\313\275\317Q\\<\013]\032\276\\\331`>pV\205\275O\320G\276\220F8\276M\211V>\230.-\276^\3037\276\000G$\275\235lk<j\334\253;\201\276\322=#3[\276\034\017[>d\r4<:A\261<\025\347\340\275\367WT\275\324\265\260<\241|\261=\030@\000\275\350v\220=3\316\350\275\310d\347\275oH\231\275O\032\265=\323\366I\276t\2760=\034\377?\276|\2615\275\026\266\215<$$\231\275\004\272\254=\326v\210:\322\'\033\2761s@;\334\350!\275\360\001\305=q[-\276\206{\266=\021\315\007\275\374\364~\275\213\323+<c\r\002=C\331;=\036z\031\275\006\206\'\276[%\307\275\037\242t=\247\241\340\275\026\265D>\210\276\345=\317h\262\273g\017#>=\3668\274n\r\343\275\"\201K\276\n\247*\275^\017\024=\201\347\375\274[_!>\205\341Y\276tz0\276H\232Z>\366B\360=\311KM\275\234)\036\276\262\265\266=\315\316\n>\\fV>h\311\007==\305\377\275\202\035\256\273\250o%\276\345\235\276\275\254z\036>\007t\275\275\262g\022\276\255\362X\276D`\004=\217(\344\272\235FQ\275J\244\371\275bud>|\350P\276\013Q\354\275i\227D\276\374\371\336\275\376\361\014>\332\020\034\276\310E\027>\357\331\003>e3\340\274\341LD=dk\007\276\275\007:\276\252O\221=\035\004\347\275\021\322e<8\034;\276\204\271\377\275\317\251\307\271x\016\355\274\361$\213\275\346J\"\276}Z!>\252C4>r\036\002=\352n\351\275\215\022\361\275\3742A>\022h\037\276\224`E\276\221/\322\2754Y\006>x\026\010>E\226\300\271k\017\370\275\330\342#\2769FA\276\232\010\245=z\030\322\275iLM\275\206\350\013\27655R>\002^\030>\206O\266\275B\021\345\275k\353\245=\314\350\034\276\374&\373\272?\207!>\270k\027>\264XU=\203g\366<\t\020\275=\n\234\272<%\207Q\2764\223i=\257FX>\234F@\276\030s\022\276\335v\251=\255\207e>\272\244[\276z\2759=\2351[\276/\257\264<\327\024\n=\334R\026=\353\2416=]]\002\276\260\255\230=\216&a\276\352d\303\275\326\034\013= X\034<\\\233\251=3{X\2753\260v\274`\340\373=\263\262\276\275\347V\001\276\347\232)=Vb\333<+P\001\276\035\007\023\27611\242=\346W\\>\246\235\310\275\306\251\035\276\354\221h=\332\336\013>]\243\305\275\2512\374\275\031\3203>\363\016\036\276\345\037O>6\035J\2769F\240=si+\276<\265?\276\216(\313\274Z\323\310=\315X\247\275\320S\360\274\2453h=\227#\252\275\201\311\016\276\2217\030:F\003\000\275*\371\026\275_\251b\275)\342O\276K\210\201=wB\343\275\354\037B\276\350\014+\276\233\rT\276_g\002\276\262\273C\276N\2638>\257%\264=\306\003%\276\326\257P\276P@\303<\024\224C>\205&i=\322\310\">\247dc\275\312\005V\276\005\026V\276\207\004I\274\2078J>>-{\275\211\370%>\035P\n<\014C\235\275\027s\"\275\377\241\360\275Fx\007=M\325>>\351\373\252\275t\223\347=&=\300\270\331r\300\275\276\0363\276w\376\257=\262\3339\276<\344\325\274c%\013>\030\001\264<3\223Y\276\227`\307\275!\2571>\257v_>T\342\331=K\231\016>\365\253b>&\362c\276\226\030_\276\3742)\276\026\001@\276\215;\023\276\251\343/>\204\320\362\274t\233\034=\323\305>\275\272\0055\276 \332\376=yh\310\275\251\235\r>\314X\312=H\255\352\275\353\264H\276\322%\260=>9F\276\016x\243\275\274=+>\226\003\371\275\374\265:\273\035\317&>\242\204\n\276r\234\356<\272\254\021\276U\305\020>\254o\032\276\217\010\034\275\352\264\004\276\325\220\345=sT+=\322\177><\250\223\242<\177-A=O<\260<\031\353K\275\370\337e\275:\221]\276\265\3259=\355\275\330=\007\340d=\030\215\264=]\347\214=?Y4\276\245\356\355\274]\277\010\275\227\000\375=\263l+\276\274\200L=#\264\"=\030\370==S\303\351\275\222\252\244\274z\243\342=\304\371\204\275X\' =\003^\267=\255\315Q\276\031\266\n\276^\026\320\272\341;\260\275\n\235U\276\233\336#\276\350\337L\275WT\322\275\246V\223==L/\276\311\315\355\275c\327\333=\023\252\003\275\034\'\246=\264L\373\275Z6\367\275\334E\313\274\331^\017\275\224\323\330=c0\250\275\224e}\273\214\016\222=\021\313D=\235\301A\276\234\304!>\330\245\255\271\371\311d\276\333\301\022\276\345\253\341\275\311\214\271=/\2415>YT\316=\255\001\021\276Tm\030>\251\332Q>\016C!>\004\244?>\245\333\245=\336c\271=\004\303\002\276\271&5\276\003K=>l}\206\275\333\305X\275`\376\354\274\214\240\005\276\355\034\020\276\370V.\276\261 5>A\272`>\344\321\306=\317\302]\276D\301\255\275H\257,>\201\235A>\020\315/>\223O\214\275\257n\265=\266\000d\276\260P\023>\234\005c>\242\355\010\275\340\033?>5\261*\276\345sR>\200d\210\274\340\245\213=\036\324_=@G\363\275)\204\236\2753\202\316<\033N\211=\207\025\002>\263m\233\274\2216@\276\010P\267\275\2174\233\275\204\030E>\231\250G\276\014m\306\275*\204/>\311r\024\276\352\363,<\001F\033>\2706,>\364\333Q>\330\037\001\276,\321(>3$7\276\351\350\231<\377\020n=t:\264=-\242\350<D\344!\274O\3247\2760\222Y\276^y\006>w\026\366\272\307f(>\307\014\010>4\274J>\236\251\210=\211\334\204\274\316(\227\275\340\207\333=t\325+>l\321\177\275T\211*>\202v\203=\036\260\017=V}\352=\003D/\276\324<V\276\300l\177=\267Uu\275\321\027\305\275\205\210\031\276\347\202\240=w\276X\276\025T\025\275#n\353\275\245T\245=8BQ\276ob\352=\226\021Z\276\371\346\225\275ty\035=\316\207^<\353\003M\274\177\231W\276\341\213\007>o&*>=\314%>v(\004\276b9N\276Yn\003\275\365\245\005\276\366\204G>s\016W>\316\201\307=5\255\274<\3542\022>Y\253H\276\276(\316=\024c\304=\325\020\332\275\251\216B\276\201\021.=\2345R\276\374\001\217=\263\223-\276\236r\250<bJ\272=\367S\231\274\213-C\276\275\350H\276c.\323<\322Pz\275\305\207e\274\260Z\264<\266S\334=W\325\311\275\271\030U\274\363\313\351=a\031\207\274EU>=kK4\276\262C\263=\316(\275=\036\372\271\275\346\207\030>\n\"%\275BzZ\275\375\233\034\276m\262\335\275\032b\325\274\267\226\256\274\341\027\375\275a\022\317=\275\005B\274GE4<\033\031\010\276\225J\212\275A\334<\275\022\250\252=\341\020\030=\330[G\275j\356=\276\233\321\025\276\302\032\031=U\211\376=\275\374C\275\267\335?\276\356\241\247\274\2534\">\253\313\361<\223\342\034>\327(}=\366\217\020\276\373\273B>\216F\373\275\017\246\037=u\257\345\274\227\313\353\273\251\312\025\276 \377@\276/B;> R^\275B\322\355\275\211\262L>\272\304S>\227\226\203;\207\014/\276\251\3678=^P\001\2764\336#:\345\022\367\274&p\232<kYM>\231)\267\275\277\352d\2764!c>}\366&>\346cK>z\221\252\273\343.J>\215\261\234\274<g\005>\206\';\276\341F(\275\206\343W>\034\314\020\276\364\343|\275\342\216\036\276o{\304=\365\246\025=rk\354\275\355v\354\275\234\236\021\276\335\000\271=y\276d>\203\230\003\276>\343Y\276i\242f=\"_\322\274:\360\023\276\'\\9\272n\2563=\001\332\376\274\204\345\271=\304\272\036>-\302\235\273\002b\236=\371h8\276\225\367\350<=\360\273\275\241\225,\276\031^!\276\336\256P>j\352,>\334\240\213\275\231\204]\276\215\033\352<n\262\265<\376V&>\245\216\310=\370\332\017\276^\3772\276.\234N=\2030H\275\177\013T>\0354(>[\007\240\275`\2316\276\346|\316=\315F\022\276\032\226O>\335\266\373<\270\247(\275\301\177\\>@\315U\276\030\370\314<\206\321p=6\250\'\276\344\217k\275\270\377\233\274Y`\256=\3629\037\276\250\315w<\336\266\r>\253\022\223\275i|\353<\201\311\306;\3434\343=\254\315\216\275\\\rb>r\256H\276\254\360\207\274\221\2129\276\017m\214=\342\257a\276f\305T\276\316\\\201\275j\3221\276\177OS=\374\316\003>e\222\331=8\313d=\304\202Z>\222\305\267=\274\366\036\275<Y\306<G3\r\276\020a\307\275\270\350\234=pe\317=\325\317E>\262\226\025\275!\225(>8\205g=Q\020X>\241\344\n\276M\355N>\221G\"\276\346\342\204=\233\266\000>\373\271\375\275\271\013\026\2768cX\276\352\212\245=O\036\315=|\335Y\276\010\250\276=\003\264B>\226\341\310\275\3273\322<#\017\000\274\354cE>\312\276\321\275>\006\023\275\376\253\335\275\3448+\276[\276P\276\324M\370<\274\200\320\275\361\324\375=\356r\365\275N$}=\264\316\334\275\362\035\305<\274g \275|_\032>\222\307\304<\355@d\276x5+\276f\355\024=\245Yb\276o!Y>\357U\004>-\010\021>\307\313+>\003.\337=\310/V\276\242\255%\276\3222)\276\016HO=\006\366\346\274\320\210Z>\357q\'\276?[<>+\3572=\223\340Q\276n(\237=P\370\274\275_\r\366\275\310?\357<\352\323\215\275\246?\347\275\002{#\276\327\341\026\276\363][>\220\316\004\276Y\350\317\274\037\020\036>wN0=H\227s\275\007|\371\274\340TW=\323\341.>\236k\236\274 \361\316\274B\244\006\273\214\330\377\275\231Z\266\275\320@C\276\302S%>\372PY>e\2726\276!?\221<t\002h\2759\0331<\340\302O>\274l\255=\331\306$>wu@>U\311\026>\321\302\003\275\273 \211\274\375\372\337\275\237@\004\276Td\230=fB\207=UTd>\316\352\346\275\262}V\276\302k\200\275\212=\227\275\307x>\276\360\357%>;\355\305=\376\262]=\201&\330\275\013\\$\276*W\305<\0134Y\276\242\003\177=\367\266\350\275b\244\215<L)c\2762H\203\275\255;\265<\301c*\276GtO>\355\210b\276^t\355=\0234W>Q\236\377\275\002\365S\276\311\331\006\276\364\'\t=a\356\251<k\r\313\275\342JK\276\363\346K\276\221\2600\276\267\212H\276\\\250\233\275\027+A>\210\337\021>n\274\036\275\201\t!\275\222\177N\276\3454\022\276^\314\215\275t\321z\275\343\201+>\321\372L>\021\246[>\006\004\306\275;q\343=\206\315;>\213f\013\275\336\237W\276C\016S=\\c\375\274\024h!\276\'\t\000\2755\355\025<\n\217\356=\2718Z>\257i(\276\346)q=\375\236[>X\"X\275i\366}\273\206Z\030\276\\\2074>e\3622\276C\222a\276\245\361\225\275-\216\240\275WS\230=\230\303 \276\307E\022\276\340\371\352\274k\323\260<$a\330=\231\251\273\274{\203\347=R\312\237\275\316\364_\276\020DB>QU.>+\000\\>\030\007\313=t\003B>KT\004\276\211G\253\275\236\336\245<0\233\n\276\233\026\002\276j\307(=Xo\025\276\034\367\214=c\036U\2760\327\250\275s\337\331\275\030_N\276\315\232\307=\315\344S\276\331c\350=\3406_>\364\314\227=\234W\r=\177\301\364\275\203\300\207=y{.\276pZ\277\275\363\"Z\276\320\2309>\250%\226=0\027$=No\366<\316\351\245<\300\371>>\235\262\372;#\375\331\274\345%h\275Y\367\306\275\237j\214\275ct\034>\n\\V>\022[\005\275\335\024\272\275\237\210\343=Fs\004>M\230a\276Yk<\276\344V\262=\373&\323\275\2654S>\262c\212\274\020m\232\275\0045X>\304X\025\276\337\205\302<[\221b\276&\313_\276\256\202\332=7\nj=\376S\362\275\345\343\227=\367\247\305\275N\203b\276\226\344\010>O\344U\276\310\2530\273\343\257T>^\016\007\274{\233\026\275\0240H>\035\265\031>W\3234<V\024\217\275\327U\237= \017\364\274\363\2744\2760^\022\276\24223>w(\270=\302=\037\276/\361T>\356\026\036=\244\262S=\350\316\243\274\010L\036\276\206\037\023;\265a$\276B\357\203=\300\326\331\275\217\007H\276\021\td\276\360\315\301=[Gq\275Ra\337\273\353\253\207\275\376\242\025\276\226\221\350\275\356\027\226=\350\3704\276SE\r\276\210A\323\274\203\273\266=\\\027I\276\rs\375;\241\235C\276 \303b\276U|S>\245IR>3bE>\225\356*>\204\315\331=\204\213\020>\236\216)=\\\271\025>\247\235\253\274OE\211\275K\264(\273+\326-=\234@1>\231\3750\276\024\331\266\275\026\354\020>\334\nd>C\215\306\275tR%>\371\270\006=\337\227\005>\365\020`;P\007\246=\370\305h\273\002\276h\275`K\222=\243\252)\276U\377:>\2174\217=\005\206\326\275\274l\274\274h\212P\276\371X%>I\020.<K`\206\274\246\240F=\301\232B\274\374\316+\275&\273\332=3)\242<\016NC>\0148e\275\314\230Y<fL\225\275LsW\276\363\3546>\263\233\035\274\203\037(\276@\350;\276\014\341\363<t\230]\276\242\357\322\275\325\003\343=QQT\276$J\357=e\004\022\276e\256B\276\303\262c\276\002D\323\275\316\267.>\333k0\276\317\0324\274\322\345\027\276_\3579\275\226\363\026>\271\270\014\273\206\222\311=\016i\035>\032\215(>\335\322\256=\r*\010\276\223\305:\275\247\t\013>\313.\203\275\367K\206\275q_<>\001\342\324\275\253X1=\215\023l\275zHV\276\352\350Q>\354O\350;\341\033z\275\366*_\274B\276\005>\221\030>=\354\215%\274\026\334Z>\366\354\272=,\223\002\276n\213\223=4\357\004>fg1>\223~\327\275\013\014\031>\307\221\271\275TT\332=XD;>g\217\327\275-j\016>\000pg\2754U\006\276\233f\267\274V\036\311=\221\022\377=%\206_\276\345\3129\276q\301\030>[\216$>\200\033\276\274+\321\346\274\3366R>\303\344\037>\360Wn=\210\262c>o$$>\027\377m\275\310\250;\276\204_C\276A\344\342\273\231A]>L\270\353\275\274\032\023>5\304a\276\357#\232=M\024\310\275\226\366\310\275\364a\232<\331\320\377\274\342\"\350=\237\333\022>5\340\210\275\310\351\013>>\353U\276\306\353c>\306\204,\276e\322\'>\201\0163>\tx\322\275\002\377\246\275\315\037\032>V\303P>\027.6>\370l\306\274\214\241\355\274\261\204\257=\2737\023\276\r\264\236\274\2401S\2749n\034>-\247\363<\006\203\371\275\227\265.>$}r=k\260-=a\034K=x\271\005=\277\363$\276\n\265\377=^\006Z\275O\255@\276+\262\001>\212l4\276\236\351-\276\325F%\2764\314\245=\360\3727>h\030\251<\240\025\204<(\264;>\325?\357\274\227E\205=\367\217S>R\272\304\275\277\341\257\270\003\365\016\2767\350\250\275p\343\236\275\004\256\322=\002\233\356\275\030+`>;*\335\275\036\253\350=6\221\021>\351\315\036=\230\322\333\275\025S\224=H\201\364;\301F\005\276\036S\"=q\252\272\275T\326\032\276:\230%\275\206y\005\274\262\'+>\375\r\226=\020J#\2763\321\r>\376 \036\276}\2549\276\251xx\275A\272\225=|\233\341=X\246\242\275p\320j=\260\020;=0\301.\276\030\0055>\022qe=2\313\032=A\014:\276\014\361\221\275\201r\034=\3476\354=\346u\007\276\261*_>N\014\255=\"<\024>M\204*>\260\201Q>\001\3736\274\232T\003\275\322\r\020\276\341\222\221\275\275\034\004>,Z$>\0165\303=\0363e\275\271\321x=s\211\205\275\202~\221\275\323AC\276\311\n\255\275\265\306\033=\177\224\316=$jT=\002\205\272=\202\002(\276[{|=\016\353\366\274\302\356\031\276$\tF>\203%\316\275\236\275T>\261\356&\276\220\010\331=v}8=\272\2233\276&9\221=g\254\334=[fY\276\373\270-=\330\023W\274\356l\303=7\235p\274e(#\276k\023!\27441>\276D\004J>\311\002H>j\216(=P%[>\367\265P\276\nx\301=K\221c>>[\024\275\241\010+\2764\374\027>\373\234C\276\r\245\025\276\326\303\200\274\207P$>B\234\036;\373\223=>\267\244\206\275\367\030`\273\343c\337\275NV\344\275o\025\t>\035\345\027\276C\323\305;\337\210!>\031\273\">C\037\177\275\225`(>2\361W>\312\325#\275tx\240\275\224\014(\275\033\005D\276\347\315,>5\265]\276\210i\020>\227\215\351\274\254!\027\275\213\356\027>O\242 \276Y\323F>_GQ>\311/Q>7\013\273\274\241q{=\226\361\034>-\216L\276\024Y\003=\006\023b>\001\326\335=\261Q\242\273<n\336\275\026\320\252\2750K\214\275\333}N>8\212\036\276\354\277\002>\013\364.>\341\317]>&XQ<\316\315\025\276%\237d>\033g\005>\274\375]\276\350\033C>\017\276\267\275OL\263\275!\206\336=\322v[\276w]\006>"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
