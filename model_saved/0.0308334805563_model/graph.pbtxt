node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 150
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 150
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\022\276D\275\024\333\016>q\256\035\276\255= >\361\\K\274gG\025\276\201Z\251;\2334\014\275\026\343\025\276\315\231l<uQ\212\275\0043\336\275\241\203\357={\347\261:\017-\337\275\016\220\201\275Q\t\005\276y\342\271<>\262\343\275\261\242\231=\312\322\020\274\003\214\020\276\372&\246\275\275\332\353=\360\206\020>z\034\251=8\260\033\276A\230\255\275T\177\021\276\321\311\005>R\030\035\275g\246\337<iu\001>kns\274\017;B\275\320\202\323=K\216\006>\n[\033>\262a\245=\032Q\r>\354\014\021=\312\t\024>\361\325\223=\"\3245\275$}\340\275\376\362\344=\303))\276?\231\010=\371\231\017>\240\372\210\274+O\037>&D\024>\317\326\024>O\316\013\276\266@\003>@\337\000\275\224n\t\2765\n\230=:8\311<\375\001\r=\356<\300\275\201[\312\275D\214\317=\253D5=\232(\207=I\336\210=0\222\324<\266\261\002\2768\241+>p\270\031>V\261\035\275\346]\253\275\230\307\024\275\304\203\272\274K\266\032;\236\376\227\275*\020t<x8\305=\320\265~\275\'e*\276\311,\021=\300\010\006<0\266\025>F\027\213;J\234\273=\210\307\006\276\315V\271\273\226<\325;s@&=\240m\267\275\nhR\275hA#\275{\365\001>_\266\223\275\004\336\210\274\037\240N\275\217+\002>W\343\257=\266E\025\276k\227\270=\300\301\021>\376\237\034\276\351s\270=f>\320\275y\271\020\276Fp\357\275\355\244\360=S\3468<\037\347\233\275w^\031=\234\216$\276\355\370\347<\026\252\240<\311m\375\274\034\363:\274g\237\310\275\020\377\223=Hq\022>&\206\231=\323\332\016;\200B\203=\251\026\235=\016\334\037\276e\251&>\3134)\276\005\257\273=H\004$>_\005\277\275\331\013\032\275\370\310U\275\220\004\027=\"\324\010=}\351\374\275\322\330\002\276\214\217\332\275>\311\r>\250Za\275\260\2657=\007(\310=\267cO=\345\316\246\274y=\277=\234\374\350=O<\034=\241\005\363<\013S\t\276\023H.\276\031o(\276\032\221\021\276\247\304\352\273\004o\244\275I\251\212=6\245\010\276\303\331.\276\214\373\313=h\376!>2\270\300=\210\217\220\275\210\001\206\275\200H\013>\010\251)\276\340V@\275\347\244V=l5&>\020\013\322=-*\024\276^[\0009\276P\030\276\372\345\021\276\013\025\347=\302\031\035\276O:\306=\343\362\220\273t[\240=\314\026\260=F\364\255\275G\375*\276# \271<\274h\003\276oTG\275\247\253\231<\\\245z=\250\342%\275\014\243\270\275Y\254\224=Q\005\372<\355\014\225=\035T\261\275\2039v=,\t&\276Z\035\340\275g\263\022\276\244I\000>\034v\031\276p\266\004=t \340<\021\304.=\005\233\322=\350#\250\274b\371\202\275\376R\277=x.\023>\252\315*\276\005M\252<w\274\225\275@\315\014>b\352*\276B\257\300=\345\246\360\274\234\345\r=?\002\025\275\357A\267\275{y\336=\377L\034\276!)\233<\355\255\362=j\364\331\275\236C%\276x\220\336\274-1\001>Z\237\003=\325.\201=\352V\372\275\254\345,>\334\322\010\276\222\363\212=\302>?=\233\376\346=rh\030\275 \325\302=pM\005\276\345B\273=P\266\214\275\n5\321\274Ba\016=@N!=\023=\345\275\265\006\376\275\335\337\213=4 \364\275d\271\013>\026\227\240\275\332\232\377<X~\237<\335<\223\275(gP;!@\354\275\304\211 \276\261W\342=\224I]:z\262.\276\355[\264\275\361\231\355\275:-\364\274\315\332\217\275\343\026\n=,I\275\275G\224p\275\321\270\376=\200\275\026\276\177\372F=\2620\014>\253\341\212=\n\2665\275\247m\262;V@b=rM\027>^\274\300\274\212\376\337\275\240\370e={9@\275\177.\227=\230\262\376\275H?\336\275}\212$=\005\016P\275Ff\'\275\'$\302=m\3515=\274:\244\275\234`\025\276\223\366d=-\222\253=\"b\205\275\354\274\344=\254\017\370<\230*\217\275T\350f\275/\315\r>c%\213<\371i\304\275\313\034C=\317\375\010\276\211\310\213\275\022\353\207\273\0147\364=DZ\243\273\300\033\215=\326d\356\275=\2072\275;b#\276d\021{\275\242^\022\276\357&`=\000\302\213\275\304\217\003\276\273\033\260\274\341\226\235=B\001\031\276\201/\010>W>\360\275\371\247\001\276\377N^=\0175,=\377\253\237\275M\"\017>\006y\023>\366\027\236\275\353\201\014>\301\322\354=C>\207\2744D\036=>\354\313\274|\300\351\275_-*=G\244\025\276\325ei\275\256\327\r>%\251\023>I\317\351\275Q3@\275\357\373\323=c\211a=c=\221\275}I\354<1\206\220<\346\213H\274\3441\231\275\314\247\037>\332\214&\276e\302\002>\227\354A=5\223W\275\253\036&\275\031\321\321\275\3363\310\275\250U\243\275\224vN:\274!\353=??\340=\275\245\220\275Y\235\206=\0167\220<\343\237\006>\362\220\241<\031\274J=(\224\034\275\243\323\201\275\022\233\210\275\357\267\262\275\005\303\004>x\231\032\275\263\245\033\276\217Qm=\027\024$>\027\014\351\275+\337\t\276\375\312r\275G\263!\2760t\036>\266\310W=\271\3146\275s\301\036\275(\037\352=@:5\275@\273\003\276Q\376\367\273\212\372\246=.\350\005\276=h\335\275=1\016\276\300\363\342\274\360\315\266=dCU=R`\367;\177Z\334\275\225\003 >\226\361\005>\345\337\231\275\nPN=}\231\304\275FO\022>V\334#>*\320\207\272\344\336\255<.!\214\275\254\026\216\275\243\236\313=\214\244\243\274lc\024\275\032 \030>\006\263\031>\033\004\010>\202\010e=\344\211Y=\207\360\217\275\005\205\002\276$\317\002\276}\270\263=\036j\366\275\203a\306=\336\2412\274\323\255\200=2E\373\275C;\351\274\374\325.>\311\226\237\275\220U\'\276x\206\026>\327\330\020\276:\315\247\275Q\016\022>\246o\304=\241h\325\275\316X(<qp%=\346e\221=_1\217\274D\026\352=yp\n\276h<\200\2756#\214=\362\255\257\275\354\341\271\275Y0\246=\211?\t=\324(\330<Q\005\304\275\247i\303\275\361\001*>1\362\331=N\325\014>\245\t\251=\213\002f\275\013-\350;2\213Z\273*\215;=\300OT\274\367\250+\276Vv,\276\252\375n=\244\207)\275\031\336\243\275]\357\304\275Q\236\023\276D\367\275\274\0305\241\275\035\344I=\n\334\203\275s\013\214\2755\247\000\275\"\226 \276n\224\223\275\242\025\235<(S4\2758\205\250\275\346T\223\274\327\203n\275\310\220\227=H#\177\275\'\360\334<0\321\263\275\263\316->\tT\022>z\030\021=`a\216=\370\275\345\275A\220\216=\217\007\003>\312iG\275\325\214\252=_\307\341\275\243\033\311=\332\263\235\274\367\260\370\2754o\372\275mz\031=#\327\212<\253T\271\275\rD\355<\203b\242\275}\375\033>\373f\003>k\261l\272\305a >:\305\232<-\341%\276\367\214\257\275\217\315\035\276\n\305\247<\003\010\377=-\213\034>\312\273\024\276_?\025>\006\246\341\274\247\354\202\2747\215\322=\225%x<\312\275\357=\321\321\267=[\300\235\274\035^\244\275\214\277~\275\034p!\276\361\024\254\2742d\013\275\r\266\233=\336\223\342\275cW\020>:\\*\276BH|<aa\215\275+\272\027>}\334i\273 @\331=\002\203%\276\007}`;\013\302\351=\317\226\243\275\034\372\314\275\224\313\363\275xD\016>\003G0=d4\221=\027\341\375\275\324\267B=}\354R\275\340\375\353=G\302W\275\224\366\323=\354\372.>\302T\363;h\363d=\255\216\240\274\030,\003\276\210\344\257=\"\214\333=\001\266\017\276\310z\023\276\024\233\005\275\237\031\315\2751\362\022>\010\003\277=\251B\373\275}Q\037\276\275\251\221<d\007\220\274\3618\247\275\352\330\n>\244\025E\275?\310\n\276G\206\362\275\225%b\275Zr\225\275\004\260\377\275vR+\276\\W\341\275\360\303\367\2750\377\374\274\0248u\273\334\261\t\276\026\210\007>\230=\264=\204\322$>\310f\315=\350\234y=x+\237\275u\256n=\020\245\263=\225V$>\251\240)\276\234\357\213=j\337\313<\251D\020=\220\302)>\243\327\024>\356\335\340=5\352\t\276\270\365\027\273\310\337a\275\330\241[<L\344\214=\267-\267=\320\3679=\323Y\"\276\240\321\237\275\366\243\005\276\363\261\357\275\265\207%\275\236\"\352=\265\245\362=\311:\013\276L\317\326\275\024\212\024\276\233\336\203=\325q\373=\232\343\363<\371\311\336=.$\346\275%\271\263\275\004\222\354=-\363#=\216\',\276t\255\217\275\013?\240\2756\247\306=0\326(>\336\367\323=\272\'\206=\330\330\n\276\366|\270\275\365#\302=,?\323=d)\332=%F\204:o\207\314\275\252\347\020>@7\356\275\006\254\021\275s\203[\275F\213D;\261\357\020>\212\322\216\274\030\"$\276M\3157\275\255\364\034>\032\034\r\276i\021*\276M\322\273=\025M0\275F\014w\275\374y{\275\362\353[=\247-\266\274\\*+\274j\207%>&j\213\275\320&\377=\202\031g\274\2665j;\267q]\275\316\202\367\275\212\220\313<g~\231\275\027J\343=\273\331\253<\251\374\034>+\274\243=\212\321\274\275!\257#\275\357\264\273=g\310\006\276\243\337\377\274&Z\222=Q\032\001>\303\321l\273vc\016\273Ka\000\273y\037\241<\211\233\006>\263\236!\276\214D\001;5\250g\275\333N\220=w\\&\276/\255\014\276If\031\276\332[\247\275\006\314\007\276*\244\214=\231\247\226=\365-\002>\024\236o=\022\245\260=\234\210\230=H\332\026<\363\255<\275-dr\2750S\250\275\360#\340=\372\301\025\276(\316\327\273\215\213\000\275;z\225\275F\006\360\275\274\257\372\275\256\261\001\275\260\355\201=jvN=Sy/=;:\310=\373\207\264=\250j#\276Vm\326\275Y9;\275\267\275\367=\334~\313;\266X\027\275\315E\377\275\3341\004>\3747\024>\324\306\373=.[\256\274\205\250:\275\335 \256\275`\016\316\275\372s\'>\263\017\211\275\327C\033\276%\227a\275\247\335\330\275\361\000\202\275\344\340\307\275\2743.<\365\237\024>\034\265\253\275\256\251/=\312\230\031\276\212@\333\275\247~\254;\030\247\355=\220\203.>\304\323 >\277\370u=\206\306.\276\306\r\317\275\267W\n\2738l\351\275\273(\025>)]\333=yW\026\276>`\225\275\245}*>\343]\246\274\344\224\361\275#\275\010>\006]j=GD\220=\'|\014>7\027\032\275\3461\023\276\003\001C=\206\213C=(\300\020\2764U\237\275h\260\002\276\357e\346=\352-\n\276\022\245\366\274\231\370L\275k\374\213\274rm\016>\347\237M=\033\307\232<\374)\023>\375\023\207<\274\367\245=\277\201\374<\034\r=\275\326\350!>&\207x\275\303\241\004\276\360\304\017\276\033\251\003\276D\206*>\201q\315\275\004\373\304=\\\326\306=\263\324\345\275<O\004\276\365)\034=\204uq=$\222\233\275\211\037w\275vK)>&\206\276\274d\036!\275\336\001\265\2740uO\275J\030\032\276\2379\216=C\325\311\273\244\r8\274\244\025\205=\325\203c\274\242\203$\276P8\215\275c{G\275\212\250\031>\037\276\336=\233s\"\276\347J\354=q\373\200\275\222\222T\275\241\307\255;\212\244\241\275\"-\254=\r/\031\276\261\212\002>]`\003>\261\"\240<hk\'>\035J\347\274\370\275\324: \303\023\276\312\254\302=\217\314\200\275\300\234\373\275\0363&\276\366\316\'>\331\035\031\276\332\275\303\275\177\027\342=\255\337\203==\024-<\036p,\276\006\352D\274\357\206\016>\000M\342\275\367!z\275\034y\214\275\"(b\275\224\373\274<\377\366\021\276\200?O=\242\361\025>\026\347\032\276;\237\025\275\201\325\032\276\373:,\275\033e\233\275|Q \276\366\360\313\274\357\301\003<\217\365\032\276\210\360\243\275\326\0079= \342\027\276\304%+>\332x->\256I\235=\334\324\225\275\376\347\330\275\342\347\006\276;\370\306\275t\354\005\273+\036\346\275\252\330\212<\2257\301=\345k\034>\303\355\324=2*E\275i-\305\2752~\330=\304\202\344\275G\215\342<\\\341\311\274g\326\021\276/\271\'\276Q\234\000\276M\313\327=n\352\037>\272l\325\275\236H\203\275\305\254\t>\242\003\211\275\375w%>\266\363\234\275\351x\177\275\320\'p=\246\260\037>\332[\237=c~\r\276\350\347\201\274pE\375\275C\302->\375\265\002>\234\337\032=];\313\275S\034\327\275\243\234\213\275e,\034\276\362\207f=\327\310U=\236\354+\276[\337&\276\021\177\030=\376\255\234<vl\002\276\363\277x\275,\030\224\275\004\206\021>\342\254\210=\002\234\373\275\213\255\017\276S\006\010\276\343\237\252=[A\357=\037Q\306\275\205\240\031\2760\363\322<\001\217\343=R\214\363\275? \n\276\267\314\272\274\274\237\260\275\237f\033>$\251$<\014\303\343<P\232\r=\360\005\333\275\222L\033\276@\365\315=\334\216y\273\007\344\377=p\007\250=.\301\007>\004\356}\275\314.&>+D}=\251\261\340=\217\346K\275\302\327A\275\035\004\353=\016\347\233<\017\255B\275c\325\316=\036(\002\274\025\030\356=U,\357=\265&\263\275jn*\276\\\333#\276>.\334\275\345\264\'>\327\224\023>\265\306\037>R\236\025\276I\221W\275oR\337=v\361\016\275\224+\251=\025-M=qe\003\275\247?\244\275\373\225\n\2763\307\321=iO[=\231\2745=}\333\325\275b`\346:\004p\247=n\004\342=\354+\024>\357T\353\274\273Y\213\2750.\307\274\335\001\326\275*\323\270=2>\315=C\361\212=\370\213\374\275-5\243=\371)\252\275\2414\200\275\026%\025>\245\010 \276A~\251\275u\220->\204Zd\272\307\222\303=\275}\301=\204\273u\275M\004\376=\370\217\t>nl\023\276\270D\204\274\327BT\275\006\345\024>*\030\217=\\9{\275\251\032\027>6\344\326\275\373\206X\275F\007\021\276\201\345\016>\256m\036\276\373,\215\275\230\351\">,\343\335\275M?`\275\014\263\214=\335/\255<\020\253!>&\254w=\242$\007\276\027$}\274\272\347\212=\'\321S\274\014]Y<\335\024\371=3\3544=#i\007>W\227\"\276\267\324\276=\223\001\246=\217$\327=j\315\r=}\000\267=(\220\005\275R\034\252\275\177zU;\327[\247\275\336f\325\275\242\344\021>\263\373_=\247\233(\276\301\352\340\2759\020\005\276\0074\025\276=+*=+\306\036\275e\323\005==\027\314=\332r\337\274)cf\275\211\227\240<\325\237\'=\252\017\223=\3667\237=\0333\004>\377>\004\275\271\013\024\276My\025<0]\321\275\364\365\303;\331\244\220\275\275P\261<A\033\325\275\253\023\241=\233k)\276F\333\031>87\207=\2130\003>EK\254\275\325%\"\276]\374\255=%\360\251\275\3658\024\276scK\275\010x]<\254\024\375=7|]=<\356#\276Mf\207\275F\305\210=\nL\300=\251\037[=\253\357\214=;C\027\275>\275\341<\266\256\261\274\375\367\r<h\034\355=\3074\311\275\010a\n\275\232Q]\275\266\351\205=\316\201\031>El\010\276\354\2339=\265\362\320=\177\307\000\276hA\207\275b\351\305=\215\265\365<\317w\363\275>8\014\276\360\341\251\275\353_\255\275\367\245\207\275$\006c=kq*\276\022\006\316\275\2624\010>\207\264\021\2750\031!\276%\335\307\274co\353=xj\177=\014\364\020\276\002;\024\276R\026\000\276\336Nk=\n\363j=o\017\020>\263\275\025>s\215\321=\377\350\030=\347\373\345<\377@8=\232\031\372\275\332H\317=\022B)>\266\304\375\275\214\026\305\275\256&\226\275Q\330\261\274\007!%\276D\010\263\275\221\201\262=\003\213{\274\376\002\342=K\315\243\274ip)=\327U\364=p\261}\2751\027\364<].\213=@\231y\275\347\274\231=\226\305\256\275v\300\030>\245\272\254\274:5\211\275\322\020\314\274u|&>M\375\374\274*\220\264\275\202a\023\276\211\310\260\275\0313\034\275\321\311\312=\307b\253=\'\362(\276\\G\177<\005\353\032>\301\247\'\275\333\333\355<\022%\356=6\3309\275\321\231 \275\001\233\302\274\377:#\276\301\'\033=\030\364\t>\361\217\320\275\023\207\314\275C\220-\276k\251\006><P\243\274\250} >\013h\021>\"\014\235\275\300R\205\275/aJ<\323:\371=\267%\223\275[\372\351\275\214:\322\274k\022\316=Vk(\276V\n\272\275j\r*<\034\216\373=\346\361\272=/\006\335\274.\207\010\276zc\265\274\344\r_=\177\023\013=\330\213\225\273\231\221\033>\007\361:<\000\266f;x\207$\275\255\343\014>\352\"\027=\261\310\024=k\022\024>\304q\362\275\2173\351<\017v\031\275k\271\355<\025\346\027\275\',\206\275\222%%\276\221\253\021=s\210_\275\260\254\226=Xu9=G`\241=\0018\017>\006\3733=\217. >\356\225\033\276z\257\014\276t\352\202\274\2755\005\276V]\356\275\036E\215<\3418\350\274\215\375\037\276\266\245\207\275\\\245E=\276\226\243\275\225\006\220<\003U\351\275*\177,=\025\006\227\274z\323%\276v\216\323\275U\376\007>Uim=\030{\227\275\177\027\004\275V1P\275[^\270\275\330X$\276u0\355=,\251\003>W\326\022>|\221\032>h\357\016>\316\351\345\274\314\020\032\276\204\255\364=\023\274\266=oS\005\276-\236\343\275nvo=\030\305\027=\314\334\030\275o\305\031\276\2319\004>\324\312\321=*.\226=\255H\030>\307\303\034\275\300\032\334=)\257\271\275\210\376\311=1\'a=\377\374i=\263\304\341\275\363\344\321<\311\323:\274Y\260\026>\301\256\275=\034\306\371\275^=\346=\316\306\307\275\222\247\250=\013Ne\275\236v\017=\0245\244=K\370\260=\001\254\215\274\334\367\346\275\363f\357=O\350`\274\277[\353;\027\200\014\275\336F\376=\024\234\001>\236\262+\276X$\250\274\016\310%>\t8\020>g\3259\275!J\242\275\370\373\312=\312\325t\275\375\027\025\276Q<\316\275\333\r\t\276Gm\037\276\027!\035>\000f\222\275Gm\314\275\273\031\003>$\306\320\275l\3153\274\361\252\317\275h\365\010>\024\327\235\275\013d\254=\307n\021\276\177\325~\274\323A\371;\303$!>~fg=\t\214\272\275Y\242D=\356O\226\275\365\233\263\275ov\242\275.^\354=\021Rb\275\354\261\014>\243\337\010>\2103[\274\320\247\220=\255\256\240\275\022s\003\276)#j=\357?X\275\311\327\235\275u\255\244\275(\254\001\276:r\021\274\343D+\275\221\215K<z\311G=v\203\357\274v_\026\275\025\\\237\275\222ZU\275F\031\345=~\270\374=\342M\"\276\320\335\020>\265\303\035>R\332\313\275\031\264\003>\037T\027\276\304.\223\275\255\021\312\275s\016\024\273)n\236\275*\027\224\275\005\000\000\275\355a\024\276~\t\003\275F\334\t=\326\200\365\275\010\026\324=\250e\003\276W\357\212=\207\303\237\275\274>\245\275\007\333\275=\327\315\271\273\375Q\014<C8\324\275\235\032\010\275\017H\033\276h\213\214=\324\241\300\275\266\325\327<2-G=\001\350\311\274EvM\275\315,\'\2765\210a\273\326\313-=\372\316#>A\261\007\276\000\276$>/T\'>\233\220\335\275=\274\013= O\307=?\344s\275\316\207\023\2765\263\367\275~\346\232\275\371\267\354=\177($\276\312\377\013>\271\214U=\300x\273\275W\324U=\370\205\013>\366^\332\275h\313\252\275\221%\025>\200\315\033\275\301&R\275\357\237\035\274ZU\346\275 L \276p\326\320=\374\233+>\364P\211\275\037r\026>\204\0038\275yo\022\276\372\256\343\2756\273\363=\\\021\010>\001\264\032>/\031A=s\312-\276\262\355==\377\200\307\275L\201X=\227\361\236=E`\003\275\337\2736\273\337\t%\276c\241\255<\254:\321\275i\203\372\274\256\365\022\276\031\257S\275\270\376\003>\362\312\345\275F~\375<\016/\324=\267\034\364=\025/\t\276\217\227\030>n\322\273=o7\356\274\325\314`\275*\234\2038\227\032\000\276a\213\206\275G\315\025=d\333\224\275U\025\274<\257h\030>\322\212,\276\032\243*>\330\t\033>\314L\265\275\253\362\020>A\312\014>Q\350o\275\271.\034=wJ\033\276u\325\220=s\355\032>\232\351\244\275\270T?\275\245\363\256\2742O\215=\314|\016\275\317\201]=X\224\027\276\370\205\312=\216f\226=\244\371\261=\037\217\321=\013\376\263\275\"\020\213<\354\263\230\275\361\031\025\276\352\321\014\275\254\315\362<\223}\227=?\374\250=\225*\310\275])\005=r\375\025=w\200\313\275\'\361\n>\3750\266\275k\203\356=\223N\017=\353\005\027>\3222m=\244\212\021\276\035/\226\275\300\037\363=\325B\250\275$d\315\274({\025\276\317W)>\241\235\230\275.87;\215Q\230:z\325>=l\276\255\275|?\330\275+\016\215\275\000\224!>\313t\223<\311\n\246\275\214I\201;\017\335\014>\202\026\003\2766\rp\275\027\235\020>\207\246\t=\217\210\t>a\324t\275\331\027\312\274p\360\251\275\351\345-\276\004K/\275\335\020\204=o@\014>\300c\203\275\016\026\240\275\211\273w\274\013\306\204=\014;\210=/\332\223=\366\241\334=\021H\302=\373\311\245<O\020\222\275a\177/=]\257\037>s\\\254\275\344\333\004>q\352s=\277\253\345=\220\033\004\276\331\224%>\010R\212\274\262\2343<\340\247\037>\316Z\321\275\257\324\333\275et\034\276\\`\343=9\232\202\274\217\373V\274\373\232\006>\276\017S<\264\t\350\275\035(\201\273\253\024\013>!\267\016=\247\020\r\276\205\250\236\275\023\246\201\275\206O\344=>\353,<\035`\000\276\355\234%\276\2171\352;\355w\224<f<\027>\r_m=\025T\020\2767\321\221\275)\014\366=\r\322\027\276\347\345\262=\351\367\035=\001\342\016\276C\017\210;\215m%\2742\036\016>u\322\241\275\246(\312=\301\253\216=\024\214\302=\233\251B=I\307\210=-\r\321\275=#o<0\034(>\357\003%\276\204\375\215\275f\027\001>\227\232\245=\037\225\025\276\277{\020\276\274t\030>/\220\324=\303\262B=\036?\344<\225\257\213=2\030\021>\254.\366=7(\365=\241d!\275\0352\006=b\227$>b\255 \276\275\317\250=J\005\241=\224O\231\275G\314\245\274\247\207\345=nZ\334\274\224&\255=\343b\263\271\333ep=\022%\t>\332\233+\274h\263\353=\210\240\027>\233\273\237\275\2314\210<\310\330\003\276Ic\276=?\332#<<\344g\275`\343\261\275F65=%\241\237<TF3\274\020\177+>5K\">k(\">Hl\262=\021N\360\275\271\306\301\275(y\027>\363}\263=\3365.>T\376<=\266\034\031>M*V\275\003#\273<\220h\036\276qN\007\275\317\205\265\274f\344;=\035x\013\276\006-J\274\001\251\245\275=\367\233=\270\201x;\305<\006>\302\247\024\276\003C^\274\266R\233\275\357\317\247=\213$\031= \303\232=k|\014\276I\230b=M\347a\275\366P\204:\351}\237=*P\243\2753.\300=\261Z\270\275g\326\001>\316\001\003>\031\242\323=\365\315\375=3\346\263<P\373A\2753U\360\275\255\330\377=\3213/=\313&\022>\232-\266\275P5m\275M.(>\250S\005\276_\021\010>\373-4\275\273\365\224=\370\004\227\274q\036\355\275d\261\025\276F3\357<eI\314\273\016\227\320\275e\324\000\276\317?\356<=\362\323<\330\201\010=\022\263\210\274\364\214\312=\037j\346<\317\270\326\275\356\216#\276\332\350\210\274\352}\266\275\027\342\266\275<S\320<HW\023=\014\240\013\276/\\\262\275\215\210\020>+)Q\274i3\234=^/\250=\212\335\016<\232\227%>P\031\t\276\367\002\335\275(\212\301<\004\230h\275\265\317q=O{>\275\300\356\236\273<\227\227=D<\000<\317\201\005\276H?\266=^\\\022\275H\034\374=\030<\025>\027/\021>\303t\020>\231\253\347=\222\237\207\275c4h=\224\341\010\276\235\244!\276vm\241=\210\007\343\275\363\323\374\275,\366\035\274\302\304\016\276\212$i=\347\3142=)\331\210\275\323\352\310\275\'`-\276)\231\310\274\301\024\255\275\356\010\000\276\323D\274=E)\244=k\247\231=\204\333\204\275\n\007\340\275\247\373\014\2762q\030\276&g\333\275\250|\310\275\2106\037\2766=\306\275\237?\202=\274\210\001>\212\372\037=\016\237?\275\357\322->S\344\357=&w)\276\224\361)\2763\275-> \215\360\275o\270\271=\255\341\365\274\363\207\204\275t8\320\275?\002\022=Nr\333\275\2478\331<\375\\I\274`{\235\275\200\203\236\275Z\200\376=\213:}<\242\001\014>\355\364V<D\320\307\275\250(j=;L\253=\264q\032\276PX\013\276\200\366\037\275\306*\232\275\204b\000>\224\243\205\273!\"\232\274\344\244l=3\313(>\360\226\341<o\004,\276&\033\022\276\253X\212<\2078\217=\243\355\t\276\\m!\276=:\034>%n3:\225\006\362=\"-\312<o\022\022>rp\223=\023M\022\274\302\216\340\271\376\353\022>\030PL\275Z6+\275\212\r+=\257 \342=q\203\264=\212\225\223=\326\366\366\275\275\343\231\273\252\371\202<=\216,>\371E\031=e\031\341=\234\263\327=\307\241\333\275\004L\022=\034\016\265\275\232I\006\276\350\n\013\276\032\205\326=\346\272\223=[\322\202=I\277\206=)\r\262\275\373\324{\275\361\265$>\260_\010>\336s\365=\265%\007>\r\370\026<\002\203\003\276\362\356\306=+\r\274\275\302V.\275\024n\305=DD\n=\3004\020\276\224$\"\275\360\301}=\013\331\255\275.\234\324=\316\257\324=\204!\307\274G\r\026\276YZ\'\276\366T;\274\335\205[=\317A\210\275\237\373s\275\254\256*=s\026\247\275\316.\032\276\314\0250\272\330MR\275e\2056=j\342\275=\254D\001>\"\332/=\225Y\010\276-\264\326\275\311\"\265\275\202\253c<\214z\020\276\007\375.\275\311\336\237<\020\014\315<\216!\'\276\202\234 \276\210\324\003=s\357!>\370S\026>|\301\000\276\261L\237\275ac2\275\000\314(>\302\365\375=\204z#>\335b<=\323\214\357=\227\221\331=\372f&\275A\236\364\273\266\276\200\275_|x\274\362\360\022>\302S\255\275\300\322 >\304\317*\276\256E\013\276L`\330=\355$\007>4\314\250\274Vd\r>[F\242\275\006\013\234=\316f\036\276\177>\037>Q\272\261=n\024\310<\366D\036\275\360\270\312\274w\375\202=\000\372B<wQ\205\274\326\022\250\275\272\304\360\274\212s\344\275m5\236=\\m\310\274\003b\334\275zq\204=Ps\227=\224\3017=\222 \033\276k\235\333\275\241\260\217=\037\033\006=\0374\270\275\373/\235=o}\247\275\024\332\006\274\341\003\032=;\001\351=\320O\251\275\352?\n;Dl,\275Z\215!\276b\000\211=\374\242\006\276\024d\204=Y\'%\276\233\014\255\274\2431l\275\262\t$\276\337c\344\275\322\2173=G\253$\276\271\223 >\377\234\242\275\250k\302<\036\216\305=\3000\203=\302\226\262\275r\026\377\275 \2647<\206\327\310=\013\304\210<=A\007\276W\360B=7\350\316\275\212\347e=\345F\217=v\231!\276\215b\341\274(u\310=X*\347<\237h$\276\367!\274\275\337i\312<P\367\032>G\232]=\200\323\325=\313\026%\276e\232\200\275\201\"D\2759\375\244<\275\350\035\276,\363\360\275\200\366\327\274\374GA<\233\343\307\275\355t\313\275\r\232\024\276DN\203\275\255\347x\275at\361\273\006R(\276mo$>\014\257\335\274y#\031\275\207\024\265=\3616I\275\221B\217=l\276b=\331\231\370\275s\237\256\275\324\226\016>o:\262=\003g#\275\'_\025\2751\243\351<,+\357\275\374\022_;&\"\327\274\245\370d=\371\020\303\275\336\\\017\273\274\361\243=I\016\002\276k\241\237=\217\350\030\276\026\256\312\274vw/=/C\273=o\313M=\217\244\246=\321\005P\275\261r\016>\343(\345<\330\024\377\274\353\026\377\275\375\307\374=n\231&>v}\253<_\210\035\275\240\000\020\275\211\002\215=\336\305\002\276(d\253=\211\350\017>\320\200\010>*\206\010\275\244\230\347\275^U\302=N\003?<b\335\244=\351\204)\276\001i\233\275C\013\313=\316\250\022\276\262\251\020\275\'\303\020\276\352\006i\275<.\016\275\010\310.\276\377\022\320=\333\241\343\274;\276\343\275C\311|<!a\236\275\027\307\377\274\277\216$\276\336\242\347\275\367\r\316\275\023:\246=r\355\237<\'\321\274\275\326\034\247<]\350R\2741\006\215\275\016W\331=\325\303\266\274\314\353->9#!>\005\205$\276\017\360\244\275n\035\205\275\031\334\236\275y=\323=\334\325\201\274\237\212\031\276u\347T\275=\267i\274-=\010\276\214s:<\367\023\"=\233\326@\275\364\300\370\275ed\346<\323\270\022\274oT\246\275\222\220\034>=J\004\274\341\264\311;\354\275\207=D\251\262\274\314\370\264=W]\017\275\\\304\336=W\254\246=m\241\326<\376\233\277;\325\026\344\275\226\031&<n\212\225=\211(/>\035\224\330\275\327\377\323=\317\213\025\276\316#\r>\2076\202\275\231\367`\270\366\255\021>\013\t\033>\346\365\350\275\211;\201\275\373\351\376\274\346\032r\275Vv$=mw,\275\037`\310<{M\236=\341\251\222<\352f\302<\250J\">rm\364<\327\014!\276\344\332\022\276g\013+\275\271U\003\276E\362\227\275\347\355\033>\253h\300=\205\344b\275%6\360=Tl\350;\203\302\313=o\327\321\275\347\230\215\275\006\224\022\276b\'%\274\240\317\234\275U\237\000\276\020%)=w\031\322\274\000qZ\274iW\000\275\023\014\200;\366\\S\275\340\236S=\262\246\027>.\003v\274\210\003\354=\374\363\004>\322\353\277\275\314\274\353=\311\017\022\276\226\244\213\275U\323\233=\017\013\362\273,\373\260=\2572\264=6\004\0349)\036\r\276\030\253\025<3#\016\275e@\014>/O\347=^\334y=\217\324\212=I\017\025\275\206\333\311=\252\023*\276\034\352\250=\205/\367\275]!R\274\035#\214\274\360\255\334=\026\372.>\t\223%>\345\210\016\276\250\032\006>U\216\322\275\200\336\251=\315w+\276`j\367\275M\027>\275\032\220!>\336` \276\303\203\243\274\317ti\275`\202\331=\036y\032\276\251O>=\036\354\013\2769\236\254=?\017\253\275\201\314\005\276L\212\002\276\337\022\371={K\007>\264%\362=\266(\346\275\211\016\027\274{[\323=\266}\324=\323\337\237\275\365\332Y=h\216\371\274\002\362\307<\007v\361\275\374\245\331\275\216W\343=\313\227\031\276;\005\255\275PsP=\303\210\362=\245\300&>C%\017>\023\223\037=\342s$\276x\221d=,\320\273<i\317\273\275\235C\006\276\2466\014\276\277y\035>:<\036>\261-\355\274\335\211&>\351\003\027\2765\212\240;\277\322\314=2\335J<\375\367\003\276;0q<\306\214\003>\312\360+>\301y>\271=\322}\275n\324\024\275w\n\260\275rL%\276\034V\250\2730\312\013=\206\356R=\216j\275<tp+>\262:\n>\035\326/\275\361\004\243=\203\201\'\275N\t\367=P\260\245<\240\223\377\274\326\255\317=\202\264\263\274\016\036}\275\220\021\266=nc\362<Qg\032\276gO\300=a+\244<i\330\207:\212]\020>\312X#>\307X`=\204\3212=\275\001\202={\242\224\275\312\374\\=K\0228\274e\247\000<\343\307\247=2z\204\2745\261\273<=G\027>\353\335\314<W\260T=\033\353\036>\275\215\371=\232\376\323<o\363\376=vI\302=\277G\361=\026\274\237\273\375\360\372\274+\353\252\275\322\252\233=DK\254=\347\313\027\276q\372\221\275\034B\201=1q\215\275F\005\312\275f!/\2763\030_<\205\312\251\275\314l\306\275\234\217\365<u\254\352=+@\217:\037{\370\274@c\252\275<^->l\315@\275U3\336\274\037\207!\276\356\372l;<\301|=[w\230;L\314\214\275`.\373\275\243\301h\2755E\204\273\333z\267\274\026B\010\276\2466\344=xS\022>@\302\355=6\343\302\274\367\254\332=V\241\026>\351\307\016><\232\363=G\244\002;\311\275\344\275g\363\245\275e\214\344=\241\365\371:5N[\275V\203\352=\036X\376\275J\311\263=\020U\362\275\327j\342<\312X\\=\247%$>\352\277J\275?\325\016\275\265\230i\275\366\307,\276a\324 \275 \356\216=\355\026\006\276\206M,>!\037\242=\312\352\206=\227B\347=\211X+=\006\025\255\275\370K\225=HA\372\275p\257B;q\r\257=[\300\263=\252\301\260\274\253\263\032\276\033\353\217\275\235r!\275LH\322\274\232m\342\275hm\n\275\3437\364=\202:{\275\323ch\275\251\246h\275\205\257\\\274\354\201\272=\224\033\306<\301\250\340;\261\221\'\275\272-\021\276\300x\217\275\0329#<\375\nz=/\020\221\275\225\374\255\275_v\326<\343\005\'\276\'\321\320\275\265\026\003\276\350\023\274<;\010\306<\306\001\016>\003\323\376<;\364\002\275{\021\327=`!\325\275\323e\027>\277\325\272\274\347\"\313=G\301%=|\034\316=\300\266\031>\301\314@\275\311\205\331=\300~\026\276\335\022_=\ti\362=\3512\214=\003\343\220\275\"\rH\275\346\247\223<\030\302\013\276\035\200\033\276\024_\020\276i\2440\274\"-\317=.\342\206\275\357\331u=t\020\006\276\336\255\250<\326{\031=\223\336\350\275\2464\375\274]\237\275\275a[\242=\t\375\010>\003\213\'\276Y\316\336\275\244\310\034>\247\222\243={T\260=h\253\030<_?\314=;f\321\274\211/\027\276\024\206\351=j\213\322<Z&\245\275\234\037\267=\275C\013\276\255\326l\273v`\216=+O\375=\226\270\276=X[\006\276>\303\017=\"\204\240\274D\303\267=\014&\344\275t\340e\275w\245\032\276Mc\372\272\003\361\032>\347\231`\275y\313/=\260\r\331=\341\276\001>\006n\007=\035\226\314<g\267\312\275J\273\260=\351R\033>\010\252)>p\001\\\275\223\266z\273\344\234Q=\223\027\033>\352\367\243\275\355\266\230\275\262\366\266=\020u\200\273\314\233e=J\317\327<\265T2\275XW,\2769\201\">\233u\265\275\365\337#\276\25210=\346x\267=\212\377\201\275\254V\356\275\246/*\276~\346?\275\223\342\333\275\303i\033>}\376\001>=\207/:\025\037\310=i<4\275\357h\371\275\244\325\267<\373\250\030\276\2444,>\276\237\033\276\322\256\005=e\2473=\025!\024>Z\211\244=Hk}\275\376S\371=\\\270\331<\351\351\237\275\323+X<\352j\341\275\243\314\201\275\222\327\214<\005(\016\275\223\274\252< \355u=?L\001\276`?\306\275\207\300\217\274\317\257\212\2755\373\215=qL\270\274\270e\020>\204\373\213\274\357\261\341\275\247\204\344\275\005&\224\275\212}\000\276a{\331=\025dm=g_\215=\3520\035\276\265N\335\275;\033!>6\005\221=\356u\035\276;\007\037\275\343(\026>\341\274\n\275\322Q\363\275\355\363-\276|FM;\216\035$>\3173\016\276\256\324\234=\371\010\347<-\233\006>\215\301\273=\035\256\255\275\2143\346=\364&*=\371\024\307\274\377e\351\275\247\260->\233u\005>\201:\003>u\033\346=\244V\r>po\027\2757Y\020>\377\371\224<r+\330=s\333\364\2758\354\267\275\217\253l\273\262\275\027>\032a\033\276E\345!\276e\222\354\275\230\322\006\276\3616\220\275T8\261=4\216\013\276j/~=u\206\337\275\347\363\177<\225[\036\276\270\005\026\276\t\315\001\276\2022<=\034\255\360\274\036\354\214;\307G\223\273\214\323\006>\325a\016>O\025\035>\031\332\376=\237\210\n=\026|\211\275\035_\024>\277&%>\377z\307\275\344\246\220=\267\247\233\275W\217\t>\217\316\307\275\274\356\246=\010\220\247\274+\354\232=4\325\210=\"\320\306\275\r\304\017>\n?\021=-\305#>\201A.\276_\360\327=v\3500=\350\332\026\275\202\363\212<%b\216=\217j\341;\250\202s\275S\233B\275\323?\026\276\366<p;\274A\226\275\222T\237=\t\262\036<\324\002\022>\261-\306=\374>\270\274p\331\371<[\303\237\275\352p\336=(\317\206\274\373\204\032\276\005\263#\276\225\245\265\275&\231j=]!\336=\217A\262\275\360\244\335\275:\350\265=b\274\010\276\313\335K=mg\227=6\273\212=\025\321\334\275\030\210\'\276\210Zs=\266q\n>\373\212\334\274S\275\251\275\353\245\367=\033_\"\276\213\245\031>\311\221\030=\313T\352\275\032\205\261\275\271\334\225<\200\"\301=\212\257\257\274\373K\013>\233o\267=|\325\303=\023a\000>\020\323\335\275&\335\260=\002\340\246=u\024f\275\303\322\360=\205,\230\274a\216\347\275\035!%>\207}\367\275\310\304\005\275\350\221\247=\341\215\312=\310\233.\274\\H\345<\005\024\005={\036%\275\242U\304\275\337\252\006\2769\207\020\274~\025r=\373\365\324\275\210\365\032=dv\355\275m\017\355:\025\252\370=\200\250\n\275\303\017\336=\363\177\035>\251K\370\275\235\022\020>\316\255\277=\310?\032>\327F%>>:\226=[\203\020>\226*\002\276\261\256\006\276*\224\252=\333\035\030=H\337\267\274^-\032\276\274\025D\275B;\004>r\031\341;\213+(=\371\266D=r\373\024>\226\236D=\263\271\201\275\035\036\251\275\262\245\242\275|\024\301\275\252&\240\272\016h\360\275d\250\315\275x9\376;\032\335\335<\242-1<.\365s\275\351\246\231\275\213\014\327\274\262s\250\275\236\331\372=%\243\254=&R\345=D\333\006\276I\361\316= 0&>N\3021;\373\244.\276b\200\245\275/\313\005\276:*\361\275~S{=\335\215\024\276\025M\335<w\331\233=\325%\016\276\341\352\010\276\317\033\016=\002\313l\274\'\301\260=\032V\003>\363\244\260\275\3319*\2764\202\024\275\370\332\355=2o]\274X\017\343=-\207)>A\244h\275%\335(=\264\302\302=\225\207\r=\300O*\276\356\225\220\275<i\n>\352\311\315=%\241Z\273lf\023\275\367\240\000\276\"\034\356=\200Z4\275ps\010\275)\307\023\276\277[\207=_\013%\276TN\006=\234\327\350:\032a\036>qL\313=\n\243!\276 =\333\275\214\204\247\275,\347->\362bP=\005\322y\275\254\322\267\275\214\007\342\275\220Z\026>~Q\324\275\333V\214<\340\275\001>q\3516:U!\036\276@\202N\275\214A\033\275\245\205\344=\365\255\345\275\243\007\242=I\241G=wR\247<\003\257\255\275\314\204\177=\n\253\324=\334K\277<w\014\033\275\344\267\303=6\310K\273\022F{=sB\004\276q\005!>\000\243E=]W\375\275p\253\331=w\036\365=\306\220\371\275A\311\225=\305\230\003=\305Y\t>\315\210\325=}y\">\203\211`\275\206t\204\275a\245\377<\335{\205=\002\002\031>O (\276H\361\350\274\\\344$>\301d\001\276p\233\222=\252;,\275\273Y\260=\236\014\016>\0211\260\275O\343\231\275\333\306z\275\016\357D\275\356\231\256\275\274\027\r>k\\\233\275:\272\006\276RY\213=r!\377\275N\260\002\275}\274\272\275C\241.=\230\275r\274\241>\211\275\321\310\236=\250$v=\327f\r>#\256y;\355W\000\275\312f\320\275\230\010\034>\321\272(>\214\361\342:\rW\337\2757\215\267\275\307\231l=q\2110\274\361\201\337=\332\306\000>xp,\276j%\361\275\036t\347=Ww\372\274\032\032\036>\246\304\035>\036$\037\276y\311_=p\\\241\274y\275->T#\007\276E\\\245\275\240JH\275\035V\311\275\324m.\276o7\332=o\200B\275h7\356\275M\206\036>P\325\221=Ya\351=\344\212\t>\244\257\'\276\205\205\267\275\020S\327\275P\004\020\276\343\327\023>O\214\206=\201\374\'\275\321\226#>\326\272\'>\234T\206\275;B\333\275\306=\233\275[U\216<1\361\227=\203\376\323\275@\376\032\276?f\010\275[\317.>\326\341\253=Ce\034<\324\323\"\2742\272\007\276\323\253\000\276\275\313\273=\316\003\273\275\371.\370\275O\305<\275\014u\006=\036\237d<\t\237)>\303Z]\274\314\353\221\275\220\021\361\275\256k\312=\037\265&>l\202\355\275=_)\276Y!(\276\341\267\240;\320\252\204\274\027?+\276\356\331\270=\371\201\362<\267o\t=\320\341\246=\016V\026>\374G\024\275\025\260\031=\261\265y\275\005\2271=r\025\327\275\n|\330=G\001\020>\2762J=F\374\345\275\325Y\210\275\340\327\025>[\321\203\274\034\365\243=u\3610\275\367\302*>~\314\210=\217\325\203\275jr\367<\0329K=z\001Y<6\254\376<J\375\023=\350\000\247<\255\005]\275M\t\274\274\321T\033\276f\321\233\274O\004\216\275\2167W\274\213\234%>?\267Z\274\265\377\002\276Y0\023>0\260\264\275\270\247\n\276\311\253%>\252\262\230=\003(x=Z\217)\276\017:\316\2758\302\001<\221\272\006>\215\024a\275\346+\030\276\351\376\001\276\237\006\330=\270\'\224=G\034\222\275\336\220\276\275)\374\365=lP\234\275\353\270`\275\\<\277;\210Z\335\275\003?\350=\245Ai\275|\000\233<\273]|=\232T\366\275V\355V\275\203l\211=\036:U\275bM\006>\356\261\322\2752\264\224=\024\374\010\2758\246\374\275\034\201\372=8N\016>\375\253\031>\341\355\034\276\367\000\202<\003\215\365;ZB\322\275\222\034\213=B]\206\275b\242\036\276\351\211\037\276\2326\331<\022\313\214\275B\215Y\275\242\214\026>\254n\345<\r\350\362=Q\254.\275\374\252\036\276\257\0207\275\377\306\000\276*\212W=_\217\013>s\"\335=\037\031]=\340\224\255=\206\325\013>fU\246\275\\r\273=\013/\266\275>3\223=\203f\260\274\365{\323<\347\342\033>\335{6\275)\003\220=lL\031\276l\t38\332\256\000\276s\201\006>\267\370\235=v\r\037=9\242\374=w9\014\276j\213\247=&K\033\276\376\300\013>\037T\000>\330\004\027>?\017\201=Mc&=\273\304\273=\341\217\032>\267\031\256\274\251\343&\276\2643\201=\016f\021\276:Q\274\275\324\264l=\270q\355\274\177\253,>\021\302\307\2752\332\225=\027\r\371=e{\364=\221\233,>\325\256\325=|\241r=\360\351j\274\370o4\275\322k\014\276\\`\314\2759\326 \276b\330\030>\014i\002>\267\037g\275?\274\013\276\306\035\336;6\260\202\275\315s\373\274/\202\033=\32689\275\222\251C\275Q\236\265\275\007\307\330=y\211\363=_F\311=\243\202\270\2753\342\271=Q\001\016\276kK\342\275\330\332|=\006V\020=\361\017\227=O\253\217\275\260X\016=\305]\252=\320\236\243\275\246P\001\276\337\326\253\275\340\350\231\275\201c#=\354\225\275=\267\030\230<\245p\245=\307v\377\275\245\370\201\2753\343v\274\323\r\316\275\330\234\020\276\313\025\014\276\375\340G\275\035K\305=!\331C\275\023\347\034<\235~\333=L\270\355\274\036\215\027>\027-\207\275\343\277\037>\301\203\215\275o\345\000>,\355\375\275\267\360\255\275PS\006>\311X\024\275\022\232\210\275\002S\016\276\035\317a<!?\336\275\367k\306\274\334\3039\274\302G >g\221\347\275Sy\361\275=\221\007>\234\303\023\2758\323o=3\\\231=\224)!\276\327\2614=\352\335\215<\277>\205=Mu\030>\022\244\025=\314\316\350=\257=%>\n\003[<\303\342\321=\361w\000>gx)\276\3549I=O\360\263\275\032;\037\276(x7;\356\"<=i\231\274\275\206\340\034>\2061\265\275\020\355\254=\204\\\270\275\r\312\024\275\003S0\275\332\314\247=\302M-\275\033\3613\274\n\367\200<\272V\024\276A\024\230\275\343\376\277\275\326\327\022\276\367IR=\226k*>\362G\023\276\013\335`=\253\274y=\3454\n\276\277\343\323=\3657\001>!\276(=\315h-> \215\025\275\337/\241=\021\'$\276\254{\333\275Wa\272\275\354g@=\211 \204=\004\265\316=\t\327$>2\271\327=\262\342[=\317\366\315;\372\374\261=\301\007\342=\3142\006>\352\262(\276T\371\004>e\367\032>\344\002\345;\317X\221\275Z\\1\275\364\223\r>9\340,\276\267P\357\275\246\276->x}\341\275\336s\372=\352;\266\275\251\021\333=\270#\341=UE\271=\201q\010>AF\335\275\177\202!;\243\325\022>\002\271=\275C\037\022\276\373\235\343\275.H\314\275\351f\261=1\'\005=\344\"\250=\364H\207\275\307\204\256\275\225G\373\275\377\321\033\273N=\033\275\267\350\246\275\001\261\242\275\025\366\321\275\304\235\323=\035$$\275\250u\273=\344\221\004\275%\303\301\275\201p\007>B\004\">\300\221\361\273n\342\007\276\222\252\367;I\215\201=\332\313\232=\334`\345< 8\317\274\024\304\266\273\014\303\323=q\332!=\177\272\357=\035\024\272=g\314\256\275G\221\037>e\243/=\016)\006\275\303\363\347=Ok%=\223\277*\274\320\333V\275\250\302\235=a\034\203\275x\315\000\275\2069E\275\204s\235=\301\252\013\2767\006\366\275\021_\257\2740\250\212=\234\371\347\275r$\223=Y\256\221\275\333\234 \276\361\351\212\274\254i\310\275\301{ >V\307\"=\263/\316\275$J\202=\245\026\304=\354\363\365\275\333\222X=\317\357\013>fG&=\376X\272=J\350\312<\020\215)\276\3031n\275\002\375.>f\031\016\276g\353\253=O-:\275\023\002a=0\014\215=_\201\273=\037\261\336\275\200\240\227<_\n\363\275\225|\367=Nb\260\275j\254\342\275\204N\016\276\327\202\006\276c\031\025\276N9w=\332\020\263\275\220l+>rH\030\276\353$!\276\355D\374\275\357\242\237\274\035\010\254=\205\337\'>\252\325\301=\200\242\317<\013\234\'\276\352\305\036>c\013\225=W#\241=\230;\001\274\377a&>\3449!\276^\365;=C\'\014\276\246\321\234:>(\311:x\346V=\231\271\361=6\353\020=\353\215\307\275\027=\302\274\347[+\276\2308*>\3722\224\275\027\325->\377\274\347=\224\322#>\333\316\031>RU\204\275F\255\022<\265\0225\275\205\354\265\275\260\313\237\275\342\005\r>\260.\377\2752\211\036\276\221\225\277=\364\001->@\211\r\276\3308\331=\261\213\254=\353/\000>q)j=\031\263\026\276\260\260\212\275\262\272\234\273\016\270-\276\350\354\r\276\300\214\020\276\000s\356\2758r\375\273X\324\361\274\357$\312=s\353\273\274\030\315\300\2753Q\n>\303d\006\276?H\036\276\266\306\245=/P\226=.)\244=\005X,\276\303\371\217=oR\264=\256\203\273\274\035\272\003>\031\357\027<\254U\336=^ \253=\007!\265==x\224=\261\224b\275`\236l=\267\\}\275\002\337)\276s\202\354\275\324[\'>9>\372\275[\314+\276\377b\206\274\277\234\017>)Y\214\275\277\315\357=\255a\013\275\274\316V\273\217^\005=\223\346\324=T\2764=<]\342\275ds\225\275-+\'\276\010QB\275F\252\255\275\254Z\021\2764\225\263=O\0056\274\020\312\010\274:\256\251\274\342\013\025\275\253\237\372=^\342\n>?x\236=lW\002>\006\241\205\275\363\377\372=\363-U=.\005\374=\244\321\032\2754\377\324\275\230^\000\276\357\204\345\275\235\216\245<\001\177\375\275F^\373:9\263\271=O\252\236\275\221\231a=\305\007\335\275\250\272\353;\311J\016>\246\035J=\231\270\240\275\204\362a\275\362\274\260=\2372\024>\335#^=B\024\013\276j\355\335\274(\212\036>\244K\362=W[\002\276\273\321\035=\373\274n\275\276F\217=\031*\313=8\377.\2766\237\344<\020\027\307\275\243x\306=9\362\213=K?\375=d\342\006<\347/ >\"\233\225=<U^\275\222\252%>g\205\226\275\'\r\203\275\237(\022>G\231\300<\001\220\354\275+\233\n\275\007)\346\2755T\305\275\350\005\265=%\212\257\275y\347E\275\205 \243=\003\305\231=\2538\236=7(\"\276\366\301\023\276=\335\t\276\247\003\247\274\r\202\352=[\272\202\275\014&\260=\'\325?=\026\351\360\275\364)\'\276\r\036\326=\377a$>\373\016\027>\002\235\354=\327-\226=\360\261\2209\264=\213<D\263\n=\n\004\305=fy->0\200\026>g\214\207=F\245\357=ids=\260\225\307=\307\"\274\275~\353\242<\006\010\364\275\227\034\205\275\205\004\245\273\035\261(>\002\336\267\275\233#\257\275\302FX\274j\204\021\275e\014\216\275\337\326\007>\024\371$\276`Pu=lT\301\275\266\302\336\275\277\314\036>#\251\224\2759\220\025=0G\345\275\321L(>\217\234\210\275\351$\216\275\256\220\006\276\3155F\275V\243\222=0\266}\275G\206%\276y\273\335=\331Q\021\275\227s\021=o\345 >\300\234\022\276/I#\276?P\260\274W@\273<^k\212\275F\022\250\275\212a\"\273S\360\223\275\350\033\344=\031\344\035=j\017\223\275\241\307\221\274\217\237q\275\340\245K<\t~\t\275\250u\321\275p)J\275y\t\373\275\377\202\330\275$\004\024\276\201\034\211=\331.\326\275\001]#>\2609\340\275\016=\027\275\302\300\304\275\305\224\363\275\027x\000=\252\363\200\275\372E\364<\272\357\022>\3038\305=N\271\r>\345\017#\276\334\234\223=\247<\230\275\352\360\256\275\275\340H=Pn\277\275\306Q\017>\317\035\276\275j\377\271\272j&\032>\372\021Z==\020+>q=\337\275\377/\002\275t\356\262\275\342\267\r>\346\026\017>\022;\340\271\211F\205\274m\246#>\265\274\030>\313\017\">\327\267\236\274\251\276\025>\322\273\030\276\373\255J\275\027\326\311\275Y\377+\276\254W\234\275\261\215\241=#\371\023\275+\2434=\215\343\215<\310\016\214\275\022c\253<\013\211\305\273\357\316\331\274\220J\314=b\034\237\275X\350\342\275\252\375\224\275f\237\212\275\3029&\275\320qg=\273\211\222=\220\311\021=S\302\207=\277\247(\275\2346@\275\"+\330=\025:\213\275-z\240\275\323\374\357\274\313\222*>\331\t!=u\242)>j\211\010\276\000\232`<\332\001\r\274\222\272\n\276\004\217R\275\022N\013\276\241\264\225=\214\307\300=\3719\'>\004\235\266=Yj\310\275\270\004\241=K{\r>\3308\205\275\213-/\276\224K\000\276\304\323\017>5\003P=\300\001\202=\370\266\350\275\257Y\350<\212j\271={\352\004>\363\362\323\275\372F\265\275\265\243j\275p\204\026>\206\200\354;\335\327\253=\332W(\275\237\230l=\241\0204=\033\275\003\276\203\033,>}\220\371=\'\240\276<\335\345\201=\033\003\301<LM\035>{\374\270\275\316\315\266=z>\037<F\300\221\275\037v\275=q\271,\276!\213.\276[\320\037\2751\007\327\274A(\276=\"\352x\275\2356\013>)\244\235=e|[\273%\271\356\275\207\377\213<!\230\240\274\246\\\345\275\356\030\027\276o`P\275A\177\252\275\240\316->\270\030\302=}x\276=0\016\262\275\301-\363\274\363\331e= \230\275\275\202\016\321=\257\210\367;$\342\341<\352\0210\275W\010\223=3\001N=\240\346\311=\nV\232\275@\305\010=\341\271\213\274?\007\252\274\362E\343=\201a(\276\350f\324=\324\342\004>\216\257.:\031\302\001>\236\332\254\275\334\3326=\257\326\262\275L\023\025>&\r\377\275\243=\231=\037\034\030>\2358\315=\010\226\014=\235\372\014\276u\026\365\2752\266\317<\254\272&>aS\360=\341\215~<\205l#\276\205\014s=MH\262\274\342v\320=\253X6<\t\267\302\275o\034\002=bZ\354\275-\371\313<\234\357p\275\001\324\223\275i\204\362<\226!\024\275\010\253\037\276}}\203<\363./\276\231\300\350=\221\363\270=\277c\330\275\001\033\r=\321i\330\275\317\243\023\276\213\300\211\274\227#\205\275\277U\007\273)\354\330=\221\351\333=}?\002>5H\242<\220f\202<W\367\014>r\000\273=\r{\025\276\021\356\272\275\373\317T\275\t\007`=\360g\027\276\365F\341=\177\341\210\2751\336\024>jj\205=\241)\217<|:{\274\251\367\002\276|2\352\275\323L\262=\343G\020\276\206\277e=l\000\'\276\204\330+>\304\037h=N\366\332\274\274#\264\275f\326\210\275\013?\372\275\017$\350\275P\251\363\275\001\031\351={\307`=\027\341\002>\343\n\030\276Q\224;=\223\300\001>.\344.\276\276J\254\274kk\270\273b\211\026\275\032\007\'>&F\347=U\341\001\276\250OP\275\303\245\253\274\204\036\333<\263<)>84r\275\232\366\005\275k\242\n\274\000\002\374\275\313\213\362=$\006\341\274\277\305\327=)\374\007\276\342\371t;\222\215\337=6([=\212\252\335=\250E\202;-\204\356\275\343\035\260=\265\276)\276\n\306\003\276$Y\372\275\351\332#>\033\320\363\275@N9=*\215\327\274\343@\313<f\235x=\364\235\001\276\252\201\021\2766\"\205\275mA\233=s\317\211=0\330%\275\362\361\023\276\324\237\311=\246I\r\276\214$\010\276_\035\341=\t}\250=\246\214k=\241\224\270\275\372\264C\275\257\377\001\276\036\253\267=\364\256\031>\253\237,>\231,\225=\363\365\321<Qk\020>\373\005->\221;P\2753\227&\276\256\320\\:\230,\226<*\234\267<k=\276=\216\001/\276\033\002\356\274\256\347\344=\3128\235\275\031\246->\r\025J\274\260 \240=\366\306\260\275_\211&\276K\360%\276\0313\003>1.\346<\370\357\033\276Z\250\027=\371\322\025>c\374\034>\304\347&\276\005\260\224=\2770\271=\374\304\357\275\361u\371=\214\023\327\275\254\003,\276A\224\335=\314\331\020\276ug\005\275\224f#\276V`\035>A\340\222\274\201,\324\275\202\350\n\276\367)\266=Q%m\275\315[/=W\241\206=\361\251_=\334\250\200=\027h\000\276\306#.>\010\271\234=\331\346\301=\201k\014\276\347\214\360=\004y\256=O\334[\275\304\330\024>\n\257\000>\351\010\014>y\035\">\200\021\010\275\370 X=\3010\317=\355\322\304=\027\213\030>\217\016]\274\201\203\027>\275\033\240\275\320!\025\276yyQ\273\340\237H=\252\261\020\275g>\311;\036\315\r>\325\314p=\030\244-\2761#\233\274\246:\023\276i\321\206\274\2714\343<\203\"*\276\316\377\347=\314\250Z\275x\246\010\276:\355\305\275S8\363\275\036\234~\275\345{\322=\233\375\">z\027,><\235\246\275-T\025\276\'+\001\275\271\204\023<\250\277\274=\361\306\032\276\375\321_\274\263p\033=\241z\001\274\3673\001>\250\022\003\276\304^+\276\372\334\316\275\303\177\261<\263\271I;n\"\026>\323\n\273=H\216\250<\255\270\024>\305\205\355\274\275\321\360=4\270\257\275\224z\200<\2608r\275\215\305\311<cl\376\275u\000\027>\347\001\002>\017#\235\274\353\234\205=I\275!=XNh=N\003\325<\325~\212\275\032qR=\347ra\275\270\330\346<\211\341\257=\331(\026>\346}\304=\014Y\273=\330A_=\021\375\343\275`\373\313\275\024\363D\274\323\361\303=\270\343\025\276\031\240\2628L%\010\276\002\353\267\275\272\026\255<\316\232\024=1{\311\275\300bx=\366\316\253\275g\340\320=\033\002\034\2768T\001>\215+\342=\035\014\032>9K\214;\001\303,>s\3569\275\206Ol\275\000v\362=\237{\323=t@\025\276\344\255\014>*)\352\274\001A\327\275NQ\237\275\202\221n\275a\2761<\223\263\376\274\234\277\177\275\227\314\301\274\327\006\201=9\005\016\276j\347\246=!\253\217\275%\303\326\2750\207\252\274\310\022`\275\313)\034>\363\356\003\276Y\'\037\276\n\327\305\275(\327\025\274\265\300(=\334\320\036\276+\307\212=\021\014\250\275n\262\030\276\236=\030\276)X\355=\t\270)>3\320\341\275\242]&>\274\035\004\276\273o\025\275\330\362\031\276u\377\005\275\332C\334=g\331\021>\023\352\034\276\206 \263\275\352?\215\274\006\255\243\274\030\235\037\276y\207u=\256$ \276r[\262<\352\267\315\275\250\374\237\275\274\236\365\274\027\016\n\276iV\211\275\373-R<\363%\006=\363c\025\276\372\316\307<Rf\032\276\243\364$\276\\\267>=\374\2109=i\216\204=#\007$>\006\310K=\377\362,\276\313e\010>\366\340\227=i\226\274\275a\032\230\275\273UP:=<\331=\260<\305=\314LQ\275\305\244\025\276\341\324\007\276|\244\r\276\267\270\277\275\001L\354=\274\320\032\276\364lE;;,\331\275\304ED\275\216\202\304=\0305\255\275\261p,>{J\341\275\350Q\300=\237c\255\275\344\300\223\275\365\216\r\276\274\222\236\275\365\016\261=\242-u=\330%\'\276QR\026>\026v\023\276\3075\004\276g\361\345=\226P\205=\025\222\266;\246\370!\272\265;\364\275\376\223\"\274\333\302\352\275\001`\033=p;5<Ww\026>\007\035\024>*r(>\363\265\276\275Y\336\244=k\016&\276\273\301\227=\t^\t\276K\367\310;\202\376\032\276\357-Q\275g\332\370\273jK\244;#Y\247;\247P\237=#]!\275\177\036\322\275\007G\352=\316)\264=\360\216\033\2749\360>\275D\213\036\276\210J->\022\306\357\274\022\354\032>\273}\314=\340G\264\275\347\036\203=I\004#>\307G\020\276\202\"\000\275\217,N<>\273\343\275\300\031\007>\267\021\351=;G\300=\355\325\315;*}7\275ZX\320=\373\\\204\275zM\035\276?j\376<L\232\353=\241`M\275\026B\354\275z\270\032\276\346\375\266<\0074\">a\367\037>>\210\003\276;\231\030;\030\324:\274\363\266(>\246\016\365=\020\r\332=m\230\310=\353\354\346=/\030\214\275]&\030=WI\016>4\355~\274\212\211\225=b\362);\001\206\336=\267w\n<\032!\365=\257X\232=\236\345\265\275vi\375\275\202C\n\276\344^\027\276\371_f\272#\375\272=ip\213<\265\255D\275\005\\,\276\366a\374\274\250;\030>\342\356\264=\3512\017>\337\231\242\275y\344\030\274F&\335<\210\217\177\274\363\302\005>JKW\275YK!\275h\341\264=\303\374\310<\304\365\326\274P\017\344\275\364\277\266=\273q\025\275\301\372\300=>\t\311=\313\250\261\275\222\343h\2750QP=\316\001;=s\266\'\276@H:=\303(\215=1\027\333\2758I\254=CM\347=>R\321\275j\302\027=\331\035}\275\3221\206=\242{i=_\367\200<\257U\255=\005\347\034>y\317\331=\177i\257=\207\264\335\275e\256\010\275l3\367\275\3231\017>\020L+>f\341\235\275@\226\025\276,\213c\275\236\347\234\274\275\036.\276\246zS=\245\225\373<\014\227\027>\322\345\275\275\360\325\027>\024<\321=\237\001!\275?^\006=\211k\343\275t\200\351<\023O\006\275e\242\242<\315*D\274-\263\022\275\243\313\335=\202\033\026\275\274$\014\276\270\371\004\276\245\322\341=\336\260\004\273y\225\256=^\341,>\311\224U\275\353\212\275\275\320\210\325\273\034\271\207\274\264\267\200\274\336\200\025=4\246\243=\223\376\006>>6x\274\026\031H=\016\010\004\276{s\352;{M\301;\240r\235<\274\245\366=\225\235\007\276\325\314*\275G\220I=To.>\351\253\365\275\"\222\'>@S\031\276\231\365\037\276\177\325V\273\'\306\010\274\341\262\325;\275\025\312\275\313\321\010>\014\3065\275Nv\267\275\276xI\273\327\003\240\275\371\026\326=\256\344\215\275\035\254\023\276\204\222\007>C\203r\275\013\350\033\276\225L4=\216.)=\274\300a=\267\374\004\276f9\270;\315\334\374\275\326\355\261<e\323\021>\\\016(\276.`\331\275\"\004g\275P\272\361\275\267\350\035>\312\341\316\275\215\031\337\275I\007\245\275\177\247\253<]\222\242=\2042\241\275t\302\346\275\233\335\026>\356k\352=y\307\016\276(\265\266\275O\343\300\275\212\242\023>\300\324\016\276t\257\023>A\311-\276\336\260\201\274H\310\202<a\373-\276\256\313\316\2759P\255\274\315\304\024\276B\370\322;Gw\366\275x\006X\274bU\235\275(\213)>\r\027\265=\370\207\025>-\231.\276mR >`\217\'>/\357\275=u\030\374=\030&\036>x\353\224;#R\373\275\373Y\252=3+\341\275\220`\">\327z\"\276\266]\370\273,R==\241\227y=\335;\305=\036\330\">k\241\003\276gU@;\010\\\365\275^\254\256=&\210\032=,\320\">\314\330\336=;\017\026\276\345\362\200\273\363\272\024\276\274w\220=I\207\243;Xn\341=\371\205!>9\016\320\275\335\004)>\350\225\001>s\027=\273\217\333&\2762\033)\276\247\236\344=\223\250\342\274\207\n\234\275]\225\033<j\220\244\274G>\273=@r\217\275\356\334\265=\340&\r\276\n\020\237\274\002\317\362=v\002\262\275\363\312%>, \036>\366\350\374\2758\262\022>\324\305\036><\330\231\274>\211\316=X\250\271=Cw#\276\373\202\304<\226\306\240=\nw\241=\211\016\325=f\030\337\275\034w\276\275\3601\000=\203\265V=\301\332\325\275\215d\322\275\313\\\237=\237j\367=Q\356\265=Pt\226=\177\034\014>\000\364\277=\216\271\211\275\271j\213=.\342\306=,::=I\262;=\225W\267=3\017\320\275\336\343\353=\212\2110\274\337E\327\275\225\377\001>U\210\347\273&\374{\275\n\340\002\276\205\350\n>\0322\253\274\242\320\235<\361\214\300\275\233N\027\276q\203\"\276\3371\272=\270\262\273\275S#t=U!h\275T\255\257\275\302\234\024>/\304\370;[\237 \2766C\271\274\317]\241\275C\3045=9\322\206<\241\371\344\275\267G.<\300\201\273\275F\267\013>\351\207\262=\310\325\371\273\257\024)>\r;\307\275s\206\225\275G\024\352=:}3=\366K\275=F\031\220=)1\237\275U\351\327<\225M\360\275\230\0317\273\034F\313<\216=?\274\037\245 =Lx\213=\204\213\003\276\372\034\236\275\363\337\241\2756\252\221\275C_*\275z|\202\275\021\337P=0*\342\275>\216A<kUQ<\354\032\344<\031\333\035\276\026\345\242=\375A\225\275M\317\014>\331\333\313\275E\242g=-@\317\275\221\273\201\275\002\353\225\274C\272\300\275{)\027\276+D\200=&\313\021>P \000>V=\010\276\310\362\035=H3Q\275\323\226l=1#\241\2747\277\231\274\305y\230;\000\tW=\341J\237<\350C\375=T\265\374\275d\013\203=\346\013\017\274\232\201\365<\347\345\205\275Ez&\276\2640\226=\330\300\250=\306\355c\275\275\004\311<\'\340(\2768-\266\274\336\027\001\276\220\313\017>\246\371B=r]\251\275\332\263\345=\311\340%\276\322\330=\275\320K4<\341e\353=7\337\252\274a\270\016>k\367\334\275\245\221\250=\274S(>\263\243\213=$F\374\275\371\")>\000\310\347\274\0220\340=\345gF\275\237\271\266\275\334zC=\303\277\335=\233\202\030\276q\334\017>\222\036\364\274H\005\020>7\211\245=E\264\"=\373\375\014=\357b\276=t\336\257\275\377\3373=6Z\217=\r\211\310<\266\"\200\273XB\274\274\334\276\255\274\252\246\031\276\2264\005\275b&\317\275\251\021\031=j4\034\276\224\n\357=#\352\260\275]\216\317\275\177\321\222=\364\273\337\272\247\212u\271N\331\337=w\275t\273m \031\276\002\233\037\276V`u\275\337\302\213<\0245\344\275\314\252\317\275\0278\260=,\226\026>)\3728\275C\372Q=>.\326\274\224\'\013<\203\374\252\275\003\310\001>2,\207\275xS\n\276\216\n$\276\027\000\326:\351\206\256\273\201H\007>Q%\355=\361\215R\275\031.\013\275\354\001\370\275\361F\032>\024\322\324=\223o\333=\014\207\356=\240\240 >:\300(<2&/>\310\263s\275\224\257\333<\307@\373\2757\233\360\275\3552\312=Q\177\366\274\273 X\275\373d\350<\247Gt:P\217\277\2757\310\332\273a\217\027\276\362W\210=Ou\320\275>]\243\275\223He=\304]\236\275\277d\226\275\211\227\223=Q\274\274\274\265?6;\375\342\007>\305K\323=\321\'\243=de\305=\347\236\216\275\371\351\027\276\363\025:=\314\"\220=\250\033\013\276Y\014g;\264\240*\276S\273\323\2753\301\300\275\370\321\365\275\250=\000\276f*+=\321\265o<Ps\027>Ql)\276R\344\216=~\224 >\030\022\214<\357Kf\273\213\t\273\273>_\256\275N\024\232=\263\352X<d\224\302\275\224\345g<S;\211\275X\246\342\275P\307\001>\231\362\375;G\"\230<A\201\037\2765\313\220:i5\177\275\271\270\201\274\322\205\024\276\307\361\227\275\324\321[=QS\'>\252\376\033>\"\233\313\275\211\311\037\276I\005 >\242\032\302<\313*C\274\277R\311\275\2715\244\274\350\313\027\276\212\253\030\274M\302\005\276\000\037\013\276\032.\021\274\205\322\263=\342\220\333\275s\353\017\276\220t\234\275\351^^\274\330_?\275\207\200\r\276er\322=\265\2117\275\246\206\363\275W9\033=N`\326=>\230o\274\365\350\336\275\220b\n>\341l\020\276Si\334=1\366T\275R\364\n\276Y\347O=F\000\302<\307\300\177\273o\004\245\275\005\271\344\275W\273\305\273\223\213\021=\261\234\343\275{\312\010>\025}\244\275\366\220\024\276\246g<=\317;\026>g\321\032>DD\025\276\004\220M\275)\353+>2;\257\275\005\306\301=:\334\245=\232<\371<R\223\307\275?2\267=2u\277\275\250\304\206=\275\221\232\275\226\377\017=*-\201\275N\354\206<b\333\024\275n\272\235<[\237*>\277\001%\276\325\327\025>Y\317%\274~yT\275x\265G\275\263*\274<H\310\314\273j\000\022>;U\010<\204\251~\275\223~\">Q\020\204=\314\372\313\275\017\232\331=5\272\227\275\253\343\211\2747u\026\275\005\270H\2746\210\r>\346r\213\275\252\030\355=\271&\257\275c\321i=\031\366\321\275i\364\267=1\302\352\275\201U\266\275\307~N=\255\360O\274\261z\271\275s\247\262\275\027\344T=\313F\026\276\010\237\363\275O\204\037\276\250\267\231\275\202\266\221<^&\271=\272\356\t\276/j\">$\277\020>0P\207=|\3664=\322\253\223=\251\276\023\276S`\353=@\257\024\276\357\267\036\276<U\357=O\376O=\345\245\312=5\001C=~\261#\275\266n\003\276\363)\203\275b\215\205\275\234[V=\247\315\212\2759\261:\275INx\275\217G\001=\307\334=\275\0308\010\276\326\263\370=\211\272\017\276f\323\370\275\210\307\376\275HQ\317=M\320\333\275K`\215\274c\003\n>@\375\026=\002\305%\276&\201\223=N\314\026\276\357\255\032>\271\267\001\276\302\016*\275\"=\024\276\037\355\302\275[\271+\276\261\031\213=\201,\360\274w\310\264\275\351S\211=\213\375S=2\337\256=\315\034\252\2751#\366\275\375C)=\216X[\2759\006\206=\004)<\275\"\274\210\275\022\241\245\275\240Y\024=\351i\013\276\321\270A\275\025\263\361\275\207\364c\275JJ\222\275\276\027\341=\307\002\254\275\321\'\221<\245K\036\276^\0213\274\233\326\371\275=~->\340Q\233\275\t\224\026\276\204\374%=\022O+>\342h\2418|\216\255\274\004\332\220\275\313\267\371\275c\330\030>Z\223\014>\221\200\235=\346?\255=\001\300k\274\333\210\261\275y\031@\275\2226==\213\022o<\315\355\t>\373fR\2757>\003\275\246\267\014\276!\227q\275?\222\263\275\036\245\367\275\322[\005>\363\227r\275\016%\346\2759v\222=FX\241=>\216,\276\240b5=\267\234\006\276=\325\253<\255\262J\275\251&\207<Y\226\205=\342M\3649\2419\034\276\016\314\331\275-\013\223=&i\361=\3165%>\253\370O=9V\270=\312\377\247=\207\016\201=\277\307\017\276\357\226\232\274H\234%>\354\355\244=\325y-\276\354C\337\274\320\305%>2\271+>T\r?\275\366\221\354\273\204\005\257\274\234\332\251\275\005|\321=\312\365\210\275\224\016\351\275rR\020>\225\247\020\276;v\257=\201\227\215\275i`\246\275\246\332\342\275\343\026$\276\360B\251\2758\017\002=\013\362\354\275\004\362m\274\356n\210<\365\245\241=\2515&\276_\030\031>1\r\222\275\223\207\316=\177\313\206\275l\372\">\372~\331\275\243\261\244<\205\210!\276[\272\026\276\372Y\212\273\277P\006\2767\203\304\275GN\305=*v\032\276#Z\020\276\000\377<=Y\'L<\004\r\331\275\025qB\275\372m\017\273\344\264\177\275\306\306\351=d\n\333\275\324\020\322=\310n@\275\206\255I\275E\376\307=\0232\333\275DN\214;\361\'#\276B\t\364\274[\267f:\n\3757\275\306  >q\207\214=\373p\254\275\3210\020\274R\250\366\275\377\030\207\274\252u!>\346\321\307\274\266\351\023\2760\212\232=\327\037\305=\363\266\013>\253\'\007\276=#$;*\317\256;\371\251\274\275\231\r\260;ktf=_\006\373\275\346R\233=V+\240=L\264\307=(\357\347=$\004N=U\250*\276\322\213\227=,}\357=\310z~=\224\204p\2756\375,\276\343Ka\275_\032\036\276\300\302\304\274\306\222\004>\354K,\276\010b\014>u\016)=\240\225\250\275\024\324\n\275\016\323\303\275%T\'\276r.\304\275\231A\337=C\346\220=\307\341\033\276\'\320\000>\317\010,\276r\207\211=\221\2350\275\377R\355=A\032#\276\356\217\357\275w0\257=\207\033\025>\370\031\024\276\345\025\005\276\351A\">F\264(\2768\n7=\353\337\303\274Z{\033<\3470\242\275_\354\233\273\322*\346=\306,\242=\310$\223=\346\342,\276\203I\304<\023f\027\275T[\217\275\037\233\214;F\033+\276\nr\251\275\037\367\006>\277\267\335\274\201J\274\275\234\371\366;u\203->\314k\337\275\344`u\275\324\264>=N\361p\2750\320E;\264\377j\275O}\251=\345X\036>\377\236f\274@\250\236\275\253 \257=H\337\017>\364\341_\274M\016\314\275\336\220\302\274l\322m=\326;\224=\301\023\222=\226\367(\276\342\346\024\276\211\214\221<>\023\027\275\372+&\276\037\230\240=\373\233\247\275\346\217\241\275(\245\320<d\266\374\274\201\255\205=\343\217\023\276\261\365\'\276\310\335\335=\007\353=<J5\033>\313\\\254\274\225\267#>E\207&\275Z\362\274\272\214\332\016>]\004\'\276\260\356\333=\014\300b=\341\014\311=\245O\306\2750\3418\274|\264\036\276\331\305\030\276\177G\210=\002J\225\274\335\324\n\276\264\271 >L\000\270\275\271r\035>\021X\316\275\202\300\347\274\231\256\007>\"0\352<\346G*=\245\323%\276*\320\210\275IN\364<\277\356\017\276\034\017\027\276\354!\272\275H\372\271=J)\310;\301\276{\275\312\214B=4\306K=\r\353\315\275RS\"\276\271+\265\274a2$=t\247\251=f\314\025>$\370\234=i2\223=Of%\276\017>\034\276%\223\r>i$=;U\205\376\275\024\177\036=`\237\021>:!t<\202,\255\275\316\216\001>\321f\321=\310?\002\276B\337\375=w`\254=8\206#\276\274\307\231=\227\226\350\274JH.\275=\"\362\274\202%\255=O\030\257\275\'\3640=s\036\273=\347IT=\333\264\223\275\017\334.>\002\305d\275\266\353\324=\277\303\375=}\360\244\275=\333\341=\265\241\034\276+\256\331\275\341\357\254=\263q\244\275\006\346\354<\334\260\251=\3446\357\275\326h(>H\344\373<4\327\030>\314i\300\275\344\333\315\275c\214\201=T\306X=\313\344+>\370%\232=\260\321\034\276\037_,\276\020\024\035\276R\177_\275\030\306\242\275C\320\037\276T\023\006\276b\333U\275\317\277\354=DC\223<\377\032\207\275\323A]=aB\310=Hr\260=\021m\342<I-/>\355}\306\275\314{\336=\301\264c=[\230t<\206n\327=O#,=2\000\316=\037\032\371\275L\330\021\276\340\003\357\275\364r$\276h\342%\275\270\001\216\2745\017\005\276\277\235\224\274\033r\245<G\246+\275r?\373\275\271`+\276\320\022\034\276\006~\353\275\202E&>\363\002\220\275c&.=e\035\027\276A\"\311\274\360\362\245\2748\205|=\361\\\001\2763\217\037\275\210\250\217\275&\267E=\336\007\215\275+!\377\275\216\272\036>-\252\320=\215\025V\275\024s\260=ya?\273\370\001\232=\030\212C=^\252(\276\256\350\255=S\271.=q\237\022>]\261\013\276R\316\270\275\273\210\364=\013\242\202\275~\340!<\223i\223=\353\277\334\275\223\342\264<\214\234^=?S\010\276\316`\251\275\220\021\370\275e\215\234\275G\260Z=\026\340\346=\305\356\343\275\272|\236=\225?\2659\373N\370\275/\235\277\275\021\357$>\n+\211=\247\236\031>\216\2223\275\322$\t=\022t\270\274{y\347\275jH\356\275**\027\276\347\202\202=\331\231\350<}\223\023\276\025|\375=Qn*=r\241w\274\245x\337\275\302\257\346\275\353$o\275\'\353\027>Q\366\217;\306\313\201\275\3705\013\276.\020\235=j8\t=\221\022\034\276\224\234\214<\006\324\364\275\253\204\264<Zr\371=\326A\355=\333\262%\276\2340[=\243\313\373\274\240\022\333\275\351\240\010;\237\354\233\275\361\010\212=X\016\364=\235\231\013\276\306\263<\275)\235\377\275\034s\t><-#<\243.\004> \326-\276\010L\016\275[6\220\275\267\211\216\275\240~\322\27531\213=\005y,>\202\307\217=X\237\206\275C\002\310\2750G\006>\320\267\035\276b\347\270<\254\014\203=\216\013\321=91\377\274aQm\275\311Z\235<\267%7\275\274u\333\274\3768T;Nl\027>A)\000\2762\254\367=\211*\003\276?\261\354\275\274@\336=gh\014\275\315\006\002\276~X\375\275.\232\372=\3229U\2752\\\024\274\372\334\006=\255}\327\275\305B\366\275A\242\215\275\233\306\251\275\206\225_=4@\244\275\005\232&\276\034k\322=\353\3304\275\032U\213=\034\235\034\276K~\036\276\340x\341\275\243\333?=\004\232@=\262\243\202=\323t\274\275\032\242\370=\246Q\n\276\000\320]=\342\305\311=U\216\014=\\\360\243\275\006U,>\316\332\244\275-\350\254\275\032\216\352=\205>,>\347\215.\276\277:S\275\257\210z\274\331\006\001\275\200\320\022\276\204\r\377=\341\306\335\274L\230\252\275D\324\251\275\347\230\260:\242\363!\276\377\332\252\275\326\345\334\275\314E\250\275\346\376\250<\236\375\211\274\222J\002\276\221\224\377\275hj\322\274a\277\003\275^\263\023\275\001\005\177\275\313h\013>q\226\205\275\222~\027\276\327\020\261=\264\3325=it\302=t\261<\275\254\340\333=z\344\031>\231\223\370\274\263\327\374\275u}\203=Rp\222=0S\034=$\201\247;\307Q\"=X>\035>\271\237\212=\005\341\026>f\177\'\276v\211\361<\354\322\026=g(\036\275\245\255\223=\311/\017\276\236[\324<\312\363\002=F_\000=Iz\002=\315f\242<\023D\212\2740\356\326\2757S\002>\330\r\027\276|\241\301:?\307\232\275^<O\275\016#\037\276\312H\n=\352q\305\2755S\207=\235&\203=XR\177==\300\200=MS\265=[\375.=\361\370z\275\2775\034\2732\337\265\275\177\327G\275\274\256)>]\223\036\276I\003\034\276\370`\026>K\371\246=\2234\007<\231h\275\275CG\033\276V#O\2753\241%\276\223\240\300\275KK\262=:\360\272=h\024\007\276Gz\'\2763-\037\276\225r\332=7\300\034\276:\364\006\276N\250\005\274G\274\036\276\377\027\263\275\'z\356\275Z\320\337\275@d\234=\220\311\021>!\037&>\314\325\306\274,B\241\273\001j\257\274\355\207\241\275/\332\277\275\214\344#>\312\243\367=\335\201-\275C\322\016\276/<\233\275\037\275\372=\t\177\035\2766\265\t\276\277\243R\275\261\024\023>\216\000\273=X[J\275\372\264\013\276\356\031\234\274\301\365\305=\246\t\231\274c\020%>y\031\215\274P\306\021\276\340\332\003\275\r\023 >RZ\262<9\200\235=uv\360=\244\367.>\017\350\212\275\340\276\r\276\312\177\014>\022\256\262\275\025{E=V\345\"\276<\013\217\275\231\215\240=\250\000,>\027\361\341\275\315\235\021\276\0074\232\275\305J\263=\215\272\016>2\236\036\276\254\375E=m\006\336\275\034g\254<z\032\346<\3079\274\275P\300,>M\224\350\275\216E\023>\026X\210=\006\240\'\276\372\340\036>kq\325\275\340z#>\340;\033=\365\305\331\273\026\"\270\273hI3<v@q\275\301=g=\227\033\006\276\032L~=\324\032r\275\254\r\333\275\300A\214=7\371\315\275\312\272\200\274\0326\217<\247\361\030>\232\003\017=\234a\016\275\020\252\207<d\271\310\275\177\3163=P\n\342\275%\010\016>N\242\033>\rc+\276!-\363\274n\230\313\275\254\340\024\2761G\216<\261\356\233=\213_\242=@O\025\276\365U\031>_\353\212=|l\355=\231\324\233\275\217\334\024=\335L\335<b\020\002\276U\260\013=\232E\315=\321\251s=\305\032\357;>/&\276\333\341V=\222\333u;\206\346)\276!\r\033>\237\253\216=\373\327I\275\021\330\213\274\372\375\255\275\334\205\t\274{\260!\276/\033\276\275\326^l\274\221\343\263\275\037P)\276\363l\016>1M\r\276\221ar\275\024\246*>\216\201\037\276#\'\355=\226\037\265=\351\233t=\2136\306=-\325\t\276\241\271\n>\205\t<\275;\232\010>\372\216\n\276w\213+>\006\210\017=\001@\020>3\332 \276n\266~=\252\"\017\276c\332\230\275zj\022\276\373\347\245\275\002\257\367=O#\014>\251\353#\276\307\350S\275\251/\342;\216#*\275v\250\355=\271P\315<}\207\304=\372\020\262\275S\305\035\276\333D69\332\221\356=\003\013\016>:\213\013>\030\310\006>e\000\006\276\326\334\276=\0042\020<\276\237!>\005\r\216\274\265H\030<w\336\302;\262\302\376\274\351\376\363<y=\"=\303\262\n\276\177\205\341<\004*\242=\315\264I=\212\275\177<\340n\256\272ew\027\276\213\310\037\276\013\2615\275M\305\270=\245\274\330\2759\342\014\275\205\006#=CR\312=\214\211\226\274U\221\232<\033\307\014>\030\227P\275V\265^\275\330\035\351\274\242J\334\275\213(\373\275\300%*=4\251\016>X\203\224\275\332o\025>\033\\\313\275\r\2747=\357X\244=\322\257\r\276\305{\004\276\267\311\215:\031\013c<\210(\305=\347\274q\274\230\250\322<CZ\t\276\205\353\020>\34275=\273\372\203\275\237\264\265\275\301E(\276\033\010\353\275c\350\016\276#}\232<\366\277\303<\023\221\035\276U\243\035>\006W\"\273\006\253\024>\202$\001\276\004\352(\276uZ\004>\331\216\205\275\211\351{\275lqs\275?lj\274\354\234\007\276g&I\274\263\256P\275\375n\255\2756\345k=zN\235\274\036\\+\275\355\375->\321.\324\275\302\341+\276\327\366W\273di\235<\214\255\202\275\266\251&\276\273\023\214\2758\"\252<\231\360\316=\243\351.>\234\273\232\274\271\213\360=^`\201=\302be=v\2777=\371\310\276\275\276\221)<5C_=y\262\007\275\251\316\223=\353C\001\276+P6\275Zh\026>\303\252\363=\025\202\335\2757\200\r=\341\212\266\275\370\'\n\276A\025#>\335aH\275\340\356\024\275\230\002\272=\371s\353\273\223(.\276.\311\332<\371\265d<@X\265=f(\213\275\232w\001>v\007\365=\314\'P\275\003E\n<\3673\361=7^\034\275\031U\034\276\350(\002>\223,m=\364+\225=/\310\016>\025\265\335=\330\377\024>}\233^\275pSw=\037eR\275\215l\327=\352\351\024=\341\253\323\275\346\206\315=%{\377=\271O\214=\305r$\276xR\315\274.\257\311\275\304\314\007>\354]\272\274\2122\265=\007[\034\276\274\371\220\275\017\322$\276\372\337\017\276\266\241$=\243\336\311\274x\036\335\275\362\307\344\275K\001\206=\022j\330=)d\271\274[\266\250\275\021U\255<\225\301`\275{%\350=\034\375\317\274\263G\305\275\300\322\014>\367\200C=co\'>u\321\036\273\340\"\322;\255\335\366<\032\257@<\304\255\377=\"iB\275\032\352\002\276\014d\"\274\246\374\024=\254\212\354=\310#\023>\037\036\240=U^)>\317\277\320=\347\034\000\275\235zX\275\375\233 \276D\261w\2750j%\276 \241\251\274-\363\334\275(\020\305<\220\351\210\275\274\004[\275\004 I\275\261j\247\275\226\000\274=\245\031\306=\217a\035>\373\260\246\275\243B\256=c\031\027=\353\206\r>5\332)=\277\340\243;\314\331\373=I\301)\276\221\224\210\2753$\010\275\254\200\013\276$D\031\275H\265\235=\0142\343\275\277\206\230\275\254C\317\275\354\003]\274x\031\035\275`\2016:O\330\304\275\324pR=\371\257\245\274\300\\[=f;\233\274Yl\265<\231\312\033\276k\350\323<+\000\327\275\031;\377\2753\336t\274\316)M=.\344\341\275\372_:\2755~#\275\334o\307<\'\236)\275\271\3030=F\327%\276#\224\252<*k*\275\371\013\023=\000.\016>\233:\t\276\330\264\215=\326\'\375\275\342n\354=e\226k\275\372u\220\275\273p&>\256P\033>+\021:\275\363\354\177=~\003\272=\205\323\036>\200w\276\275\200\254\343\275wD-\274\035\277\356\275D\224\034>\216E\202=\004\226\256<\364%\003\276\005\"\207=\231^\005>\312&\357\274\257\214\246<\232\335\014\276\2541\003>\326\177\213=Z\327\333=\034\037\275=\227\025k=\361\267\007>\250\016&\276\002\203\305=80m\275\021\304\017\276\010B\001>\234Z\241\275{\304\355\275\205\272\310\275I\032\303\275\322\317\224=C\230\034\276y\007P\273\352\325\000\276\206\026\033\276[\205\020>\375\224A\2753\242\253=\024;\246\275\202\201\252<\211e\267\275a\253\237<\303\033S\275\021s\304<\364\346~\274\200\032\337\275\3355\266\275$\004\334<.\021\r>\302I\026>\013z|=a9B\2740\024\354==\351+\276\217\304%>kO\010\275\0028\364\275\230\251\017\276\000\240d<\001\313\366=R\353\303\275\350\213\032>\317\215\033\276Y\232\010=s(\224\275\306\r\300=\266\334\250\275_\241\317=\365\276\366<X\261X\275\323R\274\2755\315\230\275\334\n\t>\222\324&\275\221&M\273E\026\010\276\306\377\376<o\337\242\275<\320M=\235\322\017>)4A\275<\326\033>Hm\212=\235f\234<\231#\351\275\0357.\276\340P\350\275\213M\026>\021\375\333\274\333\326\024\275^&\311\273p\313\004\276!d*\274\'v\232=\365#\223=|{\240\2756\016-\276c\325\'>\020^r=\tE\326\275o\3061\275\2559,\276\262:\344=\023\213\267\275\"\222K\275\262\250\273<a\351\225\275\177\277\022<[\377C=u\352!\276\325\254\321=\370\217\335\275\232\360\211\275\224\273\031\276$\261\010<\355]\t\276\002g\200\275\232~\340=$\222\022\276\212\035\"\276\312\334\262\274\304\037\377=8\223\326\275<\237\001\276\t\273\023=\372*$>@r\363\274\207\265\034\276d\366\304=YQ\343\275\324T#>\035\224\223;\233N\021\272H\317\212=\243\342\216\270\026a\365=\325\210\032>\247\314$>\273\334\005\275&\030m=\332h\017>\214U\020\274\345\335\250\275\244\246\t>\010\246\257<\2032=\274F\225\272=\211\253\330=\252\036U:\326u\317\275\340\266e\275\363 v\275\022\202\346=J5\366=\340\346\006\276\036\255\263=\014D\373\275)\333\247\274kI\020>\214\235\333\273\260<(\276p\202\237=\016\266\215\275&\2049\274\207\367\025\276_P\347\274\246O\317=\032Wm=\210\227\361\275cqN\2759_\246=\262\020\026\276KW\270\275\003\301\337\275\326\230\032>\300n\201=\333\374\335\273)\006\302\275\036\342\201=\0311\371\275\337b\t>eY\032\276\321s\224=\2348:=\247g\334<\225\373\276=\347\301\023\276\256\325\027\276\303\227\256<\215\255\307\275\325\207\211\275c\255,\275\257bg=\344\314\034\276\335\276\347=P\341x;\220v=\275\360z\234=\345\t\034>\314q+<\244J\257=u$\305=\323\337\260\275\375\255\332\274\321\306,>YC\005\276\020\033\210\275\204=\201=\242\r\027\276\216f\n=\003\351\020\276J\210V\2755z\020\275\'h\220=q`\027\275\010 \350=\031\376\334<\350\372\233\275\305\017i=*\263\304=\273\305\034\274\340\267A\275\213d+\275\343\266\341\275A\017\307=\231\231\224\275\347\253#</\302\312=I\256k=\005\343S;|ls=\226\357\242\274\266\340o<\323E#>\n\021\357;\003\244\025>\352V\032\276\3722\246\271\206\337\005>\214\216\003\276>\274c\275\024\306*\276\\y\313=Z\223\037>\371\201\343=>$\020\276DYi\275%\267d\275\223:\001><\241\001>\010\223\007\276\212\320(>\022\260#>\\UK\275)K.>\254\372N\275)\227\036>\231\252\t>F\021\002\275\355U\020>\272\362\320\273\033\264\252\274\365\230\371\274#+\233\275j\275\004\276\353?\214\274<\344\261=kZ\375\275\264B\010\276l\332\031>\270\n\335=\274\276\257\275O\215\277\274h\251\025=O\3547=\375\274O\275\351|\337\275\256\264f=\032\016\024\276\241\253\372\275D\031q=\346\211\027\276-\353$\275\347\254o=\365\302\210=\364\r\217<\260 \264\275\030\nt\275u\351t\275+\377\260\274J\'\264=\'\037\327\275i\265\t>mj\326=m\260\">\266\322K\275\331J\236=\337\004\'\276\'vc=l25\275\354\225j=\254\370\t\276o\344\"\276\270k\201\275s}\231=Nz\016>\375j\027=\237a\336\275v\035\236\275\032\272\">\223&\350\275\372\036\204=.\"\324<\312\253\005\276\177\227\013>\230\215z\275GL\364=1\275\305=tW\366\275\227\025h\274ip\253\272\023\355\034>\321\374\320\275\276p\217\275\245\362\277=]oZ\274\234?\017\276/\036_=x\3239\2753h\306\275\320\341\243=\200\253\243;\t8\n\276,i\371\275T:\223\275l\003\376;\200\006T\275\"\034\013>\340\340\006\276\']\004>\206\032P=l\335\251\275\2165\312\275\372o\020>\354\361\226=\205\305b\275\260\254\002\275\324j\362=7o\306\272\222\356&\275:\351\355\275\236\343\332=\022\352\"> \211\312\274\035\001\024>a\r\342\275u\252\'\276\265\001\363\275i\342\021>\273*<;\302\2739<\352\250\025\276\271\316!>\210M\030\275\037\323\337\274\\J\035>\333b\"\2763\262\351<\304\310*>0\355\332\275\216\036\036>\236b\232<n.\003=kO\347\275\310*r=y\354.>)R\'>T\313\001\276\227j\016>\013;\204\275\010E\377=\001\3065=\301z\337<\3031\223;\232\331\305\274\226\376,=A\260\260\274\247\211\236\275am\343<r\034$=\233\314*\275\315\346#=\247\001\215\275\020\013<=\266\321\226=\261\341\253=Y\256\253\275\272\371\r\276\234\363\364\274\247;\263=\346\367\325\275\204\224+\2764\266$>\277\305\206\274\234\250p\275\002\237\267=\311\262\000>\203\020q<\335\215{=\213Y\200\275\254\260\356=PG,\276 ^\014\275\356\005_\273\373\260\357\275\376\242\023\276Y[\004\275I\262\347<_\362(>=\322\"=4 \317\2757\034\006\275\r2\310;;\200@<\222\254\315\275\333Y\215\274\375\366\302=\320\327\334<\007\2167=\254\032\221\275\014\367?\273\273v\r>`[(\276\225\202\026\276\241\010%\276\037l\242:ZE$\276\374l\025\276\214m\032\276<\203+>\rE\352=\201\215K=\265(\356\275\321\016\270\275\314\321\031>\224j\325=S\013\204\274\334\300.\276\324j\262\275\360\320\031\276[g\032>\336\252\001\276\240\302\205\275Ls\035\276 \212\001>\276\024\243=\re\001\276\026N\227\275\263\357!=(\275\310\275k\320\237\274\205G\030>s\r\253\2742\266\256=l7\037>+U(>,B\031>\213\266\211=f\270\213=\2725e\273Ux\257\274\240r\n>\206\2275\275JK\337=\234;L\275\375X\014\276\304\024\037=5\376\030\275b\322\212\274\240\242\317;\'\266/\275kc\352=\206\204\203\274F\017\006>\001\342\223\275I\177\026=\301\277b\2750\203\305\274\221\352\265<\356\331\013>\260\323\260=\271p\343=B\t\2778\362\274\036>\315\362}=\317\267\230\275\354\245\027<\336\177\312=2\341\300=\216\312\331=\336\245\277\274\036]A=\364yh\275\206\350~:\244~$\276\310\367\020<\360\0303=\336j\317=\r\010h\275\226\304\016\274$\235\354=\203\372\256\275\346?z<\036\205\334=\322\236\364\275\004\212.=i\340\200=\036e\030\276l\237\204\275=U\226\275\342\357\021>\333\214\'\276\305HL\275\222@\323\274y)\260\275H\363f\275\322\353\262=_|N\275\t\202\350\274V\253\340=\026\377\034\273\370\303\374\275T\020\244=+\314\022\276pz\253=\320\337\025>\211o\">\260\001\207=\330\227\006>\212\262\307=-\221\227=\235;\020=\026G\247\275\233\'/\276c\214\271=\354\017\000=\025\354T<\366\264\247\275ZR\244=\322\'\033\276\321(\223\275\313\333\260=e\266k=;7\332=;_\265\275\332\0215=)B\006\276v\256\214\275\353]\n\276\234p\367=\372D\001>*i\235\275\310\324\003>J\264\221=\276\345\234\275\267]\r\276F}&>\023K\201=\310\365\031>ZT\323=\026\221\035\276C&\003>C\264N\274\"k\270\275\305\300%\2763\367\247=q\274\254\275\020\003\226\275Aa\037<\355>\257\275bg\037=5\020\332=\360\354-\276\365Q\324=\252\331P=v\227-\276\240~\366\275=\221\367\274hX7\2756X\016>\004u\r>\312P?<\225\374j=\035\337\n\276\n\344\205\275\222\206\212<`\267\322\273l\352\022>\311\256\341\275\345\010\350=\306.\013=\034\002\314=\362\314\010\275^0\302<\014\325&>\013\260\375\275\335\316\206\275\376\255\226\275=t\275\275\230C\035\275\232a%>\234\200\236\275\014{\035>\226\305\'\276\3548\305<A\244*>\343\331\270\274\n\201>= \302\027<^\341\255\2743\314\303=\357\271f\275\256\262\236=\350\322\n>\277^k=\234Z@=%<\">aY\020=\225\377\030\276\236[;\275a2\272=\366\005\231\275\277,\016>\342>X\270\330P\006>?\315>=\313\030w=e\272\267=\373\335\003>\315\2373\275Rh@\275\317g\016>%q\370\275\343\342+\276?\253\237\275#|\376=u\037\037>\334\323\344\275\003\215\222\275\220\276\222\275Z-\244\275\372\020Y\275c/+>\027p\327\275\\\302\n>\014-\214=@\346\025\275,N\266\275\000\273$>W\353\255=\026\257\035\276\344B\232\275\236\205~\275.\333\346;Q\n\210\275{*j\275z\254\255\274L}\016>`\241\203\275\315\245\242=\'s,\276\231\204\371=B\360c=\"\342\022\276+\355\227\275\000\245\025>\230=\'<\374\241\261\273h\n\r=\371I\005>\005P\277\275\321P\246=\240&:\275\322|S;\327K\270=0\241\'\276!p\325=P\364\313<\025\317\262=\317q\034\276f\326\333=\364\247\021>\001\245\261\275\2767\005\276@\177\335=}\010\205=\0165*>g\337\277=eX\001\274\366K\316=\234^\220=\200\004\024=\324\245\334\275t`n<\241i\207=\345\357\024>\r\262\340\275\245\002\017>\006\356#=\326\004\254\273@\277\237=T\320X\275g\006\023\276T\356\350\274\324\317\253\274\326\350\010\276@\177\274\275A\370\014=\366\240\300\275gK\027>\005\377\377<Q/\377\274\266\t\000<\364\256\236\274\266v\336\275G\233\264=T\272\251=+\357\344=\224\\\013>\215\335\364=\312Z\313\274\234\021(\276\344c7\275\223\364 \276\030\310\220=\313\357\266\275v\263\006>\005\014/>\347\253\364=\016\364\220\275I|@\275I\255\016\276 i\006>;\021\246\274#\316\031>\302\370\025\276\353\362\243\275h\316\306\275\334\266\347\275\243\320\017\276\036\343\377\275@[A\275u{\213\274\326\344:=\235{$>_\016==\014\301\273<\037\322\233=\'\233\253=r\356\250\275\220T\347\2753\261\033>\231\252\032>\377\365\261;\252\360V=\306\326)=0\242\310=\0135S\275G^Y\275_2\233=P\342&=H\225\200=1\330-;2\356\274=\2720\003\275(\324X\275u\345\227=\227\r\022\276NL+>\365q\003>\355\036\223\274\313\202\211=ZP\215\275\\\263\036>\331B\325=<\233&=\256F\272\275\324U\032>yb\266\275h\\(>[N\224\275`C >\362\230\'\276M\250\'\275\033\344\210\275\310R\214\274i\254\206\275X\327\234=\227+;\275\263I\177\275\214\236\276=\365q\340\274\331\223L;S\244w\274Ey\002>;6M=>\367\022\276\236\224\201\275;\020\305<\n\253\026\276tR\001>\366;\035>4,\024>\315\371\022>\342.\020\275\367I\236=\357\030\212=W\244m\275\272\233\331\275\204Z\355\275\027e\034\276\247C\r>\351Gc\275H\265v=`NT\273\321^\367\275\344@\307\275\250\253\240=\335\000o=\\G:\275Up\352=z+\246<J\027\222=\3562E\274\315\327\265\275*\250\207\275\034\"\323\275\333bC=~-(\276R\205(\275_l<\275\2748\263=r;\002>|\241\223;\240s\025\276B^Y\275\310z\004=\214\351\347<\245\270\037\276\363d\361\275\333b\030>#6\374\275\244\013\020>Y\333\210;\030\376\027>{\252\270\275\317\314\014\275\010\365>=x$\030=H\362^\275\213p\311;\326\006\026=M\355\n;8\347[\275\n\334\371\274\364\317\033>\325c\367\275\260\000\370\275\2543\215\275e\223g\275i\024\350\275x0\340\275\251\r\322=\016\323\242=`\315\352=O\361\277\275\035(\226\275y\r\002> \234\316\2756z\347=\235f\020\276W<;\275\261\033 <\266\n\034>U\353\023\274\307Y\317=r8\346=\003\267\274\275\266\327\373=\200r\246\274\023\234\030>}\005^=\251\306\302=\267\367\370=\305\206\023>\375\377\017>([\013>ib)\275\357:\016<\005j\022\274\2005\310=Fi\010>\246\340\211\275\303\274\002\276|\307E\2750\036\354\275C\276\320=\312\034\234=%\240\n\274\265 \353<\234\020\213=d\226\264<^\310f\275!\347\260=,\375\017\275\311\020\345=\017Tm<\272\353\311\274K\322\305\274\027\224(\2761\360\221=L.\023\2762\367\374\275\346\346n\275\346~6\275\301\341!\276\204\277\202<\347\300\022\276\271\200\224\275oL\022\276\357\364.>\270|\257=\226\272\341=\372\236}=\306\334 \275\241\251\357\275N\220\222\275\334\215\023\276\342t\201\273\3351\000\276\346\005\324\275\262c\231\275\255\324\346=[\347\222\270C\317\313<\013f+\276\250l=={\217\023>\267W,>8+\344=\0047\004>|\303->\250i\244\275c@\321\275\262\177\267\275.,\261=i\304\206\2751{,>\n\370L\275\240_\222=\335L\002\276~\347\364=2\220l=\372\360;=j\332\260\275\371\030<;\233Qo\2751\232\t\275)\020\351\275\266\265\370=\027\036\262=\334\215L\275\215%\207=r%\320<@{\240=\366n^\275\326\274\331\275~/\277=\344\372\022=\022\250\036\276\245\203L=lw\334\275\325d\033\273\305\023\022>><\277\275\017\035+>[0\256\275@\004\353<\261\031\016>a>\234=\356\354\025>\026K\270\275j\235\022>\304\"\260;\177A\n\275Ml\207=A\024\360\275\215J%>\260\025+>!\322,\275\272{\324\275\020_\300\275\240\315\273\275\206 \033>d\021\017=T\310\031\276\177V\t=K\006\364<\035\367\250;\320|Y\274\214 \370=[\366\010>\235\347\350=\272\226\373\275\247\254\342\275\251}\313=\345o\354=\275\261\231=\323\0230\275\301\362\010>+/`\275\306C\304=o\211c\275\246\260\202\275}\307\251\274\223f\213=V4<=\273\222->\253\017\331\275!{\243<O\304\026\276Z8q\275S\034\206\275\320{;\275X\360\024\275Ft\204\2756!&>\234\274\025\276\324L\364\275\261\250\225\275Q/\374\275\334&\010\276\322/\024=,\220\034\275,\330\224\275\300K\343\275+_\221\274\341\370q<\214\030\002=\t\372\216=\276\271\230\275\027\324\324\275Q\337b=s\270!>\3420\371=w\217\300<L>\225\275K\236U\275\236oY\273\234o\340\275\263\365\330\275\265?\005=\273\267\355=\210\373\375\275+\350\224<\222d6\272\206\321\004>\203G\003\276\345u\343=J\334\377=\357[\362==G\006\276\206\005\004\276p\347)>\006\017\312\274\325\361\371=\233\001\000=\021\237\340=\010\326\024\276`\330\236=\360D\007\276\013\277(>\036\204\361=\220\004\23594m\316=~\264\022>\230\223\345\275\240\006\347=\205X\213\275\014\245\262=\037\362\272\275\034\037\373\274\257\272\277<\263\314\376=\007\2441\275\256)\324\275\333\321\222;W\263\033>\263W!>\325\352L\274\277-K<VE\027>\263\023@\275$C\357<\275G\003>Q\315\216\274|\n&\276\271J$\2754\346j\275j\374\035\276k\274G\27517\341\275!zQ\275\026\212\217=e\270b=\332\202\345=+Ds\275\2369\032<\204\013\256<\025\210\201\275\215,\327\275\r\177\t>\345m\336\275\240A\250\275_\375\330<\253\257*=](^=\214N\311=\307\303F\274\001\333z=\202\030D\275f\362\205;\200tH=M\246\033\276\343\021\013>\356\267\222\274\214\243\013=\261\306\007\276\373.\001\276\'\350d<W\264\242=\345\371\355\274N\247\214<)g\002=\371\031\315=\024\034\r>\032\016Q=X\005P<\025\305\026>\377\017\264\274=\346\035>@\314j<\212\327C=W\266\273\275\315va=pM\245=3\266\'>8\027\332\275\253\033&\275\274F\357=\375\016\330=\267\263\006>c\301\362<)\317\201\275\322\222\036\276h\277\356=\354\365\361<\205?\033\2769\362\036=K\021\001\276\331Y\033\276]\027\231\275S/\003>~\021\271\275\014\030\031\276Z\303\304=C%\252\275\223\340\207=\205\225\323\275_\375\257=c\345\364\275\361\310\334;s\3173\275:y\322\275\017\251\'\276\371\'=\275\000\215&>\025C\300<ta%\276\336-\003\275\237\371\230=X\013\344=\021c!\276f\306\326=&\257\245:\267\002\304=,\225\253=\261\353\243=]\'\312=\223\300\032>S:\033\276\'\306\273\275\003\213}=\352=\026\276\326\273\363=88\222=)\216\034>^@\257\275\252X\306=\016\325\253=\225\201.\276\031%[=\347\335\030>\\o\023>\240?\014>U\346\021>\206\377\332\275\342q\017\276|c\000\276~+\035\276\212lx=\242\361#\275j\243\006>\220\355\214=\377x\346\275\272\313\303=\234\257\212\275D\034\312=Y\004\230<[\"$\274u\322-\276\326H\031>6\341$\275`\r\203=n?\023\276a\212\021>\0047\227\275~\354\254\275)\201]\275\235V*=\225\217*>o\347\021\276<\314\346=\247\037-\276\225\357\365<\001\277\360\275\346\240\334\275\360\260\231\275b2\234=\266\324I\275\251\030Q\273*Xa\275\351U\r>2|\352<f\"\377=\027\265\307\275\214\215\272<\223\342 \276!Z\214\275\346\215\t\276X\025+=N\217\017\276yz>=_\223\256=\202\346\272\2738\303\013\276Dv\351=\2565Z\275\013o\234\274\343y\273=/\247b=\361;\035\276\350\260\314;um\326\274\020\210\003\275\n\037\366\273\033/\274;\235V\316\275\353\220$<\026\215\3278Uu\230\274\\\246\014\276\220\312\001\274\314\371\016\276\002C\001\276\260\250)\274\332\200\212\274\tm\365\275\303\345\202=w\210\353=h)\221=\242\303\303\275WVX<\366f\277=\260\371\027\276^\014\\\275l\263\264==\216\241\275X\257I<\034|\376<\230_9\270V\247%\275\231O*\276\246\210\253=u\300\343\275}\372\230=)\274x\275j\276\n>\371\343\350\275l\341.=\211\344Q\275*Pl=\027\r\350=\016\247\221\275\356\227#\273W\376\270\275\307\323\026>\023\350$=\007!+=z\302n\274A\026\376\275\354\335\026>^p\031>\323|\337\275\002h\323\275\334\021M\275\324\033\355;\344=\245=\nL\341\275\245\241\344=)a\213\275\300:\025\276hc&>;\204v=\374f\304\274\036\362\267\275K\002\001=\325\2413=\311\342*\276\032\030)>\341YQ<\344\234\257\275;c\346\274\222\337\256\275\256\255\242=\006\326l\275l@\002\276e\260\322<\202\3579\275(\260\332=I\360.\276{\202\314\275O\301)\276:\367\232\274\264\271\001=Vr\331\275\\\375\360<\006]\310\275\267X\034\276\354p\372\275\236\273R\274\332\202t=\271\024\367\275\361|A=\212\337\367=9\355\021\276Pra\275\237\010\303<\365`\247\273\2063\272\275\017\247\017\276~\264\371\275\341\377\242\274\221b\'\276\251]\301=\356\275\324=\211J\365\275\000_\237=]\177\t>\322u#\276\242_T=\013\n#\276\275\203\262=\226\241\005>nY\230\275\030\230\025>!\331\025>\265\363\273<\276\225\034>4\301\353=\371\306\246\275\027\027\363\275\277\010\263=\032\271\'>S\247\244\275\320\245\021\276/\245\220\275vA\237=sT\007\275\333\202\234\275\336\354\353\275\037G\347<Pa\205\275\253\213\317=\005K\030<\216cU=\2329\335\275C*\032\276\263\222\301\274\254\237\013>F\034\362\275~\020\277=\rq\215\274(~\037\276\364\200->\223\366^=\030\332\322\274\023U<\275R|v\274\2211\014\276\217\377\337\273x\002\337\275\252\372e<\177l\234=;\333\340\275N\235\320<\311\034\240=\353\004\227=x\337\217=\025U\260=G\302\006>\317r\234;\322\307\027\275\035\254{=\270w\207=\244\336\306=W\315\001>^\353;\274\345Z\373\275\005\217\264=B\343i\275\333{\240\273O\346\000>\236s\337=\352\211,\276\205\007%\275\212\032\222\274Z\371\305=\373\335\001\276\022\252\027\276\311\245\226\275R\342m\275\270\211a=\304\314t\275\221*\365=\335n\037\275.\030\265\274p\332\246=\213\215\321<\344\n\367\275^\333\025\276\202\333$\276\361|;=(\270d=\212\355\030=6\362\366=l\tQ\275\265\037\004\276\272\361l\274*p\262\275\246X\360=\342\231\353\275j\377\210=\276(C\275\024\030-\2762\232\240=G=\304=\201\305\253=\352Z\215\272\214\241%\276\037\003\304\275+\331\007>\260\213\325\274]\256g\275\022\242\212=\007\377\204;\302L\253\275(\370\340=\234\345==%\200#>l\001-\275i\r\242\275\265\212\001\276\235\216\000\276\245\236\005>\267\351\'=\350\177\017\275\242\306*\272\21731=\347\234.>\365\332\036\276\010>\310\271Fy$\276\013\346\316\275\337\307\222=\212+\021\276\033L\272\275\257\361%>\'\231%\276\304l\255\275\376\304\006>\035C*=.\232\212\273\037\314\016\276\236\032\243\275\211g!\275\344b\222<\271>$\276%r\261\275\322-\261<&7\035>\257\250\332<\241\277\013\276\002\360\233=\n\247\252<\323-%\276\'/\030>\375G\005>\217\022\334;\357\375\345=\375\277\">\017\375\314;\276\252\252\274=\271\006\276\231\301\221=@\345\350\271\327~\351=e\\O=\270y*\276Y\330\010=\202\363\035>\2521\317<\322\204\022\276Y\225\230\275al\324\275\366\303d:-\010\365;HKK\275$\234$\275\331r\272\275a\001\215=\352b\264\275\013\245\">\277\314+>k`\027>\254\010\350\275Y\200\323\274\252\352\311=!\324\203=\351\237\360=F+\254\275\306\220\257\2752\035\001\276\313y-\275OW\237\275\215\r\237\275H\327\031=\326\247\373=\214\250e\275!{\344\275\336\210\217<4\343W<\240NW=aS\035<\244\213\267\275\0230\3529\220b\204<\241\220E=\205M\265;\217\242V=\350N\371=tI}=\016](\276|\"*\276\277Q\020=j\350d=\004 \020\276\341\345@\275\336\305\021>\314U\327=NY\005>^{\271\275k\251~\270Yu\327:9(\311<*\306E\275\241\245F\275\326\177\250\274\351\354\343=\031\261\333\275\315c\304\270\250\325\265=M\334\027\275\250\250%>\034L\034\276\300\237\302\274\321]\266=PbF\275kp\210\275\324:\266\275\025r\266=G\020(\276:\231\343\274<t\273\275\264;\333\275\233\304\370\275\236\036\205\275En->y\326\017\276\245\326\035:\205\261\370\275\375\374%=\323b\276<\210K\014>\034\375\344:\212x >\353\264\\\275\340\003\342=\344\353\353\275e\317 \274B\254\017>\335\361\303\275R\256\310=\255\000\273\275]\217\317\2743H\352<\323\026\200=\355\005\032\275\304\240L\275\232\034\007=Qz\215\273\242:\236\273rVD=\3138\022\275\341&R\274\344\363\325=\345|\221\275I\304\230=C\002\033\276;\006\334\275\321\325\311=o!\201\275,0\274=\024`\347=/\337}\275V\036\332<\271\n4=\227+j<\300M\363=\"\222\371\275\204\030\334=\226\244-\276\215E\263\274z\0161\275\353\023f\272\341\033\374\275j+\3139b\376A\275\324\025\354=#%\315;\203`\321=\027&\304=q\324\014\275\226\324\325\275\321\243i\274\3168\211\275YXv:\256l->\027\223\205\275\261\372\375;\2014\335\275\354\221\026\275\032\245\r>i2\'>\221am=Z\324\375\275\323g\325=z\216;\275D\202R=\220\217\263\274\350j\033>i\250\337=\224M\367\275\363/\220\275(\330\330\274Ms\334=j\270\241=q+\">s\355\200<\365\341O<\225I\212=\301Z\r>O\205\033\276\003 \t>q\035{\275\202\t\255=e\0008<p/\231\275\205\026\246\275\227\225b\275B\034\220;d\336\033>\016\227%\276\265\333w\275\261Z\357<\360C.>\330\335\'\276[\251I\274\266b(\276/\0351\275X2B<\274\235\000\275\325\261\234\275r\265\350\275\223\317\216=\347\334\016\276\302\330\304\275b\003\312\274\300V\362\275\232H\020\276\224A\311\275\253\325\275\2754\346\t\275\240\034\302\275f\262\352=R*\332\2745\322\'=Z\257y\275zT\225=2\353\027\276\274\025\301=\236\231\234\275+}\t\275}\320\210=Y\352\373<\276c\027\276\247[\033\276\215\321\272=h\371\362=\347\270\000=\320$\n\276!\254\207=\356,\031>R\026\360<w;\344\275\212\345\003\276\200K\004>_\347\033\274\322\027\370\275\325\323\016\276A\226\377=1H\344=\034\352\004>*\001\000\276O\261->\2770\350\275\353\212\361=\222\000\277=\014\005\270\275\352\037N=\307\335]=\241r$\275,\223\276=\000\004\332<\t\n\256\275@&\034>xLo=yC\230<\243\272\367\275\014\277U=\324\332v=/@\032\275\265QK\275\037z\376<x;\201\275\274r\310\2754BX\275\256Q\007\276\362\240\233=\352E6\275\'\t\003>N9\010\276.\035\236\275\205\004\022>\254T\340=X\333\033\276\324\231O<&\023\335\275 \214\032\274\017\023\234\275A\267\002\276\370\326\035>\002\334\022<\364\254\316\275\230{\235\275x\245\276=q\030Y=\345\323\277;\364\367\021>\037\357\206=\307\003\004\276\030\266\237\274\216\252\326\274\376\022\022\276\rA\322\275\002\222\256\275\335\266\323<p\345:\275\327\237\274=ME\003\275Q\032\025=C\371\314<\247\240\335=\261L.\275\230\367\341\275\362~,>;\005y\275p\252w\273\212\330f<\257\355\346\275\202\313.\276\323\212)\276\033V\233\2742J\003\275U\360\342\275\007\350%\276\023\260\325=\026\n\247\275g\224\017\275\3151\255=\342^\031\275\2764\316=\237\323\201\273y\303R\275\020\203L\275s\347S\275|\031\335=\313@p\275\002#\036\276\271\245\323\275Y\321Y=G\023\004>\202\026\263=\365\035\001\276\271\t\275=\343\007\344\2756SV\275\277q\306\271\324o\351=I\n\213\2754\307\225\275\0337\302<\314G\371\274\"\357\270=+\257 <\"@L\275\265\002-\276\2606y\275\372\021\023=\265\365\n>\226\276\375\275@+\214<9\016\225=\'\232R\275Mw\333\275%\263&>\363+\270\275\227\337(\273\230\251*\276\034\013%\276\rk\216=:\010\022>\02560\275b+\007\276\275\260*>\242\350\332=\245<\212=\007\207\252=D=\221\275s$\366<\204\271\272\275\340\272s\275\236\206\027\276TH)\276\335\373\n\276\210\312\006>`)\001\275\354\351\036>s\341\000\276\030\t\031>X\216\262;\222\277u\275%c\300=\270-\005>?\321\247<\2175\334=/.L\274\022\225\302\275s\332!\275\327\217H\275 5\274\275\377z\003\275\275\216|\273Ho\276=)\266\331=\254\243f=\034\223\177;\200\010\014\275\240\305\305=\224\256\367=\302\230\003>\205\300\t>\376\315C\274\373\257(>@\202\366<\376\243E\275\212\001v=X\214\254\275UT\n>\272@\343\275H*\177;\253\254\'\276\357\3108=\2435\262=-\340!\276.\020\354=\233\325d\275\345\223\020=_\223\256=>\326\324\275a\243\220\275\245b\225<w\354\332<\212\342N\275\226d\314=)e\301=y*\351\275X\017\206\275dR$\2762\347\347\274\n\001\375=\357\024\r=L\224(>\272\243\260\273\253L\326=\005\256\317:\223\347\353\275\2117<=0m|\275\336\213\223\274hE\344<h\341\024>\360\032\031\274\035\033\261\275\275w\355\274\n\021\026=}Q\305=T\014(\276\327\352\314=\205w\t>+\032Q\275\362Z\216\275\035\366%\275\010l\305=k\t\303\275\'|z\275T\027\311<\016v\312=\302\237\227\275N\246\331\275\201\006}\274,}\037>\272\244\370\275y\316\021>#f>=\013\220S=\014\367\326\275\214i\323=\327\344\343=|\255\267=\337&\000>T\336\310\272r\000h<\264\315\201\274\212T\010\274\362\320\\=/\027\013>\372\330\033\276\377\210T\275\252\277\277\275\215\211\001>\340\361~\274I\021w\275r\325\021=\370\303\020\276\227\233\264=#\247\021\2769\276\216\275\270w\242=[\226\364;%\032\022\275\r\304\017\276\253\322\315<YQ\240=\237\324\016>\250\225\356<\213\026)>\276w\246\274\377\222A<\241Z\340\275\377 ,\276\272H\276=\203\362\003\276X\376&>\'\334\365\275\253}\212\273\370\3767=\375\227\242\275\004\210\324\274!t\004\275\312\224\020=T_!>\203\372\217\275-\316\257=\325\246\214<\021\336\234<\374\235}=\240\006\021\275\210\036\251=\242\024\242\275_E\022\276\263r->\216F\177\275\371\317\036\276\2058N<\3016L=\266;%\276\336R\232=}\310\341<\327A\364<Uj\016\276\200x\234<\370i^=\342\312\010\274:\323\234=\366\362\320=J\360\207\275\227G\022\276(\277\226\275\371\355*\2763)\313\275\370\320\356\275C5\246\275\002\215\314;{\320\037\276.\321\246<\217\023|=\367v\237=+\250\t>*>G=h\333\030\276?\363\200=y\313<\275\274\005O<%\353(\276\035\301\221\275\273\215\244=\247>\324<M\221\203<L\355\213\274\007\310\007>\302R\017>mD\306\275\245\023\023>\204yx<\353D\330=1\337#>\014\311\317=\232\024\331\275\214,\232=y\002\346\275\312\304\376<f\272\n\276\274`)\276\3364L\274\316d)\2762\226\232=\205E\257=\374\376\004\276\360\255\205\275\277\351\332\275\322\017$>\273\272)\276x8\237<\213\251\204\2758\347D\273\255\363\"\276\335\354\013>l\215\202\275\263M-\276\025\031\006\275\362\256\236;\332D\033\274\225\263\030=P)S\275\022\320\274=\021\244\025\276\004H\356=\017%|=\211\273\013\276\361\"6=\233\007\234;\233\205\244=\025\006\031>2\326\364=\301\006\357\274\2129\301=\212J\004>Z*\333=\331\341\323=\204\016\244\275m\256\324\275\222\361\244\275$o@\273\213\333\350=\217\004\335=Y\326\001>3\366\340=\340\232\003\276A\322\361\275\3316\263\2746\323\020\275\374]:<\275\303\024=\373Y\215\275\005\353\235\274k\235w\274?{\036\276\035/\271\274\2277\n>\2473\365=M\364,>\361\211(\275+v\037\276K\357\026;8\025\215=\233o\350\275\237\233\263=tB\352\274\357\303.>\300[\350=:\3069=\223\265:<\215\372\344=\347\024\353<\334\344.>\nk\005>\314\003\032>\2270\001>\331\210\333=\027\261\033>J\350\221<5kL\275\004B\350\275N\251\255\275$\3733=0\3073\2758\351k=[\\\037\275\3408\221\275e6%>\230w\035>\313x\337=\375\025\231\275\024\r\340=\005\334\204<\341u >HrM<\253\316\304\274M\357\214\275\357F >=y\322=\252M\371\275\307\265\305\275\343e6=\200\372\004=\227\311\320\275\362\3160\275\216\002!\276\367\362D\274\331\371\240=\264\234\t\276\323\272\021>\212\237+>v\247\312\275\253\352\223=k\373\350;\224\266\020\274![\217\275\213\2507=\0262\275\275\233\317\232\275\365\332\351=\326\000\202\275\336\337#\276\201\013\363=n\275\356\275n\256.\276N\232\024>\037P\224=\006\tg\274FB\002>H\254d=\252\360\255\275q\014\247<\347\037\340=9\321M\274\274\343\016\276D\376\013>\260o\026>\255n\006>\001\372\034\276\344z\333=\000\374n\275\355\237\n\272\023{\263\275\221\325\315=l\241\253\275\236\344\250=\361\t\371\275\343\253\313\275!\346\304=\331k\335\275\3228V\275\241\004\302=\377}\t\275\'I\251<\206\031\210=gcl=\231\331g=\321\337\230\275\352\320\235=\323\337\005>k\266\305=\342\020\036\275\0005i\275\2214\373\275d\324t9L)G\275\240\201\'=\320\372\247<\255Q:=\337\207\311\275\264\340\262\275W\006\013\276&x\203=\237.\024>\327\356\330=\360\352\021\276\257K\270\275oq\251=2\\\016>\311/\001>\373^\264=4\330\264=B%\021\276),\365\275\026\225\240\275P\356$>x!\311\275\2410\270<\337\270\204\275\343\321\305<\232\254\255=\250\337\226<K\216\356<\033\'\240\274:a\304\273l\203\266<:\230\003\276\235.\037\276]4\204\275\342\313\266=\235X\350<\007\024\364=\261\254\267\274\035\004\001\276B\266\350=\203>\212=\271\313\260\275\240U\314=\327=\'\275b\305\275\275B\023\037\275t>\013\276\343)j\274\025G\232\274\233\300:\273p\227#\275\271\226\020\276\216dj<\356\343\'\276\341\347\035= Q\306=\236p\345\275\376\250\322=\257y.\276\233F\333\275\301\371r<\227\217W=G\341%\276U\273\023\276\275\335\347=\373\002~=R\"\r\275\317\340?=\024OJ\274\264f\243=r\031\323=\277\267\335\274\302;\213=f\267\004\276\247]\202\274\255\341\021>\200{\351=\324p\244=\241<\205\275\355\343\335=?S-\274-0\363<,$\271=,\265X<\214\307\037\276= \243=\030\036\032=\265\210\325\275v7&>\017\252\000>\227\322\236\275\203@\255\275\346\021%>\364\224\350<\365\3245<\332\312\203\275N\234\007>u\235\340=\256t\331\275$a\002=\234|\247\274\022m\364\275s\253\352=\026\210\030>\260E\020\276 \272&\276\272/\362=\267\002\373\273~\206&>\027\201\'\276\006\316\375\275\261:\345=\325P\332\274\276\263D<\251\177\307=\246O\030\276\3439\376\275\242c\031\276&\336\366=/\022\004>\211\252\254=\037\323\337\275\305\201\036\276XT\007>\321\341\250\275\272=->\001z;=\336\035T\274\"v\201\273\225\252\326<\366P\023=\244\324\373\275Q\336r<,G\253=?\337\017>\340\354\362=\271\323H\274\203\337\004>\037W\220=y\315\303\275\370\312\225\275\244\'\335\2755\365\027>\363\252\325\2756\274,\275\345%*>!;\276\275\241\216\367=\303h\033\276i)H=\214\342\000>\007xZ=\241i\034>\013\326J=\212w2=\260.\262=\345\224\215\275oZ\035>\204\"\355=l\037t<%\245\345<\017\273\217=\274y\002\275\255B\250=\236\271\023\276,\245\025>\246u*>\371\350g\275\322\247K\275C\010\207\275D\327\304\275\351b\226=H\005\224\275\3544\357=\360+\016;\201\235\264=e+\270=\2543\332=\204J\251\275\024\267\026\276)\266\225=\rtL\274\335\221\345\272\001\272\364=]\377\300=\245\266\315\275\016*\254=\014g!>\370\032\020>\242zy=\236U\322=\324V\016\276\222E\n\276}j\037\276\033\017\025\276Scy\275E\334#\276\245I\372\275\330\237\223==\021\376\275QE\344\274\320\247\'\275+\304\212\2754\222\263\275\373\313\242=\267\250\310=rZ\031>\262)\375\274\260\272\246<0\270\013\276b7\007>\275\322\001>\031\206D<\330\2061\275\035\212#>\036\326\250\275\273p.>\247_#>\367\332\261=\023*\367\275#\260;=w\255,=]V\001\276\025\277\023>\324\237\341\2752\344#\276U\3350\275H\035\016\276)\230\210\275\3656\200\275\373C.\276\227\251\230\275\210sa==\016\037=\333\004\316=d\033\222\275\210\225\310=MM\023=}\377\006\275R\251\322\275a\361&\276Y\355\024\276[\304s\275{=$\276L\261\342\275\001\335\274=|\237\315=\034\307*>\201\360\253\273<\305\"\276\265\304\017>\326\027\000\276\025\371\"=e\345\256\275"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        tensor_content: "\214WY\276\221J|\273p\357\010=C\341v\275\242:\305\275\314\273\372;\362\243\274\274\346\366M\276\2075\003>UPX\276\210\022\355\275\014\242\205=\014\220,>\213\002\214\275\231\243J>\026\274\314\275\026\347\335=~\314\217<V\226\027\276gW\272\275\275\322\322=\034yB>1;\325<\225\277\261=}\217\035=\355\333E>Bi6>\363\030\032\276\3475d=\275(\370=\273\001\032\276\235\030V\276\241\300>\276\330\333Q;)\201\"=kk<\2763!\333=\312\304O>\367|:>*>*=\246\'/\276\r\311,\276\304\356\210=^\231Y>\254\315O\275\247(\221\274\\\020\024\276\350\367l<<\2555\276\362\226\227\275\356\307)>\324\243\345=\266\010o=\205\351B>E\353=>\263*\005\276.\331\331\273\315\363\326<.\341\257\275r\003\302=8\212\307;\336\020\271<\334d\016>\207D\253=\335\021\030<\033\256\335=\177d\276=\277b\352\275\000\310-\276\303\231\036\276\005\331\312=\206\333\370=\212\306I\276(\020\257=\246\305\t>\247<\t>H\243.\276\214kT\276\023\355B\276\337\3535\276\n\313\\<!\262W<\\\2658\276\370i\003\272\\2F>\211\366\024\276{\361^=6\313\\\275\177\205\246\275HV\013\276w6\264\275\313% >Vz\006=\374+\260\275\203\3139\274\037\230\002>m\3611\276\374\303\002>/n\273=\264\2526>Q\356\235\275\270\"\371\274u\2712\276\031\222\036=\026\250X<\244Za\275\205\305\377=Z\305\002>;\317\354=\326\261\024>\'\337\241=\265\363\000\276\014\\\023\276\ndL>\305\264\026\274\022\377\r\276\004:1\276];D\276\037\372M\276\355NA>l+4>\244\314\207=\036\342\226=H\330O\276\213\016\305\275qH[\274\373\326x\275\240\273O\276}\014\305\275\361\017\352;\375\376\010>\264\314\265=\334\220\246=\337\377\023>\3109\007>\304\242\007\275Y\025r\275?\266\337=G\230C\276\316\207\364=]\274x\275\252\000+\275\2360\372=\300\\2=\230\323$\276\322\023\013\276\304n\321=\362C\026>\350\337J\274\0377\271=\246\324S>\242\267W=\255\205\216:\327\310*\276\2125\330=\234\220\341=#\252]=\032\252Z>\374\213\260<\013\306\347=\323\360W>\261w\225\275T\335\306=1\276\'>\332L\317=\372\274 \276\320wP\276\007,%\276\265\361\032\276}\200\237=6\242\327=s\314T>\215_\372\275\017\n\030\276s-=\276\347\270\306\275k\3071>\213>\353<\273\243\346\274\013\200P\274H\242\007>\230\022c=56B=WI1>S\030\376\275\242\026\017\276\007G&\276\306\217-\276ge\210\275`\000\272=,\305\022\276\032\177/>D\271\325=\237\007\363\274\371;\r>\02219\276G\\8>\271\371<\276\346\236D\276\351\205\212=\254\3377\276O\206$\273\351!6\275C\265\265\274\371e\037\276\022\177.=\324\263B\276\022\357\005<9;\273\275\3323*\275\rWl\275\320\024\026>\202\340%>\271\233\224=\305\264\205\274\36748=O\r\340\274\221\200\016\276m\276\216\273\330\330e\275q\034\311\275\'\317)>r.\'\276\241\354\311:\032\312\235\275\360\250\263=\366\202\347=;\346h\275|a\355;\270\213N>\345l\010>\267\3759>\277\203[>\310\362\267\275\341\263T>z_B\275\262\344L\275M*2>U\223\037>9\032-\276\361II=\025\316R=\330NP>v\362\022>\214 \213=\333\364C=D\220\003>\203\207*\276q\246d\273b\0343>r\036\234=v9$\276\235\224\203<f\301\301\2752\277\261=\223\352N\276\254\334Y\276\320[4>\037\013\031>zI\003=8@K\273\377\025y\275\376M\375=-\231\247=\344h\305\275+\270\025\276\030(&>\342x\'>\022\024\n>\2617\363\275\006\021\007>;\016\'>\276l\031>On8\276\364\000\232\275u\250\214=z\227\352\275\346|p<\266\246\033\275^>C\276\255\323\007\276\t\306\001\276\314J\017\276\304\017+\273\343\230G>-\256\322<\222\300=>\036\202\t\276k(\377\275\375\257\362=\273\346J\276\324\257\n\276\0203O>\367\177T>9\006\314=E\224\321\275Z\312\244<s\352\275\275\310W*=\020q\271=i\025\004\275\322AN<\177,3\276\374>\005>\250a\003>\003\236L\276\321\017H>kD\304\274\313Y\322=\241>\304=\036m\244=X\r\353\275\346^,\276\316)\353\275z\367\364\275$8\251=%\353O>\033\272\013>\037H[\276\300\347\336\274\301\013;>\240\021\010>\355\361\332<Tk\211==\367\201\275\036\245\217\2742C\030\276\245F\000\276\002\325\254=\245#S>W\230\022\276sIG>\014\216X>\256\236\021\276uF\022\276\004!G>\220\341\317<\367\221\034>\273a\202=v\002\352\275yW:>,)J=\205\013\210<\017\365(>\rF\241=\234\262\013\276\313p7\273\323\300N\276\002\326Q\275\360\323\311=\303\371\226=0\253i\275\342$V>&BO\276\372\010\200=a@\026\276\341\263\037>\362\245\003>\224\377\277\275\227!\336\275\261\220\341=\355\025n=\200\006\271\275\361^\017=\213\367+\276#\034\034>4\214=>\202\010_<\256\214\277=~y>\276\002\370\017>2\233W>\032\206\036>y\234\360\275\031G\006\276&\026\023\276\t9\'\276\206X\375=o\352\224\273#u\036>\213:$>km}=\tU\020>\301Q\366=t\210\t>r\274o\275&\210\326\274\273n\027=FS6\276\245\346\'>\025F\212\275\003+\273=\004\365v<\027\r\025>]\231 =\014\321)\276\315SF>\362\267m=W\351P\276\311\210\377\275\322\221\343<g\035*==B7>\021Bq= \3029\276\277r\032\276\265\307\337\275\211\022*>\264\353\r>\204\034A>\272\\\301=w%\327\274\325e\372=@9\261=\3074\n\276g\036\215=e\341:>\243\007/\276nIQ=wU[>d\363#>i\271\034\276t\336P\276}\311\201\275\301\236\257\275\273\337\244\274X:\241\275\255\250\017\276J\351m:\327\223Y\275;\336Q\276\257\276s=9\3314<\265\037{\275\001\377\222=%\017,\275\013\323\245\273\205\355N\274\315\250*>&\2069>S\331\227\274\314\027\026\276\235\240Q>v\222H\276\'\305y=\211\024\t\276\3158,\276\232\203<;a\202\021\276\313\250\034\275\037\306M;Ve\247\273\332}\254\272\332l\032\274\210x\347\275\364V2>bW\021\276S\271Y\275\321\025Q=/\331\316\274\007I7>\037\220\'\276p\t\352=\006\273\256<\306\007A>\374\300\314\275\307\3467=V\324\274=z\363\356<\"&]=\231!T=e\373(\275\016 b=\037_K=\274\0068>FM\215\275&d\013=\305Uj<\233C\031\276\224\354\302=\036*T=\373\255\224=]V)\274\347\235\201=\253\276\346=0~\210\275\355o\035>w\\\255;`\355M>\326\t\303=\225\346\037>\002]\201=\345\tC>|\033\343\275\032A\010>\003\315H>\355\241\004>x\330K>\356\316\036>d\244\315;\277G\315\275c\232@>9bW\276~\304@\276W\346N\276\232\335\324<\345%;\276\335\342I=\264\024\333\275\326\343)\276\035m\t;X\026\236=\265\344\202=\226\263\036\276~\241\023=k\014\352=\362#6>\351\024U>4\327\005>\255\030k=\007\363\222=K\272\344\275\320\220j=4x\353\274\255\027M>O;>\276}~\356=\025\256\033\276X\'\203=V!\r\276\364\223\006>_{\300=\226\270\023>\342\203\t>\306\004\010\275\225\204\337=C\336\240=\0209Y\274Q\3563<\003\177\016>nU@\2755S\326\275\263\216\036>\367\"\030>t\273n<h:\365\275~6E=_\236\033=\025\025T>c\351\354;\300(\264\274\363\3132>\302.Q\276\275\203c<H`\024>\326N\342\275\320\255%\276y-\023<O\207_\275\376\311H\275\270u\033\275\315\354\200=\023\323\255\275\263\207Z\274\255\245\032>\265\034\312\275N\024\017\276\304\313\314<\226\222\325=F\220\032\276\014 8>+\201:\276\037\206\343=\017e\025\276\020\244\322;9\2413\276*\267\214\275\2062\254=\274\004\334<\32167\276\021\205\357\275f\364\241=p\251\t\276\210\217X>\306\363\230\272\234Fu<eW\342=\246(\315=;\327\262\275\376\327\370<\270Kd\274\323\272\377\275\021\330;>\026d\204\275%VV\2769\320\315=\240L\020\274\340h\034\275R\2360\276\343\032\227\273\241#\"\274k[\340<\323m\254\274\345\037\351<\254\022\264\275-\342\010\276\350(\303\275d\360C>q\007p\274\337^\\=\261U\267=\257\366G;3\366)\276\272!;>M\231\266\2751O\t\276\313\310\023\276\313\261\006>,S\032\276\301N\335\275\230\007@>\233/\037>%QB\276\020Q\033>\214)v\275w\r\347\275\343M\022\276@\3008\276,\031&>u\244\013\276Nv\373=\201\033\004\276\003r\342=\216\256\237\273\357\201;>\013\270\033\276\207\312\261\275\206\324\005>\3005Q\275\321 %\274\203\355\030>\246\005\030\275\316[\014<^\221T>\027P\346\275d\206\001\276C2O\276\315\016\031\276\032E\034\275\227\337\027\273\201\177\002>\337\341\037\2750\010Q\276\024\013=\275\3207\276=w\2658>\210\020\005>\217*O;\364z\364=\256\307\002\275\203\nY\276\223\2578>\331\266:>\031\300K>\275\234F\276\222\022Y>\330\267\006\276\327\n\036>)i\010\276\254c\033\276\031\222\314=\304K\306<\206\376\003>px\036\274\275v\360\275\200\020x=\232X\302\274\232\210+\2754\016R\275^5<>\375\220g<\023\t\022\275\307\263\027\276f\253\014\276\221EJ\275(\\.\276A\014\246=\270\357?>\235\022M\276\365\225\'\276\201\031\304<\252>\277<6(%>\005a\244=\nzW\276O\3709>p\233C\276w\270\347\275`Z\254=u\203[>l\0264\275\305\365\r\275\377?\336=$\022O\275\245\n\320\275D\2431>\221\324~\275\214\226O\276\033yK>u\031\037\273E\035D>u\242\352=;\"\357<k\231\261\275.g4\276\222\217_\274\362\037N>ZW\347=\232\030\345=\363\350\013\275 \002\304\275y\307\303=K9B\276}\304\316\275\216i#\275\277R@>\362m\253=`p\351=\212\"\365\2731\0165=\005V\024>\372\311\324=\371zE>\352Q\252=\222]/\275PA\367:\3416\000=\306\320\020>XjC>84\217=\223\024\317\275\371-\217=\304\374\034\276E.\277\274\036\0059\275\024,\331\275\2121[\276\r\023\376\275\210\375\253<\323\221\006>\317\370\201=\371\006<>\301\322O>2S\037=\376\354[\274\014RU\275\340\325\257<\320\2127\276I\246O\276|=I>`\037\327\275\330z!\276\322\033R\275\030@9>wV(\276\004\033)\276\201&\321\275\374\251\025>\375\327W\275\266\245\242=@\3714>\265`\352\274\354\r\207\275Yy>\276z\333\000\276\334\2441>\240)\334=\266[\007\275E\251\275\273\205\006\210=\032_\355<V\315\264\275\367\3457>\004\354T>\271W|=)\333\356=\200L\221=\0223\310\273\026x}=\210\035\215\275\373tB:m\325x\274\r\2077\275\344\212\236\275\314zK>\205g\311=\307K:\275W\325\337\275J(\226=\204\216=\275\315\237\320=%\0037\276\'\214\267=m9\354=U\023\032\275g\200%>\303\223H\276\1774L\276*\374\252=(\272\003\273\001EI\276T\036\322\275nF\014=!4*\276\332nN<\022\312U\276\270\005.\276\r\222>\276<\332K>\t\357\262=tY\230=\374\004O\2761a\240;\217&@>\".N\276\212^\026>O\206/>\244\242M=\231\363G>LM\025>\205d&>\373mB\276F\'G>\332\016&\275\235\233\261\275\320\0371=\347-H>\353\355[>9\2107>\030v\031\276\342\313\037\276\211\\\323=F\017\305;[{I\276\202\247/\276$_0=\374\216\256=\246\240Z>HD1\275\325j\026>\226Jt\275\016Zb\275\201\2066>\0041\003><\016\315\275\377\210\205=\036\274k=\240\347\024=\212P\302=\342\273\023>^\357x\275\204\001\340\275\322\217\021\275\260\003\014=\362\207?\276B\350s:r@$\276\206l\274=;cK\276\30113\276<U\364=\3104<>,MM>.\231P>\327\3455\276$\246G=g2\353\275t\376@\276t\244\357<\375S\247\275T\350P>-\315X=\207\207\030>\265r0\276\317\217\361=M\024\246\275\213\231\357\275\335hN=\361Y\347\274\314\347\207=\362\305\014=\240\3056>\027\201R\275\347\316.>cE\n\276\r\333\000>@\254@=+\271\224=\204,\303\274\342\222\275=\312V\336\275M=\006\276*#\n=X\335\374=\270\252\335<\365\252\331<\306\274\247\275\363\232e\275\231\200\372\275\374\024\356=\326E\326<;\027\261=\264\036\212=\267a7>\205*\005>R\346\314=Tj;=n;0>\252G\250\275\352\377\307=\263\215\213=#\2504>*\322>>\317\260M>\234\234G>\314\320D>T\3638>\335\275\014>\036\310\207=ER\305=\216{\031\2763\261\331\275k\0258\276\343\321I\276\372\2101>\010-Q>R\322/>\032\235\364\274zP\r\276\313\247V>&\\\n\276j\3247\276\2200\266=\232\245\265=o\010\322=&\222r=\334y+>}\024\303=\240W+\276\346QW\276\343\273\271\275O\001\364=\337\334\330=\321\n\027\276Un?\276\224KM\275\200\364\005\273\243:\207;\301ah\274\272\017\244\275\007\243D>\223\205\351\275\177\275;\2761W\033>\032\313\311=@\366\'>\376\233\272\275a\026@>\022^\252\272e\335\365:(\343\242\275\306\336\003>6\014\303=\272\0070>\\\331\353\275i\337H\276\324\263\342\275i\320B>\017\256\326\275\245C\235=1L\013\276\377\270P\274\204\266!>\227\330\022>\302\030L\276\"@\266=*\374_=\327\215\275=LK\021>{f3>oC\254\275\345\036\203\2752\345\023>\026\341\207=\331\002B>\2321F>_N\272<\343\374\334=\223\206=\276\231\254\274=WTS\276\373\274\177=\200\r\243\275J\023\236\275\254\363\232\2752^\030>\365\235\254\275\306\232\376\274\267\022=\276\313\312\225\275\375\020C>\321J9\276\211\027\302\274\335\"=>\337\305\243<\"\rf=q\237X>\233\372#\275\232\267L>\004s\022:7Y\302=gs:\276\203\246\374\2753\376\253\275\01699\276,\302\025=\223\307M>\3357J>Q\016 >\004\211]\274\250\277\022>\370)\200\275w\017&\276O\343K\276Q\354\017=\3505&>\257\257l=\024\206$\276\206\345\342;H\253L>9\307\330\275\236b~\275\253\326\340=\3479D>\255\277)>e\001\034>]\377\031>%/\344=\217\1772>H>H>H%Y\276\330V\213=\364\316 \276\200\372$>h,\010>\340W\016>O\245\217\275\234\2410\276\205r\260;v\327\374\275\263\010\027\276W\n\220=\276\t[\2767\016\257=\273<\256\275\212\'\376=>\017\022>\326\262\233=#[1\275\005\202\"\276h\214\026>\302\017\345:\007\356\024\276\0264\336\275 5\005\276\024\342\204\275\2658U>\366G#\276.\247X>_\3741=\344\253\017\276\225Q\000\276\033\221==s\200\215\275\252\203C\276\216\002h\275\037}\023=\364\304\221\273vh\r>g\352\343=\365\272D\275\202\356H>\000\351\014=\313\322\335=\256\340D\274.\207\033>t\251/\275u\311\343=Hc\255\275\266\222\263\275V\312\340\275b\350*<\233*:\276\306;\220\275\206\002\316=5>7\275sa!>\277 K>(<\257\275\301\025I\275\353\227\206\275v\271\000>\327i\">\275\351\202\275\277M\017>&w!\276t\364\306\275\326\223\201\274\'\013\005>N\351\244=\330wX>\236Av=\267;\006\276\301\014\000>\274\030\320;c\245\304\275\355\251\237\275J+\305<\017Eo=\002AV>\3018\333<4NJ\276\270g\274=Cw#>O\273\201=\344\026\017\276_\340\t\276\013\340c\275[\342\035>\347\367\033>\362\010P>\237\341\004>v\344\'=H::>\333\0109\276[\003\362=\016m\315<\337\263=\276\210\244\321\274\213P\017=1iC\276\275s\346;\326\265\034>\233\375|\275\001u)>9\017\356\275\201 k=\352\206F\276\220a\n\276\270\'\276\275\261\030V=e\002\346=\335\252\027>f\334\'\275g=5>\377\323\200\275\363r\352\275\223#5\275\247\3111>I\223\237\274E8\004>Q\254\367\275\260I\255\274\334\374P\275 \320\303\274\255:\214\275K\336\305\274\347T\326\275:yy=\203\301\263\275\246z\004\276A\002\007>\336\013\255=\261Dz\275Q\250\363=\326\031N>)R\033=\004\256%>kD\200\274\2441\342<;\264\201=\"\352?>!Q3=\225N\310=\214\235\271\275\201b\375<g\347\024\276\377\363\263=\237\204@\276\010V\360\275J\375:>\360\333\200\275\222\234\226=\233\311&\276S\254\020\276D\375\033>\203\273\031>`\236w<m\315J\276\020\344\250\275\371\301\021>\374uJ=5o\032>\302\3147\2765\231\323=\211\r%\275\027{)=\356\266\022>\251gK\276\177\201*\276uLl\275\035\345;\276\222W<\276\366\200X\276\014\022%\276\351\243\247;\006&3\276\351qP\275f\177\244\275)\024\347\273\374\'\026\276X6\021>\253\330\032>\221r7\276\267\213\245=\304\360\204<T\321[>\315\224\016>\2549\006=\034\221\241=fw\010>\260\224&\276\201lM>\003+\023\276\205\324\001>\212\350\034>E\r\032\276\2111\030\276\257\345\347\273\221~\003\275\347\234#\276\371 /=\305\266A>\203\2524=\000Q\357=\261\006\243\275\020M\366=\225\005\336=\330NT\276oi\355=\224<\016\276(\245)\276J\304\033\274\207\210\031>!\006&\276\365\0279\276\253\276\024>\'\254\023=G\216\'<E\215\014>\3350\002>\363(\360<\325\230\272\275\373\322\323\275H\205N\276\035\344F>d\3620>\337\243\306\275\346#>\274\376\000c=\224\344\026\276\376TL=x\265\237<X\027\"=1\353#\276\326\372>>\035\355\217\275\240\233\002>1k->\022\335!\276\225\213\374\275\333g`=\232\301t=&B5\275\203\310\036>\264)\375=\007D$\276\254[\031\276\324\340\277=?\333\324=l\013)>\253l\030=\246\032\315=C\226X\276\2528\324\275\255\232?\276g\232F>\245CB\276\202\312(\276\274\024\023>\014\030\252\274\027l >\023dG\275\263\307:>9\304\010\276\361H\006>|\t\277\275jG\230\273Gd\267=(\306D\276\3737\004\275\335\354\336\2759\0062>\370\250D\276\262\266\240=\336uw=\024U<\276\376\3400\275;Qy=\213\"o<\246$u\275\207\354\303\274\027$3>\376\216)>:\347\307\274\203\336\026=\254\267\223=\315P\035=\332\344\244=\344\002\363\275\350P\027\276\024\356!>\034r\010>f\307\316\275\016\001N=5\254\230=\2079\354\274M\005>\275\0359R>wt\005>\240JD>e_;>\025\205E>M\333c=\240\316n<\034\366\341=\235=\030\275\006\376\013\276\214\'\030\276\231\337:\276\314\235\036<\231\357\305\275\206\257\002\273H\n\315<\240\\\331<\301S\030>R\251\034>\2024s=\337P+\276\346\202Q>\000\"T>\025\315;\274\267\211\200\275\213\267\037\276\234*:<\364J4\276`(H\276\207\250\336\275Z\360\023\2759\177M\276\001\254I\275\"L\273\275\240\213\027>=\273Y\276\302\2421\276Q\035\366=bd\006>V->>\201P\005\276\230-7\276\370e>\276\007T\256\275\310\213e=$\374/>_\372\340=\241I\005\276q\300\364<\0019Z\276\264f\343=6\034\367=\350\031\010=\3221\366=\326G\352\275\364\030\n>\026t\034\273R\310D>Y1@<\316\210:\275\\\310\275<V\230\026=\357\271\010>Q2\205=\263\367\037=\211\277\267\2755#$>\0243\207\275\230\000\377\275\343\"\005\276\004\370>>\303\344\234=\324\212\017\276\265Q\263=o~\035>9\344Y\276\263\230\021\276\235;\335\275\346\234\020\276\033=\001\276\035e2\276\177\253\033>h\301\230\275x\241%>\315</\275\346\315\020\276}\364A\276\244\013R\275\207\237U\275O#O<\023%{\275B[<\276\246V\037>*lJ\276\250\351d=\236\354\367\274\204t\017=\340O\002<N\221\253=<p\203\275ml\325= j+<\213\343\247;O\262\030=\314\034K>t\222\260\275@\031?\276)/\004\276\244wW\275\252B\337\275\303\024Q>\023z\037>9e\247\274\013V\250\275\274\243\364\275\207\007H\276\325 k\273#\275%=\371\010\203\275\273\200\">)\216K>\341j3\276\343\224#\276\215\177J=\212\361*\274\372a\255=\\\2178>\'X\214=\250s*>cU\014>l\201\306\274$\302\314=\354\376\026>\022\n\206<\334[\313\275\025\327=\275\375\2646<\312\206>\276}\r\014=\327S\323<&f\030\276BK_=f>Y\276\255\242\030\276r\032\033>\245\321W\276\370a\000\275C\347\230=\227~\215\275U\342X\275\220\326\232\2757B\251<\247pZ>\255U\353\275\316uw;\206\037\264\275\351v\203\275\352\367n=\211\314\314\275\303g\303=\316y\316\275\260-\236=[N7\2753x\257=\324\343\323=\245\2123>\315\002\320\275\375\252\313=\002-\253=d\224\225=\003q\030>\257\222\242\275\032;\334\275\003\226z\274&\0230\275\251o<\276\370\215\211=\256\361*\276\242$\222=\246\217\330=\202\234\r\276i\247F>\310\261\311\275\254\375\030\276hX\376\275\223/0\276.\204\315=\375\357\224=\240\347\303=k4Q>\246\"-=\212\034\373\275\257\363\270\275\335E\001>-\340\250\275\355,/\276\315\326\037\276\225\256\003\276\340\3133\2763\335G>\371I\234\275X\252\034\275\022{\236=\326\0261\276@\3166\276\236\317\220=&\357\272=\261jE\274\323b\314\275YJ\330=z\366J>\213\256\010\276\306\355Y>\001\360e\274XZ\357=\307h\014\276\245\217-\275\360\nP>\214C\200<\017\3553\276\236\231]<\362x\317=\247\257\313<\362\254\326=\003\376\013\276\\\247\232\273B\267\003>~\036f=\001\231)>\003\351F>\276{\331\274\234\0257=\3209\237=\311\211_\275\272o\240\275\016\305;>|\014%>\206Q\t\276\000\247D\276\024\032\251<\361\343Q\275:E)>{\2253>=\010N>\370\226c\275\237\337\264\275\027\300\036\2760b\"\275b\"4\275\323\223C\276\230U\244\275a\257\325\275Wg\027\276t:\'\276\033<\200=\251\333\362<\343\342&>G\345\026>\217P\227\274EA\344\275H\343\217\2750\t@\276\247H\376\275n\335J\275\372s\026\275\231B\247\275rZ7>)\360\004>\227\003,\276\315\023\306=\035\026\224=\213n\357\275\263V\266\275\330\271V\276guO\276C7\327\273\247\004\265:\257\314\352\273\247\221&\276/h\362<= \035\275%\354\265\275j/\002>\216\363)\275v\"~\275\364\274\255\275\234\246\374\275\251\265\274\275\023R\006>\221\331\005\276\tZ)\276\343\363\350;t\207,\275\223\374]\274\234=\002\276;\233\271<\244\232\020\275\356\"\027>/\314B\276\364\342\006\276\305\265\001\276\014A\006=\"\331\204=\255\243V>\232cQ\276\312<\r>\260\020\230=\034t\377\275\357\373t=Y\006\032\276h\207%>T\216J\276\232\035\257=\014\230\363\274\271+\377;\\P\355\275B\251Q\275\324xU>-\326K\276\340\233Z=L\016\330=|B{=\001\206\035\275\003\034!\276}qE\276/\257\327=-D\332=\177\234\273<Y\334\013=\031_\017>k\245\251=\026\321]==\033\237\275\300v\023>y\343\362=lw\243\275\315\3029\276\332W%>*\311\262\275lH\257=\347\245\265\275\370.\342\275\234DY\276\226\021T\276]\002\036>anG\275\005p\376\275\023\367\352\275\240\034_<yhJ\275\007\342\342\2741\314&>J]\250;X\357\037\2758\320\244=\331\377\205\275t\370Q\276\265\312\361<c\333\032<\336\307P<\264\005]=\327\242\262=:\224\223\275.<\006>\205\370\010>KC8\276\265j\266=\226\356\002\276^G\236\275\013X\237=\350\"\336\275I\204\231\275\327\362\033>\020\257\326=\333\375\275\275\326\344\212;7\213\210<\017oM\275\335\245L\276\273l\272=y#\221=\010\001\234=\323\220\263=\231$\221<\210gk\275\373\301\352\275\336\2668>\021]\237=A$\276=\201\333x\275h\347\306\273\245\274\025>dRN\275\013\320\316\275\031\373|=\305\257\270<\302\272B>_\317\307=\213\373%=F\347\314\274\340\2176>\275>\007>\213\212\013\276\216\2770=\027\366v=\340D2\274@\311=\276\364\306Q\275\264\255\034\276\362\222\316\275\267P\021>\r\302\023\276r\303a\274v\007L\276\031b3\276!D\002\276\367\017\250\275\261\t\220=a\000A\275\236\303\251=\3310\020\276}g\372=\'<\307=\351\n\032\275\332\242x\275+\003\220<\010q4\276C\252\233\274a\325\265=N\211*>\370\204\242=\273{\010>\216X.\276\376\312\021>]\006\204\273\023>*>\342 \201\275\360\201\014\275\244xG\276=\323,\276B\'\337=\315\221\311\275\353qJ>\301mH\276\327\316\017\276\031\014\262=\'\004\341=E\251}=\317\033\032\276\211P\330\275j\030\243\274U\342\001\276\330z \276\270O\222=\242kV\276\335\327-=\n\213D>\340kw=U\313%>0\2738=\341G\'>\023\3717\276\235\2307=`k\022>DXH>\2625\025>#\234\034\276\200g\300\275\211\261.>\254\253\240\275\332\230\357<D/\376\275G\264\314:\372<F\275\205\3440\276\033\356-=\030\237\313=&.\003\27628\037>\r\3469=\273\356\267\275\254\257\306<\217\201\276\275\366Y\200=}r\203\273\240\377\270=\317\211\361=\321\276\351\275\231\2309>\326\260\333\275TWI\276{\205\373<4\215\246\273\366\035(\276Y_\354\275\276\004\326=2-A>\030\201_\275B\333(<_\213@>\0030\036>\202\260\223=&\252\262\275\374_q\275@\335\327=/\017/\276\265\002\337\275UbK\2768)c=\374\300\026>\275\200E>\246\245\235=\234\364?>`?+=\325\207\031\275g+_=\301\tL=\347-$\276\216o\t>\306A\315=\272M\021>\247\365;\275\"f\325\274\006 \375\275\0147\345\275\002\233\223=\025$\005\276\302\014\344\274\375,\252\2758O7\273\2132\007\276.\356\316=BB\320\275\263)\356=S\r[\276\023\245\233\275\213\223\317\274 \3647\276\344`\264\275)\344\304\275\202\325h=\321\242\206=\245\030\327\273l\014;\276\031\360\224\275\001A\314\275>\341\277\275\n\206\t>\262\013\216\274\367\017\241<@\347\332\274\243[>\276\234\254\030\276N\006\200<>\237^\275T\255\000<\334\251\242=C\370Q>\361?\r>\272\254\024>Vi\371=;\302\022\276V\303\016\276\n\337-<P)G>\027\206\n\276mG;>\257$)>\324Ij=\224[H\275\272\323\232<\204\030\267<7e\276=\341\"Z=R\301\347=zP\317\275\255\026y\273\247T \276\207\023\221\275\244;\004\276|\247A>\230\374\274\275m\361C\275\327\004V>I]J>H\275\351\275\224X\227=\035\356G\276\237G(\276G\374\\\275\274:U>\000\264\212\275D\310O\276MJW=\374\245\245\275a\362.>`X\206;\323\367z\275u\237B\275@\r\034\272X\307\361=+\242\006\276\303\036\375=\3758\321=[\273\265\2757\212G\275Q\337\371=\0337P\276\361J6>\2503\272=\256\3434=\202i/\276F\272C>\325\214\003\276\207\3319>\021\006A>^\3712\276\335\204\000\276\027\260\014\274\026\310\302=\344\034\"\276E\205\372\275\213`\230=\253\307Q>/\360\000\276\337\264\205\275q\226\010>\315\343\332\275-\262\204=\212\251\300=\013\030\017\276\\\024\n>\270\216V\276[(h=\247\242.>\211t\255=u\001\033\276c\374\005=\207\262&>\261V\311\273P\365\246\274\347\205O\276\262\213\216\275m\366H\276y\ri\274+z\340<\334=\375\275h\031\030>Mj\005\276\320c\214\275\217\322<>\224\366;\276\276\323\251\2739\036B\276\235D\023=(\274\275\274\243\254\340=\306>\363\274\212\027:>A\246\250\275_l\370\275\375W2\276U\236\300\275\3159A\276}\016\205\274\270a3\276\033\276\310<\224\200\000>`d\270\275\347\314T=\346P\030\276\202h->\326\311?>}\367\323\275\270\014H\275\3241\217=S\021<>\341wI\276%\247\263\275\210\001\321:K=\225=O#\306=+-\342\275\220s\237=\345:\374\274E\346\361=\005\344\232=x\007\331=\035\250\233;\276\027\250=Y;\256=I\271\260=\332\272\033\276\275\346Q=\243\212.\276\n\314\203=zR\003>#@\361<*\315\352=\307Y_=\233!>>V\323\301\275\004\340\033>\205\224\225:\036m0>n\357:>x\325\'>\006\310\321\275\013\264\002>Ls\244=p P>d\344F\276y\330\261=p\026\031\276\365\347H>\315:=>\315\363\202=\333V\365\275\025\331R>\250\272\300=~\367\354=U\223\r>\304\240\331;\236E,\276t\302\001>\370xX\276\n\\\273=?\3247\276\205\251:>\366\3214\275\205\275\007<\036p\177=\251\330\375\275,78\274\037\236\201=\367\021\337<\263\262\317\275\001jU>\340\375\014\276\327\347\202\275\232Br\275\010\211W>\212}/\275;\260\247\275\347\244)\276\344x\203\275\311e\237\275k/U>\365f\030\276\272[/>\302\374C>\327T\365\274v0\231=\032\362\003\276\301\3550=\333\322\037<\223 \326\274\272o =\334\010Y\276\200\336\375=\320\365M=\005\250\324<\350J\374=\3753!=G=\013>\347\tP>\224\350\236\275rk\017>e\365H>>+\033\276K\223B>l\254*= 0\226\275\262\336K\275\347\237\360\275\357\250\345\275]\230\320=\350XQ\276OY@\276\232\314&>^\3458>de\362\275\327\013\242\2757\214\265<\366\030\334\274M\250\030\275\221\036e=\213\303K\276\207\024\223=\245\260Z= \036$>\272\367\255=\021\336->\373\230q=\035\010\021\276t\363X<2\277\303\275\315v\006\2768\030U\276\303)\320<\357\354\221:\024{Y>\346\367\014\274\250TD\276h\362\004\276\r\347h\275W!+>\333\016\366\275\363\256\334=\277\304<=?\350\016\276,\032+>\014\234\232\275+|\r\276}\257+\275\026\003M>\034\240y=<\300\t\276\363\0342\276\336%\'>_\367\230=\277\321X\275Sh\014\276\253.\262=\371\306\030=^?\016\273\177\314+>P\031\351\274\344\266\035>x\256\332=\317\200\300=#\225X>\306-\037\276jH\316\275C\327\027>\362\274T>M\265:;1\001\324=\346p/\276\215\206\357\273\200\0037><\234\262=H\347:\276\317I\361=\3104\211=@\0250\276\217\331\035\276ou\032\275\221_\333=le\236=n\220\261=\276b6\276q\337\240=05\037\276\221kR\276\210\371h<\036=\346\274_<\r>c,7>\312\220j\275j\005\233<\3629\025>\250^\003\276\257\010E=\223A\235=(\231T>t\262\264=\371\003\240=\310\311\260=\016\2632>\325\034\346\275\252|<\275Y$\343=\361!\270=u.Z>\217\224A>Z7\327=\277\320r\275\177\257\254\273\200\024\240=\023\005Y>\257\374\354\275\351\237\373\275%\257m\274\340>\221=ur\027>zK&>\270\357\232\275s_\037>wt\225\275\007yG>\200\332\266\275T;P>\272\033\270;\201)J\276b\367\010= \3733\276\362\356R\276;\333\314\274p/\211=\013@\r\276\255\344\227=Pb\373=\311]\226\275r\3121>\337\340\254=\341\214\021<\347\323\204\274\306C\003\276\253%\354=\220\0367\276\254\231>>\277\307\031>\244.\372=\277\257C>\360RR</\266\332\275\3268p<H\377\324\274\244\"(\276~\322(=,q\020\276L\005\006>\3668*>V\256=>Y\025\006\276\263\341\230<\343\217\016>}\021A>\373\276\377\275y\262\244=\'C\361\275_wE>S\016\010>kD\325=\260\334\245<\214?\032\274-\177\345=^>\007\275\355U\310;1\313\021\276s;\307=\330pz\274\233\337:>\031\205+>\004\346\217=\353\240\013>9E\276\275\254\354\030>\334aT\276\243\266#\2768tZ\276\320\341\001\276q\222\023\276\377\355L>\247\037\207\275\355\240\367=\201 \207<YA\211<\260\002\006>\320p\216\275E\221\006\276\036;H>X\2125\275\227\313Y\276\332\314\320=\303\307\227=\243\021C>\252\026\037\276\217\271\033>4]\007>-\327C\276`\345\355<X\2251>\344c\204\2737\021Q>\262\352*>\263\027\035=\300M@\276\303A\t>\"\036\'\276\363\017\253=g\2045>w\373\300=\341K>\276\245\267\377\275\000\367\213\275\031x.>\315\244\327\275\314HU>\005\263H=\371\270\317;\027J&>\251\266Y\276\332\203\252\275\023q\254\275\312\236\227=\262\263\273\275\341:\214<\263\016\324=\035\364l<\2608\320=\246Y6\276\216\253A\276\322\253\343;\213\200\272=<!\337\275\366\211I>I\3065>\"\030\024\275\013\212Z>=;\031>\204\3215>IU\254\275=\266\016\276C\306\366=\302f+\2768\215:\276w\372D>\322\\R\276\\\377\372\275\214\350\021\276k\341\340<9\371\230\275X\224\256\274\1773Y>}\020T\276\354\007\014>.3\250<\216\r>\276h\342\024\2764\267\227=\351j\253<.c\360\274\013\023\337\271\366\344\351\2755\340\325=\311Cm;\340\366O\276\276:\013>\266\323\364<t\033B\276\001\345\027\275\352\263\351=zc\027>Qc\033\276\232\225[>\3023!>X\030\355\274\375)\242=c[&\276\353\023\367\275\260TW>\350\201L\275\370i\207;\017\304\224=\373%\267< v\001\276\031s4\276\023\251%>\211\207\020=,\261W\276M,\320\275$\020\002>y4\242<\232\006\241<LT\367\275\305\001\254\274Q\276\036>\346Q\222\275|q\371=8\t%\275\'\273-\276\351)\003=\357\372\017>2\351C\276A\307\211\274\317\030P\2768\223\235\275\301\037\002>\214Q\232<\237\260\340:\2765->c}\235\275\333\277\242\275\2728\336\273\223\324P>\003\256\004>\024\350\260=u\\I\276&h&\276\022#\006>\340>7\276\237#\307\2755\230 \276{-7>\034\272\202\275\352\021Y>\260\352K=\003+\'\276\\\207\022\276\272\242\374\275\026\024\021>\227+\342=\022\350<>hg,\276\013\036?=\320n\257=\250G\315=\373\272!\276\252\033\361\275\006#?>\0303m\275\317\204\022\276\020;\177\275>\252\014>\376\346%\276I\3477=\0231\352\275M\302\314\275`\250\211=<\345#>S\205\022\275\2034\026\276\t\376\247=\"\336&=`87\276\342\266\023\275Q_\242\27506\343;\313R\037>\242\013\246<\226\277\004>\337,\013\276w\312N><\364\227=\201\262\005>\200\0030>\252\332\n\276>T\021<k\207\362\275GT\264=\323\3630>\360I\252\274\347c\017\274\275\0206\276\000Y\002>\305\2547\276pWB\274\250\254\025\274I\325\036=1\330\006>\373\371\016=\032\303D>\322\013\007>\377\304\316\274\177\314Z<\344J@\276\331(\260\275\241\334I\276+\251F\275\214\020\214\274\014\215\025\276\204\312\260\275\360\034R\276w\026\006>\002M\231\275u\2664\276\242\324\254\274?\026\302=\303\366b\275\246\001L>\260\200B>@2\036=\254+\331=\n\242j<\272\306\307\275\353\"\333=E\021\n<=\203G>\267\312\233\275\r \026>\265\0278\276g\2423>\003\2677\276\324\345-\275\316\337#>(\221E>\336\355;>\360\220:\276\307\366\236\275\235r\263=\270\014A\276\241\002?>6f\334\275\216\223>>\333\364\">\027\225H>\206\365\242=k\'1\276A\030i\275\251\005\032=!\244D>\342\0379>^f\245\275\023)\n>d|6>\317\3673>\262\340\275\275\201d\213\275\344\257\375\275F\266N=\310\312Z\276\302\370R>?K\215\275\224\207B\276O\264\001>Z\367\221=\237\n*>\244o\342\275\231\017Z\276}k\262=\211k\344=p\274\007\274*CO\276}O\030\276\377d3\2767H\360=B\274\'>=q\236\275s\220\017>V\307\007>;p\233\274\324\260\265\274O`\312<vhL>\377\340\206\275\225\270\374\274\231\023\354=\303B\226<|\260\305\2759\000t\273\210\327\334=8q$=w-\200=\262\251l\273\277(\034\276Y\332\324<ph\003<\307\017D\275Z\004\367<\260\220\374\274\255ER>\241\373N\275EQ!\274\264\271\266\275\024`;\276\263\352\034\276\272\031[\276\254\313W\276\367\215->\243\254(=\306\300\227\275\002\374\303<\212d\r\276m\224\237\275\254j\000\275\346\204\210\275\245\307M\276\3561\243\275\212\026X\275\260\273\330\275p\021\003>+\302 =\230oV\276`FK>\302-\266\275\306\274\033=\026\340\024\276\004w\016=\275\257\365\275>\232L\276>5\033>\325\337\014\276\337U\271<\001\251\n\276/D\024\276\310\367?<I\210\251<m\324\333;\345s\255=\215\005\307\2756\220,\276\273\"\345\275\217\230P>\367\275\250=\034X,\274\212\346?\276:\307\273=h\020o\274P0>\275\212\363/\276`\215;\276\t\372\021<\263JD>\316a]=\356\374\255=!\367\n>\201\377\264\275\241\377\024>N\262:\275)r\037<60\210\275y>\361\274\266\n>=\177-V\276K\021\250<\t\334\031>\210Y\014\276\022\214z<\261\036\206<w\303J\275\360\307R>\251\225\262\275\271\324\352=~\363\023>\201\034>>?\035\351\275r\036\373\275B\301G\275\260\272\336=\322N =V\307\024>\024S\035=\270i\372\275-\\;>\264B\213\275\370\234U>o!-\276\274\t\376=\020c\003\275Z\356\020>8\030p=\302\031\007\276,\217\252=\344\273.\276d\021\270= \303\207\275\372\tO\276\352\306C\276\235\210E>\314h\027</\230\023\276\313\270;>\353\016%\276\267\336\\\274\036\t\376\275\370\253\222\275F\257\032<[iY\276\331\235\355=\306\253\365<\316H\376=aU\034=\202\304+\276\220\334\034\276\237\251A\276B\322\265=\225r\335\274V\257S\276\371RK\274J\243\337\275\376\260B;\307<Y>)\316\021\276\256\263\001>\205f\314\275\371\235\354=\267\017%\276iG\235=\342\331,\275\227\231\014\276t\271\005>gfZ\275\343\276\243\272\270\371\242=\3701\256\274\341\257\310=\016\2537>!\256\023\276ui\314\275\226_\256;\215X\037\276I\326\353\275\373^\213<\262\0015=\213\232\363=\377\376\317=\321\334\020\276\036\002\005>\263\266R>^\2710\276e\2667=->\233<uu\036\275\371\376\001=\3121\354\275\010)\256\274\276\0141>\035C\257=\250\2423>\004g\037\276/D*>\024\374$>\231f\217\275\177&&=Ze\270=\253\272\267\275\360\211R\276Jf\347=\215\355\375=^,\004>/\206\356<\306\004+\276\342\207\036\276\261\233I\276\367&\026>\345\321l=\226\316\340=O\037M>\262\263\206\273nvh\275-M\035\275\2573\225\274\271x\212=\302\3326>\310\344U\276\317R\352=h\211A>\243]\324\274\275\3545\275C \007\276\253\371>\273\020\331\361\274\271+\207\275\302\250G>\206\375*>\247x\217\274\027\350I>^\205/>\021\223B\275S\340\250\275v\214/\275\005:\336=2\361\223;\204(\216\275kRp<E\367\240\2733\035\302\275\035M:\276/5F>\027\325L>q\371\026>\314L\002>aS\315<\355|M\276\276~6>\323\365\t\276\217\274\253=\3752\344=\276\2323>\314\270<\274w#\222\274\n\303(\276\220k\334\275M\216\r>\241Z\037<\362o\022\273\335\022A>\022i6\276\316pR>\210-0>\326\2522\275\360\311\013\275\240\334\037\276\216C\n\276\005\332\371\2759\020m\274\215N\215=\360\3104\276\361vR\276\220\010\207\272\363\351!\276\356\213\261;(\237\226=E \233\275\346\340\212=xtl=\021\223I>\364\032N\276Q[\307=b3N=r\331\013=<qR\276\274\324\007>\306\277&\276\261\232N>e[\010>\204\241\374\275\334\027\002\276{\005\007\276<\213\264;;\342I=\03261>c\211\373\2754P\023\274\332 \006>\341\216w\274\3737\343=\224\024\201=\377\336\247<\353\027\025>\355\206F\276\032\216.>z\304\343\275\300\255\200\275\247\257\373\275GpE=\262HJ>\214\241P>\262\343/\276\344l\006\276\'m\232\275\243\316\304\275\333\315<>\271\344:\2749\017\004\275\002\215K>\205\210L>{\246/\275\347\003R\276k\332\027>\217\353U>\3220\3749\205\010\335=\367j=\276~\037Z>\260\360)\272\000\265\022>\010\326\304=j\216\006>\354Q\034>\374\361\r\275\020t\014>`DE\276L\025\021>ntC\276\333\240I\276\346\270\234\274s\241\327=\016\332&;\246\315\272\275\302\037D\276\277\245\307=\334\026K>25\227\275\324\311<\276AV\222=\211\375\017>\350.\223=\023\346+>\023\020\263=\240\373I\276\031:\007\276\032D4\276GV\006;\305\302\332=B\255\345=\322o\000\2762\211\206\275\r\315\222\275>\326\217\274\377[>>w\266\314=o\276~\275\211\240\262=\314\2639\276|\215\271<qY?>\037\351T>*\250\271=\312Xm\275x\2160\276@`\231\275\033\216/\276\266hU=\340Y\311\275\343\r\177<\27587=8\346\032\276\234\331;\274\232\336K>c\'I\276q\274\024\276Oe/>1\003\235\275n\275\252=\240\233\036\276\231D\224=\362\016\366=\336o\006\276\364\361\271=\024\247==e\026\035>\000\3238\276\201p\"\276t)J>\001\216y\275>\321\031>5\032a=\355\356?\276J\222\355=\311\361\210\275\227I\020\275\236\245%>\200w\276=\n&R\276|aT\276\'\271E>\021K\t>1\251\352\275@\212\363=mE\303=B(\310=9h\007>W\245L\276\216@f\275\016w\342\275\252\2638\276\034a\337\275$\313\022>\247>\334=\324\3476\271\260\215\307\275\277\277\001\276$\2027>\030A\346\275\374\236\210\275?\336\250\275\'D\264\275\346\024\007\276^M!>\370\356B>\301qZ\276k*N\275\325jQ\276\013\226D>\266\"$=?\364\021>\363#\205\274\022\304\363\275\225P\252\273?~\205=\223\2069\275\276\t1\276\37364>\253\252q:\366\034\305\275\221\213n\274q \022>7_o\275\3721\303<\343\032 \273\025\022\r\276\217C=>R.@><\243+\274SA9>#XV\275.#J\2765\032\006\276w\265\226\273Xn\361=*\365\016=I\263k\275\240\340\032=\373\224\255=\037^\206\275\207\344[>\340\233\336\275\242E#=m\2220\275?\276\367\275\322\215\234\275\32691\2762\227[>\301yU\276\230\246\225=\213\373\'\276K\006\030>;H\273=\336\330\251\275\271\210D\276\364\0020\276\002~Q\276\223\2048>\335\235m\275%j\262=\027\005\310\274ffT\274\004F\306=\270\251->\357\306\\\274\350C\321\275:\340\244\275\274o\352\274vY\201=\351\006\206=\032u1>\332\377,>\312\304\346\272\357(\001=?\211\304\275\324\251\027>\361#\020\276\033\2778>\337\t\006>\272VQ>\3232*\276]37\275y\212\335=\tN.\276\211\\\367\275\004~J\276\351\034\021\275\264\355B>\376\312\256=Q\265M\274\314\202\270\275\354\202\024\276\275].>4gG>z\375I<\035\";=\354R\261=!\340\346=\213\323\305=h{6\276\264\237.>\361\256\320\275\206\213\350=:\330\207=\017=D\276\234Q\274=5>\016>\360\021\355\275\314;T\276\026n\365=\3477&>\213\r\r\276K\202+\276\267\360\005=\346\337O>\304k\340=\261\310\334\275\252\356\003\276\253|\341\274\331\300\244\275\336_K\274\300\216C\276\323\313\370;\373\306\027\276\033L\276=<\247\004>\352\214\350=,\355\355=\253\371\256<\216\001\002>|\327\271\275\327\274x=\2268\177<\340X\031>\036g\375=\314\310\202=m\037<>\300\325B=\264J$\276\365\220\034>H\'H\276\362WT\276|\001}=>D\261=uq,\276\371\317\t>\266\357\005>S\260<>\2424\227=i%h;\273\224\277\273\337\241U=\365\227U=\263\262\022>9Y9>=\017&=\353\177:>z\006G\276\014\227\354\275\361F5=\003\370\300\275\277\244\037>\267\330\217<\331\270$\274\351\253\034>\207\363\352=\262\243\034\276\216\004S<\025\2534\276\230\001\005>\314\231b=1\320B>H\223\004\276\3744\017\276EMJ=tg\253<\271v\240\275\250\242#>^\315\347\275\r\2564=\013\243\351=\014\304f=\006I\034>f \211<\024\242<\276*\237(\276\276\217\357=\341\376:\276\351\2478\276j\260\007<%\241\016>\313\026\273\275\325\376\264\275\030\022\016>\306\254\026\275;\2070<TL\037\276\237\231\213\275\251\\4>xn\202;.\274.\276m\200L>4\002\017\276\225\035\373\275^K[>`J~\275J\377\034\276\261\250\375\275\241\230\027\276\035ul\274\031J\006<\033L\203\275\247\224\313\273\023D\327\275\313\260\265\275\r\246)>\006\203\033=\206L\371\274\254TB>\220>\345\275\2054\216\274\274\237\272=|\341&>\305a\217=\273\325!=\2236H>r\026\313=\233\226=\276\3259\314\274(\014\005>\357rQ\276(\235|;\'\000\315=\303\3424>\257t\355<\204\036\306\274d}\355\274\2536->\3439J= Q\316=]AD\276\025\310\201\275M\250\r\276\204\300\234\275gVL\276N\3503\276\352\376&\276\234/\004=\213\365\350\275L68>\030\264\006\276(+\016>k\330!>\201\260\t\276&\313\201\275\350\340\365\275<\216\241\275\304\0056>\257\274,>\253\204\275;\314\n=\275\023\305\370=p\236\326<\021\243\355\275\301\227<\276\217\021+>\202\262\027\276^nW\275\307\217v\275\242\326\003>\366\324\240;\016H\243\275\306\317\241<VZ\234=: 2>\244&\004>\314\014\020\276\207YH>|9\013\275\007\002\233\275L\335\255<\267\327d\274\017\2072>\315\237R=t\305Y>\201\340E>j\2327\275x\234\346\275\251\202$=\312C\014>\007o\244<\n^q<d\226\266=~\330D\275:b4>>x\330\274\357\004\216=\031M\216\275;\3575\276\365\n\001\275\254\250\003\276o\215\334\274[\014\326=:\251D\276^\215G>\202:\211\275\0053\372\275\226\006\335=\0300\202=?\232\260\275\274\325\245\275\350\212\273:w\341(>D\302\r\275z\017+>\253!\034\274\203\236F>=\024\n\275\200O\342=\002\3008>\006\250\023>\004O\314\275\206\226\302=a\347\002>\347=0>\006L\306=\211\205A\276\001\266\353<\035\373\355=\334\233\361=\274\023\000>=\312\261=\246\024\201=\231:\344=}\332{:b\320/=\376x5>Y\322\256=\363 *>\361\237C\275\231\342%\276\372tR\276\036\211M>\036\025\031>\010\256P\276Y\210\032\2744<\177\275D\273!=rk\002>\273\0355\274\022\304+\276(\"\327\274W\2519\276\203S=\274N\274U=\340\276\272={2\273<\031\357->\360\331\030>9\317\013\273a8\322:\265~\026>\372\203\300\275W\"\331=\372=\241=\220p\331<\226\032\034>\213H+\276PT\354\275Y\206y=\220\027\n>~\273\003\276\004\233>\276\273\373I\276\241\335+\276O\017/\276\277\032\211\273\276j\235=\222\r\232=C\022\220=\"\335<>\257\020\t=\254\004h9\344\203D=$\237B>H\352\211\275\246q\360=H\0007>\013\373\354\275JO9\275%KM\274\277O\366=\014\267\256=\037w\024=\307\025\211=\301\202\216\275\233\265\356=\022\216\263\274\336uZ=\270fV>F\247\037>P\023R\275\331,\363=\221\307U>\243\205\347\275\366q\323\275\230U\310\275+\027C\276\320\231\206\275>A\364\275\022\217u\274\256\335\271\275!\373\346\275^\030\351\275JS3\274\324\n\252=\206\300\305\275\337\363)\276\016\347<>\034\217x=\243\273\022\275.~S>v\177\236\274N}H>\313\2425>!x2\276v\004g\275\212ny:\230aU>v\345Z<\252\334\272=X\312A<w\001\023=\363\003\335\275AE\216=\007\010\275=\205z\215\275\215G3=\323#\210=wr\350=\312\314E>3\225\304\275D\036U<\275\300\351\275c\240\315\275f\202\273=S\3751>\216\002L>0y\006>\315S\311=\0323m=w\\,>l*a=?\226\323\274\251{Q>\374\367\301=\315\305/\276.Y\235\275M4\241=\372\263\223\2753d1>\216q\025>\004\0363>\344lH\276\260\203\206=P\370\n>\232[\254\275\206\376\224=\322\001\035>\264M\324=w\222\324\27472\263<\365\247T>\036\'\365\275\273\336\260=\370}\023=c\334;>\210\353\325<\005\030\271\275\2256\031\276@\245y=\227\240\314\274\270\3304\276\312\250 >?o\376\274M\237\031>\375\035A>\317\325u\275\345\370\217=)I\216\275\027\216.>!]\326\275O\261\'\276\301`;>\215\323t\274*\344?\276\266w\3579N\371\275\275p\202[>\001\357\334\275\2318\247\275\001\375\027\275\236\367\373=\352\025\340\274+\227\032>!\367\240=\377\023\220\275\210U\300=I\020\230\2752\001\216\275J\250e=i\241@\276\203!\320=\247|C\276\366\\\347\275\203GK\274\022N->\256I\343= V#>\004\245\337=\350\010L\275\r\212(=\010B\251=\343\230\220=c\336\320<\024\357\241=\363\221\037>5\022#>\200\234\371\275=?V>\032%\006=w\327\313=\245\350\235\275\312\017%>4\036Z\276\242L\026\276\352\036I>\356^\026>\321\212/>\2254/\276\004\201/>\2155Z\276m_\206<\020\222\024>\252\346\342=j\200\351=\201\261\010>dZ\202\2751\243&\276\0103\323<\253\244\313\274\020\207G>1\251\025=\342\320\005\276\224#\211<\366\242\330\275Fx\">PN1\276\254Q6\276\225z\203=\343\0072>\245\306*\274\253\216\216\275\356~\010>@\002E>\224\355\017\275h\023\016\275\371q\n\274\333w;>*\025\326\275\022b>\274\300e\023\275x\246\325=#\213S\273\010=\343=\024DB>s\253A\276z\264\236=\311\3247>\214_G>x\224\177\275q\375\264\274kP\007\276\220dg\274c\300\\\2759\366B=4\035\'>\021\312\336=l\'s\275\022\3516>\226w\026>!\374\353=l\342>>\272\315\014>\360\3319\276\031=E>\247\340#\276\276\262\276=~<\227\274\315\\\014\276\013:\342<\274\026\246=.22=I\344|\275\020\325\\=,\375N\276W\033|<\240\311\322\275\007\216\002>\3313 >f\244>\275\374\361\315=\272\3143=\037\207\r>^\273\310\275\302\300\232\275\004\337Q\276\215\r\224=\203\256\013\276\355i\271\274\300\344O\276\362\215:>\342Z\352\275u\303\n\276\372\377\330=*n\020\275\262J\263=\263iz\275\217\310\023\276\331\302\237=\201!9\275#)T\276!\026\335\275\375\262\273<\260\364\237=y\rq\274\252\004>\276\255L\267\274\326m3=\340\371\360\275\252\000\014>\355\205\t>#\334\036>\216CJ\276\243\0015>\244lB>\204\332\207\275o\004B=\0341\223\275\034\363X\276K\340L\276\310ZF>\263\027\364\274\341\241\n>\353\341\332=\337\236\227;0$\022\276\2638\217\275\2249J>O\237p\270\363\026\375<\267\r\010\275\305\211.=\036\367\331\274\177\277\361=\301\334\215=~-4\2762\373\37797\252B\276\233\234\312=\357\305\302\275\'\322\217\275\254)\030\276,b\262\275\256=$>\2065\257\275\300\312\265<t_s\275L\010*>=\350\036\276\031!;\274EV\261\275t\3575\275\256F\022>\226t\004=\220!\022\275/\356Q>\356\366L\275\274\\!=\023\227\025\276\231`\237\274_\201\006\276\216\235\"\276EQN>6A\340\275\202%\003\276\210\3672>\244\360M\275\247</>hM\333;\302\303\021\276\310\345\275=\324P\231\275\030\272\310\275\002/=\276\344\310\016>\302$9\275\263\327\262=\377^G\275z\272`=\026\234\257\275\264\210N>&\344w\275\321q\344=\n\3369>\217\036T\273\375\nX\276d\267/\276\263b\357\275)YI\2763n\202\275\300Q>\276\341\363\227<$j+>\225\230C\273\277\000D\276\324\333,>\343\361\337=\001\360+\276\312t\347=\224\247\367=\300y\302\275\271V\336=\317\323Q>\3427\n>\313l\027\276TN\242:\267n\017\2750\270\023>O-\352=\207S\001>N\010\376<9\361\320\274\024\177\033\276\262\243\275\274\343\344\021=\225\003\000\276\001u\027=\234\334\223\275d\022L=\240MU>\323\246:>\351\256\n\275.\257\326=\022\254\027>\022Ei=\371\021=\276\355\2638\276\215\276B>\177\224\223\275\322\277\031\276\272\017:\275Y\231j\274\357\367,\276\374\312(>\036\310\364=\321\035\356=\004\356\013=\023\320N\276G}9\276 \234\037>\367\307\003;9A\016\276\312\305$\276\305\210(>\302YT\276\364S\005>e\010\033>\312L\365=xL\353\275\232\231\023\276U\326\031\276[h\300\275\347b\361=U\3234\276a\tX\276\205H\244\275\336\356\'>\356!@\276\177\331\332<\343x\341\275\310z\013\276\361\357.>\000\343\002>\235@=\275g*.\276\204\013G\275\265\253\003>\225-\347\273\033j\014>\3131\224\275\321\216`=\313\314V\276\307B\310\274\331N\021\276\360,\253:c\273\367\274\311?\347=\263\354J\276\310\343\251=\264O\256\275\2560\002\276\215Q\022>I\244E>\036\334S\276\343\235\354<L\356T\2763oX>M\250\'\276\314\332<\2765\204\321\275\202\250\030>x\350\264\275\315<\335:\373\023\024\276o\350\002>\306w\014\276)\nH\276\276?\314\275\"\310N\274x\027D\275\237\325\346\275\"\325\000>0\254\214\275\0038\000>\276\316\004\276\231\236\227=\tzW>\252\031\022\275\267FW>\303OC>\262\324N>\n\320)>\201\226\023\276\177#\003>Z2\375\275Y%x\274\267t\346\272\247\276\211\275r\332\030\276\355\322H>\221\353\361=\303\346\345\2755\335\233=\351\222\337=\351\207Y\276\352]\221\275\364\013\223\275rh\301\275\0176B\276\250\013 \276\207\335\227=\357\216\003\274\331\231\205\275c\325c\275\372\266-\276\245\363\216<\r\244R>\027g\325\275\214\254\375\275\335\351[\276?X\004>\312\2039>\005\313G=\267Q!>\267F\004>Mk%>\333E|<\273c\211=\243\214\021\275\207\266\r\276j\350.\276\301`\r>\251\374\214\2743\253\300\2741}\235\275`\251\334\275\261\'\005>Ll\004\276\267\237\026\276\r\302D\276\255\214\314=\031\376Q\275\313\351B\276\355\004\245\275@\217\271\267\301\201\220\275\245\217C>=\373\002>\221\t\004>\2477\017\276\331\362\337=7\003/\276\272N\014>*\360:\276P\356g\274\205\323\023\276\013Q\356\275\375h\346=\330\177\312\275\322\024\355\273~\234T\276\257^\200<\276\014\263<\276\313\354;j\307\242\275\350\307\310\275 \230\241;Q\224L\276=\243\014\276\025e\206<_\210H=D\036b\2754\177\216\274j\327\355=\264\021\027\276\356 \205=\023\244?\276\366{\025\276\331\251s=Cj]\275\007\352\027=\032\240W\274\307\254\244\275\302\374\025>P\276\"=Ml\'>\323\262!\2765&\215\275r\257A\276\340\231\214;\357\344*<\311\233\004>\362>\352\275\322c\300==\007\202\275\246v\224=\313\324u\274\026\022@9\364\330X\276\257r\355\275\334\334\033\276x\310C\2765\221\036>e\307\272=\327\035\320\275\020y\301=w\367\225\274\244\2736\276t7;\2762\266\"\2761\356\022\276\177xH=\216\332\016\276aZ=>n\240T>\277j\225\275cfT\276\247\206\324\275!\2307\276\203\267&\276,\225\357\275\267\003\033\276L\2347\276\221|\022\276\036.\025=\362\241[=\007 4\275\223\n\234=px\221=\357\220\366=c\226\005>\312\2369=\271n\021\276\027\201\353=6E$=x\344\273=T\233B\275@]L>\363\345\013=\214\014.\275J\006\035>\244\345\302\275\352#h=\244\n\351\275\217\366\005\276\260\340\002>\372_\005>\212\375\220\275z\025W\276\270tZ=\207\220\032\276\322\261\207\274!\303T>\233p\306=O_\013>u\315\004\276mD\201=Z\017\003\275|iE\276\220\017\351\275\322\266\017>\325m\312=\367,\n>\031\345\203\275\324\225\356\275\027V\324\275\353\342\036\276\336z5\276\2150\231=\3509:>\255\273Q\276\024\366I\276\024\321\242=\203\323\001\276\253x<>A~1=\377\303(>\316\226\247=\251\331!\2757\004*\276\252\3525=\001]\023\276\365\035\"\275Ad\207=\010\324\325=\3727\004\276\316\206\262=1\320\355\274zl\314=l\225\025\274R\233T\276\204,\030<\273\000\213\275\302\005\224=f\355\250<3\303~\275\266\372\330;\225\352\213;r\346\306\275\373/m=fP\023\276\"$e\275\227\034\273\275\013c-=\323ci\275Q\031>\275\250\253|\275r\266\273\275!\213\272=\320\240>\276\371:.\276\224Z\010=\225\225\311\275\361\027*\275\206\316\r>4bR=\227n\245\275\357\261\037=\356g|\274\265\014\256\275\215\331\370=\264\336\217\275\2647/\275\225\240\036\276\330\357\027\276\003\310\027\276\021\234S;56S\276\276\251\272\2753&j\2750mP>\224\247\2119\007\221\272=\3651U\276\360\300\360\274\363[\235<\036\013\272=\032\205T>\033\000D>.Pz\2730\300\304=\261\202\243\275\266\252\r>\027\311+>\342\"\000>8\233V\276\326)\350\270x\3574\276\366| \275\262\264\003>pg\260<!\030\376<\024\3775\275\353\321F\276\334V\006\276A\267\303=\326\024\034\276\260C\364\275\"\320\334=\375\005\332\275\313rm\275\351c9\276\006\273\036\276_<\227\2758k\243\275\272U@>\030ry\275+\031?<\303\332I\276\337\256\235\275rE\346=b\2425<.\214h\275B\337@>\267<B>\376\305T>?\222\242=\310\261C>"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "K\000\000\000K\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20000000298
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 75
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 150
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 150
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 150
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 150
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
