node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 252
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 252
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\201\341\003\276s\206\037<O\210\300=\210R\331=H\336\357=\205C\241\275W=\267=\275&\352:R\226\217:GH\201<V\r\226\275/\361a=B\377t\275\231\356\375=\216!&\274nP\n\276\n[1=\202\264\354=\375\375\005>\231\027\246<#\221;\275\252\355q\275}\304\243=\037@\202\275E\211\n\275\342[\351<r\260\365\275\276A\326\275\371\360\014>5\037\305\275\007\325\003\276k\315\264\275k\341\216<\304(\226=\347\014\376=~\230\216\274N\357.\275\"Ow\274!\360[=\025\345\314\275d~\035\275,\006\306=\273a_\273\244\342\307=\"\227\343<k\264g=\006F\000\276\317\210N\275\271c\203\273j\211@<\253\301\016\276Xcy\275\313\310\236\275\273\371\246\275\347\333\204\275(\265\343\275\3371\005\275\211\313\361\274\324p\n=\201\223\211\275\353\261\336=c\200\331\275;\365\202<M\252\t\276\205T\t\276\356\305~=\000\333\004>03\322=\355V\244=R\277\002>v\312\200\275xZ\224\275W\271_\275f\216\266=\364\332\027=\214t\202\275\300*\302<\035\006\306<\342tQ\275\035G\212\275\0141U\273\233\300\201\275\020\204}=\224\357H<\362\363r=\271\231\026\275\312 U=\344\322\347<\345\357|\275\022\315\265<N5\341=p\316\306=\254\242[\274\374\373\223=\233y\272=\222\200\010\276!\366\014\274\250\260$\275=]\211=\010o\n\276\031\227\r>\343K@\275\017m\343\274#p\216=\242\253\260\275GZ\253\275\212e\203\275\"+\243\275\355,\014<\310r\177\274\237\222\363=S9#=PK\240\275#\332\r>>q\357\275\362\311\344\275\013\330\204\275\007=\017\275\225h\215\275\301C\204\275\253,p=\202j\007\276\023S\205\275\206\030\230=_\342\262\275\366h\254\2751\273\024\275b2==\213\322|\274a\321\351\275w!\374\275\221\005T=h\201\202=\363\205\267<\263\000\264\275Q9\334=U^\217\275b\023\267:\324H\370=\036F\215=\304\310\202\274\337\253\274=\266\331J=M\334x\274\326\216\331=`\307\025\275T\270\210\275\037\231g\275\343\361\232\2751e\325\275>\272\221=u\230\375<\253!\t><r\322\274\260\032\362\275)D\235\274\272\235r\275;\322\221=(\250O=\355\343\224\274\362\340\210=\322e\264=\373N\027=+-,=\"\300\n\275}\373\r\276\334UJ\275\304\264\341=>%\340\275\206\005\t>\335\273\230<s\200M\2752@\000\276C\024\006\275\223\326\240\275\325\376+\275\264\027\201=\316k\357=\276.\367\275\207#\203=\207\277\340=Z@\375=\206\306\266\275K\256\205\275\022\342D<\203\211\260=\271?C\275\r\324\254;\030\202\014\275\331\004\333=F\204a=\344\006\t=\3100\366=\350\364H\274\200\033\017\276\345\352\270=\317\2402=\257\257\037\275\006p\270\275\200N\275=3\001\210=\236\347\274\274>\266\375\275%\217\004\276\364\301(=S#f<:\323\014>k\265F\275=q\326<\212\323\336\275\2106\364<\367b\257\275\010\310A\274\215\253q\275\357Q\313=\032UN;\016\371\201\275\335O\326\274bM\323\275\251_D\275\337\006\264\275\\a\355=\267\3756\274\313\206\270==\246F=\265\212\341\275y\0048\275{\376\313\275M=Z\275\356i\305\275\030\001\017\276\341\275\325\275C\025\306\274\241\272\212\275}\316\201=\273\177a\274%\274\303<\264oT=\216`\242\275\337\356\000>*\306\036=K\035\027<M\2223\274h\177\244\275Y\373\013\275\217\303\215=\352d\202=\351t@=U|\346\275\331\374I\275\376\226e\275\352j\231=_\263\010\275\273\221\r>\313~\201;-\'\332;\033#\322\2756J\314=^[\340=\000$\\<iM\n>\227\302G=\312\326\n>F\370\237=\344\310\320\273V\210!=\236\002\346\275d\306\262\2750\266\267=\344\333i\275*S.\275<|\372\275\320\372R<\353\374\243\274t\323\231\27379\000\276B\266\001=\264\202\244=\024E\001>\322\235\013>y\250\222\275\305\252\000>\317\346\226\275\0216z\274\337\243.\274\242U?=|X\325<\360\031\334\273\264\213\037=rU\321=\034`\014\275\261Y\201\275\004\302\013>\324k^=\210\271c=\021\014\337=\\[\377\275%2h<\315\333\201=\345E\243<\373\351\003\276\213>\343\273\235\315\035<\317\000\324=\212\341\254\275\216\'\241\275O2\205\275\023O\320=l\366\200=X\334\007>\003\227\310=\360\335\225\275\367$\246\274\033s=\275\376k\223\275\270\027\311=\333\303\276\275ca\211=#E\321=^\256\221\275\2648\215\275$\264\323=\005W\210<U]\276\274\216[S\275\250R\t\276\016\025L\272v\200(\275\312.\250\275\256\245\007>\226\212\202=,\025I<\266\353\371\275\335H\235=\\\314\247\275\237\330W\274K\320\330<&-\230\275!\207\234=6\375\200=\226\353K\275\300?\356\275\022!\225=\021\024\343\275\216\r\360<;\022\275=\214p\207=\346V\201\275\202\r\250;)\353\314=\177\255\300;iG\372<\271B\352\275\3515\r\276M\352\r\276\017\0263\275\205q\233\275\340\367\240\275\374A\356\274\272\347\275=ZI\201=\274\342\204:\367\211\265=\220Z\316\273lO\322\275p\260\377\275O\215\005= \"\360\275\212\024\253=E\023\357\274\331;\000\275c\313\202=\312@\254=\010U\256=\243_\313<\336.\275=\314\345\231=\260\322\300\275\322\004\177\275b}\370\274\262@h\273\365\274\207=\362\004\355\275\235,\363=\276\333\332=V\354\330\275o\022\314\274\205\217\r\276\3644J9\2364\332=\206\205\245\275m\025.\274\325>8=\004\016f\275B\034\216;U\202\250\275\360\307\343\275$D\325=\253\323\303\275\376\331\004=\326S\010\276\037\373\371\275\314\231\327=c~\367=\321\022\371\2752EW=\203G\006>\257\377\204\275q\260\250=\306C\371<\237\237\357=Ce\354=\330\307\271=\256\262\007\276\353xu\274\227\213<=\010\337\000\276\272\020\236=Ju`=J\270\227<(\215+\275\301\236\354\275\232\256\270=\254C\014=\035\260\235=V`\322=\235*\315=<\000\355\275\343]1=\260\374\261\273E\343d\275\356_\364;\337\345\331=NZ\366\275\350\231\360=\305<\"=\255\273\005\276*\241\277<t^\214=Qq\255=\274\213\031\275\206\023\343=vR\323\274\210\010\244\275\340T\022\275\241!9=\251\374\313\275\243\321R=\"z\005\275qh\334\275xK\373\275|sJ=k&\366\274\234\014\326\273iw3\274\t\320P\273f\216v<\250\226\004>\302f\260=j\313\241\275_\346Y=\020x<\275\311m\255\274~\345\014=S\377Q\274m\035\000>\243!\010>W\314\354\275\366$\034=\347=\t>e\266\317\275\365\203\000\2765\211N=fDn=\207\262\354\273\226\020N<r\307\264<\247?Q\274\250&\256=\n\222\242\275Dt \275\340\365\236=H\023l\275^\035\356=\177\327\010>n\355\233\274D\004\363=\333\202\002>2\312\036\275\254\032!\274\t\330\277\275F`-\275\037\245\367\275F\253\245\275\262\223\005\276+\327\005>\303\237&\275\244\274\233\275s\211\344\274\033\000\311=\223\211H\275Z\315\300=lF*\275\244\001\235\275\024\222$=\033\014k=\335L <\r\336\\\273\272\377\272=H_\347\275&\342\255\275i\031\000>\206\330\300=\321\222%=\034\347\207\275\004\033\363\275\223\300\316\275\004\034\307<\364Gg=U\361\232\275\265\216\243\275\271\001\344\274Y\333\353=o\004\215=Z;.\2759$\264=\3227\367=\242\035\340=F>[\275`?=\275\334g\236<\021R\303\274\264\016\006>\022\033=\273\377%\314=\236\021\261= F\016\276\210\343\t>\343?\316=g@\340=%\016\211=\275\346H\275\211\347\213<\277\335\224\275\203\274\343=C=!\275\370=\246\275\255\247,\275\362mf\275b\246\342\275%\200\377\275\177\375\346=\333=#\275\006\236\004>\331\253\362\274\215\273\014>\216l{\275S\002T\275\272:\t>Xc\315=\340\370\\\275Mp\362=\000\315\220=|\355%=\024\202\360\275}\005\315\275\013w.=\220\013\n\276\322\233\003>\\\375\272\274\233\014=<\2442\322\274\033\241\001\276\315\365\224=[\201\306\274\\\023\255=\362\265V=~y\n\276\314\207\321\274\027\026\300\274\230\306\211<\021Y\240=\351\354\340\275\252\300\314<\212`\005>\233\311\273\275\215\017\337<\276\240\253=.,\216=\335\312x=\013b\227=\213g\301<\273\365\227=\261[\006>\271\225I\275\033\274\217=\327\004\367=fc\243\274{\002\013\276\210c\370\275e8\013\276\030\346U\275\302\003\254\272\310\016R=\333\273\354\274^\314z\275\020\342\314=\252\010[\275|,\341=\271\355M<\t\024\343=\035\013\216=\017)\016>zW\240=\022\214\221\275.\024m<8\356\362\275)\337T\275\212C\002\275\323\032{\275\r\261\372=\202\374\035<\250\302\364=\000\035\013>\360\334\203=\376\324\016>\003QU\275\264@q\275\025\321\313=5x\311\275a\036\272=_\301\206\275[\261\217=*wz;H.\225=\030\020\005>!\326\000\276y\214\276<\013\211\317<\323<\024\273\367\312\270=\237F\271=w\037G\275k\343\376\275?(\273<\300\217\355\275M]\267\274\013\222\005\276\213\024f;\346\346M<\316N\256<\036\226\014\276\361\010\377;F^\227=\252\244m\275%\247\013\275\022\034\362<\217\022\035\275jt\356=\207\313\010\274\303\221\244=\252\322\341=\306\231\004=x\243Y<NE\t>0\005\222\275>\315\003>\216\202\273=\322\237\237\275\253O\010\276\372H\244=55\000>\000/\374=J\251\000>\237\232\350=\224\301\276<\013\3169=\313\260\217=\221\203\215\273\346D\301\275K\211\265<HC.=\274\370\346=o\017}=\274l\201=\200\004\010\276\r\315\235\275s)W\275S\004\316\275YY\313\275\243\000\320=\304r\007>\002:\356\275\262\217\244\275^m\002\276/\323\314=JZ\305=\237\220\201\275\032y\306<\335\306\351\275B\004\016>\302\274\372=\rr\221;\221\362\237\275\350*\375=\005\217\'\275m\320\244\275\306\006\336\275\332\236\r>\026\351\216=\342\366\273<;\021\360=\345\2476<e\362e\275 ^\202\275)v\332\275I\253\036\273 \021\254;\317Z\257;\227\3419\273q\244N=\342\376\241\2758\033\210<\237\002k\275x7\317=\256$\245\275n\256\200=\023\235\313\275L\331\030=\244\222\r<j9!\275\243V\334=X\2010\275\357^\231=\350}\001\275\"\374\225=W^\310\275p=\202\275\264?\246\275\244\210\002>\216&M=\254>\304=\232=\236=\340\202\224=\036\256H\274\270g\241\275\364\321\320\275pr\325=5\207*\2724\230\316\275\0170\003>\3449\337\275\2749c\275\211@\202<\2045\252\275y\214\260=\3327\375\275\003C\255=\377\n\307\275C\250\000>\177\346 \274\324\002b=\3167\023\275\242\257\026\274[\030J\275\220K:=\274\256\n\275\267 \016\276\250v\266;\246\261\217\275eN\003\276)v\354=\210|\277=j\336T\275(\255\013>\355\247P\275\225Z\260=\301`\214=\366k;\275\001\237\230=A+\000>.\177\324=\210\247\375;j\266\231\275\330\332a\275q|&=\315\261\344=\275\335\332=z\345\006=N\354\303\2759\220\311=\200\230\332=\226Q\352:\001q8<\'\010\300=\243.\254=\322U\353<\002\267\353\273V\032\245\275L\007\230=\372Eh=]`4\275\033\343\'=\225w\222\275\2437\234=\255\034\252=Y>\213\275\254\004\241=\202\007\325\274)\305\007\275&\317\"\275=\354\213\275\301:\224\275\030\355A\275\332k\241<\275m0\274\234\324\212\273-\366\266=\357\242\005\276\251\032\003\276\252u*<7%\345<\225;\257\275kC\233\275\207\306Q\2752\310\023;T\'\240:\252\003\344\275\256\207y\275\177_\244\275\245-\226=\253u\032=\202&\331=\033M)\274\013lj=\340\320P=O\373\014>\004\226\301=\250\303\244=\337\025M=+{\t>\335U\305<!U\375=v\022,=\317w\242=\250\267\t\276\010\300\255;O>&=\224\035\305=\226\242\352\275\206x\344\275\345\001@<\253k\220=\345\360\374=~\347\224\275\004\027\363\275\230\322\224=`\241\362=\005\252\333\274[\366<\274\204\263\t>P\256\214<\007\232\225\275\205z\325\275t\355V:m,\351=\377&\266=\331\035\t>+\236\272\275\2654Y=4\344\r>\327\337\377;h\203\005>\034\205\223\275\204\005\033\275\210Q\375\275\213tB\274\257\245\361\274\345d\326=\t\031K=\2143\000\276\204,\320\275O\245I=\',\300=#Z\214=\307\335\215\275\312\256\225\275I\004\313=\3467\221\275\332\327\260=\267\376\241\273\rf\317=\343\267h=\023\334\006=\007\r\n<\237\214\266\275\035a\310=\377\231\273\275L\177X\275\226\264!<\240\325\345\275\300\372\262<l\t\307=e\300\332<TB\267\275\205\306\"=@\246\255=\203\202\004>\"c\365\275T\027\234\275\t!\214\275s1A=d=r\275z\225\360<b\372\220<X\266\236\275U\003\200\275\251\353\321<\3063\010\276\003\360\362\274i\023\353=\235\350\307=\363}\270\273\361c\251=\330K\010>\277zP\275\225\033\014>\252r\000>\311\000\205<;\251\303\275\364\372\264=\0268\004\276p\265\324=\345l\336=\356<\321=\203_\340\275\262O\247=\233\025\366\275\215I\024=\347b\276=qH\266\275\300P\204\275\005\256\233=Ns\014\275+\243$=5^\244=\331\262^\275\212\314\303=\363\262,=\277\324\353\275\214\241\305\275(\010\312\275G\nm\275lv\311=\010\212\261<\3504\n\276\2578\007\274K\022\022\274G\242\000\2754}\273\275\245\222\222\274*r\330\275\024\334\000>\216\223\005\276E\236\266=2\236\240=\224+#\275\206\345F\274SZ\274=\330\361~=\277R;=W\353\205\275\007\2567\275\030\314\002=\0103\377\275[}\307=m\311Z=\265Mx\275\017$\021\274\256\021\365\272H\277;\275\266\227\262<\365\360\376\275k\325\244=\267\233a=\333T@\275\213\252\304\273\200\333\322=\217\274\r\276\030\024\222=\360vf<$\355\326\274\304\267\247\273A>M<c\325\210\2748\005\005>Pf\006>w\362\355\274\360\254\300=\375\245\352=\253Ml\275\211\332@<\020\255\r<\254#\361=v\224\362=j\277!\274\311\346\375\275\262\366\353=~[X\275Z\361\373\275\237t\377=\351\201\210\275\212\307\354=\002\245\013\276\204\272\300\275\276\364\000>f\364\321<\364?]\274\312{\000=\004H\200\274\033\253\301\275\027^\205=\020\360\373=\005\362\006>\316\356\264<48J=@=\013>\356\321H\274\234\2460\273\305b\222=^\323\315\275TlZ\275\242)\265\275\217\302\250\275\205\024\007=U6I\275E\010a\274\277\252\265=\262\242\317\275\301\255\007\276n\246\000\276\262~\302\275M\001\274\274\344@\316=\260\201=\275\342\351\261\275\373\020\311<97\271<\304\240\367\275\034m\230=\210w\203\274\254\222\327\275\211\217\007\276\370n\035\275\222\271\357=\243\222\036=\016o\017\275w\310\273=e\355\207=\322r\314=\026\016\272\275\270\256K=\272\377\240\275I\266\331\275\030=\327=T\207\000\276\311Z^=\013\026\002>\230\356\277\274\373\223\t\276\'\024\260=\277+\271\275F6D\273\035\022\311<\205\267\244\275{\363p\275\202\025\222\275\035\034\344\273\306\233,=B2-=M_\n>\243\005\347\273\233\257\301\274\210\021\300:\342\222\304\275u\035\225=Y\344\227\274\221\010J=\341\253e=h\005\264=\365m\005>z\315}\2740\327H=\350zd=\223\266\300\275\002\314d\274\027\335\000\275\307%\336=5+\376\275\270\343u<\302\002\334\274Q\324)\274!o\203\275Q-\023=\371!\014\276\222\243%=>\262\203<b\226\367\274,\273\004=\377\240\210\273\354h\277\275\003\007\355\274\233O\213<\221\333\337\275\242 \203\274\016\000\227\275aC\314=\367PO\275\177&<=\334e\264<\333]K=S\260\373=\311\266\263=\355\003\366=\300Q\221\2753*\242=\214%\005\276\273\006\230\275\017c\340=\215x\365\275\033\344\344\275\250\350\n\276\351\222\250\275\0058}=,\372\273\275Vk\010\276\343,\316\275x2\314\275\004p\262<\312\274\220=\221)\216<#\364\356=\275\226\377\274g\257\331\275\207\025Y\275p+\247\275\265\334\340=9\\\356\275\020\0032=\213\n\0009b\257\376\275\261%\261=\037\257v\275\3217\275=\243\310\265\275]C\355\274\207}\217=\010\247g\275\201\230\t=\217\221s<I\331\350;\313\256\231\275\037c\263\275\332\234\302=\234\362\202=\001\330x=\300\025\203=3\255\217\274\333\n\257\275\335v\315\275\362\357\211=\233\213\231\275\372\031\213=4\371\302\275\367\322\025=\226\331\243;DcA=v@P=\327\370\277\275\311\320\275\275\336;\357=\222\035\326=\256\276\006\276\315i\340\273q\363\351=\210e\003\276\004\013/\275c\227\355\275\013\340\334<y@\010\276\214\276\006>\256\300\251=\257x\004\276\246\0047\275[\247\r> \275\301=X\250\340=DD\003\276\024\346\006>U\206\241=?\006\316\275|\303\202\275\314N\304\275Oo\002\276\326\247\371\275~\232\323=\261\371\325=\236\234\275<\033P\013\276\\8\310=VJ_=\014!\231<\213\3601\272\363r\362\275\313B\372\275NZ\242\275\246\204h=\317\302\362\275a\270\272=,\206\006>\346\200_\275\217\004\243=\332\243\016>\244\261\252=\343\325\325\275\351\342a\275\n\334\207\275\337!\034=d\031\017\274\370*\370<\000q\371\2754K8;\353g\205\275\200\002O\275\t6\377=v0\227<\210\333\246\275\300h\231\274BU\264=%\375{=\363\222\005\276\262\370\361<\313\345\002\276\311\000\252<o3\356\275\334\305j=\2662\253\275\3607\035=\237\336%=\364\252\016>\367>\026=e\215\310=?\005\t>\347\327\203=\335\264Y=\016\350\320=p\217\013\276\023[\274\275\r\036\t>x\224\023\275j\014\304=\2049\321<\266m?=$\020\210\275\231\266\274\274\\\022\264\275h\024\341=0\023\343=\270\363\300<\r\3207<\244\226\265\272\007@Z=\271\336\265<\034\376\005;\317R\247=\346]\356=\306\000\250\275(\355\334\275\021\313\002\276\023\206==\246I(\275\371:\031;i\223\305\275\257\001M<\217\224\342=\202\266x=\221vr<\036\336\037=\254\351\n>\010\340\366=\263\2020\2758\236\032=\265\226M<\364\306\256=\352|\266\274\360\322\376\275\214\201\275\274;M\005\276\266\317\016\276\330[\245:\330\354\033=\007\017\001=\235n\321\274\354\347\014\276oT\333=\333Oe=&H\243\275FQ\344=f\247\003>c;\345\275\276\004\t>\366\006\326=\005{\007\276\013\236Y\274\241)\372<R\263\002>\242?\354=\263\004M=\336\020#\275t\371\370=\235\007\307\274M<4\273\246\362\217=l\371\322\275\336z\006>W\223\347=\315\374R\275\317\246\271\275\002U\031\273\257\342+\275O\030&=\013\002\233\275\037\262\361<\342\010(\275+\211-;\325|\t>\352\250\301=qT\271\275\327\365\216<\225y\344\274\376qv\275\201\302\327\275\366H\027=\227\244\274=U\253\316\275\365\224\363\275\205g\351=\031(\204=\221\024\204\2746\214\357=7.\343\275\234\351\270<\363\t\226\2742F\272=\0059z=\217J\001\276\227\260Y\275\335q\237=y+\207\273T\261\301=\327\344\343=\307|\331\274Js\t\276\304\354\t>\200\271\025\275\373\231\230=\376\360\272\275\326\375\004>^\371\000>\3704n=\276@\230\275Mip=;\230!\275\361/\200\275\317\221\376<l\010\016\274hq0\275-\027\365=\360\027]\275\315w-=nf\331=\177\'\325\273\177N\357\274\2207J\273\274\022\204\273\342\306\340=\212m\t\276\003\367\016\275M8\2227\356\'\361\275!\230\260\275\375\221\177\275A\227\206=W\274\376\275\315\250\222\275{\200\010>\220J0\275e\217\377\275\362D\t\276\243\253\332\274\177\243\007>\235\275\241=F\024\254\274\201P\022\274T\320\006>\263\331\267=\022p\373<\267\341\001\276+\321\201=\3176\222<6+\214=\002ii\275\032\234\251\275\331[\014\2767\016\230\275g\225!\275\311\315`\273\375\317\267\275\005V\372\275\361\031\320\275\3424\202\275\026*\217=\017@$\275\304\034j=a\262\014\276\220=|=n)\277=\354\367\301;O\035\264\273eV8=\324.c\274\276}\234\274\364S\223\275\336\270g;\245\271L\275\2767\010>\033\336\340\274\214W\n\276G\376\257<d\004\250=\263\244m\2746H\267=]K\210<\272Cl=\221K4=\240\233\300<\305C\034\275\026s\233=\334\277\t>\316\336\324\275b\303\003>\r\247\332=ta\360\2759|\322=\235=\206=-T\220\275p\2651\2742\321\010\2753\321\202;2k\210<e\016\016\275\014\205\334\275)\200\205=\003\270\325=be\223=@\231\244\275B\312\203\275\212\300r\275\235=\016\275\276\033f\275\221\027\376\274\262&6\275}m\013\276]k\207\274\332D\376\275E\363\373\274\250\204\006>\035\003\206\274\211\353\n=/\261m\274S\253\313=v\265\275\275\336\037\304=\2478\213\275\275\004\327<\200\240\311\275G<\222=\321\317\200=2\202\242=\341\222S\275\262\377\335=\253s\201=\242\352\366\275\205i\307\275M\331\257=O\005\364={\\\001>\204\254q;\215X\\=O\327\303<\376\221\331=r\251\007\276\317T\320=\234\357\377\275\377\002\332\275t\361\244\274\357YJ\275\215i\242=\035\016\013>\036\370\340=\351\205.\275\351\201\024\275\334\351)\275\375\257V=y8\360\275\325\273\220=\372\245\302\275\314?=\275\367\307y=\254\266\203\274\365\236\222\275\310\334\323\274\200\371\322\275\226\307\300=\351)\200=\356}\257\275Z\326\244=O\010\013=$e\314\274\025B8\275\306\377&=\271G\010>\376\330(=3(\326<\200e\007>\367\214\304\275tt\200=\363\237\272\273\035R\203\275\014\327\002>\233\227\313=\201\355\343\275\024\221\241<y\261\301\275yw\033\275x\335\244\275\021\004\337\275,\217\211\274\232a\346\274|\317i=\2369\353\275\225\232U\275TV\007>\177.\t\276\3140\214=\177P3\275\005QM:;\030\242\2755w\023\274\241\215r\275\300\207\221\275D\000\313=\275\312\032\274\010\322\330=a\r\315=\023\230\201\274.3/=\331;\200=\177@\271<\2275\225\275GqZ\275\345Tl\273?i\003>Pc\273\273\223\316\371\275\261\315\347<\322_\262\2751\335\310=F\010U\275f\371\207=\262\324\322\275\366,\236=\217\n\275\275\272)!\274\3027\000\276\243\031\235\275h(G<W%\007>\311\352\005\276\321s\336=\214\0043\275\016:\016>\245i\002\274\2310\256\275\223}\000\276\334~\271\274\260,\n\276\354|\312\275\244;\024<\270s-=\002\343\016>=Y\007\276\354\356\205=\004r\231\275\017T[=\217I\371=\216\370\010>\031sB=$6f\275kt\357=\016\2374\275@\234\237=\231)\240\273BJ\234\275\3231\037\275\177J\367=\263\3224;\251\262\036=\326:\000\276\n$\250\274<[\346\275\352v\342=\357\275\030=p\346\355=\n\3403\275\357\034\244=Y\217\334\275\321\375\216<\224D\253\275\205Uf=\376\342\253\275\334\233f<V\242\353\273\273I\354\275&\267\254\275\302A\014=\317\254\020\275\021n\003>\030\327\354=\007\367\003=j\310(\275e\217S=\375{\n>d\010\322\275-\2367<8{\207;/\000\377=p?\205=\314#\270=X\367}:\307~\272\275\023\243q=I\355\007>\353xB=Av\303=#\3172\275=;\336\275|\235*=,\030\257=\322\310\276\275\366\356\316=6\037\230\275d\263\231:G\337l=41\000\275\256\316:=O.\221\275\356\221\332=\350\217D\275\025\373\332\274L\026\237\275\233{\266=\276[]\272&\355\241\2750\022\224=\\\331\254\273\276y\346\273bqj<\226\275\357\275\272\2705\275\363\255\013\275e,\235=\351\276\202=\204w\r\276\006\360\333\275Fq\215;\227N\362=\005\\\314\275\247\236\316\274\324z\013>6\000:=\2325\r\276\254\240V=\313\315j\275\022U)=\377\177\000>\2369Y=\351\331\014\276\343\201\354\275\335\315\276\275t]\251\275\252\004e=:\325\235\275\337\271\365\274K\030\241\275r\231\013\276>\002\371;6\027\236<\263\337p\272\261H\324=\0325\222=\311:\261=2\017\213\274f\231\334=+8\031=\007\301\006>52\376=\023\237\203;H\026\241=\333\323\001\274\271I\005\2766\027\227\275\343^\300\275\303/\333\275\357\200\244=\000\3113\275\305\372\246\275\307\220A\274\300\300q\275\246\342t\275\233t\270=V\305b=\367.\000\276\'\251\204\275c\320\007>;\206\267=\355\2033=SPq\275\237\221(\275+\263\374=\272\\\343\275.y\232=y\376\236\275\257{(<\375P+\275\333\237\000\275\262\315><\314\202\356\275\212o\251\275\316\265\230=\323\363\006\276\223\314\363=T\302\366=\346\241\277\2751\213%=\035\215\250=v\211\371<9[\305:=T\253<\234\300\245\275&\007\020<,\033g=&\315\365=s\2407\275\222\367\230=\331\224m\275\337\365\316=\271\'Q\275N\257\002\276\373\226\211=Y\363\333\275U\253\001\276\304\212\276\274(U\007\275\014\361\304\274`D\307=\215\3648=3\246\254<:\216\261=\032d\354=\210&f\2750\211T=\271\371\356\275\031#0;\324F/;\003\266\316=\357\270\352\275\032g\216\274\204\216\311<\016\212\252\275\017n\244=\031\026\266\275]\266\001>D9\005>\212\325J;\033\246\326=\304\034\373\275\365\312\325\275\253s\016>\000Pw\275\262\r\234\275\003\021\317=\233\221\207=7\252\014>\037\023\257<\014cE=(\2059\275\n\265\010>\210gv\274\007\345\246=V\"\243\275s\327A\275\013\356D=\345\377\226\275\025\343\263=O\265\372=\316\370\364=\004\210\000\276\267\n\311=:\251\263\275\250\331\327\274\224Qk\275+\344j\274(\265\034=b\261\207\275\336\004\275=P\311\202;\343\266x\275\315\001\374<\237?\215\275\213m\344\275\374@\010>\341\217\312\274\240\316\306=\177\340\247<\255\232\374\275`\236\223\275\245I\300=\225\376\007>\374\\\200<\254\222\247\275\324\346\037=Rp\245\275\373U\241<ba[<\351${\2744\t\225=K\324\240=\"\036\032\275X\377s\275\376\306\037=9;\201\275\375\227\326\275a\352 =\210^\373=\303@*;t\260\013\276lC9\275OQ\350=h\243\232=\360\373\343\275\323\263\007\276Z^ =\300\202\014=oO\371=K\364\303\275\231Er\275)\032\016=j\273\006>\222\245\207=Z\324\261\274\245\3136=\203~\366\274-L\213\275\203\255\227\275\373\253\010\2761Y\017<\342\200\375=\346\307\274=\321s\t>NF\002\276D\324\345\275\337\263\370<7\251\273\274v$\022\275\322\317\205=\236+\335=}\267\004\276\223!\270\275@\206M=\230\332\312\275\321\0028\275\371\317\341=\272\020\315\275\227\374>\275\200\361s=\202\001\376=q\352\216=|\372\006>\255\323\240\274u\257\261=\212\350\023={\243\364=\330\224\225<\342\355\256<\255\221\311<\301\216\212\275\336\020\t>\207\347\'\274np`=\205&\330\274\234?\016>q\021\310\275ZRO\274\375\334\321\274\376\336\251<#\370\341=\307\n\005>\370\001\256\275\033#\177=y\302\t\276\300S\311=\024\037\224\274$\324\006>\013\237\334\275\232#\244\275\034\360\206=\303\371\240\274\354J\252\274\315\345\250\275\221]\221\275}\316\322\274\322\251\264=)kw\275\214\014\360<9\357<\274^\244\232=I(\345\275\202\t\003\275@\367\260=\177\352\247<+\313\236\275o\346\332\275\364\307\306\2742\232\000\276\nz\234<\315\226\332\274\010\377\003=\310\005\267\275\273\205(\275`\027v\275d\252\247\275\022M\253=\031\324*=\335\234\t\274\375\346\001<\275\237\t>\"\273P<}$\026=\327>:=\327\177\306=\245z\316=$eN=\335:\213:\275\003\013\276\215IU;\024\003\221=\032\327H=\206\317\016\276\003\367~\2739\320\320=\257b\330=\221\347\372=<o\340=\021e\202\275\233\332\315\275\357\202\272\275\214\351\225\275SH\347\275\251Y\212=Z\370\360=n\237`=\263\361\351\275\003\332\014>y\362\342=-\242\n\276\323?\302<\010\251\210\274\376\006\374\2751\016\242=\"\264l\275H*\347\275\001\003x\274\375\323z\275pA\347=L\326\365\275\332G\275\275N\244\241\275&\027\017\276\366Z\027\274\336A\272=T\310\374=\3155\277=\362\004F\275CF\342\274T\224\006>\245\017\240\275\217A\017\273m\270\261\275\325J\007\276\345aA=.K\341=\203\374\n\272h\244\321=\2442*\274\376\217\014\275o\315\216=d\317\024=\311~\305\275\035R9=\316T\274\275\nY\376=\022Z\306\275\226\377\316=\361\344\035\275\250X\026=\020K\301<eUb\275\020f\007\276\373\243\355\275\034\263\317<\001&\334\275\023\343\262=\314\020n\274\3330\013>r\226 \275\207L\212\275#\234\375=z]=\2739\340\217;7\344\352=(\261.\275\364\002\004>*\274k\275\006\263R\2757\234\010\276\032\007\210<\272\365`\275\326<\342\275\247\220\n\276\353\324\265\275m\232\205=\270\356\032\274\340d\001>\226\225p\275\243(\326\274E\307\234=\017\220C<\361\020\004\276\206\2765=\324Z\"\272u\025\260<\2124\013\275\316\213L=\215\324\003\276\266\2154\275%\'~=y\317\014=\221\246\344=U\016\336\275p\213\311\275H\246\244\275\207M\212=\0106\256=\357\340\326<\t\212\336\2751\330\314=\344\240\264=\270s\351\274\321\264\323=\226\026\222\275\251\332;=\251\022\001\276\274\236\202\274c4U;@]\307\272V\r\r>w0.\2759\320\013>N\016\365\273\r\260\025=\037\236`\275u\222\223\275F\330\016\275\321C$=\000\032\375\275\303\255\367=\334\241%\275*\206\013\276\310\306\374=X/\313\275\344\000\242;\230\226\t\275\222\000_=\264\211\007\276\323l\323;^c\243\275\370j\227=\203o\003\276\2145\360\275\264 \017\2751\236\225=r\2325;z&\307=\025r\200=\215\215\006\276\nu\375\275\236\332\006<\027\017K<\223\001\021=\3632=\275z\365n;\233\346m=\254.>\275l\021\004\276\245\035\221\275\346J\232=1\257\274=\2473\254=\364d\315=\260=\237=:\201\331\275AwE\275\374a\210\275\260B\237\275\231\251\014>O\211\260=K>\223\275\251\230\270\275B\250m=d\300\252=<2\365\275\356\262\351\274\361%\376=I\022\236\275\331R\013\276h\203\007\276\231\231\200\2747\243\347\275m;!=\242\250\257=\253+\312\275\245\321(<\254\370\203\275\210\356\373=!e;=\305\001\204\274%\315\224\275\201\200\006\276dg\212\275V\215\014>\027\265\016\276\327O\367=P\371\343=bi\314\275r\\\235=\'\177\236\275 p\324\275Tf<\275\267;\037\275\3400?\275X>\222\275\342an=\267\013#=\227_!\275L\205\347=\265\241\021\275\324\355;\275\333\352\334\275\305\313\211=\243K\373\275\330\\d= \006\335<\006t\336<\327\274\000=\305\204\316\274\242}\250=?\037z=\242\030\210\275n\322\212=\"\236|\275\311\275\361\274\000p\356=\341`\307\275P./\275Fkp\273I\216\256=\273\314\246=\365\364\276=\016\212\334\274\001V\323\274,\374\362\274SH8=\213^\254=\311\251\244=\r\260$\2759\253\205=G\221?;\344\273\324\275e\214\r\276o\036\300<%\010{<;\020s\275N{\007>\217\036\225\275\315qd\275*\203\355=~\224\372=\325g\010\276\266\373\206\275\336/\210=\307\177\010;\324\030\247<\253\270\310\275\333\213\215\275\020\325\273\275\2512\344<\013\'\t>=\332\264\275\275\03627\264b\010\275\322\r\232=\222\274\275<\245=\263\275\327\320\276=\024F\261\275&\232h=\003<I=\027\007\307:\306S\324\275\342\265\342=\363\300\265<.\304\313\275\233f-=kMz=\340~\026=7\240\014>\275v/\273k \000\276\243 \313\274\347\373\276<\0206\262\275*\262\324\275j\031\010\276\271T6=B\312H\272Sy\271=[.\217\275\213\2366=\357\267\365=\226W\350<\327pJ=}\352\247\274N\233\312=\232r\027=\031\305\222=T \265\275G\023G\2752i\004\276\322\241\326\274Pz\346==\260\373=e\217\261=\354\370\345\275mY2=\306\355\002>\032\355\253=\264\020\302\275aQ\242\275\302\313\206\275\032tO\275K.\264=\214\315\006>\237\370\320=\326\217\200<\355\374\207\275\2317z\274j\225j\275=x\347=Hd`<\021\245\332\275\363\023\332\275\375\235\322=\367\t\207=<\3754=\375J6=f\341\361\275\263\205\335\275.\361\366\275O:\010\276uh\236\275\225\244\004\276\247\005\351=\351>\253=-\016\262\274\\\236\311=\017\313\351\275\363\323\326=-\362P=T\244-\275Y\277\305\275>\036\347<\313\330\025\275\231\214\002>P0!\275\344\316\335\275\324\330\n\276\205\022V=\344\253\020<\247\234\263=_\025\342\275\211\253\255=G\377\253\275X,\265\275?\236\217\275}\216%\275\3561\201\275^\320\254<Sf\326\275\331G\336\275\344\r\017\276\030\331\001\276I\256\220\275A\304\362=\353X\177\2749]\363=\372\001\021=\020\367\013\276\323\t\340:\002z\t\276\224\025\306\275II{=\364%\013=\205qI;\256\363\364=L`\257\275\245\223\331<r\273K\275\350%}<k\262\017\275o\225\207;Y\265\224=\365M\355\275Uv\346<\214q\313=\254\246\304=\332\214s\274\331\224X\274`(<=\304\317\005>%\n\314<\235\"\262\275vG\";\n\204\210<\375Y\325\275\274\360%\275Z\227\376\275\t\336\t=\371T\232\275?\216\t=5\276\360=\217&\342<\364\210\352=\033\375.=\265\304F\275rx\240\275\261\t\320\275!\316\326=\021\026\'\275p?\306\275\211\003K=k~\356=\t\023L\275\314\341\334=\2363G\275\013R\334\274$\303\201=\277\305\225=\257\324\267\275\"\022\205=C\014\301\275\316\330{=\034\027!\273\177n\320;\351\337\325=\307\272\177=\204\364\005>\271\033\352\275&\344\003\276\334\320\336\274\214xS=\2456s\2754<\310\273\217\324\316\275alP=\227n\276=\220\024\210<\307\325\315\275\351\226\234\2753<\005\276\256\363k\275\022_\307\275\330\230\007>Q\027\321=\003T\245=\243\335\310=x\341\304=\367\211\000>u.\305=\354\355\236\274`\350\222\275\315\365E\275\261x\236\275\262\211f\275\270\351\365\275\216\006\206\274\254Dj\274WAk<\366\265\375\274\361\317\231\275\272\237\001>}\320\332\275\304\351\230=\206\006\357=#M\227\271\242\273\305\274*\251\314\274\007\324\241\274;\200\237\2758\265\300=\005\360H=`p\353\272y\273\313=%O\034<\333\213\250\275\001f\215<\331m\253\275\301\314\022=zU\357\274UN\004\276?\002\321=\304\302\212=\204\3736\275Y\337\361=1N\240=\302\356j==\0226=\007O\334\274\237\254\207\275\253i\016>\206\000\004>\317]\313\275;W\241=\317\003\025\274\003\000\300<\213\317\206\275F\362\311\275E\222\300\275\024be\275CE\030\275\335\007\225\275\246\365\301:a\323\231=\006\222\306<Y\351\376=]\036\007\276V5\000\276\267\255\210\275\257+a=\007\010V=b\267\332\275\325\177Q\274!\"\205\274\303\374\221\275\255\017\000\276 \022\343\273\202\346e=k\023\004>\034\214\200\274y.\202\275\005O\200\275\322\022g\275\200\340\270\275\240\3664;9h\226\274\210\n\343<\300B\371=[n%\275A\276\330\275\024Z\345<^T\255=\377\366\006\276\306:\360<U\233\r>S\344\334\275\353\337\324<)5u\273\373\267\306\275R\253K;\354\265\201<\253\017+\275\375pI=\374\353U<WP\375;\313S\317=\345\344\256=\215\337\255=\331R\237=\266\354\367=\004%?\275\000\355@=\022m\255=\2078p<\033\317\341\275=!,=\216^\323=\013>\324\275\206u\353=C\220\360=\241\250\t=&\272\300<\333\331R\274r\261\264=\375\237\374\274P\\\003\276\262@C\275=y\310<u\313\234\274\232\225\314=\304\322\313\275\252o\"\274\321.\006\276\316Q\356\275\220\366\304\275\007\357\327\273\252S?\275\237\026\230=}\235\005>$P\216\275\000\233\205=Y\204]\275\024\014\377\2757\277\021\275m\020\007\275A\320\202=\246\370\334=\2473\336\275\001pg=\353+\352=q\267\241;[\010U\274\006)\243=`I\313\274c\201\013>y\224\251=\372Ty=\267\247\377:\350_\235=[:\t\275\316^\024<\r\344\373<\025l8\275>c\246\275\032\251\324<\335m\346=)\026\337\275<\037\017\276=\316\365\275\373\263\002>\021?\305\275\337\020\010\276\014\274\t\2765\221\254\275c\234\007\275#\037\007\276#\264\251=\356\003f<\3358E\275\266\237\371\274\236\322\214\273b\037\212\274\022\013\331\274L\277\302\274R\035\0079\360\335B=vB\303=\363=\230\275\372w_=\362f\322\275\236\330H=!a\3419c7\026=4R\340<\221\305\226=s:\312=C\230J=\016\"\213=\247\316\307\275%8\226\275\340\201\204=\n\226\006\275-\365\211=m\003\037\275?\001\001>\204\265\207=D\240\342\275\365!\354=\365\325P<g\221\344<\035\357\033\275\200\353Z=\327\326\004\276>%\004\276jo\202\275\246\310\341\274p\336\314<Ko\342<\022\221\022;\216\242\251\275YT\006>`(e\275.:\331\274\262\303\013>)\375?=H\034\000>\371\202\240;\203\022y=\336\210j<%\204\342\275\223\035\001\2768E\317\275\267\372<\275\254\t\236\275O\215\240\275<e\026=\277\212G\275\2730\356=K\246\234\275\203u\242;O\317\335<\347\252\221<\372\001%\275eu\327<\361\312\301<>\270i\275\366yn\275\266\367\270\275^\353\005=>\030\366\275\3731\025=@C\344\274\205=U=\320\305\310=\210\331j\274g\014\250\275\312\036\361=.\025\203=\314*\020\275\201\315\005>7\005\002>\224\004\216=Z\205\n\276Ee\374=\347=\005>;\332\357\275t\344\232\275\346\234\344<\341\2274<\032\356\177=\304\210\356<\020\364\214=]\243\000\276}y\360\275\251\255\344=A^\n>\262\207\372\272\322\353\316\275\024\350\227\275\177\231\252\275\374>\260\273\232\204\376\275\213\237\310\275\266F\013>\021\203\271=\241\336\367=\311\023J\275\376}\342<\361\261g\274D{\336=]\363\220=\352\314U\275\246L\r<j\235\345=\263\220\367\275|\'\231=\356\253#=\271m\013=5a0\274\267\304\225\275\377]\013>\263WJ=u\237\254\275d\333\314:\373\\\006>\343~I=\246\n\235\275\316u\234\275^\272\016:\204\261\353=\0165W=\255\365J=.z\252\275\304o\267\275`z]=\347\322\230\275\313\375\216=\362\202\316\275X\304a<B`p<\347\203\310\275{\031\001\276V\010y=\222\236\375=\206\223\353\273%\320\320=\270\004\202=\351\214\244\275|\260\342<\263\323\360=q\243\302=c\002\014>v:\356;\324Y\004\276\350_\252\273.\343\004>\016\345\036\274_\320\252=\305\260g\273\243\275\226=\327\322\377=\226\371\224\275\251\367\347=|\253\353=\355E\376\273N\202\353=\320\270\262=\262\365\364\275\254\232\232\275\245\010\305\275\350\334\365\274\203_\263=\347V\367\275\323#\345<\267\022\275=\352\324\241\275Mo\336\275s\3262\275\366\265\361\274\222`\224<\"\'`\275\206\242\351\275\2251\276=Wd\226\274\314\201\305<\014\035\013=d\302\230=h7\304\274ig\270=1\341\256\275\236\246\013\276\251\334\317\275r\001\374=\356\303\361=\272`\304=9\341!\274\363\252\216\275+\255\241=[\263\005\276\205n\367=CN\016\276Q\254\227<\265\242\326=\031P\363=\030Z\365=\014\010\262=\337\312\366=\2274w\275dh\367<\024\232\355<`_\022\275\n&;\275\343\302\241\2753\266\363\275\3155\265\275\n\371\310=\301k\002=-\013\311\275\232 \303\275S\317\307=\342\223\367<\'\321\223=\377T\237\274u\246\217\275s\243\345\275^M\322\275\026Q\227=\335n\250=\215\262\356\275j\036;\275LW\036\275Hh\212=S\r\232<,xb=H\377\267=\310\r\260<\2068\253\275\326\223I\275\376\3176=\227\253\227\273\375F\343\275\303\204\311\275\212|\226\275A\030L\274$\345\203=\345*\002\275\0165\006\275\315\217\235=>\023\373=Y\227,=\227_\376=\017\345\\\274\26528=\372e\361=\272\255\352\275\n\274\371\275\020x\334\275x\374\343\275\201\251\205\274\321\000J=\037\236X\275Q\262\010\275?\361\326\275T>\345;\313\276\344=q\373\247\2759F0=\0052X=IW\200\275\345g\324=/\343\010>\265\245\353\274\007)9\274|E\357\275\240\267\260=\223\241!\275\324\3033=m[\340\275\325>$;\272A\021=`\262\350\275+\252\006\276jg\313=\n\310\266=\374Y\327\275a\374\350\275\037_\230\275\315j]=\0209\003\276\037?\230=\365\245;=\327a\204\274\255p\337\275\247\336*=,L\017\274\264\210\243\275\317D\211=$\270F=w\250\343=2\n\232<\254e\373=0<\204\275q\210\317<\236\017\001>Y\315\004\2756\r\326\274l\241n\274|\264\254\275\306\261\350=\001\003\317\275\'}\005>\222\347P\274\236R|\275\\\332\210=\265q\227\2739\235v\275\'tD=m\220h\275\306}\356\274\375\034V\275\354\335\235\274i\220\313=Q\3063\274\224\265\r>3\335g=]$\005>\254\237\325=4\214\206\274A\347\241=/\361\205;<3\364\275\200R\225=\224W\201=8\376\212\275\264zm=\020(\251<\267\010b=\241\305w=@\316\220<\361\333N=\227\374\225\275\016\331\367\274[\'\343==\222\221\275\252Ds\275\r\221\246\275\263\207\373=\026\244\344=\266\203o=\252h\006>\330\236\356\273YH\352\275,P\330=\357\353\016\276\237\351\255\275\t%\212=k\371\376=\314\321\003\275\343\337\032\275\211\367\253;\316\375\004>\010\203\276\275\"\305\233=\252\263\031=R\271\004>\005\350\013\276\214\210\274\275f*\226\274\206\375\212\2753\370\267=ip\266=mh1<\026F\310\272\316\216F\275\347\262\336;\020\262@\273\372\361\205=*PK=\315\332\312\275\260\203\351\2753\271\307\275\210\'\273=\t\372;=\316TU=\000,\275<\031\351\n\275\337\262k=q}\006\276@\210v=\265]X=\247v\017=\272\244\324=\177\222\224\275|\300\230\275\247\364\003>m*6=\213\005{=\213oO=\354\307\311<y\275\027\275Y\357\203=\224\356\315\275L\002A\275\351\246\260\274\370t\317=\247b\002\276\0166\0018\n\023\340=\247\267=\274\377\364T\274N\253\200\275\230\022\302\275\276\214\241\275+V\274\275\307\302\016=3\261\302=nq\315\274EI\234=\255\021W<\201\013\373\275\n\372\352<\270\302\311\274%\302\274=U\263Y\275\311,\014\275\221\244\263<0\256\262\275\214\321\313\275m\360\n\275\264\316\014\276\237U\251<\213\003\347=\321^\366;\350[V\275/H\216\274X!\301\274v\210\t>y\n\201\275ag\316\274\307\307\t\276\342\234\307\275HS\333\274,\365\323=\000\217\266\275\300s\223<\005I\262\275Y\034\325\274F\214\266=\204\3760\275\244\3006\275\024T);]\375/=V\352\307\275O\024v<\302B\262=\333}9\275N\205\032<\330\250\345=_\201\003>\252Lx=\261\245\355=2\227?\275\366\236\200<?\274\352\2747\231M\275g>\333\275\220R-=\202\344z=\331\260\000\276\371-\213<\337\256\360\275\322\253\372=\302c\002\275\210X\322<d\331s\2757\213\t\276D\034\243<6\370\200\275\223\363\364\275\013b\325=\261\330\253\275\206\254\010\276\356U\374=\220!\374=\333o\235\275\226\023\016\276\261NV=`\003g<t\267\231=\255\233\272\275p\315\312\275\306\257\371<_\354\n>*L\n>3\316\262=\302\205\233\275\201:\242<\260M\212\275\343X\014>\221\351\256=\362\317\356=S\276\226\275\035:\001\276B\274\225=\313\306\210\275\370+\346=5\365\370\275\325r\257\275\204\212K\275i\204E=\344\264\217\275\326r\004\275c\2064<O\203M=L\372\240\275\247:\374;a\335\262=\224\346\322\275\030\371\216\275\010\030\010\276\t\026$;1\237v=\004x\262<\274\206\224\275\022\253\274=\325\232C=\014\345\327\275Q\220\347=\355b\342<\021[\316=\257\331\300\275\211<\242\275D\352=\274\353>\030=\322\022l=\362b\241=\231d\355=i\250\236=Ao\345\274\236\375V<-[O<:\207\205\275\014\237\253=\312\025\014\276t\357@\274\343\222W\272\345>\267=\235q,\275\2075\032\275$*\013\276A\306M\275U}\302\274\255\300\331\275\246m\357\275\002c\010=W\354p=\023\027\241=[\276\255\275\302D{\275\3356\356\275\t\325F=\204N\246=\230\376l\275\263\351\004=)XE\275t\331\371<v\253+<\034\355\216\275\000\213\004>\201)\315<\270q\205=s&\006\276\361\206\202\2758\370\360\275\226\t\362=\373\021Y=\031\234\224=\214C\246<\n\252a=\366q\000>\310\002\031\275\242\2048\275\220\0143=\351\260\373=\246\240\277\275l\346\327<\312\035\341\275\317\033\007\276\3450\366\274\340;\377=\356\216\210=\264\227\204\275\237\033\005=F(5\273\257\376\213<\031\233\230\275\237U\014>\356\367\204=m\202\355=\310\006w\275\301e\274=\002\004\264<\373B\270\275J\0369\275\331\001\357\274^>\330\273\017\227\231\275s)B=3\016\017\276K\251\216=OH\267\274\006\336\323\2754\016\026=<\324\356=\006\016K=[[.=\245):=V\0066=*\037\274<\303\206\323\274\200\006\325=,\313\253=,\355\023\275\346\316\242<Y[\213=\220\035E=\210gv\275]$%\275p\260\252\275\223V-\275\210\256\373\275\025\005\370\275\272]B\274\237\267\366=2\346\003>v\034\370=\025P\335\275\356\232\370=z0!=\362\304\242\275\275\'\356<m\321\301\273\243Hp\273\315;\007=\237\262\237\275\224\\\020=\200z\235\274\302\273\361;\277O?\275}\3659=\255_\r\276GOA=mw\246<k\227\035\275X\361h<\\\221\204=0}\343\275X\352(=\"M\303=t\317\274\275B\214\002\275\026Y\313\275\340\351\017=\030\343\250\275\377\000\364\275\313\224u\275\204\032\340\274\233b\303=\360c\t\276IA\266\275wH\211\2759\262\002>\\\333\007>\203\231\t>[\023o<%4:<;\353\262<&\014\002=\013\242)=\324\223\211=q4\271=\200\317\251=\234\256\310=&\032\007>\024\337\205=\"\035\031\275\361\021\002>~\331\345\275\204ln=\002zq\273\336J\267=>\320\021\271s7=<\216E\007\275\235\222\001\274\365\323\272<0F\363\275\365F\260\275\326\310\377<f0\213\275\241\361g=\004$\266=\233;\321=T\230\331=\342L\321=\017\252\226=q\262E=\035#\335=x\004\321=\313\355\213\2753\307\262=\233S\355=\331\022\007\2754v\210\275oF\320\275J\006\326\275\330\n\236=()\007\276\251)\237=\377\001\276\275\324\361\000\276\260%\006>l(\320=4\371\205\275\225\201\254\2750\226\347<\363S\223\275\323+\t>\261\355\316=\335\r\244=}E\221=\210\033\000\276\233\311\365\275\221)\277=PN5\275k\327K\275\333F\r\276\256\376\013>\tp\014>b}v=C]\231\274\325\277b=\333\363\325\275X\202\377\275\034\210\243<!\216\037\275\315\031\222=\374N\311\274\261[\255\275\221\'[;:Gm;\230IC=\231\033\207\275\207\245\241\275\222p\314=(\346}\274\325\260\016>\003x\252=C\342\245\274S\243\356\275\322\027\252=\262\344g\274-#\274\275H\347O=Eee=\214\001\202=(\244\210\275\317\235\342=!u\007\276\345w\t>\276d\362=R_J\272JG\022=kmK\275\024\320\327=\262\211\032\274\240\324t=j\327\341=\366\374\001<\246\265\315\275\337\006F\2752\336\n\276,+{<x\266\232\275\013hf=(\333\350=sv\302=\250\276\265\271-\305\210\275Q\322W<\265Q\200\275\352\355\275\274C\341\035\275\245\346/=\024\245\217\275KK\262\275L.\351\275\344\'\244=_>~=\"\336\004\276\210\300\274=\220\304\274\272\334\307\313=~\322\223\275\026f\r>\206\013&\275c\340\366\275r\'\351<\203\037\317\275\352\320G<\246N\n>\010\2432\274\325\240\014\276\2142\330\275\253\223\004>\304?\027\275\323\177-\275\275\362N=\360>J=\274#\226\275\227#C=H\256`\275R\367\271=\317\345\307=\240\272\022\275!\020\257\274\260\006\214;\301\326U<\213-\016\276\234\345\016\276\350}\347\273!\242\263;\020\343\362=\245zQ\275\233\030\347=>\233\234=\276\355\204\275\340\320\356\274\031\2059=2\265\267=\273\316\301\275M\nD\275~\2043\275W\326\010\276\272\347\253=\237Q\000\275`N-<\372\255\225=\331\267\002\276\\\211\365=\226\342\332=5/\025=\316\257\364=\362y\355\275q\224\367\275\202^\004>\"\354\367=\0252\245=C\250*\274r\254F\275a\"\333=I\347\226\275\300xx=7\214\360=\017\022\310\275\"\332\332\275o\247\201=\354\336\344\2752V\237=\342{o\275]d\245=\t\370\364\275]\253W\275\362\351\247=\020J\345<\";@=H\202\216\274\321\374^\273w\367\232=\357\375\303\275\245\254\331=\302\237y\275xV\317\275\216;\005=|\311C=\021\251\304<2P\263=\301\330\265\275()\241<\210\236m=\335\264&\275\027\262\323\274\016\215\006\275>\0262<K%\333\274G\215\263<Q\325\306\275\364gd=\221[#<\354IM=\224\327a\275\235\266\271\275/V\272=k\354\007\276z\027R\275\222b\321\275~j\277\275\273\354\223;@\340\211=\303\245\003=O\355\355\275\333\374\343\275\365\026F=\2752\336\275\r(\316\275jXr\275\213\231\220\275U\302\344=\221!\364\275\316\326\351=\211r\241\275#P\203=\310C\010>7\371\353=\335?\004>\2479\216\275\377v\200\275-\303\370=H\033\344=\3410\232=\351\242\255\273\231]\235\275\n\331j\274u\\\330=\271\0052\275!u\310\274\344\356\005\276\030\271\006>\350\201\256\274fq\n\274q\252\354=H\261\345\275\353Q\322\275O\235\237\275\260\227/\274\243B\342\274\204E\331\275-\020\004>o\242\222\275f\177\327\275%\014\014\276Oy\311=az&=(\306\244=\217>\214\274\323\217\253<8\3730=\363\346\210\275\005m\210\275\013\256\225\2756\001\220\275qv\336=E\372\033\275\315\267\275=\2340\243\275z\252T\275l4i=\010\224o\275\310\227\206\275\233\\<=m^\332=#\251\274=|U\207=\245E\277\275\276\212\346=\202\376\361\275\250e\210\275N9\333\275\214\231\321\274\225\212\227<\243mn=Nr\222\273\210\317\031\273\262\341\271\275\332\r\257\275\n~G=\"E\211\274\217{T=\365S\334=\023\264\276=\254\347\007\276\241\245\372=F]\030\2758j\341=h\317\373=\223\304\242\275\241\300\203\275!\027\n\275\217\027\323=N\366\302=v3\220\275\344\327\240\275\201\321 \275\007\375\334\275F\016\007\276\326\034\233;i\314P=\307P$=\322\3501=\013\220\374\275\243x\241=\373\016\312\274\220q\244\275\255\330\250\275\211 \243<n/\r\276\375\355\'\275I9\007>\215\252\212=z\313.=K~\301=6\326{=\303\365\331<\334z\010=KP\217<\243!\317=\242-\343=\030g\010\275\365\314\365\275\210\344E=\372\331x\275n\302\035=\274\257\223<\333\357\013\276B\321^=\332\345\264=Pm\260\275\260\036\240\275\201\330\200=0A\256\275\207\230\n=\335\336\210=u\375\226=\224G\017=\307\243\266<PQw\275?\203T\274\006\367\261=\337D]=\010q\t\276\010f\261\275\3170\006>\336K\247\275\334\373\016>+`\356<m\204\002>}\r\016\276\021\275\243=h\330\317<F\000\245\275\214\306\376\275kn\367\275\036\335\235\274o\006\255=bK\352<i\207\005\276\2710\307=w{\376=K\373\374=\336\013\275;\304\353\030=\t\241\273=\200\025\226\275_{\205\275\215\350\315\275\271U\313=\334\010\235=\364\241\361<\034\261\340\275l\361\363=\226V\345=\030XJ=>\263\264=y\217\330=\231\245\357:\352@\013\276\260\223?\274UM\271\274S\345\365\275\304\304\264\274J\325\005\276,\215\270=P\227\"\275\233\226\371\275\340{k=l\275\014>\341\320E\275\335\330\214<\210\263\366=zq|\275K\366\225=\000\201\260\275\205^\334\275\234\372\247=pj\352=X\224\211\275\262\2606=\365\205\272\275\265s\002\276\376\037f\275&\276\n>\2040$\275kD\274=ix\006\275\324\024\353\275*\250\030\275+\300\335=\367\261u\274\316{\323\275$\232:\275D\225\020<\006#\352=\202\265\241=\204m\375\275\206\000\002\276V[\325\275X\037\267=\262\367\301=\223\341\337\275#\335\366\275b\000\017=\030w*;\023\272\345=\371\\\025==\365\013>\272\303\264=\226\220\347\2753K\206=\212\353\324\275\221\263\014>\245\024\260<\333\3269\275D\346\274;we\372=\3307\275=\204R\003\274\375\2405\275n\251\250\275\330\007\326\275\333\254\225\275\321,\302\274\"\362\001>\036\002\335=\217Y\r\275\251\212\362=\005\332\362\275sG$=\367\334_=\rm\241=\321%\177=[\376\264\274\237\2578=\301\3733\275 <\t>\367\225\006>F\203\261=\215!\013>\272_\330\273\334\305E\275\347\\t\274\266\263W\275\257\233\214\275\001\206\003>\326\364\213=\314\331\005\276\277\215\316=\335\345\213\275\004qi\275\267\017x=\342\235\024\275C\250]\275x\017\267=`\033\213\275p\302\201=\374\355?;um\302\275\231Q\231\273\001\321n\274n\277\001=\330q\224\275@\357|=s)\347\275Z\262]\274\251\374\266\273l\340A=\004\031\203\274\221\262\252\275\021\r\223\275c\234\033\272|\266I\274\240\265\213=!x\254=o\024\213\274\221\342\371=\373\342\205\274\376\217\234;\020\353\3058\226v\371\274\305\032\257=i\316\351;\025\260\301\2754*\257\273P\034\374<<\346\315=\356\214\376=\030\255\337\274\343\243\315\275Pr\367=A4\006>\265&\216=`(B=\263\r\224<\n;\251\275\007Q\322\275\247\006\254;$\367\235=\223\261\232\274\313\217\352\275\325\013W\275u\340F\275 \"\323=\330,\222<T\2038\275\243\333\010>\355\346\223\274\374[\342\275j\217\035\274\272\002\001>\241\310\213\275d\376\226\275\263!L\274f\352\240\272\226ZV=\272\263l\274\024,\244=\352!\317=\360\363\374\274\201[\356<+\236V=s\t\274<\026QY\275Q\016\216=\t\010\364=\314\035\267<\231\000\224=\336\276\257=\3529\347=D\265\317<L2\243\274?\365\345=\316t\242\275\367\031\013\276\224\004\227=\212c\252\274]q\363\275\256R\320\275\323\304\307\275\232&\324\274\231\250\301=\374\252\014\276\371\250\002\275\341\023\375\275\233[\003\276p\225r\2754\277\003=\0010\376<\350$\000\276S)\332\273\366\354O<a`\352=Z\362\340=\237f\200=\241\306=\274\266\201\363\275\307\271e=\363U\\=\303\374\275\273\327\332\355\275\2671\356\275\346\207;=\2419\345\274g\267\305\275\017}%=\204S\n>\336h\n\276^\\#=\236|\277=-3\014\276G\3563\275\000\264T=~\301W\275\336>\337=z&\332\275T\317\367\275\021\027\330\274P\261\021=a\376\330=\033\345\223=\261t\214<\277\306\225\274\357\257n=\264\236\r>\306C\364=\232`\212\274\213/\370=\202\"8\274\023te=\241\230\t\276\376\344O\275W\001}=\333\'\340=-\027\005\276\336YO\275\3346\253=;d\373\275\366\233\356<V\004\004>\021Nc\274\203\352\337\274G\233\206\275\310\254\r\275z\354\211\275\330U\243\275\034\226\353\275\324\341\034\275Z p\274\216E\213=\334\200w<\202\037\010\276\313\367W=\306\235\357<\257\312\354\274\362\356\262=\025\256\275\275\214p\364;G\345\005>-\202\250\275\335\005\220\274\360\236p;\353\216\202\275\224\360y\275\255W\274\275\262\017\363\275\373$\246<\252\320B\275\210k\211\273\350H\366=\'t\363<\314\345\345=\203&\207=\361\027\014>aI\023=\303m\312;\254\363\347=C4\330\275\351\310\331\275\240A\315\275m\261\016>\360\315p=\t\267\234\275\262\344:\275\234\325\301\275\3441\255=A``=\027\002\223<b8\222\27536\341<\354\244\016\276Dt\365\275\202\033P\275bWU=\345\207-\275\2555\303=\rC\373=\n\305\006>1[\253<\337\252a\272\330k~=\242o\210\275L\304\370=\237\226\n\276g\201\257=\215$G=-\240\236\275\002\252D;Yk\323=\225e\214=\364\224\275=rA)=\315\314\342\274(GW\275\322\255\244\275w1\005>\311\304\315\274K\007\246=\234Z*=Gqw\2751\360N\275cx1\275\337\321\265\275\030\361e=Q\031\306=a\211\335=We\004\276\nN\330\275\203b\245\2741,\317=\343\275v=5\300\310=\003\006\271=\276J\221=\032W\315\275/\266\\;\261\r\217<\236y\330=(u\253<\031t\252=\\*\016=\317#\353=I\033\003\276t\220\027\275c\220\t>B\370\303=\323\314~=\337\251\236\275\005\272\n\276\375\222\205\275\341\323\272\275g\354n=u\311\232\275\'\273\324\2750d\307=p\010^\273\032\224\335={\244\357\275Km\274\275\366\260\231\275\032\255];j\'\305\275\336\366\224\275\t\240\342\275\231\270J\275#\234\373=[\251\314\273\365B\330\2754\270\352<|\213{\275JQ\203\275\003\027\342=_\322\202\272S\347\261=\204\206\375\2755]\016\276\260\232\323\275\314\376\327\275\336m\010>\373u\264=\276X\244\274\223\342\246=\315\250\241=\027W\n\276c~\343\275\322\310B\274\326\033\240<\226\231\236\275\376/\270=)\3521=\013#\377\275\271\333_\272\270\220\3129d\234\010\276\t\021\235=/\331\250\275Q\347\272\274K\224\366\273>:\n>\220\231#=0x\363;oj\024<sy\010\276\337|\322<\275k[\275\276K\375=\206\347\320\274 x\201\275\033\235\330=\360mk<9\005\006\275\235\316\244=\236M\002>W0\007\274\354,\014\2762#\357<R\372\273<t\000\310<\327\363\230\274\315\252O=\370\355\331=\340\010\276=:\275\r\276\252\206&\274!E\204=\364\342\277\274i)\306\275Hm\253=\326\021\253<\312\354\014\273Nb\333=MG\032\275+J\355\275P_\312\275\362\253\014>\221\325(=\223sR=\230\264\224\275R\305\270\274gRI=o\302\236=k \310<\013\033\207=J\260\371<\323\333\002>\252\360I\274\320\221\374\274_J\002>\330t\345=\3638\177=\2772\220;U3\t>9v\t\276CF\006\276.\010\262=\241\333\305=\304s\262\275\277\371\004>w\013\226\275*\210\016\276\375k\225;tH\r\276zn\201=Sk\232\275\370\350|=e\004\213=\354\325\235\275\315\372q\275\\\010\353=p\313\350\275C\303\274\274$\014D\275<f\013\275\200\231\325<\274\333\326\275\242\317\355\275\224~\337=\376O\270=\260H\275\275j\311\327\275[r\313\275~\344\320=\274m\225\275\033<\244\273]\2154\274\335\353\007<\327m\354=\366\216\002=\203\2235=\231(l=\333H\357=\233t\333\275AwW;\367\335a=\374\341y\275\024B\270\275\207\230\016\276\235\317@<\036#\202\272.I\313=\016y\265=\262@\275\274S.\232\274Y\250\r\276\201px\275)\337Z<\253\362\356=4\353\035\275\243\255\013=\307\345\320=5iT\275N\233\032=\246o|=%\244\362=\316\341\335=\245\354\004\276\376s\264\275\3170+=]\225\276=\t\241u<\252+#:h\257z\275\021\271\345\275\030\267\370=r\216\320\274&2I<y\004\371\274\272\026\217\272\330i\210=(\033\302<+\002\004\276\326+A\275\302\214\356\275D\304\003>\022G\353\275#\276\222=\313\010\030\274X8\266=\255\373h\274\212\340\351\271\257\347\320=)\273\360=P\212\213\274|\013M\275,}\013=\217\257\314\275$k\241<\214\245\336=\245_\r>7\350-\275\003u\004\276\'^\025\274^\273\326\275\314*U\275\354\235\n\276=\367{\275\003\2049=v\315\001=\3127\361<\014\375\325\275>\270\265\275\2247?\274\217\n\345=\000\027\272\275\356\363\260\275\337\004\321\274\366+\016>\266n\242\274\345M\321<^2\255=\347\303\211<6Z\267=\247\303X\274\021^\r>Q{\273\275\274\375\337\275\310\020z\275i\205@\275P\302\006\2760.:\275\373\261\213\275Fe\344\274l\t\312= ,\337\274\247t\277\274\014vl=s]\t>\343\247a<1\260\007=G\271\273\2759\006I\275\037\\\255\275\214@\262:C\317\245\275\342\360\242=y\366\314\275\023_\010\275\345\342\356<\220\202\376\275\276q\313=\205\300\331\275\346O\331\274C\210\356<\2441\273\275\274\271\007\276i|\006\276\200O\373=\200\345v=\366\261\013>\000\255`\274?\376\303=K\250\370\275\320_\335\275\341\017%\275\312\377\361\275US;=b\322\325\273\003\213\226=\325\210\n>\237\027~<\362\361\200=\251\\\211\275\033+\265\275\302iQ=\177c\317=\"^\241\275\031H\242\275\371\320\320\275D\362Y<\201\217\013>\321b\001\276_\216\201=\032\257\320=Y\375\241=~\315\005\276`)\n\2753\006\367=\272\345]=\371\023\035\275X\222\203;\270h\307\275W\312\357\275\327\365\006\276\t<j\275!\021\016<>(B\275\364\304\342\274\037mP\275\323z\010>\354\305\234\275\301\243\004\276\313\330>=Do\261\275\337\005\006>\236\335\305\275\372e\340\275\317\302\\9\374:\217\275\236m\303=\212\311i=H\323\272=\276\246\323=\216\270\357\274\275`\211=\007\371\345\275}\026\223=\314\232Z=\215\006}\275\007\321\t>G\024\302\275\037\244\246\275\203\357\223=\264\243G=N\370\006\276\334\270\337=\257O7\275j\236x\274\370Kj<\360\236P<_\366\366<)\364\374=\014\244\235=R\230;:\357M\224\275\030\335\271=k\007\224<\326\005\027\2739\252\007>\021\366\350=\201\\5\275\275\370\347\275\224\236\363\275\245\356F=\241\343\312=\352\352\276=\321\005\0079\031\234%<\221\371\177=\347}\226=\372Q\242=?s\320=\2013\014>`\260\315<(C\037;\375\006y\275\026\204\005\276\036\215\346\274v@\331=\341\t\251\275\r\377\234=6\201\356\274\200e\273=\004x\310\273\371\005U=\203E_\274\273M\006\276\303^\222\275\217m\362<\016^&=\305bS\275\340\240\247\274M\234\314\275\237\202\242=\252A\250=\263\305\210\275\365D{=EC\257\275\325\250v=\303\207\300=T+\217\275\230I\361\275\317\264\371\275\360-\340\2741\t\322=\240\224\000>\262j\001\276\213.\237=\343\202\337\275\253\330\261\275x\224\330<\211h\274=.`J<\2525\036=\037l\204<\014\232\022=\025\324\215=<%\274=\004k\027\274nh\267=M\3546=\334P\303\275-\304\240\275>\212\317\274\345\037\257=8\344\333\273\3003\006>\373Un\275\241\237\371=KB\252\274<\343\330<\007v\250\274p\252\355\275?N\212\275{\027\345\275(y\316<}\330\331\273\323\005\002\276P\003v=p\257\t\276\210Vb=\177?\254\275:L\276=\036\017 <\310\023\344\275\277f\300=\277\t\366\274t\010\364\275\360j\'\273\246)\203=\233\013\216<\350w\347=\020\277\267\274\n\231\n\272\014\250I\275,\303\325=\2649h=\'t\377\275\213\303\211\275\030\010\270=ll\206\275\345/\201=F)\230\275\370t8=X\021\275\273\313\300\333<\365,\n\275\006\260\034=\203\312\372=hI!\274\273\205\251\274\037^%\275\366\232\272\275\020P\310;\306\t\352=\333\375\274<y\275\326=\227z\r==W\334\275d\277\000>\362\007\317\274\226v\200<dl\275\274\325E\003\273w\267\371\275nw\365\275\334\301\201=\033C\002\276\3514\235\273*4\303=/\216!\275G\013\263\275\252k\214=\225I\032\274\006\210L\275\215\300\211\275\270\253\271\273\256V\230=<\306\246\274\005\216\377<]\204\265\275\310;\371=\023\321\356=9\370\354\275\315&\202\275smm=\204d\254\275\376\255\006>\216E\370\275]\355D\275\240\004\017>\t}\266=\n\247\002>]\347\222;Fiq\275S\3500\275p\344\206\275d\376\301=\257:\230\275\340\202\204=\255;\n>\257\236\256=\201B\302=\203\377\356=\022\035\277=wc\336=\342\313\361=Wqe\274\257\020\311;L\355)=\243\351\317\274\2407\206\275\302\375\276\275\316\213\337<!\021 :!\014\240<\364\016\363<[O\235=\034\030\311\275\245\271\231\275\224\2237\275FB\321\273\245-\363=\002\333\016>r\330+=\270\021\375\275\027Qw=\207\310\016>\253#E\275\3300W\274i*L\274zP\005\276j\257\236\275\235\342\375=\031\275\213=\363\016\013\276\355\201\314\275A\037\332\275n\372\233=\023\327\216=b.\344<\276\341\313=\030:Z=\2005\031=h|\027\275k\003\263=\354\223\254=,t\305\274\204\'\366\275\230\007\263\275\256\345h=n\244\014<8^\017=\356\010\322\275u\354\310=\371\217\251<\371a\364\274\207\027\232=\332\312\t\276\347x\200\273\010\005\017\276i\\\001\276\377\365\244=\355s\201=u\'\026=\360\264\371\274\263~\216:\001\300\374\274Ih\323=*\001\234=\371r\347\275\200^;=\217\263\274=\252RF\275Bv\334\275n#\315\275\214\035\314\275\311\265\346\275\364\254\377=\021\334<\274\274)\367\274R\320\264=.Q\241<\353\356\265=\367\374\241=Y\336\t\276\361-\353=hO\366\274D\344F=m\371E\275\310\301i=\221\000?=\252\r\315=_\274\033\274\242\242t=\336W\252\274\373\246\230\274\n\r\377\275\312\013\344=\3409\343=k_\002=\005\353\206\275\233\340\366\275@\300\251=\262\324\31182.\354\275K\265n=@\014\007=\271\356\n\275\024(\325<Y\321\275=\203\276r<\272WQ\275\377\026\347=\364\t\222={\361\211=\1770>\275\215F\265=\344}\241<I\214:\274&t-\275\314\303h\275\346\354\224\274\016\262\007\274\366\3347\275\0077\215\274\324q\350\274\355\207\337\2757\004\202\274`\325\003=\312\223Y=\357H\001\276\032\201\273=\317\345\225\275\270\232\321\274\243\023\376=\0223\367\275\024\261\332\274A\340\300\275\nO\r=BL\341=\346\214\007>\032+\337\273\321\247\374=|0\377;\236A&\275%\310\215=qo\224\275EY\016\276\004g\352=\032\263\200=H\024\320\275A\177\262\275R\212\340=!.\n>\220\031\\=\2531\004\276\027hg<\375\024\241=:t\262=S\217\014\2762\3766\275H\326D<|&\271<\372d\272=9c|\275[\023\014\276\373bJ\275l\235E=\231m\236=}]\016\276\264&\345\275pf\353={D\335\274\356A\363\273\336\021\357=r\010\006>\276\311\345\275\363\337\220<\000\202\323=*r[\275\334\243o=\233\216\362<\007\007z\274\226\340w=rh\307<3\356{\275#O\226\275\341\270\213\275\337Y\033;+ \032\275\264\302\037\275th\001\276\016v\243\275b\226\000=\304bw\275Q\032b=\2302 \275K\036\313\274\365\206\013=\264A\003\276\271\317\262\275\236\236\265<\370ED\275(\t\034\274\243\307Z\275\021\214\260\273\250\255\246=\247\231?;\021\374\273\275d\317\223=\246\224\224=\211=\245=g\022\024\275XKg=\216S\220\275I\235\277=\037g\224\274W\000\";\320\177\366=\336\300\376\275<\206\352\275,\217\013\276+\244\227=\200|\201\275z\253\276\275,S\273<\227\276m=\373\242\251\275\357\027\311<\201\361\r>\013\246\n=s\362c\275W2\377\2728\343\262\275\362\035\253\275\365e\263:\no\372=\321#\240<\277!\320\275f]R=\334\303\252=\r\031\230\275K\317\026=\037\001\250=`\'n=B\350P\275\315\022\014=\300\303\222=+\200\000=\005{\035=7\374n\275\205\265\336=XY\273=\275\352\013>\027!\010\273\302\347_\275\231J\031=V\220\377\274\007P\204=g\270\013\276\020\345\334<3\245\367<\243r\317<\355T\271\274,\327\327\275\252\rG=\233\223\217;\303\202@\275\276\225\001>^\240\261=\222d\224=Hi\364=\343\303\314=\267\244\306=\254\r\277=~\336D<v\026:\275\006\177\355\274\270\2264\275\221}\207\275\037\377\000=AP\222\274\306\326\315\274hL\263\275\021v\262=\360\323\217\275\0218\213\275W\323C\275UPM\274:\321\236;\305\000\320\273T[\311\275\032\346\250=\344A\004\275\306\2434=\243\005\344\275S\266\251=\356\017\364=\323W\026\275t\313\262\273U\273\220\275\224w\343\275\031\331\313\275\321\024\000>\317\035\363\275\343\316\324\275\\l\305\275\252J\237\273\370{\346=\365\177\203<\274\352L=&\342\002\276w\362\271<0f\257\275\336\024\233\275\357\335\371\275\247\2570<\252o\346=\022\201\016\275M\034D=L4\005\276*\034\361\275\342z\313=\272\022\002\276\035\240\234\274\345\253l=o\233\243\275\276\257\345\275\024\224\305\275\033\203\265\275\303\005,=\343\177P\275\023=^\275\230\256\243=D\221\307=\251\301\202;\331\200\313=\226X\356\275\325u>=\030\276\252=\221Y\033=\203\010\017>YD\006>\272\304\302\274b\033H={\023\n\276C\341\005\276Q\212\324=\246d <|\331\261:@\235\006>\263L\247=\020\241-=5\350\201\275[\326_=\001\036\237\275\301!\340\274\031\376\r\276\352\343\225=\347M\344\274b\023\277\2759\373\274\275p\354\030=I\034\341\275\007\025I=\230(\014>\373\230\234\275>:\316\275\345X\361<\346\026\227\275F\016o\275T\276\265\275dCx=\325\221\330\275\002\261\324=\233Q\211\275\266\222$<\003!\256<m\177\010>\363\372\275<\331+\206\272\3029\311=\345\t\013\275\356\372\350\274\342L\331\274\t\332\t\276\206\311\005\275;g\235\275\356e\312\274\340\311\370=\321\201\314\273[\017\262=:\005\316\2740\342\261=\270\302\203=K\333\224=\341\252\000>\205.{=\227\336Y\275\250\243\202\275\277\322\346\275\004\021\t\275M\334\270\275R*w\275\334\034\217\274\035\227\230\275\"\347\354\274\223\346\010> \036\002\276W\323\265\273\200\030\267;\315\333\246=`\231\254<\366bj=\220g==\352c\000>\256\323#\275\376^\376\275Q\023\337\275\000\207\242\275^\273\007\276\331E\317\275X7\300:>\016\013\276\303\353P\275~\023x\275\322q\252=\231\352L=\343\254\355\274r \t>e\345C=\355@\314=\310\216\002>\206x\316\275\177\204\n>ZqV=\036\200\233\274\034|\341\275\216\243\236\275$DS=\362\224\306=J0\201=\272\273\265\275\375W\240\275\211\001\331=\\\270\304\274\241\214\255\274\275\025\322\275|e&\275\036e\233\275+\310\317=g\271\274=2\213\016\276m\034==\032\207(=kt6\275\002\331\027\274\366\211H=\002\303\320\274\364y\003=\346_\034=[\210\036\2754\335\t=&\305\376\275&\230\266\275\020\016\307=\213F\275\275l\000:\275\013K\026<\334\242\207<\301\223\237\275\344\034\000\275\020\211\246=\271|\316\274\260p?\274\230\270\351=\245\374\325\275\243s\016\276\n\231\335=\202D\255\273\220\035\277\275\372,\r\275 \226\216=R\026\363=\037\354\236=iei=%a\344\273\026\216\327=>DQ\2757\246\004\275\316MH=\022=\370=\203I\023=\252\3555<\000\221\267\272\005a\214=h(\244\275\373\340\376\275Qb7=\017\301\213\275\276E\262<F\366\212\273^\022\036\274\3300\024=\306\267\253<\202\255W\275\211\371\213\275l\375\263<A\301\362\275\'\274\356\275e\272\033\274z\311[=\214o\317\275i\234\003\276.D\322\275a.\212\275\340;\270=0\342\303\275\206\334\342\275\305\331\302=h\023d\275\006j\234<t,\213\275\313>\r>\337y\t>L.%\275E\377\250=\311P\001\276\327Y\251=\373\335\002=Y\222\237=}\222\322=\261\263O=6\271\375\275p\305\302\275+\220\2777&m~=<X\357\274\350\342\267\275Y}\335\275<E\016>6\025\004\276p\210~\275w1\304=\230\204S\274q\352\344;\374\232\207=\213>\365=\347\230Y\275\340\nL=\025;\340\275Y\373\326<\252\332\004\276\301,h=_\252\315<\253)\216=\333\261\341=,\363\376=\257\025\\\275\354\236\355=wC\\\275\"n2\275\2353Z=\352\207\324=\224I\314\275\265\000\306=\350\006j=FwD=f\340\252\273fq=\275\332\252\272<\365\356\245\275\270\344\005>\002\265\260=\332\203\276\275\033\333\005\2761\212\177\2759f\002<E\207\221\2754(c=\251v\361=\037J\210=\241\024\366\275yd\277\27517\220\275\216b\225\2748o<<_c\311<\205`\004=`\016\256\275Q\211\363\275l\324\263=\247\023\314=\2369\333<F\300\327\275:\355\357=\027\261g=?~F\274\314i\236\272\262\221\037<\374\221\007>=\037\002\275\211\246\326\275\261?\007\276\335G\r>\245\376\274=\302I\t\276t#\374\275q\375Y<\372\347\344\275M\235,\275j~\247\275o\320\263\275\206\000\376\274\3622\245\275M\205\210=\213\233\371=C\252\322\275\344c\236\275\342J\220=H\023z\275=k{=\361\\\374\275\263\323\370\275\334\241\354\275\257\032@=\310\321\375\275\305\363\230\275A\256%\275\317\021\007>\0217-=X\315\247;\376\3077=\0053\346\275\272\005\004\274\227b\260\274\264\243\r\276\274|C\274\374/\271\275S_};\204\001;=\256\353\004\276\214\034\273\275\227M,\275\002\260\261=\361\370\325<\300\376\324\274\273\030\036\274\335\224`\273\274\201b\273\301\305\221\275\356\211\234<\267\t\\\275Mg,\275\263hz<U\203\371\274Z\242\275\270\271\"\033\274?\014\215\274\212\2348=n\331\025\275I3\036\275\325\241\t>\000n\317=j\214\001\2767\227\254\275\202\306\301=\241A\300=\213\215\201\275u\321\257=\225|2\275\344\n\310\275\273\367\262\273s\312\364\275\367\036\017=/\334\265\275\000\265\t>~\343$\275\037b\275=\ni\005\276\007\025\240=\276n\263\2759*\000>\337V\307=\311~\320\275\223[\t>+\243\007\273\273a\350=\210xW\275\221)4\275\337\330\330<@T\325=\2607\276\275\013\301\300\274d7\335\275\3440,\275\177\335\313=\324$\354\275_\323\314\275\341\336\002\276X3\345\274,\031\354\275\266\365\366\275`\274\345\275\247\372\005>d_\311=\024\316\360<\263\227\273=\020#\324=\320\323\261=]\202\267=\016\341@\275\276OL\2749^\257\275+\031~\275G[0\275<\320\274=\370\311\320\275\342x[\274\304\214\371=;\003\316<\215\272\272\275~u\344\274\200$e\274\324d\370<\371^\336:\317\372\021=j\247\343\275k\306\262\273\317\350\345\275@\363\205=K\375\250\275w\022\320\275\322\244b\275\347m\241\275H\357\220\2751T\351=\314\344\202=\327\312D=\207\225\333=\325\036\203=yd#\275\256\022\370\275\335\202[\275\330\017\334\275\277&r\274\003\006\276\275\264\216\240=\370\017\303<Q=\005\276o\323\211\275\372[\265\273+\211\367\275\364\251+\275\017\212\022\273\355\034\234\274\267 \010>\244N\253\274P(\250=\254\222%\275kA\362=\200\201\305=\024#\207=x{/\274\335i\300\275 \\-=\221\316\214\275E\000\026\275\277=\010>m?\235=\027\335\205;G=\334=\002b\243=\252LB\275\343\367g\274\200\366\257=\364L\376\275\325\340m=\001a\376\275\377\253\206=\032\177\320\275\331\331\317=\307p\t\276\264\347\264\275-DQ=K\233\320=0\336\206<\301\326:=\204p\310=\241\n\237<\271\026\001>\201\003\022=\033\255w\275F\3442:\247\364\353=]\213s=\340Y\005\276\027\253\234<\265\274\007>\361Q\330=\n9\014>\031\236-=\266f\255<=\000\346\275\240=0=\354\251\003\276*\354\337\275?\310h\275\2764\351\2757)N=\256\365N\275n\276\264\274\375U\264\275\261\315y=\276S\307\275\222\007\010>j\266%=B\364\265\275(\006\215\274\376\337\225=\210|\333=\337\240\304\274\222\327\315=m\032(;\224\020/=m\243\304<\361\357^<Yk\252\274\277(\340\275\325)\014=N|\314=2\032\243=I\305\335\274\356\365\236\275u[\265==l\026\275h\370\306=\2671\376=z\030i=\222`\226\275\317\367\342=\340\352\361\2748c\262\2759\255\326\275\334b\007=0\217y<\276`z\274\265\304\250\274M&\016>/[\203=,\305\264\2753\236x=<\001\002>$\022C\274\3760\366\275\032\210w=`\224\006>X5r=\2447\340\274K\330\215:\320\3231=\331D\327\275\204\327\362\275\312VD\273\236\357\246<&S\n\275!\237\001>\227\267D\275\236\234\366\275{\204\010\276\311\260\t>/\027\331\275\035Y\003\276S\377\215=X\262\n\276\214n\210\275\203\004\006\276\340\360H==\211[=\322\353\371\274\273y\270=y\371\340\275\377\313\307\273\203\341\352=r<\300=|\366!\275\214\337t;\372\303P=\276\024\000>\007\036N<5\217\216\275CY\000>\332\354\227\273~~\265\275\252\246 \274X\211\213\275\265\217$=\366\257\300\275\257=>=\327\370\204<\336Of\2750\006\327\275h!\260\275\256\273\234\275\360k\275<8@\310=\324\2321\2752\240\261\275C2\347<\266\371\226\275q\306\224=u\344*=\325\343\351=\230\245\006>4\222\003=\222\320<\275PR#\275\274.\n>\005\254v\275\315\030\355=\223{\331\2758i\251<A\335\227\275,G\024\275\237\337\r>\243<)\275\032\241\003>\225\311\027\275\356\377\017\273,di=\347\343\210=J\275\244=\214d\206\274\212\226\214\2751\301\273\275\216\200\363<t[\371=\360OJ\274p\363\237\275L7\026\275 1\006= \373\031\273\1778\232=\323\334\007=\237|\231\274l\267\312\2756y\335\275\302=\324<w\201\023<\013\000s\274<\262\013>`\325\236=F\220+=\014\255\364\275W\242\215\275\031\372\252<\214i\230=;5\035\274t<\271=[\251\235=kj\003>\323\345\006>Z\\.\274k\'K\275:\202\013><\027\004=\333\317\006\276\271\202Y\275T\355H<\321C\266<\200\001\222\273\224\317\200=\203\025\333=rl\005\276h\254A\274fN\213=\346\270\006\276\220Y\320=\304\312\317;\253\310g=Gag=q\026\005=c\025\222\275W\356\346=\262\323\302\275\353H\307<5^\244\275\266,\243\271\037\311\254=\030P\316=M\016\246\275]\202\036=\361\207I\275\020~\267;\347M\000>@A\244\275g\232.\275\336\255\335\274J\350\373=\272N\226\275C\276-=J\264\255=\325\006\245\275)\270\006>\355\020\314\274\325\372z=\341g\200=u\206\253=G\240O=\250f\212\275m\357*=\210nT=X\013G=k\305\334=\315C\322\275\244\306\253=GH\253=\370\373\002\276\3539\361\275\"\021b=\351\352-<]\231\304\275\214\013\330<N\177\206=\177D\242\275&\363\205=/\317\310\274\341\013\266\275\352\365\027=\007\304\270=\316\261V<\272\212\335\275p\251\001\276;\332\000\276\331\264\275=\3000\327\274`T\352=1\216\031<\005\376\375=\257d\014>\312g\342\275\322\303\361=\370\265\264\275d\223%\275\036\240\n\276\311E\235<\331\006\355=Ju\213\275l\020[\275\0356\203<\201\221\321\275\307_\344:G\240\000>\227\300\377=\363\274\302\275\226b\t\276C\336\317=\304 \377=\224\270\215\274\t0|\275\223\231R\274\334\257\205\274\354\237\257<\234(\007>\336[\373=f\222\231=\"^4=\347\232J\274\237\227\366\275\367{\001>\264\331\276\274\0317\231=\320\013\365=a\260\007\276L\010\004=|\260\005\276\235\310f\275\376V\373\274\017t\210\274,}\245\275\213\257\223=\016a\364=\272K\177;\211\221\t\276\330\347\036=\352\357\252\275\306Dy\275\351\005\337=\307\316\321=\312\336f=\213\275\236\275b\r\003\2764\234\036=I\236\322=\262\353 =\017\225\350\275\303\302#\274v \370\275\201\004\213\275u0\247\2750\200\372=\025\000\315<\006\331\226\275P\014\272\274\2659\370\275\2645\341=O\347A\275\235\2328\275\263\261\225\275\276e\274<\320\"6\275\237n5\2757J\371=W)\246=\356\340\272\275\023\336R=\230\020\024=\255\256\000\274m\372\366\275\270T\001\276@n2=Aj:\275\314\323\001\276\245\004V<\353\"\374=n\342m\275=\211\264=\005\312]\275\363\362\351\275\2109\023\274\346/\262=d\235\227\275G\340\000=7N\212\274\224\372\271\275\247\001\014>0d1\274$\364\335=@3t\275g\340\336\275|\332\270=O,?\274>\215\373\274V\321\307=\354:\270<\336\200\306\275\350\350\010\276\003\324\231\275\002\265^=\264\332\016\276\205[s\275\201\341\177\275\360\007\350;\376\311\315\275\010\347@=\200N\001>{\032;\275P\354\216\275\222\334y=\337\364\266\275]\302\226\274\346w\031\275`k\352\273t\312\256=\312k\376\275r\260\007\276\007#\233=.\254\255=\206\036x\274\277\242\365\275\370T\352=\215\301c\275\343U\201\275R\310\223\274\352g \275\221\234\331\275\305X\350\275\317^\006>\001.{=i\326\364\275I\266\367\275\264$\234\275\351d\230\275\306\212\036<\322\235~\275uPD\274\223\237\275\274\323\334\005\276\271\n\333\275r\315\334=Et\211=9C\006>\"\353\361<\014\237\032\275\246\274\r\276[1\222\275c~M=m\036\221\275\230b\000>\210\377\371\275\0176K\274u7\000=w\247\023\275/{\231\275@9\200\275u\232\366\2752\371k\275\204\361\215=<L\356=R\353\345\275=(U<2\354\014\276\010\232o<\333\200\363\275\323\315\303\275\316\313\216=\'N\276<s\353A=\240\274\377=\234*\003\276V\275\\\275\235\260Q\274m\004\231<\332%\002>\260q\r\276\303\017\002<L\016\223\275\242\361<\2753\267\000\276\254y\222\275/\314\t\276[\2244<L\372\375\275\273D\345\275\262\375\014\276\006\252\267;\215c\376=3\332\004\276!v\326<\307\251i=\276\003\321\275\234\267\203<\253\262\227\275\373\031\262=\375PK\275\350\"3\273\310\n\003>\214\306&\275w[\004>\020UG\275\234\220\220\275\201|\216< h\372=\234q\007>\016X\002>\325\327;=\350\227\343\275QC\341=#=e\274\n\205\204\275\302\361\271\275)\310\005\276?\240\005\276\243\272\001=\253\352\231\275\344\3029\274\\\3302=\237\223\237\27558\320\275\200\323\300=\336\276\007\276?v\326\275\236\251\t\276&\357\257=x\206\357=[\330\302\275\002{\231\275M\225\214=[S\272=.\2327\273A2\303\275\n\337\000\276Y2\336\275g`\216:\332\"\204=E@\242\275%~y\274\234\340\232=\230\334\026=\306DJ=\226\270-<SkF\272\003.\253\273\324(\256=\337\224\361=j\026\303=IO\r=\233\305b=\234u\020\275\233\026\315<R\373\230\273\'\334(=S?\252\275\272\215`<\"\357\301\275\334n\252\275G\353=\275\306Q\311=7\332\010\276\3030~\275\013\223\270={\rG<\344\023\234;\000L\313=\220 \r\276\314\204\010\276>U\340\275-q\274\275\337C\241\275A\331\242=E!w<\3462x\274Y\261\212\274\270\207\202=\350\216\251=\314]\257\275\336\236\033\275\364Y\004>LE\340=|\nP\275T\333#\275E\242\006=C\216Q\275\014;\342=\005=e\274\361^\255=\341\233o\273P\302Z\275\0169G\275\233\266}\275\325o\300\275\335[\006=\006l\341=u\'\207\275\364\364\256<\261XX\274}\245\007>\221J\272=\255d\214=\241\373\003\276\333\214\016>\232\206\276=\244]\326\275\234\273R\275\210S\375=\233;\355<DFN\273\340\367\343\275\002\357X=\202\307\274=\345\255\355=\302Pp=\267u\024\275\312\026\000>\022\364\207=\312\204\367\275G\271\235=\373\303&<\214\202\357=A\204\310\275\203h\232\275\004\201c==\367\245=mb\200\275\237\266q\274L[\277=$\277\002>\261\312\227=\351\300\010>\026\016v\275\253\253\275\275\222u\334\2753\260\013>\347T\350=N\013\310=00}=\313\354\261=\206oL\275\234\337\371\274\213f\025\275\014B\372\275\252)\002\275+\312O\275P\010\000\276\031\325\376\275\222l\210\275\277\220p\275g\037\326\275\241Z\244\275\302\232\003\276A\222\302\275\367\225\246\274K\222\032\274\367\n\326\275\014\3419=~3\214<.\245\322\275\337|\370\273\300\206\250=\344\003\212\275\366>\037\273K\370\213\274\270a\000\276\312\362\306\275\223\246\373\275+.\003>U\211\r\276gn\277\275\001\351\336=\343\t\256\275\222\326\032\275\355\3129=\227\210\027<\001\305\226\275X\203\221;\262\254\326\275\364p\203\275\033L\332\275\316\344\n=\025\022\277\275\376\275\237\2743+b\275\231\261\353\273t\272m<\344\202\272<\376@\335\275\314\254\200;\217\230\270\274\332{\243\275\202@\235\275\254\361%=\373!\036=#\212(\275\322y&=\257\215\251=\204n\364\275p-\316;\234a\264\275\016\367\247\275\023G\013>\306\347\340=?\264\245\275^G\364\275*.\272=\340\267\007\275\373\001\366=\r56=\316\260\006\275\224m\277\274\036N\353\275\007\205\276<&`\033\274\211\313\210=e\315%=\037\t\226=\211E\374=\303\210X\275\273,\204\275=\344$<\340Y\232=EF\210=\221\317\317=\371M\005>\346\336*\275%x\275=\316V#\275\002\337\224\275Ee1\275\322\033\315<3]\024\273\003\210\347\273|uR\275\257\266Z\273\311\r\205=\371\023\226\275\220\'\355\275v\225\023=R\032\225=\206\032\264=\331\322\272\275\375\027\310=v&\375=\243\376\267<\026\256\016>r\031x\275)\310\307\275.|\237=X\352\326\275\360\217\017=/\306\241=\275\320\277=A\204\017\275\361tV=\252k\214\275\r\337\003=\204\214\005;n\257%\275H\003N;Z\231\317=\336d\342\275k\016\003>(;\377\275S\342\n>\345D\363<b\n\347\275,\266\231<\270\236@\275\264\367\250=S\265\000>\316!\231=\216\021\365\274|6\374=Y\253\002\276\373O\177=_\244\276=s\364\212<\275\346\224=#\014\205\275\357\276>=\023C\316=\213\235\337\274\261\002\370\275\343\301\234\275\017)\033=\267(\302\275\323\344\252\275^\221\261\275W\324\005>\333\"\306<\037\235<\275\226\244\010<z\305\004=\274\252-=0\363J=f>\251\275\010&\t\276\2763U<\342^\"\275p&\221\275lQ\301=\374\365/\274\005v\033=*\360\254=q\362\240=1a\276\275\235\256\235=Y\245\\=\254p5=\217\303\200\275m\214\002\276Hu\340\275O\033\334;y\212`=%\366\014\276C1\007>+\344\207=\264)\014\2767]i\274\340\353==\322\341\270<5(P=\257m\251\274\330\211\362=\313\202\346=\234\373\232=Bx\001=\021\026\355\275\350\332\231\266\026\347\247=\366\371\261=Q\310==Q\212\016>&\013\005>/\372_=6T\354=\340\035h\275\020g\350\275\300\206x=\331o\246=\303\310\337\275\261+\007>\263Bn:y\302\215\275b\010\257<\243E\352<\025Y\204\274T&\301=\221h\270\275\005\321\n\276-\005\014\276\014(\355=\301\274]<\223\373%<\261\252\233\275x\003\353\274\227y\202=\031\303\272\275\017`*=\003\032\253\275\304\244\206=h\021\021=*o\374\2751\246\334;\261\343\340=\214\036\013>\242\313\315=\350&\337=f1\202\275I`\007=\321\245\362=\365\347,=\311\023_\275*V\303=\257\232}<y\265q;\265?\353\274\252]\274\275^\260\356\275\320\357\000>\007\372L\275W\027\312\275g\347\014>V\215\n\276$\212\007>qt\016\275\306\254\t\275S[\004\276L\276\243\2753\020\016<Yi\273\275f\261\310=R\026\037\275\257\300\305\275\264f\307=\321\027\013>\013k\213\275q?\000>\247M\314\275*\213-=\320\353\202=\000xZ\2756|\013>\037P\260\275y\005\341\275F\220;\275\342\277\236=\361N\030=\264\t\226\273\232\315\253=\304]\353\275j\345\007\275\264\272%=oi\240=\001\022U<E\251==5\003\343=\236\204e\275A\266\013>8\256\260\272\3133\264\275\274\257a\2757\r\000\276k\350\335<\367\232\317\274\277~\241=W\030\007\276@\353\321=3\336\302=\232\026\225\275\022\335\214=\371\230\301=\3447\362\275\217L@=\000OB=\333M\217=\036Z0=4\340\362\274;A\013>d0\325=\212\204G=fO?=\370\303\340\275\340\\\337;\n\037\364=\027\374\373=\016y\017\275\314\265\330\275 \201\356=\344\267\232;#\001\254=]\247\341\274(\316\303=\031\001\375\275\021L\007\276TI\002\276\241c\264\275\3777\201\275z\177\242\274\'\002\r>7-\330\275K\351\255=~t\236=\355\t\361\274\230\267\r\2763\177G=t\031\002\276\271\265\230=\035\0300\2757\367\206=Im\322<.\246\266\275n$\352<\323\370\240=!\036\201;<G\347;\023^\222\275\'\263\350\275Fg\334\275i\372\r\276\213\"\t\276\204\204\345<Q\342\247\275*\312>\275\230:\202=b\2545\275\032\272 =\267\344\320\275.7\360=S\013^=a!\006>\243\263\373<|\212\224\275\334P\003\276\320FI=6\2167\275\2571d\274p\220\031=I\202\n>l\352\343=P\224\304\274\237\023\001\276\'5\263=\020\225U=\333\230\333<\203\025w=\210,\t>D\371\350=\223\202\256=\022e\336\275e\322m=\261\010\363\275\345\345\000>|\265\203\275)\371\344\275\272T\216\275\327\032\024=\2608\016>(\317\231=x5\346=\n?\312\275\311\227\313=A\254\006=\004\333\232=H\322\201\275\'3\337\275rdn\2756\347\352\275)\265\001>\031\314u\2751\023\350\274\303\360p\275\362\276A\274S\367\354\274\3019\354=\265\323\001>W\234\007>qi\333=\264\016r<\371\367\005\276\020\316\270\275\024\344D\275tl\221=\266\221\t\276\260\202\007=\336?\376\273\301\001\325=G;\362\275\215\022\342=\375\222\320=\315\233\217\275;\001\350\275\000_\002>\375UU\275\253q1=\343\322\206\275A]\320\273\211+\002\276hF\365\275k\026s=5\005-\275\342C\275=+\366\250\275i\201\360\275\310F\204\274\203\255\276\273\\R\215=;\372\010<\036\251\266\274\215X\014\276\354\254\201\274\223\316\325\275a\210\252\275@\305\t=\306\243V=\0207\210=u{\275\274\2550\333\273\321\177\010\276\363L\013\276\014h(;\271\321\004\276\276|T\275\265/\316\274\352\306Y\274\233\236\177\275K(\261=\370+\002\276\306\320\360=q\225\362=\325\204\352=\022\242\322\275\311\363\201;:\355\202\275\266\305\365<\302N\235=\273\227J=w\327\367\275\257x\252<\020\201\010>\350\022\323\275\2149|\275\001\241\206\275V\237\202\274oS5\275.#]\275\235:t;T\372\000\275\326\260\016>N\263\376\274\244\244\212\275m\n\001>\345\252l\275x\277\311=\331%]=\304\024\372\274@\366\257\274\351\235\321\275Y~Q=R)\205\275\200\024\236\275\237\016\017\276e\314\001\275s\320W\273X\331L=\024D\340=\247\276\t>\010\237\253<l\362\016\276/9\223\274\350\240\244=\033\236\314\275}?!=\323\2739;\373\254\t=\334\262\305\275\222K^=i\205\363\273E2\324\2733\014\247\275\351PE\275e\376\324=/\345\332\274\345)>\275S0\212\274\303\323L\274\275\260\264\274\210X\010\276G<\000\276\347@\361\275\330\201\200\275\027\222W\275\271T\227\275\276{\031\274\010G\356\275\202\375\311=\210\226\234=3\006\353=\306by\275\334\355\257\274 \224\237<1\304\212=\003*\r\274y\334\324=_%\014>\262\037\201=\266M\357\275\314\230\002\2758\306\014\276\303B\342;\261+\253\275\013\357[\275\223\264\365=\202\206\316<\340\201\314=]\240\260\275\025\343\013>\206\373\000>\351\237n=\014\327\252\275pX\361\275\304\\\217<\211\205\"=!\235\r\274\325\220\000\276\214\244\305=\022\315\335\275\236+\247=\305\247\205=\217(\201<\226%\302=\303\360\255<\035\304\025\273\210\340R\275>\312\205<\223\270\310==C\354\275\312\247\250\2758\037m\275\263\324\344=k\376\t>X\323\303=z\273\276\275\034\211\313=b\000S\274Vg\006<\313u\014\276\202gV\275`aE=\342\324\241\274]M\233\275\013\224\014\276\240\016t=\253\230\277=X\311\000\276\254\177R=\200\335\227\274\366\362\327=\0318,\272\3460L\275\037S-\274A^\340\275r?\334<k\237\315<\016\2756;\361\361\367=c\376\201\274\245\022F\275m\177d=\343\006\025=\327\362\240=\261q\240=&s\246\273\020\253i\275kM\216\275\232\341\205\275\177\004\352=:\307X\275\311#\275\275\237@\351;\261\315F:\306\377\005\276&\240/=\013\247\300\275\210\345d\275e\253U;\343\226\310:\215\303\266\275VL\014\276\277\307c=\346t\303\275\2145\007>\217\267K\275$\000\033\275$H\331=\354\376\002<1,\375\275\177$\240\275\tg\344\275\3576\364=\360a\326=\254k\365\275u\353\355=\261s\342\275:{\302\275\346?\207=\207\016V=\271\3746==\373l=!\224\311\273]\351\333\275\214\375e\275\217N\257=^\273\341=\377\263\016>*\314&\275\234u0\275\317$\310\275\321\317\257<\352d\337\275\006\247,=\032\003\356\275\347\373\336\275\233\355\005>\305rI=B\213\337<g\035\205\274?\210\006>\211\260\235\275h\346\360=\340\303\333\275\001\033\317\275\312\325\362=M\222\016>\256\032\315\275\260\346\t>\363K\307=B\333\277</t\235\275\343\345\206\275\352\302\215\273;r\354=&0\326\275\247\333\360\274\312\217:\275\236K\260\274\240cx=c:\264\275\2512\213\275\371\215\313\274\234\326\243=\211K\335\275\373f\350=\017\274\260=d\016\235=1\231o=r\216\364\275\021\217\004\275\325\364\372=\373`D\274\243\230\334=\372A\223\275\330\372\313=\257\307\361\275\222\227\037\275\237\256\374=\"\037P=\315\302\324=\310O\006>\316-n\274\030\322:=Q\274\"<E\3147\274\245\275\271=\232\r\003\276\210\343\313;\262\206\373=\\\252\313\275I\303\306\275\207\276\347<\265\017\n\276T\264\223\275p\222\353\275I\261\222\274\007_\231\275\227b\300=\3007V\274\272\004\325=\371\004\356\275\224\244\026\273\262\266\220=.\226O\275\241%4<\344\370\010\276\0043\004>\n\356\244<\006\231\240=L~\215\275\212\330\211=J\003\010>JQ\031\275=\016\264\274o3\362=.\341\345=\271\332\353\274\347\033\224=\252\211(\274\222I\n>\246\350o\275A\362f=Y\272k\275\274S\322\273\\\203.<vfN<\207b\016>2I0=\362#2=\034\235X\275\324\350\277\275\217\343\203=\242\277&\275M\003\264<\251>r\274j\337\016\276\204\341\272;\231\2674\275\007\277\\\275\300H\273\275\243F\367=T\276\260\274R\341\004\276\035\037\014\276\203\324\327=\017g\217\273\357\t\245=YL\373=\033\314\007>\224\026}\275`\372\252\275\021\230\202\273\374\230\n\276\374#\262=k\351\027=+\331\'\275T\357\227\275\030\323f<\036\213\312;\260\231\210\275|\267\231\275\347\023\007\275\254\264\001\276G\275\302\275\221\022\356\274#\307\267=\014\n\255=\354\323l=h8\240\275\300\264\362\275\212\025\356\275t\261i\275\255b\001\276\006B\321\274\233U\361=\215\243\344\275\032\272\006=\376\013\276\275\223\316\303=\205U\354\273\236\205^\275\370\237\246\275\377\343\241=\210?\366\273@\372\331<\210\314\245\275T\2007=W\351\232=\270\\\271;\357,\027=\324T\274=\215\255\272=n\203\257=u\202\016\276\312\257\310:x\303\333=_\372\213<\304\365\324=\220\331e\275\316\327\321=\257\271\346\275:\336\203\275\017\014&\275\212%~=\003Q\020=\224\351\373\275\016\226\364=\276S\014\2752*\235=2^\341=\2045J=e\220\353\275\304\022\374\275\245O\206=\277O4\274\006W\317<\355\357\216\274\337\235w<f\266\007=\256\277\371\275\243a\002>\320\'U=\263p\252\275\263\310B=Gr\233\275\023\260\214;\376\362\t>\026\303\373\2759\327\206<$w\335;\367\352\367\275?\026\305\274\327\354\254\274\200\337\235\275`\243\326\275s\337\010\276\353\240\000>F7\325< 4\037\275\200\221\327\275\262\303\025\275U\242\021\275\207\366\336=]`X\275\216\371\306=\233\221i\2754\214\267<\331\'\307=\322[\203=\345f:=\252d\\=ZE\315\275\363\342\311\275\027\032\014\275c\020Z\275]\034\276\275\017\274i\275\344\362\320\275\245~\266=\247\252\367;\314t\303=B,w\274\306Y\337=JSl<\320\302\226=0\306\363=\340b\002>\035\322o=\321\213\036\275\371l\224\2759\213\254=x\201\241\275\272\3766=\375\316\260=\025\267\267\275:\006d=\n4K=3}\234=\331\377\004>4\246\344\275\232\352\232=\375\261\355\275\277\352\n\276^\333\306<\223\027\211=\336\251y\275\351\335\325=C\332R\275q\007\333\275}\034\326<\264\364\352\275\207\370\244=\231\245B\275n\375s=\330\242\210<e\362\217=0\226\335\275\334\225\232\273\030Jq=\026T\230<G\234,\275\346f\025=v\"\327\275r\363\024\275iS\3309\350\347r<\253\021\021\273\254\343\327\272\267\014b=\030\207\207=\353\342\010=\265\025\320\274\364\037\031\275Y\312\357;\257)#=\326y\330\275du\007\2768\232\r>\330\037\366\275&\212\013>\275\016\266\273W\256\336=\327\202\000\276\000\255\220\274F\353\204<\271.\232=\377\350\213\274\370wN\2753\376\233\272G5\333\274O\266o\275\031\317\207< v\204=\001K\007\276?\204\305=H\0349\274PA\037\275\035\331\002\276a\235P\275\201+\372=\244\227\212=\313\353\333\275\247=\207=O\203)\275\342\263\346=#\007\205\273i\024@<F\302\303=\307Me\273p(\262=s\300\233=\343\342\270\275\266\360\003>\342\t\270\274?\316J\275\030\n\006\276\036\221\316=\252\303t=\363\363\254=\206\311\262=\324\352\001=&\311n=\266\253\002>{\250\223=U\005\206<|\022\225=\226y\222=\"\312\246\275>\3453\275\263m\360=$\314\361\274\020\344\302\275.>\365=\311\034\356\274\315\310\224\273\354\014)\275\221\024\262<&;~<\326\363?\275\227g\244\275[H\243\275[J&\275\"\315\324=B\020\210=\364\225\276\275\260\215\325<\356\230D= \026\324\275\336\356\277\275\307\300t\275\262\305\325\274\314\212!\274o\\\255;\257\360\203\275\001\033\353=\003\366N=n\3100\274\356\013\366==\364\246\275\350\304e=\267\010\250=\201\"\252=b\tx\275,\362\014=^\226\000\276g\017\320=\263`\366=\345\263D\2757\252\r>W\007$=\303\354\254\2758\025\035\275P*\000=\304\300\005\276g\322\335\275\242=\210\275S\324i=8=\010<\255\206m\275\315&\243\275\036s\231\274.i$=\2253Q=l\3328=\333\207t\2752\021\265=\226<\364\275\341\342\346\275#9\023\275\316\220\231\275\212\004\264\275\302\366\242<\233\302\250\274\237\276\313=\2048\223\275\234\013\260=,\253\345\275\352\372\013\276N\332\003\276@n\370=\252\343\272\275U\205\314\2753\241_\274q\340s<d\225\262=+^\006>sZw=X\263\271=\266\317\006\276w\025\003>\240\215\336<\255\374\262=\253\336\264<\3441\002\276Z\001\344=\265)o<\355\304\273=a\\\266\275\377d\014>\331j\312\275\225\374\360\274\017-N\275\020k\200\2758p\000>\255\344\301<~f\367=\235\311\211=\366\021\201;\355PW=\362\241\323=\363+\006\274L\034\003>2\207\353\275&b\020\275x\244\347=X\247\004\275\253\300\276\274\336\337\247\274\333\352\014>:|\360\275\371T\342=\235\362\320\275\365\230\006=\244.!\275!#\352\273f\305\351\275(C\367\275\215E\303\275`\203\221\275L\317\246=\017\253\371<?\323\001>\207\337\t>>\334\265=\264\244\303=\365\rM=\206\032\332\274\362\250\362\275\0320\351=\270\350B=!a\367\275\034K\230\275Uzz\275\302\317\003\276\266\326\214={\256_=\002tj\274{\274\234=\204\236\320\275\325\013\033=\274{\002>rC\325=\347\270i=\366s\260\275\2321\300=^\2725=\037-~=\256\256y=q\215\350=O\021\227\275\374R\323<\032\333\305\275z/{\274\206V\016>u\350\373=\370\344\310\275a\037\t>f\373\210=\3341\321=\300!,<\252\027\317\275k\300\002>\273\320G\275\005\002\301\275\003\214\030\274\240+\354\275R!\243=\270\221\363=\3777\226\275Y`\275\275/\333\362\275\276i\236\275\377\025\211=\331\223\010>\335\223\353\274\2042\372=\307\262\224\275D\017\236<\311\377\215\275\343\301\300\275\206X\344=\230\330\243=`\013h=\372\241K8 \242\203=0%j\275\023\342 \275-\244*=M\327e\275\376.g=\227\345r\275\314\323\375\275\000\001\264;\r\357\254\275\314\013\313\275\320\337\344=\007y\003>x6\225\275\315\205\253=\0037\331\272\223\231\377;>@\263\275\010\362\245;A/\022=Q\375\214\2746T\002>\205\327\337\275W\233\t=\3743O=\225\374\'=\201;\010>b \034=g\352\235\275\300}\010\276\372\262\276\275a\245\014\276\276\003\356\275\027\265\275=!\250u\275j,\340=v\363\344\275\260\200f\274Vnm=dm\330=\'\261\275\275hO\276\275F\026\000>\247\244E=\207\254\004\276\271I\t\276\334\366o\274\002c\364\275(\345\023\275\213\002\367=\325&\005\275|\325Y\275\217r\n\276p\343\315\275#B\314=\354g\233\275\001\240\375=\336\272\016\276wq\240=<\025\306\275Q%\251\275b\005\240<(\367\265=\035.\n>\214\315\302<\366,\n\275\177\002\323\275\211|\351<\002\267\005>\243\227E=\037\013\016>\211\007\367<\254\312D:\215K\006\274T\261\200\275#\024\310\275\352\240`\2751\264F\275\264\240\013=t;\033\275\377\323\304=z.\374\275j\334\274\275\231\241\323\275R;\016\276\033\306\312<y2\276=B\234\271=\251\253\010>\255,\203\275\204\324N\275\316\033\266\274\021\240\372=\315F\216\2754\313\373\274\312\232\006\276qt\336\274\360F7\275\207y2\275\033\273\324\275\367\343Y<\302?\026\274\302\010\217<2I\264\275b\321\030=4\234*\275\'-\007\276Z\272\216\274\306\271\306\274\025U\223\275B\264\245=(\323`\274A\350\217=\326g\316<4\303\274=k!\274=\331\320\"\271$\204\374\275\006\035F\275\231\r\016>\313\204\005\276\364e\016\276\315\224a<\337\n,\275\201t\222\275G\020\366=j\320\000=\327\375\240=\211\332\027=2\372M\275\367c\245<\225\202\341=V\312\215<\004>h\275\023\206-\275\247\233d=\356\261\201\275\317\327`=\273tE\275\276\034\314\275\2612\320=\316\226\356=]_\200\275\344\371\345\275B\346\211=\350*\233=|?\244=0X\374=;\326\317=\324O\006>\207r\312=\201\203\007<7M\256\275\237\341\004\276\373\231\005<\024\263u\275\333\037\000>\374R\277;\335\200\307\275T[\260=U\034\n=\225\\\353=\302\352$\275\227r\214\275\222\016\223<h\206\235\2753\257\302=!Q\253=\351\342\001\276b\325\266\273\316P\332=DGX\275\355-\276\275=2\274\275\252\004+=Om\252\275\232_\004\276J^\020\275\202\t <u\303\355=\3257\373=\265\257\217=aK\337=)\002\230\275\030\212\227\275[<_=c\350\326\275\242\017\017\276\364\366X=\222\201\330\275\032\325\312=\231\244\025\275z\302\262<\2577\234=\0317\271\275\025H\031\275_\220\231=\017\365\000;\200\205\205=\0237\004\276p\006\223=\337\357\272=\215\305\311\274\32004=$\201\n\276\205\217\350\275tP;\2750\351\252\274\002\"\013>\201M\024\275\261,Z\275\301\021\371\275\305\207\037\275C\035\216;\311O1=4\277\203\275d\312\300=\212\004\230\275\022\315\203\274\202[\211<x\342|<\353\035\016>\226\317\226\275\002\302\364\274\330\3229=a\310\341\274\024\233\364\275\037\310\350=\226\324>=\363\245\322<\n\032\354=_\343B=\344|\034=\332\333\374\274\207\236\010>\035,\007>3c\211\275\3718\274\275/\307\236\275\275\002\233=\361\034\266<\324\204\210\275\332\330\226\273\277\236\200\275\337\241\342<\330q\227\274?q\270<\362\243\224\274\336\025\004\276\316q\017=;\003\252\274\315K\316\275\267\266\277\273\277\2240=\005\001\277<j\356\005\275+;\253=\354\311\013=\367\374\302\275\273\365\220<\366\034\343\275P5\366\275Yn\246\275CI\237\275\212\362\305=\302\204\035\275\022\365\365\275\375B\311\275\347\243\211\274\206\254\201\275.\253<<\000^\000\274\034\377\006\274+J\335\275\024\"4=\321\316\302=\235\204\267=\032\306\r>\206\322\205=\261T\347<\016\321\206=u\256y\275E\203g\275\300\267\255\275\016\337\205=\223\027\302\275\323\323\237=7.\247\275\374\203U=\367>\024\275\034+\001\270\343;\003>D\325\222:1\014\324=\271\351\002>\320\201\004\276\276\007{<s=\007>}\233\367=\001\270\010>\014\371\013>\201\034\227\275\035\277\241\275,\213\361<\366\360\226\275O\354\010\276[89\275\236\325\363\274\334Q\013\275y\367\324\275\234\342\013>\237\003\362=\344\250\310=x\376\03696\234\335=\356\373\206=\000\363\373<Z \374=p\273/\275iPM;.\177\004\276\306%\211=K&~\275#\341\236\275\021\021\271\275\341\260\332=\260\304\222\275\210\350\202\275\317 [=\314C\226=\257@\002\275E\020s=;^\273\275\255\315\352\275\236\207\r>>\204\221\275y9}\275\372w\005\275A\325\334<\363z\302\2759\014\030<A\320\\\275\177PX=V8U<\322\026\014>\236\210\264\274G)\253=\216!\302<\322nT<\010Q\207\275\364U\335=\037\264\214=\r\367\200=\232#\260\274\201r\270<-\376\352<\247\'\331=\2030\n\276\241A\r>B#\007\275O\323\265=\"}b\275\300=\202=\340\224\006\276\251p\313;\276G\360\275(\327\216<\363\3362=P&\362={~N\274@\362\253=\377\013\t\275\0378\256\275\202[>=\233\241\252\275Rs\235\275\2377\223\275\200\262&9>y\320\275\024\374\014>X\014\214=]0\225=`{\213\275\n\365\307\274\217\366\213:\021\243\036<\327x8\274\223U\212\275K%o=\3446\007<\321s\267\275\006\364\343=\037{\276\272\036D\364=e}\306=\322\001N\275\200\200\245<\325\036\362=u\226\014>]\306\333\275\351\227\311:\262\333\010\276\263\034\236;\344V\216=i,\333=\223\225a=t\3109\275\230(\202=\2221\224\275\013\344\206<\205,\016==\335A=K\367\330\274x\221-=\033\n\227\274X\375\377\275\255\247?=F\r\251=\335\245\005\276\005\230%\274\257\275\341=r3\001\275\024\216n=\257t\332=s\013\275\273\007\250\203=\271\3077\275\006\256\306<\205\330G=\" \353\275\267\337s=\210u\013\275\320L\242\275c\343T\275<\321\345\275s~\222=\177\216\002\276\203[\031\275,f\014\276\360w\277\275Alf\275y\020\311=\014\232\002>eR\'\275\276\230K=\226\326\220\275b\003\360<\037\217\001\2761|\246=\177\335\264=\336\245\315\275`\031\003=\350w\245\274\312\331]=\025r>=\217\342\302\275\343\307\321<\250\272\356=\003k\203<\331\350\301\274-;\371<\376\314\371:\267\253\021\272)t\032=\346\212\304\275\013\033f\2756\333\360\275\350\355\302\274\223\003\340=&^\231\275&\272\227=e\203\357\275\236l\232\2750\323\027\275\"\026\342=@\037\210\274\263\243\320\275r\277\301={\263\244=%9\240=\266\207v<\207K\000>YdP=0\313h<6C\320=\262\024\226=[\354\335\275\274\236\372\275\300\346\330=J8\002\276\351\303\376=\253bh\275\223\257\010\276\035\336\224=\233\014\371=\206\222\232=oRB\274R\363\341<\357\357\354=9ZD\273\306I\216=\302\313\221\275\004:\223\273;5b\275<\233\271=\244\n\250<\274\257\232=gV\223=x\2060=\021\272\227\275Mv8=\223m\005<\211\"\303\274\210\270\336=\031F\013\276\236\206\346<\372\231\306\273\310\034\251\275&t\351\275`\005\212\275\222}m\275>\252\330<M\223\226\275\200\252\310=\331Ob\274\267\231\231\274\000o\231=9\267J=l\035x=\254/u=I\323\311\275\264\235\341=\363k\025\275Z\357\346=\270\263\004\276\325k\340<\236\'\367\274P\323\364\273\200\214\256\274\301r\347\2757\375\'<\275\020\230\275\370\226g=\222\241\267<\234\363\244\275A\323Y<R\231Q\275\306\005\010>c\313\007\275\234\031\t\276h\273\225\275\0364\013\273\272\034\033\275\351E\304\274\304^\002=\206\007\025\275\366V\350=X;p=\314C\260=:Q\375=V\373\366=n\\\024\275\257S\027<m\035\016>E\021\005\276\320\274v=A5\004\276h\036U=\251\254\315=u|\t\276\'&\367=\321\256\004\275Rc\016>y\261\276=j\334\250\2752\252\004\275\305\000\216=s\256\336=\265E\372\274(p9<o\302\014>\212\033 \275\201q\302=\0241\212\275!\003\237<I_\312=>\226;\275\232\365\331\275\301\177\275\275\327\033%=jk\226\275\345\014w\275p\017\333<\334\335\000>\323\263c\275Q\323Z\275r\217D\275\337gu;<\247\217\275A\313\005>\335\271%=\335\"\002>\235\267\241\274\000L\002>\276{s=\344\330\301\275\0333\265=6<\275=\211\245\233<\231@)<\235\013\364=E}\230\275\305\363\352\275d\321~={\257Y\274M\266J=!\345|\273\261\366\271<d\250\210\273\032\013\321=\352\307\303<m\312F\272\030\317\265\2732^\031=P\270\257\274~\352&\275q\243\"\275uk\317=\033\343\325\273QM\272\275\027~\256\275\371\020\372\275,\240&\274!\207\231\2751~\231\275\3027\256=\303*\031<@\374\002>\277Y\207\274~i\230\275\315\036\335\275\333J\377=sX\177=Q\316\002>\370\331\300=\312\n\206=2_!\275\323T\206=\354<\230=\220\233\333\275s\227\256=\005\366g\275\257\333\375<>\356|\275\232\263k<\017m\366\275\034\200\335=}\367\351\275\255\364D;\360\304\006>-\003\033\274?\240\225\2755\204\376=G\020\256\275\341\247\307<\206\267\204\275\\OS\275\326\241\222\275\257\247\240\275\001\025\337\275\346\266v\275\215\214\230\275\013K\365\275\354^\211=8I\246<Y\177\324=<\244\206\275S\303\337\275\315\222|\275\035\020\355=\213\304K\275\330Y\334=X@\236=3p\335\274\217\237\271\273\256\361\213\275n\203`<\305\017\270=I\327\002<v\304\242=%\323F=N#\276=\222\252\376=+\236V\275\334C\371\275\t\375\261=A`\341\275\254 \364\275_|h\275f\310\261=\307z\014\2741 \342=\265\\w\275j\013\232=\227\245\007>\324\314\337\275\225\013\254<\031p\037\274\325\314\371\275\222\337\031=\343|\263\275$T\223\275yX\257=\314\035U;z\320\212\274\026\353\356\275\376|{=hE\336\275*o\033=3a\261=\001/E=\260:\267=F\301c\275\371\262@:\033\237\\\2749\365\2109}6\224\275\321\311\241\274@\035\010>Q\276\316=\026\362\351=q\313*\275E\224\375\275\303H\371\275\373\314\245\275\021h\301=5\224\325<\327%\272<G\212\014\274\356B\266\275@\225T=3c\n<\266\335\244\275\227>6\275\034\036\334\2755\236\312<ph$\274\341}\005\275\375\274\036=\243\315\227\275<\026\372\274\361\306\252\275\230\373\010=\324\355\013\275\232!w\275\377\344\276\274\275Q\371\275\247VH\274g@\250\275\020\022\023=\235\2024<\307\257.\275\016[\324=\366\273\007\276\303B\370=\374\006\320\274\005&\014\276\257\000t\275\216\005\215\2742\030\260\275\236\251\245\275b\t\236;\363\014\235\274\244?\017=\300\240\213\2749}0=\371\220\202=_\203\244=\243\225\267\275\335\354\004>\341z\255<;\362\260\274\177\004\000>MU\324=T\303\241\275\263S\364\274\255)\016\276]\360\323\275H\313\266=|~\335\275\362\236>\275?f\202\275!\272\367=-\277\013>\006\331\000\276W\307\375=\266\031\315<it\010>Z \367\274?\022\310\2755\030\200\274\026\213\274\275\376\267u\274H\376\371\275.{\213\274%\300t=\027\204\206<\353\272\234\275\303F\016\275;.\303\275\'w\366<\035\246\272=\271\200\267\274\363\013s=\301\264t=]\314\253=\t\303\221\275\302\323\313\275\000\\y\275q\251\367=\255&\371;D\014S\275\007.@=\353\357O\275\335\322\330=\261\003\360<\030\363\303\275\336\253\225=[\352Y=\261\231\010>\244pi\274\\\033\310</3d\275\343\340,\275n\031K=\024\'\'<\276\034Q=9/\006\276\002\274p\275\2047\232\275dz\347=\000r\263\273\215G\355\2755?\250\275[\236S=\r8\"\274\335\371\203=nf\307=\006\270\306\275\356\254\227;\203\332\322=i\005\006>\370]\302=Q\300\223<\004=\324=Jl\023\273a\354\254\275\360e\304\275\020\213h<\345\033\004>\251\360\304\275\263;*\275\374\0369\275{\355\003>6H\237\275M\347\246=\210\255P;\004(s\275\332^\216\275\243\330\217=+\273\r>e\236\217=\031O\r\276\331\347\220=\356\215\347=\361\271T\275\262@\245=\005T\335\275\331\267p<\213\317\367\274o\267\253<\272f\335<\2545\275=C\220\264\273\024\365\221=\256f\014\276o\222\324<\362RD\275\254q\364\274\356D@=\006\367\311\275\301\353\373=\014\266\324\274\000\3020\275\256\300\\=\344\245\000\276W\204\355<q\313R<\301\220\035\273\371\204\006\276O^\313\273\202\356\376<\017\373\227=\372\340\300\275\025\002\214=\315\244\001>\3735j\275\362u\271=\022\343\n>\247\000\223=\016#\205\274\247s\301\274A\213\230<\375\325\023\275)\233\263<i\315[=\3472\242=]\272\312=\255\332\214\275z\340\373=_\353\001;\245\202\356=\251\335\343\275B\324\210=y\263\324\275\341\211\335=G\362\321\275\357\2348\2744\3262=\023\261\365\275Y\013\302=<D\010\276Ju\334\274\333O\355=U\276}\275\026\330\n\2764\016b=\303\320\331\275 S\321\275\026\363b<\232\001\257=\262\343\276=*\364\245\275\026\007\007\276#>\325=\326\031\357\275\036\300Q\273\223\217\001\276\326\200\277=\323\347\004\276\025)\254=?_\342\275\2546\244<V\237\276\275\036\002\010\276\030X\315\275\006\026\233\275\216q\224<G\016\264=oD\247<vJ\375<\3704\351\273`g\005=a,\001>jk\353\275\214\246\300\275\247l\377=u\257\376\274p\037\227\275\017M\265=\317\236\330<\275\304_\275B\"%=\215/\244;\21658\274\215\314\t>\035,c\275_A\311\275f\220\241=\265=&\273\031E\201=N-\217=\223\352\244\275\r\203\025=p\0235\274\371\333\217=\003V\013\276\236\262\005\276\306\276\007\276\260\n\341\275&\220s\275eO\356=\206?w9\230\357v\275\005\303\227\275Fd\375\275m\261\346<iv\344=7\227\336<\2011\240=T\245@\275\371\021W=R\252&\275\306t\321=\364N\376<\001\364H=\020M\311=\331\300\337=\211\253\326\275\275\320\005\276\361\020\374\275\332<\326\275\312F\213\275i\256\330\275h\200\201<\033\267\310\275\345<\273\275\211*\201\275\252~\365\275\334\252\001>9)\312=r\335\323\275%P\037\275S\341\227=\033I\260\275\364]\310=\256\261\301\275\276\000\273=\367\227\252=U\360\204\274\312o\327<\323Y\353\274\374\313\254=\'a\217\275\335\340\331\275\264\313\221\275m\336\006\275\331y\376<\276q\316\274\216\037\241\275\312\337\264\275\226\224=\275$y\276\275\350lq=\026]\245\275+<\372\275\237hQ\275\210k\237\275\023\'\315=\257\000\203\275\243%i8o\2328=\222\235\n=O\315\341\274\031\225\341=\262H\243=\001x\326\275W\322\n>#\240\200\275\2256\351\274\261\321\303\275}\217\261\275\013\373\236\273\267li=\245\357\265<N#\301=\035u\n\276\204U\307=P\316\317\274\351\331\305=6<\252=\376$\331=\373^\315=\316\273\231\274\177\376\276\271(\013\014<\2504\014\276y]\001>\371O\321\275s\023\353:\3358\264\275\310\034\262\275_v*= \006\356\275s-\373\275\030r\225<\031\217\374\275\022\325\263\273\350{\231<\201\261\206\2743R\326=\346[\377\275\235Y\324\275r\227\004\276\346N\363\275\210DX\274\350\365\000\276u\277W\275\315\273\221=\006\342\t>\023_A=\343\203\325=\377\275\262=\376\014\007\276\341\373\256\275Q\304\037=1h\355\273D\010\241=\221j\275<\"\022\311\2757F\'=@\355\322\275\024D\215\2753\250\226=o\350\007\276{;\335\275\0270\257\275V\332\007\275\347\312\252\275\024\330\340<\212\271g<\364\235\340\274\223\313\377\275\215\202B=\361\3126=n\222\r\276\032\034\374\275)\3633=>\225\036\274\274\274\367\275\004\323\t=\345\326\026\275\r;\300\275\302\213\303=\311)\300\275\212\274\004\276\303\367\037=\224\t\010>\203{u=\260~\331\275\020\353\350\274\216p\246\275\261\237\275\275\245%x=\0049\033\275\216\243\313=dg%=\257v\004=\265\222\307\275\001\322t\275c\\\331=}\324\336\275\340G\251\275`\237\016>H\335\324\275M\033\200\275,\024\343;\034\'\356\275\333\335\212=\010\232\321\275X\375\n\2769S\226\275{\251\216\275\246\235\341<\345l\237<\237d\217=a\206\273\275s\252\007\274\356@?=\233\r5\275\304\033\316=62\240\275\321\035\263=\025\264\244\275\225\374\302\275\324\237\227<\261\202\200=\214y\213<\373_\302\274}\311\215<L\352\n\276N$\256\275\205\262\312\2757\\A=\342\216q\275 \'\325\275$\n!\274!\224\023=r\226\256=\355qU\275o\032[<\024_|<\273\375\211\275X\214l= \017\277\274\313_\315<\214I\331=~`\366=h\337\315\275\037Dp\275\240f\274<`0Z\275i\246\343=\261\000\n>\321\206\303=\376\372\266=\375\242\307=\3556\004=\244\364\021:\217L\016>\305`\201=I\235\007\276\374U\251<yZ\254=O\252\245=&\301\027<E\375\377<\221\263\350<5h\006\276?;2=\251\217\206=\210\366\333<\005g\366=\235\271\341= 8\005>\250\371\235\2754\374\232\275R\337|\275\315\240\310=\337\312\347\275\001\341\351\2750j\265\275b\336\273=t\340\354=\2709\375=\345\246\372=E\347\344\275\306\323\224\275\004\027a<\361\250\013\276\2639\244\275\264\346K\273>^\350\274j\244\307\275\341`\226=\215\214\305\275C\270 \275.<\267\275\272\326\377=\277\201r=\260~ \275\261l\324=#\355\014\276\202u\352=\205\013E\275\306|O\274\217\243d\2759\266\277=\266w\227\275\3715\312\275`\234D\275k\2711\274)\277(\273\014\270F\275aM\365=\261\231)\275J\036\016>\035\212\377\275_J\233=\321\324q=\264\316\035=u\331\362<\273>\347\275\367\000d=\022\236\321=\016K\224=e\322\216<\010J\265=\005\315\177=\001^\316\275v\333\274\275J\353\354\275G\037\376\275\301\205\320<OV\035\275\341g\004\276}\244-=\007?\202\275A\220\017\274H\334:\275j*\307\275qP\253=\274\325\337\275l\322Q\275\242\313\r>\370@\234<e\254\023<\371jt\275\326\254\017\275,\200\354=7\343\355\273\022:\344\274A\211+\274\307\221\004>\247A\341<mei\275\352z\007\276C\013\200=\005;\351\275\034T\000>\t*\301\275\303\200\020=_\304{\275? \257=RT\013>>;\266<v\031+=\244j\t\275<\310\261=\241&\220=\354\025\377:>\220\332\275\2713%\275\210\tt\274\321\021\312=\255\302\265\275\351]\377<\372}\317\275\375f\256\275\365\312>=\025\207\211\275\350P_\275\342\374\332<qe\255=Gd8=F\364\206\275\217B\216\274o\261z\274\230,\006>\364\202\336\274Q\253\226=\366\3140\275\2312\252=\224\344\346\275J\315\367\274]\221\224\275\372\361\340\275\366\377\205=\003Nh=9\374\003>\310\203\024=Z\004\245\275\254L\003\276f\032\345<\261\221D\275\343r\025\275\224\235\204=\'\342\003>@\340B\275\207@\356\275\363\337\220=\021\016\257\275\370\373\016;\274_\252=\013\271\340=\351\313\213=\202k\000>3\202\010\276B\221<=\220ih\275\254\333\260\275)\200\221\275l\214\255\275U\255\225\275\3770\000\276\201q\004\276\314;E\275\372\271\004>\006M\275=\306=\003>\236 \232\275\177\356\220\275\274A\226<\264X\254;\372ly<S\357\005\276\330\217\031\274hWx=o\033\032;\275\267J\273J\221\250\275\232\304/\274@\273\300\275\217\257\277\274l\342\373\275\210\310\204\275~\033\000=\004\247\277=\243\010u\275\347o\010>\261}\007\275\316:\n=\2132\250\275\235\305i\275N\344\252\275\266\032\314\275\301\220H\275}\n\001<\270X\206=^\222J\274|/\222=2\371\341<#\346\365\275\246\327\305=T\335\006\275\312;\213\275YX\344=wI\361=IR\025;\246\252\312=H\006\245=\t\030\356=\366w1=\251\037\r>\366\225\353\275\226\251C\275\352u\n>\227\021,=\0003x=`f\304=\215\264\356\275I\"\272=\227\020\366\275\301z\234\275\273\353x<3\325C=\327\271\t\276\375\027\212<\360\263\276\274\234,\233<\342\033p\275\252nj\274\007\034\007>\270,\276\275\277\026\r\276R\226\323\274J!\004\275\202\2379\275b$]\274d(\315=\252\225X\275Q.^\275  \252=0t;=\202\034\232\274\026<T\275p\2376=\225\331\377=NRC\274\220D~\275\220m6\275\232\261T<<\245\374=\025r\315=\360\240\332\275\267\034\345=G\352\021=\214R\302=\215\202\221=\007\337\005\276\365B\220\275\347\261v=\0138q\274\024Dv\275 \366\014>\262?\016\276\343G\211\271\341\000==\241=\016>75g=\034*\345\275\273\324\377\275;{\010>\201k9\275Q\005\370=NG\332=9y\247=\373\203\325\274\354\024\252\270\345\2241<\370\302\301\275\016NM=q\367\201=}\346\276\275i\376\014=m\005\273<\202\'\014\276\322\034v\274\3663\260=\332\337\006\276Y\006\271=M\021\001>#\n\356=\216\007 \274x\244\310\274\244\357:=P\341w=$\237\277\275+\273\364=\206\001\206\275\235\032\201=\354:\256\274\323\005\276=\362\365\225\275\301\220\327=\366\345\307\275\007\264W\275\373%&==a(\275\322\230\226\273 f\014=\303eS\274wzO\275\0373\262\274\3612\001>s\276\321\273\207\345\337\275\221K\235\275\3227\361\274.:\214\273\375\310F<G[\201\275*\351\r\275\203\'\276\275\214\325R=\335\212\377<a\237\211=\252\210\271\275\3724\256=\271d\303=\211E\363=\272p\360\275>\313\366\274]{\262\275\235\374\216\275\1772\n>\304n\375\275\017 \r>\261!\374;\034\363\335=\244h\244<\243\rW\275)\2162\2750j\270\275\272l\215<\246\222\333<\346\255\002<\356_\215\275\273\307\337\275V[\254=\016\377\177;\241\220\312=\320}\000>W\342M<\267O\001\276l\374\360\275Mf\016>wY\r>\270\214\240\275\370G\213=N\220\237\275\316\232\333=\217*\352\275\000\245\260\274\\\0352=\300\034\360\275\243\236\333\274xS*\275\025\364\024\275\022\255#<\325E\307<\207\000\335=Z\303\221=aL\370=\331\026\271=w\306\004\276\333h\016\276F8\302\273\372\363\345\274A\235\353=a5\207\275\312\351\353=\234x\370\275|\013\016>\206ep\275#\271\306=\027_\325\275\017\313\345=.\030\372=\016\004\003\276\032\305\234=W){=\n\031\301=)\253\301\275\236\353\017\275\274\260\n>\270d\t=\241\003\036=\'Ew=\345&\335\274kA\006\276t\253\215<\006\241\007=\303\261\306\275\025\031\361\275\350(\252\275V\014\026<bC\206=\225\210t=\312\322\217\275U \t=8\231\237\275\337ui\275d\311\305\275\222G\341=\034^P=&\274\352=E\311\364=\332[#\275}\276e:#^\370\275\027\265\225\275\313\350\246\275\177\003,\274ar\243=7\234\320=V\314\322\275\273~N=\010s\373;k>\362\273\341&\226\274\370E\306=/\341\002=_`h=\272}\034\275\364&\013>\"\252\210=\245\256?\274\220\026\256\275Q\365\274\275\003\325\014>\233W0=\177\342\221=aj\027=\272Qj\275\355\300\333=\2009\377=\2225\346\275k\332\371=3\364\223=\354\274\314=\246\303\013>\227g\351\275O[\247;\n\315L=\224\002\004>\215B\257=\227\350\337=B\235\327=m\037F\275\220\217K=\214|\244\275\355N\321\275\245\2237\275\350aJ\273\245\211\007\276\200E\025\273\235\347\366=\356\334\312\275\361\000\325\274\030\226\347\275E6\010>|\232\354\275\222\020\230\275o\245\352\275d\031\350\274\232g\355=\250\201\260\275K\325\001\276\260-\234=\304u\334\275\346B\251<2>\265\2758\265\357= \236\346\275\312\325\216=\375\363)<\005v\274=\312\253\336\275\031\216)\275\236gR=\310\356K\275[\207\216\275Q\\\351\275\356\3542=Jf<=\353\360\215=\234\255\257=\361\231[=\223\205\223=\016i\006\276\315d\226\275\206\rb=M0\256\275\373\373\243\274\005\342\371\275\272\013\006>0o\345\275\3343\206<{W\014\276f\221Y\274\330\r\245\275/Oa\275\"\341\006\272\211\355\326=N\251,\275\202\276;=\237\227\004<\'\223_\275\030\337\227=\267\251\253<\207\337\347\275\240\210B=\264\222<\27529\302\275@\203Z\275x\300\252<}\266S=\346\326}\274\226\203\274=\344\017\206=\2474\014>\036\030I<Wi\207\275\260\326\312\275\333B\t\276\3603\013\276\257\260\346\275uw\271\275\250H\026\275+\362I=\375\223\332=/\276\2739\202-9\275\014`\006=\327\360\257=4\n\343\275\2233\225\275\317\222V\275}\330\331\273I\342\330=JW(\275\276\022\333=\345l\306=.\333\320=\025\373\256\274\035\\\244\275m.\\=:l\255\274\022\234\223\275\332\016\374\274F\2354<\317\377\300=g\272s\275\332\200\354\274xq\270\275>M\274<sn\374\275>\023\307;\035f};\241\305\375\275.\300\002=\300\204o=\003G\030=p<\301\272>\rt\275\"8K=\230\375\t\276|_\361\275\037\000\321=(\343G\273i$\357<1\300\223<\240\021\277\275*W\260=~\366\332=\373\251\254<W\037\260\275\336\333\007\276\025\022\t\276k\215\377\275\305\020\205=\325\307g=\021\343\243\275fdd:\266?\001\274!\325\270=G\236\305\275~Y\037=\247_\010>U?\250\275O\247\261=\t\316\016\2756\233\210=\305h\201=\246\366\256<D\246\233\275\242\363\013\276\226\350\214\275\031\351\016\276\313\237.\275\236\343\203\275\r\231\373\273\334\362\344=\337S\252=\271Xi\275\312;\206=\0176G\275\361X\237\275\360\201J=\026\245\214\275\330\202\376=T9\320\275\232T\002=\302\035\231=6\345\001>*p\344=\201%w=\037\262\220\274\264\227\362=I\324\212\275\244\004\344=\375\027\t\275\311\200\267\275\310\221\002>\003\237\r\275JL\221=\211:\335\275A\360\367<&\340\213=T\234\313=\251h\233=\255\253\000>|\376\256\275<\\\302\275d\014\203=e\353\332=\230\307v\275\027\243\315=\250\333\344\274\302\336\360=v\374\324\275\332\347\003\276\345\350\013=\265\265\364\274\3675\\=\'\257\217=\'\324\352\275^\241\002>\272[\356=\276\026\n\276\026v\000\274\251\016\007\275\021\244q=\311\236u\275\214\362y<\023P\363<\233\272\327=9\375\253\275\335\320Q=\1776P<\337\312\014\276O\234\323=\366@(\275ok/\275V\312X=\023\206\354=\201w\r<\327\006\377=,\026\242\274#|\320\275XC3\274#\276\265\274\005%\203=\"\332\256=/\236\336\275\201\245\205=\rFp\275\274\341N\274\300\371{\275gdS\275=S\222=mj\255;\311\325~<X\n\311\275\247\271\033;\025\355\263\273X\273\206=\020\022\250\2759\3277\275\330\242&=\220\032S\275\240\243\353=:\331\241;oF4=5\214\332\274\250j\303=\247\345\247\273\347\310\001>\376\201~\274e\010\363<\200\263\251\2743\254w=#\206\240<N\305\317\275}\020W=\006^\274=\363\354@=\224\327\257=p*\251\274=\316\341\275\357\241U\275\211\334\n\275\322\3416\275\033\270\351=e\034\205=\001Q\211\275_N\364=g\032\362<\264i?=u\270\260=7\261\364\2754\350\016\275\037\227h\275\251\225\373=dv\215\275\271W\313\275u\206\312=xg\326=\330\305\003>5\217\007\276i\336\035\275BM\004>\217\004\216\275,\024\231\275LoD\275xa\232=}\\\333\275S\205\352=\010W\370=\223v\006>\220\3173\275\026\240u=\273\326\343\275\007\361\373\275\204\250\226\275\376\367\356\275\305K\353=\n\021\017>\356f\367\273\017\013\234\275\024aD<\271M\000\275\346\346\374=t\250\320\274d\350\355=\253\371g=49F\275\003\010\t\276S\264\233\274\242\243\n>\3642\273\275V\233\216\275qy\341\275\\9R=l\035\261\274dn\000>\340G\361=\247\304\037\275\322X\025=/\177\315=\337\\.\275-\251:\275\303\022\253\274\224\321\000>e\372\001>\310\347\242\275Y\364\344\275\262\236\345\275\263\'\356\275\000-h\275`\204\370\274dd\247\272\240^\017<\233=\342=<\350\363=\276\356\351=/\326\013\275\220\341&=C\350\230=\226\032\340\275\220\004J\2746X\026\275:\207\323<\355B\255=\276z\216\275Cdt\275[\256A\274\225\202\205=\367x\341\274F`\332=\212\034\017\276*\245\241\275\025\373\001>\024\370\346\275N\226\334=\"\267\214=.\327{\274aP\257\275\027?\307\275\322\356\306\275\306\037\002\276`\243\232=\026\356\010=We.\274\316\334\000>D\247\322:\212pg=\247\233\261\275reL=\005\340z\274\343\266@=lc\341\2756?\372;\234h\275\275&\322\373=\311\247\317\275V\212\207=\315\331\361\275y\005\306\275\315\244\343\275\367\034\005>\300\035\373\275\326,\270\275q%J\274\230-\377=+\330\327\272\301H|=\354\213\327\275\250\333\321\275\355Y\367:ze\223\275E\003\345<\370H\355\275\026\376\032\275\335\263\364\275\204\243\300\275m\277u=?\227\231=\320\223\\\274\007\207\322\275,\"\361\274\"_|\275\016\227\235=@%\003\275\330]\n>\205\031%=GZW\273\032\256{=N\237\344<\030;p\274\252\340\352=\372\325E=\302\252r\275N\241\245<A\251\277=A\250\326=\340\314\334\275\277\222\177=.\022\236=\332&,=\032\347\266=#q\251\274\374\314\n\276<\231\305\274;\017<<0\330\037\275~\320\321\275\030\003\352=\335#o\275\002j\376\274`f\356\274\337\207\345\275\226\225?:\237\236\341=+\365\004>E\323x\275D\034\026\275\250`X\274u\025\253\275\010\216\016\276\3120\304\274W&~=\334Qg=a\255\313\275\355\322\367=\237\032\270\275\346\373V=\207\357\016>\351(\000>X\275\271\274H\236\221=\217\220\353={dd\275\313\276\354=/\306\303\275\001\357\231\275\230\307\220;\3135\r\276\211\274\274=\'\312 =]\251\362=\206\352[=\310/\000=\256\231\247\275Y\"\005\274l\004\356=M\177\354\275\241Yj9f\264\221\275\212\311q<\177\276\260=hD\333\275n!U\275{\005\340=\364\302\'\275\201\222\204\275\372h\362\275ut\007\276G\236\252=\000\026z=\021\016\203=\333\013\212\2751\251\216=Ar\001\275\303\317\232\275\356\362h<+\207\200=F\267\325=\252\025\242\275\377\216\374\275\320ua=\257K\256\274\361\013\007\274\244\001o=\236\232\220=I\002\345\275\336\323\203=\372\330I\275\240f\204\275\363\320d\275\233`\357\275\336\374\335\275\347:C<\177\022\230\275\t\351J\275\037c7\275s\265\010>\206g\225\275\026{\036=`a\322\274F\231\331\275\2150U=\0250\313=\021<\246\274<\033_\275\013pC\275\233\035\275\2731\253\n>\355\315\213=\277.\330=\013\360I\275$\211G\275uS\004\276j\241v;\262\014\211\275e\234\360;\204SX\275\375\271\242\2755n\004\276\023\367\350<).\t>ni\007\276\030\036\203\274\230\026\273\2758I\343=\265*\222=\3156\014\276\247\251\216=\035\002\363\275K\355\207=\243\324\016=\352)P=\312D\210=\314\002\177\274\243\321@<\321C\003>\370\324\r>\235\343\337\275M\003\324=v\217\362=1\275\007\274\253\016\330=j\357\203=\354y1=\235\267\361=\327\376\213<\313\275\001\276\037\\\312=g\002\355\275\354Z=\275\272\324j=\206\371\300=\211\305\211\2757\020\t>\323=\274=\026\207\346=\302\003\014\275ky\243\275Q\335\223\275\243\323\351=D\034\261\275\251c\204\274\244\t\371\275}\301(<\261Y\031=\306\234\016\276\304Q\256\275\300:C<\361\306\332=\311\237V\275:\\.<L\360\340\275\035\214\215=\376\340\005>\030K\253<\277\345\264\274\236W\001=%\200\242=b\2765\275\242y\342\274\351#\001=jL\331\275^\267\322=\201\305\303\272\217\373\t\276b\'\013>\374\324\343\275\014\227I\275wF\350\275\034;\330\275\351J\373\275W\362\010>\010RH\275G_\002>Z\304\233=(\374\310\275q\021\231;{U\365=d\342\223=c%\222=\307\004\320\275t,\303\274\322e\353=\326\347\353\275\307\'\370:\273\250\027=9\266\351\275_\310\262\275\343<\342=8E\350\2751X&<t\336\341=i\n\203=\2669\016\276X\017\327<\201\2174\274\035\334\254\275\207\250=<\213\211\267\275\364\374k=\321\207\346\275\216\253\262\275\007PZ=]N\n\276\370]5\275Gq\350=\312\023\366=\202\326\r>\320l\013\2730\255I=:`\373\275\256\275\322=^[\273=\033b\263=\377\224\342\275\035R-=\225\277\305=\216!P<H\367m\274\263\224U=\362m\376\275\220\326\337\275\354h\302=\22025\275\261\311\320\275\330\212\002=zg\017=\306\232\006\273l9\243=<\271\232<\342\002\364=\005\'\350=\rT\033\275^3\256\275\201ng<Y\271\264\274\335\240\003\275p\023\000\276h\266\235\275+\270\265=\200y\255\275g\022\333=n\363\301=He\240:<2\326=\352\030\021\275\253\367\301=b0)\275\201q\027\275^6\023;+v\001\275n\265\271=&\333 \275\325=\344=u\360O\275\343\247\362<\326W\351\274A\\\336\275\356;,=\224;\226:\034@I\275\332\250\207=>\241\n\276\333\256\r>\371\324\026\275\"\014\371\274\035\347\004=\230}D=\340\252\367=\327\223\230=d\301\373\274\031+\013=\214X\014=\307%\354<\2653\303\275\302b\002>A\346\n>\365vM<\013\370\032=\342\'J=\272\371\220=<\322\344\275.\037|=E\035Z=\370\322q\275\022\370\031\275\366S\272\275X\\\226\275\301\037\372=\3017)\275?|\014\275B\034\257=\177v\336\275\334\270\227<w\364\004=\317Q\343\275\344\236\014<\005\216\005\275\334R\017\274\307h\014=z=\242=qw\001\275\332\317F\275f\316_\275n\027\226=(Z\243\275\023\301\000\276\344\020\013>I\361\215=?7\313\272 (\246=\364V\377\274\243\226\032\275]\006\233\275\352j\r=\2271\035\275\376\351\273=\360Z\003\275\343\022\323=\367i\276\274i\243\332=\241F\356=\317\260\305\275\251\033\247=W_U<\313\021\363=\207D\214\274l!\334\275-\211k=\301\302/\274}\206E=G\276D=\351\250\217<\313T\"=(\371\\\275\262\377\2227\357\3276\273\222\r\215=\265=\t\2766\344\000>\025\\%=_EQ=\003\335\264<\211\324\007>Y\216%\275\034NE\275\344\206\261=A\026\376=\366\271\322=\032H\320=\252i\202\2750>f\273r\000\035\274\240\367\002\276\277\321\025=\032\337\265=d\\\017\271`\214A\272\\\006\330<\242#8=\244\205\361\275\371\357\316\275\004A\t>d\265\006\276\357\361@\275F\340\301=\030\362\332\274F\036\367=~\217\216<\340\226\016\276 F\356\275\222\247\017=\262l%=\312\343p\275\241\353\317\275\006-\374\275\037\357\255\275\203\321\242\275\224\000\366\275\021\230\317\275\237C\272\274\266\023\017\276!Ew\274\231\027\326=2\002\221=\375\250\206\274UzX\275<\216\317\275V\353\341\275\273[4\274\017,\217;Rw\264=|\217\221\275\003}\000\275\270\270\014\276\221\212)=R\237\251=@_\221\275\373\367\321=L>\"=\352\227\004\276\331Z\301\275\223\261\230\275p\2052=\2462\331=\231\370\350=\207\035E<\271e\270=\270\352\246\275\306K7=\004F\275=BHJ=\234\267A=\320\'\354\274a]\362<\225\331\242\275$\376\013=\251op\275\323\000\271\274k\344\214<\367O\321=>a\352\275\270*\315=ie\223\274\375F9\274\027\201\261\275T~\023\275\320\377\355\275\r\261\002\275\326_\267\273\005 \375\275\336Q\215\273a\336\375=\022D\353\275\230\024\255=\255\376\364=\016\344\002\275\234 r\275M\222:\275\216]\241\275\242\361\210=}:f=\261\030`\275o\250\234=K\000\016\276=<\207:\326N\332\275\270x\233\275\002.\257\274\205m\305<c\305\003\276\362\345\261\275&Z\010>j\005\206<\314\371\371=\023E\270\275\321\267!<GfC\274x\321\355=\361$\237\274M\372\2648\324W\363\274$T\332\275\033\022\316=\245\347\303\275xp\023\274M\177\226=)\260\263=\316\203\001\276\234Y\303=\344\352\373\275\313I\241\274\346\355\"=\177-\353=3!\273\275\300qS\275\270\0310\275\201\254$=\036\003\361=\037n\236=S\010\302\275U\003\n\276O\367\335=gQ\307<\244Z\227;\020\265\332<\235\376\221=e\340\332\2732\356\250\275h\305\006\276\2166\366\275\210J\351\274R\321\234=\037\276~=2\336\257=[\266\002\276\3018\345<_/\304<w\355\231=P\026\000>v\241\341=9\267e=Yq\264<\024\341\373=*\244\356:e\036\226\274\013\343\324;f\225\202;T<\330<\035\330\335\2737c\220\275\235\376\001>\204\202\n>\274\017\355:\251\216\327=\212\370Y=m\354\n\276%\246h=V\256\001\275\240\340\032\274I$L\275v\217\005>\007C\351\274g\213\374\274n\266\274<\334\225\177<\211\274\014\276!\003\220\275\243\336]\275Q\nP\275a\377\326\2757\376\013\276v\237\326\274\312]\215\275\037\311\354=P\022\266\275\226\224\246\275\007\210z=\204;\212\275\332\344?\275B)U\274]6\007>W\005\202\275[\2124\274\2565\\\275=\014\235=}\267\206=\016\351\371=\3112\250=\251\024\323=h\315\r\276?\224\265=\252{P\275{\3259=\002\355\010\275\252\344\223\274)\316-\275,i\306;\374]\013>\013\204\321\275h\351\276=\333\375\323\274\236\247O\275\032\371\013\276;\2120=\324\345\231\273\201\207\320=\"Y\231=\263p\213=\004\352\262=u\240\302=\026\250[\275&\322\005\276xH]=e\013\365\275\336Yi<HM\326\274\335J\241=\343\267.\275\313\027\262\275\013\354\002\275\262\261\312=M\274\376=\322\277\327=\361c\312=\005\206\215=q\362\352\274O\335\263\275$t\025\275\253 \216=o\327\202=3\243\257<\276\267\320=[\240\363==\002\246\275\237\200\266;C%\303\275\314l\317=0\274r\275gn\361<\250b\337<2\375\\<\t\320\003=\212\245\363<*\201\013>D\214\016\276\234o\357\275\3226\215\275.y\006\275oc\254\275\226.\366\275\207\324\013>\350\031\357\274\003S\316\275\345\355\315\275\326\230\341\273\237\301\\=\003F\002==\350[\275\341\237\321=\235\272A=\206\217\344=C\371\345=}+\353=W\033\363\275\313\342\030=;\270\005\276\276\327\245=N7\246<n\036\363=Z\225\004=\377\\O\274\010\207\230\275\240d\310\275\337\212\204:\351\n\004\275\212QD=\030(\230\275\274\334\252\272\020\237\266\275o\307\221=\n\245\342=\221\376\346\275N\224\000\276\371@l<\361\352G\275\330\313\201\275\001\320B=Z\235c\275\203\261\264=\333\317\327=0c\341\275k\016A\275\277s\373=ny\243=dNO\275[\342\201\275\320\023\327\274 \310[=\354\321\363\275yT\001=\210\210\265=V\337\027\275\246\355&\275\236\272\016\275\3548\226=o\265|=$\2015\275\223b\016\276\342\351b<\304\215\257\275\354\004\236=i1Y=\326\250!=\271\357\341=2O\003>\025\031Z=1\010\327\275\r\254\\=\215\242L\275\031\245\270\275\006Q\362=\\\314\323=\177\267+\275G\227\307=\207ng=\343\331\204=$\307\336=</\033\273M\205\311\275\305\333\351=bq\014\275\207a\\\274\023\3551=\000\2660\2740I\200=\";\230\274\002\245\313=\n\324&=\351\325\334=\347`\306=\3456\016>n\032\271\275\330\346\337\275\004F\324=+\002\006=R\202\316=5\245A=L\224\313=ZAq\2749\221E\274\376\274\247\275\001\252\t\275s\032\271=\033_\366\275\376dZ\275\022\321{\275-z\202=)L\250\275\226\327\264<\375\247n;l\246\321\275\034&B=H\364\t<\350\260\237=^\201\033\275L^H\275\257\240\321<\371\016\376\275\024\300\273=s\376\r=\357\305\226=oz\016\273M\251o\275\306\332\013\276)T\222=\374\355:\274Q\264\374<\3433*\275\037W\332=u\360\223<\354+\'\275c\347\362=yK\252=U\312\314=*\333:\2759\260\023\275\202O\272=a9\013>V\346\270\274v*\226<M\257\360<A\341\302\275\313\002c\275\2552%\275\364V\354=k\266r\275L\247\252\274\363\355\371\275\004\262\300\274\344\272\200;\264<\r>}\354\006\276\217E]\275\\%\341=6|\343=\354\305\205\275\263\177\252;\220\\\235=\273\325\220\275\3705\217=R\317\266<\276W\326<\360\256\201<4\245c=~\027\252=\020\273\317<i\350\t\276c\013\250\2750\346\006\276\265\350\267=\003T=\275\003\227\n\276\017xu\275P\344\236\274\006\310n=\270\017\217\275\024\"\n\276\304\326\372=\230\366\355=\273\350\326\275\271\3041\275H\364r\275\357\027\340\271\261s\270\275\033V\225\275\277 \364<\335\313H\274\204\221\361=\262\255E=\345\r\266\275\266\030\303=JI\\\275\264\303\002=T6\3119\201\3545\274\214\272\246\274J\334\005\276\034\027\307\275\324\032\220=(\032\212\275O L\275\337\304\016\276\273\332\316\274\206\326\256=Nig<\276\227\003\274>\341@\275\245\302\005>\007(\326<\265\272\010>.\317\000\275t\341\271\274\277\337p\275\335V\235=\016q\355=\216\360\362=\334\231 <\271\001\215;\367\372\255\275\027M\005>`<\264=\243E\312\275\206\241\311\275\274\004\t>\347A\013>.\007\345\274\322\354\250\275\266\316\350\275\362\032a\274\010\371z\275\022\365\001>\263\364&\275k\273\010>\036\274\235\275\342Q\224\275\271(\307<\275\203\033\274\312\212\244:\205H\r\276\003\035q=BU\007>\215\033\324=jd\362\275p\273Y=r\315\003\274\377\312\321\274\"4\267\274\037!\344;\314\014\347=\247\310\r\2742{\203\2759\224\210\275\222l#=\226\373\231<\235\214\334\274\215\350B=\302\342\242\275]!\235\275\372\344\342=`\267\355\275G\350\312=\335_,=L\034\373=\222Uv\274\235\273\243=+\236\305<2\233\247\275}\3474;Z\301\264\273\027\210\272=\037<\\=\025\377#\275\226\351\234\275\t=\000\276e*\230<\203r\376\274\240\226\373=i\253\004>o\215\276:{\037\210\275na\371<\273\225\347\275\277\177\244=\241i\r\276N\203\371\275j\265K\275\004\263j\275ez\010=\023\205\275\275\314\250\001=\266\372\333\275\223x\244=\014\367\367\271\273\276\007>o\360\203=Q\344\306=\2251\002\276\320\233a\275\340\210\203\275-\033\016>\226\001A\275\372\037\222\275$b\005>\206W\267=~\304\002\276A\312\337\275\2025\025\275\014\317\251\275\326\305\213=\347\307\262\274\320\223\240\275^1\300=\274n>=-\t\003>e\312\250={\224\223=Vx\271\273\345\321\222\275\337E\301=>\353i\275DI\366\275dz\321\275\324\031\234\275\315:I\275\03175=\007\241x=[\223\n>\351w`\275\342p\263\275\350O9=\345MD\273\276\260p=*\323\212\275(L\026=\214\032i\275\270j\204\274\010\316\001\276\344\347\265\2756\226\342\275\277\300\310=\230\007\365=\006\206\344\274Dxx\275\207\027\267=\002\304f\274\1775\351\275\317\253\n\276\245A\253\275^\245\204<\222\001\304=\271\226\261=\351S\002=\033\237<=\202E\242=\220\000\004\276\356&\367=\276\367\203\273@\262\215;\264\336\325=\205\023\025<\'\242K=<\217\356<\250-\354\275\257\014\010>-\"\272\275r\316\363=w<\262\2759{\004\276\265t\322=\035\303\341\275+/\332\275&\374\313\274I\2255\275\273\033l<\3106\205\275T\240t=\220-\366\274\277\330\n\276\302\005\007\276]\372X\275\032\375J<\007\367\340\275\273\024\346=\372\347N\275\247:/\275\250\207\263=\221\234\216:\237W\212\275\365\006\3659i\335>=\204\252\220=n\262]=5\307\325=\036\326*\274\343F\034=Bg\364\274rV4=z\017(=>\264\013\276k&\207<\264\315[=o\"\314==E\340\275\314\2664=s\002\373=\242\215\203\273\007\3767==\316\t>5\232\007\276U\020\025\275\033\202\023\275!\216\276=\330\237n=\260\242\r=w;\225\275\367L\343\275\363Fp\275\033)\022=\362@\315=5\365\224:V\221>=\220\303\250=\224\001\376\275!MI\275\334\264\033=\005\205:<H\243\023=\007\362\205\274>\230\030=zKg=\303\257I=\230n\222=\311\334\243\275\267j\r>\351\323\317\275\243xY=P\356\314=\225\214l\275\025\010\001=#k\270<|n\230<\365m\365=\243s\344\275\376\207\367\275{\035\224</E\215<\\\317e=\215\331h=6\331\007\276_\340\370\272061\275*\006\325=]\336\375\275\321E\r>H\302\373\2755k\321<Lgd=`\305$\275\342\224\367=\"\330\240=\347\230A\275\310[\\=\3070h\275\022\363\300<\345\201d\275d\264\204\275[\333\337=re\'<\010h\334=8!#=\216f\253=\264:\237<\261\371?=\260\232\336\275\'\002\273\275\262(\307<R\n\256=!x)\275\243\200\016\276Q8\002\276\344_U<\240\216\263<i`\331\275ts\010>\356\tU\275\016$(\275\333b\232\275cVe=:\340O\275\274\332\000\276Q\262\351=\223\334w\274\252\225\003>:\221y\273:\214\306\275_SJ=\341\346\246\275\306\207\324\275\266@\252\275\005\316\275=\275\364u\275\261\340\364=\0016\'\275Z\022\006\276\031\230\354=z\373\005>\243\317\314=LQ\004\275\307R\030=\310\335\243\274\373\026Q\2751F\236\275\361a\253\275*\267\031\273\331\242\r\275\016O<=\323\2314\275yCs=\216D\024<U\331\311\274\317g\354\275\230\362\251\274K\035\253=;C\204;a\224\201\275\246\373\203\275\361\221\340\275]\314\330\275\026\023P\275\013\335\t\276@\210\005>K\312\006\276|&\213\275.\010R\275\014\3611=Y\307\334=z\301z\2754\324\216=\225>\240\275*\256\270=\225\214U\275v0b\275\300L\236\274z\306R\275`\363\014\276^\006\255\275o7\262=j@\362=v|x\275\251%\355\275\2357@=9\177i=\222\231\002>\324\310\322\275G\336\004>\331\255\213\275VZ\010\276\313\351\335\275\317\224\370\274\255\nv=O\305@\273;\320\302=\257\304\242=rk\003<\222\267\345\275\030.\020=\350\0239\275\330~\002>Z\304\317=B\377\363=\017\317\363\273\356\223\275=]u\377=*\362\357=F\216\227\275l\001\307=\320\230\361\275d&\273\275\0359\361\273\207}\272\275\t\005\246;SG\357\275\231\222\316={\300H=\033\333f\275w\233\223<\177 \253<\253\004\t>\275\302\340<\260k\024\275\351\330\206=\2574\216=\311@X=\213\310\270\275\177\323\036\275\0007\214\275\370\374\243\275\232\\\007\275M\253P<\300\275\342\275l#l\274ry\330\275\004\316\007>\335\375\257\275\303\374@=\353-\374\275\376\250d<tG\003\276\'\341\255=\374[N\275\377\275\016>{%\235=>\345\001>!h\313\274=\240\264\275`\r^=I\265\016\276\334\214$=8 \226\274\234=\267\275\254\025\247\275\243[\333=\275W\247=)i\034\273O\201\344=ry\366\2752\236\005<\204\314Q=\023\355\236=%\257\000>W\365\267\275\243_\370\275\262\261\345\275(}\265\275P\213+=!w\270=\235\277\270\275\354\202\311<n\237\010>zd\260\274zZ\200=K\273\213\275A\033\t\275\334K\240=\355\327\365\275\363P\"\275\231Q\2519p\026!\274h\276\210\275we\330\275d\247P=T;\364<\233`\263=%\031\030\275\362\211Q=\342y^\273\265|\310=\364\251\273\275\340,\251\2734\013\244\275\207e`=\311\0040=\301\326E=\227U,=(_+;\373j\014>\017\237\374\275u\020\302=\261\307\325\275%g\253\275\306\304\356=k(\004>\223\312\345=\006e\233=&4\250=\270A\361\274N\230\016\276g\301\360\275t\227\004;P_\263\275\376\333\010\275@\210x=}\244\003\276\227\006\311=\203!\273=\257.\"<\nk\245<\202`\331=\352\2703\275\355\333c=\354\220U=\025\301\177=^z\351=\351\026\013\2767+\247\275\\\203\224;\3433\260=\236#\033\275\322\203\326=\024\233<\273\277\000\213=\364\261\010>\253Y\221=L7\311=\002\256!<\334\310\340<Rgc\275/X\231\274wy\300\275\356x\271=\023\374e\275\0358\376;\323\001\002\275s\235\010>\215\244\332\275\206\355\t\276U<\203=\261\241\214<\307y\202=|\314\362<\2628\210\275\373\350\345\275\236\300\261;\t61=B\271d\275\364\232\371=\010\223\375=XA\003\274\357\251\324=\276Q\206=\2154\355\275\321\353\327<\343\003\016=9-\010>F\372\303=\215\207=\275|/K=\303\340\014\276\376u\215=\321\366\324\275\224\371W\275\213\315\212\275\272 \276\275\2671\324=0\232x\275l\251\006>T\201\337\275\263\317\235\275Y\223\r>\261k\267\275EK\256=\226\256\325\274\220\271\311\275\177G\017:\031\025\016\276\237\366?\2757D\266\275\267\007\246=\366\031\204\275\343`\327<\037[\325<\347\004\261\272\361\266\026\275\3522\255=\250\370\267\275\2312g=\013\233\034<&\r\350\275\000\365,\275\no\243:\307\300\205<\210\250j<1\241y=l\300\320\275\213\035P\275h\006~\274@\330\315\273NU\335\275\370\251\373\274A\357\372\275<\271I=\325\227A\275\275\341\361\273\204\374\013\276rO-\274\t]0;\rU~=\022\326 =k\311\334\275\254LD\275_\2364\275u\236\004\276\340D\234\274\000\002\360\274\'\020\355\275&@G<\222\300\316<w\370\240=\366\362\212\275)dh\275sh\356\275E\275\236\275\016\264\252\2750\373\220=\333\310\252=\267x\230<\016)\243=\214a\335\275\276\037\223={\373\033\275S\377\350\275zM\353\275NZr\275\357\265\r>\372\336\221\275/\003g=\177wF\275n\027\000\276\264{\215;\360\367\217<\275\005\205\274\r\237\215\275E\017\004>\230\003\246=*/\037\275\221W\'\275\231\277{=\310\022\232=\272\337$\275\341\341\305<\266p\221\275Kk\023=|K\002\276\377\236\007=4\267\272\274\332\327\247\2743}7=-\014\227=q\244\255=8\262\310=F!T\275\372\373\246\275\236\001\033<B\026\312\273\023\205N=\250\037\325\275.\200\006\276\205\373\377=\203\207\247\273\r\027+<t\327\232<\262\256\335\275\273&\356\274\034\304\342\2745\220\355\2746\241\035=\216\032o\275\236\n\355<\247\262\377=\377\304\250=\031\024\355<!\200\343={`\005\276]\303\001\276\201l\235=(\244{=\220\313\301=\375\231\026\275\256\t<\275\325p\356=\013y\r>t\361\203;2\034\270\274C\360x\275\353\335\237=\033\3268\274m\275\333=N\314\213=8\231\215\274vV\353=\010\310R\275T1?\274\216\017\357\275\356\301\210=\336R\274=|,\254=\004\322]\275A\375Q\275\201\317\230\275\321r\005>\236bj=\243\331\234=kG\000\276c\240\245<\023%\375=%\363\320\275\355\353\237=\247\307q\275in\013\275\271\340+\274\313z\336\274\306\002\274\275X*\365\275s\\\310:\211\266\352=)\037r=f\312\\=As\221\275\233o\020\275\340\376\372=\264\010\253=\001\245\370=O\340\301\275r\367\n\276r\242\206=\245\335\374\275[\231\320=\217\327\351\274\270\202\242\275\021\247\322\275i\210\261=~;]<\035\313\275<\232E\221=J\256\357\275B[\206\275\031\206\272\2721\357\r>\215\236\251\275\311\231\337\275\372W\356\275\341\336\031=\310M\370\275\264\257\367\275\221w\347\274\020U\353;\307U\332\275\000U\371=\323!E<\237\235\347\275C5\341=`J\306=@\\\310\275\"g\211\275B\230\237=\302\307\r\276\016W\324=\303\257\016\276\0351\010>\316\224V\2750\010\201=\345Y\267=\341\363\026\275\310\224\277\275\374\340\3269\243+\215=\2443\342=\247\314\r\276\363 _:\034G\233\275\254i\336\275\301X\204\275\253d\372=#*\004<\030\311\360=6\030\227\271\223[\270=\217\310\306<Iz\323=\021\343\200\275\266\375\202\275\341\313\030\2741E\327=!\313\000\2762\207\211\275)i\200=Va\273=6\312\016>\3269\324=_\014I;\241\342\002>\037\0143=\335S\363\275f\317D=\203\301\344\275_6\\=\367\'i=6\334\323\275\226\232\203\275\350\211\236=\324M\206=I\240\025\275\337\t\203\275\367d\334\274\212\003\305\275H\244/\275)\030\256\275\323R\260\273s\241W=\277\310\177=\312x\002>,\"\227=! \242=\370<x<\034\215\324=A<~\275\177d3=8*\350\275\252\337\217<\244o-<P{\340=\243\303\327= \006\253=pO\307:j\325\014=\033b\370\275\364H\376\275\336P\330\275\017\016I\275\236[Z<b\265\001\276\025\302\003>2D\237\275\350;R\274\300p\350;S\'\003>\305B\207\275.+\301<\267[\t>c\334\274<\002L\362=\327\335I=\210F\203\275\340\007\016=\227#9=\350a\261\275ZX\304:\232\252\220=d!\346\274\362O\016\276\324A\315=\346=\013\275\274x\311=\023\377\234\275\264\272\314\274c\241\335\274\265\235\213=\222\342\277<\204\306\t>Y\004\366\275]\263\203=NG\240\275\352v\242\275\240\301e\272\330\201\213\275\242\177\235\275\004SJ\275\214\215\014=\267\345\256=L\177\376\275\223b\276\274$\205\006\276E\203\307=zX\377\274\356\306j\275\262\202\244\275+O\345=\014\nP\275\314\342\206=;\017\203\275\364v\331\275\346\000\234=\236\022\256\275$\017\005\276\275 \022<\317 \345\273\376\005\362\275\263\216\226=\267~\251=V\237\354=\010zt\275\322j\317=r\364\307=6\364\014\276\031\322\220=\342?\244\275lLJ\275\266\"\332\275\201\360\310<\325+\357\275\271\257\010>u\016\257=\323\004(\275\260\030\367\275)X\234=\300\330\333\275\000,\356=\243\\\214=\t\021\211\274P\366\336\274\376\036\260=\377\373\212=D1\027<n\000\255<\353\030\001>\206\310\001\276\212\362\006\276/\361\300\275f\250E\274hI\212<\010\234\306\273\335\027\312\271\266\205\214\275!P\312\275&-\222=\364\252\324\275\265G\004=\303u\234=;\253\270\275h\026\206=T\010\003\273\253-\323\275\200\034\205<1\022\004\276\327k\265\275\242\014\235=\326\304\213=l\243G\275\036\340\263<\370[\001\276\364\205\003>g\025\277\275HP\311<\242b\224==\315=\275M\340\231<N\036\273\275N\346C\275f\373\232\275\341|\217\275\203w\264:\335o\373;=h\265\275\007\332\013>a2\250<\026\327[<-\241\367\274<\362\266\272.c\220\275)\036\364\275\315\240w=\310\305\005\276\303\315\241\275/M1<q\227\256\275B<\346\275k\232\330=q\213Q\275]\003O\275\211;\007>\024!\207\275\356\243\030\275\275\365\022=k\361\023=\302$ =\260\260\354\275\240C;<mI\211\274\366\300M\275s\t-\275m\357E\275\031\210\014>\317\362\304=\370\222\311\275L\202\314\275\3440\247\2742\340\202=\\\212\335=\241\223\035\275U\017s9\265.\002>\365\177_=\203\257\200=C\356\254\275Db\016>\252\324*;\243ik\273\217\221%=\020\355\264\275\344\"^\275d_G<rG\222<\330E\322=#\311\244\275\242n\236=\312\025\236=\335\345\245\275F\363\004\276\'\214@\275\n\374\241=\320\022\022<\340\366s<\0258\t>\243&\327=\210\352\305<#\306\212<\3679\201=npO=\370\240\003\275\\\222\n\276q\322G\274&}\202\275\346\233\261\275\263A\270\272\264,\324\274\036\027\246=\273k\257=\221\344\276=\214\323!<\223\244\016\275\002\3518=\276\373\313\275\t\253\"<\216n\340=b\341\312\274&\223\200\274\241\372\363=\355\315o=c\034~=\202\331\236\275Ws\267\275\375g\017\274/\017I\275\272(F\275\255t\t<\377I\366\275\324\204\006\276?\300\264\275\336\023R\275B\\\000\2766\251\267\275v\001\000\276|\333\005>\342\254\314\273C\337\210\275^\325\340=\303\372\030\275TC\250\274\337h\"=\027\274M;R\244\316<\237\227J\275\344\335\322=]\217\304<\353\215\313\275\023\017_\274\352\252n<\367\212\264\275\323\006\323\275\240E\302=w\002\251\274\341\365\262=\366\355\272\274!*\335\275\324z\351\273\237\001\242=\365,\257=\325\330.;\221D\247=\271\026\367\273\372\000\231=\234/\034=m0\277\275$+\202=\"y\003\275\346\234\002\275P\304\'\275&\337\345<\016\217\024\2749\024\r>u\245\216\275\232\340\361\275\0309\343\275\327\370\006\276\373\320<=y\342\306\275o\010\226\275\246\211\357=\221\250\304=\033\313D=\360\255A\275\223n\003\276\0348\370<M\357D<\345\033\203=\351\312+=\212w\204\275\204\270\222\275\230\215\264<,t\335=<\233\204\275\203\310\261<\264\244\370\273(&\203=\373\004\376\275y\334\013\275\034|\353\275\374\177\265=\256\'\016\276\024\221\367<O\333\342\275v\377\336\275\245l\'=\351]\250=Z\221\030<)\352\360\275\247\000\334=\023+i\275\256\036\335=D3\000<\2135\216=K\371\234=\025\005K=O\372/=\034\373\007\276\244J\325\275q\026\244<\255\372\374\272\027\226\247<\252\366,=F\025R=\ta\326<\201\273<=\304\224;=\326\277\250\275\243\307\233\274\354\341\252\275$\202\217\275^\t\310\275\253^\332<\215:r=\262\212\013\275\017\300\324=(e\t>\201\263\364\275\214\026\237\274\307em=\321+\242\275y\221\202=\325\221\250=: E=\201|\275=\333\002\\=\215\005C\275\357\351\216=%0\312=\357\345\354=i\252\235=2\216\232<&\334\303=%\333\006=Z7\315=\312<#;\226Q\272\272m\241==\365\013\213<\204q\354=\326\361\201\273>A\032\275#\323\346=\000.\324\275\337\003<=:\t]=\261\243\306\275\234\306\345=2\240_\275\205\257\353\273\3647W=\202\246\202\275\2109\006\275\266\010\342\274\000%\345=7\223\224\275e\376\001\276k\314\277:\262\306\350\274\273\024\035=L\031h\275t\301\335=3\305.=\266P\275:\036\244\'<\375\367\245=9rD<\215\000\016>\016jW<\361U\206=|\022\211\274R\014\263\275\226\010\036\274\005+ \274\305!\254\275\"\267\005\276\333w\255\274,\363\\=lV\367\275f\303\005>9\014\017\276\321\304\t=\231\016\256\275\263]\021:\206]\372=D\324\252\275F\351\263\275\255\036\000>C\264\244=~\201\356\275)\214\n\276\344\305\253=\003\3131\275\177\261\274=\226b\014>\002fr=\357\267\301=\264\272\251\275\277\002\005>\255\n\243\275!o\035=\345W\006\275\351\344w=\234\024t=E\273\246=\037AY=J5\231=\031b\332=?\353\002;4\323N\275\204\036\242\275\320\247\265;H>\244=\005\311\307\275\257Ky\275\217\\\346\275\037\005\321\275\261\266\262<\345\374F=\343@f=$\031\215=\021\334\222\274\024\361\006>\316t\314=\316\374\310\275}\235\265<5\021\233\275,\214\006\275\010\017\016\276K\222\000\274A\026\003>\370\240\206\275\016\000\273=R\030\307=\207#\262<o\330F=2\252\007\276W\371\274\275\275bd=\230\306o=\022\024\275\275[q\211\274\221\364\357\274\360\337\263=3\203d\275%Z\260=\233\'\300\274^\345\323\275\2073\251\275\tCq=\223\316n=\316\333\330\274h\342\376\275f\364\250\275I\r\345\2748za<\324\024\371\275\267\004X\275\342Y\016\275J\364\272\275 \034\220\275\020\215\302=\244\211\342\275\312\246\237\275\304\314\265=b\230\201\275\275\320\201=a\002\215=\322\004\022=\034\213*\271f\376\270\273\253\014\310=\225j\004>|\221\247<4\276\014\276\014c\235\275md\306=\261{\262\274\252\t\221\275\003\341\r=$\211\014\2761\001\315=\331A\220<n\365\224=\317_\243=7@\360<p\372\016\276I\377s;]\342\275\275u\272\220<dd\365\275\214dy=\334#\242\275\005\271\232;\nT\016\276\300\203I=L+\251\275_\000\304\275KK\361\275\321\n\201\275x\014M\275\212\331\347\275\223\221\242\274l\230\200=*x\016>Z\353\025\275QS\221\275\230\211\023\275\242J\024<\322\322\234=\316\355D\275\252\r\277\273\304\214g=\2408<=b*\270\273\256\276\345=\273\334o\275\345\021K=\263FG\275\n\263\247=\214\250\014\275\037B\226\275\363\217\233=E#\375\275\343\272\255=\226R\013\276\235\025\315\275\302.\200\275\242D\201=\234\204\267\275\215O\346=\343\005z;\216&\273\275\234\324\323=\005\340\364\275L\367\004\276\324\334\007>\360r(=J\003\374\275\236\000\322:\340t\217=\036Re\275F\014\236\275oa\362=o%\335\273L/\337\274\205C\"\275\275\370.\275L\034\345;\266x\371\275\272\320y<\225oF\275\340\344\033=\320\261N\275\273\313}<5\345\367=yS\303\275\274\362\372\275{\374\227\275\347k\033=\356;\233=\232[\342=\206\027\341=\332\200\332=\326\354\033\275\2537\353\274-\221\371\2752C.\275\355C\005\2765\014\223\275B&\305<\363@\312;\027\222\220\275\255\251\244<\261\347\002;\017>\243\274\223\226\327=4RE\273\376\250\217\275\311\006\270\275\265<\221<\346v\\\275\363\243\213\275\344\347\377<\310\211\327=wqh=\236\333\342\275Of\251\275y\023\270\275\216\362\017\275\233\355\356\275\207\377\006>\2119\247=oR\370=\221\247\206\274%\020\014\276\010\005\007>\022\207\374=\037\307\r\275X\ru=\345`\n>\320\215f=U6\031\2748\'p=|\177\207=\013\235\275\275\245\014\347=\366\223\374\275\037\n\241=\300\360\223=\204P[=N!\222\2758G\337<Z?\3319T\361~\2749O\267=\357}\227\275\300\243\365\275\010\227\231=\205t\372=\326\326#=\351\253)\274\211U\302=\035\325\210=\201\232\014>&\336\r\276\002-\360\275w\356\003=\037T}\275\217w\233=\240\373\377\275\2456\373\275\266\376\352\274\377\204\262=\205 \017<\224\026\320=\t\315\312<\010\334\232=U:\003>A\265\016>|+\272=F\332\017;\340\313\207=Q\333\307\275>\201\374<\263L\014>\254\027.\275\2776T\275\245\276\224=I\036\201\275\316)-\275\320d\240=\212\005\355\275\220\377\335=\206\2265=5\177\323=\210\'\331=\376,\t>:K7=3L\327\274\211\022\010\275\245E\001=\226\253\257\275\301*\307=\276\005G\273\\x\350=\014\300\004>\267\321\253=I\332\232\275|g\317=)\214\013\274m\346\350=m\373\206\275,\353\267\275\001\352\347\275B\006\037=L\342\263=^;\231<\353h\000=\236>\004>G \235=\327\375\n>\332\236L\275.\233\321\275\316\244\014=\202\351K\275\2778\325\275#g\035=3R\016>k\234\212\275\032q[\272[\210\261=\177?\343=\307#\246:\251F\005\276\337*\010\276\377\324\301<A\252x\274\267\010\223\275\'a\326=\214\315\n>Q?\030\275\234x,<;\364\340\275\242\"\034=?j\233\274\244\024\010\276Q\273\300=}\307\355=A\330\314\275\203\275e=m\006\031\273\357+\322=\247\255\267\272\331\220\333<\177f\r\276D[\200=>\366\033\275\326\022k<l\335\014\276\243\343\001\276;\246\225<%\271\204\2759\365\006\276\252\247\237\275\372l\016>]\367\r\276\250y\273\275lU\357\275\222{\000>\375qA=\344W\271=\305J\365=\371\207\226<&\221\376=\217\335\244\275\361\307Q\275X\251[<O\344O\2750\n\276=HQ\371\274\032\214\202=\323`[\275\007\225\362=\321\022\027=\375\325C=\204\277\371=v\367\245=\355e\272\274\177l\320<*w\004\276{pV\2755r\250=\014>\013>:\223\356=\353\325\003>Z\300\332\275\212\336\252\275L\002\005>\215\\\200=\234\345\004>E\344\275\275a5\233=\035\323\300=\357\262\247=1s>=Q\322t\275<\236\267\275\235\t2\275\222Y\013=\226\t\344=\025]\027=\226\361\263\275k\313 \275\326\263\202\275a\330\366=\354t\375\274\'Z\366=\276;\253\275}2\014>=\234\017=\251S\007>C\357\200=@\371\276\275M\274\013>\353\234\300\275l7\256\2746K\312=,\346\320\275\2777w;\014+\361\275;\345\217=\313\ng=i\272\353\274\344]\333\275\3509%<\032O\343\275\305\223R\275\203z\023=\024\362\224\275\214+D=_\321\232=\205d\t\276\341\236\372\274\220*\311=\300t\333\275j\027{=\221q.=:\372\224=\261\032\001\276\333\237\230=\373n\355<\345\255\265\275y\377\n=3oD\274\363\032\263=\244P\230=\304\260\261\274\211\311\261\275\365]\336\275X\033S=\316\312~\273Ks\022\275\254g\235=\222\233!=\367\032\255=\247\260K\274\024\224\225=\254Q\333=\220.\'=\366c\253<\246en\275,\232\006\276\212J\334\275\245\366\257\274\376\312\251\275&\276\220\275\217\r\301\275dZ\231=\360\224\n\276,\365\303\274\2331\377=<\263y=C\236\004\274\354Be\275Gh\252\273\364\235\000\276L\243\335<\333\275\001>\326\007\364=9\314c=\346k\016\274\t>\n>\370\347\241\275\342v|=\301\301\304=\030]\370\274\226\363\013>\020\300\004>\211\361y=\227\253\202\274\002U2\275\007S\330\275>\\\203=[\341\251\274y3\254=3\250M=\205\253\324\275\'\300\375=\376\204:\274\377kE\275d\353\372\274\036\234\027\275\345\t\224=\331\005\227\275\020h\260\275\355\226.\275}\242\272=\nQ-\275TT\205=\240\326\030\275\026\"\000=\345\263\275=\257i\016=d8\245<?V!\275i\332\326\2751\360\241=9\314\232=1\225\r\275\221\334\371\275\203(\265\275\331\323\233=\327\220\270\2757\235\347\275\3732\342\275\217p\332\275\3231\002\275\341\235\023\275j9\222\273oT\241\275\022\336M<\004\0136=$@7=\206H\004>O\303y\274\350z|99\253\340=$\273\267;U\230\014\276e\317l\275q\342J\274\364\254\031\275\033\272\235\275,\264\220=\377-\330\274\317\251\216\272\005\352~<\326\303\262<-\345\312\275\324\337\355\275\233\363\322\275\250N\t>o\222\242\275\257A\372=H\200\325=7\324\304=UM\241<\220\274\347\275\330\365\225:NR\321\275\242+\340\275\005\037\317=\355l~\274\254\220\313=\330\t3=\334Y\365<|\330\352\275\311)\263;\277\336\n\276j.\022\275n\235\236;Qj\360\275\331\033\305=pt\217=5\\v<Q7\331\275Q\244\247\275H\210\376\275\224\343\301=\023\304I\275\302)\004>?O*=\356\336\245\275^\334\315\275YG\357=e\270\010\276\321\363\264\275\345\305\365=3\366[\275\235\026\006\276\243\273\215\275\272e\013>\223P\006>\217T\247<\375 \244\275\027\306\256\274\353\331\346\275\274\024\340\274\317u\255=\300\"\377<\363\335\233\275\010\033\264=Nl\351=\357\243\253\274wu\240\274q\244\224\275Ze\276<@T\270=jA1=r\000\264\275\262\034\005\276|\306\020\275\363\030%<\362\232+<I`\316\275\367\321\237=9\000\210\275M\251\351;\317\370\310\275\2655w<\375\200{\275T.\234=\231\205\272\275\241\220\323\275\336*\366=Z\022\270\275\343\232\006\276f\352\003\276\207\006><\205\230\233\275k\350\005>\032z\362\275\257\267\376\274\022+\203=\357t\216\275z\017\334\275h\224\007>>\n\205\275+\005m;/\001;=\3528\352=\247\314\270\275\261\201\347=\357LE;J\353\014=\253\221\326\274\305\235\215\275\250 |<\342U\316<\247\254\013>3\001\331=\246\177\203=\363XD<\310\351\356=\n7\274<\260\212\244<\030\033\005>Y\205\276=\317_\266\275G3\203;\237\204S\275\216\374\205\275y\323n=\345\017\241=\330\342\356\275\206;>=\256n\270<E\023\'=\377\273\344<\370\266\230=\003K\364\273R\037\352;8\350\371\275\003\361\237\275\307\017\r\276\025\t\233=\222jm=\2678%=\354>~=q\262H=$\276A\275\202`\336\275+\327\200=\320`\026\275\342k8=\001\240J\275>\261e<\360\274\t\276\246\311\031;_\r\251\275\"j\263\275w\302;\275\312\266\374<\216T\006\275\016$\001\276\310\374\331;\316\322\235=P\"7=\334\240\013\276\222\356K<\326u\211=\344T\356=\314\323\266\275\017\345#=\352\036\336\275\274\014g<\002\301\372=\252r!\274\256\223\257\275q\032\320\275u\252\343=\203W\222=\241\330\372=D\203\326\274$[\325\275BY\372\274\350\ra\2751\221J=\232\347\377=\006/\304=\260\025)=vIu=c\266\021=\203\267:=\362n\032\275\325R\235\275J\372\265=_\236\255<(\205\221=7[\337=\024\035\205=\241v\007\276L\'\221=\227\253\013\276\306b\363\275\272d\264\275\302{\276\275}\265`=\366\310\t\276\205\271\237=}\235\355\275N\177z=$\246\330\274 3\360\274Gd\206=\220$\335=\354\342\206\273\302r\004=\240?\254=T4\232=K2q<\000\332\357\275g7|\272\337K\016><\235V\275\024H\316=\327\367\367=&\307\355=\270\nn\275a\006\000\275\230\307\237=\025\363\232\275\271\222\326\275\301=\264<jg:=\\\021\221\275N\036\370=\316\221\021<\310:\004\276\221\371]\275\277\355\006\275\246L\021\275\036\266c\275\302{\312\275\032\023\020\275Q\226\\\275\350\t\345=>.\n=\267\013\321=VJ\237=\244\231\001\276<\262[\275\'\007\016>.Q8\275\\\264n<\'G\255=i\252@\275_\025\257=\211\207\343\275\0268\362=\250JG\275V\221\341\275<\217\356<\270W\'=]\240\326\274\004G;\275w\031\230<\216\301\251\274\300+\r\274g\264\204\275\272\250\256=<\312\321\272\020\013\356\275\3617\002=]\372R=\324j,=\301\337\001\276\253GG\275zp\036=\251\355\354\273<\335\016>\030;\t\275TB+\275ec);\325\244\022=\037\257\262=\"\n =\234\333\373=\261\004\245=z\260|\275K\327\242\275\373\r\333\275\334\010\364=\276\242\226=@\313\325=\235%\265\275\245\026\014\276~2\253=\364\341\326\274 \257\207\275a\271\371=Sz\246\275\246M\207:b\326\263\275\035\017\003>\250\315\244=\027\005\334\274Y\032\016\276b\304\310\275\225\017\332\275\376\234\007\276\265\t\330=\353\254O\275\205\304|\272\332\311\265=X@\013=\253]\r\276\254\231o\275#\340\204\274^\244\274\27579F\275\210\221^\275_\224z\275\023\363S\275\306\365\020\275\373\201q=\267\305\223\275\226\205\221<\006y\217\274R_\273=\351\363:=\230\241S\274\232.\205\275o\314\256\275\363\235\003>\235C\352\275\367\t\275=\264\266\213\275$\\\350<\363\330\371<36\274=\226`\327=\356\344\242\275\346\003\327=q\257\300=L\327\353;\360\t\242\275\340\273\r\276]@\375\275\330\246\232\275\250J\016;xs\007>K\021G\275=,\033\275\352\377J=\377o\326=v^\377\275\233$\013\276}\310\274\274\255z\335\275vX\244\275\031\320\372=P1\253\2754\036U=EY\262=\221c\331\275\'\232\236=\327i\310=\372F\347=\344\305\301\275\034x\330\275\230\275\255=\365\314m=|\375)\273|\026\021=\245\245\r\2766\301t:\317\200\r\2761I\n\276|G\332\275\3362\013>\003(\374<\313\003\r<\020\345F=\312\036\356\274\316\205\375\274\014H\350=\r\220H=\005f\332\274\341K\010>\274\271\356\2738\220n\275\333\264\300==\251P=\312\020\204\275t\237\346\275\027\007x=-m\325:\257\326D=\017\333\005;\021\313\000\276\242\210\304\2755E\022=u\331\353<\324\315\021\275\363]\217=<y\353=\237\227\246\275\311\277\353\275\022M\217=^9\301=]F\351=M\247B=_\030\206\275s\333\345=\356\005\260<\273c\014=\333o\020=\372\217\267\275\347\227\013=\376\275\305<P\214\005\276\211\323\330=\335\315\023<M\370>=[\337\241=\310IE=q\321\303\274\374\366f=\260\000\007\276\360\036Z\275V\025\030<\01638\275\224\004\306\275\254\270\265=\263\246\322\275TN\016\276\022\275=\273 \307\315\275\302\260\005>\345\243\344;N\215\363<$\021\322\274\021\241\307\2750\3640\275\254\364T;\253Aw=\205\363%=\260\234\305\275c\342\263\274\312\273\366\273\373=\014>\344E\006\276\265\260\263\272w\374\341=X`\014>s\177\006\276\277\'\001\276\036\376~\274\275#\371=\0214\245=\234v\304=v\362\230\275\342\317N==G\232=}P\263=tI\357=\010\027\001\275\270k\r\276\370\025\006>y\204\202\275\306C\014><\374\253\273\371\250\375=\356\376c\275@\247\213=\005\234)\275V\374\002=\313\344\213\275\300\026\253\274\203\265\244=\341]d98\342.\275gF\006\276\026)<\274I\202E\275\206\353\214<.s\303\275\027\036\364=\276<S=}P\242=(H\375\275~mN\275\230\023\223=\000\330\241\275\323\215\267\275\026\nR=f\025\330\274\031\223\000=\332\247\324=N\304\032=#\277\006\276z\247\202\275q\306\036=_un=\013;r\274\230\304i=\215\225\232\275\3113\377\273\320/\t\274i\310\303\275\364\016\270=\177 *\274X\2760=\254\350z=\236\324\314=\016\002\361\275\024\356\307\274\261^\201\275y?\250<\035X\006\276\221z\025;\317\210\257=\277&\303=\021\r\004>\254f\264=\014\036[=T\250\330\275\304\273\274\275\232\246^=\034\320D=e\251\322<\353IY\274\327$\005\276\234\226\325\275\352\010\373\274\322\363\177\2758\261i\275\253c\257\275_I\r>\312\364\001\276\017Y\230<YL\274\273\363\235\243:\241:\257=\232\307\216\275\275\024\317=\016T\373\275\356<\266<\230\3228\273\326|\235=\037[\221\274P\204\253=\352I%=[\370H;\223\312i\2750,G<\256\360\t>\350\'\316=t\376,=\320\246\274<\t\374\310=\331.^\273\227,\342=\213\rT=.\254\337\275\331\352\217\275\337\251\t\274%\245\223=\304<<\275\375K*\275\305wI=\227E\007>\335\277\270=z\250\217\275V\260h=\031\372_=\207\257\335=\215{\301\275\275#>\275\211\034(=\255E\363;\033\345\t>(\203\325=\200\207D\275\310=\005>x\226\177\275;\002\017\276\306;\227\275\312`\024\275\236\235\314={\361\303=\275\257\257=\257\305\007>\0371\267\275L\336-\274\304\024\243=\'\260\272<\222i\367<\016\357\000\276\322\335]=\374\350\346\275\322LM\275\n%\325\275d\225\264=\215\273\367=\350f\352=V\216\314\275_,E<\206{\"<3\331$<\307\234\324=\266\323\330\275\325\326\344\275\364\200\200\275\215\031\310\275M\221\005\276\017\233\371=\241\000\206=\321\013\350\275\233>m\272h|)\275\334\350\014=\200\271\234\275g\010\233\275\030\233\244=\350\311V=\177\024\235\275\244\376l=\221\244\270\274\337\374\304\275K\3315=\336\245\250\274\370\200\000>\2646\373=\321&\367\275W\326\221\275\271Q\243\275\367\007k=0:\367\275\022\001?=\213!`\274j\341\245\274\020\177)=/\326G\275\323\026\256=\002Q5=\210\275\025\275\362o\351<7F\347=\333\304\r>t\227\331\275,Q\264\275&\371\312=@U\336=S\200\234=\231\260\203\275\375\231\311\275\305\034\242=\363a\274\275\234L\013>\347\351\301=mW\324=\363\276\303=\365\370\016\276T\342\345<\254\355\n\276\221D1\271y\307N\275\241\214$=\271j\335\274\347\236\214\275\314\206\270=\232\003\256=\212`\206=r~\247=\237\331\246=\305p\374=\350\266\207=(\256\203=Kgg=\257\3712;\276E\354\275\034\227\206\275\314\006\347\275\t\350b\275>\335\363=W-p\274f\266m=\206\177\325\275\243\306\005;\270wf<\255\037\t>\357\022\365<v:3=\\+\000\276\031\020\343;\220.\312\275a\304\366\275k\325\007\275\241\352\301\274V\273\322\275\267\363\004\276Z=\231\275\203i\006\276\324 \244\275^8\222\275\"\341\203=\234]\274=e\'\274\275)\227\257=\353Oi\275s|\251\275s}\264=\214\332\327\275d\032\334\275\260\205\234\275\327\017\004=\342\326\371\275\207\345\260\273\315c\324=\344G\226\275\220t\200\275\260\317\360=\030=\356\2757/\314\275?)\234=\347\027<\275;\261\310\2758\326\362\275\363\267\236\275\177\306J\275\242\024\302\275\204\206\013>_u\351=\322\216\250\274\036\314\364\275\312r\315=!\223\361\275\362\243\032\274tW\222\275q\t\271\274\254\177\341=c\206\223=\0210l=O\310\241=\2618\223\275\322>\364\275\002\331\346\275\027\371\212\275MD\365<\213\366\242=\324\241\264\272!\004\351=\262\2601=S|\367\275\036\3067\266*Iv\275\260I\256=\302\303\n\275\225\177\'\275\310 \354\275q\214\353\275\3366\327=$\325\312\275\031v\314\275\0257\004>\362\305$\275A)O\274\272),=\255\210\177\273\027\004\013\276&\341\373\275\303O\274;q\343\034\274l~\004\275\003\210&=.\027\250\275\336JW\274\202\3155\275\272\366\002\276$S\023\275/\003;\275ue\230\274\370\276Z=7\213+\275\027\226\324\275\325D8<\336\356H\274\224\374\233=\204\006 =\330\243\202\275z\267\214=\271\2265\2752\235\354\274\013\257z\275\242\274`=\313\265\303\275\351s\321\275\313.\355=\243J\353\275{\336\357\275v\002\322\275\260\202\357=ON*\275\334\275\010=N~\313\275\261\334y\274h\330x;\355\026\r\276\335\303\333=7\007\277=\3610\237\275\024>\205\275|\031\r\276.\003\222\275\0225\2639+\004-\275\023j\310=\177#\311=\0010:;/\261\254=\320\265\224=8\307\330\275\337\321\251\2748\245\217\275\032\003\304\275TO\310=\003UN\275\235\255\317=B\321\007\276It\255=Y\261\025\275\013\354\226\274\342\177\347=\305\014Y=\267f&=\355\273\343\275\035\213\331=\237\257\003\275\2773\014>?~9=\340\n\247<\215\344\214\274\244\214\216\275\236\024\002\275\256\004P\275\003]\202=%c\341=2\251\265=\240\235\026=g\332\017=\236D|\275l\350\232=\204fa\275\226\352m=\013\233\026\275n\216v;D\336\302<\346\314J\275\262^\360\275U\267\263:4\324\323=\260\006\323\275<3\r\276\206\245/=\260\367r\275\017\243\362\275[F\354=#\317\004\275g\014{=\321A\013>\343\022\215\275U\007\356\275\331\354\227<\374\231[=\272?\224=\"x\357\274UUN=\255\260\212=\305\006H=\300\362\016=\352\310\270\273\357F\262=:\024\342\275\t<\205\275\032\333\323=\365\001\207\274K\310W\275\302\212\356\275\365?\005=>3\201\275T\227\n=\311\"Q=\262\370\201\274\007\344\255=\366J\275=\356\333|=B\312\r\276\210\314\016>\373\207\317=\355\244\261\275\230\266b\275\333e|=\035\226\247\272\341\211\205<\366$\350\275%7\n\276\177f\"=\032\332\260<MC\303=\213\313\265\275z\005\264\275\263\302\203<\317\241\273<\013?C\275\310\235\333=\216\254\202\275K\220\361<\250\224\006\275\325\005`\275\177\203\203\275\005\353\344=\354a\260\275\362\344\305=\3334\224=\310*B=\342k\212\275\370\277`;D\350\235=\267@\323\273d\\\210\274a\371\013>\'\003\363\275\365\217\n\276&-\255\274#4\014\276\236\302\362\275WQ\201=^\337\361=\222\231\370=N\226\013\276Z\366\205\275\344f)\275\207\031\207\2750\364w\275< \177=->3=\345\236\263\274\236\266d=,G\332\275p\177\344=\354\201\327\275\240\256\306\275Z\005%=\036\r\333<\3754d<\365$\345<d\244\351\275q\346h=\226\373I\274\203+\037\270\023\177\203\275\022\341\007\276\017H\264=Sm\006>\033\273\337=\264\300\035\275\357Md=\301\000R;\250\033\246\275S\336\007>~\310V\274\332\333\017<e\2772=\374\026\016>\306\267\255=\372\303\320=\300\020\r<D\016]\275\211Q\034\275\2427\252=\376!\270=Y\021\005>\240\270\031=\016\232A<6F\357<\336^\347\275\001\357\221\274\t\027r=\374\023\354=\211\026\304=\314\202\t>\251\347\342=\276\250z\275\325\037\231<\376\001\016\276\272\266m\275mI\t>\276\314\362\274\310p\210\275d\001\277<^u==\222\206\'\274\302\277\021=/B5\274,\313\245=J\377\315=\366fE=\243O\r>|P\274\275}\034\374\275R\273\217=\022\010\003>_\232\t>\256\370\210\275\226\306\221<\236)\317=\363^\261=\002\373\237\275\324\375\363=-\353\333\275\203\252\376=4\030\014>N\256}=\337>\265\275d\211\335\274\2309\373<jy\306=\214l\350\275X\252y;)\3061\275\371]\373\275\253\001\340=\007\030S=\203\256\231<\357\010\373\275\320\314,\275?\236~<\322\230\241\275\351C\227\273\254\327\321=\020^\347=r\245n\275\3520\010\275\034&\364\275H\r\006>HV\017=\320%\005>iz\357=\3019\033=G\227\312\274\252\355\022=U\264\003\276\202}\260=\2225\342=\252\211\035<\202\262@\2755C\240<\\<\242\275\262\212\274=\304.\215=%\236T=\234\220\271\275J\327\013\2761\267\377\275\306\221\006\276\365\324N\275\301?\t>\324\013P\275\036~\313\274T\007p<\327\025\241=\210#\213<\276\313\301=g<\251\274\226\340\275=*\027\014>\246*\367=x\246-\275\237G@=c6=\275\231[\233\275O\227\003>mo@\274\006\277@\274\340\240\357\275\341\rk\275\357\360\244\2750\272\370\274\002\317o=S\275\337<\241\253\276\275\036;\035=\251\301\335\274>,\004\276>\251\373\275\000]\335\274\220\311\255\275\303\270\340<\301\275\016>e\031\r\276`M\024\275\351W\305\274\312_\342<\000k{=\214\314\367\275\232\267\336\274!\353\247\274\371\336\323=\202\214(\274nc\341=\233;\007>\234v\221=\025^\203=\263\275\010>/\241\313\275T8\235\275\204\221\372=\270\215\014>\2374\016>\241\373x\274\272\374\031\274\364A\037=\336\003\013\276|6\334=3\272\303=\003aw\275RP\201\274\r\0047=a\344\255\275\203n\263\275\025\220\013<\235\241\322=\247\344\302\274\034\030\361=\223<\315\275\241F-\275\335\032\235\274wg.=\001}\264\275\312(\342<y\317o\275G\234\364\275\315_\330=jn\007\276\"\'\243=\354\373\231\273\301\016\344\275\242\247V\274\236\200\322<y\374f\274\027z\032<\334\343\220\275Y{,<\200\362\001\276\376D.=\374\027\357=\034\032\316\275\234\334\016\275hA\365=&\237L=G\"\022=\312Q\311\274\365\315\300=7\221\016</_\033<\321J\247\275\252 \003\276\337\360X\275\034\375\371\275\347 \362\274\344&\274=\357=)\275\261\0013\275\005\005+=3\234\366=\006R\204\2748(\213;\3150\005>K\261f<K\341\255<p\204\035=\364u\275\275\357L\031\274\023\224\332\275\010\017\222<?\327\231=\211\031\r<\244=E=/\264\364;\301\212\002\276\207\370\330\275Rw\215\275LZ\372=\034\336\026==\202\361={\225\342\275\360\262\355=\321\332u\274\207\010\000\275\312\330\010\276\030\215\366<\210p\020\274\2054\007=\007\013\344\275\3753\000>1N\232\275C\203\206=b\363:\275\332\351\354=PW\225\275\300\310\237\275]\240\014>}\177\266=\n-\003=4\330F=\253{5\275\222\270\362\275\316\351\206\275h8\372\273\203\207\273<lT\313<\366\246\010\275\254\2009\275\250\r\253\274o\177G\275,\r\266=o\324\340\275\202[\016>dh^\274\202\277\240\275J\273\001\276\363\324J\275Ep\350<\206-\333\275D\222-<\013\275\261<NH\220=\203&\221=\344\'n=m\332=<\263V\016=\274\263\244=\262\346\260=\032w\305=\236\335\332=\236\234\000\276\274\300\321=\347[\310=I\002\016=\026e\006=\0235\325<~\210W\275\275U\010\276O\244\t\274\355\356\027\275\226\344\263\275\331\036\002>\352L\301\274\246;\247=\247\204k=\210\263\r\276\231\226\314=\326@\021\275m\213\242\275\213\337\232\275_\224\243=\003\022L\275\346-\201\275\270/\315;W\201\214=\024\353\017=\305BE\275\254>\262\275}0\326\274\317\241\371=\344\331\244<\002\363d\275`\251\250\275Z\240\352\275JT\207=\371Q\235\275\212\205\t>\337>n\275x\343\220\275O\376\353;<\244\377\275\033#\017\276\021\252\207=VqF\275\225\203\r\276~y\001=\350?\007\276@\323\361\275K\272\223\275\231\367\364=\244G\340=\027\361h<\256\333\256\275\251x\266<\354\263\316<<98<\232\305\227;{\353\321<\353R\216=>\177i=\225\265\213\275\000\022\376=dY\304\275\317\003\343\275N3\357\274pQ\367=\361\265\373<\024\207\2179\305x,\274\354{g;C\243\201\275\021\303\367\275\213\\\363=0\030\207=\212m\376=kG\256=\255\341\233=\264\342\232=\007f\t\276S>\330<\235\310F=\276\247\354\274\2077\205\275L\262\000=\377\354\241\275h63=\266T\330\275\226\324P\2744P\267<\235\2725\275`\207\356=\016g3\275\266r\326\275cz\232\275\236\247\270<\203\347\267<4|\234=\223wE<C\016\234=t\t\205=q\366\002\275\335l~\275\331\373\177\275>m\356\274\271\351\014>\245\030\035<\345\310\355=5r]\275\272o\227\275\316-\223=\036\243\241\275\217\n\346<\305\367\260\275\302\240\004>\227\025\323;\202\361d\275w\260\336\275\n\225\333\275I\022\344=bN\245\275d\215\257;\177U\376=H{V<\376\357\005\275D\204\034\275\226-\210<\306L\270=}\tu=\022;n=\027\320o\274\364\347\010\276(x\227\275\217\3769=\250\024\365\275u\212\271\275\200m\032=)\035\220<\242/\005\276}\226\337=7\370\356\275p\361\236=\255\326\261\275\376\311.=\363\tX=\003\263\264;\342\273\257=\365\357\373=\033\265\355\275*\025\245\273\031\224h\275\246\372\233\274\037A\002=2\036\204\275\262wa=\314\346\347=\242\032\032\275M\377I<\317j\334<\331s\362<\332\032\260=\322EJ=\016R\035=!\275\327<,w\317\270\220=\275\275;>\364\274\000T\231=y\005\274\274\254\255\301\275\356M3=\313\346\271<\240\261\252=5\274\216\275C\'\376<\235:\274\275\344\206\361=\002x\252\2744$\232\275yK/\275\023\220\260\275\037CS\275\276\327\220=F\211\205\275SC\326\273\'4\271;*\250\003\275\254O?=c\360\265\274\034\202\n\276\213%\321\275l\310\345=\230\027\010>I!\306<<\231X\273\271\335\005>\321+\362;\210\341i\273\275a\275\275\256\275\364\275:\003\222\275K\316J=\263\234\305=b\001\360<8@U=\235e\025=M\274F=F\346\253\275T\026D=\277\261C\275\372\201\370=\302\000\261\274\301\312\217:i\324\325\275\324\020a=\260\261\244\2753\247\317=\344\356\352=.\224|=\235Q\340<\027}\307\275\246\250\302\273\234\300\307\275\326\246Q\275\306\337\'=*\306\247\275s\002\331\274\005\242\n\276q\256\351\275B@4\275\220\n\244\275\306\265g\275;S\006>\r\0218=\214\207\020=P@\372=\260\340D=r\261\n\276W\326\233=e\013\324\275P\250t\273PT\247=\252=\326=\364\342\371=\364\335\260=\026k\367=s\004?=n\350\255=&\027\300=\272\306q=\252\3003=\260\340\352\275\231\374\001>\277:_=\206\360>=\007\277G<\240\010\353=l \013\276v\201\370\275\346S\350=\206O\001\276\334<\203\275#\264\253<\264\024\016=%\231i=c\243\366\2743\027\034=\273s\366\274\"\375\332<~p;\274 \233\225\275\235e2\273\017\244\004>\326R\345\275-\227\007>E/7=\240\302G=q\270\r\2752 \327\274\2751\005\276V=\n\276\n\203\345\275u\354\213\275\240l\320\275\321{\375=(\206\316=W\225\376\275J\274\252\2746\260\236\275\263a\360\275\220\242\207\273\027\274\214=QL\363<\231T\243\275\302\177\026\273\365u\204=\331\272\254\275\373lD=\3531\226<2*\014>1\'\253<\001\034\204\275[\322\204=\025\256\016>\365\335\356=\212\rt\272\331\347m=\312\241\331=v\014\220=\0170\345\275\307\350\250\275\356F\223\275\322\301\352\275\326&\202=P4\367\275z\034\241<\215\323;\275\362V\315\274fSq\275@a\305<v\326\331\275\224\344\260\275\327\035|\275\237x\022=\226\222\340\275x^\224:5\227\346=\203P@=\244\010\016>No\226=Q\242\265=\376c\201\275\366\325\331\275\276~\215=$\2421=\274\000\200\275\271\262\266=F\362\222\273Y\3430=S\002T<\337KA=\217&\021\275\236z\005>\273J\245=h\023\353\275\251\201\336=[\t\273\275\355\204>\275 N\356\275\330\026\t>\235?O=9\336\307;\320\211\352=q\213\244\275\203\214\320\275\227%\357\273\274[\326=\244\r\330\275\361\304\375=/\367\371=\307T\267=\246\352\255=K)\004=\013\241+\274\005\226d\275\363\306\266\274\345\265\373\275\256.\331\274C\001g={\000\211=\231\245\324=\347!Y=\242\'H=J\206\267=7\237\n>b\205\263\275\302\367\247<\214\277\350\2755 \343\275\200\226\341=\352@\312=\177\334\300\275\253b\231\275xK9\2751^\014\276\321=\335\275\014:\003\274\343:\334\275ba_\275\314H\305<\2669\215\275\014\247\t>\214\017\223\275\255\033\311\275\366\027\373<\361\350\210=\325\034\266=\'O\313\275W\321\326=\034\266\215\275\306\236q=\310\307\221\274\261E\352\274\226\312\t\275\213\244\244\275;\tp\275P\036\016>LP\235=i\303e<\251}W=\r\301\364\273\261\033~<\335O1=@P\202=e\211`\275\302\253\374=S\311\t\275\333Q\007>@\324\201\275\323RZ=\310\213\277\275\325\210\211\273$\272\216\275\207r\236\274\235\033\24782\301\304\275n2\346=\206\336\243\275\217\302\312\275\241\204\004\276\3058\322=\210w\234<\010\305\206\275\352g\270\275eR\327=\004+\324=9\244\306\274]S\212\275\345\303\327\275\2407\363\274\207,U<\203\346\255<e\024w=;\026z\274aE\037\275\213\221\337\273\312K\304\275\340\0249=O{}\274v\236\274\275\344\r\315\274\014\350u<\232+\007\276V\260\035=\222\343\322\274\266\275\203\275\3549\223<.\202\010>\336\"\001=\356\234\\=\014\032\021=\371\251\004>-\314\357=!$z;\024\034\357=\350<\373\275\315\310\361=s\025\335=\013\206\275=\023\016Q\275G\251\263\275vC\003:\355{\237=[?\"\275\263\214c=\267\203\006\276\215\360\304\274\365\216\364=\327\366\026\275\265\0178=\014=g={\252K=\354\301\326\275}E\307\274\201\2737\275\332@\365\275\013\255\366=\036\320\272\275\253\347\227=s8c=A\260\344\275\2233\346;\242\276\210=\210\342\373\275G\353Z=\214\260\323=}j^\275\001\244\007\276\337\331q=\'\n\227:\35602=\201\372t\273dY\316<y\264\261<J\335k\275\016\002\253=\301:\272=U%\205=\032\363\242\275\203\314M\275\271@\373=\376Ww\275c\304\247=)o\202=0\177\222\275o\357\030=\026\371\217\275\312\023\257\275X\201\264\275\014[\244\275U\224\223\274\367\232\372=<z\372<\333,6\275!\253\331</\232\227\275Dh\002>n\210]=zg\304\275\303 \272=\335\007~=\240\320H=\320\200\277=RU\223=\350\326)=\312\263\001>\210\334~\275\003\370\256=N0\243=\242JL=\331\366\271=\252\273o=x<\240=\311cr;\\\212{\275\233\272-\275Jn\360=A>\313\275nZ\333\275jT\262\275F\205\326\275\356\255;=gI\n\275\357\304\326\275<\346\235\275\346\205\272\272\346\177@=\226\254\313\275\030\233\240=q\373\321<@\270h=\372\360\375=D\t\304=\256\254M<d\271\227=b\300\013>/!U\275\000C\211=\322\010\005>g\033#=\3116o\273\232I\367\2758q\003>\025\241\221\274\253)z<\235io=f\020\303=V\'\222\275n\325\245=Rp\300=\216\276\263=\256\221?\274\334]U=b\001O\275\212\255\222\274\205\n\002>x\2230=\036\206\245<Iv\230\275\321\326\362=\373\345\346<\263\030+\275\002}\256<x\340\025<){\310=\276\261\016\276\364\377\377\274\366\225\026<\3554%\274\204\035\000\276\323\315\324=\237\220\242\273\377\221\322\275?X\001>|\036\202=l\374\204=\217\241\n\276\357\365#=k\264\237=\013 \333\275D\330\021\275\306\256\212\275\324!\334\274\232\014\307\274\2157\201\275\n\251p\275\264\204\345\273\254\267\344<\016\246D\275\226\"-=yW\315\275\214L\314=\313\\\276\274\2632\014\273A\205\234=!\272\266<\025\263$\274\243t\261=9\375\363\275\316\363m\275\345\211\365=\215r\006\276\251~\002=7\331\302<\3030M\274\256\'W<\022`<\2741\276b<\327\340c\275\202\035&=\344\232\000>:)\366=\271\007\244=\262?S\275\334\317\205\275\317\303\367=\375<x\274<Nw=\360)\356\275\004:\022\273\373?,\274\337\353\013>\2060\230=\252\"T=\312\306t=\031\010\276=S,\r\276\331\'\361=/\014\312\275f\022X=\010\274b\275\356\277\231\274\247Z\240\275\205\355?=\014\224b\275\220\264\010=+\230\002\275n\377|\274\327\370\037\275\014IG<\274\322\270\275\236O\313<\016\341&\275A\024\331\274i\322\r>\271\202R\273.\366\245\275\340\373T\275\317{\n>\274\342\234=\205\227<=\232\235\271\275,\217\205=\025Y\312\2751M\370\274T\"\362\275v&\003\276\345\267\364\274R\214\010\276n\365M=\376\366\026\275\363\367\001>at\013>2\336\246=\222Dg=\177\305\314\275\n|\245<\021\361\212\275$]\036\275\"\023\231=\341\275\216\274}\n\241=\370:`\275\277\257\243<\226K\375<\272\300\202=r\353\343\272=B\242\2754\225\257\275\001\216N<>*g\275z\004\204\275/\264\244=\022\014j\275\316\266\240\275\347\333#=\360\264\021\275\001\017\316=\253D\374<~\203\256=\324\357\313=\334\030h\275\223\331\343=\036v\374<\315\035\332:y\264\230\275\\\202\000\276(\352w\274i;\247\275\350\354\306<\377\023\021\275\030\351\224\275\360[$\274\203}\335\275\300Jr=hC\253=\325\324\326\275*@\350<_xf=2a\016\274\023\337\002>(G\267=\346-\342<g\001\236=m\023\301\274\363\235\353\275\232\355\270\27580\007<]f\035=\202K\030;\273\336\242\275ZC<<zF\356=\272\021\275=\266\322\375\274\203P\211=\304\274\317\275\221+\240\275\2641\230;V\023\273=O\022\010<,\007\363=HA\241\274+\177\352=\020\275\276=\241\212\322=\251\301\213\275\034\365\236\275\327\353\333\275\331\345\031\275s\023\267\275\247\034\371=\350\006\014>\353D\t\276\022\373\366=\335\362\003>]\211\215<\214\207:=S\216\'=\"\037\200;#\306\355<\356\213\345<\311q\226=\376\322\335<N\"\345\274\'`\230\2757k\244\275\377C\014>\273\220\211<\372^\230\275\331\336\342\275\023a\373=\333\324\013>\262J\253=\306\231\234=\317^\333\275u\271{\275\211n\231\275\n\235\325\275\035+\312=\\\217e=\3075\304=\214?\255\275\014\313\207=\236\341\313\275\233y+\275}\n\366\275\245m\275\273\201z\325=\360\022\005\2763\217\222=\252~\270\275\035\035\334=2\004~\274l8W\275\013\275\315<?Y\367\275\006\362\334=o\272\310\274G>\267\275\nk\337\274NA\366=\266\333\214=,\315\304<5\006\333\275\267\365L\275Ra\201\275\037\225\377\275\214\275\316=\217\353\247\274.\366\306\274\232\276\030=O\271\006\276\007_\030\274\262lz\275d\330\020:D\021\314=\363;\257=\241\3157\275\346\213\236=\301 |=\302\272\370\275\241\224G\275f\206\253=\252\207\331;\031I\237\275F\223\334\275\023\367\020=\333\026\243\275\257%$\275N<\220=&\t\215=^S\014>S\273\241=\177N\265\275\253@\233\273^\244\331\275\021-\311\275\275$\031=\357\212\037=\254\003\314=$D\333=\354\025\210<\266t[\275\2519u\275\375_\004\276\374k\037<<\260]<\277g\362<\340\222\360\275\007\3551\275\207\256M=\020\245\203=\033/\365\274\t\227\302;6\203Y<\317\317\002>K\361\247=i\2214<\232\216\325\274\234\361\214=\032\372\002\276\254\026\300=q)\002\275\2649\245={\251\343\275\304\020\304=b/V\275\032\344\267=<\261\264\275q9\311=\'\254|=\322\216\253=G\256\241\275`h\271\275\335R\232\275\036\2614\275"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 126
          }
        }
        tensor_content: "tK\n\276\271\213\003>;^\234\275\t3\351=\256\306\010=y\035\007>g\346j\275?5\242=~\000F=\217B\217\275v\265\232\275\373\344)\276\215\376\252=\310\263\t\276\001\235-\276\270\336*\276W\\\030>\026\205->\306_\031\276\274\016%>\271\274\241\275\265E\356=\251\350|=\306\2625> \230U\275\255\302\025>i\024\232\275\305\233\021\271z\363\023\275\370\301\221<\243Y\001>x\347R=\232y2\276\241\311\374=\324S\231<\325Y\206=\254[,>e\243\252=\204\207\033>\241\000\026>y\226-\276\300x7=\315X\354=\323\352%\275\267\037\306;\213\253\222=\253\321Z\275rw\235\275\351\365/\276P\2258\276\367\2720\275gi4=?\234\257=\236/\204=\021B@<\260\306\037>[\226\241\2753\034\200=J\r\021\276\347\311+>\353E\360=\240,\255=BA\335\275y\333\360=6\225\222\275\207\\*>\3216\372=\037\302q\274\330\360\214=\207`5\275\334\256A\273n\341\020\275::\350=B\247\374=#\010\016=z\233\032>=t\265<\323-\005\276i\'5=\306W\330<\030\254\021>0\327\367\2744\250\322=_\370\261=9m\251\2758U\177=\203\325%>\267\210$>N\244\003=\201H\233=\341\325\004\276\236\345\246=\240vl\275y\310\014;\236\017\260\275L\251\357=\332^\371=\375\013\220<\"\203\333=\344\334\333\275\0002\312\275\027\314(>\025\254\035\272\341h\021\276\026\365M\275\221\250\326=z\211(\275%\345\033>\221\206Q<\004\337*>\365\277\034=\0165P\275\036\2003<-k%\275\234\017H\275\321M >\353G\216\275\023g\010\274\316\365w=s\3721>\366\301\002\276\304S\035>\356\310a\274\315\202\311\275\005\276=\275\311!J\275\001v*\275y\\\005\276\200u\221\275\330(\032>\243\205\211\275(\277\022\272\206\335k=\024:$\276\234T\016>\342\256\374=\362\261\260=\316\315\026=4-\240\274\223Y\031>59u\275\321\236\243\275\026\035\227\275\364q}\275\031\027+=\360/\232=\320y5>k\345\005\276\316\320\217=\365\030\036>\345\037\302=\316T\002>\356\330\001\276\236\357i=\216<\373\275\213\373\204\274\017\303 >\234\211\035>\025O\004=\314\275\">\016*5>\032\302\336\275\224\213J\274\t\355\217=((\212=LY\033>\3431\n\276\343\232\r\276\332\030\363\275\312\202\036>\316\275\363=\022\360\251\275gy\364\275\224\245#\276\3144\312\273\312\2134\276!V\014>\341\253\036>\376\301\205\275\034\3425>\001\252r\275(\304$\276\274\243\202=\250\026\303<>\311\245=\376\020L\275\177\264\240\275@\342\014=Q\347\354=\262\211\255=T\337(>\226\274\212\274\310m4> \234\035=\324\270\036>\301\tV=#n\303\275Z\365\333=oR\253\272\375@3=\000\314\361:\332>\023\276\334\327->\211\037\373\275\260-\227\275\351\3738>F\351\033>E\233k=\234s\250\275\267\271\331\275\243y\'\276\025\371\003\276\365V\241\274\314\002\223\273\365E\260=^\032\032\276\215U\030>)\201\351\2749\003\237=#\335\021=\364P\374=\373\344K\275\307M\267=\327\032\254=\204\343\322=\213m\251=;\031J\275\240\230\346\275\375\367\022>X?\347\275\254\205\362=\350\343\241=[\262*>\270\264\234=\177E\351\275\2474\203\275\2639\">\031\014i\274?\335\262=}U\226\275\215\246!>\354<Y=T&#>\371Xp\274\221y\036\276o\360\305\2750\243\274=\350\244\n\276\037\256\326\275\275\0024\276`|\">\273T%\276\262T\026=e\006.\274\357\020\244=9z\360=\241\356\375=\307\003!=2g\303=\232\240\313\274\246\315\275\275\371\326@\275\243\365\343\274\2432\022\276\307/\031>ZQ\007>\r\"\271\275\346\324*\276\025l0\274d\212\343=\331\027$\276\310\362\036> e\025\276\275\007\250\274i\306\342<\253\252\242=\237\302\316=\250g\376<\320.\313;?\025\214=j\201\322\275\260X\310\275w\324\364\274lj\371=\232\215\301\275\341\321\343=\021\321\025\275-4\242\275\271\254$>H\277V<\331\220+>N\341\324=\217g\255=\326\210I=\3326L\275\363\"x=\335}\">\2629\033\276/r\350\274\225\223\230\275{IF=`K\376=~\0365\276\332\261\n>\347V\000\276\t`\200\275 oL\274\247\000&\276\252J\325=\240%\002>F\216\272=\226J\336=\205\347\330\275\203\272\360=-t\241<\275\257\031>w\013\374=\327\212\236\273\325c0\276I\245\375\274e\315$=t\367{\275SO\330<\305w\311;\257\267\276= \324\327\274\t\0049\275\243\264\037=(\"\007>J\002\336=|\367\312\275(\004\233\275`|\260\274\"+#>\261a\374=\314>\006\276\324\323\030\275d68>(\211\300=\363\240\000\276#B2=\316[\363=D\232\317\275\355\245\220=\265;\021>>o\007\274\302q5>B\275\377<{\222\342\275DF\326\274\016\376-\276\300\302H\275\334\315\214<\320\362\362=\317x)>\037S\'\273\341\367\307=\35408>\243\312\234\275(p\020>\253\341!\275\324\232\034>\253l\271\275\367\001\260=\023\237\262=\031h<=u\302\270\274\377\366\032>\346``\274?\217\005\276|\247\001\276W\332\371=C\225N\275\363\304\t>\264\002\014>9]:\273<\240\302;\\\205Z\275\260\326\007>\314\2769\275\275\352\320=\255\270\001\276\020\342\027\276\373C\364\274\262\205\236=\266\0141\276\345\301\022\276S\275\233=\377\2125>\032E\001\274F\204\206<\222\212\t>\005\337\263\275\"\334\217=*\341\024\276\330=f\274T.\262=\312\254+\276(!\304=\201o\204=\360\031\020>\023J-\275kk\225=nT\205\275XC\200\275\376\215\244<%L5=r\020/>\261\243\037\276\307\320\235\275\270\252\006\276x\216\005\276\276o\350=78\315\275\327ju=\346\340\325=$\301\330\275\365\010\330=\027 \220\275\217%\256:\010\3373=\024\353M\275\253\266&=\317\231\375\273\301O\022>Ni.\276\231\336\201=\205\301H\275\353\226\260\275k\323\312=\362y\343=\245\336&>\030+\251=\334\306\n=\r\355\251=\232\252\213\275vn\321<e\211\230\275\376.\256\274|\216\016>n\006\205=h\2339>ZJ,\276\361\344-\275\327\331\257\274n\2053>\375<w\275\320\352\020<w=\266=\320\r8=\250w\276=\350\353\201\274\301U\256=\024v\202=S<\023\276\241|\373=%\021\225=\274\271\035\276t>%\276C\217\002\273\201\031\252\275\375]8\276G~\016>P\024\333\275\377p\331=w\330\240\275\271t\016\276\307\201\026>4\330:=rj\332=b?#\276W\353\026>\225\264)>\225\010\311\274x\357\201\275\276\255\201=\347\027\371=\202U\325<\3371h<\251\322\366<&4\273=0\002\232=.\247\330=\375\031\033>\025\"\254\273S#\226=\353\251\362\2742\217\377\274\347Q`=\332\344i\275;;\000\276\261\356\">\266/\013>T\210~;7*\005>\224&\233\275\374\260\267=4\253\226=\223\275\325=e!\372\274\034j\220\274\201\217\310=\344\177\251:P\256\006>\006C2\275Z\330\232<2\003\017>\320N\215<\344B8>\276\3761\274\242\3213\276?\032\024>\3619D;qYr\275\273m\230\273\310\301n=\010\251\224\272T\005n=\320\013\030=8\253\t>\266o\215;\363\016\375<\223\326\265\274\234\031%\276\205\026\241=\3559\322\275\240K\343=\231\256\275<\202\273\240\275>\3519>\366\376\316=\342Q5>\217Z6\276\0259D\275\2066\001>\030\034\017=\270\267\320=\r\233\271\275\204\031\264\275\355\217,>\022\307\027\276\210\004\200\275\373\305\013<zT\205\275q\250(<8b6>\301f\317<\374\235\244=\005i(>R\247\206=\316\326/=\307\316\201=\032\0366>!.\302\273\242q1>\350\364\344\275e\271\323\274\216\272\215=<.\300\273\007_\225\275b\005!>\024r,>\035\310\233\275\342\333T\275\221M\260=@\367\027=\256\014\223\275g\355\024>\361\037\304\275\216\320\005>\256\337\347\275\245\026\001\276?\211\020>\240\206\206\275jr$\275\325Zn=#4.>\266\2655=\244P|<3\243\300\275\213\033,\276\233E\003\276\214\'\022> \253P\275rr\242=\025\233\034\275\375\333\367<\357\373f=\367\307\202\275\250\227\010\276\376\023\234=y\341\275=\227j\315\273\367\016\007\276l\226\335=\307\274\327<\177\366\n=\336\325\235=\233\230#\276\370\2219\275\355w(\276\224\030\351<\235\310\017>\032\317\361=_WN\275\312(4\276\035\374\004\276\341\232H<F3\236=\242\265\003>\351\373\232;(p\267\275%\306+<\r\364\232<\215\232\263:\354t\316=-/\301\273\243J\270=\030X\231=\027\245\206\275\024\2051>m\361\007\276\t\372\014\276\235\030.\276\371\262*\276\230Kk\2755\362\002\273&\312W=F\014\001>l\032\211\275O\016\035\276\357M*\276L:$>\260\343\013\276\323\036\342=\213c3>4g(>\315(\323\275\307$\374=\017\224\347\275\273\034\365=\314\346%\276\325F&>G\033u<\177\203\031>x\227\227=G\036\005\275K\030\343\2750\237&\276B\021\r\275\212\367\312\275\377/\236=o\334\240=\214LW<\264\310\204\275\037\016\355=\220f\307\273\234~\210=\316\2200\2766aQ=j\3510\276J\211\364\275\360\t\005\274\177\216\212\274\230\375\347\275\333}\270=J\002\341=}\247\205\275v\334\001=\022\301\275\275<\002y;\323\311\001>\013)&\276=x\002>\374O+>\236\327\n\276\202\017+>\236\300\177\274jkN=\200\211\'\276\371A\341=P\313\353\274k\370\277\275~\020\305<\314K\026\276\375\304\271\274\017\032m\275gB\r>\t\314\010:\016\350\301\275\246\014\010\276\235\301I=!\n\304\275\002K\302=\314\345\210=hA\270=}V\320=\242|\007>\n~$>F\246\344=\343\306\361=\3562+\276\357qR\275\277\263\316\275\212@\257<X\2355>\301\275\026\276]\231\330\275\204a6\276\261\316\340\2759\024\345=R\314\034>#\026)\276\020\000\001\276\240\005\023>\004\364%>\023\3663>\272\251\241=\277\017D=\370\362\017\276\005Y\007\275;\2478>\375b<=\033\323+=\237\370\341<\334(v=\304\243\224\274\205g\017>H\004\227\275\035\276\347;\201\357\311\275\0029\257\270tm\241\275\365\346#\276\226\205\325=\215J\336\275S\225\301\275k\031O=k$\310\275\206!\230<\277\305^\274\022\220\357\275\260\3057\276\227\276\026\276j%\003>\336S\020>\251X\213=\373I2\274%*\303=\366;\326\275\212\034\305=\006H,\276\275d\231=\233k\201=\364\2747\2761g\034\276\' \213=\376,5>\210t\332\273\234\341\026<?\3668>{\317\017>9\266\027>\226\017\016\276\251W2\276\327\343m=\314\270\020>\363\310B=o/\364={,>\2755e\304\275\225^\231\275\352\345\326\275\264\\\345\275\rX\204=\r\023\320=\234\220\252\275\2448+\276\2445\362=\307\013\305<_\265.\276Me\036>\375\256`=\3746\265\274\352?\r>\010<\306=K\343z\275\356\017\323=0\300,\2762\345 \275\036\030\322=\353\360/\275(\355\305=-\016\"\276\2519\234:\000\253s\275{\244\234\275\273]\205=!\261\223\275\372\217\005>\237\357\022\276\267 \243\274G7\t\276\024\340\005>\275\222\274\2740U$\276\222\263\">\255V\233\275\237v\032\276\214\257\035\276\341\372\017>8\344\\\275\267Q\021\276KD\016=u\313\372=\276A*>qJ\242\274r\375\016\276\2135\274=u\254\242=\232\272\213=7\002\276\275\326\360\032>\024\022\212=\315\356\227\275\217\352\372\275\035v\356=-\024\300\275\304Z\227\275\270\336\210\274Q\225\332=\320\315\365=x:7\276u\342\307=\027C\207\275h\223A\274\250\353\302\275jL\033\276\322K\304=|\312A=\232PY=\272O\230\275\017\205\273\274$$*>\373\340\016=\330\025\261\275<Tk=\020\214\017=\020?\200\275\026\362g=Y\260(>\365\014\370<\017\355<\272;\212\004;8l\252\275*\250\351=y\352\361;\000m\316=\363\003\216=LP\002=\315\030\261\275Z\276\020<(\r\371=hwh\274D19\276\211\334\231=I\r\263\273\363\270n\275\202q\345\275\261C\373=\247\260\002\276d\227\223=x\253\225=\3255\355\275\205\3040>\016\3026\275\372*\023\275A\202\336\2757\033\371=2,\372\2735\363\007\276\003@\016\2768\260\031\276,\342;=Z\021\260=\311\241->rB0\276\\<(=9F@<\304\225!\276\224\"\235\273\246\357\t>\r\013)>\030\265\007=\311\\\261<\210\267Q<\236 \215=\272\356\242=@\365\010\276\353\005\232\275\322n\216={\223\361\274\302\027\233<\037\014\373\275\200\322-\2769\031\253\274r*7\275\277\344\262\275\203\214\243\275\273u+=p\004\004\275\'\266\007>\347r(\276\3055&>\035\034R=\2407n<\351\201\236\275D\235\311=Fhk\275]\257\247\274m\001\255\2758x8\276xU#=\216\211T\275\302\303\370\274\006\243\377\275\342n(>\227\214\205\274\243\243\350=\002\320\235\275\002\014\202\2759$\272\275\367\352-\275c\332-\2744\270\017>\275+7\276\335\372q=\016G\232=\317\036\276\275\354\312\224\275\350\004\371;\240^\302\275e\224\035\276}\215\035\276\265\350\313=\371\311#\275Y<\221\275\340(\344<\027\277\006\275k\333F\275\203\002\253\275QC\205\275z\305\317\275\264\353\222\275\007\016\017\276\371\220H\275\243r3\276\253A\207\275l\201\325\275\211\353\326=\237\r4\275eu\376=\317\354\206\275z\036\335;{\355\371=\nY\252<\237\003\030\276ws\342\275\226g0>V\213 >\355\367\304=\341M\233\274?\354\001>\260V\013=\000\002\007\276\\[\347\275\036\313\352\275\003\356\031\276(v~=Q\243\340\275ul\037=N\255O<Du5\276pi\263\275t= <\271\366&>\026-\327=\021\341\241\275M\212v=\262\265\256=\243\313\006>\202\322\317\270n\313\000>\227\213\204=\346\367$\275\322w\376=\333\'\223;\032\354\004\276\215\000.\276?\251\231=0ON\274\202o\r\276j\327\356=\310H\021>\022\3326\276\202Q\342=\030\013\023\276\010\326\235=g\315\235=)\261c=\245I\352=WF\t>z\263$\276\353G\327\275\302\350\356=\353\275\016>y\230\013\275\377\025\276\275\374\2261<\026C\001>Z/\006>A`9>\350\376==\027+\213=p\255\315<8\016,<\351\"\r\276\243\324,\274s\244\033\276\225\302\274=\314\336?<0\000\246=\360\344\t>3\354\005\275\"\300\020>\225^\007;3\372\205=u\321$\276\313\0166>\\\023.=\210\332\202\275\356(\214\275\246i\262\275\333\320\n\276\307\007\360\275\232\007\000\275\261\331\354\275\273\'\377\275\357\363\275=pJ#>[\330\326<\356\333/>f+\351<\232\327\375\273_\374\221<a\2176\276\207\201B\274\233\021\231=)v/>i\n\021\276\360\r,\276>\270E\274\006\302\240\275i\037\026=\333\3445>l\037\017>\316~+>\265\t5>\204\216\033\276\207{}\273\373\226\014>\027e>=\263\304\234\275\177\3119\276\001G\240\275\204M\017\276\337].\276iv\227\275\255tj=\355\024I<y;u\275\266\347w=\271o\013\275\223\331\000\275\022\352\326=\014)\026\275*\322\360=\314\243\276<\206q\316=zb\371=\366]\364\274\245\251\022<\200\376\000>I\312->,2\203<M\207\344=\001,\016>\n\242\007\276\251\267\t>=:\334\275(\375\331=\032\2338>9\2368>DV\003\276\247\372\214\275\007h\310\275\204\335\020\273\206e\260=\2155\004>Q\227\237<\033\352\226=c\351\027>\263\205\350\274UT\006>Y\220U\275\372f\260\275\203\330.\276hn\261=\221b\215=\324\260\270\275\031\333\307\275p\332\330=-\340\354<\330\'\004>\2505\003>x]x\2756\315\356=\331\267\224<\034\201\246\275O\2479\275\230\202\360=R\274\262=x\270\025>)&\301=\006\236\007\276\027H\232\275\300#\326=\327\3626;),\030\276\\\202\t\276\013\332\354\275\307.,\276\306 5\276\026\355\356=p]\350<$\247\037\2760\2313>\361\223\251=%\'\311\275\333\177\"=\035>\313\272\351@\010\276z`\323=B\200\021\276z\362)\275%g\263\275\n8\024>^\024\262\274w\212\345\275\332\001y\275\241\331)>\336E\344=\314\346\013\276rR\t:\222\240\n>\213\323\264\275\235,\342\275\334\000\334=vu.>x\314\341=\314\237\373\273]]\332=\214\324\337:\254n\004>\201\t\022>\315\022\">\004\200\014>\340\227x=C\247\264\275t\3343>\311D8\276\350\222[=w\276)\276\221c\023>\3222\236<\346\300\330\274,\243\313;:\354\254=\2662\024=i\003\003\276i\207\255=\211o\266\275\351G\006\276Q\356\204=\231\327\t\276u\372O\275 \3568\276\324r,<\272\2317\276\247\025\257\274\357\357\365\275|\257<=\201\243\227\275\344=\344\274\363j\304=N\343\255=\205\263\354\2758\210\230\275\215\212+\276\232\3235>\305P\355<\373\0218\274(\331\366\275\365\262\264\275[\203,>\327R8\276ty\331=\265\325\363=\253fR<6\362\353=\370d\236=u\271\357=Z\202\257\275\255Z\034\276I\302\3679\232Hc=[d\006\276\303\353\'>\202\037\356=V\214\316=\344\201\214\274\037\205`\275y\377\357\275\257\231\032>\270w\225=\307\315\007>\243\352\024\276\330\347\">\233\032\336<x-\025>\372\304\016\276\226%\014=m\340,>\252\301W=^\345\231=\027,,\276:?`\274kz%\276\335\304\230\275Ow5>1q\020>\020\223\223\275\307\257\004>\262\021\031\276\023\035\276\275\177\256\n\273Uq\034=N\335\225\274MC{<\234\003\000>\330|e\275h\344\226\275\027#V\275\340\034\264\275W\224\034>\210\256!\276\337F\"\276\036\343\302=\t\323\026>\355\327\373\270\023\257\023\275\t_,=\005\000\">>\\\024\276\302x.>s\366\264\275_\273\351=\020\244\374=\ri\007\276\330\200\342=\213\232\202\275L\027\203<,\2331>t\"\302=D*&\276yr\006>\213\365\214\275\t\271\213\275\243_\312\275>0\362=\324\351\317=\336\233\t=\376\220\346;\010\246\034>\213I\025\276\2724\332=\177\312-\276y\305\355;Y\363\247\275aD\270\274\313r\t>\214\3132\276\006\262\247\275\257\363\215<\033\224w\275q*\324<\364\0328>\251E\000\276w\322\023\2755c%\276\211$\232=\205F\321\275\"c\253\275;\242\375\2750\003\225=\n\331\333=\022\206\230=[\002\225\275\024n\006\276\2157\321\275m}\033>\030\0312\274\303\245n\274Q\340\016>\303\365\001\275\021\3424\276hn\'>\336\3327\276\023\214\030=\254\324\"=\301\334\253\275\021\"\260\275J\275\021=\304\254<=\005\013\t>${%>L\3334>\310A\232\275X\177\010\276\n\245\325\275a\317\350\274\341\211\003>\034\330\261\274#\200\202\274\351_\214\275uYx\274=\351\271\272\270\'8\276\261\007\362;nS\216<%\271\334\275\304\244\014>0\n\324<\000\322\247=\324\r\300\275\2168\004>\"Z\307=|\013\314\275\210\203\362\275\305\205\013\276\220J\032>\332~\013\274?\312\211\275)\240\001\276\367\2429\276\n\270\303=f\r\303\275@\026.>\253\272\335=\376\255[\274\013\007\202\275\014\004\337=k\247%\276s\374%\276Z\216\270\275\375\302\211\275\370\360\t<\270u\025\275D{2>AT\003\275$\362\300\275k\323\343\275\224*\352=N\344\267<BQ\326\275!\221\221<\216z9>E\322\001\276\307\242\267=|[/\276t>\306=\267\350\033\276\r\220\005>\225\3401\276C\207*>\367\272\255=\317\376\256=s\263V=\331p\036=9\312\375=\322{6\276\014\241\340=0\324\025>\300\032\005\276\005\314$\276Ka\'>K\214\235<\3433\023\276\004\2453>B\273\367\275Y\303\237=}\001\027>4\003g=_\303\t;HQ\232=7\037\324\274\241!\217=\34282\276\376pQ\275Iyc\275\221\226\250=\317\363\262=\357\252+\276\344\352\\\275W\271\013\276\371!+=\364\233\274=mK\355\275tp\002=\206\376\'\276\013\355\263\275y\210\327\275\251\357\014=5\362\243\275\213 \">Um\302\274\376)\242=\352H\316\275:\301!>\237\346\336<\034\317\376=\331\341\267<u\316\213=\326NV=\236V\235\275y\230\031>]\346\236=\370\205\r=u\262.>+\355\202=O\\x<\276\213(=6\254\334=\023\377n=\255\2375\276$\211\342=v[,\275\207I\231\275\334\3756>\334\007\037>\224\273|\275\365I\255\274\006i#\276\303\347%>\002s\267=\350\256j=\263\301\356\274\377\324\243=r|\024;u\315\001\276\033!\201\275\235v\372\274UP\317\275\256\361\326=\224#\202=2\037*>%$\020\275\245\021\253\275i\035\236\274\365\355\r\275\266N\277\275?\250\003\275qe*;7\0377\276;A5\274\343\276\312=\271\332\271\275 t\355\274\217\325\240\274\327\222\311;\035|,\276\r\266\350\275\250\014^\2746\331\033>\212\227\247\274\261\276\244\275p\327<=QK\371=Y\267\327\275\321\026\353\275e\r\014>\231\2567\276\0176\347\274\312\225|=\240\360\253=\277\375\225<_\177\032>l\270\211\275\330\235\262=l|\273=\201\017!>\346\330\020\276x\'\304=k\306\240\275\247\230w=O\361\003\275\006\353)\274\330\366\207=\207f\030>\322\305\305=\270\333\032>a\212\245=\374\2506\276\013\363\313<\272\235h\275o\r\307\274\364\351\037\276\202\234\024>\016\020\257=5y\005>\233\215&\276y\236\356\275\351~\001\276\366-#>\257\367s=u\325$\276v{\003\276\305,\247=\220\216*\276\271\214\242\275\0004\373\275=g\256\275\200x\303\275\264\177\221=\021\230\022>\022\267o=j\344\257\275B\260&=b\335\016>\023H\036=mm\327\275-\275\033<z\314,=\337\3129\276\354\020\005>\222\361\201=\300\250\243=9\377\207=\267\353\350=\024&\364\275\330\343\221=\353W\275=\024>6\275\036\027%\276\342\267\034>O2y<\031\313\001\276\337P\022\276-\315\373\275)G\304;\014\214\n>u\005x\274\251Q\001\276\r,\240=T\037\245<#\"N\275\321\006\'\276\373\235\301\275\360$\373;\321\3236\276\233a\302:\342k#=\277m\024\274\001\243\351\275\215\002{\275dA\365\275\013n\021>Q\031\377\275\250\344\373=\035<\360=`\216\235\275\265\223;=8\233\266\275\262\003\024=%\316->\032\331r:\257\010\004\276k\242\252=~Z\246=\212d\t\276\354\313\311<\331\331\317\275.\233\007>\260\202\006\276\371h5>2y-\276\246\214\324\273 A\016\275\004]#=L\330V\275\014R\001>\210\275\202\275\335}\255\274;\331G\271|\3725>I\255\031<)\244\007>Hq\027\276\200+\322=\362\023\215\275\300\211!>M\234Y=\232\035\n\276Kz#\276%\014.\276\261\037\322\274\274;\344\275\2456\010\276q\3063\273m\2725>\216]\225\275\244\304\371\275O\270\237\275\273]\020\276\263\177\267\275\221B\014>\020\315\010>\027N\"\276k\2325\276\203\301\356\275\036\311(\276 \240\324<\341 \325=\2533\227\275\2347\221=w\2644\276\264V\352\275ST)>\243f\265=\312^\306\275\253\377\207=p\362\337=q\n\257\275\020j\246\274S,\030>\367,m\275zK$>\234~\201=u\3171>\022\231-=\312#p\273jz\303<\317j\t\276\"a#>\320J\030\276\353l#\275\324\224\357\275gy\333\275m$,\276E\213Y;\332>%>\310\347\036>\313\177+\272\252<&>\026\371\273=\220\330E\275&\216\006=+U\003>d\006\006\276\034\300\014>\351HY\275\201\277\347;d\277\017\276\013\201\257\275_.\375\275?\016\302\275u~\232;c\240\026>\034\024\277=\016y\262\274U\223(\276\377Y\320=,\261\313\275\324\353 >\250\262\003=O\0049\2762\310!>4\316\311==\347\016\276xm\024>\232\000\233=3I\235<\036\376\214\275\350Z6>\264\266\r\274u/9>\033\023\330\275\323\023\001>\327c8>\355\277!=\211\360%\276\235\3115\274\231\356\342\273GE\372\275\334\244\335=\010u\'>\254\255\231=\271\201:=:\3541>e\273\247\275\241\2135>\'\023\316\275\357 \205=#5I=\002\034\031\276\231\323\027>n\374\202\275\270M\225=\320B\244=}\201\210<\333\301\002\276*\346\037>\\\243\363=\204\2404\276\365\342u=r\342R\275\023\2235\2765O\004\276\203\2735><%\367<\210\224)>\301V3=\3701\017>W\004\037>\275\354\023\275\214\315$\275/,\"\275MK\313\275\3171s=\357\227\357=<\225\003\276\274l(>-#\302\274\3747!\276S!q=\320\332#>\022\206\013>\327\307v=\2251 >\033c\242\274\367B\230=\201\022\003\276(\270\240<\325\035\301\275\333\212\357\275L\\\016>\221[\272\275\331]\242=S\201J=\235\"5\276^\242\255\2751\265\274<Eo\335\275vA&<\264\355\000\276\305\253#>\217\034h\275\356\021\"\276\016\022\031>\341c\001\276\252\353\r\276\3010`\275w\346\206;\247\'\263\275\323\352\230=\017\211\330\275S\326\360\275AE\004\276l\2474>\304\221\014\276\353\305\204<@\302\r\276\267U\372=C[\227;\314Z3\275ib\203\275V\361w=\266y\361<\317-\342<\305\332\361\274\177\273\203=\321=\r\276\303\226\036\276&\253\030>N\211\323<\0266D=v\371\202<\316\003\341=-\251\320\275\205\352`=\213\326\351=y8)\276\263\371\270=G\363\214\275m$\243=j\243\266=e\246&>\256\0142\2763\331\240=\266\005\010=\333\315\255\274K\364\261\273\\\'\033\276A\346\022\2748\237\001\275\255P\010>\010s\036\276\200`\343=\337\3716\276\231\241Q\275!xJ<=\234\346=\260\3367\276\323^\304\275\2622->?\"\006>\315\263\243\275W:\331;\032\377]\275\201\365\226\275\316\360M<\204\203\'\276$\023\262\275\334\027\330=\276\227\024\275o\301\251=\205j\216=Cy\223=\376\270\017>\203y\215<W\"\025>_`\030=\00448>\210j\355=7v\r\275\265Z9>\032k\016\276d\367\266\275B\002\217=\034=\275\275\013\023\000\276\355\222\205=\270\224\346\275\244\005\356\275\256<\023\276o\t\320=\301\2007\276\352\267\005>\024\337\322=\273\321\024\276T\320\013>\0300\031\276\267\224\240\274UF\252=\270g\336\275\313\027\340\275\266\365\326\275P\240+=\235\324p=1\372m\272c\210\260=\267)%\276\334r\035\276u\241\335=\002\244\022>&\"\\=.U@<l\230l=\325\300\005\276w\001\345=m\377\022\275?\307W=\240\021\000>\023\252\033>\207\352\227=\211\227\246<\021~\001\275E\274\003>9\301\263\275\013U\013>\235\246!>\256\0220\276\014\352\022\276\3315P=5:\321<v*\347\275\016\315\272<\253\037\017>\237\035\362\275\360\224V=\035$\233\275\320\363\032>\016~\240\275\334\037\203\275\313h\221=\364\320\341=\233\030\261=M\264&\2766\365!>\027\255\235=mT7=\274~8>\226\002\373\275\351\2700>Lp5\2768\200\'\276\250\270\323\274,\335@\275\030p\354=R\313\321\275>\304,>/V\205\274\332\271\202\275\372\010\336=\201\2349>F\017\266\274!\356\t\275\340]\024\276\324ez\275\\\223\026>-\023\263<J@\006>\354\3045=\252l4<w[\217\275s\320\026>\n\034;=4S\255\275\004\322\335\275\302\230\023>+\317$\276u\353\277=\323]\346\275\025\251\006>Z\211\271=U\375\">E\275\216=\024\212\007\276\336<\223=\267\253\337\2758R\236=[\257\232<6\023G:L\3630=A\211\004>.\301\026>!h\346\275`\202\'\276M\277\353\275\030\341\007\275\035TZ\275R\0055\276Jsx=I\220!\276\347\256\031\276\001\204h\275\374\250\350\275\336o\376\275\302}\004\276Q&\302\275\206`2\276M\332\343<Q#\306\275\372\357F\275\326\204\241\275\232\\\262=is\020\276\231v!\274\360E\233\274\275s\221\275-\300\035\276\201\322\302\274\022\210\032\276\360\351)\276#\247\203\274\0168%\276\223Q\322;\231\265\r\275\275t\211\275\317^\313<l\337y=\033w\035\276\030c\021\275\302#%>9)j\275i\270\'\276r\347\257<\022\2245>f\345\n=\344\361\305=\366\236\371=4\266\036\276B\216\003\276SV\"\276Z\227\010=pQ\035=\021\0237\276\262\2650=n)\237=?`\261\275\360\232\345=8\342(>\302\231\014\276.\265\333\275\005\261-\275\2220b=\300\200\203\275\341$,>.\231\277\275^\035\256\275\034r\310=@Z]\275\270\t\034>\367\277\321\275\270j0:\220\021\030\276!u+\276wq2>)\267\276<\201\0338\276\356\217\270=\030e\305;\375P\240=k\000l\274\344,\014>d\n\340\275\236S\034<\326\204#>L\351\007\276N\375\221\274O\250\021\275K\007\321<(\005\020>D\037f=\303S\212=\324\2204>\255\274\031\276\255\213\373\275\233\203\036>\236\316\201\275)\020\362\275\302\220,>\001#\033\273\r\350\205\274\320!\305=rK\314=\177[\346<)\220\343=\237\246\235\275\235k$\276\251o)\276nJ\230=c\305W=\200?\003>VK#\276\342vC=XV\205<?\316\260\275\013\301\035>Z{\215=\0218\326=\233?\344\275\316\315\221\275\234\311\203\275\216`\342=\351\032\300\274\255F\224\275Mf\r\276\327(\010;e\013$\274G\017g\275j\241\010>T,\307\275\341#\267\274j\243\245<\313\306\324<\241V\210\274\323\273\330\274y\264\253=\361\204\230\274\207m,>\230\001\033\276t8\036<\007u\343\274\033\371\342\273\037\267\r>\tj0\276M\301\356\274\026\217\021\276?j\332\275\213\356\010>\270n\303=\24074\276\376\334\202=g\221x=\216\374\326=\007\235\274=\364\374\305\275\220\205\360<\377\262\374=\016\014A=\236r%\276\027\215==\302\310\323\275\036\271?\274I~~=\217.\260\275E\312\245\275\264\352\234=b\225h\275P\330\353\275\206i\033\276\034\272\r\276\245\367X<\236\310\301\274\326/\200<\220\216\374=*\003\365\275\371\2629>\017\203\311=\340\236\360<\337\225!\276x\016c=\300\306\370\275\232\327\316\274\304Y\247=\301\241\315\274#\362\020\276$\010`\274\314Q\">M\247\010\275s\315\341\275\270\005\261\2757L\026>\256Z\341\275\2724\021>T7\2728\177i\221<\302\265+>\"D\265\273\367l\263;aeW\275\013-\305\275\246#\335\275)\242\232=\002\303\032\276\303\306\034\276\227\340S=\354\304\027>\006\377\331=\367\311\'\2762u\'\275\265\261\253=\373\3345>\270\025\304\275\020\224\236\271\207\357\207=\310\355\'\276l\274\261=K\"\273\275BC\322=\230\022\t\276\3729\'=\002\032b=\004\2151\274\n;\016=\377L\276\275\232\306\005\276S\370%>\230\242\240<\243\005R=Z\234U\274@ \370\274J\217\202\275\355\364\007=[\276\260<\355\264E\275\377s\033\275\365\016\264=\364P\353<\314\301\247\275\276\036\376\275<<u=\304\216P=\230L\030>\317\010\037\276\023\t\214<\223\334D\2757\002\020\276\354\300\340\275\232s+>Y\357\331\275u/\005\276\013B\317=\035\334\005\274\350\343\327\275\352\320\024>.\222\212=1\311\313<N\354B=\322\2002\275hL\353=\022\270\"\274`O\032\276L\001\277=]e6\275lI\217=>O\017=zX\215\275\'-1\2762\355\240\275\315\013\016>\033\230\'\276\335\353\352=\200\374\267=<\313\301\274\037\370^\275\304\315O=)N\274=~\207\216=\000\006\235\274\272\1770\276_\355\225=\245e\313\274m\026\331=\\\360\300=r\265\254\275\370`%>\234\376\033\276\236/1>\361]\003\276I\301\301<\305\0005\275p\230\006>D\243\260=my\330:\244\355q<>\316\260\275\204\316\216\275)*\331\275`\340\027>\2745\322=#\000\342=Q%\363=\312n\211=\234\226\363\275\031\205\207<E\303K=\\\200\274\275PS\031>\010\232n\275\335\213q<9\027\342<{\235O\275\351\363\001\276\"b\236=\2443\312={T\345=\344\214\006\276l\253\034\276y\270\002>\1775\027>lUQ=\207\t\377=~\221\r\275\275\306\312\275\357\376\273=z\257h=\235J\356\275v\220\326=9\177\350\275\3733\227=\267\207\315=\366\335\201<\016F\276=\201\256_=\324\277\263<}{\237=(T\261\275\324\337\343=\316\027\241=k\r\231;\024G\027\276\220\n\321=Od\005>\177\357\013>\207\303\254\275\367c>=\301\265.>5/\006\276\234J\242=\234G:\275+\234G\273\"\307{=\0318\241\275%\301\322=\317y\301\274\270h\026=\211}\362\275\032@\214\275\332\031\032=\350v/>j\212$\276\342B\030>\232r\234=H\342 >,N4\276\222\334\305<\364\r#=\027\310\212=\246\317\026\276\252\361\034\275\232\003u;3\354B<z\005+\276\206\261\022\276\0273\374\275\024\314\205\272\242M@\275\230\304\032>\243\006\221\275\332\275\320\275&\253\t\276\277\356\206=\"0*<\3700Z\273\237\352j\275\354}\004>\202\"G=\006\253\271\275\003\270\032\275\277J\305=\246k\361\275w\376\375=\032\321\343\275=\332\335\275\364c\007>0\330\210=\235\'\006>\2762\261\275\351\3702\276ev\212=W\260\350;@\330\231;Q\351!={\206G=.\256\351=P\367\256=\275\244|\275\276V\325=c\3129\276?\225D=\317\2521>\337\322l<\022\257s;\214\345\310\275Om\'=\235\212\217=,\2449\276\244\232\n>\327\324\321\275\206Z\316=f}\355=\001\000\344\275\204\226\204\275\327\237N\274f\213\225=\025\230&>;j\353=n\330\006\276^X\"\2763{\006>\225@\002\2761\246\200=\344\374\025\276\271\200\017\275\225IA=\262^\353\275\030\262\001>\006\2210>w\311\243\275U\223\301\275\360\357\246\274\016p \276\314N\032>4\3251=\262\323\352\275\370\373D\275[\354\013\276\366\\9\276\262+\253\275\001\010:>.\317\324\275\004\255\007>\031e\027\275\261:v=\353m\020\274\2777\002>\227\251%\276\232\237\203=/\301\301\273\242Md<:K\002>\316\033\341=T\202\241\2758\031P\274\340<\216<\225\221P\275\317\3407>O\373\010=\032\t\005\276\027;\344=O\014\326\275D\340\016\276\274\'\317\274\365\253\320\275\016\210\370=\2728\235\274\005\3310\275\263F\364=\025\254|\275\327\243&\273-s\001>\2108o=\215\303\321\275B\274.\274\025\3620\276\270\')>\3235\302\275\276\334U=8\277\007>\346\223\325<\243\264\035>\347\231\024\276\025m\315\275o7S=\206y\024\276I\t\013\276Jt\033>\325S\335\275\000\327\"\275.\0139\276\235\000\241=\322X\027=\027K/\276l\265\357\275\320\'7\276\326H\327=\220K!\276ig\036\275ES\244\274)\376\007\276\355\002\021=\214)\034\276e\305\t\276\025\345\234=\247\203\310\275q\272\312\275;\362~\275\200][\275p|\005>\320c\231=\023\357!\2765\243\022>d\0109>8\014S\275\335\177.>\021\341\371\273\000\226\036>\371\3478>\276\246\025\276\342\233\254\275\361\324\013\275\006\272\337=\234\267\027\276\177\014\333\272\357t\371=\354\001&>$g\032\275z\027\000=\336\027\273\274|\300!\276K\006\226<\033h(\276N\231\375\275\035\016\024=\203\350\031=\210\023V=\'\037\253\275]\270\025\275\313<\276<\315\336\032\276q\372\232=\301M\036\276`\007k=\341\0048\276\213\344\270\275\037\2031\276k\355\025\275\241\242\006\276\006\031\003>^\345\332=Q\310\013\276\013\202\023>\310R\226=I\240.\276p\007\270=\253\325\257=\354k\025\276RM\302=\254\373\200=\352N\204=\223\244\371<\224\340\026\276Q\242\001>\217\007\206<6\377\206\275(\307\366<\244\217\">\254\022\306\274\374\307\363\275P\277\247\275\022\276X\275\200l3>}\371\275=\245`\003>\025)\212=\262\332\375=\2160r=\320z\254=\312^\315=\014\230\376<\307{\233\275\216\025/>\223q\236\275\263\002\317\274:\246\270\275#A\200\275\r\2162\275\357H\371\275r\247\010>=S\207\275Cb:>\233\206\005\276W)\245\274\343v\002=\216\n\026\274\222\n5=8\204\330<\273X\246\275\342\022\253\275\302m\'\276\233\226\355=\204X\030\276X\003\255\274\253M\330=\201a\t\276\277\263\203=L\260\023\276F\312&\276\276\326\275=!hD\2758\302\364\275\310\273I\274(Y\002\276#\252\366=^|\256\274$y/>\211\256\206\275\001\261\265=u\263\252\275\306u&\275O\214\265=GA\025\276{a\354\273-\330\303\275\017\375,\275\232\033\317=GD\005=\272\242\t\275*_\256\274\003\t\033\274\300o\016=\300x\035\276\324i\000\274\033\033\334;g\340*\276\304\0216\274V\232\214:#\201o\275\322\301\342\275.\312\346=W\314\003>\363v~\274X\r\245\275\231\337\312\275\303\247\022\276\363\331\203=,\261\234\275\004\345\026\276\275#\023\276,5\342\275:\273\375\275\235\r\213\274\340\006\337\274Vo\021\275T9@\275w \374<\2113\246=\211\327\302\275\314A\037=\004\005\304\275\372\277Y=9\027\205=\"\352.>\240\266\004>\207\"7\274N\254\033>\252J\006>C\355\261<\315`\313\274\2174\332\275\363\223\327=t\260\306=`\016$>1\207\241\275O\254\034\276\367\334\220=)\324\221\273\004\201\034\275O\376\252\275(8\334\275\376\001\330\275\272W\335\275\307s\205\274;\371\004>7\273,\275\362a`\273\250\313\244\275!\313\242\274\335\031\337\274\230\020J\275\370P\366=\271\013\013\276\027\212\'>I\262\321=>\344E:\232\221$\276S[\227\275\000v\025<}\320m\274\355\017\210\275\216\376D\275J\224\234\275z\013\345\274\033^.\275\225\275\325=z\314K\275\225x*>}\006\000=\324\'\376\2754|s\275\037\271%\276\200\313\013=\257\245\312\275\003\312\376=\246\211\035>V\250\017>\262R\217\275\026H\022\276A\"\002\276\375[\213\274\321]+\276d\346\334=\r\320\033>%\022\331=e\252Z=)\266\257\275f%\033\276\"\353\006>JZz=\301j\345=\005\324\226\2743\255\276=\316`\032\276\025\376\032>\351\006\314<\007\021\221;\257\353\016=\354)\373\275\257(\030=\202\240\377\273\330\365\277=\252\325\306=>\347\360\275l\355\361\275\372\316\034>\374[\347\275\237\014D<\225?\313=\000\353\227=33\323\275_\000\007\276\332H\301\274\375\215\027=\243\275\224<\273\356\276\274\311C\304\275\213l\354=\305\r$;\364q\225\275\355\3143\276O]\017=\237\256\200\274;\'\007=\300\035\253=\362\007/\276A\326\336=y\023\314=E5y\275H\333\324\275\331F <\220\320I\275K\001/>\370\343\232=\233\263\016>\225\220\237\275,\350\350\275\272\377\224\275|\213\302\275\206\272\315;S\357\246<9\350\303=\212_\360\275\215O\021=\302\244\211<\"\200\213\275\033YH\275 6\326=o\025D=\013x\002>w=\016>\314\377M\275-L\001;A\305\353=6D\267=;#\"\275A\204\206\274:\265\022>.\036\033>\235\375\017\276\2119\'>\340\017\'>\000\364\033\276g\007\212\275_@\024>_\355\n>G\225)>\242f\207=&8$>\206\357\206\275\261\237\032=\214\372l=\223\354\013=~\224,>\331j\244\275\217\314\007>\311b\036\275\357\313$\276\367\333\337\2730\205\021\276\200\310\364\275\rUC=\367\303K=2\006o=\350w/>\020\213\300=\204\226\367\274\222!\027>\200\232\010=2\347x=\317i%>v\302\305\272<M\255=?\226\025\276\003\177$\275bR\337\275\013\204\035\275AJ\332\275\237\371X\275l\274\025\276\377E\013\274\'Z\004>{\371\023\274\336\376\025>\207_\237\275b\250\021>\36038\275 >\206=\335\027\354\275\314\334\017=\250\035$>:\306\276=,\311#=\232\3309>\303\367\270=\331]Q=\3745\321<4j)=\017\371\035\276E\004\332=\023\200\253<\217&\216<\275 5\275\267&\365=<3\230\275\321\332\370=]\277$\275\";\025\276\243\351\254\273\027\314\005\276\346#\223\274%\341\226\273\324\363\337=\000\323\277\275\234\346\360=j\255\022>\344O$\276\021\360\365\275\303\010 \276\373\244\360=\007\341\'\2760\254\n\276\001e\002>\273\341\016\276\272\350,>\266^\017\276\252{\274=\366/\t\276\322\007\027\276Q\341\002\276\336\360\366\275@\001\270=\220\035!\276n\nu=\252F\037<\010\336\347\275_$\256\275\206\035\366=\255\333y=M$c\271h\342\013\276\230f8>o\324\017>\237\313#\276C\025\237=\317g\377\275VzR<7)p\275\322\346\214=\305\244/\276.\315\355\275\234;\324=\310]\374\274^\250|\275\365T5\276#\2744>\306\000a\275\002\301\270:\221\262{=^\270\"\275\010\002X\275%P\005;\347\022\204\275\327\233F=\312\177\213=\256J/=D\003\271=w\004a\275\213\033\035\276\033\2136<\377\375\n\276\220\2243\276VaC\275\346U\354\275\253Q6\276\360\272\315\275\335\220%\276\275A&>\314\362\343<]\'G=M\244\t>\254\014\317=B5<\275nS\t\276\343N\271\274\307\263\257;\326\247\246\275\371\364\256\275\333\333\347\275~n\035=,_h\275V\313\032>\322u\r>\262\231\273\273FwA<\370\260\364=\244\255&>\307\036\326<V\360\371\275\264\257\234<r\327y\275\275\230\007\276K\305\317\275n\3048>|\377\020\276\207\360\355\275\270\360-\276Q\222\200\275F\204\203\274X\253\221\275\225J\017>Y\266q\275x+\001>\036%.\276AA[\274wN><\010f$\2768\035-\276\252\003\211\275\221\234->\222r2=\332\340\030\276%\256\211<\2721%\276\021:^\275\205\212\257<\004|\334<;\237\002\275p\312+>B \276\275D,\266\275;\031\014\275\360\3505\273\246\036E\275\034\370\221=\373 A=\345\204\261<\023\303\245\275\200K\000\275\353o\245\275\2538\363=\3709O\275\357\217\025=\'\270\237\274\370\2539<\tL\n>\210M\351\275\232\237\315\275\347\232\013\276D\300\255=\211N0\273\276\034\271\273\336\n/\2755\\\254\275d\376\263=\243d\305\275\201\267\231=Z\270\200\275\370\006\006>]wG\275\275z/=\346\304\376=o\034\035=\206\255\221=\337r\342\275:\023W=.v\334=Yw\212=\033=\027\276\265\305\006>\3072\341\274MOw=\"k\037>\005K\207=c\256/>\224E-\275\034\214\254=\n\354\007\276\241\347\210\275\222\206\312\275\260\276\356=\307b\037\276 :\273=\013\334\016>T\233[=\203\013.\276\200\322\327=+d*\276\275\325\220\275\360\257\273\275\337\002*>\234\021|=\225%\213=\217\255\265=\333\374B\275\344o\255\275a\260u\274\021\306\005\275\244\373\257\275\347\027\013>\375\257->\274\332\025=?\226c=\321\214\277=\023\255\032\276\361\256\354=N\204\225\275\260c\t\274\030\002\022\276\242\214\013>\371d\030>d\205U=\257!9=\032.k\2757\312\306<\222\276-\276\006\363\213=H\245F\274U\353\332\275I\2613\276l\313.>\023\360\217\275s\343,\276O\305\202\275\371T\244=Q\375\016>\016\230\262\273\335\330\002<j\206\244\275\254\345\026>\373\204\331\275\3239\034>)\254\n\276Ol\002==\213\002\276&(\237\273:\315\252=\351\205\006>\212\014\027\275y.\317<\000>\353\275\301 \032\276R&\376\275\316\343\211=-\257\260\275\032\366\202\275?q*>\376V\343\275\206c8\276\201\273\274\275\\\366I=\201\3247\276\247\261\013\276\234[\022\276zX8\276#\322/\275\017\033&>d\303\342\274.\035\023\274\257\246=;n`\004\276-?.>T\3226\276-\2328>~\237 \276\320n\273=8\016+\274}9\320\275\225\202\225\275q\244P\275\310yg\275\022E8;\255\271\345=\377\021\263\275\006\231\341=\312\377\014\276=j\240\275Z\351V\274\352\312\223\275?\304\321=\256\317\317\275\251\t\237\275\235`\037=\317\314w=\310U\030>\317\306\326=\020\004>=\021\250.\276\212DC\275\255e\025>b]\003\276\376\2703\276T\363/>\334-\240\275\037;\016\274,y\035\276\310d)\276\333\254\232\275\"\034\277\275\232@\222=\325\320\315\275\023$O=\344\243\r\276\312Z\017\276\212\264\016>\3678j\275\211\227\235=SB7=\312\335\016\276:Q\006\276?\264\247=<LV=\210:\201<\3365\241\274\267H\n>M\261\204=\346\006\301=\303\035\346\275\252\355a=\262M,=\306\n\014\276\207P\355=S\305\332=yS?\275\264\334\201\275\234\222\276=\356(\212\274]\007\002>a\247\261=\016\3041\276\240\363?=\240\354&\276\n\302\004\276\2051\223=\rO\346=\014\345\034>.5\371=\270(R\273\355\2163>\r\n\027=s/\313=\301$\330=\206\307\021>\023\202\325=\321\027\n\276\362?\376\275X\246\025>1\273\025>\363\227M<\322\023\\=g39\275d|\232\274\252\004\267\2751[\326<j\343\313\275\354\252m\2741\006|\275\037\222}=M3\267;L\211\240=A\203\377=\260\336\355;\261\227\240=\251s\301\275\034G\370=b\233\020>UE&>\203\3653\276\n\222 >g\337\036>A\217J=mC\004>At7\275\003\241#\276\2203\244=U2\210\275y8\302\275\320\316n\275b\227\356=<\007\204\275\325\2536>\366\341\r\275\315\233\366=+\032,=d\234(\276\022=\254<q*\034>\225\340\273\275\355\343\217\275v(j\275\n\353)\276\313N\"\276\301w\304=\366]\017>\201\014\261\275\255\227\300=Z\220\016>\"\215%=\221\3413>8\371\222=%e\370={&\325\274`\010\010\276\357\021\005>h\246h=\036M\016\2769\000\354=\325\244\020>\215\313z<N]\350<:\310\252\275\373\233\207=JC\002>\345<\034\276#\272)\276Q\213\023\275\254%\206<\205\236~=\305\224\200=T\001\260=\310\334\313=~ \321\275\r\253\346\275Xl\275\275\372\255\215\275H\223\343\275H\302\004>R\311\034>}\245\361\275#;V\275\375}C=\304+\030\275\355F1>)H3>\313\311\\<\217Y\204=\262w\351=\n\377\025>x\263\025\276\234\320\226<\230\275P=0}m=\310p\226\275\264\323\t>Kd4\276\017\375&\276\2755\367\274`\2516\276\030\227\353=i\375\372\273\335\230\226\275\275\252\310=p\302\212=\350\251\013>B\244\036\276\375H\355\275{1K\273\004\032\367\274|\352\224\273\024\027v=\336\233~\275\233\272\032\275\003\311\255\275\301\350\307=r8\033>\004@\"\276o\262\263\275\221\002\006>\303\255\256<N\3772>T,~\275\332\307\212=\246^!\276^\333*\276\305\037\234\275\247d\252=\324\336\326;\006\026\254\275\242\020\300<\270\234\217<.\361\226=\370\311/\276L\205\211\275\232\250\272\275E\371\324\273\355c&\276\202a{=\02783\275i\317\037\275\374\'\304\275z\226\016\276\312\347\035>hh\022\276\236\037\014\276\020pq\275\222\265\255\275VD\022\276\203\240\362\275\344\365#>\221\252\332=0-\344=\221g\025=\272\325\022>\336\341\355<\331\035\316\275\243\300\265\272\305\342\004>\345R\262=\0277\342\274W<\006\276|V\323=b\231\354<u\227\301\275\243\217\205=O\006\017\276\242:g\275\304\n,\276\267\267\364\275\020(\232=K\232(\276\024$\342\275\212\352]\275\320\337\004\276\233\365\212=/\243c\275\204/\036>\034#\t\276W<1=W\237\271\275\334\035\227=U\375\340\275\320\211\026>d\352\336\275\302O\223=\010C\024>t\236,\276\010\315\036>\206F%>9\026\263=\374\002\344\275CP2\274\362>\030\276\202\217\324\274\343\370_\274\320\233\307=\231\3434=S\215\206=\334\345\000\276\272\243\205=A\031.\276\227\351\207\275=\264o=I\024\014\276\013\343\305\273\233\205$\276\020\351\245\274\227\027\317\275\272\333\200\275\340\225\330\273\236_\274\2758\3238>\234@\357=\030\\>\275\241\361\247\275i\347\000=D\201\212<1\031\226\274\310\006\201<\206\375\213\275\363\322\221\275a\330\211<\010y7\276k\325A\274T\217>={\257\005\276P\020\007>\212(\246\275\264\307\034>\265C#>\371\371\320=\236\3618>4\206\027<\262K\322=\334F\003=\036Z\004>L\026\334\275\260`\346\275\023\220\216\274F\215\037\276\245\265\022\276?\332\'\276\247\226\323=\323\220\026\276YY7\276\276\325$\276\375\306\002\276s&\r\276\030j8=\241ji=\303\"4>\271r\257\273\260\267\304\274\361\331\027\276\256\220\006>B)\236\274x\267$\276\364^\031>\005\316`=\033\215\274\275H\345\225=O\222\022>\247\033\207=B\365\346=Ww\007\276\n\r\240=\034\374\316\275\335\n\335\274\300\360q\275\266\020?=M\'\014>\337\017x=a\370\n>\031\337\002\274\315\177\315\275\245\177\313=\004j7\276#r\230\275pg\326\275;\311\007\2758F\245\275 \2401>e\334\224\275\252\023\007=\264_$>\234\033\245\275\021}\377\275>=,=\203$\003>(=\234=\314\257\027\276\204\354\333=g\266\307=U\366\034\275\355\231\244=\305\004t\275\374V(\276\\[\270\275\2126\251\273F\327\326<\373\245\317\273i+\003>\376L\352=\224\252\305\275HD\303=\363\370\317\275\316\3119\2764m\224=o\r\320=\020=\272=Z\363\025\275\203\343\030\276\007\326.\276\254\303\031\276A\202\034\276\303\251\344=\006R\335\273\223u\007\276?q\355=u\322\016>\264w\243\275\321\274\272\275\202?\206\274\362\342\020=|# \2767\366\023\275\351\317\000\273\205N\025\276\037\301\031\276S\237\241;R\020\344=\246?l\275m&\027=)\377\022\276\337\021!>\016\224\360\275Z\024\246=\3203\336<\2474\"\274\313\276P\275\316#n=\306\313\276\275\332x\231=z^\262\274\205V\207<\002.\234;\313\250\304=@\311\213<ET\226\275g\032\024>\026\177{=PRM=\252U\\=\253\350\335\275\346}4\276\0078 \276]n\313=3\201\363\275\255U\357\275\233a\"\276-\277\314;\221\r\237=\306\236\367\275\366\017[\274\035@\333=\264\363K\275y\350\001>yw.>\363r9>\373\202\024>Y\013h=\364\"\340\274\321\307\r\276\310\323\030\276\311h\204=Mx\230=\234\203\236\275\226\3209=\376b\013>\017\256\300=J\376\303=\021G\035\272\377\2137=\314\3753\275\t\363#\275\252Fu=\010U\324\273\024\277@\274\230\225\001\274\227\317&\276\253\027\036\276z0\r>A\251\201=U\252\354\274\254]\223\275T\222\250=\345(x=e\300\005>C\243\321\274=\325\233\273CW\032\276\002[\217=\250l\031=\312\263\347=t\031\034=\330\'\220<O\024]=@h#>O\035\352\275\260\216\030\276iF\004=<)\235\275\217\007\324=bW\364=\nW\347\275<\0377\274M\002+\276\351\333\222=\371P\261=-W\347=jv\363\274`\352\370=\371\024\246=\350\'\'>\271\231\213=\342H\320\275\342\321O=6\201w\275\274\233\376=V\3331>\216\204$\276/\377P=D\314\000\276\306~\226=\304\335U\275\270\363\024\275V\032\226=\376\240#\276<B\330=\271\232\367\271I\004\036=\342\377&\276\330\310\277\275:\034\027>\003\265\010\276\371\204$>\370\275\340=\334\320\303=\304\013\270=S\225\010\276\222a\366=,vM<\022\177\026\276\376/`\275^\336\215=\240!\020>\355z\007>|\267\243\275\2439\027\276\212\207\321=\275\231\312</\251/>>\001\001\276+\357p\275%\342\212\275:.)=\031\262\"\276JS\305<~^\372=I#K=}\356\262\2744\322\257\275-\032\332\275_B^\274\024t+=!\025\002>\337u\206\275\004\356\345\275\"\032Y\274\247\227\341\275\212{+>\326$\034\2765W$=}0\256=^Z\343<\235\033\004>HT$\276|\277,=\242#\244=\332\266\225\273o\335\323=\310\301\363<z\352\312=r\005\266\274\334`\003>\230\342!>\035*0>j\326\016>i\217\310\275(\222\376=\316\237\212=T\2714\276\023\337\363\275\005\223\007>J`\204=\004i\352=C\0149\276C_%\276\315\241\247\275l\000\256=\017J#>4Y\005>_\275\215\273k\364\275=\003\273\032\2756\n\260=a\347\220=\364\327\246<\230\016\323=\305]4>\343\373\020=9\216\255\275RQ\220\274\357^\005>\027\342\364\274\320:\020>|~\005>m\212\357=\321g7>\201\344\t\2763b9\275\243\366\274\275,}\001\276s\223F=\264\024\014\276\335\337!\276\347F \276\325\210\225\275\264N\326=\363:\220\274\005\221$>\02651>\354\256(>\255-\313=U\345\004;\023\271\036\275\010\002\272\2750\273\030\276\316\272=\275ca\261\275\316\\\304=\243\323\003\276K\234\n>\204\032\215=\356\264\007>\271\300\006>\232\2152=\351\213\251\273\001\243~=\267^S\275\253Z\337=\262\r\000\276\352\017\324\275\222\323\210=Z\210)\276h\033\227\275\265\342\000>4\325\033\276\365\253\211<T?\022\276/\362\'\274]\003\246\275*S\307\275_\031\263\273#\235\006\275\3660\302\275\255\2528<\300\013,>\303E\000\276\220\010$>\211\0302\275\n\004\020>T\t\374\275\252B\357<6)^=\304\000Q=\304\357a\273\267\324\330\275,\024\266\2759\353\267\274\223Ye=`\303\226=\241\024>\274\026z7>\3431\222\275\376D3>\236\315\357\275\226\311\273<\311\207W=w\212\022\276\356\240\261<\350\354\347\275\255Mb\274\276\324\000>\t\274\263\275\372\320\206\274*\237\213\275L\272\024\276a68>\312\300\014\276\241\230\275\275\324\246\037> \305,\275\335\r\022>\210q\353\275\245\251\363<7\027\r\276\221\272$>\223\331\366=\305y.\275!\253\243\2743t\302=D\262\234\275\245\302\r>J[\034<\264\031\333\275@\025+>\373\306\037\276Pq\370=\222w\334=\345o0\276\273$\025\276)N\367=\026\n\221<\261\361\232=\336\212\235\275v\265\201\275a\314\344;\261..>N\337\223=\221m\371=\373\215\304=\235L\035\276zq\027\276!\326+\276L\360\352\274\232C(\276J\032\216<\323\r&>\261\323\'>\372\300\237\275\250\312\030\276z\216\377\273s\355\232=o5\371\273i\363\274=6\316!>\316t\261=?\007\031\275\234\035\271\275\353\200\014>\021*\030=v\363\251=:;\237=\222\3330\276HbF\275\371\n\306\274\370\356\243=\\\230\020\275i\330\034\275\005\330A<\0234\365\273\016\201\004>]h\305=\333\030\303\275\372\267];s\246\356\275\276a\313=c\273/\276R\255\323=e%\303\275\313\277%\276\255\310M\275NY(\276\246\300\221\275\035\024G=\037\3702=\376\3445<\006\251\246\275\370\037\023;~$\021>\315\244G<N\201\023\275\267\336\363=\342\336\347=\227J\210;{H\206=3\304\371\275\245\224\216<\217\363\373\275\236W\023;\373\203\330=*\352%>\037j\317=\275;\232\273\032\270\024;Y\313\340\275\274a\310=\341\317\207\275\265\334]\275\263\354\262\275\351<\031\275\354\311\347=\021\344\353=B\222\024>\243\303\n\276_\341\262=|\177J\274l\360\214\274\226H\203=\222\2201\276\336(s\275\340\373\036>j\016\202\275X\233\010\276t\331\255\275P\325]\2742\037\324\275.\236\356\275(\221\350=V\331\027\276F\0324\276\225E\037>X \204=\036\360A\275o8\260=Q*\244<.;\256\275\376\353\362\275n\327,>\251\373\216=\221@->q\3039>-N$>\341\026\204\275\r\0001\276\300j\031>\365\356v\275\3717\031>\251\343\271<\246\275\"\276f\302\034\276\210\262\"\276\000\232\032\276\021Y\332=3N\256;qa\260\275,\203\305\274M\246!\275\342B\353<Y%\r>\266\210\235\275o\340\272=I\235\314;]1\014\276\255\307\212\275\"\275\211=\367\321\273<y~\017\275vh!>\340Q\375\275\222c\023\2763%p<Q\322\267=\262\272\030>\304\274\236\275\024\347N=Ez3>\317k\274=\344\016\241\275\334\267\347<\330\022\024\276\335=\014\276,]\032>\377\2732\276\216\\\210<B}\340;f6\005\276\333-\025\276\314\276E\273\203=&>C\333\317=Z\364\272\275s\356-\276\373\324~\274\370\372\025<_\204\037>\203\323\360\275:\3124\276\213\255\'>\364\351\021>\360\021/\275\r\024N<\341E\314=\365\033\022\276\rL\327\275\240M\010>\010z\212\274\360Q*\276\335c\304\275:H\333=$\211\235<3T%>\316\343J=\254\253\352\2753w\212=\240\234w\275\220\356\007\276!_\'>\3623\251<^\t\343\275\te\206==\016$=\302\3705:\026\365\002\276\004\345\025\275U\302\331\275\246\366\216\275v*\002>\335\\W\275@\036&=\360{o=\221\\&\276\020~\333=\253\265b=\275,\002>\366\274\021\276\230\243\310:\001\016x\275\325\206&\276\364\361c\2754\025\220\275N\325O\275V\335\026=\227\000\"\275\025?\354\275\030\313{<C\230\205\275{\262\233=\342\364\214\275\240G\221=\036^\335\275\324ay=\371wT\275^?\017>\025\3126>\377\356:=GS\340\275\0374\237\273\234\275[\275[7e=\264\022\026>q\243U\274\217\376\021\276\2169\000=\331d\n\276\254j\242\275\233F\333=\325\374\244=\345\327\330=\320Z5>\033\323\340\275\030\1778>\272q\266\275\017\236\250\275\232m\352\275{\013\375<\205\217;\275\"\036\255<\032\252\301\275\263\247\371\275w\3458\276\303\216\365\275\3378\034>\357h\262=G\236\246\275\270S\037\276\325\300\022\276\202U:\276\343\2637=\246\177\016>\330.\235=\020\350\307=\251\325\010>v\321\300\274z\3759\276+}\014=\256M~=\204G\304=\007vC=\3418\356\275\302J\357<\001\261/\275\007Zb\274\211\3044\276\265\376\010>\334\303\206\275\207\323\225\275\213\026\222=\351\2353\2769A2\2766\374\227=6\337!\276\345\231*>\236/f=V\020F<\3217=<\323\210\231\274\266\214\270=F\303s\275\3021{\274\210\n\n>\374q\375=~\271\000\276n\266\033\276\320\232y=\264?\261\275\005w\025>\270g\002\276*\270\274=\226\253\304\275\347\367%;(\010\333\275\243\014?\274\204\217\272\275\311\251\021\276\363y\341=#X$\276@|\023\274(\366\354\275\304\017\000>\331\301\312\274\3418\024=\372d1>\036T\013>a\262\242\275\312\210\">\034\340\325\275B\346\031\276\225\365\202\275.\003\324\275\346\320\344\275\302y\t\276A\355\253\275\215\3442>p\301\030\276\270\306q\275J\003\335\275\217\312\360<o\377\370\275\356b\266\275Lg\273\275\255\350\236=\367\267\246\274$(J\273!\261\005>-\"\304\275\310z\022>\353\017\010>\024\277M= #\313\271S\000\023\274>\033\347=zj*\276\270\267F\273\225\202\214\275\00005>\304\306\352\274N\210\005\275\006c\013\276\rU[\275\323\r\255=\300\177\302\274{5$>\264%0\275Ny\335=\nR\037=\263\370!\2769\364\373\275\025\333\276\275\023\227\215<\220a\331=\223\263\335=\017`\021=\031|\331\271\371\351\240\273\341\017\241=\224\235\206=O\344\017\276\232\':>Pm\253\275\276\354\307<Z\005\330=+\213\004\276\224\257\005\276\354\2046\275\020\211\001>d\205\277=3s\353=W\013\226\274\177x\234=9[#=\303y\r\276\323\325\330=\361\344\033\276\255#t\275\031S >X\205\n\276)\013\263<l\3543\276\217\".\276?\224\347\275LF\r\276\343\344\003\276\270\'/>\023S\305<\245\020\372<\010\331\025>E\014\341=\303\272\311\275\257_\317=x+!\276\266\272\273=I\221\n=\315E\264\275\3577\014>\341X\010\276\333\362)>\265q\304\275\347\r\037>zx\267\275%\332\t>yBX\275\205\213\373\275%v$\276\366\362\354\275\221v\337=p\\8\276\2122\">\240D\323<\307\3310\276\237\203\325\275*\317\277\273\336j\366=t\341\035=\376\032 >\037C\026>{\311\030\276\365+\335\275\237\3272=\343\346 >\315\354D=#b7\276\333\024<\2733;\337\275\227l\'\276\223\021\274\275\267k-\276\324\377\014>\026dr\275[\216\336=\306\272 \276\017\212n\273\333\003\307<\265\363\264=\264\342\031\275c\255U\275\327\364\014>\003\231\310\274\225\231\203=\272:\374=\351\355\036\274\0213-\275\210\031\262=\2557\325\274\320\354\221=\323?\257=\313h3>d<\201<\346\206\357\275\246\347\220=3\3134>\207c\247={\240\032>\037\376\310=\346\027\225\275\370\217\206;\020\327\203;\001\243\014\275\260\333\336=\035\301\331\275\274\237\020>?\331G=\244p.=g~\024\276k\344\250\275\2422-\276\025@\327= FQ<\273\361\337;\331v6\276\002\262\222=nA\242=\237T\r\275TwC=q\024\211=\305q\t\276\016\313\240=\323qy\275/v<\273\373Q\003\276[Y\316\274\203\034\031\276\005\312F=\022\013!=X\313\272=\322c^\275i\272\010\275\006\2566=\205\363\266\275P\257\231\275#@\026>\227\334*>\240\354\332<\334\274\'\276\032m\214\275\344K\002>\242(\254\2752jb=\027*a=\002\341\245\275\035\213\004\276Z+;\274\362Y\253<\261\221(\275\025h\202\275\334\r\310=\215\024\260\275\355*\365=-T3>\336\2400\276\005\013\200=\\\346\317\2758G\021>\243\353\323=1\322\342=\275R\263\274\331q\204=\215\325(>8\022\254\275d\344\251=Vq\371=\337\274\244<\316Y\240=\307c\332=\031\225 >q87>\240\257\036\276\213\353\031\275\236\275\001\275JA1=\005\202N=>\037\224\275\337#\347\275C\264\364<\343\013\025>\025R\022\276\032\325\030\276V\033I\274\316\0227=N\242\031>a\205,\276F\334\343\275J\'\374<O6\336\275zr\002>\330v\031\275.\275+\276a\221:<\214\3478>\344\n/\276\3578\302=7\006\332\274eI5\274\242\225.\276\306\267\212=lFo=v\020\303\275X\0063>\270\260\007\275`$+=-R\233\275\247>\246\275x\350\013\276<\3201=\025\256\'=\203\246$\276\'\3111>*\032\342=\230\t4>\316\302\253\275M5 \276\020\313\267=H\004\251=\\`\251=\300])>\356\207\020\276\275n\213\273\244\177\310=\010e%=\320>\306=\310)/\276y\r\325\275\344\261\377=\246\314\006\276\264BM\274h\204L<\261\364\010=G\356\010>\374\224\367=\2031\003=\316D\352=4\230Y<1\0172>)n[\275\177\333\360\275\367\237\234=\3417\227\2754\307\302=\207\333\324\274\267_\222:74\246<\304\013\266\275\270\271\246<8?\035>\277\t\246=\034w\332\275\230A\243;\275\003$\275T\242\350\275\346s\032\276`X\201\275\353\251\021\276\347\253C=W2\027\276_\010,\276\367q3\275=\354\240=\023\021\245=|\377\320=\263p\365\275-\333\021>\010\2239\276\331?\001>2\265J=G1\003>\241M|\274\350iM\275\362\002\023=\346\273\014\276\257\240\250\275\356\362\274=\237\202$\275\364,\375=\025\375\324\275?%\225\275\177=->\323q,=8\021Z:\004;d\275\023\003\370\275\r\252\355=\347\216\024>\036\310\3659^\273\271\275\007\214\222<M&#=\350/8\275\212\375\273\275VOV\275Z/R\274\371\257\373\275d\350b<\237(\365\275d\307h\275]\254\215=`f$\274\316[\031=|R(\2763\342\035\276<\t\023>[\035(>\rI\316\275\211V\013>9N\004>\341\023)=1\371)\275\266y\314=\004k\244=\025\374\035\276\003\260\371\275\356\253\326\275\022c\033\276k\2549=@\254\200\275\031\240\257\275\372x\223\274z\262\355=F\312\267=\323_\024\274<lu\275zu\313=$7\026\275\231\233_=*m\025>\321m:>h-\001\276\230\226\327\275J6Q<\355\2345\275h\230\014:G\207\013<2X9>`\230\007>s\275\'>\374\233(\276\266\324{=\010C\005\276\2515\244\274\277X\201<E\235\245;_\352!>\324\\\307=\302\254=\275\212\275.>\244\243\">\\\357\022\275>\305\203\275\000\0268>a\312+\276\344\220\227\275b\005\026=@\373\275\275vfj\273\314M\201=\234\240\207=\271\311\"=2\251\315\274\234\025\344<\0244\366\275\261\0165=\300\\%=j\267\022<P\236\036\276\360/\024\276t]6\276\031t\346;\331\214\272<\035i\003\2750\346\261\275\352\331\266\274ps\022\276\252\023-\276-`\031=U\347p=\251\214\272\275)p\347\275\250\3366;\027^\204\275\021\255\017=k\272\267=\177T\t\276n\276\310=r:\342<\270\235t=\021\026\374=\211H\213=&A\033>\224\244\325=\356\\\025\276E18>\005]\013>\353X!\276c\377\214\275\033\332!\276\302\271F=\340\347\206\275\324\275\017>\271\310/\276\353\'\030\276t\2058=9)\">\265\337*\276\305\356\241\271U\242\336=\027\376\257=G\336\234<\222\205#=\237\222\002\276\3701\306\275\031o\023>\326\022\350\275l\005%>\234D\r\276\336\215\023>/\336\330\275#\361\001>E\026\001>@\364)>\303a\t>;B-\276\000m\214\275\322`,>\214\216\002\276\231,\245=\2531\253\275\363\377\002\276\3505\007>7\"\\\275\215iC=P\0033>\032\357t\275Q\264\251\274\332\001+>L(\014\2752\371\021\276G&\022\276!\2352\275\324\264\027>\367\335\020=\254\267J\274\200\027G=)*\255<^3z=\341%-\276Y\2151>\305:\367\275*\027\213\274\340+ \276\211,Q\275B[\367=\274R\336<2d\372<8\001\037\276\320\323\n>`A\023>x\374\207\275\302\263\001>\257\234J\275\317>\t>\003}\343;\022n\343\274\010.,<r\326*\276\375\266\036>8\241\177\275^q\250\275^\314+\276\007\\)=\366(\314\274\220\"\241\275\215\332==\037\202C\275\337J\217\275T\306\260\275`\017\t>\264G\317=\272\352k=\357\272\246=\333\177\300=B)W\275\\m\214\275\231\255\301\275(7W;\301#\"\276_8Z\274\333f\021\276&\262\206\275e\275\014\275`\373)>r\326\327\273+M\337=2E\006=\t\026\">\333\036\353\275\233k\023>\2016\035\276\256\007\270\275aL\274=\200\245\022\276\351\226\306=\2521O\275\3565%\276\261\036>=\310\210#>\022\020\016\276)\235\036>\026\252\036>\220\004==!\372\301\275\3772\367=\303f\217=\\e4>#\3211\276\252\337(\276g\225#<\305\367\255\275W\345\006>9\224\007>]\214\016=\307a$>\r\233\240;\003c5=J\221\216\275\327\210\">\001\347\363\275eV\213\275\270\361D\273\267W2\276)\245%\276H3*>\031b7\276\324h\245=c\360\256\274%,+>T^n<\2431\031\276-\267\345;Onf\275\206\301\260=)%\221;\023\207\002\276\303i7>\305\302\375\274\246^\004\276\243\031A\275W\266\256=\316{!>\342\000_\275\205\354\007\275\352\222\215\275\376.:=S\204\007\275\365\037\201\275\345\333%>\365\271\251\275\241n\256<\305\270\277<\355L\260\275\336_\003\276\013:\007>\222\025\230\275\356\271$\276\335\364\240\275\270AR\275\2252\027=g\366\026\275\322\336x\272\365N\276<\317}j\274\275\215\006>\226-\2259[+/\276\304\036\314\275\216\362E=#\341)\276RO+>\320V\016=\257mK\275\016@\'\276}o\306\275\202X/>\275+2>\365\363\022\276\024\032\034\275tW\224<\277\021\202\275\276*\020\276\345<\314\275\320\240D\2759\240\345\275z\2241\276U>\262=\024mN\275r\025\'>\352U7\2764L\262\275\240\377\001>7\374!\276!\251U\275\316\001z\275\002S#=m\037\345\275\262\275\023\276{\007i\274\305\377\212;\\\2501\276\020>\000>\300\276!\276\202\354\277\275\027\227\037>\304\250-=\025\214\206\274P\333\037>\375\230\341=\212\306\315\275\270\350\021>\205\251\226\275\367\236\217\275Qe\007\276;\000\245\275>\363+>\262;\267<\177c\005<\001\332F=\270\323\316\275\315G\321<z_\007\276>\360\377\2759A\210=\2104\225\273\377\nH=\211<\362<\224\276\205=\210\203\257=@\236\371\275\354u\224\273\220\211\215=)\264Q\273/L\257\275a\366A\275Xz\026>\375\372\003>\177\361-\276\263i\032>#Y\206=}\026\224=\275r\365\275Z\337\317\274H\354\033\276\r\204=\275\213\211S\274MV\323\274vE\357\275\'7\\=\364>\353\275}\3259\276\203\267\003>\264^Q<\263x\020=+v\007>+LN=\223\357\242=\023\226\213\275B\364\216=\271\224\322\274\253H\021\276\271\202\036\274Zn\032>F\237\013\276%\351\250=\303H\301\275\203~\325\275\371\037\003>\350W\013=\371\257\306=\201\240\031>b6+\276\300]\n>\036\337\305\275\267\313\021\275\225\004\030\276\004\025\312=\253\035\365=%\016 =\261\341\004\276\035\226\311\275Y\0265;\215!\200=\010\3521\276p\037\227\275\036q\235<\311E\222=Mh]\275\334\311Q<\341n\372<\236H\207=\016\334/>\377\\\266=9\367,\275\007V\240=\200c\016\276k\036+<\236t\215=\243\277\232\275\023\240\216=\003\373\303\275#\331\362\275\314\334)<*]@=b\261-=xF\357\275\300\255\344<\327\267\033=\313z\014>\020[\272\275p\303\215\275\032\352\237=\\\354l=\233\323\346=\332\364u<NG\210\274\261\0021=\265}\000>v1\001>\246\357\365<\234\014\310=\244\215\260=\333\220\371=\036\'8\2741\224\355\274\272\317\323=\333E\362<\023\275-\274C\233\014\276\025\267\245\274\037\374\014\276\2406Y=kj\262=i+!>\201\357*>\264~\"\276(\372#\276\333v\273\274>=/>\2232\313=\254\300\302\275\233M(\274\340\373\342=\370\3603\275\234\005-\276R\372\022\275q\010$\276\350S\271=\277\036\r>K\030\000\274B\227\206\274\343 \212\275\363=\021>\313\3176>\346\366J=\371S\t>\034\252\014>\332r\372=\"\3736\276\027,\360<\362\022\376=Y\361m;\020u\263\275p\242\221=\344\326(>\326\362\377=\214~\220=9&\027=m\332)\276\333/\020>\023\356S=}X0=m\243\312<\230x\013\276)Q\316=x\321\213<\323F\333=Z_\026\276>\322\333<\310\336e=\351\355l=\336\335\263\2757\000\000>\026\336\242\275\236\220\020\276\277?\t=\010 \034\275\001\033\262=\3468\225\2759\334`\274K\331\354\275G\362\037\276\316\364\321\274/\343\234\275@P\033>Y\343\017<\211\375*>\260\2172\2761\3073\276\026\216\225=D\322\255\274Y]5\2743X\002<\022\273*>\355\034\346;\346\377\351=o\211\003\2766!\277\275I\217/\275B\347\000>\325B\031\276kt\013\276\205(\330=\210\033/>\337\200\317=;a?<\277c!\276v\322\314\273\310\304`<\255\203\021>K\376\014>w\233%=\\m\025\276\341%\357\275\316\207(\275\005\215\032\276%A7>\336=\273=\217\331\261\274\025\203\025>l\316><\333\0139>{S\025>x\230\216\275\227\211\266=\340$\010\276\304\340\356=T\236\233\274\214\036\277\275\031#0>\355\2353>\023]\262\275\024\017\250\273!\201\223=N15\276;c\373\275\237\036\356=\276\273t\275\202\3502=\370\032\016=\340~\217=}K\210=\230d\032>\252\225\257=h\207\031\276I\210\204=w\232\250<1\0351>\245\211\246<W\361,>\316\255\001\276\351\005/\276I\323-\276/ \033>y\216h\275_6(= ~ \27672,\276\005\264\213=vC)><\000G\275W\003\\=\021\t\247=\233E%>\242&\202\275\330\021\270\273X{3\276\200\035\357\275#\274<=\304\366\246\275X\"\005\275\343\370\343\273\215\350\347\275e\231\215\275\252\226*>\022\216\204<\361\303O\274\375\250\327=\364\370!>9\263Z\275\350\340\254=J\344\022\276L_\220\274^\266\030\276\213\354,>\307\350\017>\031N >!Yh\273g\271\212=1A\311=\304\205\036= \375b\275\3534\034\276\355\0137>\321\265,\276\351\273\246<\217\325*\276>\t\031>,S\004>cN\323\274O\363\372<\342\335\006\276\223\241&<}\362 >3\205\245=\366o\212=\351\367R\275\r+\207=.\2263\276\023\246\034\276\014@\035\275nd#\2762\340\211\275\344\202\306\275\352\033\212<\307C\001\276\204\344\014>\"N6\276D\'\017\275\315@t\274K\353\303\275\260\317i\274\354\200%>\277\253\017\276\366b\020>38\005>\363y\'>YN=\274Ht\247=w6D\275fT\014>\250\3032>l\311]\275]\204-\276\006G\023>\362\327\365=\327\2367\276\350\244*\276\032\360\024=\"y\r\275V\213\270=\204\201->\235\364\240=\013z8>\021\374\364\274\033\231\3218 H(>\3163\212\2755\t&>\231\316\361:\362\323\352\275\032\326{\275L\313\024\276\265\373,\276A\345\313<\334t\357<\367\\\017\275\363h\032\276\316\251V\275|\200\006>\263?\317\275]j\237=h(\033\276ep\211=\'\261\305=\035$\006>\n\321a\275\016\032\000\276$A\257\275\022\0035>\31169\276(\343\201\274nK\003\276\n\262\330\275\020\331+\276\000\364\335\275{\251\270=\204\037\263\275\2740\245\275\246\353\030=T\266\211=\265\203\037\276\027\372&>\023\320\354\275\351\003)>\000\014\237=a\333\261<\205\3314\276\027S\353=&\363\t\275\"\3776>\000\346#>+\331\035>,\345\021>\000;F\275U\341\035\276\370\246\347=\354G\377\275n&\210\275\246\316(\275\021\260\352\274\354\262\335=\262I+=\033u\214\275\214i\022\276\212#\203=\354L\t\276\373\017\016>\004\3227>\"\321\301\273\344\375p\275\"\275\227\275\301\010\035>[S\032\276+\021!>,\237\373=\345\303\342=$\262E=\266R_\2756\302\257\275OT\330<`\255\316=}o\213\275r\225\034\276\373\366\000>\365T\033<J\214l\275\002\361\014>Z\016W\273\252\016\273\275\320\343\244\274\2421K\275R|\347\275\253\317+=\3465\217\275\003\203\033>\233}\005\276\205\2610\274\331\267\200\275\253\204\010>>\300\'>\336\275#\275\323\355\361\275\225\222?\275\351\357n\275\221b\014>I\"$\276\341D\275\272\232\306\016\276&\315\373=\341M5\275\034(\230=\344m\217\274s\312\032>\337\227\301\275\027\002\254<\0252h;\003P\271\275\236\301D<\241\264z=\277\371\350\275\362\010\030>csk=o\275*>\225K:<\243M*=\210}\203\275\001\000J\275+\377y\274\201\013\263=h\370~\275\265\023\361=\317\347\217=c^K\273(\240\252=\271 \341=\264\010->\211\207\027>\222\225\033\276q\024\231\274\"\305\n\276\024U\220=\307\375!>|T&=\020IK\275yr\350=i\ne;\001\023\357\272\373S\r\276]GO<h1b\275\375\2068=[\327\262<\340\033\332\2724\357\006>n\022q=\352\340\026<k\363\263\274+=\t\276\255d/=\230\267\235=\036V^\275\024\021\365=\3060\006>7t\372\275\266\261)>\335/W=\243\357\356\275(L\235\275/\277,\276+\311\340\275\237\206\374=dl\225<&\211]=\234\026\022\276U\330\220<\277g\014>\353\265\203\275j\322%\275\271\034\345=\344\340\026\276.d\276=\n^7>\323\204\216<<B\342\274J\323\210\275\257\246\340=\222\333\202\275\253%\213<\307-L=\344\257\">\002\252\016>\177\245\340=\014\370\215=\251W0>\003~-\276_\036\t\276\246\367\203\275;\200\016\275Xy2\276\273\365\343=\333H\265\274\335\327!>\216\3636\273\330y*\275l\237B\275\214}\304=\2770:\276R\277\004\275I\344L<\250=\242=x\2345>\320\036\215<j;\014=\035I\351=\376o\374\275?\253\247\275\021\027\350=\336\312_=\365mi\275\310\227\272\275\255\322\013\276\277B\352\275\r\336\002\276\342e\204\275o\034\331<LH\202\275\307\221\013\276\372\241%>\273Qw=X\327\020>Z\350\270\275\341\323\324=\257!@=[\340(>\273\301\316\275\273\214\326\275\241zI<\363\372\350=E\217\307\275.Z\226\275\327}/>\355\272\346\275\227\256+>ph\000\276\206a\004>5\002\021\276Y8\256\275\331\275\314=<\312\245\274\016\216\357\275\207\017\257\275W\274\007\276\237Ws\274v\332\001\276\230\334\034\2763e$>\014,\233\275\250@_\275\253\3335>\341\377\264\275\\\341\210\275\221\366\006\275\353\272\013>\335\t)\276\005\227\343\274\021t.\275@8\002>\221\245\005\275\330Y\304\274\251\374S\275{\275\267<\243\377@<JA\322\275\272\355\027\276\305\300\007\276<]\265=\310f\267\275\317\275%\276b\363\233\273\014K+\276\262\336\226\275\177R/\276}\243+\275\374\231\206=3\326!>\326G \276O/\227<t\030\363\273\2503,>\347\261S\275\245\310X<^\372\325\275\267\250\016\276\351\037\324\274l\225x\275\205q\357\275\361\333\262\275Is\360=`\276h=\230\272\035>\237+\035\276\216\3643\274\370V*\2765\211c<\220x\262\274\226D\033\2768,5\27657\245\275=\2531\276D\307}\275\373y\360=\213\253\235\275\277\265\371\275\265\006\211;\017:\315\275\242a\355=\3735[\275\247\246\013>\332{\013=\210^\031>)\240p=\217W\266\275\326\310\014=0px\2755\020\344\275\030?\035\276\270\352\307\275\376\026\036=~\365\021\2768z\232=\373L\234\275J\022\366<M\207,=\203\376\025>\273\206\304=\024\301\343\275{\234\260\275\026Z\225\275x\256\210\274\260\343\037>\374\265\031>`\325)>d\203\330\275Wb\367=l\2603>\3323\354\274?P\036=\344~\365<\001\250\326\275\273\'\274=\314\'h=\237\177u\275\004\212\033\275_6\016>\330\305\036\275(\177\232=\"F\333\273!m\274;\307\355\263=J2T\275\264z\010\2762\020\036\276?\0306>\233\356%>\'\035\032\276?S\010\276\216J\341=Y\353\264\275\370\204\237\275\224\334\001=\337yS\275`2\"\2762\265)\276W\365\204\2754\354 >E\033\336\275\342\265D\273\203\023/\276\253\215\">k\333\242=\374~\033\275\253|\322\2743\212\322\275\020\025\243\275z\304!>\367\265\021>I\243!\276\000\016\375=)k\204\275\266\3264\275\204\251I\275\241\271\036\276E\347\222=\230\212\007>\036\000\236\275,\010\362<lb\364\275X\202\365\275\024\t\354=\361,y\275\337P(\276A\212\270=\234\002\226<z\021r\275\365\327`=\276R\025>\327L\225=\362D\004=OY\001>\352\032\240\275\240n\"\275#sl=\3120X<\020\003\224=I\335\301=\272\372\377\275\222\230\253<W\345\333\275\274\367\273\275\336\210\244=\264\214\304\275\226,\025\274\020C<<\23733>\344\020\234\2752\206\371\275\'\361#>\232f\\\275\036\332\202\275/\217\263=\326%\335=rc\"\276\263\263X\275\nu\207=\005\2659>\235_4\276\201\001\241<\230v\340=\207A\204\275\212\226\347\275\243\203\020\275\2535\335\275|A\307\275/\331\306<F\260\2128I\225\025>0[\307=\000S,\276\251\"\371<\3266Y\275*P\032>\332l\017>\246\204\256=\t\212Y\274\352\024:\276%\310\024>\035\316e\273Q\344\n>\'\376P\270V\237$>:\"\033\276*\305\257=9m4=?\317\'=$H3=\020\233\005\276Y\270\332=S\244\350=)\352\314<\326\220\311=\235\013\277=\316\347f\275\324\204\037\276\261k\263\275x\270\307\274\2409\364<m\212\022= e\020\276{}\363=N\022\276=U\\+\276\205\354\245=2V\t\2754\225\003=\257V\002\275zrn\275\022\2638>T\211\021>\212^\246=\261dc=\002kK=\251\237\002\276\311@e=\016y\027>/\033\'=\274\265\220=\275^\237=R\030\251={\270\270<\204k\024\273*2\343=\023\323\223=\336\364\377\275c\033e=A\031%\2765&\250<D\273\214\275\264\204\016\276\n|\244=2\312\034\276a\237\253=\261\037\202=C\372\205=\035\010\035=8\235\261=:X\032\2763\344\273<K\313\373=\276\236l\275|\024f\275\366\351\204=\030\0344>P\031\026>7\034\033\275\022\312]\275\202\226!>\323\343!\276\222\007\240\275\324\374\002>\013x\002>\255T\013<=\2111>V$\031>VP)>\261\305\357=\007\263\035>\222\314\220<kF,\276P\237\002>\254\237)\276p\023\245;\274\2110\276\205\220\220;\376\266\346\275S\254W\275@\006(\275\267\'\224\275D,\376\275\026\3213\275\035s)=\016\352a\275*\315`=G\037\340\274Y\261\024>gni=\202E\025>@\302\037\276:\251\017\273\217\316\037>\220\333\242\275\02080=\024i\361\274\237\2433=o\3739\276\003\331\352=\303=\216\274\024\026\r\274\210)u=5\376\273;\271F\253\275\035\310\017\276\302\353\375\274\312\265\017>%\336\310\275\275\004\211\2759T#>\301\005\r\276nL\226\275\225\353u\274{\265\007>c.\r\276\364\330\025=\222\247\246=DY\203\275\273\001\346\275\244O;=\251P\023\275\317\371\360\275\241\3202>ApK<f\034\026>uO^<\307\013&>\246\3379>\324\316\312\274\'C\204\275]\025?=:\241f\275\007o\261=\356\251\035\276\341\334\r\275l\310r=\352\325\'>\235C\362=\263\257\232<\251=\331\275\227E\301=?. \276\254\022#\276\257/\227=\342f\035\276\243G&=\243!\362\275}\256\264=\375`\276\275\215u\231=vc\036>D\212\016>\034q\242\274\215l\321=\264\253\222\2753,\010>\016\367=\274xO\266<\235\350\n\274\367\214\220=j\345\204\275\331\226\341\275\307\0079\275\210\252\010\276v-\260=\313m\022\275pi5\275\225`\014\276w\236\327=\024\354\215\2740\007\347;vi\">\371\304\306=\216R6\276\213\373\240\275\370\323\276\275\233\313k:\020?\202<\305\325m=\224\037\203=C\336%=7\024\002\275\013\302O\2756=/\276=\367\"\276\332^\301\275\222\223V\274 \335+>\207F\206=\202k\002\275\372 \023\275!5\343\275I\254\014>/.\231=\353\303\026\276\201\327\226<\327\002Q\275\021F\335=O\204\\<v\264\320=\264P\354=\344\036\275=n\271==\262Q\241\275\006R\347\275Z\340\206=\304A\206=\034+\221=\331c\273\275H\021\251=b\356y<\244\264\004\275\023\005\021\276#\3315\276Py\236=\250i\253\275\341\037\031\275\305Y3>\324\304{= \2041>\324B\022\276\270F\223=\332\357w=Kd\023>=\007\366;f\214\"\276\2162m=w\326\360=\216l >z\3150>\212\337\204\275tie\273\023\2218>\3250Y=\230\310\020>\025P\002>\033\000\033\276\302!\000\275\364\373\367\275!\007\375=\343\362\025>\365\t\310=\"v\016>\221\177\375\274.\305\014\276 \n\361\274&\017~\275\237/\000>\373\016\017>\352`\'=d!\335\272\034+\217<}u\337=n\200\r>\357\353:=\360\0007>\177M\335\274\273\267y:<\336\036>\354X)>\323\224\221\275\251\302\016\275\313\312\263<\320B\t\276\250\277\277=\245\313\271=)2W=\347\306\017\276\346;\212=`\233\374\275\217\014\225=\244\226\023>\314\216\024>!\322\332=\325\033&\276\024\267\311=[\304\277\275\031E\024=M.\206\275d\027\265\275(\221C=\244/\024>\034p><\314\026\213\275\252\010L<\224K\314;\350\220\366=\235\275\344\270e\034\233:\204]@=T6\266<xS\033>\343,0>\320^w=\3763\031>e\210\014>835\275<_\331\275\370\2713\276\257lp\275\220n\034>)\"(\276\030\003\370=\265p\272\275\201z\267=U\030#\276\316;<<`\334!\276\3412\337=\327\352\305=n6\351\273o\300\207\274\213\034\221=\341\021?<\221\022/\276\216\242\027>\014b >q\241\243=\353k\322\275\363\323\022>\177\\\037\276\271Y/\276\200\3102\2768\r\005<o#)>5\361\310=ne7>:]:>UHx\272\217\243\005\276 \243\302\275\014o\373\274\245\352\006>\373\032&>o\032\200\275\222\016\023>;}\037>)c\303=\343\212\366\275\246\035\016\275\356\244\206=\341l\370\275r\254\300\275\177q\000=$\364\202<L\341\354\275\304\2432>+\330\270<H39\276\200\366$=\251\300\002>\270\332\315\274\317\2003\276D\270\315=\240\320\312\275\204\264d\275]\273\303\275iN\360\275AV\213\275\343{(>\'8i=\276b%\276\200\232\350\274:b\275\273&\240\025\276k\027\265\275\327\014\034=Q\024\342=z\342I\275>\225#\276\331\204\232=P\334\245\275_\217\325=<]\242\2753\230\016>\r\301\343\275\262\234\226=\251\243\276=;\026\342=\366\001#>]s4=\320.9>\275\245\214\274\307\334_=\000\037-=\235Z\240\275\257\304\033<5P\234\275|\264\'\276\223\300\024\276\225\346\003>\261d\371\27591%\276R\346E\275\264\224\306\275|\240\020>_v\"\276\214\210\323=6\010\030=>\334\246<\205\266g=}\364\240=\036\342\020\275\376;\020\276\364}\300\2750G\336:~{\375\275)^\213\274\342\036\004\275\333\361\304\275\262\351\271\275\322J8\275X\017\'\276C\234$\276\346\254\260\275A\241\323\275\363\2762>\340\274\273\2757\327\037<\253\177\271\275/@\010\276Z\306\321\275\227\207!>S\313u\274\331\3071\276hM\204\275D\'\200=\346\314c\275cY\010\276\027\205\004>\344\251D\274Uq\022\276>%\301=\331\236\366\275I\277\177\275\245\363\t\276-\315\256=\230\247\002>\252\177#\275\217\202\036\276\332&\265<\221\032q\275(\315\225=F\2735\276\300\347\371\275\230\036t=\377r\315=oaB\274s\001\022>\004{\026>$\261\250<\320W\002\276\272\204F=\034\357\030>\353\274\036\276\273*\361\273LY\367=\377\3656>\034\334\330=/\177:\275\323|\254\275\20459\276\214\257\'\2764\306o=\2206\222=*\365+>+\005\002\276\334h\366\275/\014\367\275\276\263!\275E\215\312=\225\203\005>\245@\363= \320\025==2\016=M\212c\274\023\241\360=\277\226\301=\177L\020>\230\025\232\275\330\315\203=\312\006\354\275C\364\236=\366\177\002\276\314\206\3379E\310\322\275\306\\\022\276\226z#>d\037\355<u\304\240\274\327\230\267\275\"\347\244<G\242)<\36130\275\214\031+>\"^\016\275#=\270\275\340\237)\276+n\323<\204|\306\275\222\237`=\327\312#>\326p\216;)\177\304\275\206s\031\276CM9\276\n\267\217=\301*\361=B\002\307\274\217uh=\271\177\300=\235\3050>i](\276\270\261+\274(\327\322\274:\357\317=\357\367\365=\323\311\332\275\223hp\275\013\343\266=x\366 >\260\236\222\275\027\363\217\275W4\314;&\237\376=\0325\006\276\274\247\204\275v\277\n>t\343F\275\331\237y=u\337\344\275)\217*\276\356{\003\275\214\360\257=\020\247\007>\0202>\274\224\r\301=\2207$=\244t$<Z\360\325\275\366\364\352\275\017\222\n<)\235\002\276\275\2136>GY\216\275T@I=h\266\245=/\212\020\275>W\035>?\360!\274\344\353\031>qt\027>`\212\014\276\236\337\242\275\254\367\332=\304\\\010\275\346oI<\201\005\002>k1\237\2759\306\201\275\345\200\217=EA\010>~\200\"\276\300\336J\275m-!\275\036\375\352=h\346\t>ep\230\275\317l\306=\006\361\265=\223\363\336\275\3632\245\275\310\005\246=\336`#=\352\272\224\274\320\253$\276\304z\202=\305\254&\274\177\305\220\275q{\241\275*\230)>`k\331=\000n\023\275H\375\225<K\266\201=\332\241\330=6$\207\275H\317\264<\210\267\374\273\203\244\232\274\313\311\247\275\340o*\276@F\337=\003\344b=\024\267W\275O\217G\2752\213\307<rh\361<\014uN\275\367\243\271=Z*\266\275\325\330/\276mA\372\275$\014\260=\356\\\240\273\\a0\276;iy=L\252\036>a\344\264=\377+\n\275\335\010\234=-\221\016\276\2143\004\276\352\327\224=_\305\326=\022u\310<\263j\345<\323?\n>\252 \\=\026E\237=\302\311\277\275\326\276\256=1\315}=\335\225\221=\213\227\334=\303\346\211=\365\377Q\275\275\010\241=\020\261\202=\001\224\372\274\333\254(\275Q\034\276\275\322\235\021\274\276\\\025\276,8z=\020\375^\275\300x\021\276\347\020\r<H\2108\276\343\334\201\275H^l\275*@\334=\2247h=\027\251\025\276\251\255\234\275\335w\311\275\022X\025>jS\023> \355\"=\211\226\030=\377\277\007>h\253)\276\213\227\233\275\307k\327\2746lH<\005\020#>\237\241\255<[\334\247\275\034>\016\2753\331-\276F\244\260=7\365\252<ij\020>*\370\351\275\3125\350\274C/\212\275\037Q3>\214\232\013\276\251\026\244==J%\276\311G%>S\035X\275\220(\354\275\232\315\344\274\014\251\026\276\022\375\351=\024d\234\274A\210\346=YO\003\276o\332\000\276\276\233\333\275Y\320J\274\027\235)>\312\206\375\2752{\241\275\226\206\277<\304\2541\276\361\004\325=\000\347\210=\204\325\217;.\266\243\275=\332\034\276\254\245%>\223\027\245<\337\226\215\275\177\021,\276\037\221\243\275\235\252\363:\334\0318\276\234\226y\273\0212\024\276O\256\316=\260\362\273=\234\"\336\275\027W\031\275\330\r\370\274d]\"\276\207\214\375=\212\372n=yD\001>Vx\313=9\344\376\275:]9\276\224\r\'\276\035\272\017>\025\353#>p\210\322\275y\262\270\275Kv\374\274\203\227\250=\001m\035>\031$U=_\301\014\276\203cn=U\252\023>w\023/>\233\243\220\275C\265\214<\320s\037>\374\033==k\261\265\275+\000\"\276\233\3352\276\222\013(\276uL\261\275\264^\203=S\006\234=\234\340\014\275\"u]\275\233\016\200\275\201H\'\276\345\302\001>x\355\377\275\270^\260=?o2=\300\022\024>7\223\211\274mQY\274@\321\220=\006\220\263\274&\226\030>mn0\276_\t3\276\033\270\327\274^\254\027\276\202v\304=\'\304d=\312Y&>\336X#\276l\203\215\273\261/\004\276\250>\">\210d\361\273\245\374\373\274kZ\210=}\342\006\276\014\253\270=\006U\021\276\357\225\010>\324\247\010\276\376$\035\2764\336\275<\rs\345\275\2660\007>\"^\374\275\261\236{=\025\"\304\273\0377\027\276\207K)>x\177/\276\221\365\037>\364\322\305=\223\276\010>y\330\021\275\251\237\026=\227\367\332=$X\006\2764\3053\276$\324\210=\t]\037\276\030\310\234\275\033i\355=y\235\002>Oh\375\274\363\334\354\275\215\215\332=\245N\024=\352\003\250\275\253\0013>-\'\333=UDD\274\013K\373\275Om\372\274dA\034\276@\347\224=\355\270\311\275\030\033\302=\212|\365\275\226^\274\274%\246\363\2757\232f<\370[\004\276 <\370=0\253\340\275\021,\343\275\223X\330<\212\377\312\275V\2730\276-\351\223=\254\023)>\347\006\262\274\266\273\247=\354$\204\275h\2003\275$\353\364\275\336[\204\275\224U1\276\350T\002\276\301J\t>4C\'\276\345\220y\275:\001\n\276\243[\220\274\341x\202\275\347\002+\276sf\020>-\363\275=jz\004>\350I\374<t\002\020\274\225\355\213=w\361\326<\2542Q=\034|N\275D/\216\275F\201->V\337H\275J\364\304=\362O\177=Q\224 \276\335\034S=\272g$\276\324z\007>;*\232\275;\024\363\274\332`\002>\306\303>\274c\205\034<\307x\031=\317\303(>Rl\245\275\316/9>5\013N<\300\252\304\275\306\2479>\024\315\207<8?\020=Cu8\274|\376\204=\202GB=\210l\273=z.\211\274?~\205\275\340\000*\276\266\345\034>\222\267\375<\006\335%\276\361!\300=\257kp<\264\317\032>\311\037\022\276B\232\354=\352(\252=\266L\316=\022\376\257\275u\233f=\374\030#=\347_\375=`g\210\275\230\322\201<Q\006\232=U;\377=0Q>\275\3278~\275\334\2235>e5\203\273\223\227e\273z#\316:gHn=>\016#>\317\372\345=\255\362\201\275\207\275\010\276u\303Q=\267}\026\275\367\271\031\276\251\256&>\203\215\013\276y2\005><\331\377\275\237I\306\275\370\034>\275F\0336>N\030\016\276\271\244\276\275\234\2213>\007\205\023>\221H\361\275\277<\366=\322y(\276_\010\275=\236\021\'\2763\210#\276\266\257\000\276\365B\234=\035\343)\275\205l\214\275\325jY<\013;;<\315\371\022>\224\224\021\276\2124\020\276\304\273I=\013\240\323=\234Z\t>\274z\025>}Y*\275\261\027\024=\205k\326\275\006\036\264=\020\267\215\275\301\364\004>\254\023\357\275\205\360\371< \2362\275\361m\221=\373\375N\275M(\316<uV1>0~\322=LY\003<Q#\257<x\207/\276Y\225\226\275\345\3067=\025L\021\276\366%\214\273\352\3050\276\226|\013\276\021\257\307=3\010\r>\246N\375=\277\240\030><I\n\275/\001\220\275H0\024>\217^\375\273p\232-\276b\327\356\275\023\344\r\275\331U2>\036s\233=Wo\300<\232q\336<1\031\023>\314%\021=\026\317\277\275\226\333\306\275\023J\322=yN\331\273\226\316\307\275u(\001>/\213\366\275\005\356\370\273\312\210/\276\313\263\301=F\026\030\276@\205\341\275\244)\026=S\2207\274z\302\027\276\357\373\007=\340\211J\275\301w\r\276\033k8\276\n\262`<)\334\302\275\327]\"=\334\257\t\276\031\231\351;T\200H\275\217\237\276=\014\316$=\226\310\032\276\"n3>X\031\"\275\214f9\276\036\213\250\275\242q\267=\377\322\262=h\326\362<\010\213\010\276q\237\">\302\204\242\275\272t\377<XW\017<\210\212\230=\022\\\263\275\371\273\320\275\322.\214\274E\265\027>\001\264\364=\374\243x=\242\237\010\274w\250\026\276k\211\344\275 \266\021\276\247\3008\275t\251\366\275\252H\027=\246\324\026\276\265\316m\275\222\"\033\274Z\312\215=-v\227\275F\370\307\275\316\351\315=?\3258>L\030\254<\345\3313\276\033\322\036\276\301hh<\207\365\004=\337\250\313\274\rV\277;\245\007l=s\343+\276\3671o\275\361j\357\275\346\023\025\276\335\316\214\275\371\253\206;\030\273\244<z!\331=\336M\214\275\356\317\237=Q\243\217\275tW7\276\370\370%\276M\023~\275\344R\026>\270~\007>\333A5\276\236\277\021\276\323\2334\276&\242\021>\243\371\202\275\013\014\306\275\275\3578\276\342\235\367=\353\262\332\275\340|\'\276\204\206\n>\216M\202\274\207\000W=\362XW=\301\332\266=r\301\002>\004\020\204\275dAt=\327\243\252<\353\365\241\273\035\007K\275_\211\325\275O\254\323\275\320\262\351\273\361\313\203\275\336\017*\276P\260\363\275\235\024\350=k\357\021\276S\324\265=9\355\324={\362\262=[2\003\274\255\267\037=X\177\020>\362j\000\276N\000?=\\\307\351=\326/\006>\242.\035\276\332\020\336\275\254\024\022>K\323%=\274\325\341=I\271\030\276_\376\036>\245q7\276\307-\256\275p\245\240=,\272\233\275\034v\302\275}()>\003\203\215=\253\313\027\276\310\341\013>4\336\360=iW\235\275\346d8\276s\216\331=dF\375\274\036\243\005\276\323\027\235\275\371M9\276\216\267\276\275\374/$\276#\245\020>$\342\010\276\234\326\222\275#\272\265\273\246\2646\276\016Hw<\342\037\027>l\364f\275\227\305\027\276\262\230)\276W1\326<{U\346\275K\341\370\274\324,\212=+\274\264\2752\267\340\274r\351\027\276\275\203\310=\206\334\023\276B>\017\275\034\325\r=\276\3542;\217\215%>\275s\347=\372\225\276=\340G\304\275<C.>\374F!>n\317\364=\233\3144\276\300%4<\335\036\246\274\035nt=\273\036\037=\262M?=l\277)=\005\021\355\274\2747\376;\376+o\275\362\364\314=e\207\236=cE/\276\373\235,>\2427\274\274Mp\370=]\002\236\275\243\331\022>\031%)>\033\2235\276\024\256,=C\220\362\275\202\365\001;\t\022\335\275\200\033\360<\037\373\021=k\2029>Pz\310=\231\361\272<\363/7>\311\177\232\275\367Z}=\224\304\221<<\251\253=x\002Y=\342\365\220=\200\305W\275\243\032\021>{;&\275\337\235\014>d\3030\276\263I\037>EZ5>v\300t\275<o\334<\352\371\367=\377\320\376\275\r\316\037>\003[\243\275|\273n=\301Lt\274\333;\020>\203\003*>V38\276\240\260\244\275\256\3446>\177\237\312\275l\0067>O\323\032\276#\010\312\275kV\033>\264k4\275K\341\033>\013\000\006>M\275\353\275\242\000\t\274\020\346\273\274W\365\007\276P(\n\276\312WC\275\257\321\003>\237\205\007>\263\356L=o\202\363<\363\215\255=\242D\310\275\305op\275\217\010\246=\004b\3239T\300\223=dqj=\214#M=:\003\300\275\3477\216\275\222\251\002>\022\020\004\276\tw\023>*/\306=\234\241#>p\3505>2y\037=\032B?=\250\376\370<\252\025\272\275\024\3454\276\rm\201\275\202\323\334<7x\345\275\206\272\227=\272\346\001\276\365\367\251\275\000\223\240=\363\027!<%@\026\276T\254\025>\274+\014>a\333A=>\020\364\275\377\335\256=\2245\270==+\365\275\262p4\276\246\264\005\275\"I\271=2\'\274<\234\274\024>\240\327\206=(\326T\275\276\254\210=`@\031\276gJ\010\275{|\243<\\\200]<\214\205\005\276\2538\215=*\022\334=} \310=L\037M\274\226\256\277=b<!\276\240\3129>\324\200\035\270!$\000>n\262\022\2766\020\274=b\234C;L{\303\275+_1>\220\031\312\274\270\3224\276\033e\302\275\263\211\372\275s\374\363\274\013o\317=D\225\357=\037\242\347\272\342T\000>\272\215\376=\262\367\251\275\362\331\317\273\221\026\325\274s\344\022\276b\366\311\275\320\023\021\276[\rR\274\242\240(\275\204\210)>h\004\t>\364\276\014>)\3649>\313\373h\275~\267/\275y\0271=o^+\276\304Q\267=\363+\264=\353p|<\021]\037\276\3567\312<h;\246\275\312y\327\273"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "~\000\000\000~\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.154303357005
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.154303357005
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 126
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 252
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 252
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 252
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 252
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 126
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 126
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
