node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 55
          }
        }
        tensor_content: "y\000\003>\234\010\225=\302\2428=8%6\276\372\273\203\275\233\206e<\361\265\226<a^!>\335\0215>\272\301\022>g\032\357<a\202U=\\y\232=\001\013\330\275\276k\205=\025Y\037>\205\334\026\276[G\"\276\355\2006<\324K\236=\300\2507\274 .\326\274\276\262\261=\343U8\276\361\n~\275(\0029>\266\375\020\276c\214\343=\375\231\003>\035/0\274\327J\274\275Kh\021\276@\367\211\274\234\213\211=tl\013>\371s\353=\3027\301<\005\374L=9@\267\273\207\367:\274\256\262v=\240\r#=\025\320\331\275\211\354\016\276\306`\232\275\213i\010\276\215\030\t>\032\270\375\275\345\177\021\276\262\343|;3\2663>\365\260\337=\344ei\275\340\304)\275+@\025>\352\223\245=d\224\022\276\315>\310\275mV\321\274Z:[=\357Q\256\275\212\227.<\276\267\t\275\032]\375=,a\036>Y$\344=-\221\220\273]\214\302\275\315\365\340=5\201\223\274\353r\003\275\031J\t>\262\277]=\276\217\341\273\346\020\022=r\234\271=\232\030\305=\203M\362\275\313\227\244\275\242Z\262=\223\247]\275\3134\007\276k\005\t\274i\223:=\233[\272=\2651\232\274\341\004o\275\017\312&\274\265\3024\2738\343\350\275Z\350\206<\37311\276a\301\033\276y\3735\276r\204\307=yb\302\2742\377\255\275a\227\323=B0\336\274\001/\014\276\356\336\225=\333p\n=[\316\026>\220\275\002>}\224\234=\352Q\371\274\32688>\363\357\200=\002\352\030\2756\037\343\274$Tx\275\2071\203=\177z\316=s\323\312=8e\224={\316\005\275a\014\261\274\361|\006\275\272\360\347\275\265F\314\275K\241\316\275\r\227\301<i\222\032>\343\345<<\232K\311\275C\274;\275\324|\250\275;.\005>\367dF=\213y\370\274\277\213Q\275\253\364\032>2,\035>\276\246\257\274\272\325\371=<\376\021=\202k\200\275\213\001\203=\361\351\332\274\264M\005\276\343\366\032>\344\256\316\275\324=/>\242\007\005\2766\326/\275\323\364\t=O\003\250\275\275\235\005\276\232\353\376=\3700\217<\253\237\036\276\366\333L\275\332X\326=\340B\026>\372Y%\275\353a7>\367\311\310\274\371\300f=\t\247.\276\305\022D=\346i[\275\020\323\034=\322\005\340\275^\270)=}\223\000=\324I\345\274\377\263K=uM\316\275\010\260\323<~m\266=\350s\331=<3;=\026l\337=\025\223P\274\333\026\260\275\343\251\006\276|w5>\277~1<Si\206\275\345\351\000>7\020\000>\313\375\223=\256V+\276e*=\275\264*\361\275\374\205+>\0371O\275\n\314\377=\236\274\010=\264\257\026\275\335\217c;\267\240[\2754\007K<\377\234\331\273p\220\277\275\230%\361\275\272t\233<\021\240->\240\202\271\274\242D\366\275\374H\237\275\305\"\204\274!\005\007>\343\375\016=\034\231\024\2758\326\206\275\327\022\262\275\202}y\275p\321l=\342\226\t>p\036\311=]\246\014\276\231|\361=\377\024\'\276il#\276H\206\236=\005\352\305\274w\265\033=|Q\036\276K\343+\276\034v\204=b\024y\2725\273\205\274\373P\360=\324y\217\275B\366\262\275\230w*>(\267\244\275d\351\005=\177\014\331\274g\211\343=\254\256$\276\r\3315\276\304t\215=\351\006\320\275\245\342\274\275\020\271O\274\210\204M\275\251\257\032>1J\332\275\003_\227=<\332\017\275p\025\023>\344J\037>\246\310\236\275\346\223\271=\230}\337\275\353z-=1\344W\275da\363\275\261\250\312\275[\3155>o\231o=\265$\030>\252\321\330;Z\361\333\275\272\300\000>\013\336\377=\340|$<\211:\237\273\243\367)>\030\352\332\273\270\247\245\274\307k\233=\353\245$>7\363\003=/\250Z\274\324o4\276F\372\207=\213y\207=5\307\036>{X\235\275\312\337\312<\301V\300<k\3024=\314K\277=g\354\020\276\230\250\307\275\014\"\n>\330\374!\276\217\315\005\276\0203\002>\t\236\030>\275\373\302<t\016\240\274\210o\316=&s\010>\036\014\367<\273\0234>\333\232+>d\246\364\275\266\255\343;\362\001\036\276_f\337\274\330\202\024>\234<0=\027\265\037\275a\020\177<K+\254\275\353`0>!\000\026\275\232\021\026\276X0/>p\355\263=\367\370\007>x6\311=\016!\257\274\254\225,\275\201W4>\224\214\036:Q\017\231\275POk=L\367\036>\354\250\'>\317\370\037\276\021\006\013\276k<9\275B\257\001\2755\343\242\275R\234\020\275&\357I\274[\213\020=\347\257\367\2758\227\266=^\257\020>\205\235\346\275.f\220=\236\020\311\275=\327\243=\305j3\276\327?\266=\342\303\366\275\322\326X=IW\222=\216l\220=\220\256`\275!WG\274\210\342\334\275\224\336L\275\332\2355>\2417\031\274(\201r\275\230\265\325\274<\362\255\275@/3<f\220\334<\273\265\306\275\264\221K=\326\302\224\275\226\037\372\274\323\364\244\274C\023\355=U\201\236\275\354\313\325\27543,=~\273\"=\\R9\275c\212\">\345\264\307\275@\366\013>\213\233\r>\210\246\006\274(\"\226\274\032\343\365<#\022\361=\240\344o;E\235\035=NlA\275i5\006>Xp6>\\8\215\275\257\014,\276\037+\n>!D\017\275\214\"\022>\332\006\256\275\302\202\024\276M\342Y\275b7E\274\034\"1\276w\354\373=\233t\271=M\367\016\275\004)\246=\242\340\324\275;^\205\274\245\250B=5\003,>\322\341\000\276!\344\212\275\277T9>\035\317(\276\264\257\337\275\227\001(\276\'t5\275\345\3151=}\373\350=\261\231\241\275\367}\221\274O\347\032<8t\362<\272\323$>[\200\316\275\024\233\317=\246E{<r\226\313;\315\242\002<Z\252(\274\276\213\331\275JL\020\276n[+>\034Lk<\331b9>\356\366%\276\n4\225\275\027W\030\276\336\'\362=]\007\367=U\001\301\275,M\232<F\347\277<\013 \244\275\037c\275\275\003\273\022>\"=?=\n\373\310=\206\266\257\275\"\003\000\276P\265t:zo|\275\t\323>\275\233p3\276r\025\266\2752\001\375=s\225\222=q\346\n\2764\371X\275v1\243\275\377J\200\275\020T\310\275j>\205\275\252\200\377\275C\263|=C\205\367\2757\201\365\274K0\276\275\217\001\200=\014\022\326\275\372)\t=\327\341\030\276\355\363\204\275+\203\265=_\022.>\"\234\323=Y\313\022;\036\033\347\275\301\003\253=\2711\210=\031\322\367\275\357\201?=a\272\036>\376W\023\275\331,\255<\235\0026\276\226\242\333=\352\334\363=\370P\322\274\277\301\325\275\325\0250\276zn\037\276U\371\220\275&\235\376<\312\001T\275\332\006\216=A;\004>\305\325\305=,\265\345<a5\235\275a_\234\275b\270\n=,\255\244=\354]U\275y\341\007\274gSG\275\230\314\037\276\315\321\365=\264\271\201\275\341\367\202\275\177\331{\275\321@<=\207n\244\273ye\337\275\327\352\254=\207\357\022\276\212\315&>Nx\020\274\t\373c=\351j\354=\006\210\220<\215\234\352\275\324\265\177=>,\005>$$\232=\232\244\027\275\024\224\224\274\275\033\000=\210\r\031\276\276k\242\274 d\371=\334B[\275\344\224\000>3\005X\275!\346\315=\206\017A\275Fz\036>{\267E\274j\027\354\275\226\366\031\276\372),\274F\177\365=\036\303\025\276|\034\274=\226XR=r\325\301=\225]\262\275\200\357%>\010\206+\276K\267/>\315\241\223=\325_\004>\244\202\203=\255\243\023\276\3340\356=\375,9>\031i\365=\226\236\244<\324Q\246=\034\035\034\276D\250.>[\363\025>{\334\316\275&\301v=\251\010\362<\272\035\003>\205\324\260\275J\271}\274\317\251\375=\237\2566\276\240\010$>\031\3118\2767m5\276\021\227\256=\3731\323\275\005z\271\275\034\3671\2741@\377\275\r\243\337<\370\236\013>:i\302\274\314\022\016\276\367%1\275I\343\n=\260\350\214\275\262\334Y\275\264%\024\276K4\216\275\001\003\251=\\Z\302\275\334@\204=*\263\355\275\260\254\006>\251\317\376=\027z\022\276/\364e\274<\2177>\312W\377=v\302\354\274j\2426\276xq\006<\376\022\346=\272\326\250=\021L\034>\263W(\276\014<R=\346\333>=J\t\350;^<\257;\352\330%=N\273\001\276\'\r\237<\353\2418\275LG#\275S/\205=B\341\313==j\232\275\202\320\360\2755UC\275\036=\027>\277\303\374=Y\303y\2756\372\262\275VA)\276\227\263\t\276\244\006\016>\220R\273=\201a\362\275\r\340\223\275\035\2601>\322\317\337=\353\360\001\275Q=\371\275=\235\035>=\251\272=\350\363\367\274\233\004^\273H\3119=\245gM=\212\2535\2762\006r=}\206\022\276n\252y\275\332!\273\275\313\236\263=\255:\365\275s\256\353=G\275\211\275\213t\330<\336\317\026>q\017$\276\301\357\312=\241\372\014>\327\206\261=@\000\017>\375\302\372=\236\035\367:7D\347<\324\271\233<\276\244\224\273v_\346\274\277C6=\272\316\234\275&5\260\275b\363\267<[\0061>\207\372\323\275\325O&>i\203%\276\255\320\032\276\340v8=\211\003\002\276r\352\264=K\326\372<\270\246\023>o\304w\273Cr\237=\0144\207<\017-\0369\357\200\005\276\367\025s\275\332\221\032>\230\020\254\274wa$\273E\020\226=G\362]\275\254\217\211\275\037\206\357=\335\250\002\276\335\257\207<\207B\035=\303@1\276\021\016#>g\323\023\276\200m\255=\010[\020\276\271 \014>\236\343\367<$-\341=\325\370\030\2769\022\001\275\237\037l\275\353\313\204<\034_x=\010\257\352\275\367v\372<\337X/\276KI\373=\020\006\204\275\230\247\217=v7?<\2063\221\275A\360\355<,\252\010=N\301\275=@15\275\010\375\002\276]\006B\274YA\027\275\254\371\221==v_\275\320\307\316\275\361\352\357<\301Ge<T\344l=\261\203\351\275\013!\023\274\014x0=\222\224\020>CV\036\272\371\304,\2753\316\277\275?\357\006\276\233/2>\272P\027\276\270\366\274\275\254\201\035\276\237S\">\343\263\213\275i\027\323\275\222\277\320=l_\"\276bN\305;k\322\325\274\370\036\271\275\370\336\016<\200G\030\275\367Jt\274lVw=\177\345\301\275\213\031&\2761\253\375=\002>\322\275\325\3000\275\324Y\006<6\030.=R\007s= <\000\276\020\271\324=\3727\023>\005\0340=\367\250\004>\325\014\266=\311P\031>\360\275\261\274\360\241\276=y\005\002\276!F\007\276\250\303\344<\256\342\376\275\201\277\001=\247:\317=\031\322\374\275\335\200g\275x\3278\275e\006\027\275$\026\001\276A\321\263=\034\201\035>\2175&>\210\\\020\276,\366\352\275\364\032\320=}7\t=\334\2638>\306\005%\276B\260\371\275d;\016\276\006g4=\276\350\274=\257\211\314\274]\267\022>K\023\013\276\'*\025\276\244>1>\356J{=3\017<<k\336\014>#\207,\276?\211\203=\304\224y\275\313\243\303\275|K1>\'\234 \276\001M\364\2752\300\315<\350\357\235\275Hz\250\274\214l\014>\335\003\217\274\213\027]\275\0053%\275\0249\034\276\201}-\276h\267V=\247$\013>%D*\276\335\303\212\273\t\233\323=\272\340\016>T%J=\317\310\344\275\224^\205=N\241\">^\317\t\276\tvM<\211\240h\275\'\223\350\275T\303\035\276f\240\032>+\237(\276\204N\200\275\322Y.\276\2044K\275UZ!>\244#2\276#\273\016\276\003\321\307=V\241\\\2752G\315=\362b\265\275w{+>\242\301\356=\"\000\033=\374\361\347\274o\206\221=\262h\240\274\231\341\034>\235\3108\276X\334\312<\370a\213\275\202\342\221\2759\301\032\276\246j\301\274\203R\314=+\222:9Al\353<\'_\371\275\3030\005\276\332~\013>i\371\313\275\311\317B\2755\315\314<\032Z\202\275\321\217\277\275\361+\342=\363QT\275\261y\017\276\023U\235\275y\350 \276<nP=r\247\261\273C\314`\273\372\273\010\2768l,>\024\366k\275K#\022\276nsY=\315I \276\237[\'\2764Q\260\275\316*\240=w\303\253<\361\314\222;\n\2715=#g\341\275A\'\267=S`\247=\261\016\271=)\360M;\270S7\274\244{\303=?\307*=Q\234n\2758\202\221=3\021\370\275N\266\317\275\224\027\343\275\210\376\371\275\323\372\003\276s\253\316=>\007\025\276~\355\243=\375K\271\275\357\\\022>x&\345\275\361\177j=\013\3438>Z\330N<k\371\262=\241\344\302\275\001Q\242=\220\270\033\276\264\303A=\036 /\276XaQ\274l})>\004\035#\276\360\0213\276\337\306!=N\305\210=\014\023*>\312]\345=\357\030\303\275\352\320I\274\266\212]=!b\227\275\356\0104\276\323*8>7T\211\275>\002\256;4\246!\276\371\024\265<4p\242=\332\016\034\276\274O\025\276\365\200\356=\330R\334\275d\304\032>\220\332_\274\277,e\274\351\365\036\276\371!#>\232\3548>.gX=\324\2546=\021PO=\221XR;+\2518>rj\201\275\004\022\364=\023\312]=tP!>\260\031\r=\035)\310\274\0104\201\275\2571\021\276Pc\026\276|\242\023>#\217\270\274\216\245\310\275\237\272\276\275\254\034\r\276^\333\364=z\271\000=\256\226\377<\206\351\321=\244.\035<\226\343\252\275\215q\321=tK+\276>\356\024\276bFC=\323\272\242\273y\357\237\275\263q\237\275\241\274L=\321H\263=\231](\275,\030\221=,\010g;\344#\371\273\333\212\024>\362\034\352=K2/\276\2244\024\275\375g\327\275\nX\020>\2257*>\316\277\314\275\212\325*\276D\213\315\275\361\303&\275\313)q<\217y\215\274\274b\227\275\352\304\024>\037\266|\275\026e8>=\220#\276-\234\254\274/\347\316\275V,\021\276\215b\211=}\375\340\275\254\202\304\275\273{\267\275\326H\327\275\241\005\023>3\235\315=F\323\242\273\215\251\030>\302\005\004=Qz\021\275\333l\356=*5\n\275\024\274\230=X\216\274<\221\333\327\275!\\\023\276\301:\002>\343\303\311\274\264\310J<S\237\310\275S\204\315=f\267*\276\225\215\034=\326\335\301<\036\'6=\006\332\t\275\t\223\356\275\271.\370=\033)/\276\245_@=|\223\245=\247\221\302<\374)$=3Q\001>h\340\371\275h\353\"\276\213\252\235\275\275X\250=,W\037>\245\022\010\276\207f{\275\237\026+>i\237_=m\305\013\276\213\311\332<\275\271Y=[\035\374\274`\334\321<d_\242=\235\216>\275\013x\344;\351Y\277=_\240\030\276\213\325<\275G\037\'\274\251\326*=\257\000\240\275\255Z\032\276\034\277\037\275\276!\376=\244c\025\275\374\205\264=&\350\351=\360<f\274\013\023\325=jm\322=%\237\333=\224\257\024>\304UQ\275\274\300\376=\337\272\230\2750\216\273;sW\313=\353o\027=\363^\312\275\332*%=\346\303\003\276K\033\233=\25019>sZ\364=q\245\252<\303(-\276\261e\217=\214x\324<\250&\331\275[\313e\273[\277b<\256q\r\276\361m\211\275\352|\224=\014c\264<\305jp=-m\027\276\223\004\370<J\220\347=\325\341\213\272\n\331\245\275\202\002\036=\021\344\222\275\346\313\212=F\341\234<\217\271\372\275\331>\014\276\251\327|:7\263\244\275\001K\276\275^4\030>\332\302.\275\300M\266;\332\212\377\275\034\232\300\275\352Y\023>\201\210\352<\372\334+>G\023\034\276\2115#\276\223\236\2659W\031r\275\3411\037;\343\343\021>,e\017\276\236\326%>\275\224\336=\373\356%>*i\367=F\2440>\361z\323\275m\027\240<\211En=\357\032\213\275\226\000\023=\244p\226=\242\037\273\274\315\247\360=\032\321\t\273\203n\270\275Ev\035\276\032\371\'\275*\243 \276\035\211r=;K\243=\272/\344\275\003\213\310=h\035T<x\3221\276\001\260%>\312.\322=\231\244\375=Uj \276\302\330;\275\362\003\367<H\361\237=<G.\276\361\204\335=\351\271\254=\002\032X\275G\201\333\275j\277\004\276\006\225\014\275\3605\332=\333\253\007\276\355\n1\276\254\226\037=\367\213-=U\245\001\276\341\202\371\275\346\240\322\275\332[8>\345\016\203\275[\320\n=\255S{=C\302\002>\013\354\r\276\217\230\324;\034r\261\274;x\324=\356\204\357\274\0145\330\275\025O\000\276\313Q\231=w\365\021>0^f;\374\243\311<\201\230\267\2758\001*>XX\247:\'\250\300=\343v\343\2753\211\214=\227\177\336\275\005>J=\037\312\033\273\202c\337=\223\361+=#2\025>\000I\023\276\330`$>\341\260\007\276\345\336\362=#p\312\275Q\240\033\276\021\255K\275\200\337\036\276j>f=?=\021;\035G!\276\303\221\254\275\020Q@<@7\375\274\000\243\000\276\025\031\360\275S\354\211=Po\315\275\013\254\264\275\237\350\016>P\313x\275\2237\310\275e\023o=\373\315\342;\026\224\033\276p\2743\276%\303%=G:+>_\0220\276\220N\001>/\207\022\276\350\264\305\275\342&\025>]\014\031=\025#7>I\030\300\274w\300\261=7(\022\276\024\021\020\2769;\245=lM\017\276\031C\200=dO0\276\316!P\275\002S\302\275\177\310\001\276\341W\303\274\352\351T=\013l\266\274c\3441>n\367\230\275\220Z\n\275\352L[\275Vq\035>\206$\254=\250i9>\303[)\276\330\3317>\326\021\263;\302jt=\205d\304=xH\">l\265;;\244L0\276\344Z&\276\202\237\242\274\275?\210<\234\006\020\275\271\013\317\275Z\005\336\275\276*\027\2767r\231=\206\300h\275\354\262\307=!\270\246\274\35260\276\202\372t\275\336\214\234\273\312\244D=\213\005W\273p\347\277=\n|\223:\377m(\276\367\2654\276\226L7\275&\203}=\204C\004\276=#\035\275II\361<\314\216\371=\220\320\326=\021\256\243\275\2005\025\274\026G#>\010\326\030>\025!\033>8_\264\2741}\202=\247S\202==\376\263\275\256\037[=\2418m\275v\316+\276\220#\207=\206\002\">\323\227,>\000\'4=\202\250(\276\371\334/>\\\324*>\261\240\202=l\031\014\275^Q\223\275\317\301\227=\223P\t=\263\3767<a\323)\276M\212\"\276u\023\327\275-\245I\275\324V\031\276D\243\025\276\355N\037\276\244N\317\275\"-G<\210&\246=\320\205:\275\367\321\270=\234%$>0w+>=\226\026<p\035\220\275\271,\023>\252l2>\237\022\026>\340\025\256=\244\333\266=\276\335p\275\302*=\275\264\203\334\275\375\202\327\275\340\337\373<\274.\267\2759\351\313\275\234\363\035>\n\205\275;\301y(>\032\271\320\274y\013\034\276B\343\020>N\2422\27674\244<\344\005\032\275\301\220\360\274\200H\222=\214\330\303=\016m\022==\317Q=\255\251+>|:\027\276\211\220\235=x\274\365=\024\323\237=\350TX\275!\0201\276\266\"\032>i\203\021\276\242T\245\275)\324\031\276\n1\243\275\177i\262=h1\363=Zut\2740\025\035>\273\"c\275\324\336\241=\321\347\247\275\013\3407>\370E\233\275\324\243\013\276]\301\240\275OV!>\355\222h<\016\2374\276\250\203~=\300\375\025\276\226u\231\275\314@\201\274:\214\316\275\207\2005\276b\261\222=C\364)\276s\344\314=\315\376\225;\342|Z;\032\262\232<\222c@\275\004\213\006\276\250\"\333=-n\237=\215j\350\275\350\204g<\035\251p\274\017^\'>e\205,>\371}\002>\')\310\275W\361\365\275\365\217\010\276}C\014>8\241m\275N\307\315\275\363{\027>\010\351\030>\227\016D=\221\0041=\234\0277>\334\366\307\2757\341\013<\340\332\335=R&9=\350\031\001>V\315i\275\3030j\275\227\2327>\211p\013\276\241\236\013\276\322\347\020\2760\221\355\275\320\330\355=P\255B\274\026\005\212\272\230\326\370\275\205\373\206<\231\311\331=\250V\010>\324\276\246=\266\214\310\274\2604\224<\216\3672;\354x\206\275q]\240<Eo\245\274\341\000/\276Fm2>,`\373\274\254\301\324\275\000g\202=\237\260\030\275\327\345\367\275\303\341\024>>\235\317=\222f*>=\212\032\275\223\233\330=\\Z\r>C\342$>\202\317\030>t\240\371=8H \275\202k\332<U\001\021=\220\010!>h\"\367\275A)\246\275\367!\312=\334\241\374\275\3626\010\275\3116\350\275X\357$>\037\032\007\276\367_\333\274\324\374G\275\tF%>\235\343\020\275\262\267\352<*<L=\362J\315\2759g\003\276\227\227\340\275V\020\237\275\246\374\'=\360\367)>Bj\017\275`\234\331\275,\000\214=\016\021\204\274\201\0049\276f\255\036\276\216%\266\274N\234&>\232\020\331\275\243W5>\314\033\250\275S\210\210\275\246Q\010\276/\252\372\275\n9\233<\305\3771=\236>\023\275\275\375\231\275\2329\214<7\267\230:\234aC=\004}8>\246}\215\274\365\320\355\275\373k\320\275\032,n=\315$\320=\257\006\373=\362\2330\275\213k\223<\003\276\263=s\313\260\275\3460\216\275\216\0061\276&l\022>}\021\270\275\027!\262\275+\355x=}\264\323\275\020\n\264\274\316\035\350\275\224\327\362<wX\026\275.(_=\303\356$\276q\005\\=\355\374\021\276\210l\017\276\351\233\252\275\26369\276\255y\376\274\"\032\226;\252uh\275b\220|=Y\331\202<;\214\307<uP\215=\250\345\237<a\251\203;\000\262\231\274\026\241\271\275\246-\341<\364\344\021\275\266#6\276\240\335\017\276\222\216\274\275\245\340\224\273(A\264\275*\227\364\275\032F\360\274+\303\341=\355\013\374=ajH=\303\026\036>g\200[=\331_\312\274\322\373\016>\0273j\275i\010\034\276\352\'*\276\363\260x=\221`\340<\344\240\021>\027\344\021\276\252K\r>\264\231\213=t0H\275\013U\021>\325[/>\275u2\276\303\315M=\354\272\207\274\'\013\037\276N\370\304<\324\014\330\274<5\325=\305\036\205\274&\276\351\274\010\354\372=\221\3326\276\010PY=\347\0131\276\342\223\240\273\t\2718>C\307\362=\332\220\037>\031*\'=\234\031 \276\224d\251\275\316_&\276\232+\205;\207\263K9h\362\213\275:\267+\275\215{/=\"s[\275\3532c=s\021 \276\372K\350=\316\334\335<kU\315\274\337\211\303\275\206Om=U\004\267\275zt\231=\303 (\275\244&!>\376\203\236=\343kr=A_(>\236\236\013<\013\357\">2\0347\276\234\'\334\275\251\257\004\276\3348\225\275h\032\201=!\233\302<H\2147\275\006)8\276\25038=-\373\001>\014\014\014>\272\373\013\276\314\370\206=k\0136;\327A\214=\210[\000\276\237]T\275\210\"\314=&5$\276\027\355\333<\364\037\017>\340\227\223=\237:&\276\347l\233\275n\327\376={\332\274=\311&V\275\3343T\273\244\334\372\275L%\213\275\251Zt\275\235J\255=\250\230\020>\262!\002>\366\311\355\274\275\314\277\275&\374\352\274\376\364\313\275\001d\257<Xp\246\273\326\000\266\275\037\321\351\275\265!\017>|\371\221\275\263\030\022\2759a\270\275d{1=k\260.\275\252\005\277\273\305U\307\275\201\303\245=\177\343\255=&^\310=\326Q\271\275\371\177\326<\220kQ=\335v\316<c\256\354=\001J@=\241\264\030=\302\304\274=T\314\262\275\034\375\317\275\237\022\037>\030dk\275F\375\254\274@\007\341;\311\334\200=\357\334\217;\337}\331=<\376\303=zl\200=)\203\210\273\307%6>\262\315\367=\215gz\275x\354\226\275>\345\375\2759\217!\276w\315\351;\214\360\013>t\\\263=\014Z\001=\213x\035\276u\226\376\275E\273\375=\177\037\364\274\024\266!<\322\344\333=\226\032\262<D\221?\274\274\317\203=\005O\366\274\026\252\375=\230l\351=x\325\233=\3508\354=\n\204\267<F\301\322\274?n\333=`o\000>\201\177\031\276]\227P\275\010\001,>\304\310H\273\350N\334\2752D\033\276\034\020\223\274\002\334\023\2768\2561>Ws2\276\375\"#>j\304\033>\334p\001\276\200\301\372\275\253\025\331=o\206\024>\304Y > _\225=x\rX\275A\230\332<\363\275\261;\207\347\311\275h2\002=\004B\363\274&f\360\275[\3151>\020\3553=1\306\030\275\263n:<|\343\\\275\027#\254\2746r_<\325Q\263<\t\261\207\275\275\231\353=\314[\005=\014\204+\276\365A\026\276\302E6\276\351\232%>\314>\217\273\353\036K\275\266Te=\307\240b=\236\203\'\276\036#\002\2755\316\336=\227\200\322<\'\311\316\274\006\302\030;\365\355\001\276A\207T\275\023\002/\276\257\347\272\274\274\324/>k\337\375=\347\031 \276\005\332\341<\272\343\357\274\250\213*\276\347|]\275l\264\300=\325\267\304=\234\'\014=\'\337\005\275)\013\024=b\335\006\276\352\2724>1U\227\274fV)\276I\301\223\275C\t->\001\016\010>\261\346\250\275\313\276:=\363\321\027>\3003\017\276)<5\276Fs\t>\221\311\014\276\232):=\350\203\277=\356\335E=\002\001\271\275 4G\275\006\211\302\275\"@\320=\256\2413\275[8\331<\302\377\t>\361\345\261\275\334*\352=_<\014>\n\274\310\275o\026=\275/\224\030\276\211\223U<\301pL\273\323\353\032=\230\017\344=\350\256\363\275\024\361n=\2567|<#\000\236\2754\031->\373\272\367<\365\266\r\276H(<\275>O\251\275I\347$={\361\274\275\014#\000\276\222\033&\276\005\252\267\274\216\031\016\276\267{\231;\266\313\310=\346\247\316=_\024c\274\352\253.\275U*\354\273\306\274\335;\254\221\031>\360 \266=\257\322\202\275\306:$\276\005\205A\275\242\357\206\273\372\001x\275p\255\003>\215\317\n=\207\324\327:7\213\215==\353\366\275\314\036!>\267\025\037>a4\355=\3606\375\275\004o\010\276\366\332\216\274\200\010\233\275C\324/>\031\354*\276?\3657>\356\353.\276\322@\315\274\037y,\274[\215,\276\t\271\032>\235\341\374=lR\014\276\332%0:\031\351\007\276\003\372\t=\264\310\323\275\201\2023\276\253\026\006\276\355}\312=\244\315\374\275C\330\257\275GV(>Oc \276 \367\265\275jT\370<k\006\232\275a94\276lH\036>\261s\036\276\202\265\364\275\301\007\250=\006\3442\276\267B\262\274\253&v\274\343\215\276\2746\006\032=\313\316\257<\001H/=\377\253T\275\357\325\304<\035\373\306=Z\013\367\275\235\033\311\272\222Z\037\276\231Q\210\275t\247\024>K\214\010;v\360\322\275|\301/>\274\346\023<\242\321\363\275fS\234\274\332\357\241\274\356\372\210\274\256\rB\275\361FA<\265d3>\323\373\021</w6=\253\362$\276\370\304$>N\205J\275\267\2575>e\332+>w\311\317\275\267\256>\275\2059j\2754J\036\276J+\306=B~\215=N\216\036\276\362\031+\276\001\321\010\276\207\360\036>\312\007\361\273\023\037\026\275\205]\336=Ir\001>O\322[\275\320[\374\275\022\003/\276E\276\250=\3663%>\t\227\325<kv\021>\270^\036>(-2\275\261\325\003>\222\364\212\274\257)\261\275\271D`=\202\252\001>\004C\024>\347\2612\276\255\375\273\275\260f.=\352\311\275=C\2017\276*\370+>X\\\371\275\235\210\030\276\314\246\022=\257+6\275`Ue\272oo\361\275\3447\243\275fQ4>B\235;\275\017\242\006>\270v\375\275\213\0000>z\t\222=\233\306\023\276\027D\'\275-\367U=\241\n\332=\226d7=\302\225[\274\244\007[\275qi%\276skH\275^\243\210=\266\272\020\275\227(~=$UD=\033+\204=\227\277\317\275(?k<\227j^\275\227\276\323\275\031/\020\276\244\316)\276\373=\"\276h\347W\271\014e\370\275\t\207.\276>\2635>\331\274\030>\207#\200\274\003n\021<k<#>\367\244r\2751\254\230<\370\367\020\275\035\310\034=<\233\313\275\267\365\357\274\301\276\361\275\312V\007>\253\245\014\276x\324\367\275\312\346\317=\2479\230\275\033s\307\275\032\351\357\275L\355\323<C\010\255\275X\314\350;J\257\334=\252\177\346=\213\353w=*\222t\274\361%3:8m\026\276\231\272\330\274\223\330\310\275\347\3277\276\025\277\337=Nt\207\275\360\370\311=/\214\001>\301%\036\276\n\270\327<}\206-\276\247\002<=Z\347 \276\244\277\303\274\001b\215=\227\216\277=F\275\344=O@>\275\236\262\373<\024\205\255=\311*\263=BG\335:\013\375\336\275\300U\273=cDJ:\367\210\231\275\276n\021>_\265\025>\367\360\336=NC\022\275\322A\025\276\3769\r\276\237\024\215\275\371\355\356=c\037)\275\242\315(\276\217B\312\275\212|\355\275\225\362\343\273}`\"\276\314\322$\276qi\331\275f\"\257\274g\304\377=1\013\020\276\251\342\t\276 \277;;\252\260\304=\307\021\001\276\202\335\035>Q9\031\275\244\0367\276BJ\222=#Q\304=\257\031\246\275\030/\031>\\L\200\274\313i\t>G\356\024>\307)\302=Z\212\003>\n\226\246;S\013u\275\215^@=\027\014\331\275yz\023\276[,w\275l\311*\276\r\013\037\276\321\270\010>\347\323\000\276\264\361\335<\272\034\245=}\333\335<\314\241U=E\215\211=\322\242w:\353_\232=u\372\243=-\005\374\275(U\346\275\312\350\315=:\343*\276\221\244E<\303\223\215\275\277\222==#\220\016>c\310\t>\236\275\370\275\323\245\266=\023Jp:he\251\275\266\313\002>\367\217\304=\372\232J=Y\305\224=\304\207\311\275\251:\016=u\265\001\276\226\311-\275a\216\030\276p\375\310=\3371\326\275:\232\022\276\350{Y\274\301R\">\370\013\006\276?\0305>:W\344=\225V\251=yE\343=$P\377\274.\311\313\275\316\005*\276\226\177\227=K\271\232=Q\\\213\275\314\003\244\275\375s,>t\231Q\275]\222\275=\351\336\253=b\321\260\275\373\254W\275P\n\341=I,\346\275\377\031\035>3\2176\276\356\206\344;\315\242F<\350\276\020>\n\352\346=\361\177\033>\023\361\201\275w\256\033\276J^\035=\024\211L\275y\311(\276[\241\330;\335\367\027\276\222\034^\275j\337\255=\251\231\n\276\252\213\376=\225\206H=\372H\355\275\236m\006\274\320\204\034=S\006\361=p\321\372\274m\024\034\276\236]`=\273l$\276\272\236\326=\320d\003\276\010\350\255=\377\2640>\013\022\230\275z\271X\275\314>\025\276;\205U\275\364\342\377=D\230\307=\350C\243\274^\033\n>\266V\331\275\'K\r>\231\230\010>\276\033\340\275\314\254\322\275\230\3300\275\252$\004\276\031=\261=NC\236=\343\255\003\276x\2708\276I\345\r\276\353\007\200=k\330\346\275\307\265\232\275\356\'(\276i\221\246=\360\370\310\275T*\215<U\003\213=\027\272\024\276\325,-\276\034\230\221\274kh\356\2744\323\r\275\304\0055\274\342.p\271\205\026\022<DY0=5\216\330\275\377\255\276\2730-\014=\330\342\220\275\202\320\361\275\374}9\275\204\006\276=\374\352\302\274m\355\355=\202\217\032\276C\022$>\366\301\264=\255\313\016\276\262\\y=\337\252\037>\361\263$=\014-\364\275\376\023\206\275*C\225=h\361n=b$\270=\332\351\004>\202\254\014\276\305\255\024\276\317\001\312<\320w\206\275\321\017\256=%;\301=_\222Q=`\271\003>\230\341\013\273mv\260=\2022\331;\234r\235\2750`]\275U\261 >\262\364\370\275%\330\334;\332\241\236\274\206zi=\0052\"\276\276Q\251=7H-\274\225\372\225\275Z\343\255<\003\201\312=\247\025\036\276\361O\t>2\324-\276\253c\315\275\017\274\316=\365}[\273\253\0130=\373]\315<ZG\206\275X\373\317\275\230w\356\275\267P\003>\212\2672>\234\347~\275\366\253\004\276\371\241,\275\375\201Q<\010e2>\364\354\013>\035D3=\001\250U=\223\3062\276\3278&\275\337\227)\275\225o\014=\370\177\345\274\213\276\250<\274:\226=\002m\242=\024Z\342\275\276\246&>\320\326\n>\310\010\367\274E\205\247\275\032\303\216=\227\231\013>>\316+\274\203u\316=\225AW\275rE\265<\251\243\261\275\357\311\227\275\224R >\376s\241=-33>{Y\323\274\003\224\005>\220z\271\275(\321\005\276x\034(=\003\265\301=\317\265|\2750\234)>\240\203\271\274g\314\227\274\035\003\336\275y\257\363\275\016\200G=u=\377<\315 v\275\256\206\n<\333m\003>\362h\203\275d\324\033\276\035h@\275\212\214\002\275\342\377,>\336\3616>)V\311=\315\263\"\276\226A\016\274^\\#<\322\253V\275m\020\'\275dg\177\275\254\313>\275A\\\335\275W\304\016>\026+\340\272F\274\212=e\2541\276\240\345\225\275\006\307\000\276\262_\002>,C\234=\177\010\243<x\3525\276\256\347\037>K\277\373\275\352.\"\276\231\331h=\323 \334\275\320o\035\276\3668\032>\n\363\032>\335c \276\230\006\177=E\346-\276\017_\"\276\022q\336\275q\002\037>i \252=\366\353\005\275\200n\260:\342*\366\275\273\010\006>\002\235\252=h@\013\276\rk\325=\226O\374=\321\016.\275\215\311$>6\375\337\275\267\031\364=s \332=\204\327@=\030\360$=\376y\024=\201\265\235\275k\260\362=\002\222\027\276\263\001\177\272\301Z\003>\277F\002\276~\023\250\275\233 \301\275M\025\372;\233\t\021\276\316\000,>\246\353\227\274\'\311\006\276e\360\201=\271%\237=\346\004\237=\3055\247=:\204\263=1(2>;v\266<DQ2<\252r\321=b\204\242=\360\342x\275\252.\200\274\213\035q=\352\210\025>l\367\327=*h\304=\231\254@\275\026\207\336=\001+\204<\2372*=\227h\t\276C\360%\276\023\005 \276@v\235\275\274\2005\276Y\367\353\275\345\371\225\273o\234\">\336\245k\275\273\226R\274Xl\023>\274B\323=q\374/>\013\357\031\275T\230\006\2752\246\'\27636\362=\264\030\231\2757O\245=zo~=^R\221\275\247\300\014\276T\220\010\276mf\007\275\310\034f\275\345\366(>\333\001+\2769\356V\274\310W#\276\266\000\371=N\245\210\2757\337M=U\\}\275 \030\237\273\362tY=\356\3166<\004_\365=j~_=\343\022\271=\305\203\006>\023\277\370\275\256\002\266\274\263\317\031\276\337U\254\2754q\013>\025\205\355\275\273\203j=a\320\344<\252B+\276\213\2027\276\213\346.>\210W\253\275\315\367\270\275\210\205(\276\264\272\320<\207a]\275\013\312\035=\207po=\216M\017>M\025\375\275\341*\234=\207l\207\274${\222\274\201\321\017\276?\356]=t\260\006\276\'\2530\275\02158\276\204Hj\275g-.\276\002\024\266=S\275u\275*\201,>\352 \360\274\373\2248\276\323f\365\275\022-\032\275\2206\223=B\252\002>9\212\227\275\236m,=R\226\266=UU->\307{\342\275\250\325\310=/W\005=\001ri\275\300\245\022\2766W\241\275k%2;An\253\275^\3446>\000{\375=N\014\312=\320\303\303\275\'\272%>\222\254\000\276y\262:\275\030K9\275A\272e=\265\302\016>\302\252a\275\027\334\370\275\3061$=\250\3663>\007\266\030>\312\2045=e\"\004>\235\255\357\275\317M\336\275\250\251\237\275\340\r\265\275\204\3651\276\023\214\357<\371\247\345=\377\021\001<~~(>\'\327\342\275\265 \235=\202\344\035>A\033\317=S\306&>\344\200\365\275\222\035\004\276\035z\224\275n\230<\275\014\302$\274O\342%\276X\227=\275\252\304\360\275\001\315\224<.?\205\275\300\346\235=\352\r\313=\026\320\207\274\256Eg=\277k\013>\033u\341\275\351m\002\276)2\t\276\266Z\267\275\305\t\004>\226!5>\277u.\274\0008\003\276\335\376\347\275\006\035>=\265\n\316<+\357\023>\"\222\013\274=\313\272\275V\307\016\276@\342\313\275,\305+\276%3\213\275\260*\204\275\366\241s\275w\326\356;<\233\301=\376?\001\276`)\246=\001p\253\275-\306\262=0\003\034>\3466\306\275d \344<\267<\212:\255\206\'\274\244\351\303\274\372\002\366=\253\236\030\276\346\n_=V\305\003>\204\301\251=db\365\275\202\021\337\275J\376\376\275c~\033\276L\312\320=\311(\227\275\222v\213=\033\000w\275\316h\236=\254\3020>\362\301V=\202@\027\276$3\'\276\340\2667\276&\204\230\275\020\035\341=\001Z\206\275\310\320\206\274\000\217\367<_=\366\275\001]\347<\033\2441>\315\t\231=\274b+>l\027\037>\325\337g\275\313=\013\276\032\303\256=\350x5>\232C\322=\264p+\276&\262t\274\253\224\306=A\266\034\275\026$$\276_\243\'=\204\nu\2741\233\355;:|\260=\362\364\225\275>\034\352\275\033\3324>\322\2718\276\3218\316=S\333\345\274\324\017\377\275<\020+>h\202E\275KL\274={\006L\275\001T\301=\362\326^\275\347\306\310=\302C*\276Bk\036\276\263\365\362=\335\327\274\275\274k0>\3139\315\274N;\206=\033\220b\275\232\347\013>\212\303\376\275\360\2566\276\202\320\321<\010)\006>\340\374\205\275\354\357\036=\213\314\355\275\024Q\320\275\272S\311=\213\242w\275\231\260\020>\222\362\224\275a_\237=\341G\305\275\370\222\250\275\234\3270\276\307\004\000>\341\320\233\275\024L\023>\350R\010\276\320d\224\274\007\014\027>\334\342\351\275\330\223s\275\325\331)\276\220\331<=\345\004\244=\2640\372\275\037\0178\276X\203K=\n\242\315<\215\032\250\275D{\322\275\362C\244=\206\321\260<f(\340=\3351\031>\257[P\2759\347~\275\261C%>\362M\303\273\021\0247>\340\000\n\274n\260->\203\372\206\2756\273\013\276\033\363\320=\233 \353=\253%\313\275V\203\270=\370\224\343\2752\262\364\274\013\242\214=B\027\214=\016\200\362=\355\236\310\274\305\321\344\275%\213\267\2758\210\037\275\002r:\275$M\007\276,y\n\276+\356\332\2736\315\344<\027R\007\276\366\267\256=\327|T\275o\244%=gB\306=m\223\002=\317X\001>hh!=\211\324\313=\322\260\034>\0244\014\276\317\370\037<~\375)>8\273\237\274\354\006\355\274\331\346\215=\372\007[\274\323\335y=X\231\234\275\305*o\275\230\207\350=\253\232\362\274{\204.>\342\262\003<\217Y\334=\324\377\367\274\330\0012\276l\327\030\276N\017\261=\260\235\302=\316u\261\272|_\010>\217r\027\276aKs\275l\224\n\276\256\212\335\274\257\377\203\275\273<\031=\372\370+\276\344i\356\274<`\005> \215\227=\353D\327<\372\342\227\275\0348\240\275\332\340#\275*G\370\275I]\372\275tL\337\275\260\274\025>\315\260\031=k\264\247=\321\353\320\2740\226\341\275\341\307\014\276\004\375\367\275\326\267\257=\200.&\276V}\372<@\223\342=\255d]=\304\017\207\275E\354\013\276\324\003\035\276p;\r\274v\313+\276R\004\251\275ta>\275\322T&>\224\020\t\273\321Q\'\276\3167\223\274^\316\307\275*@9\276\320C \275\252T\r\276m\010\024\276\273b6\275\207G.\274\331\223w<7\025\307\275YX\017>\311\013\246\275d~\271<\t,~\275Rj\306\275\305\006r=\006\027\005\276\301\341\374=\215c\204\275\257h\003\275\331\225\204<\275%}=vg\233\273N\243\217\274\'\320\215\275J)\262=Li\000\276\206\311\261\275q\360\366<&i\022>\225\032n=\205\201\362\275\266\006\305\275$\002\324\275\362\222\372=\372\2447\276w\241r\275\265\007\224\275W\340a\275((\330\275L\367\"=?\003\027=\002\255\030\276m\237\007>\273\317\251=\014\346\337\275Y\010t\275\177j\276\275\366=\014\275\321\266\002\275U+\201;\375\344\027>WY\024\276\\\335,\276WB$\276\262\014|=tk\245\275\355\362\234=9HY\275\230k\013>\316\013\022>\035&1>\371\252\320=\020@\024\276\364\336\363=\224[\002>\005\352\262\275l\2504\276j\222 >3\177\033<~9\001>M\363\024>\216}\215\275\2524\021\276\225,J\275\360\017\006\274\360\205\260=\243Gz;\254\266\001>\305\374\252\275\342\364\'\276\027I\332\275\311=,>\355\342[\275\022\373\331\275\274\260\362=R\\C\275E\275\372:\177F*\275\210\214\371=\231\0254>\227\203\026>\357#Z\2750:z\273\225\276,\276!b\007\276/\035\310=h\265P\275\373hv\275y\3603>\226\365\376=\350})\276\337?\270\275\213\225\355\275n\263\036>2\372\022\276O\264\201<~\234(>\033\371#\276c\313\324=\223\232%>~\311\027>y\266z=\200\371\013\276/\244-\276U\327\335=\341@\332\274]Y|=\022\250\227=\223K.\275h\360.>\027\250(\276w\005*\274F&\311\275\343\204\305\274n\006;=I\262\366\275]\2654\276\270\346\346=\214\025\035>\025\336/\276\267r|=\257/\033\275\007@,=\205\216\037>0{\t\276\327\0146>\251\032\240=\224\215\330;\035\"*\275\262\312\231\275a\2044\276\307\013B\275\207j\220<NF\357\275\307\305\327\275!`\226=\271(-\276-^\245<&L\367\275]z\247=F\241\227\274\364\'\023>\245\304w=\026C}\275\377\300\200=\233\360\247\275\333\326`\275H\027\020>]\271\016\276\343R\273\275<\242\025=\240\322Q=\"\344\316=\255>\210=\307\244\245=\232\371\213=\212+\001\276\352\033\364=\021\327\241=y\267\346=\257\300\222=\272\262\022>\t\253\264\2753\0064>\351\310\027\276E\3530<\2513.>\320\362n<\301qy<Pjw=\031\000\351=\361\t\206=>\036U\273\265\2313>\235\213\270<7w\244=\274V\327<B\0328\276\346\220\017\275\005\315\351\275L\353\335\275\2548\243=\305\236\007\276\006\212\002\276\350\375\021>\nqQ;\307\220+\276.\026)>\220\262\326<dF\267=\377V\027\275\366J\277\275\017,.=vW\016\274\304+=\275\022v\032\276\264&\224=\227\371\320\273\226b\024>\270\207#>\307\205%>0a,\274\002\353\356\273\347\0249\276\333\243\035\276\204\030\017\276\311\211\020\276\340w;\275\250\037\2509\301\233\373\275\330\221\251\275.\373C\273\t\267\034\275k\031\037\276\263C\340=\212h\026>/\241\013\276>\231!\274\035\024\034>k\013s=\234\223\364=\321\203\027\276\270\307\266\273KCc<*\351e\275\004]\020\276\375\321\264<\032Nr=P\246#\275\353\271~\275\237\264\326=I\221\000\276\324\327\374\275\272Q\301=\301\241\004>k\031\222;*\364\001>\304I->\246\303_\275\271\366\246=\353\014\261\274I\311\371\275C\300o\275H\374\314=\010\224\036\276\372ai\275\305\"w=\226\0326>\2217\353=\314\335\355\270\205(+\276g\303\203\275Fe9>\223\2057>7Y)>\025\023%\276\024\274\213\275S\005(\2765\005\241=\003_\333\275\257r\242\274\221\353\210\273pV%>\036\303\025\276=B\275;\200\364P=\014 \371\2742M\273=v\270\334\275Sx\202=\273\237\371=#<\277\275\205\213\006\276\224r\341=lV?=`\315/\276\337\217\232=J7.\276R\034\013\276vd\376\275v\366\234=\260[\354\275\373\315\363=\363\315\213=\023{8\276\'+\241\275\244\\A=\206^+>:\367\022\276\036\303a=\226\206\027>\267\205z\274;7\306\274\361\273\017=\214M\312<#\024\336=\204>\010\276m\227\030>f\234->\036&\026>c\242\305=,5\000\276X$\340=\2345d\274\244\242\327=\035\336S\275\340#\025>\016\005\342=}%8>\001v\370\274\0306\014\275\321\215\'\275L\223:<v\007\024\276\241&\301=Q\2000=\023_\274\275\344\366\236=\337\'!>\3311-\276\263f\013\276\371\224m\274I\230\010\275\231\332F=\022\014d\274\361\'\345\274n4\031>\232\025\376=\0012\315\2754\r&>\277\3552\275b\354\275=O\236\346\275\014\020o=\351D\375;6\324\024>EWr\275\222\323\231\2759\0068=\257\370\223\275Nq\"\275\265\025\227<D\2526>\2108\031\276\014\203\271\275\370\241\005\275@\367!\275H\320\216=\235\360\223\275\203\247\205\2759\264H=+\312\006\276\007\377\005\2761C4>#\206\271;\025I\023\276\312\313\231=\014<F\274\273E\005\274-N\360\274XG\343\275pn\007>\235I\324\275\004\202*\273%A1>\256\2774>A\213\003\276\316C\213=\336}\276<b\214\303\275\022\311\360=\200s4\276\214\264\224<\007o2>b@\217\275\2246\343=S\0146\276\324\027+>}\340\324\275\030\010\351\274\207A\355\275\223\270\031=B\226\000>T\316\341=n\201\347\274*F/\276\210\n\016\276\372cC=j81>\r\304\037\276\272Z\265\275\0161v=6\332\033>\030\007q\275\223\364\240\272\034`\200\275^\274\232\275 \345\345=\314\213X=\321\013\210\274\354\242\026>7Q\214=7\265\334\2758\3541>AY\020\274\026\2069\275\216\224\266\275\252\316y=+\214\n<\252\305\310\273\216\266\020\275\270\313\034\276\321\377\032\275\261*\372\274\331\367\213\275\2122V=x\0332>j\007\365=V\370\224=\t\255\020>\301&\317=*3\363\275<a\n\276\340\343\036>\270|\253<%\360\037>\231Ia\275:U.\276\033~\263\274>\203\354\275\263\233\004>\005\211\224\275\373k->\214S\300\2753}\351<\002\004\037\276\272q\013>\320\261\207=\n\335\r\276\274f \276hjh\275\030\032\'>\250\351%\276\277H/=\314Q\030\276\251\233*\276\334\342\023>\311\364\034>\016\026\016>Yj\346=\355\327\337\275\372m\343\275\270\251\017>\373\320\000\275b\261\374<\373\243\300\274\340I\374\275\345\371/>\325T\335=\023\"\001\276\271\376==GB\034\276\212\362v\275\335\367\372\274\321;\221\273an\375=r\265K\274r\2551\276\254\'\003>\020\246\370=\210\334s\275\302\220\204\275\n1\214=!\2542\276\236M,>\213\3362\274\257\372\243=\304\303)\276\3338\277=M\273\302:9e\003\276\312\311\222=aC\262\273\231\2578>\315\000K=_\237\204\272\343\316\021\276\237\224I=\360\345\">8\347!;\204/\216\275\321\205\003>K\360\032\276k\275)=\320^\320\275/o\252\275\020j\251\275\222Mn=\271s->\343G_\275\212%9\276&\275 >I\326\254\275\375\305\324\275\367s!=\252\224\346\274\035\213\013>;O\026\276\320\274\\\274\217f9\274\341\244\222=\264\027\035\276\234`\370\274c\251\236=\224/\223=\214[2>\360\316\357\275\2115\224<j\227\250\275\370\221\326=\333\335\027>\301\301:=\273g\004\276\242u\204;\032\354\'\276\271\360(\276U.\367=\3006\234\275W\2606\276\000D\335<Bcv=\273y\337\275\305\275\327\275C%\361\274)j\270\275^\023\326<\206\034\270=1\314\014>\2359\030\276\276\030v=8\"\025>\370F\240\275\265I\311=jA\212=oM\262\275\322v\000\276\277v\023=\201\347\217;;U\233\275\0221\026=\360\204%\275\336\022\260<\327\"\243\274\326S\362\275\n\363\212=\n\205\020\275\003#7>\300b\221\275\022u\236\275\222\267\311\275\353;\r>D\351&>\222\031\211=\035\321\343\275\260\347\352=xu\005>\230\2742\275{\'T=\315\313\230<%L#>MI\275\275da\371\275M\2214>w\255c=\023B\375=\305\333\010\276J\225\345\275\243\'\253=1\\\316=G}\371=\200)B\274\270\371\342\275\024\251\274=p\211&>\307|\030>\300H\214=~\026\315=\354W@<\253\302\033\275\235\3460<\376\216\374\275\236\311\275\2754\373n\275\030%\017\274\224Mm=z<\023\274\354\255\254\275e>\273<\350\376\013>Y\215\007>\2456\300<$\244i\275TqS\275\315u\254\275\344\2031>\370b*\276\203\341\305<\307>\005\276y\371\373=E\006,\276\022\256\032>\373\200(\276\210\314\250=ap\322\275c\347S=\036\253\020>\253\031\271=\215\001\207\275\261\272,>\372\377\210=\275#\'>\2745\025\276\237\216\022>\355\363&>\372\367T<\241->=\037\220\225=-\032\357=W6#=\006\332\307\275\236\020[\274\n>\"\276\\\231[\274`\270\004>\241wl=A\005/<D\3476>\366\311\332=R\3760=[\302\370=a\3167>7p\000\276\016\345%\276\255L|\275\211M\243<\225z5\276S\020z\275\257\002\260<\001\301\257<\022\233\335<\277\206*\276i.[\274\245.\200\274\202d\226\275)b\352\275\231B\030\276ki\026\276\276\3308\276f\2179=\n$\022>u\3575\275\243\266\346=\225G\301=Q\325\207=n[\254=\366F\343\273\016\304\204=\351u\230\275\312[\364\275R\332\\=\204Il\275\n\\\313;\223\273\316<\316\271\343<H\245j=\314\330\333\275E5\n>\214\034\355\275\027\214\347\275\204\312\r>\342\347\007\276$\201\013\275\021\365V\275>\022u<\r\373!\275\255t\014>\033\254\302=\024\361\323=L\276\014=\333\206+\276\241Q\342=c\025\302;f\207\025>\027\235\335\2754q+\274\355\022\016\276\322&\017=\222(\272\273\361\211\260\275\217\3551>Q\016:=[\r\326\275n!\364;,\362\311\275\357l\002>\010hM=\t\336\266\275\341w\323<\376-%>\037\rx=\310\335=\275\202?\204;\236\212\340=( \274=jn\374=\317!\017>\006`\200<\211\277&\276d,6\276r\361\200\275\322\006\241\274,\274%\276\330T\030<\304\262\026\276-\336+>E\2365>\0053\316\274\313\0133>\377\035\241\275\377\0234\276\266\252\245\273@I\360\275\033\340f\275b[\003>\366\370\363\275\2723\024=\031\261\255\275HJ\037>\020\205\007\276gU\277=\337 +>\010\203/\276\203v\304=}y\365\275\352\001 \276\010\2207>\001\245u\2759\376\266=\327a\216=\342~9=\335\323\'\276EiY<\213@.=]gF\275\326\345/=\210I\r\276\032\350\221<\033\303%\276\204|)>$\031\021\276\321|\236\273\245.\020\276\235\202\016>\000:%>\rn\220\274}H\036>>&\204\275I\2612>SN\211\275%t.\276\356\346*>\341W\227=u\303\204=\0055\360=\265-3>g\257\223=\371v\177\275$|q<|2\207=\345\222b\275\312\027\023\276`\177\025>P\237/\276\350\254\307\275\034\313\225\275\'\303\341\275\255\005\033\276\222a\006>\356\357\266\2757\3250=\tn\351\275\314\2272\276R\034->\232\370\221=Q[\340\275{31\276\305s\013>\317\200\232=)\177\324=\266]\263\275\0078\371=3\031\337=c\306\037\276\r\201\032>\231\237\352\275\305\031\020=\320\016\217=\031|\004\276\304\345.>\033\226s\275\371\337W\275\r\260\333\274\177\336\000=\325$\245=S\330\331=\266s\361\275\3138\274\275vtc=\244\270\013<\266\224\314=\272\266\241\275\373\366\257<\315\206\010\275\245\312\003=\346\356\204\275\334\037c\275-\"\216=\2237\035\276fj\255\275d[-<\277\200\024=\'$ =\326\004\351\275\312\315\325\275qj\000>Z!\230= \246 \275\346F\341<1\365\025>vK\217=\243\266\352\275\n\003\210\275\350`}=y\353\n>\201*\363\275\320\300\322=\t}\272\275\275\374T=\200\261\t=_\252(=\373}\030\276\021R\256\275\2451\005=\364\337\314\275\254\355*\276\372\035\275\275M\201\354\273\337)\241\275\336\267f\274\364)\337\274\333\3622>\232m\037\275\234\3303\276J\233\302\275\017\025\003\276\364$\374\273K\244J\275\221\314\215=D\3251>\237\001\252\275\335\311!\276I\262->B\331W<\247\3558\276\346\244\272=\300\005\221\275M\253\362=\342\214\033\275\253\205\272=F\313\343\275\304Y\036>\354EA=\336\256\227=n3/=b\231\037\276\362\200$>3K(\276\314Q/>\274\2622=\017?\306\275\223y/>\235\246\036>B\3658>\262R\255=\260\350==\345V\037\276\034z\322\275\'\201\"\276n\226&>\261~\017\276\253$\234\274\007\241\037\276\246K\261\275\212\222[=\267\026\256\2753\255\026\276\372\371\022\276\251m\r>\205\261\366<\274*\275=\376_\377\275\311\250\r\276P\363\335=\212&+>\207\233\220\275\247\364\335\275\017\213\370=\361\352\375\275Ac)\276\027\3067\276^B\223\275*\2136\273\267\024\035>W\255\t\275\361\273\341\275@_\335=\210\033\271\275u\014\002\274\244\366\016=\010\210\010\275o=<\275\240E\264=\225\005\366=\325\336\235\275\374\315\217=b\310\026\276\373V\030\275Oe\001\276\206\203C<\236lp\275\226\3203\275.@\004>\177\231\020;\341\337P=\354\270\300\275\273<\263=i\240\021>%\026\010>\206C\305\275cJ\237\274\362\362\222\274\\+\337=\355z\203<\370\311\016\276\3510/>z4)\276\343\244\270:\263c\367<\300\2052>n\224\037=4\n\037\276\341J)>\177\223\246\275tv\t>Z\342x=\243d\266\274F$\'\276G\240\323=\2556\217=\321\255\375=\313t\033\276\212\234><\326}\010\276\370\227\270\275\034t\222=L`\007=\034D8=\001\353\305\275A\262\005\276\217\3068>\344\304\267<mY*>\212\312\326\275\037y\017\275\265\244\377=-{\205<\226\031r=\004\253\034\276#\235\027>RA8;y\210\035>k\330\240=\035\016\374<\314\007\214;\227l\005>\333\206\250=\335?\021=w\271\271\275\274K\266\275\337\374\270\274\222\317\235=\'T\242=\244\335\013>\326\376 \276*\203x=\'\207\242\2744\230\254<\366\027\024\275\364\0259>R\312!\276e\220\000\276%xG<v+\347\275\332\026\225=\227?<<iI2>\341b\010>PCG\275y\224\344\275\340]\204\275\032-\342<\"\200\001>\247J\367=2.&\276\262\245\002\2766\000\241\275\226\\%>z+\036<r\354|=\211\344\203=i%+\276$s\027>\333\027\355<\005\354\027>>\027\017\274\256nE\275\242K\027>\250\n\016\276\002\304*>\237\314\216<\206.\n>=\216v\275\362W\222=q\276\364\275T\325\032\276\330\350\n=\373\275\315\275\032\357\245\275\211\364M\275wh\030>9\231\252=\026\3348\276*mh=\2630\377=\031\231\031\276\306\347\030>\306\373\317=\353w\321\275I\302!\274\357\270\3549\265\324\023>\235&\241<@\033\237=[\346\240=\316]\357<\216A\234<\352\273\345=\006\262\016\276\024\351#\276V-\233\274h}\004\2764\026\323<xA,\276\233\271\022\276\361v\241=\37632>f\274\275\275U\030\034\2761f\204\275\247\356)\276\255L\241\275\333h+\276-\210\037\273\303\'\010>\347\"\026\276\237\017\004=\004\3658;\347cj\273g\262\315=\321\243\244;\212\264\006>\3524\312\275b\014\334\274\336\225\370\272\270\316\301\274\020\273\t\276\242\356\350\274\001M!<Iq\201\275A\002J\275\377\333\020=e\"\350\275\035 .>\350\3405\2761d/\275\314@<=\302\310\251;\tD\234=w\316\267=\200?I\274\203\226$\276c\214\n\275\006^\023\276\212w\336\273\343W>\275\370\232\276=\275M\037>\232\275v=\235\300\353=\261\207\372=\265_\032\275\340\301\306\272pU\037>\247q\241\275\036\"\030\276<\264\331<\205\317J\274\272fD=\200\020\013\275\354\237\363=2\2131\276\037\241\274=|\235\306;^\231\346\275H`1\275gvx=\301t\002\276\026\262\207<[\230\274;\253,\311<\207q8>N\020\337=\203 \017>\315\276\213<\037\256\023>\3026\343\275#\"4>4,\037\276\222\255\010\275\340\221A<\037\226&\276d\3211>\265\355\002\276\354\215^=\354\237\325=\3052\331\275\360\226\213=E\232\362\275-eV=i\332\307\275N{.=\013\204\252\274\204\"\226\275\001\344\220\275n\205\346=\0132\310;\016\267G=s;5\2757UD<\224\2368=\004^a<\253\362\264=\227\310\245=I[4\276W~\331=m\007\203\275)-#=\022\235\201=\337\177\000\275/N\005>\201f\242\275(\000Y<\225\035,\276\232\001\007>\253j\242:\022\035\003>\267\2366\276\004\027\000> \263\217\275\214\326\247\2759\001\027\276\276Vd=\221\004\370=\"-\277=\214\311\275\2752+\251\275\262<!>\r\3457\276w\233\323;\256\232\031\276\271\327\273<\356#\227\275\264\237\033>\373R\000<\277nV\275n\220q\274|\tU==\224\376\274\260P2>U\217]\275U\227\033\276:\251\350\274\300\346\017\276\203\250\006\276w\200\'\276>A\262=\r\233\224\275\350\025\006\276\213\242\375;w\010\320\275\213\357\344\274\256\"\177=\355\264\357=\227-\227=\344\321->5_\265\274xV\332=F\177\335\275\365]\006\276\351\252u<\220\363X\274\034=5=\273\314\225\275\2672\214\275\rcZ\275N\035=\275\r\277<\275\312\371!>\037Y\">\362A\243\274K5\251\275\"\262\034>\021\n\006>Aj(>cD\235\275\013P\010\276\333\254\026>3\377\264=\205\3457>\265\273\007>\322m\225<_X\020>n\006\025<2\025\326=)\367\004\276%o\200=\223T\263=;\305\206=0\274\023\276o\327\323=\202\257\312\274\347\232\036\276T\274\342\2750G\344\275\277\305\360\275v\231\206<\256\265+\276\000\316\244=\213\211/>\034\342\256\275\317u\265=\3008\006\2761i\243\275\177\243\023>W\332R\274\277o3\274\326\224\003\276\034\035&>G\270/\275\270r$>\341\025\204=\2345\230=\3748;;\026\316\'\276\330\025\177=2\306\350\275v\010\226\275H\2005\276\276H\031>\365\303\205\275\212\260\n\276\350\342\352\275\007\204\300\275\357V\256\275N9A<5.\243=0y\'>\r\350\030>:\030\017=\017\257\336\275\311\367\001<\026E\025>A\367\023<\372\006\373=0f\344=\256\334\022\276\203tu\275\222\326c\275i\266\'>\310\235\366\275\363\001\273=\214QZ\275flI\274\313!\375=\305<\"\276i\245\371<q$-=\233\367\337\275\347\251\023\275\021D\300\275b\205[\275?\371\\<\240\356*\275\327L\023>I{\037>\010Y =\262)\337\274uV\243\275~n\004\276\272}\013\275F\273\013>h\177j=\270%\370=3]j\274V\211\324<I\274y\275%\346\010>@\206\303\275<\013\017\276\357w3>9\001\210\275\350D\332\274]y\344=\376\200\307<\266b\025\276\347\002i\274\213\335-\276\240*\324\275\201\234$\276+q\214\275\202z\204=\020!\005\276\370\026\027=M\2237\276\021\340\034\276\333\327*\276\3555\366<>uM\275\005=6\276I\2523<\245\003\013=:\254%\276\3168\026\275\005\352\377=X\327\210\275\226\333\013\275\303\343\276\275\036\326\347;\353\266\235=\231/\205=\217\312\026\276,m5>N\322\221\274,\2070\276C#\347=\307P/>\215\023,\276\340\\\036>oH\330\275\254g\007\275\265\2273\276\344K5>B\3061\276\302s\322\275u\310\202=\"h\024>yn\036\276\010&,\276&\344\352=JS&>\216,,\276j$\227\275\206\366.\276\222\367 >v \321<=L)>\272\233\234=\343.\006>\344\272\013\2768\225\364=\333\370\024\2760d\235\275R\341R<\337\343\255=\325\365\016>>\336;\275|\365\364=\347S\217=\201\237\031>R\321p\275V\327\027>t%\312\275ei$>\252\032\367\274\2051\261\275S|F\275\202#i\275o\316\265=\250\340#\276\233\311X\275\246\361\030>\200~.>\265|\355\275\272\3666\276\275\001\024>\333\361\262=_\002\014>\274\026R\273\251\362,\276\273/\307=|\316\321\275\310\2262<\242>\000\276\"\303*>\024\225\377=\336\032\360\275\230\027\344\274<y\325\275\234\0254\2765M\215\275\271\312\000>,\247[<\217\306\377=%V\002>\232\3073>\034\315@\275\023\026S\275;\023U=\240S\001>\n\355\005\276\035_\021=\315\032W\275!\r\031\276\274\216\217\275o\005\024\276<L\222\273R\311-\276\374\355\263=r\270/\275\254\026\341\275\273\363\270\275R;m=\350\361\337=\220\264%<$$\223:\332\355\304:\344\364\270=\344i :^tM\273X\3756\276F\316\202\275\376\022\211\275\324\020\357=v@\251=\353\321\227\275\347\375\377=\337\2045;\246\217*>4\372\357=\331\036+:cy\253=N\312u\274\336#\215\275\022\211\236;`\270\036>T8\200\275\020\0278\275\302\027\254<|\366\r=\316a4\276\0263\t>\255\334\224=\030~\240=\275\035p\275a\0164=\275\314#\276\375\345\271<K\035\243=0\274\211=\266\203\214\274\326O\345;\307x2>\374\370\r>\376S\200=XI\034\276\341l\320\2750\242!>=\352\224\275\310d\365=\236\223\355\275\352\307\204\275RuS=a0\247=(+\320\275b0\312=\261\206\272\274\025\0074=\225\216,\276|\311\214\275\256a\315\275\226h.\276\247j/=&\254\243\274p+\350=\020\315\251\274\0271\345<4\2631\276\220\352\266\275|o\274\275E\324(<\344\331\313\275 \366$\276\r\272\000>Ox%>\\\355/<)\206\020>\002\3437\276?E$\276O\273\246=aTk\275Y\216\234=\265\360\007>n\3252\276p\205\021\276H\205\364\275O\221\n>6\202\035<\314O\244<\223\ro=Y\373.>\300\215c;\245y\367\275\277d\032\276\002\224\251;3\240\236=\272\017k<\321~\237\275\270\317\213\274\230\360\241\274/o\'\274\334z\355=\224\247\261\273o\314\034\276\n\373\274\274\0302\372\275\213\214!>O\376\365\275.\243\213=S\277\334=\200\3112\2768I\316=<\221\017\2761>\331\275\245\276\216<$gf\275\303\274\322=\232c\037>\261\211\017>\231\211\262<\241H\302\275Lv\200=\337\2063\275\000\351\035\275VJ\263=\034E\273\275\244\374>\275\221V)>8\371u\274#\343l<\023\335/>+\213\276\275\376\201\320=-\312x\2750b5\276\027\236\375<\365\210\207<(u\256\275\363~\375<\277*:\2759\021k=\020i\r\2761\356v\275\312C\366=\235\0254\275]\0365>\303\205\227<\'\017\207=\363\243Y\275t\327\302<9\345+\275R\013\332\275B\020\333\271\263\306\273\275Mf\031>\001\031\037>\312\033\007\276v}H=\330It\2746[\357\275\211v\214\275\244\0202>>\242\326=5\037\027\275(\334\365<?7\003\276\252\032\306=\217\272\030\273i-\022\276\010\023\013\274\333/%\276\223\267 \275\360z\024\276\201\224\020>\227PY\274T\217]=\315\2233\276\251\023\007\276\203\233\212<Ot6\274{\213\277=\206\031.=\350\252\214=l\016\245\275\354\3738\276O,\206\272#\036\340\275\263.B\2756X\264\274\017\216\202\275\256<7\276\267e\257<>N\001>\321\212\354=\300\226\030>\311\'\326\275\373\356\335<4b\343<\032}\267\274\331\025O\274\253\202\016\2764\343\022=\357=l=\254\324\305\275\207\005\004=I\222\017\276K1\373=^%3\276\272\330\212\272[\336\305=\263\255\236\275Y\037\360=\026c\315=\201\225\334\275\ngy\275\353\023\356\273%B\234=\321\275\014\276\373\250\007=x\014\226\275\225\3130\276\0109\022>\n\336\277=\021\374h\275\314\310*>]\032U=\332N\035\275\'`(>.\3374\274\017N\343=%\023+>Cn*\276\032\200m=\267\021\206\275#\007B\275v`\304\275\203\252%\276\226\207)>nU\304=\264M\001>(\025\020\276\307\260\336\274[mD\275\004H\331=\202>\254\271R\005\255\274\234Q\006>\341\004\272=j\302\345=\373\337\016\276\031WQ<\327\345\021\276\362\211\200<\240s\025=\310l\267=\327>\301\275\327V\352=ik\246<ID\233\275-\237\211\275\235\3574>*\260\n>VY\232\275\247\0232\276\367\337\005\274\221}\022\276%\243\362=>\261\177\275b\tn=\332\"\222\275F\211+\276\204\235\351=}\007\245=l\225\250\275A\3567\276\304\270\"\276\376\263\316\275+x\202<\221B\010\276\304{\004\275\343\322<=-\034\300\275\270\344\001\273\245\227\321\274L\371\320\2752g\210\275Phw=\335\266\226\275\306\341$\276\024 \251=\037\362\240;\030Y\357=6s\341\275\213\242\322\275\217\377e\275^3^=\251K.>B\206\005\276`\0003>\177B\016>\341\211\333<#\330\210<h\233\222=\264\323\r\276\375\004\257=Puj\275\272\351\000>\243x\271<\237\363\226\275w\241\262\275\347:\037\276KC\204<;l\r\275|O,>}/\235\275\034\247i=\'d\034\275\234\327\037>\001Z*>\301\330\260\274\225\005\201\275D\265B\275u\256\310\274>\377\037>\204\245\243\275\234q)>\227j\255<u2\367=\211\004\364=\026w)>1\324\020\276\274\234\233=\033)\340\273\357W&\2762\265\206=\242\255\n>\001\006*>y\253\271\275p\364\240<\375\333\026\276\3230\353=\206\253 >bB\025\273\207\026\n>p\374\311\275\267\326\377\275\272m\033>AoB\275\273\017\265\274\200\200%\275\224\320\372\275ft \276\324\262\235=\035\320\336<\377\202\014>\022\351.=\317\355\306\275\276Z\007\274\266\3231>\354}\350\275\344\330s=\014\343\340\274>*\333\271>\\+>{\317}\274l\341\216=\321\344\367=\234\266\004>\230\236\334\275I^\007\271\002~\320=P\277\321\275\244\210\002\276\0103\024\276\305&\332:\010/5\275\350E+\276\177\002\233\275\"!1\276\375\320\031\275\247\212@\275\370\205\334\275\\|{\274\2449\302<n?\230=\r\030\006>\006\340>=\027\367h;?\027\n\2769\265\030>jF\330<\276\270\310=\334\213\230\274\267\234\"\276\207\345!>\304&\016\274sGm;,\207\027\276l\024\232\275vH\000\275v*\316\275]N&>\r\277\335\274\227\264\374\275,\273\300\275\267\254\036\276r\236m= \020\016<\320\375\024>\020Y\224\273\016\365\'>\21472\274A\220)\276\365\253\037\276X\337%>\361\253+>%9%>\376&\354=\201\\\'>Z\313\023\276Q:-\276|!V=\376\3620>\237!\213\275\310\322^<\236\366\221=p\217\t>2\314\220\2751b\254;\334\030\346\275\025\2300=\032R\233\275>\021\200\275\3133\323\275p\205\330\2752\356\242=9}-=0J9>\201p\336=\r\270\253\275P\340\004>\354\335R\274\234T\210\2753\232\031\276\377\335(\276=\373\204\275\2009 >\177\223\334=D\213\007>n\356\276\275s\305Z=\253\373m\275\365\315\010\275_\315\345\273k\303\240\274\221G\222=Ro\016\276$\373\025=-f\007>\333t\207\275\337\301\'>><\342=*U}:\364C\371<\343\177\370\275\322\270\025\276\314\336l=\210\0073=0H)\276Q\364\"\275\267\257\254\2759\272$\2760\254M<\020\030\311\274\315Y\227\275?P\331\275T\027\247\275\327\002\010=\302\024w\275\356h\327\275\233\275\n>~U\002\276n.\247=\0169\024\276\371\326\223=\032\361\333\275\362\242,\276I\337\201=\336\374\204\275\243\236\n\276\351\021\n\276 \323_\275\307\272^=\340\2134\276MB\200\273\222V\357\275\323\202B\275\333\351\334\275U\024\025>NS\316\274\367\222\307=\360\\\243\275\213\3413\275\256\347\346\2743\331L\275\304\362a=32a\275\022\211T<\030-W=\332\357\200\275\347\013\022\276 \233\032>,\242\351=W\002\333\275\252k8>.9\312\275\262f\003\271\373\010O\275\221f\013>\376g\007\276\361\004/>\311\355\244=yE\217\275\333w\002=0T\036\276$\251\"\274[\246\304=\325n%>^\275\231<\263\3477\275Z\025\022>C\303!>\231\223\340=\005=\314\274\212\2075\276IDJ\275\331\275\024\276 {y\275d\361\354<\r[\336\275\371\222\027>\351\202\255\271\314\3170>\022\207\001=^v^\275\256\200\010\274\306\335\007>\255A,\275[\335\000\276\361n\354\274\n\305\220<4\"\031\276:\276\002=\236v\225\275\370\'(;H\027+>\026\004\025\276\345P\000>\271\225\320=}\300\264;\222< \276\0248\250=04R=}\007\370\275L\354Q:^\367+>wT\246=\2164-=w\226\342=\267L\001>\354H\004\276=\220f\274s]\376=\230\010\324=\177\222\027>dc\340<\257\007z<\321J\365\275\003:\031\276\365D\372\275w,\203=\025\005\026>\377\023\242\275\222f\363\274\334\277\014\276\035\351\224\275\034w\017>]1 \276Z\315\t\274\250.\323\275E\364\237=?E\010\273\033\324-<wV\007\276\037\373\027>L\007\224\275\262\3362=W\003\255=\243\334\241=\001\027\360=\362\207\376;\004N\363\275?\334\005=u\363\340\275aR\277<\250W\234=\0341\035\276\201\rV=\270`w<\027\231\306\275\236\377\272<I4\201\274p\2020\276\214\016\301\275\216\237\243\275\351\027\237\275\313\013\257=\220\013,\276\323\374\244<,\301\221=y\036\003\275W\201\252=\205\327\032>-`\n\276%\350\272\275Du\326\275\237/E\275\003\270\002>\027j3=\205T\231=\351o\n=\336\005\213=jU\235\274\021>0>\230\363\211=\355`\306=\340O\020>tG\347\275\003u\032\276Y\0178>\032f\351\275@\334\007\276{\327\335=\203\014\356=\257W \275X\270M\274\302\3244>T\231E\275\206\216%\276\345>9>\260\270\305=\234\300,\276\032\327\230\275\030\272\261<T\234\315\274\264\010\204\275\302<W=/\005\016>\210.\007=\375\202\310\274l\027\343<\021\030\016\276)6\312<ck\372<\001q\026>\377U\036\275\257\315\340=7\023\270=\251\257\313=\314+~\275*\214w=S\370\226\275\225\311\222\274/\0012\276\031Y{=\201\2436=V\235p=\241\341\232\275\013\226\243=\364\343\275<\352\303\205\274\023S\332=\002\306\202=\231T\264\275\025\2616\275}\366\025>2\317\r\276@pj=k\017\006\276\216\223\026=\034\030\301\275[_\326\275\207\037\341<\3512\017\2761b\261\275\023 \221=\250+\374=q\341\206=\020\205\300\275\030\235\305=\222\037\016\276\334\005D=\2309\3463l)\203\275\004~\266\275l\243\370=e8U=\373  =\366\324\314\275\201s\266=\027?\002>\307o\003>\260\343\357=\000\263\276\275\355G\347=\236!y\275d\277\035=\243\314R=\217]\242\275%Z[\275M\313\354=\325rZ=\n\335!>\237E\003>\251\346\355\275\001\025\366\275C\320\351<\001\277\211\275\005\020[=54\006\275\213\302\235\275Q.\026>\313\213\231\275\\\310P<e\335\361=\2126=\275\315\205\354\275L~\375=\263\204\\=\377l\203\274\213\311\205\275\3105\371\275d\245\212\274\206\016,\276\351\245\325\275\322\"\350=\340\006\031\276\320\214\030\276L\323&>\tI\016>\231\376\r=wq&\276\334\020v=B2\310=X\320\263\275\\\351\215\275`O\261\275b\367\252\275\364\370\223\274\255j\016>\241\320\002\276\254/\\\273/j9\276?)\017>3\322->4\272\031=\3323\220\274\355\302*\275\024\000\217<\345\226\323\275\351\355\346\274\202v\371;\005\354\211\275S3U=\000\225\031=z=\022\276^\276\035>\330\326(;N.\260\275\217\350\031>!#2\276\306d.\275\215\314\222\275\034K\242\275h\006\212\275\331\251\022=\363\2774>\253\036\306=\035\211\326=&\311\034\276\317\231\r>1D\033>\226\3772\276DH\032>1\225\036\276\206B\'\275\256$\223\275\266\271\276\275H\333\221=\252\350\014\276\221\277\245=\210\225\213\274w\037\274\275\221o3<c\025\017>\361\275N\275\024F\033\276\354s\213\274\330\357\007\276\'\355P\275\200\016~\275\325\311\010>\263\024\017\276\210\231\377\27575x<R\276\374\275_\0166>\223l\353=\307\360\"=\003\341\007\276\317\357\035\276\177\365\306\275g\330\323\274\317\331\341=S\002\t>U(\211\275\346d\353=c\244\240\275\000\313\312<3\255\365<\275\301\320=\325\257\276=\252\311\361=\306(F\275\323\006+\276\034N\t=\233,\356=\216\322\026>\344\352\247=\337q\361\275\313>\234\275ER\316\2747\352\301\275\027\022\323<\271}\020>\314\241\025>\202\344\274\274#++\275\014D\031\276\232\275\302<\")2\276 \247\246<;P\311=Oq%>\3259\007\276_\344*>y\215\341\275\275\353\036\2765\314\277=C\027\367=[\262\000\274\0142\354=\324\2236\275\270\331#>.\351S\275\331:\223=\364\014\'\275\272\257\253\275\212;\003\276\005N\276\274\230=p=\'\270\230\275\211\272\003>\306X\267<\001d\224\275!+v=\354>[\275\237:)\275B\215\314=\300\006 \276~\343\275=w\316\214=5\223\314\274\225\331\255=\343N8>\342\357\327\275W\360\270<\305<\306=\211\220\n\276\270K\'\276\274S\357\275I\253(=+l\003\275m\214 \276\346\253\205\275@\234\272<\357q#\275V\260%>c\354\376=\t\364\346<\304\210\010\276\251\376\r\276U\244\314\27507\023\276q7 \276\337N\370=js\360\275\17719\276\334\243(>\246?\310\274\024#\225<,\204\006\275\r\272\264\275\257\013q\275.J\013\276\370T4\276\247dv=k\207;\273\rc\023=b\223->\251\244\361=I\2375\276<=/>)\265\352\275\267\204\007>z\366\r>xL1\276k\021~=\026\r1=/<\351=.s\351\275\005\326\017\276[(\236\275Uy\204\275O#r\275 \247o=\246\207\327\275\010!\366\272\352<\002>f\352\237\275\351\005\">\223\311#=i#5;\314\2734\275\274\204\343\274g\221\353\275\305u\313;\025\2556=k\224\354=\317\327\340=\253! <\352\"(>\373\357\005\276Sa,>\"J\371\275\030\243\036>Bq&\276Z\032\r\276;\330~<\030\330y=4\'\210\275\362\350\333=]\327\210=\nx)<7u^=\373\t\263=\341&\233\275\0053\253=\214\355\322=\367\205\216\275\275S\362=t\036%>\256v\304\275g\271.>\244\255E\275g\367|=\260\261\317=[}\004>Z\260\264\275^\205\333\2754\311\315=\240\017\325\275\271x\305\275j]\342\275*\320\300=\276\2530\2759\031x<6\274\007\276R\361o=|b\376=\353D\253\274\331\240\221\275\346\335\n>\303r\n>\273\327#>\235\345\311\275\372\237\344<\236\020\034>\006f]\275;\017\301\275\026\224K\275\007\274\211\275\35001>3\332\244=\322\316\320\2758Ah=[)\">\014\342$<\246*\334=hj\">\216\005\000>>*h=L^\'\276\354\r\211=\227\307\337<V\265\310=o\021\032\276\241\270\375=\316+%\276e=h=V^N\275\356\0374\276%\010r\275\230\003\023>\251v\235<\263\013\034\276^\034,\276\035U3<T\265\037>\222ie=\255\242 >:\026.\276\3222\362=+\320#\275uv\002>\nn\221;\002\177\276\275w\026\000\276e\224\020\276\374L >\252\260\002>\321\214\031>^\266==;x5>k\306\010>G\'\310=\304\342\0249\243n\025\275\231\311G\275D}\253\275\034m\237=\342z\204\275\316\267D=\002\3437>>\355\261=\273h\037\276\230\267\355<c{\021>w .\276\307\263\263=\361\000\030\275\t\026T=\003E\216<ly8;g\321\005;q\010H\275Y\346(\276\221\363n=\304\203\253=\r\245\240=L\027\267< a\331\273zj\033>Hl\244=\22310<\271\321\013>g\235\357\275tL >q\350b=1U\321\275\265\277D=\262\250a;\215\330.\275\210C \275\211\373\331\275\253\305\302=\231\n\">\344\023\206=\017%\276\275\332\"\033>\205\244->.B\323\275\302K\037>\326\330\360\275\213[\021>=\347n=`\034\'\276\217\024\021\276\010U\303\275\037E\333\275\260u\273<\226h!>\276*3>\347\324+>\036\356\305=\030@\035<u\340\227<\311\333\034\276\300\232\177;Y\216\0068\260\"\231<\223\025\003\276\334J\022<\277x1=\21397>\361\327\334<\230\037\365=%\377\244=\273\313Q\272~j+\275\277yZ=qx\252\275T\023\023>\034[3>>\333\'\276\301\346\320=[\2641\276\256\271\242\275wT\034>\035\376k\275(\345\200\274\344\262\030\276C\3259=T\302\325\275\334eq\275\'\341\213=\270\216\347\275\236\362\370\274/\0302\275:j\200\275\263r\357=\3779\330\275\276\2101>\253\374\365=\303\031\027\276\022i\345=c~\017=@\227\363\274N\240\342\275\257B!\276\2333\356\275\312]\230=\026\314\326=&\261\000\276\320\001\001\276\337\215\037>D\356\365\272V\337\300\275i5\325=\215B\211=\220\226/>\021\303\211=Z{\356\275U\020H=\023*\275=\'(2\276:\316\n\275\024$\302<\247\350\250\273\335#3\276\315\013x=\220\331\314=\315\202}\275\013T\226=l\274,>\3379\321\275l\2602\275\342\214\260=\206u\037\276X\324@\275\365\240!\276\317O\241\275W\2025>\r3\306=\262\200\340\273*\356\002>H\\(\276\267W\004\276\033\211\370\275\036\006\023>\360]\215\275\332\320&\276%\016%<\356\020\342=\023\276.>\270\0330\274U\t\346\275\"\026.>\324&\277=\232>\031<K\323\024>W\314W<\267\001\332\274?\260\002=v\213\356\275s,\007>\240\304\315\275\223x\212\274\035\321\337\275&D;=>\021\241=\223\243\237=\230\035\274\274.\023\003=CD\007>\210?\200=\2525\037>$=\202\274s\r\007>a\0003\276\024;\357\275\222c5>\036\323\343\275_Q\252=Z\t6>7\203*>r\007R\275\356:\351\275f\2227\276#\256\033\276\350\310,>\031\371\253\275\017\246\022>$j\222=\235\"\333\274I\326!\276\317\024\013\276.\025\303\275\363\005\001>\344F\007=\264\307\223< 6\227;\177\327\327==|\245\273Yg\376\275G\252\275\275\262R\034<ad&=V\306\n\276l\013\336=e\3336\275|\233X\275\205\340I=e\304->x\207\272=\2478\031=l\242\346\274\030\345\r=)\372\251\275\266B\211\274E\034\013\2768\206\271\275p%\331<\227\246\275<\306\377\253\275;\337\340=}\267\376\273\373\347\257<:\344D\274Z\227N=\034\005\260\275\256\223\236\275\273J\361=P1*\276\275v\242<\330\374\266\274O\305\030\276o\307\277\275t\030\001>\351\000\036>\370\362\255=\375\314\003=\232\017\';7\016t=/\230\014>\372\220\272=8\322\027\276,\013\002>\200\367\306=\033\247b\275\037\007\200=\2276\037\276\357\230*\276Q\273\314=\373\221\030\276Z\377\263\275\312:\002>e33>\006\342\236=\353\004y\274t\251\204=\241\235Q\275\025\236\325=\354n1=\0036\320\275\242\0050>\035!,>^\325\320\275\025D\014\276b\002\001\276\036\225\302\275\325\367\251\275\375\3255\276\322\326\346=\341\005>;\374\200?=\375\025,>\013\272\\\275\351\227\241=h\227\347\275\203{3>h\303\003>\247\322\335<\304Z\360\274\341X(\276o\306 \276<\004\243\275_\r \276b2f<\223\255)\276\004\226\223\275\326\210\346=6DP=\375),= \233\300\275k\013\275\275\006V\213<G\223f=\264\321\240=\334a\200\275t\234\004\275\rG\235\275t\346\354=\026t\260\275\026I\210=\337\306\347\273\236y\252=\014;V\274\245B\345=u\320\330=~5\332\275Y\312^\275\216\025\'>\027\307\360\275\361\322\227\275\235ll\275\312\005\213\275\3268\032>\353\211\'\2751\354\375\274\303\222\252=9\025\232\275\214mC\275\265\211\006>e\247]=\020\342\001\276\3470\213\275\320\320\231=\225\010\026=\330\311\326=\235\267\031>bW\\\275[\264#\276\227W\020=\342=\230\275!\315\247;D4\032\276\316\343*\276\255-\323<\275.\017\276\267\211\227=/]z\275\030\233y=\02597\276&\375\376<\240`\350\274}\346\267\275vK\316\275\321=.>Gv\235\274xM\354\275;\303\255\275\271\201\001>\270\002\020=\005U\214;\341\262\010\276\324j\305\275x\262\321<\226j\324\274\362x&\276\315k\340\271\331\264\026\276\211\031\360\275h\306\025\276\250\003\241=\037[\002\276Z\036\017\276(Cg\275\333zz\275\216\027\363=\324Q\365\275-Z\342\275\305$\366=\366K\343=\260\246\245\275\007Y#>f?\224\275\246\207r=>O\266=\370\221\273=Q\266.\276ht<\275\034p\221\275\017\303\255<\222\254\337\274\230Eh\275\016\306\373\274\007=\010=:\313\036\275{\275+>\200\266\272<9\263\250=\335u\353\275\347\272\236\275(\006\343\275\364_\201=\024\255\361\275\020\331\211\273\2015)>G\3752\276\334\000\365=!\222\"\276\366q\024\275T\367\023=+\364\373\275\200\315\257\274\035:9=i\266R=\330\033\217=\025\335\001\276\237\0004\276S^8>\375\177\036<\255\325\'\276\"%\035>F\344\223=\367\320\362\275N>\371\2759\010`=\037.\037\276\332\261\346=\363\201\270<\004\344u\275K\325.>\326\374-\276\364J\334\275z\246\347<Ll\006<\274\024\024\276\200\362\316=\365\215/>*\001\373=2\324%>\307\236\004>\030\030\004>\206\276W=[\345+\276\017<==\300p@=m\"\276\275\313\364\223=H`\322=\325\223\036=\013\036\221=\263Ek\275\236a.\275\311u\007\276\310o\003>\3201\250<\252\317!>e\254t\274\007\"\021\276.b\267\275(C\203\274\244\251\223\275\274\003\327\275\213\277I<\037\017\321=\243\261\307=\266\320\234\273\367\205\006>9\374\216\2755_\313=\252\246&>X\3447\276Q\362\251\275qd8>\035\373\"\276\2547\323\273w\006\030>W\326\364\275\315\334\302<G\006\242=9\0065\2763\271\247=\241\360\273\275Z%^\275\232\004n=\037\325\372=t\3066\276\024.\303\275\245\310~\275\3128\005=\377\364\242={B\t\274\242-\220=\033\'\317\275\375\362!\276\316%\231\274R&*\276\3174\302<\250j\007\276\223\342\264;\272\237\002\276\201\236\036=\274_\232;f\227\362=\225\033\023\276\261N\036>\024\301%>\200\246\"\276\254\225\313=\204,\267\274\303\231\302\274\361\303\325\275\3460\005=p&\232\275k!\372=\2474*\276\350=\017>\035\265\207=\214\303\277=\361\206\000\275^\340\014>J\316\004=\274\222\n\276\263\275\274=\021T\246\275r\3046\276\023\204D\274kK\270:IDQ=\201\353\257\275\304\0262>\255U\221=\037YE=\310\r\r>\207\306\010\276sr*\275\225_\030\2766_\220=\367\244%>\206\244\241=\220\036\205\275a /\276m\260i\274z)1\276V\333\206<\345\201\033\276\320$\334;\035\354\227=X<\006\275\243\252*\275\364W\006\276\377\306$\276\344\243.\2748\027\234\2753\365\t>\3752\311;\346I\303;_\256\214\275\016\342J=\355\325L=\363B/\276\365\357-\276%\3276\276`:b=\265\307\006\275\002\255%\276\342~\';\\w-=\311Q\215=4\314\027\274\316\331\034\274\001+\325=N\276\032>o\367\030\276\362\252\010>\330w\036>\201Pg<\236\033\013=\255|U\275&S\241\275\344\246\275<\010\004!>J.\036\274(*\027>\266\205\252\274\003\262\034\275<4\226\275\375\215v=\230\207\020\275\370\316\241\275\301\343\033\276\2571\221=W\236U\274+t\250<\211\207\352\275ISG=n\035\334=\3348%>8\252\205=\354\270\025>\321\"x\275zd\243=\373\341a<\331\332\337\275\207\360 \276\327\013\336=\rY\370=\232\213N=\016\360\236=\202\316\307\275\376\345\334<Cm\356=\277\222\372\274<\234,>\221\223 \275\276P!>o\260u\275\345R\020\276\241$i\274:\323 \276\257\352d\275\014\213\t\2768\367\031\276\250\2043>)d\324\275\242\367\303<9M\357=\245\201\245<N<\260\275\240\316$>x\3416\276J\036\037=D|\014>\266\013\177=\362\002\006\276\304\223\252=\032c\337\275\365\233\025\275\013G/\276\340\000\223\275\202\221!\276|\253%>\007c\245\274\227\351\005\276@\275\363\275S\363\333\275Y\325\277\2753\013\004\275\332\273\226\275\024\355\342<e\021Y=\347Z\233\275\2537\003\275\2431\020=\"\331\301<\207;\334=\327\270,\275\014\243\032>\276\030\302\275\271\007\242=\233r\236<kh\020>4\266\326\275l\001\301\275\213\224I=\203]\010>o\374M=\205\035\307\274Q\346\234:A\330\221<F\013\371\275\004_#\276\330\275\020\2761g\313=\270B\372\275s%\317\274\301\257&\276\247\223\030>\344\023\342=s\016d=\335\254\317\275\010\225\372<\217U\002>\300I\335<\2601\005\276\253\037\260;xa\213=\275J\035>\010w6\276!\244\316\275\226\275\274\275i\315\211=N*\000=\370\235\006\276\373\337\311\275&\322)>\302 \007\276|\312\032\276p\327\026<\022k)\276H\336F=\035 \375=\354L\021>,\353\240=\303B\004\276\364\207\037>\264\232\034>\201\232\253<\360\362v=\246\214m=\245#y=\003\004\365\274\347F\214\274k\023k=\334~\030>\001\257\203=\352\217\027>?S\352;\373k\177\274_\341\311<l\234\037>Dt\261=\356\252\341<\255=\025>9x\356\275,\257\001>J\006\241=\255a\033\275A\030\216=FY\201\275g\213\004>\265\374\260\2742A8\276\262o\261\275 Q\'>;f\372=K\223\265=H+/\276,\335\233=\347\nQ=\341\215D=\315\347\034>6\220\376\274\363-t\275i\266\302\275v\010\237=4\207(\276\244r\002>\252\353\364<\312\300l\275_%\007>;^\007\276\221\344\214=\362\350-:\206\276\010>\361\242\363=f\2160>\2363\253\275?\274\031\276\337\2629=z\216\371\275\037\342\267;L\\>\275 \355\n\276\177Lb=Y\227\021\276\244R\003> F\256\275\321C\324\274\355\035\026>\271\307)\273w\037\016\276\025_,\276\337\257\256\275\324\213\261\274\203(\201\275\271\326\342;\364\223\207=MT\'=\005\251\036\276\2512)>\r^\374<\211(T\275x\344\367=.O\016\276=\211\311\275\201\324\033\276w\337\324<\3038\357<i\021X\275Zb\010>\236\n >\003=\"\276\356o^\275\212?\243\272U\364\335\275\373\325\330<[\010\277=\006y\236=\224\260\230\275\224w\000\276\237\202\273=Y\rv=\265\025_=\256,\n>\230\020\023\276-~\027\275K\334\037>//\311=\r\271d\275\343c\317=\345\2242\276=b\251=\300\375\000=\\\"\301;A\255$\274\252k+>\256\022\002\276U\356\004\276u\324\355\273p\025\013\276\274)\271=r\213\021>\326\224p\274E\215!\276\312\016\002\276Ke8>\273\"\026\275\271\253\224=\307\203\016=\303\007\350=2\230r=\375?o\275\273!\246\274G\300\031\275\263Y\024\276\307\313\372=\355X\315=(D\332<\\\2226\2761\003\031\276J\333\240=\005s\'>*\\\003\274\243\335)\275[1\244\275\376\322\017\276\264\227\014\276C\3105\275\317\241\343<\251\316\205\275\364\352n\275t0\205=\033\005\234\275\002\"\251=@y\275\275p\013\033>\263\307\020\275P!\310\275\333?\371\275]\331\322<*>\177=\200\"\347\275\240T\027\276\202\034\000>\315~\367\275[\030\331\275\336\254\272\275\371\335\352=\035\256\235\275w\346<\275\263\247\017\276E\275\251<\240\220\261<\335W3>\204\303\311\275\301;\255;\013UQ\2741f\"=\367*\240=\315\216\314\274 \032/>P\357r\275R\026\307\275\224\272\202\274uf\r>n$\002>\2770\253\275\346\346\036\276\224\203(>\002\013\244\275\001\375\332=Z\345\361<\323Y\347\275\250\266\354=\023\355\263=\231\"\372\275\351\253\006\276\2772\213=\256 \232\2753\222\375=\337\312\207<\032Wh\275\313\200\222= \252n=w\363\264\275\307:\007\276)vp\275L\335i\275=2\020\275\274\257\013>\353Z\000\276\351_\252<\221%\301\275N%\377\275\237\034\216\275}\252\240=GG\030>\351A\034\276\342\\\023=-\264,\276[\216l\275\356\217\264\274\305\373\023=a:\233=\371(\332\275\004n >\345l{\274\205}\330=k\373W\275;\314u\275\256[$>\252z4\2732\211\224=\331B\371=hB\222\275=\272\211\275\246E)>-\203%>\251/\360\275\210\033\360\274\014\351S\275\366\360n<\247M\347\275Wa\003>\273\226\"\276\323\276\250=U\254$>\331\247\303\275L\010\252=\022\007\361\275>2\317\275kk#\276\245\200/>\325\310\023=\347`/=\030\231\"\276\206\204\035\272\'\022\037>\224V\020\276&\3704>\307\204S=\017&_\275\355\303+>\260\\4\276|q\n\276s\2533\275\020\240\260\275\275$\321\274gN>\275\335\223\036>s+%=s\316\317\275\027y\317\275=\030\313=\255N\302\275\213d\023\276\"\320K\275\356\023\220\275\034\315\033>\211\220\212\275\373\336\t\276\201T\014>\032\311b\273\326A\037>\027\340\037>\020{H\275\006t\317<\036&!>\376\177\003\276\327\025\263=\261qN\275\035*Y\273E\262\021\2764U\372\275\277\315\026>*\216\t<\316\226.\275m)\244=\270\377\352=\004Y\222=b\033\202\275e\"\024\274\223Z\367=\375RC=\034\200%>\253\337\277\275]\246\257=\275\033\016>@\034\024>4\3725\276n\177\264=\356\302\r\276@Bn\275o\241&\276 07<\354\316#\276\210\367\262={\022)\276\233\310\336=\363\3202\276\037]\030\276\331}\270\274\204\240\345\275a\327\200=\240\3278\276\362`\251\274FY\255=\3132\255\274\211+\342<\275\030\246<\323\241\320\275\263\n1\2754<4\276~\023\016>aI0>n\033:=3\210\243=\316f\255\275\000#3>\214\301\210\275x\357\222\275\242\322\232=,\226\017>\333\252 =\010\272\232\275\341\3400\275EQ$\274\275\371\3349\202Lt=\331j\022>\247\260g=\177\334\241=yPO<\017\366\203\274\302)\377=\305\323(\276\275\251N<\230Y \276\354\307\255\273\336\246\204=d[\261<~\034\231\275\002\371\334\275\272\337\217\275xd\026\275\016\031\326=\264H\241\275 \206\250\275\253\210\267\275\321\027\014>\037\317\314\274\326f\206\275\350i\022>\010\252[\274\'\2055\276\327\001)=\220\261\242\275\326c\036\27695\327\275\342\342\t=l\320\206=*\362\346=k5#\276\001\'\026\2767Rb\275\343cQ=;\231\004<\326t\355=\244\"C=\357\226\302\275R\214\234=\242{T=\215:\212\275\231L\243\275\357[\270\275\263\024\347=\343\330L\275\213\215\023\276[\232/\276\303\324w\275p\325\272\275\364\246y\273U?\366=gI\273:\273\261@=[c\251\274\347\206\030>\366\013\346\275\346\020\342=J<\357\273\026J\312=f\364\026=qC#\276k\026+\276:#\307=\303%\033>\204\014\032\275\334\304\024>\222\307)\276\240Y\035\276\3033\022\276\370\343C\275\313\221\332=\322D\n>\230\251\305<\313D\261=\3404\020>A\201&\276\326\202\001\276\031~_\275\354\372\342=\324\245)>gh2=n\3532>;D\023>\312=\275=\036G\254\275}\271\202\275\336t\000\276rP*\276I1\005\276z\261\001>\275\263;=\2139&\276\222\014\024\275>\335\337\274\225\322F\275\034\270\352=7:)>g\342\356=@\333n\275z\030\235<&\375\364\274-\257\014>\036\016\332\275\263\341\343\275\362X\016>\312dB\275\010>\261\275h\314\t>D\264\001>\243O\n\276\365:\367\275\337\245\345=\2718\274<\207U\332\275\244\361\346;\257~1=F\020\365=\223 <\275 6\031<\375v&\276g1\344=\222\350%>\272\036#=I\244\264=\266l\253=W\274i\274\214\n\374\275\263\0046>\360\260\221=Y\002v=ZU\324\275\2634\370\274\216/\025>\324\0301>\270/\353\275*\266\372=\020-\344;Un.>\264\271\277\275a*\240:L\253\n>\270\273\'>@K\347<\205\'K<\343\313\211\275\272%!>\241y\003\275\224\256\257\2754q\033>\344\017\326=\016z\n>\362_\223\275\302K.\276I\252\n\276\034\344\n>\005\231\235\274\034N\256\2758\357\t=\213\333\321\275\262l\327=\030\326\032>\302\206!\276\334K\251=\365h\224=l\312\253=\366\252\014>\202\323\273\275\245\022\021\276|\003\324=\343\213\347\273\3243\370\275\2376\260=\253\227\330\275\215K\261\275N\0013>\216%\036\276L]\017\275\376\3614\272\'\314^\274\267z\346=\221a\272\275\252\n\004>\032Fn=P\326\037\276\2224\341<\301~\370\275!\271\312=U\033C=\303\016\202=D\355p\275\325\3021\275YM\006=\250\326Q=;\033\252\275\237c\364=X\202@=ok\035=\356\010\026>\244\2552\276z\\/>\343A\335=\n`_\275\250h \275\200I\347<N_\332=A\3616=\225y\013\276\256z\267<\303\254 \2762\2546>R\372#\276\303\\\263=h\223\215=\241\340\375\275\215\334\360\2734\337\006>\302l\362\275\232\2600>\221u$\276\224R4=a\321\035>\245n\211\275\241u\317=P\223\320=\204\336\001>\217P\232\273^\356\247\274\272\003\035\276S#\013\276\345+*>\235\036\265\273\002\251\r\276CC\252\275)\"b\275H\007\274\275\017:\036\275\264\021\032\275/\245\207\275$\260\356;j^B\275\006T\300\275L\247\226;\rp\000>\361]\304=\333\240\306\275-x\232=+\320\342\275 \213->(6\000\274\342\007\022\276 \333\215<N&\355=V%\r\275\311\252\246\275[\223n\275\337\201\304=m\312\215\275cH~=\024}\031>`\347$\276\322\206\013>\022lm=1\303&\276#\235\205<\023\365\314=\362\3722>eI\226\275\2620\036\276S\337\311\275\321\037\225\275\246\324\025\276\254\250\026=\265d\'>\217\035\001\276d\352\007\276T\300\022\275\350,\026>\323 \300<\346\315\016>\031\206\303=2\021\307\275A\241\331=\253\236\244=\005\232\r> \037\347=\230\352\024\276\210d\352=\242 7\276\004K\347\275\247\372\341=X\244\272\274p3\r>\357\t\010\276\257\266\252;|\014\205\275\372C\206\275\305\027\362=_\355\354\274!\355\327= \356\267=@\027\247=\\\355\226=+\306\013>\255j\234=\205\276\'>;K\347=jT\2366\254\212\r>80$=\201\226\027>g2\247=\304\201\024=h\2312>\213kW\274luM<\215\224\333\275\263\216,\2765\307*=Z\314\037>P\024Y=\351\302a\275\250\353\301\275y\031|\274I\200\375;\224a\254\275\352\320\001\276\333n\233\275%\310%=\334\201$<n\"\266\275\375Q\027\275=\375$>\212r\324\275\240b\215=\274\2767=\212\331f\275\263\023\r=\033\255\325=\366\251\002>\237\330`=~\261\363\275U\311\350\275fE\304\275\300\221\214\274^\010F=\265\362\226\274\306;v\275\226\302\334<\030l\210=(\327<\274\317\271*>S{\005>\225\316\327\275\264\024\276\275\335\361\031>\267f\022\276\2763<;\306?\030=<%\'\276\032\r\010\276\025m6\276\032\340\016=\252*\214=\252\313\216\274\026\242\354\275H\272\377<\327\005\220\273\310\177\035\276S\246\217=r\265y<\354\"\'>u\2275\276P\230\'\276\225\203.>\264\253\336<%\222\373=\203\014n\275\271g\204\273\n(\004<\247\250\376=,\262\303=\251\320\024\276\314\000\374=\264\r8>\226u\335=\262E\035>\t\352\035\276\307/\256\275\021\202\033>9K\207\2752\305\365\275\3022:=-\337\275\275\341\321\004\276\377\320\334\273\373\3452>p\216\306\274\360W\025\276&\311\376\275\212]\220=\236\3450\276>\327\022\276\361bl\275\027\200\356\275l\222N\275\250\303{\275Y\236\032=kS >t\033\206=mA\030>*\370Z\275>U$>+$7>\352\217\264\2744\2754\276\277}\307\275\230i\334<U\257x\275\302\304.>\235\346\361=HM\342;_s\310=\361WZ=O\223\022=\307\360\263\275}\034\362\275\177\353\344\274\336Pn\2759.\226\275\211\033\017=\360\0221=jo\374<\301u\006\275P+\234<3\177\354\275\245\032\031;\323}\020\276`o(\275\234\021\325=\317\3775\276\357G\265=&\246\341\275!l\256\275\366\351s=n\216n\275\034\314\010>0\307\210\275\353\022\2409\025\226\310\275\360\304\317\274\300O\035>P\300\025>\233\010\306=\030\r\241=P0E\275\265\025.\276\371\327\372=H\277\030>k\263\355=\376\334`=\301y\205\275%\306\026\276<^\006>*\220\265=\3063\260\275\374\004\217=\031\250\t>\363\3439=I\210!>\001\"\361=Vq\357:e_\014\276R\2222>fO2>\377\264\023>\254\0324\276\304~\207\275E7\214\274]<-= \320\313\275\241\271\273\275H\300l<,\371\334\2755)O=\204\367X\274[\007E=\201\224\177=H\236$\276&-C=\323\312\332\275\037\306w\275\366\002\r>\\m\222\275\230N\020>\014\302\013\276\364\354\215=\353N\013>\322^\031\276\264\010\035\276Y,\272:9\2174>\362\207\"=\314\341\023>Qm\367\274|\232\344=O\303\277\275Q\257\007\276\241|\"\276\277b\021>\024\021\341\275\340\346\237\274\244,\332=^\377\"\276\305\371\246\2748\345\322=\245\266\032\275<s\323=\274m\034=\205\025\275\275\233\3176>\021%\216<\226\223+\275\270{\014\274&\221\225=\301\246n=\360\005\212\273$6\312\275\245\225\343;$\253!>\342\314+>\201\262{=\310\315\365\275\037\276\r\275}\021\'>\330\372\026=\201K\341\275\025\274\373\275\315\373r\274\307f\001\276\217\266\000=\370Op=@,\001=w\252\202\275\235\333\267<4\332\201\275\232\027[;\213m\033>\236W\217=sQ\034=\257y\006\276S\013\033>\232\034\334=\013\026\347\275\334\353,\276ry\321\275\315\274\020>\002]\007\276\257\246\013>\303.\030>gZ\035>\267\005\017>-Jm\275=\310\311\275d\210\377\275\033w}\272\302|\310\272FK9=\370\353\005>\364\300\025>y\324d=\206\234\307=\274Y\300\273/\277\027=\227\3354\276\004\271\006\276\251\376\255\2758\370\032>\322*\360=\021\313C\275<f!>\177|%=0\376\026\276\363`v=2;\371\274s\353|<M\314\n\276=\004h<\016)\205\275)D#>O\346\313\27539\351=\000\020\017>\215\010\266\275\300%\000\2765N*\272\321F\216<\206\270\372<\2715\026\276./\333=HY\025\276J\027s\274\036\373\365=MB6\276\333\037)\276\313\277\272;\373s\010=-\2104=\267\270\334=W\243\225<\306#\253=\212lB<t\367\230=s\274\025>\305S\325\274\221u\001\276\016\273.<&\226\356\275R\344\354\275\372U%>h\3763\276 V\210=x\240\203\273k\277\263=1\240\350=\276\271)\276{\0315\276p\277\341<\231\265\000>\304\032\3068\372\2240\275\307\272\373\275D\204\006\276lb\214\274\261R2>\230\356\r\276\037lh\275[4\222\273\247Z#>y\025 >4u\352\274,MT\274\006\033\\\274\to2\275\272@\027>\001\241\020\275\264\203$=\243{U=$E\247=\013\036\304\275>\222\'\275N\0058>\266\366\025\274Q\312\n<\364\354\026>\257\035\346= \306\005=!8\275\274\027\264!\274e\237\332\275T{\350\274\2710(\276i\030\034>\222\220\023>\032\354\367=\203J\031>k\2152>V\241\234\275a\336W=\016\223\006>+\274\354\274\367\363\307\275*\014\341<ym\374=\266\010\003\276\236z\007>\037\025\027<\3029\013\276\013\257d\275\265\004\000\276\336\333\014\276\003\221\t\276Qn\204\2750\204\304\275**\266=\223\314\320\275>\233\020\275\271h\277\275\247q\244\275cj\354;A\036\346<|\005\037\2768\351\224=o\372\376\275lx\020=8\336\206\275<\2575>\037\010\314=\237E\274\274B\277>\275\315\223\023\276T\265\016>\310\0333\276h\332\357\274\032\3618\276\003\024\265\275\364\201\353=\261\377\333\275G\227\254\275){\374\275._U<x\203\363<\211\263\007\276\244\245\321=\301\364\362\275\345\265i\274[9*;\314\245~=\303\336\277=\017\022\257=\356\'\207=\371\026\265<\332\260\026\275\023,\303\275)V/\275]\231\307=\302\302Q;W\322Q="
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "g\321\013>Y[\033\276\321\\A=\367\001\025=\3524\022;\200~\266=\177qc\276\223\345\321=\216D\020\274O/\024>[\362\363=r\027\032>\027\2772=L\261Y<\020D\342\275\321\350I\276\005\227\335=\016X\302\275LK\221<J<\216;\244\221\014\276\373\312(>\211\324\033>\346\277K\276 C\021\276m&\320\275\304\201[>&P\003\276\202Q\233=\210<Q\275(\314 \275\202\016\013>F](>?\221\243;\260JL\276g\270\035>Neh=? \034\275\205\250\225=\275VZ\276\203k]>\245\t+\276\026\235\357\273\n\263\243\275\355\014I\276\323\367#=P\024\025\276\2559\243\275D\300\227<\2664\362=\301/4\275\244\031\025=\220\025\361=\324Z&\276\250\334\203\275\316\225\000\276\310\004V>\263\377[\276\000\033\200\274\301\032\340<3D%\276\233\247\313\274\r\261\370=\210\375J=\027\364^>\266`\332;q\225_>i!_>Z\277\003\276`\327\033>\362\311\034>%:\337=\273^\356\275}\344Q\276/\007Y\276\223Y\013\276\341\275<\276\266\017~=R\346\202<\255\242\370={&\224\275\357\212\002>\352C\031>Y:\300\275\337!&>\200\021i\275a\336\210\275q\251\367\275]\001\307=\223\036p=[eu<\270\237o\275\336EX\276\346\305\013\275\307\205X<d\034a=3h1\275\276\236\354=O\350J\276\335\375)\276D\220\235\275\\~\355\273kU\370<\345\3563\276\205|f=oj\337\275q{S\276\006\030\323\275\237\312\241\275\252\236\365=\260\304T>\247\226\004\276\032*Z>\350\356\014\276\000~r\274f\263\373\275\336\201R\276u\014A>QTB=5\322\327\275\202\362\020\276\014\345H=\232iX>\266\272=>\251\244\262=\210&\271<\215\034\271=\365D!=5}\340\275,\316\204\275\232\320\373\275\345%X\276\244\303Z\274\027t6=\256\216\240\2734)Q\276ne\363\274\376\303\037>\360i&\275\320o\n\275\254\275\013\276\344q\252\274O|\307\275\200lS\275]\022\314\275\227\300A\276#{\200<L\261\354=\340\370\244\274:X\233\275rc=\276\253B9\276@\312\235=\324\277\020>\306\"<>\263\307\303\275_\2540\275\260\354-\276mRf=\277~\364=\237N\202\275\0010\373=%)\024\276\352\021,=D\014.=>\303M\275>\2762>\';H\275\3703T>\034N\r>\334\336=>\270\022\230\275K!\030\276\005\267H\276\231NS\275{\367&\2750ry\2759\023\265\275\3251\000\276\303\364&>\032D\362=\267\031 \276\315A\214;@\002\003\275\370,\243=\305Y\217<\212\2035>z\224\370\275A\374\246:\300R\\>\347\250e\276\315O`>r\332\263\275\037f\017>\224\245r=n5\271=\327\353\201\275r\332D\275\351\365\222\274\301\200\016\276\r\353\031>\361/\275=\217/\321=\272\017_\276u@\340\275`\251?\275\037\314:>1&$>\327H\350=\230\262\352\274\341c\363\273\320\235\025\276,\267\023\276\264\372@\273C\016\t>1\203\300\275\270\022W=\224\274\267\274D\251\207=\002t#=\312ZT=3^N\276s\235\n>\023eS\276(\271<>K\006K\276\375\354\315=\240S7\276^\003\022<\266\232Z>]\332Y\276\034\233\373<\005\276)\276x\2441\276\356AV>D\334V\275M\037\230=\251n\374\275\3313\370\275\3011b\276bb?>=\2719</-\024\276>@N\275\327r\361=Q]\250=\220\006\341\275M\355\273\275\274\017\265=\221\t_>lU)\276\253@\227\275\211I:\276R\201\327\274W\266\332\275\274\265\315\275\256\237\374\275\340\237:\276\257-!>\352\262S\276b\036\336=\305w\225\275\007\367[\276\336TS>\037\305\367\274KvR\276\"(\305=.$\217=\233\002\332\271\270\376F>%AH\275\300\032\004\276\235\037(\276k\010\264\274<\212S>F\325\274\274\006\246X\276wh\327=\343\306\231\275\224>P\276.\201\242\275\214L#>d\326\n>*\251\346=\326\334\323=\004\307K\276\204\231\n>\002DU\2763!K>k\000\232=\245>\330<\331N>\276\0305O\276=:\032\2768\3303\276\025\356\t>\206\341\266=\264\204c>6V-\275oI\260; Lx\275\265\017\203\275\3065\211=\320\250\"\275\352\037\353\275\231$S\275&\340\206\275{\321P\276\n\005\037\275:QO\276*F\020>pL\350\275\355\230\307<+\256\223\2753\017E>g\262\205<\357T/>\006\337\271\275~\357a>\254\3517>\324\241&\276\001\271\374=\351|\030\275\3106\226=\"\212\023\275\213+\251<\367\264b>E\255\240=*\035\275=\240\tE\276\204B<\276\025\242e\276\272B\356\275\230\312\216\275\033\205L\276\032\204\237=\027q%\275\244\327\001\276\370\030a\276?\014\223\2754i\022>o\260\271\274\r\004\243=\321\261\327\274\355:7\275\303\213\007>*c\216=\263\035N\276\314\227K\276C\270\023\276\271\205c=\310]S\276\t\272\374\275\344\014\031>\260\344J\275+\325C\275\242q\007>i\360\375\275&\031\314\275\023Y\303\274\025\267\016\276\364-`=\340\372\310\275jEU\276$\265\030\275g\020\225=F\'Z\276\220>\320\275m\327\t>\337\373\007>\200\274\257\275U\374^=wDc>\216\003\035\276\325\325\020>\033\315\n\276o\n\022\275\240\336C\276\323s\247=\002^\036\276S\241$\276gz\356\275\332D\r\276\226j\345\273oK9=X\251Q\275\017\252K\276p\256\307=\270\341)=\322yK\276C\207>>M\007\225=:\017\002=\264>\037>\t\251\356\275\211^\000>\032\311\004=h\000\226=\221\360H>\352\313\367\275\250\n\006>EO\372\275\272\206;>\227\013`;\330\'3\276\330\366\203=\251G@\276\336\364?\276Q\261]<)5;>\225)\'\276V\371\272=y\006V\276\020\365$=q\2603\276\317R\215\274\226\026\253=\307\255\221\274\321\273<\276\3674M\276%\347+>\317\345\034\275?\3319\275w\327\022\276z\006\213=\212\r6<\2719f=\334\270\332=\247?\314\275^\324.\276\000\377J>48Q\276l\241\303\275\243\355\220:\t\356\032\276%\217@=\031\n\322\275\361\342\360\275\374\0343\275q\2247\275L\017\226=\221\036\233\275\302\235\214\275k\327!>]k\036\275O\267[>\033jQ>\216\353\005>\3165\303;\205\204\331=[\357_=\247\005\013>\262\340F\276\2162\376\275\360\304\021\274\363\017\235\275zH\024>\207x\263=\352\003S>U\247\006>\205\013\010>\361\245t=A\260\321\274\261zi=Fwh=d\3247\275V\371d\276\024\2759\276\367\331a=\036\204\016\276L\350Z\2760\353S\276\205\222\256\274V\3456\276\026\002\334\275\377\320Z><3F\275fhe\276\347\312\\>vO\210\275\347;\276=\302J7\276Qu\261\275M\200@>\356\366\227\274\300\343 >\\q(>\314\216\205\275\334Q|=\300\343Y\270Lp\241\275\277\2709\276\313=\022\276\355\025\345<?\233\230\275,*E\276\372\342c>\320\341\235<\326~+\276\357;b\276\255E\027\2766\026\265=\335\303\004=g\300W\276E$A\275\364\250\222=\337C=>\n\020\241\273o\3411\276\350\226o\275i\023\\=c`p=\3737\016>\000\357\253=7X\365\273\355{\007>\335\342\303\275f\214\032>!\275\357=\253L8>\2334\034\276\\3%<\275\350@\276\344^\262\275+&\340<\027F<>%\235\036<\365\252\375=\304e\227\275\311&/\276\267\224\375\272\027\325Y\276\332M`\276@\227\032\275z\"\203\275\032zd\276\304\360\354\275\273\362\225=\037PO\276\332\362\305\274\253?*\276\371\2163>\003>\r>\350/5>\377vz<\036\367<>\203W\247<\271\0019>\301\307V>\254LE>\016\335\351<\317\336\001>K\033\005\275\316\274\322=\266\017,>(\331\231\275\316\327c\276\216J$\276\355\224j\275{\253\334\275)\307\333=\023\236P\276\241\031\353\275\013\037\005>*\026b\274\304\363\355=\254\317\253=\355\260$\276iz\013\276\320\256\003\276\320\003C=\345\262Q=c\302H>\331\225\330=4\261\230=\n\264I\272\213q\002\276\236\361\232\275\327U\225\275\342\205\005=4\354^>%GI\275\020\333\037\275\335\220t\275\265\210I\276c^\'>\224iM>>\307\031>\276\225\350=\020\202\240:GcL>W\204>\276\003f\256\275Uj\225\275\315\365\226\274\217\315\036\275Zm\203\275$\227P>\275\026\200\275\365M\035>C\221\003\276<\315|=\206)\254:\307\313\005=\234\207\306\274{\353s=\267NN\276\207d\377=\226r\272=\005\366\006\276\025\331Y\276=\302\207=\264\344\301\274G\202\n>2\242R\276\242{\021\274JLH\276!\375\037>\020\356+=\'UH\276H\n{=B7(\275\372\270@>[m\256<\243\364\367<\217\224\302;\350\262\315\275*\327\023\276y\367P\276Z6 >\204[\034\276E\200\230=\371\210K\274\312\031a\276-j/>\021\200\017=\016\032\204=6\316\211=\247\203<\276\274\247\363<:N4\276\224/\027=\013v~\275\025\240\365\275\316\036\375\275V\253F\276s\311;\275\035\331\210=\023\306a>\034\016\244\273W\221\034>T\311\204;4g_>:\347\023\275\371yB\276\3341e>\022\t\350=\222\210E\276\2430\235=\2344\315\275\361\016\004\274tv\360=;3d\276\365\350\034\276\336z\253\274\'g_>|f\032=\306<\370\275\331\261a\274:\370\327\271\276\300\214\275\037\024\276;y\277\006<\355\330\267=\243\256\252=\214pW>6M\207=(\020\033=\303#X\276JQ\377\275\216\252\000=\373\231\033\274P\2043>$\201\314\275\025\000\314<\370\026;>_9\001\276\266t9\276\316bn=\326Z3>\246|\020\276\235\363A\275\346\235k=\362N\032>\202\030\035>T1\337\275\323y\002\275\235\322\231\274\376\2426>BI\332\275\363W_\276\177\177\014>X\343R<\277%G\275\330qZ>\035\260\031<\037\034P>\246\201a\275\364\276\014>ke\360=\007R$\276\032\307!>\334\235\261\275\230,\253=\215p\254\275\006J\r\276\233J@\276\037\3116\274K\030\231;\tlV>m6)\276S8\272<\005OC\2765;M<\203^\000=\227\272\n\276@7\033\276K\204C>\2475B\276\2408]>SCV=Q\336\300<|\221A=q\3350>\364\005B>#fd\276\374\223\032\274|\357\252\275y\343?>\004m\251<|\3113>y2\023\273\024\036\201=B\'\207\275T/R>e\257\377<[\232\264=\027Q\375\275c.A>\241\274\010\276\376&\013\276\'\242\207\275\212\265\253;\270 \036>sz\242<Vd->\036\354T>\026\376\253=y\032\375<\332\263N\276t\347\265=L3\t\276\321a\\>Jz\230=C5\367<\031}\003=\346\327\231\275\276&\026>Fv\251\275_\314\352=\261\345V<\341`\033\276\237oT\2767\375\240\275G\024^>z\303$>a\273\330<c\322\000\276c\361\246\272\300U\036\276\235b\005>\300\241-\276\331B\010\276\3328F\275\362\3031=j\271%>\332&\317\274\365j\377=\372h\007\276\342\241_>h[Z\276\250UO>mO\031\2763\310\363=\323\001\001>:D$>\200\324\n>\366\221\021\276\203e~=\007We\276\226\353\227\275a\204\201\275\004\322\023\275~\347\262\275\223\313\251\274\201\255\006\276\214_\032\276\030\315\014>:M\037>\243\345.=E@Q\276\201\177\005=Ff\376=_=E>\340:\314\275\312A@>\036\277\231=\214\263(>O\337F\276i\005\315=@Fc=\022\250\240=e\222a\276`q\331=j\261\257\275\335\017\002\276\2446\367\274\270\250;\276Y\345\336=g\245u\275\3677\033=j\372\270<a\344\021\275\242+!>tN`\275\\\237\267\275m\225\002\2753\323\366\275\250\224\265\275Q\271\351\274+\224d\275\321\317a=\014\221C>6S=\276\305\205u=\364\034\377\275\373\\\337\274\367\037\035>#\361=>\230 _\276d}!>\312\244\373\275\327eV>\2165&>RC\373\275\301\206\201\275\366B\001>\340\210;>\324\315%>E\255\033\276\233\250\260=\370\264\016\274\343\007\312<\210A6>x\277=\276\034_A>\252\251\233\275n\325 \276\361l\007\276\347*,\276\224O\010\275\227\2561>\363\013L\276\243\234\n\272\376\244\021\276\2745p\273\235f\360=G\302<>rr\261=U\330\032>gG\253\2750U^\274\370I\210=\275\030\337=\200?\272\274\213\231A>\005\300\010>\371OM>\016\321\017>r\020h\275r\005z<\245\024O>|2j\275+\323G\276\037\272\323<\336a\024=?#\274\274x\327V=;R\020\276\351\271\t\276\373\274\312\275,y\037\276\374\356\302= d%\276\372\2311>\212\220\306\275\203\010\321=\221\240H\276\037\370J=K\311\250\275\002\303\306\275\364\227\354\275\254\036\343=0DH>P\236\307<jl\274<u\270\001\275S\207\235\274\271| \276\"V\204\275Rb\351\275\r\332\313\275\244\277\014\2769\256\032\275\350$\370\274\362\323;\276\227P\023\276\357K#\2765\257\034\276\315\0034>\236\177\201=\213\344\037>\277\262x<\0214\371\275\351[w\275vv\326\2752\357\226;\007\2746\276\254O\353=\256\217\356\275\315\350\030>\236\352\217=_\364\014\276\2703W>\013i\">N\374\002\276\327d\350=\245Md\273\203\363\244\274.\270:\276\201j\034>=ye>\315\"_>\377\256k=3y\004=I\361\034=\340\001\263\275\320B\316\274xO\032\276\212\3523=\202\302\007\276\225\223W=\241\n\306=_\247\007=\225\233\300\274}\301\254=8\306b\276\275\2130\276{1\252=/\243\203=\026\347\013\275\205\\\334=X\366@>`Q\305=U\203C>/\030\021\276\0262X>\020\256U\276\272\276\245\275l} =\205/\035>\200\257\013>\216\021e=\\\207\031>\357\341\033>\225\201\234=\267\224\274\275F|Q=js\304\275\r{b=\233\274\314\275\r\273\271=[\250]=\331c\034\276\037\232\274\275\222\273\324=\220\032\242\275f\246V\276\372\303`\276\317\356\021\276\360\323\315=|3\027\276\004\251\021>\312\320i<\\\006\212=\337\271\005>H\031A\276Z\253\243;Ra\301\275!\304\354=\212#g\274\306\265W\276\260\222,\276\275\240\207=b\026K\276;\251y=\237\250j=Q\300\237\275R\244\304\273\303\005~\275YM\036>|+\235\275\232\024X\276?\304*\274\367,\350=\221N\037\276Q\005*>\332\231\226\275 \023\031>\304)\323=1\206T\276\017\276\207\274\0300S>\2406(>\227\301+>\013\367\006>Vv\001\275\255!\250=Y\177V\276q\024U>\226\014\344<\253\356\224\275\247\361\237\2750\337:\276r\300I\276\357\3422\275\321\244\">w+\215=Q\272\030>\\\337\263\275l\370b\276&\205\201\275n\376\325\274\377\350?\276\020l\202\275\270At\275\2104\r>\370]\364=\340\313\003\276Z4\013\276\005_\">\021\252\336;\024 \235=\317\247\023>\016\251\031\274\311\246\251\275\364\273H\276Kom\275\254\357\r=[\343,>\213\035\024>L\nS=n\342Y\276\263\330\017>\274\277a>\310\304\034>#\027H>\334\227\005>O\244\035>~\235R=:\023\253=eG\034\2763$\025>\027\333[>\251\262\335=\016\304$\276\341=9>>\037T>\025\3160\276\225\032\203=l\232I>\250zY\275\222\266\'>\224\2670>\247G2\276\254\377\037\276{\305g=\312*\344=\222\326\010>\306#8>\27001>sO\n\276\271\253o=\032\025Z\276\263\334J>$2i;\227g\232\2755\304\275<+\\\031>\004eJ\276-\305U>X\006\t\275\034Z0>a\364B>;\177\316\2758\302\307=p\332N>\010\3252>C\177\323\275u\327\t\276\250\004D\276|\335\031\274\247\224\261\275\t\213\'\275\202\207[>IwL\276\030S\215=\332\362\212=\263\032\346\275\000w\n<\016dT>F\240\322\275\026\216Y>\354\007\376=\206M\210<\177\367\217=\013\377\247=\265\221\005\276_\006G\276X)\230\275\205/o=\3721\254=\272\322\024\276\211\312\350<+\245\306\274\346\204\272\275;\230>=\022{<>y\241\007\276\021\375\233\274\255\302C\276\002*\265\275\370\3003\276_\244)\276M&\000>\252\343\203\274\"\r\031=\351\250!>\352\366*\276\032Ml\275\307*\r=\335\215E=,\263l\275\321\2253>\330\021x\275\230t\230=\345]9\276X\214\206\275\347\031\016>f\206\312\275\316\210J>\331\301\320\275\343E+>\270\333\355;\337a\244=]8\247<\204\372\234\275f\331\">\303\370+\2750m\230:f~B\276\035\233D\276\324\275/>>\000\030=\352G\036\276G\254a\276\221C\347=\307d[==\200%\276\2653\237=\360\242\005>/\002\221\275\r\335Z\2766\326\236=nZ@\276\221\225\304\274x\r\024\275wD\016>\305B\322<\236\0017>\004&U>\346{4=4$\032>\211\206c\276\3614\024\276\260\017C>\263\224\376=5\253A\275#\2768\276O\276S\2751\346b\2766\330\343\274\003\245O\276\030=\341=\212\204\025>\'\331\267=>-\303=\266\220F=\013ce>6q\\\276\321\214\201<\270RP\276h\242\215\275\016\0176\276Jy\277\275\371\270\214=\327c\320=\236a\034\275\377E\323=\220`\014\276s\332\356=9\260O\276ubR\276\240\247\350\275(\017\232\273q\246e\276z\311\202=\202\355\034\276J;C>\323+\030\276^N>>\0356\020>\341jY\276\0206\243=\373;\001>\207r\030\276>\334\017\276\375H5\276\234*\204\275\301)\311\275\265\010\020=\334\222`\276\321\020\t\276\221,\270<\371\331\227\274\236\310\353\275q\000\t\276\203\343\007\276\266j\266=\276:\230\275\274\274\024>\373\014b>\354q\231<\367\266M>\201\305\377=f~\224\274\242\301\016\276#H\304\274v\314\003\276WG\366\275\000\t\220=\370\t:\276\204\366\340= \2457>\245\2759>w\214\203\275\315\370Y>\257\005p\275\323\272\316;\300\257C\276\345\n\005=\275\240\202=@\2522\276\336,d>B\230\240=\374\356\020=\331x\t\276\365\262\251=\024\0145>\275\327X\276\344\304(>W\374\000\276\313\353\271\275\375\342\303\275Q\267\257=\024\336K\275?\017\323=\007Y\353\275F\"V>}(>>;\362\022=\032\022}\275\264\222\304<\335\360\362\275(b!\275\010o\215\275\277[b>\037\300\240\2756\372\364\275\nq\241\275\230\025Z\276\260\312-\276\030\340\373=\333\326\270\2743\2741;A\247*=\36092>\311\225\r=e\247V\276\355\027@\276\007\372\376\275D1\010\276E\347\033\276\3010\230=P6\357=\345\307\354\274\336\3748\276=\0379=<2U\276\027~\030>\367/;\276\323\342\004\276t\233/\276<\347@>\212\267\204\274\207I\257\271j-C>!\307\242\274\2317f\275v)Q>\323\241J=u\3413\276L=\026>Q\3225>y\200\n>h2\270=eY\242\275\353G\030>\254ac\2765V-\276*d\310=\201\220\373\2751re\276Jh\275\274\'-*>\343\336x\275B\"\007\276a\346h\275\347\303D\27590C\276wL\233\274\264MB\276\253\274\024\276\263x\026\276p\274\035\275\337\355\220\275;W\253=\225\360\361=\0359\235\275{\026\225\275J\370\016>\271\006\355=5F%>\372<\r\276f\271Z>\326] >O\037\t>\027\214b>\254\337\200\275moc>W\033S\2769\314?\276\240\223>=d&\301;i\221\020\276\243\212\356\275\004.\334\275+\203)\276\302\204\003\276\341\004\007\276w\035\365=e \211=w\306\002>^\030\360\275l\241><\254\210\t\276+QQ\2765\251M=\352\340G\275\005\323\341\275a\200\226=\352\257#>\302eP\276\335\021\261\275\023E\270\273 w]>\302\0365\276\200\'5\276\260\344\010>N\022d\275/\007\020\276\323-&\276\340\333c>\335r\034<B\373\362=\203\217\030\276[\3478<@\366{\275b\321\216\275\034[\025;\260\226\365\275\366\257\004\275IA\315==\'\024>\025.:\276\351\213z\274 m\230\271\267\261S>F\364\205;\304N\326=\027\265{<\336\023\316\274\007q\363\275\001\274\212=w\373\034>}\n2>\261\371\021\275mE(\276\024\'S=\275\261A\276\340c2>0\367\305=\242:[>8\007\037>6\373\242=\320t\255\275\231\016\027\276\301\263G>\320\334\r>l\035\n=\332\030\350\275KR\031\275\347\211\030\276\354\354O>\2101\r\276\016\216\302=\rLt\275C\316!>l\265\201=\303\316\232=\211\026\027>\351\2678\275\366k\257\275\270\001\027>\247\031a\2763\'\234=\207b7\276\033\371\314=\347h\244\275\014\265\020>\360\010\365=\316r\347\275\241\233\347=\3528\242;\251\314\231\275\237\214P>\365\270\006\275\033\341M>\023\326A\276\205\3476>\225}>\276YJ\206<5\344\372=F\266=\276\034\337R>\313\227\314=\200<&\276z\210\030>&\253\021>E\2340>\266g\331\275\037\230\343=\242\210A\275\240t\356\275j\245/\276\240\201\326=\256\377\372\273\216\202 =\357\206\306\274D\315\027>\177xF>\222\271\027\273\333\032?>\001>f=\300hK\276\306\337I>\340\264\030>|C\215\275&_\266\275\313c\251\274\301\034\246=\224>\227=_M(\276\350\225\031\275\336\0162>\273\243\013\276v\246\207\275j\352\304\275\221\3557\276\276\000\327\275\352\307\250\274|! >\003\251(>\361\301E\276\246-\036>-u\221\275\014\253\322=\262\361\357=\366\367\020\276\220\223a>*2\315<Gj\031\274s\230\225\275\2545 >h\373^>;\346\200;\227\025\031\275\322\220\033>}\0246\276\303D\350=\217}[>\362\263~\275y\272\031\276\255\343e>9U\231=\003\267\022\276&\337L>\2239\274=\254\210,\276rM\253=\341\006\351\275\035\205\224=8\242\355=!ke>@\232?>0\316Q>\256_\036>\225\034\276\275\275ZE>\346-\315\275\226hE>%\325\t>l\025\245=\0318M\276\275\332\244\275\264)0\276\272K(\272\323\367&\276h\216\004>\336\256\2268e*\377=k\357\004>,\210\205=o\253\215\274\032\225h=\233\246-\275\023\241\230\275\323\237B>p\0346\275\207\300<>l=\017\276\"\021\342=\253&c\276\360\220\376=\313\261\267\275$\315\222=\365\377H>+\205\352=m{9>\347\320\304\275\342\2555\276X\013c<E\262\337=\214\361\237=\236b\266\274\022\267><\023t\320\275\313\230\263\275:\273K>\262\330\007>\206\365\323\275\237\272\254\274\t\306\022>\334v\001>]\003\206<i\371\205:z\267\007:M_-\276\014\266\'\276\023\373L>C\233\263=PD\252=P\326\262=K\317\254\275\230\250K:\233{\332\275\201\364\005>\267\265B>$\242\271<\237rY=~T5\273\000\213l\275\224F\231=\004\234F>\210^\207<\234W\267=\225\371\023>\300\006\020\276{\317\323=d\343\351\274\206\302 >\2765E>\273g\207\275\322\357\022>\221\226\242=\250\376\205\275JK\337=\254\200\323\275\377jZ\276\035j\366= \024u=\333\361\r>H\237[=A \221;9\010[>^(B\276e\002\275=a\007P<\270\350,\273\006\320\346\275^\262\252=_p\371\275\312\341,\275)0\367\275\002\306C>C\351D>\345\000C>\3505\005\2768\036(>\307>J\276\356\n\302\275\255\277\350\275\205\037d\275\275y#\276`\022}=}B|\275aR\213=\207q\213<\264\2169>3\002\034>\002\203_=\007\363F\275\202U&\276\375u\030\276\267s2\276\3541V=[\032,>\313\306\033;!\205\222=\236\202b\2768\213\006\276o7\207\274\356t<>5\036A=\246\207G>\357/\366\275\253KX\274\225\255\020>A\305\266<\311\220\177=\244\335\355\275\212Y\006\276\212EX\2762;G>\367\\9>\225\352\037>\223)\036\275mL\372=k\330\246\275Z1%>\304\320\307=2\037\014>\377g$\276Uue\276\2121\233=I\264^\274\265i*>b\353\253=X\306b=\337\325/>\377\013\007>\264&\322=\254\245\375=<nH>x5\t>82\327=IP\227\275[S\275\274\300p\240\274x\200`\276{>\024>\277sM=\333@\212=w\327\350=\306z9\276@W\333\275t\230;\275\220\010\013=\026t\257=\312N\032=Lu4\275\341;\007\275\235\030\374\274\311h\276\275\025\302@=\337\004\233<\251\314~\274\267\331F>\226*\246=\271\035\361\275\0315%\276\342f\251=\200\331\370<\"\261b>s6\034\276\211\251\223\275\343cT>H\234\206\275a\204\202=\224F\036\276/\273V=\336\342I\276\321hE=\265\321S>\343\331F\276f\262^>\350\003\200\275;0V=\rf\277\275\205\021)=H.\366<\272U\377=\205\n-\276\356U+\276\225\341\333\275_9y\275\301v\n>\245\256\025\273\221\230?=\267\320C\275,\214`<lu\006>|\006\252;\244a\341=I\237z=\270q\'\275\257c6\276\220\326[>\0228\221\275QO\'=\032\225\373\275\362\277`>@Do\275\014\0133=2q\334\275\244\247%>\217\203\342= )D\274\301\014Z\276nR.\276$\004\013\276t4\312\275\270\354L\276\267V\034>x\315Z=Wt\214=\033\234i\275[\237\014>\263\016\177=\027\003\212\275\331\020*\275\342\263\032=L\371\027\276dOF<B\360\215\275\036A\034\276\367\250]\275\255\034\334=\307r<\276\036o\314<\340\021\035\276B\212\006>K\376I>1\270\347\275f</\276-\332\023\276^\224\303\275S\023\234\275\252\000\">@\347\000\276\200\210\262=\343\365\003\276\214I\200=\253-\235=\215\307\333\275 \242e\275f\221C>\241~\r\276G\231\255<-\246\303=\231\212\035>\333R\301=\274A\313=\355\0350>6\207=\275$\216\245=\264\356\337=d\371\033>\005%\333=)}\264=2\371u\275&l4=\\&h\275\331\302\263\275>\022;\276\005L\231\275\274PZ\276VK\323\275\231\363\021>1\373\327=:\260\365=\242I\246\274 \374\325\275\261\226*>9\206\344=\010\034(=N\232q\274\242\231\317=\006oM\276\327G\035\275\260-:<R\245\324\275*Z \276\030\3030>\257zJ;D\006\024\276\260I\210\275hp?=\027\250=>\036\022\001\276\364\307A\276s\213\250\275 \220\322\275\300\254\266=,\316\265\275\307\267\356=\351i\007<\250V\004\275;\260a=\177\317\216\275\266u\335\275\241F\241=C@\024\275P|&\276U\226\305\274\"\271\377=\303\323\365\275>[!>\372\324\373\275]\310\006\276\265\300\017\276\341\340\002\276*b\303\275\330Z\316=\2361p\275x@\230=\370\254t\275\364\277\025\276\006\373\026>2\t@>\265h)=LL\r>\374\352$=\332~!\276q.*\276\003\225W\276\260\312\205=\207r\224<\324\347\177<T\343\n>\2646\222;]\321<\275u\326\t> \310i=\333}Z>\004S\334\275\356\352\373\275|\007F\276`\177\255=U.b=X\321\350\275\\\004\022>\232\204V>\214\3111=v\343L\276sW&\275\025\357\007\276(\351\033\276\271\007X\276\267k\322=fZ\003\276$\000\314\275B\334\210=\353g\250\275\230\320\031> \177\025>\232Q>\274\372\351X\276\020#\t> \n=>\255%\327\274v\240Y\276\313\343\325\273\3755\222\274k@F>\203\0170\276R7G\276\314\001\004\276\255\314)>\302\313,>\304j\017\276/\252+>p\367\247=\373w\216=\3463\r=\261B\333<-4R>\312\262\374\275z]@>\'Sa>\031\332e\276g\3319\275\354?R\276\033\027\026\276\326\0307\276^\205\320=@\264\354=vP>\276\326\261:\276\006!K\275\004\307\304\275\325>\225=_\205\016\276$\333\231\275\35663>\303do=\304X\301=k\327\001\276\204\037B\276\372\264D\276H,\346\274D%=>\253\014?>\320\271O<\271\010E\276\001\267\335\273kj\203<O\330==\003a\030\276\304\256\r\276n\237-=|\346\273\275(nW>\200\351I>\355U6\276*\226`>\336\202\215=\350H\030\274\362\367\374\275AQ\373=\r\177\354=jV\363\274x*\003\276\343\202M>J\006\002\275\226RD\276B]\023>-$+\275^\034\000\276<\336\333\275\006#==\2106@>\003\226=>0W\373\275\205<=>]\340\320\275\264\273e>\307o >\262\214\034\275\254\233R\276\376\027\016=\210\035\002>[\r\377\275\320\373\317=\010\274P=-\215b\275aX\007\276\304=\326\275\315X\355=V\311\315\275L^\013>\234\230\330;\260\322[>D\2307\276^e,\276\324\035\220\272\3356?>\027\031\017\276\356\217(\276\311\3219\276\330>\224=$\256\004>\257\233[=_:\234\275\340\334U<X\222T\275\243\305V\276\204\303->3\006\257\274K\2263\2750\366B>\301\363-\276\315E\262=\332B\361= \".\276\250\335\n>\326r\010\276\023\350\354\274\326C\021\2754\003\213\275\205\037A>\\q\260=@\317{\275H\306\010>\211!c\276\342x\202=~\221#>\253\356\265\275r\231\002>\362\331\325=\213\247\344\275D\237\350\275#Tm<H_\310<\r\361\224\275\201K\304\275sSZ\275\335\315\216\274O\025\025\276\030\023\033\276\266\366G>6#\216=]K\200\275\257\021}\275wn-\276\224<\315<\303\205^\276\244\212A\275TW\n\276\334\313R\276<Hc\275v\205\005\276\037\325J\276\014\2320> \272\214\275N\260}\275\353\374/>w\024\306\275q\242F\276\310\341(\276\271\314\310\274\275\322\'>\224\274\000>0\243\323=h\324N>*1\227<^X\016\276\207T\236\275\340\261L=}\275\245=\245\235Q\276A\273\324\275\0058\023=Jb;>M\374\'\276\343\212\333\275W\354K\276\003\233\346=\220\237[\276\231\006\013\275Z\247]\2769x\307<\255\201J\276;qJ>^\'\204\275\337/0\275]\357\315=\251l\361\275\363\215\003>\205i\230=\373\222==\311\304[>\"i\344=~l-<\234\370c>XL$\276\340\221a\275\310fx\274\222V\024;\274\266\026>|\354R\276\024A\216=\002VJ\274G\010\232<\0070\250==\325\027\276\241|\035\276\005=/>Y\307\021=Z\257\254\274;\304\003\276\256CB>,\200\374\274\007\350\274=O\t\264\275\364\033M\275\022\026h=\342K\027>\031\354\271\275\234\333\354=\017\321B\274\216`k\275\215\0315>\355\025[>\353\372\021=\247r\336\275\203\322\271\275$\371U>@\371c<}\265O\276\365\226U>Dz1\275P\335>\276K~\036\276\177\276\'>w\2542>-\007\254\274\242\216!>!GD\276\346\n-\276{)\322\274\364\262\235=\330@<>:*\035\276\350`\030\276\354\361a>\244\336>>\230T\272\272\363A\016=\027\004Y\276\204\237\017<K\270\330\275SZ5\276C\037[\275\013\322h\274\205{c>\371\355\303\275\371\034:\276\336\016\235:\007\274\345=\013\026B\276\330\363\004\276\363+N\274\212\020\241\275t\177-;\213\206\375;\202\262\246\275U\346\370=P\244r\275\"\270->\335\3219>\347\353W\274\323\225\005\275FO,\276\177\tc>0\006\000\276\236w\244\275j\3156\276\025\254{\275\217\214\025>\376\2070>\324&$\276\206\343\234=\024m^\276L\003\025\276\347{\332<\260D\302\2745\377\002>\347\236-\276\250\267c>\377+F\276`\226\366\275\213\203\032\276W\222\347\275\016\2404<\261-\211=\3618+>B4N>\311\'F>\305=\243=\365ZX=!\256\033\276\317\305\031> 5\025\275\010\215\371\275N\203\375\275\'+P\276\2235?>Cf\310=;\333\211=\017\335P>\r\364H\276@*\025>Vm,\276\240\355\000>\234>=<\320K\370\275\004\326R\276X\315\250\275C0 <O\316\223=|\261\010=\260\013\021\275\272\243\014>w\314,\276\245\241*>\2741\016\274\347Y\273=_\324\"<>\223m=\254\364 >}Ab=F\267\031<_\216\207=\3240L>\003A\361=\275H\306<\352V\034\276\301X[\274\266@\003=\017\3620\275\271G\000>\247\227\304\275\354*\257=\241\274\032\276\352t\235<V~\003=(\363\014>\251\177\237\275\341@\253=\216\006[>\335\016\233\275\264\026T\276\376\327D=\350\344Y>\326^\363\275\327\322#\276\336K\004\276\351\224Z>\234\332\017\276\257[\360=\023\0204\276\212\025\336\275\315\241\326\275L4M<T\206\363\275\326\315 \276\267\316\377=b\007\000>Q\275\036<\221\363\037\276\210\346W>3cF>S\336b>\203V_>u\350>\276B\036\370<\316\256\r\276\221\225S=\205\225)\276\233%h\274M\022V>O\321\025\276\017\027\201\275\021\2647=e\224\222=\222\245\231\275\246\203\243\275\016\270\024\276#N\007\276\207\020\216\275\325eS\276z\274\226=\241\205\036\276\224\211B>\217ZQ<\256\240\033\276G\250\277:\351\013@\276\271\245\023\276q\213Z=\034\324\323=L?Y=\251y\327=\203(\274<&x\">l\243\347=\221\226:>YA\212=!\246F>\324\270\267\273\227\022F>\322\320\225<\362@\344<\231\325}\274c\314/>\307\363S\276\3730\363=\366\274~\2745\216c\276\333\n\001\276\357)\2259\213\220\360\2757\250I\275\246\020$\276`\342e>\261\224 >\366)$\276\217UD\276\202\370\250=T\324N>\244pA>\354\343_>\001\244\241\275H\016\026\276\231D\217=;\244\250\275\243\3348>\252\n\026=8.\256=\233\336\026>2g\035\276\223\355\233=K\225Y>2\003\t>\264C\311<\277o_\276\'.L>P\324Y\275\322\026\337<\332\207\250=\253K\242\275\330PG\275\032\t6>\372]=\276\350s\310<\026\356\260\275P\255\277=\204\311\211\275\230q\037>pK\367\275\235_\n\273 \263]\276$\363\207\275SeX\276B\230\036>\374M@\275\006V[\276\002\2512<\214j\022>?\254^>\271\010\301\275\205\217q<\207\350+>WWt\275\310\343\256;\336C\315\275h\232\353=v\024\013\276\233 \233=@\301\001\275\307\241.=\005\344\373\275[OT\276\243;_>\220\311\020>\311e\006\276\002`\367\275\274\3149>wo.>431\275\345\021\323=.,\007=\332\340\360=\370\366 >\360eT\276\206\0379>\375\335\331=.\261\252\275\255\036X\276\0102\010=\352\322\014>\333\301\340\275&\2456\276( b\276\332Z\270\275\034\2041>\245\005;\276\025\004:>\336I9\276\325\327\271=\241\365\335;\r\273\037\276R\273c>\260\2352\276Mc\253<\027\037!\276n\277\267\273b\246\014\275K\231\006=#\037?\276\376\204;\276\224&\226= Y\377<\005\314Q>\r\235\323=\373\027\246\274>E\314=\254\3749\276\335\022/\276\300\244H\276\376\241Q>\034&\346\274\214\310\021\275\361\243\n\276H\350[=qL*>\315Q\201\275JeD>{\035 >!ad>\035\255->J\367\030>\214\305:\276\'aT\275\337\272S>\337S\244\275\227\206\317\275_e\337\275\277e\025> ^\231\274\240\334@>\315\007\317=Dp@\276`\360\261\275 \362\374=\254>+\276\272\207\201=\377\337?>\375\326\025\275\014\263s\274-|\271=`\377\332;\0078G\276\310\007\001\276\271\305\'\276\204=^\274@\0050=\2224\035>\322\311$\275X\352\246=D\037\000>\177Ni\275e\t8>\360\031D\275&\000<\276\213\022\247;\274\324k\275jZ\363\274\\\007%\275\301\277\026\276\n\271\221=\r\304C\276K{\000>\211\301\031>\363Bc>5\343\031\275\330\334\247\274\340b\251=w\355\301=7\023\354<B\307M\276_\301\304;\016\356#>\341\266\321=]n\035>\212=\307=5\021\220;\r\027`>\363h\306\274K\236\213=\270\241\007\2768\002\274=\316\203K\274\335\265A\276\301\033\244\275-\232n\275I\222>>\235\270->o\261\342\274zx$>zg\312=\"\305\310\275\203\007w\2745\022\020>;\013\211<Y\245B\276\343\374\t>\033\006\030\276=;\324\274*\255,\276b\310\234=N@[>\"\001\244\274\320x\250\275\335\002\201=\212o`>\334B\212\274\016\205\001\276\032v\360\275\341\222I\276\253J\014\2752\311\n\274L\304\256\275\344=\303=[\335\334\275\306\314\036\276\223\000I\274\333\335\016\276D\017\224=\363\315S\276\343\226\220<XlW\2760\372\264\275\220&\224\275\r\240\257=\235\tY\276\236Ka\276\235\261\002\276Lsy=\005H\005\276\360\340\002<\266\023*\276\241\353d>\206CO\276\225\252\013>\317\371\004\276\211\220`\276\203>-\275\312\311\007\273\004X)\276P\312M\276\341\232\337\275rw\203=\310\220\227\275Yg\215\275V\306`>\236\331\370<#\240\257\275\234%M=\3778%>\375Y\221\275\271\244\017\276y\354U>\344\363,>\356o\"\276\025oZ\276v\321R<H^J>\017\274\311=\000\000F>G\213T=\246\260#\275\245\266\265=\320\261\377=}\275U=\260\363I>Z\230\250\271\262l\034\276\246\207\366\275\313\177`\276\227\265#\276\331\304\307\274\007\235\242\273k\343\362=k\235\006\276\213\254\367\275\326\211U>^49>\363\250\275\275\3513\017>\000\205\'\276r\2513>\314\306\311\275\023\362\253\273M0\264\275\247;\020>\217\354[=\014\271\215\274.\221\241<\334Z1\276\325\323)\276\214c\'\276\345\0169>\276N,\276c\2343>f\\\024>-<\320\275\000\006t\275\337\033D>\177r\251=5\n\t>:\017\203\275\255\203j<\024\316\275\275\337\3034\275\025\242\021>]\020\034=\301m\004>\177l`>iH\230=Q+e\276\025\370,>~\371\001;\323\201\265\275\306\333\217=\\\216\361\274{\242\363=\242\376%\276\315k\010>`; \276\357\222\017\276\002\247\026\275\3552\010<\304\220E\276\372\3624>\017\321.\276884>\215\324D>F\276\312\275(4L\276\303\210\312\275(-c\275\240\236\025=\346\374\360\275\271kT\275\205\236b>\002\016H\275B\204F>=VN>\346\017\275\275A\341\027<\006e\252\275\\b\212\275\034\256\215=!W\277=\364\327\204\275M\203\274\275\357\370\236\275\361fU>s`@>\346_i<\260\260\252\275\203O\275=\236\017\312=\261\2141>\033r\037=\374H-\276\246\021\"\276Bz5\276OY\231\274\231\215\325\275m\013_\276\217\3179\276\220\313\273\274\301Q*\276\210\356\272=\242F\312\275\202\357M>\250\004Q\276I\211\031\276\367\231\022\276\021\010%>[\332A>\356\261M\276\207\332\231\275WJ\033>\246l/=\354\307~\275\267ZD>\356\017\\:\001\0036>\326CH\276\325\345\211=\302TV<\354\301\n>\036!M\273&~\252\275\262\203[>Q\276b\275\333\2457>\324<Q>\273O^=\360\3740>\342:#>g\350\236;T\357}\275\007\245\016>\233d\022\276#w\361\275\3130X>C\367-\275IE\313\275\027l\361\275\013W\311\275U17>\\|<\276{qX\276\313\025\246\275\342\206\030>A\235L=\001+\260\275\022q\202=\007\240\031>\232\033L\276\302Ob\276\2243;>\357\357>\276\327\323\355={\324?\276\025\355\'\276\207~U>\370f\005\276\037\325d\276\\\304\014>?\371\365=J^\341\275\0010\031>\023\354C\27458\304\275\365\203\000>4]\225<\306\267#=\251Na>\01434>\211\302w\274\335\250\347\275,\021\373\270\221e\245\275\010\323\273=-\233>>\202EW>{\231\205=E\324N\276\324\260q=lR >[\337\376\275\265\027\0309\232\022\027=\326\306\266\275?[\037\274\322\272\354=\241\014\026;\345\212\241\274^k\230=\"\330\315=\260\3732\276>\353[>}.7\2767\177\335;\241\275\311=\226\321s\275\303\353*\276CN\036>\004J\032>\0303\344=\355V\254<\313\256\205\275D8\321\275s\205^\2760\332\257\275h\226\'>\032\017\200\275\270\236\323\274\211\254~\274$\224b\275\305\006\307\275\227 \277=\231\351\t\276D\337\375\275\310UD\276>\037\223\275\2652\266=ld\305\275\260\363\333\275\013\353d<W\225\213\275h\324d>\032\367\310\274Z@\357\275\216w\350\275\250\0307=D\002*>\246\273\000>\027r\264\275\207=\n\276\370\245\031\276\234\030J>\333C1\276\3730\365=&M\274=\343\215\263<\014\0330\275\311T\001>\243\341;>\006\223V>$R\325\2756S^>G\002N\276@\003\346=\023\373b>m\3729\276inW\273\360\346O\276\3731P\276\367\220\211=\226\300\311=A\272Z\276\257=\206=#\322]>\375\204+\276\000EL>6\210\216\274\202\031+=L\263\372=\271\254I=\335\220\354=\257\0358>\034\371S=)\tV>\374!\013\276\374\005\216<\252\263\001>x\225\036\276\301\007\202\274A\004\002;\251|\010\276\016]\225\275\345}\014=\232r\232=\255R:\276\260\243\347=\312\344\264=\317\017\273=\224`\377;j\231;>\260\340\215\275\205\353N>\247\037+\276\323!\375=C\214\342\274\242\3567=\320\202\016>z\217X\273\257\272\204=K\224\233<\242\250\003\276\026\340\025\275\025\r#\276F\214/\274\342\006\252\275\004\321d\275\310=L>B$\\>|\347\340\275YAJ\276\013\225\017<a\021\207<\001\305\022>G\030\340\274\t\357\335\2743}\235=m[(\276z\317[>/3*>\224\310\020>\353.\347=\320\2353<{\357J\274\3566]\276\300\316\263=\210y\225\275\306\240e\276\316\313\213\275Y^`\275\177\375D\275\016\213\222\274k\025J\2760(\207;\350[\354<KXK\274\264dY=\277\021\r\276z\037\007>!\254Y\276\316\314H>\263\0023\276\334\200\364=\r\272\375\275\344n*\276\253g\016\276\264l\020>z\206\366=\354\313\024>$\n\273\275\263\244\005>\207\261D\276[\310\240\275\030\315\276\275\361BF\276\302QB>\335u\001\274\027\335&>\223F\260\274\263R=<D-Z>\321i\372=\315\307.>\266\001\231=QW\013>\302\316G>\tg\n>%]\243\275\351\371\277\275\335\326:\276j\220G>\333\366\271\275T\230\017>\010?-\276\0024\320\275\271\351b\276,\205\037>\233\271\001>f\361O\2761~B>\231\313\r\276g\355\"\276s}(>\216\236\242\275\316\312\202\275\365\273\261=\336\347\251\275T\232.\276XAF\276\250\311\207\275\247\017T>\316/\023\276\272\313\020=%\333\254=$\204_>\311!z\275\261\222G=\n=\265=\357\257\304\2757\"F=\025\261\250\275\331\252\000>\231l\255\274\310\254\021>\3179\207\275u\036\271=\013F_\276Y\366\026>K\2725>*\3463\276>\262n\275v\n\353\275\337B\362=\233\033\341\274\000-\002\275^m\205\275\010\353\364\275\323\031o<D\233\244\275\n\347Y>k\266K>\363\361\232\275K\3521>\213\003\005=I\222\211\275\307\007\323=\261\325\316=\032\331\221=\027\244\232=\253\375\364\275S=^>%\267\245\275nX\001=(\346\357=\256t7>1C\032\276i\323\032>\321\356\360\275\346;]\276\206\353\253=@\351\261=\316\267\240\275-J\215=\005$\376\275\340\333\275\275K\337\006<&\\L\276\024g5>7\274\221\275\277s\270=\206j\311\275\252\355%\276\262\254\316\275\235\214\t\276[\020&\276\372\r\250\275\357\316^>\206\240\006=uK\347=V\2731>\234<\206;F\235\\=\325R\271\274\177\036\016\276\304\300k=\370\252(\276\252\205\224\2747u\221=\007\313\017>\307D\006\276\363s2>\2646\277\275\021j0\276\tV\022>\310\305\017>[\234\224\275\205\360\\>\310\003S\276Q\224\006\276*\311\033=\261\337\244=\202\017\213<\313\352<=X-@\276E\275\\\276:\341\277;=3s=:\220&>\264\025\034>a@Z\2764\302\263<X7\332=\024\241^<*oc<!\035\365\275\030\240e>\372\036\355\275\333.:>\314\235$\2756\t\321;\303(O=\013}?\276$\247\220\274\273\207\345=\303X\035\276&\332*\275Z4\272<\243m\010=<{\026=\022:\034\276k\345\360\275IfN>\016\305b>+\3256\276\037\"\006=oIR>X-\334=\3470N\275\277)\354<%q\202\2724F\031=\260\016\272=\205\342\022\276\216\223C\274\303jJ\276{\313!>7e\323\275\220\t\311\275\234\375\037\276\233\207\000>z..\276\311nE\276`\345T\276g\027\027>\251\234->T(\210<\0376d\276\000\341\246=\002\034\264<\236r\240\275\254DQ\276\022\312g=\325\323\252=6\364H>\263\207#>g\336X>\254\243\304\275\2373\366<o\2627\275\343\254\\>Cs\325=ud\221\274\017\273\355\275\376(\276\275\236 \t\276zh\314=I\307\036>\364\215\210\275\264m\224\275\265l\354=\365\301N>\274\006C>\343\367\273\275\007\324K>b\343\314\274MnI\276\301\261\200\274$\']>`\346\026\276-\207\377=8\242U\276\323\032A>\375\246\221\274X4Q>PM`\276\315 \r\276!n\260=\266\305\376\275\255\234>>\274U\263\275%\222B\276\232\220\254;_\331\307\275\027\356V\276R\030$>cui;\3676\370<\352\331\332=\253\203d=\204r\360=\037\031\034\276\251.S>\227\365\260\275%\332J\276\246ZS>\0036\002>\2373\302=\2472\217\275\0211\330=\347\206\320\275\207\374W>\017\036\226\275\341\221O>?YK>N|Y\275\320O\360\275Ik\035\275\254\223J>\253$\364=\272\037\006>\t\320F\275\352\"V;\226\343\026=Gpd\276D\343\031\276\314\354\273=2\\\222\275\331\353/=\334\033\350\273\204*\212<\304&!\275\377\2067\276\350mo\275i8\343=N\356\270=\303V\033>x\030e\275Z\230\234\274\273T\311=p\225-\276/!\231=c\306,=)\325\345=\360S\036>\034\373\013\276\204\300\245\275\270\370\t>]\357\033\276\204\301\375\275\366\211\006\276\2636\026\275:E<\275S\343D>\341J\337\275\363\007\317<`\373\006>\000\313\354\275k\205\321\275\234\035X>\261\340\021\276UC,>\236\205\016\2761Gc\276x\335\353=\317\327\357=\007\201G=Yn=>F\350\r\276\003\337\034\276k\375\256=#qx<\357\310u=\371\372\324\275\271.\315\275<\256\313=a\352\032\276\217\232\323<.&\335=:RB>\261N\327\275\226_K>b\262N\276\327\3045>\026\334\241=l\227\221<\220\031Q=\325\344J\276,<-\276\253\331\036>v\370\t\276\246*^>+\036\305<\222`\035\274\267\257W\276u\345\251\274\335\376X\274\246!\252=\273\213\244=\313\360\031>\002\205\177\275\354\021\013\276\232\264M\276\356#\'\276\001c\204=\253\r8\274vZe\275\020\232E\276\340\375\355\275\005.\310\275F\223\371<w\207\205=\346\260\362=<\331,>\200\177\037\276\024\360E\276\276\344+\275DCe>\371pZ>+\372\004>\3012<\276\237d>\276\227\201:\276\330\313\321\274\025\216w;)\355\302\275\304\2306\276\274\314\034>F\247\264<\376\236\223<\030\025=\276\305\322\027>\031V\">\221|\031\276\305\317S<\332F\202;?d\017\276\001f\361\275\353R\000\276\026*\255\274\"5R>\337\307\177=\363\237\255=\2406\346=\016%:>\020\267^=\354\225\006>M\354P\276\300vK>G\336\377\275\333\227\016=G\237_>M\324A\276\033\203!>\376\225R>0\324B\2760\266\233\275\020\033y\274\036:\260=PR2\275\330/[\276\3738e>%\212\331\275\267\306E\276\342\367\353=,H&\276R\347->+^\t\275O>\301=\253D\234=\232 \201=\225\207P\276\"\267\034\276\001\336X>=\371\003=,h\035>\034,\024>\264\354Y\276\210\2210\276}E\025\276\210\037\007>\311C\314\275I\2462\275\310\304\203=\327\006[\275\005\276\026\276s\227\002>\263\027\220=\214\025\320\275\250\024g=\255\n\033\276\266Q\316=\326\366\266\275s\320n=\263\212\244\275\362\301\352=\016\241a\276RM\222=\016\264\353\275e\254b\276B\366H\275;\027+\276_\374L\276\352\313\t\276\344\003\'\276\357\023\370=\t\330\370=\033A\030> (\320=\210\3343>\343\016D=b\371^\275\t\231)\276^\244\313=%\260\353<\202\013\036>\315f\036>,\236J> \024\025>\031\224\033>|g\016>\224\255\351\273w>F\276\357DZ>\361}\250\273\310t\242=0\306F>nC\377\275\253\360\016\275\207<\323=\017\225\366<B\335\006>\357\331,>\230\256_\275/a\352\275]%\364\275wr:=+\243\370\275G\253\270\275W~\215=DQ\305\274<F\201\274\274\201D>\003xI\276r\\!\275h\3304>\372w\016\275\217\023\301\274\014\201\351\275\333\374&\275\372\034F>Jp\324=\322\2442>\327\313\232<)\266\273<R\3037>\216\371Z\276t<q\275\331\223/\276R\247U\27449|=\2050\220\275+\226D>\220\016^=T\377\350=ZhT\276h\014d\275\224\037U=\021:\323\275\306\005\347\275o\0168\275\373\217$<4\274_\275e07>\000\336P=r\014b\274l\365\\\276-x|<\031\022\356\275\262\223\004\275\222lv=X\310[\276H\3337\276\206\234B>\220\030,>\266\"\214=\310s\266\275\232\357G>@r\325=\327\032K\275\002\237O=\216<\277\275\321\305>>\263\265\021\276\327\273\370\275!g\203=\333\264\r>x\200\253=\205\353T\276\002\177\224\275\243\350Z\275\217\225\030>\327\325a> s\207=\346\202V\2764c\035\276\177\242R>/$\003>\247%\005>}\320\360=N\352\267\274\267_\331=\277\321Z\276\311T]\275\272\245\247\274Se\314="
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
