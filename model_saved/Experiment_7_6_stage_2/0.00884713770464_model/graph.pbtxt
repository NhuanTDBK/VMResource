node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        tensor_content: "N\364\205\275\361w\315=\2668\025\276$\206\232\275]\334\"\275\026N\361=:\002\317\275n\370\362=\352\3205\275}v\213\275\255\207\037>F I=\200c\007\276\313\266\242\275G\016\177\275\372\t\203\275}/\240=+Y\301\275c\241\t\276(\032\026\276\300\213\323\275\240~\364\275e\267c\275\272\246\313=\210\254\261\273\031\267\021=\2046\001\276k\236\364<\335x\030>\316k\3519zb\321=\314\224\202=o\030\325\275O\220\256\275\266\255\374=u\303\333<v\221\322\275>\252\347=\201\204\206=~?:=4\310\031>\027~\003<VS\230<\376\336/\275q\226\351=<\277\003>\035\233\003=\246\022\254<\305\246c\275\367\242\333\275\231\331\343=\356;\215\274\267\267a=\235p^\275\276\254\006>\244\360\357=0\250&\275\233u\246=l\241\013\276&m\001>\007\225\037>O\275\250=\323\2556=\333cd=\202\207\267\275\201v\230\275\223\213\313\2743\353\371=\304@\354=dBI\275\213\227\031\275X\273\224=e\370\272<R\256\220:\345\252\027\276b-\026\276~\345\225=&\224\014=ca\255=^\334q;\247F\032\276c\177\256\275\317W\235=\005\367\001>\234\\\013>-\215\361\275S\260\265\275A\332\376\274\366#\247\275.\231\345\274\3051\273==k\000\276\234\362\262=\242g\030\275>\026\002\275Ty\217=\021\344O\275\006\236\332\275YD\235<ha\232<\350\243\306\275\016}\275=B\355\t>\24309\275\tN\034\276\355\374R=!%\263\274\251\356\023>Y\340^\274\324\303\250\275\321\216\006=\205@\320<\337\327\233\275\240g\325\275<QO=\362\225\006\273HJ\247\275\360G\003=\252K\263\274\334\320\004>6@\317<o-C\275\216\300\205=}^%<\330\354\374\275P\315\025=\024\234\204=_\303\317\275:\342\030\274\020\337\240=\275l\276\273$T\016=\255T\232\275A\263\254=F\226\210\275o\341\213=j\313C=\346K\347\275\003\331):\211k\013\275j\t\t\276J\010\246\275\235\210\362=2\366p\275tF\274=\331\257q\275uk\016\275\356\013\n\276\246\023\034\276\271=\006>JA\232<P\203j=\350\345\304=\2402\005>\201\270\246\275\226V\335\275\354\221\022\276n\t\001>aE\035\276\005+\014\275D\267\245\275u\321\301=\227\236\\=\341\026\302\275\364\203\307\275\353\314d\272k\246\344<\326\000\236=\255\342\362=7\002>\275\204*\212=\017\2142\275\276w\252=N?\240\275\013F\224\275\241v\023>\3517\263=\260\262r=9EG=\306\'\n=\331C\365\275\362\024\001>?(r=\242\177\237\275\033B0\275\243B\376=\004\233y=\003\246\373\274\247w\353\272\177\234\254\275\247\360\337<\\\205\245=\357\371\216\275\336.\324<W\346b=W\035\327=;\227\376=;\017\347\275\353\211\026>\'sK=3\266\030>2\307\267\274-\220w\275\300g\225\275f6\024>\276\013\321=\354\257\216\274\357)\227\275\274\216y=\212\305\341\275eG\343\275fz\316=\272l[\275\200.\235=\203\344\252\275J\032\236\274\327\r\220=\324C$=a\025\364=C\337\376=\247\321\000\276\200\235\336=\245\3501=\004\2236\275G5\005\276\300\304\303=\374\221\320\275\261\262\027=9N\"=\205-\335=\251^\013>\036\271\370=B\251\002<\00159\275\356\022\005\275\323(\265<\303<\342=\202\312\204=\373i\341=&\273\321=\257\235\027>\030A\234\274\r\240\002\276\344\230\362\275\254{\351\274O\302\215\275\nq\004>\222\345\370\275K)\'<\222/@<\316v\243=\201\030\324\273\264ZF\275\247_\250\275\rM\262<\"\3630\275\367\266\355;U\331\351\274\204\2407\275B\035\200<\226]j\275\024#\r\276mO\237\275\315\226G<\304-\337=\345\024\017\275\305\267\300\275\204\222\\\275!\010\274\275h\023\303\275\035\247\330\275\032X\232\275\377\225\027\276\321\214\362=\365\245?\274HJ\004=0]\021>$K\024>,\200\237\275}\240\201\275\273MA\275Y\362\312\275\332\234!\275\331 \205<d\252\300<\311\306\262\275D\020\336<~\203D\275u\332\022\276\306\231\325=\315~\254=e\353\341=\0239\007>f\347\224\273\255\260\017>\352\235\235\275\272_p\275\016n\254\2752\304s\275\306r4\275\036C\031=\302\027\361\2756\032\217\275\016\310\007=!Y\177=U\222\266<\362\n\316\275\236\021\006>\326l\363\274\326\202\303=%\236\253=v\021\370=lT\024>\353\363\353=d\376\025\276N\370\313\275\347\327\\<\322=\242\275\224\242g=\304\314\237=P\024\'\274C\336\324\275\317A\262=\006\n\021\276\ni\337\275us\325<k\331\243\275\310$\340=\t!\200\275[<\207=1\"\220=\350\210\225\273>\247\032>{\245\r>\031\014\357<v5\003\276\354\246h\275\343\230\023>^\263\305\275lh\020<\245%\204\275\276\222\036\2769\271\007\274\3735\243\274\037 \037\273\376D\377=Mn\306\275\364X\340<\306\273W<\370\225\037\276B\335v\274\245$\357=\352\304\243\275\261Y\036\274Y\256\007=\373\200\207\275e\323\257=La\004<\347\234\007<\311\376\223\275U\321\221=\002F\300=\000\241\377\275\205$N\275\002;\021\276\265\223\345\275\320\211\370\275\344\013\362\274(\037\235\275\254\233\016>x\007t=\221\301\367<k\006\002\276\036\235\022\273\007\201\364\274\tu\272\275,\023\037>\251\227+=\314\242\r\276\250\223\207<Yh\034=c@\t\2766Z\037\276\226k\253\275\027u\216\275\250\211\224<\320e\265\275\277D\314=4_\341\274\2273\\=%\220\033>f~\013=\034\345\260\275f\363`\275X\231\010>\027[e<\022\237\220\275:\362\032\276f\301\332=\322\t\250\274[\277\374=\217\342\247\275F7\222=\025\264\177<sF(=\261\311\027=\250\374@=;x\347=\315`\021>qQ\206\275b\0231\275%I\357\275\245\035\004>\203\257\215\275\302B\214=q\377\002=\256\354d=0\305\373\275\333_\352=\317\177\241\274a:\260\275\275\207\017\276\242\234\036\275\024\247\323=\363q\213={\213\375=\275e\267\275f\027\335\275ET\357\275\0319\362<H-m\275\203\365o\273\230\3321\273k\340\243\274\177\305\302\275cR\350\274[\371\234=)\277\374=6.k\275\035\324\336\275\3745\005\276\023\265V=n\010P:\322\330\352\274\022a\247\274G\216\036\276\316\376\242<p\211\017\275P\371!;)\217\307\275=\037\\\274\314\3134\274\304\007\031\276\264\344\031\276\002o\203\275\357\023\017>\236~:\275)\366b=\225\360\035\276|\r\237=\t8\210\274qQ\235\2752\330\235;\301E\021>Y\227\327\273B6\326=R\235\244=\306O\014\276w\201\303\275\216I\275=\345\007\026>\236\203F=8\030!=\246\226#\275\305\355\230\2752\363\271\275\\D\372\275s\010\261\275\023e\245= _\351\275\245<\006\275\030\216\264=\300\377\217=\235\365\275\275\213L\022>\001f\317=\203\252\341\275|\177\007\2747]\013\276>\360\317\274\340\341\t>\\\030\202\275!\313\342<\\\334t\275\243<\323\275X\233\004\276\2016\027<\226\017\020>|\345\022>\237-\244=w4-\275\320\327\017\276\005\000E=\203}\374\275\275\275\t>\255$\362\274\025\325\274\275\215$\303<\037\277\016>\341\232\334\275(\227\272<\225\244\257\275\0329\343=\014\260\213\275\266i)\275\"\324\026>\312\000\021\276\t\3305\274\310\315R\275\317\241\230\2747\'\362\275\362\275\030<E\031\346=\007\255\017\275~\307\027\275\26196=`W\014\276i}i\275\231K\310=\320\320\036\276\322\004c\275CJ\275<\322-\005>\342\307\311=u$\224=\213\202\227<\210\256\357=\234X\024>\246\177\333\274X2\004\275>\270\350<\375\275\033>\330\\\026\276\206\275\344=\000\227\001>\r\277\023=\350o\357\275tT\372\275l\320\006>\220\360\310=\333w\t=Y\243\203\275\241\266\257\275\362y\017>R\250\021\275\257+\203=.k\321=>\367\364\275\263\315\301\275\225\303\355\274\301T\374=\240\034\271\274\266\031\221\275\023\324\032\276O\370\364=\020\213\016\275\361\217\r>\013_\227=\275\242\217\275O\020`=d\000\377=zEJ\274\237f\001>\371;\010=\250\207\313=\360\342\307\275\2203S=pV^=\3374\265\275\203g\036\276\021\275>\275ev\367=\256\214\004>\311\003\023=]\355\255\275\211\320y=n\013\037>\256(\343\275L\351\235=\257\034\351=\340F\305\274\314\211\204\275\rb\n\276!;\200\275]\337\250=\360\246\004\276O\271\360\275M\033\217<\224\004\027\275\243\203\025>U\267\013\276\356\355\372\274J\325\024\276\006\362\265\273j/\014>\3741\034\276\237\233\332<\220\340\000\276X\376\030\276FJ\003>\242\235\264={?\236=\261\006\305:C\213\231\274\020.H\275yq\006\276\371\315\320\275\037q\003>\364\210\233=\257%\014\276\030\325\237\275^F\010>z\300i\275\334\n\002=\343\322\316\2755<\365\275\346E\001=\207\303m=LQ\223\275`Q\021\276\323mI\2752\316\216\275\374]1\274\226E\r>\260\213\014\276\335=\000\276}b\255=\350\275\214\275\267,\006>\366\023\007>\352\244\032>\033K\036\276\205\205\344\275\261R\352=\373\036\333=E=\364\274\027\037\035\2766\254\336\275\\w\n>\364b\310=8\001\212\275\245\224\026\276\3606t<\334y\007\276[@\007>\023k\305=z\222\201<\375\301D<\217\035\t>\363\337\246\275\242JC\275\315\207\032>s=\365=Q\345\343=\237Cf\275\2711\037>\242\332\310=\317\254\224\275\202\020\277<z\331A\274U4\033\276{\260\035\275j\367\360\275\007\332Y\275h\254\237=r2\334\274KY\227;\362\353\373\275\241\375\304<\333\271\312=\264\342\333=\032M\234=\257\373y=\"\324\373\275\255/\217\275[\335\007>oA\305=Q\265\007<\307\234\217\275?\022\177=y\204\315\274\'\346\024>\356q\274=j\256\006>\222U\032\276\'\217\016\276\344\003b\272\020\262\030<,\274\255=q\357\025\276\373\r\240\275\200\377\304\2713\206\320\274\006\014\362;\000\307\344\275\347\334\267={\314\361\275)P\313=\2073\215\274\201[\001\276\216\210\336=\311X\217\274\262\261\010;uw\200\275\305by\273\243\000\016<s\010\016\276\177T\221=8U\215=H\230\260=7r\371=\235\244v\275\342+j\275\275g\261\275\017\033\306=\264\274\";\250s\033>A\334\262\275\240\020\311\275\022\374\331\275Ht\304\275\010d\002\275s\305K<\245\263\014=Ze\342\275\346\361\376=\364\374b=N5\314\275\345\370\024\276qn\212<w\306\200\274\302|\253=#\226\354\274\2451\257=\266\233\\=\210\263\365\275\246\300\010>\344k\321<\312\332\253\275\243\240:\275\322\224\352=F\304x=\245\3539\275\005\356\032>\336\356h=\352\253\367;}x\227\275\030\177\037\276\335\032\223=\305\352Y\275\336\263\335\275\373\"\324\275q\322\216\275(^\321\275!\366\341\275\344A\201\275\240\263*\275\214\246\001>]\261\221=\367\230y\274\225\350/=+\337\274\275\243!\374\275\206\364[=\255\342\006=\t|\232=\247h\206\275@\302\273=\311\235v\275\2714\351;\324\257p\273\256\t\277=\032\316\364\275m\\\205\274\202\334\206=\te\267=\313\223N<\326iK\275z\203\341=\217\212\354\274E\242\271=v\342\036=h\313\321=\017L\262\274\246\272\004>+\360^=\273!\365=\276\036I=\200\260\033=\375\200\275=IY\215=\341\372\262=G)\360=\270\334\013>B\263(=\330@\375\275\312\360\002\276\340\261e=\263g\323=\365z\023\275 \213\033\275\300\336\273=\2461\222\275A\337\227=X\257\021\274\024\332\032>\034\347\362\274\324\275\023\276\007G\014<mQ\211=\036\305\341\275MQ\021\276\3010\315\275\352\221\264\275\326\313\367=\300\257`<`\316\305=\016\360B<\026N\r\276h N\275\230\310u=\321N\376\275[\220\370\275\356\272\274\273\335\277W=\305\245\367=\375\032\307\275-\031R;\030\234<\275o&\260\274;\271\023\275\207\330\027=\252\256\001\275\224 -=\016K\243=\213\266\204=\267\366\356\275Ed\363=\360\260\t>t\035\334<[\377\340\275Tj\365\274\250\230{\275\200S\207\275\255\023\026>)\350\320\275\260\3411=\262\034\261\274\210?\223<\022(\022>\321o`=!\220\234\272\356x\314=,\362\375\275\207\362\261=\355\321\026\276\272\227\034\276\030\'.\275\202\357\345\275\277`\032\276\306T\265\275#\342\377<\004\367\031\275\022\271\314\275\304\316\270\274\'\t\t\276\263M\023\276<\007\t\276\256@\216=\305L\010\276s\237\001\275&\310\031\275\214U\247\275\263b\037>D\363\026>h\037\360\274a\263\362<\260\326\266\275\242\356\034>\252\325\342=\231\216\255\275K\207\010>{\215#=a\271\364<6X\'\275\026\377\n>}\206\344\273\234d\016\276 \030\255\275\236\362\301\275\230\037\002\275s\013\341\275Ym\277\275\275\\k\275B\265\257<L%\351<[\300;=7HG\275\364\300b<\271\004\260\275\034?\006\275\231\t\020\275|\232\202\274\031\251\303\275\035,\205\275\033\302\252=JX\326=\322\305\221\275F\205\254\275\256\227\277\275R\005\264\275~S\005\276\002d\334\275\245\001\253\2757\317\261\275\332\205\010>r\273\210=B\003\344\274\377\255S\275a\376\035\275\302q\313<\266\261\023>\032[\207=)\005\270\275\322f\314=\213Z\026>:\364=\275\\\037_=I\306\020\276 \020\333\274\262$\010<7\036\026>\303\220\316\275\017\345\221=p\276\271\275\301\001\323=\036G6\274\251&\332\274\314\347\021\275i\255\310=\025\026\031=\334T\367=\246\370\225\275\351\325)=_[\366=\200\330\016\276Yc\017\276\352w\230=\213B5\275\372\212.\274&\215\315<\317\265\030\276@\201\001\276S\320\342\274\345\377\340\275bo/=\032\302\004\2750A\366=v`\237\275\3766\314=w\010\036\276\371\305\302=\375\r\361=z\256\270;_\222s\275\371\271\232<\222\354\336=\317\033\023\275\223g\201=\362\350\266\275\330\322-=$\362\300=\302\212\t> \334\366=\357\237\245\274\271\027b=K\021\265=\242\363\301\275e>3\2746*\361\274\302\333*\274\313\005\036\274\214\372*=w\361\233;\307od\275\267\313\t\276)<\274=\335\305\317\275\003\334\351=h\225\304\275.\344\254=\000\322T\274\001\001\031\276\340\"\322=\221\264\253:P3\036>\216\014\303=\002N\002<\225\344\277\275]\255C\274\360s\222=\326\234\020;\231R\265\272\364\362\002=\250\312\304\274\025\222\234\273\222*+=\000\036\337\274\333\tM\275@\357\346<\326X\017\276\n\342i\274n\205\373=\301\345\001\276\342\000V\275\333\027\315\275\373\303\261=b`\253\273(\267\365=\210\250G\274gk\255=\226\345\325\275e\261S\275S;\255\275\026\367\243=\253\257\025\276\323<\333=\037\325\336\275\231\366U\274zS\253=\206\211\365=\312\215\377\274?\323\361==\334\004\276`\327\271=\236-\006=\243\272m=\r$\201<)\375\362=\010\310\224=JvJ\275\\E\373\274 ;\250\275E\360\031\276\266\317\026\2766\201h\275gL\025=\277{\231\275\003\265\344\275\2379\330\275\031K\036>a\234\311\275\231T\253=Sw\t\276\021\256\346\275\341\r\013\275\344m)=\307\331\031\276\357S\n>\177\311\304<\305X\341=\325x\002>6\247p=\345\'\035\276\254\205\037>\217\232\252\274(\r\211=\263o\260=T\343\212\275\276Yg=\233\022\014>\016Dj=\360\'\261;\345\354\241\274\304?\225<\356O\177=5b\022=,\346N=\356\\\301\275xl\237=\223\013\205\275\005\306\274=\360\364\264=\343\323\020\275\260\027\224\275\353\215t;\256\306\343=)VC=\313\240g\275\246\245\026\276*9U\274y^\235\275\343_\003>\356j\006\274#^\205=\032C\000<b\242\221=\224-#\275xn\322\275\326\355\034\275\267\261\016\276\264\257+<v\317 =\177d\033\276\344N\217\274@\017\n\276\202X\334=\345\032\"=\251\201U<r\274\336=N\272\254=\227Ga=nj\t>[\227\035\276F*\006<\343n\373\275\000\266\022\274k\032\347\275]\220I=LX\357=\305!\002>H\234{<\267b\215=$\335\321\2751}\267=(\301\177\275gQ\213\275\342n\321=\240\rJ\273\013\263X=AI\303=\356t\\\275\335\024\031\275R#0\275ks\206=\021\232\305\274\377\324 \275\265\304\345\275\342\326\367<\033|\325\275\376\nv\275\006\261\340=\341\305\227\275\305\234\227\275\257\224\206\275b\220\243=\253\022\267\275\262\362\013>\256\274\006=\312\257\025=\013\r=\275\241\231Z\275L\346\035\276\224g\307\274\233\003\322\275\314\217G\275Y\326\004\276\343R\257\275\273{.\275ds\000=\030(\326\274\331\021\225\2755\354\316\274I@\230\275\367\244\300\275\257s\254\275\300Q\232<\023\333!=\323\001\264\275*\370\357\274\270\272\243\275\326]\252=\246\244I\272\240y\337\274\253\234\013>O\024\256\274\223\n\304\274[\333\273\275\341FB\275\177\345Y\275\005\217\307=\256\211\241\275\323\302J=}{\227<+\244\233\275<\344\260=\372\223\340<7\315\270=\004\347\206=g6\001\275\342\215\"=nHq<\326\253\'\275\2177\014>t\002\254=\374\355\370=O?\225\275\341\301\316\275\334J\364=\217\024\364\275\234\370\031=\275\242\207\273\230\226\225=]\325\034\276\275\251/\275)4\347=\006j\335<n\341\211\274\312\265\360\2754\207\247=\006]\272\275Y\214\203\275\231f\024\276\302x\301<\207\247\323=\226\277C\275R\217\340\275\257\024\n\274/\377|\275\r%\023>\373\021\312=}\266\001=c\210\030>\212q\274\275Bm\362<\303b\372\275m\346\021\276\000PN<\347\247\000\276\200\333\031\276:\215\347=\366\357\324\275\365\253g\275\254;\323\274!5\005>\205\231\304\275\315\325\017=\226z\000\276P\032\303=\275\367\316\275\237\243\016\2764\271\363=\177!\237\273\253`\n>\2340$;;[\215=\363\257\223=|\035\005\272\306\316\275\274\320\222\341=l\225>\275\035\257y\275G\222\326\274\367\322d=\236\331\227\274\355\230\177;1\177\027\276\232La=\221\016\367=+\216\303\275e#\002>\276\2167\275\366L\032\276\260Y\305=\252\021\312\275\223\216\025>i\302\210=\364\026\375:\361r\006\276\375 u\274;@{=\357\351\347<\246.\007>\023u\260<GL,\275\221\334\377\275\256B\206=\2219p\275\342\365\036\276\276\374$\274kQ\207\275$\363\236<\341d\366=N5\222=\\\335\026\275\220\254\201;\014\233\267\275jt\237\275\000-\020\276\004\225\267=3\225\273;2^\344=!D6\274}z\245=zI\375\275\211\353\377\275a\364\267\274\021\245\004>\252\307\303=\241\371\342\275\302E\243\275\220B\035>\306\004\036\2761O\003>2U\007>\275k\243\273\301\007n\275\326\235L=J\037\036\276\346\020\220\275.U\270<\353\003\360\275\374\306k=\364\376\031\276\262\0026\275q\235\n\275\305E\t>\254\377\350;\243\356G\275\300\336\205=\275\026\267=\316HP<\013\006\033>Mu\241\275\233\007\334=\353D\021>\300%t<*K\355\2749\243\003>\023\245\243\273\022\301\223\274j3\352\275\t{\021>\016\031y\275\t\325\274\275\363K\274<\013dg=\026\323\266=\371\354\343=\364\325\014\276\347-\005<n\270p\275SeL=Nc\235\275\330\331\r\276\373\365k=y\240\313=\313\250\242\275\345\261%\275\356|\035\276\032\350\026=\201Xs=e6[\274\374\016\030\275\261M\221=\267\372e<\212 \234\275\356\376\321;\302\362U<\221\261\374=\"|\230=\177f\210=9\367\233;%W1\274\244\357\033\276?\225\351\274jq#=b\370\240\275\311V\272\275b8C\275\017\212e=\372\277\306=2\261\216<\277p\226\275\032\356\265=I\361_\2751~\023\276\3500\223\275\024W\372=\371\225\374\273u\001\256\275\226{\246\272yu\301\275r:\033=\t\013\237\275\031#\r\276D36\275^\344\035>\033\316\006\276`\372\032\276\262\265\000\276 lk<\001.\363=\204u\026>z\300\366=:C\006\276\202 \006\276\355\344~<\356\265\212\275\037n\004\276\177\303\302=\244e\264\275\214$\354\274%\262\202=\370\006\300<\210\325a\275\3628\t\276\320\252\242=k5\337=e\374\312=\027\336\303;\236\355Y<\370k\004>e\321\006\276s|\016\275\231\022\304\274)m\220\274f\211\265\272\222-\020\276\264>\340=l\235\311;\264\367W\275\244\362\003\276%\023<\275\034\267\007>s\207\376\274[\372;\275\333}\260\274\332\353\026\274I\006\376\275\260\313\256\2750\325\202\275S\271`=g\234\340=\014l&<n+\313\275\2438\000>\243\366\270\275p\334Q=\034JV:\334\273\032>^\342\214=\324q\235<\311\004\357=|\032\361\275\360\311W=\347\244\372<\225<\003>\300v\307\275\027\'\n\276\235\rv\274`\031\304=\307\340\246\274\272\256\214\275\352\362%=\252)\201;\212\352\335\275<a\376\275\026#\346=\210t\223=\003&\353\274\224\350\365\275\r#\226=\240\027\325\275\034\356D=\254\023\303\275\367:%<\301\272\014>\'\251H\2751\371\010>\370p\251\275=\203\233<\247]Q=\200\250\r\274}G%\274\005\213\327=\312>\030\276`\232\r\275\312n\332\275\000\245\010>t\357\261=\251qx=g\353\216=\255k\007\276\203\275\373\275\271\242\265\275Vc\266<\377j\035>\211x\342=\316\323Z=\033\343P\275:\2301\275\2316\361=R\002\330\274\213;\343\274\006)\304=\260q\276=\372,\271=\n\273\350\275D\354)\275\334\244\021<}e\353=\001\030\027\276K\316\354\275\375\230V=\311G\207\275F\303\342\275\206|\352;\270\374\344\275\337\264\224\275\263N\025>\344\236\020>\031\362\214\275\261\273\027\276h?\206=\375.\365\275`_\264=\216\375\261<\016.\200<!\315\000>\370i\r<7\211\377=\022T\233\275\364]>=-\016\256\275\247\264\005\276\r\326y\273a<:\275v\225\004>\224~\020\275X\254\334<\247\r\334\275\342M\336\274t\271\021>\3627\217\275\262\365\260\275E\\\262=\360T\317=hv*=\3221\201=1w\017\2768\226l=\360\332\r>xbA<\271 \327=\236\341\031\276`;\272\275\'\311m\275>\002\213\274\363\032\242=]\357\341\275\240\353\224\275\335\345\364\275_=\001>c/\312\275\241\261E<Rb\n\276Rg\031\276\237\r\306\275\274\271\313\2756|\025\276\3466\222=\2473\204\275\036~\r>\205\262a:\366v\204<\";\333=W5\264=\242@\236=\255\"\250\275\033\037\275;\031\267)\275\254yt\275 .o\275\027 V\275P\304\353=\256B\376\274\255\204\003>YC\212=\027C\014>J\307#\275\352\357\030\276=\304\314=\360f\022>\014\033\032>\271\200\202=\362\007\337\275\260|C=Tz\342\274[\n\005>V\016\022>8\362|\275\313\372\034\276\272\267s=\365\314\202<a\224\227\275\320R\213=\"f\302\275\rT\275\273.\243\362;#\342\243\275\017%\263=\022\374\025\275r\211`\274\026\204\306\275\245\007 \275\330\360\\\275\275\004\223=\375\224\367\275\\w5\275W\322\377=;\353\364\2755\005\257=S$\027>\003\022\002>KR\367\275q\202\r<\364\332\262=WDB\2740E\342\274\0305q\275#\310\023\276\243?\017=\342\235\344\275\221q\330<\020`\037=u\323\321\275\300\361\371\275\333F\242;\252\220Q\275*\371\023=l\276b\274\214\260\025\275l`\322\275\210l\032=SpH\275\014(\033>\214\024R\275\272j\214\274\000tU\274\036v\016\274\225\362\371=\343\252\n\275\001\323\314\275\026\226;=\377\251\301\274\321\310\205\275\263\0348\275\004\316\273<<\222U=\315\351g\275\264`\375\275\243AH\275y\222\037>\273\353A;\345\264\270\274*\350\254=@u\020\274\243\321\243\275\201\367\035>\370\362Y=9\177\334<\352z\337\275\366\031\375=\276,\n\2768B\365=#\335\253=\331\0028\274\243`\020\276#^u\275MP :(\034\022\275\022\307\375\275\024;0<[\250@=\372\366\036\276\270\013\017\275>\003\004\274\351\332\275\273\211M\027=\272\351\343\275\221\002\005\275\203H\010\276\324o\216=\315\\\032\2762\025\272\275\351\357\025>\275\271\017>\335\241\010>U\224\355<\337\245\024\276\2446\021\276\rX\233\275k\004\247\273j3\273\275o\270\343\275%\357\024\276F?\201=\371e\226\275\324\242B=\207\216\270;\343\315\033\276\224d\310=\270\273\377=Or\000=]\355\030>9\022\354\275\373\303L\2755\316\330=\276\271\300\275G*P;RB\226=\360\r\207=R!\003>\3444m=1\203\312\273\364\307\215=@\320\261=~\342\262\275bU\021\276e\254\201=b4\032\276\031\276\215=\035\213\007>\242\203\014>\221\216\n\275I\205\006\2760\235\242\275\374\021k\273\016\224@<\317\341\345\272|fS=\305\365\r>4\033\274\274ly\r\276\334\322\034>m\331Q\274\375JJ<\242\r\241\275\305\344\352\274\022\357\212\275\345\302\021=\360\366\032>\342N\n\276\374\264\006\276\273\232\030>\225l\314=H\367\200\274\342\016\270=\036\203X\275A\216\241\275\253XE\275\360Z\363=\270\371F<\242(\210\275\220\333\023>1\372\240\275V\200\226\275a\212\014=aC\342\2757\332\014;LR\246=\361C\310=\322*\023>\201\022\304<\177w\031>\335\213\232=($n=@\034\016\276I\323\231=\246R\014\275\247\362\356=\223\014\321\275\233\322\276=&$5=\227N-\275\215S\254=\312 W\275R\372\346=\003\371\242=\016j\244\274\'\263#=(:\324\275\232\222v\275\023^\374=9s\370\275\204\020\t>Z\362\370\2753\312\321=\327\250\251=\300\241\332=\274U\217\275\257\341A\274;\003\037=_J><Ul\345=\332\263\021\276\004\336N<SM\030>j\365\\=\215\240\226\275!O\020>\007\235\213\275\217\335\230<q|\022\2767\035;=\205\213\317;\356F\010\276\211\221\222=\226 \033\276\311e\241<\237K\030>\366\035\021>B\022\376<\030\347\n>L\265\027\275\032}\250=\276\327\036=\254#\204<\341(\271=:|\376\275\202\241\354<Xt\257=\034XD\275\225\251\327\275\247\266\005\276{\301\005\276z\374\355\275\341H\n\276\312\354\000>c\317\014\276\212~\010\275dgS=C\303U=\274\351F=\323;\200\275\231!\317\275\033\374\253<;\224\264=\003\236%=\006\355\306<D\336\027=\374v\225=\263m\256=\251\324\203=WJ\360=\213\367\201=%\201\352=\255`}\275f\377\231\274\007\222\243\275\341[\353<#\301+;\355\263\025\276vL\231\275l\310\\\275\265\001\367\272\032\241\217\275g\320\030>3\001\351=\266\206\210\275\260.\006>\230\364\032\276\224H\326=t\334\243\2752\026\006\275\014\260\017\275\314\372n\274;S\021>\311\020\\=y\340H=Q\313=\275\252{\371\275\0237\277<\177\253\035>P\235\207\274\177Qn\275m5\224\275#i\200\275\263\231\006<\177\202\244=\242{\202\275\031m\225\275\002\365a<\030Q\026>\247\017\032\276\003\020\016\273c\303\020\276l9*\275\001\237\001>T+R=\330\000\033\276M\347\230\275\2710\216=\210\334\333;<\225\365=\243Z\342<\204?\306\275@\277\033>\031\263k=\215 \277\274\032\367%=\017\024\027=\227\267\347=l\306\033\276w\3105=\031\237x=T\362\373=\271\357W=\220\246\353\275\006\266\243=`\035,<\361=\005\276\036G\326\274j\037\312=\2545\202=\303s\263\275\330\340\000\276\3276\313=\031\306\301\275\275:\250\275\204b\001\275gY\026\275\241\"\013\276\033\374\335<\2630{=\272b\266\275G\017\315=\020\010\035;\237\022C\274\302\\\271<\322\342\005\276\270!D=F\213\356\275\315\3720\273\263\313\264<\377\237\201=\240\307\005>\350\r\022>\025,\276\275,x\031=\260(\250\274\370W\213\2752\255\340=}R\324=?\001\357=\031G\270\275\022\233\274<i\303\260\275\272YC=\242\035\032\275\3128\001\2765\216\367\274g\356\345=\030\360,\275_J\367=\211I\037\276iQ\312=\352\207\310<\033T\256=\203\t\222\275\204\211\276=t\204\001>\332%\005\276\317\337A\275\353\217\001\276K03\275\313\031\031\276\364\310\003\275\265\244\034\275\273\230\007=\256U\214\275\373\035\353\275\027\211\027>\235\365\014\276/\023\003\276O\016\037>Co\267=L\251\006\276ib\211\275\346/\n>&\273\014>\332\255\003\276\366&\301<\025b\031>;\327E\2733\331\t>\305}\314=\272\275$=&U\363=y\277\030\276\326w\001\276\347\217\217=\3141\271\275\335=4=6]6\275o\006h<\312\216\316\275x\351\320\275\257y\314==;J\275U\0043\275\207\036\036\276ED\305=\220\031\312=\365\010\256\274O(\353\275h\325\025>KNR\275\026h\277=\004\237\237\275\343:\216;\035\271\034\276\261\313\002>\347\007\215=X\017\247=P\367\300=l=\231:B\300\002=\037\215\203=\262TF;\325\237\022\274I\\\362<\311\014q=\255\267L\275\177\301\303=\177\237\010\276U\n\257=\007FP=\373\n\212:c\2670\275\260\"\207\275\355)\016>h\306\372\275\267\000\274\275\037K\000\276/\344\014\276\320\304\210\275\357D\257\275\216\221\025\274\364,\373=\371\311\333\275\321\305\245=\026\375\364=\223\361\317\275\004)\206=<\230^=d\201\021>\271\237\021\275B}\347\274\270\211\327\275@\257\312\2759t\352\273\332\034\250\275\260\257\343=^\367\001\276\001\'\315\275\344\361\004\276\223\265\246=\227\n\262\275x\031\227<*\004\233\274,\014\251\275R\034C\274\312{\275\275 \301\300=\257\\\023\275\327\315\035\276\250\337\\\275$7\024>pZ$;(5\030\276W\020\r=blk=W\204\271==\352\310\275\215=\334=W\346]\275\267\376\361\274\234\022\333=\273\360\001\276\310\244\345=z\344\362\275dj\313=c\334\r\276c9\205\275+\032\363<\266Kt<]Q\026>\213\275\006\275\342]\362<\245K\033>\213\211-\2752\250u=+\216\363=\0228Y=\025\222*\275\355\203\252=\340\022\350\275m5\332=D\240\030>\335\255\322\275Ur\363\275\333\336<\273\021\\Y=\204\367\356=\303\027\245\275~\230\234=;D\213<\372^>\274\rar=\261y\224\275\367=\320=&\377\312\275FC\234=\n\201\324\275{\323\220=:A\024\276\263\342\354;f\003\013\275=\362\002>\231\n\226=\277A\006\2765?\364=\036j\037\276\211\257e=\177\353[\275\312\272\013=mB\002\276\336\236\273\275\212\373\350\275(\340\302\274\273&\013\275\263L/\2758H\334\274\333\374\273\273\034\365\223\275\227\340\261\2756\374\000>\275\333\270;1\245\374\275#\333\007>(I\346\275- \n\273\024\213\200\275&w\245\274\327\342\276=[.\300\274\2311\023\276\215\307\267=[\240\367\275\333R\204=ZH\222\273\257\307\324=\'$\200<\351O\024=\014F\220\275\007\243\262\273!A\022\276\215\340\355=\250\342\n\276u\212\320=v\031#\275/\\m\274=Y\334=\300O\326\275Q:\261=\"\353\301\275\233\342\233=?\365\241\275\271:\315\275\303\024\273\275\332y\202\274\227\212\025>L\360`\275y\314\374\274\343\326\014>u\266\244\274\316y\227=\240\316\335=9\331!<\254\301\213=\325o\236<\"\300\316\274\353\246\315\275\376\257\350<6\021\023>*w\026\276\0322\t=\016I\303\275\254\017\200\275cU\324\275\205_\301\275f\324\307\275\307\231\311=/B\016\276\330\310\022<\307q\021\276\326H\206=\247\000\240\275Lx\202;\310C\026>\344\370\312\273\342 \002\276?\202H<\003\236\007\276\273\3023\275\032\261\276<\275\006w\275z\266\257<\024M\222;c\276z\275o;\001\276!\301\222\275\270n\234\275\r\370\250=%J\301<\306M\024>\017\267\240=B\353\033>\270\330\273\275\300\357\275=\250\002\025\274\273\314\315=Y\360\357\275\3274\256<n\300\260\275\273\357\010>u\004\257=((S\275\223\020\r\275\035u\232\275RR\325;\311\025\r\276\232\316\024>\215\022\004\276\317T\037=\262\366\310=\010\271d\273\251\023\312\272\3462\224=y\254\022\276\023\273Z\275\265\351\222\275\212?\352<\330\250U;\337Y\305\275\t\241-=O\261\305;$\035\247<B\342\026\276*\357\253=\204\203\003\275\316\236\321=\315\301\250=\257L]=\307\304\250=\306f\360\275}V\371\275\254(k=e{\203<\375[\222\275\307\347H=\316\3454\275\r\234\010>\025\361Z\275\256\020\207=\203\327)=\010g\246;\3251\227<\355\376\205<sm\004\276\2433\302\275\032\362\013=\201o\304\275\034\364x<Ae\027=\031\221K=\214\330\016\276\340\263\352\275\317\213g=/\316\301\274\346\341\340\275\004$\257\275pv\351\2752\331\267<u\276\240\275S\207\021\276\"\276\357=\\\235H\275\037\250\014>\0100t\274\013\256\025>\317^\t\276m\243\373=\210+\007>\002\232\312=]\021\010\275B\257S=w\224~\275\347%\241\275\001\027H=\277\223\262\275k\000\025\275\277\364\001\275\270\350\003\276\367\336\224=\325p\315\275#<5=\3237\340=[K\335=\226\234\360\275\375^A=\341\027\271\275\t\300\250\275p%G;lP\245=o\357\032\275\037f#=k\273\306\275Q\301\326=]\272\004\276s+\205\275\310d\253\275\354\213\005>\022\371,=\262D\036>\322\257\357=\312V\006>0\342\t>\243\224\213\275j\342h\275\356\370i\275hY\363=\330\006p=[B\265=\311E\220=\370J\034\276uq\022\275\335\343\006>v\272\337\272#W\273\275_q\271\274\365\344\223\275c\332G=7q\217=hz\245=\215\"\330\275$V\346=0\037\235\274I#\347\275c\227\311\275\352\tk\275\321\r\014\276G\311\n=\222>\014\276\002\027\025\276\010\303\361=6\274W=C\306C<m\263\356=\346\273\350\275C\231\237\275>k\r>\030S+=\3519\232=C\250\344=\235\335.;\035P\275=|\007\246\274\035U\025=W\014\230<Jx\335\275\274\345\235=w1\337<\323\246\323=\tz\025>\\@\341\275X\255\022\276C\032\245\275R7\006\276i;\205=\326\327\376=\317H\037>\221\366\343\275\311\306\311=\240\356C<\251\360\354\273\325\317\030>\307\371k\275\254Cn\2742l\261\275\262\312Z\275\036\242\207\275\207vC\275\253-\003\276\263\342\312\275T\027f\275\252\362r=J\005\255=h$\242<p\307\376\275\357o\372=\372\214\375=&\314\331\275\247\n\017\275)\343X<\342C\031>\235\231\267=\374a\266\274\220v\r\274C\352\337\274\306\022\214\274CL\026\276W\n\021\276;8\212\275\275\351\357\275\214T\253=q\033\264\275\r\031\363\275t\001\010\276\205\270l=\006W\005\276X\255\240<1w\262\275\003\363\364\275\227\377\352\273\377\030\005>(W?<6\363\274\275\206t\357=Q+\014\276\333\325\334\275\247\2428=H\320\226\275j\277\370=\037\235*\275\342\320\030>\244\330\354\274\300r\337\275\332f\005>\241\033\013>\363\305\315=is\022\275\223\310\236\275\370\241\360\270\336l\373=\231.\032\276x\344\006>\353\232\254=m~\351\275t\264\006\275Yq\357=\277\310}\275E\245\375=\246\271\314\275\226w\004=\300pv\274\352\004\014\276\354\243\000>dn\201\275\\@\251\275\327\251R=\331\222\210;D\275w<\336\302\321<\311Q\340\275\036\214\232=Qv\245\274/\253x=Cc\222\274\337\224\343=\375\332\001=\367\233y\275T_5=h\265\252\275d\'\261=\247Y\220=(\323\341\275N\364\263=\036M\235\275\226\316\312=b\035\275\275\230\3308=ce\004>od\033\276:\214\265\275\242\014\001\275^\373\376\275\375&\031=\372\200\331=P\243[\275\026\006\210\275\2009\202\274\365\321\035>\370\221\356\274\370\321f\275\330/\241=m:\276\274\315\237L<\350\245\347\275T\255/=\033\277\242=n\266S\274M\n\271=S\334\355=\337\264\264\275\363\332\266\275\361Y\240=\217sT\275 2\007;\275bf=\014\255\326\2752\r3\2750!\244\274\346\037\344=\274%V=Y-\025\276\266Z\211\274\266Gr\275d-\316=\022\\\007\275sY\307\275\025l\006=\221\257\262=\347\332\307\275_:\314\275\236)T=\211\205\327\274\026@\310\275\221\245\264\275\350nZ<\250\006\006>\270\215R\275\255\232\027\276\255\035\023<\363#\034\276\344\267\230\275`\355\362\275\327\036^=Y\270\017=\2307\221\275?\275\276\275\217^\006>\251\352\271\275\215\375\014\275\033v\323\275\270M\203<H\0067=\271\370:\275\350\257\347<c\241\340=L\356\351\273\344<\272\275\232\217X\275\260\0002=hr\275\274]\260\320\275\270q\377;\2724\030\273\330\225\365:\004\372\215=eH\305\275\340\251\\\275b*\007>%_\347\273]\210=<\274\210\224\2757\240\031>AV\244\275]!F=\010\233u=\375\017\035>\262\307\227=\024\033\002\276\362d\343\275U\233\254\275\242\215\332\275>\3341\275\337\177\272<\021\343J<\301d\022>\362f*<40\334=\243H\016\275\032+o=\235\007\026\276Fi\312=\226\327\225=\376\313\003\276\324\257\224=\217)\261\274\265\355\310=\262\376\304\275\247\312\245\275z\321j=6\036F=\346J\203\275j\244\031>+\337\300=\305X\227\275\207D\242<\260\271\334\275\243\023\214=#\365\004>9AF\275\306\322\372<\202$\016>\317\223@\275\377\000\003\276\252\375\227\275\315\246b=\323\271\236\275\014\n5\275y\223\371=V\306.=\366\261\200\274\333d\224\275\223p\216=gD\333=\357\230\250=\214$\226\275\233\364\223=)\306\352=\371H\242\275\227g=\275]\013\n\274\362\247\324=\264\271\026>\326\2104=\032\026\370\275;\336P=1|9\274\324\211\207\275.\305\245=\246\215\352=\356,1\274\371q\355\275\2035\221\274\201A\372\275\323\274\022\275I\333\036\276,\373\350=j\373\232=\264K\000\276Z\004\234\275\251\013\323\273\217\367\237\275\354F\000\276\276\372\304\275\202\231\216\274\035V\353\275\031\312\303=zc\037\276\215e\010\275\373\253\312;\254\204\n\275X\265\004>/\037\200\274\252\275\016\276\373\313\364\275\340\3671\274\374\307\243<\337P;= \223\274=\332w\024>R\256\355=\325p\033\276\013\351\263=\261\037\010>D\363\212=\320t+\275[\265\345=\246\362\023>K\203\n>X\272\037=\023O\022=\013\236\033\276Emd\275\235\340\021>\014\0246\275,2\006>\216\234\010>\177Y\001\276\">\010\276,7\324\275>5J\275Hc\010\276\266\373\260=F\243\024>\004d\013\275\000\315 =\nR\302\275\252d\344\275\337\333\007\275\242\036\265\275\304\273\221=\"\355\032>\025Z\231=?g&=\250L\014>\3043\322=\230\260\t>\225\240\373=y\003\r\275\355\305\331\275*\231\255\275\360\366O\275\005BU=\001\332\205=\0363\273\275\314O\231=8\357?<\253\320\325=\244\277\362\275!\020\025\275\236\266\373\275U\231M\275\026\020\033>\220\027\201\275\027g\277=\032 \273\275\364\316\010>{\235\377\275\232\255\027\276\rjU\275\031\377\352\273\013\273\226=\311\233\216\275\r1\277\275h2\001=\337\311\235<k\323\033\276\005\341\312\275\360U\372=d\273X\275C\220\360\275\002<\037\276R\221\033>u\r\010\276q;\354=\371f\335\275\016\250\364\275(\301\261=\360\0256<\223\355\215=\273N\324=At\330\275v\237\036>4/Q=Oa\017\275\363C\007>\007\355\020\275\220\227;\274\374Z\304=2\204\226=\321\256\r\276S\013\226\275\310\224\023>\256\214\224\275]\017\333\274\215W\222\275\242V\002>\340\212\315\275;\257\021\276\273\225u=\312\306P=\300l\233=\344!\207=^\357,=B\203\005\276y!\022\276l\351\033\273\007\214\347;\005X\016\274^\365\003\276\251\026\210\274]{X=\240\030\364\2756?\023>\350/\241\275\244\276\367\275,\222H<\363\177\005=\177Bj=%\244\353\275\301\327A=\360\374\010\276\337\375\007>@`\320\274L\274~<\252\321\016>\225]y\275\273\302\221=\325FH\275`$\345\274\313\356\205\274pj\302\274\345A\334=\036\304J\275a\235G=\253\355\375\275\234\353B\273\276\262a\275\354o\024=\n\260?=U\210\037>\243\224\361=tK\'=\315\347\257\273\212y\204=/o\220=~t\027<=Q\210\275\354\014%\275R\223\023>\013\226\205\275{\366?\274\313~v=\034C\216\275\363\232\234\274\234\254\377\275Y\365d=f\206\215=37\211<\2612\223\275\035\202\016\276\342\017\330\274d\257\010\276H\006\227\275\272J\360\275\227\257\370\275\277\217\315=\324\253\350\274\317m\351=\274\010\004\276^\341\007\276{>$=\3701\020\276!\014\000=\262\215\377\275\031!\314=\351\027\346\275\003\3046\275\024\207\000\275\360\022\014\276\325+$\275\321j\335<9T\252\275\016\000\316=v \000>\301\245\001\276I\230\311\275\013\200\263\275\211{\350=\032m\342\2756U\314<\375\211\274<\251\231\010\276\245\r\236\275%du\275\314\361\317\275\375[\207\275IU\331\274&\234\220=x\320\210\275`zj\275,\342W\275A\210\272=4~\222=\"\343L\275\270\221l\274\315\376\360=N\262\313\275\301\004\003\276\024\365\305<\201&\214\275l\027\326=\003\001\002\276\3075?\275\305\221\310\273&\346\256=_\3078\275U\347l=\"a\321\275Q*\274\274\r\035\020\276\021\207@=T\'\355;J\316\345\275?\272T=\207K\245\275|\357\022\276\354S\233=\240\271\000\276\325s\247=\240<\t=1\201\020\276N\034\311\275d\332\266\275\362x\013<\200\215\032>\236\232\202=\333\377\367\275\306\3749\274\372Q>\275g?\374=b\025\363\275\000\354\376=\032\216\316=-\217\025\274\027c\034\275\035\017\353\274V\005|\275\203\016\265<\240\313\010>\361\366\004>p(\263\275\2134\241=\021\2034\275\r\320\004\276\347\316\276=X\357\363\275\230\'\361\274\027*\267\275F\301\246=\336\254N\275\014\323\250=\215q\200\275.\314\006>\2365\307\275V\024l=\360?w\275\217\205\373\275\202\320\006\276y/\017\274/\323\312=W\353\032\275\272\014K\275\300u\315\275\321\275\351<\356|\261=w\324\233=z\325\\=\360*\237\275/G\002\276\351_\230<\300\370\235=\266\255P\272\326hP\275\022k\237\2737\036\240\274\217|\352\274\360\221W=\243\323\371=M\253\307\275\215^\022\276\3635\236\275\001.\025>\237\320\303=\362\002\360=\361dZ\275-\017\363\275\016\027\002\276\333\277[\275\314\257\210\275\223l\337\275\367->\274\356\231\203\275\261\177\341=d\216\027=5\213\272\275\024W\331<p8y=nrN=\352m =\361k\271\275\265\345C\275\237\300\250\275\226o\210=\327\374\262=u\225Q\275\344\350\036>\347?l\275\316a-=6\376\024=\nQ\022\276\301\035\355\274\223\\j=m\211\272=F\020\304\273\310A\337=\235\207\020=\226I\002=8:\375\275L\036)\275\207\264\010>7\306\301<\217-\266\275x}|=\220\007\021\2763\244\333\274\366\262\025\276\005\005\024=9\253\010>\267\311\325\275\350\254\013\276\362\013\336\275\227\217\000>+\223\316=\026F\210\275\354\037\243;w\323\013>\256h\254\275Rf\352<r\202\305=\364\022p\2750\020\034\276\311\223\t\275\206\274\237=\331\207\314\275\340\"e\275\302\205\000\275\261\221\023>s\312\023=f\014\274\274\326m\205=[\265\035\276\035\215\252=\224I\010<\027\273@=\327O\026\276E\344\016\276\377~\271\275:\001\261=\323\250\032>\244\021\245\274\034Z\353<\316\000\350=\017A\206\275\360\306\371=\004 \032>u\234Y=\231W\303\274\024]\374=J7\211\275\262\025/=\266\326\323<\234O\321=Y\257\312=F\032\276<\022V\260=\346\332g=\274\325\016=\364#\370=h{C=\333;\354\273\234t\256\274\357\222\210\275<\301\004>\323<X=K\302\251\275\231\350{=.\262\232=\305%\025\276I^\026\2768\313\026>c\322\330\275F\2473=n]\202\275%@S=\005n\021\276\013\231\036\275\267\005\253\275\376x:=r\336\246<\241jd=\014\272\332\275~\330\252\275P\252G=\356d>\273\030\363\265\275\364\003\026>\241\357\020>2\252\231\274\225M\'\275\332Z\225=\263\247\017\2765G\272=\273\246\372\274m5\223<!P\013=\037#\323<}\261\213;+eT\274Q4\262\275\305\003\240=\3052\002\276\207\347\005\276\036\324W<hG\276<b3\027\276\341\267\310=\361\356\211\275\303&\020\276\260v\301=Y-\355=~\332\250=\363\315\332<\257\370~\275sb\n>\252m\036\276\223\212\376\275!\210\023>\0065\351=\272\242\375\273\205\364\005\275\322\202\300=1%\235<\315\347\030>}\220\375:\"\341\022\276\275n\013\276\316\366C=\277\363\t\276U\360\271=\\=\016>\rV\374<\325\016i=u~\001\275\274\326I=DZ<\275\300\220\231\275\364\356\016>P\034\205\274\315\257\201=hC\340<\\\330\367\275\333<S\275u\271(\274Q!\031=\260_\274=\347\300==\242o\031>\217\321\003\276\261\363\323=#\r\024\275v\365\357\275\203d\213\274jJ\177\275\2060\267=\354\035\203\275x\363\340\275.\372\212=ip\303\274P\217\206=\205.\253\274\351H\233\275\336\222\213<\372SR\274\1779\217\273T\374I<SL==b6\014>\210\325\373=\273\271\273\275\264\316\317<\347\335\351\274&\260\025>Y\363W=\272\277\236\275\034\026e\275\305\346g\274\r\334\377=,\361H<\311\331r=d\035\225\274\333K\322\275\273\2472\275\017\377\220=\373\\\321\274\351\256\355\275\036y\023\276\274\004\006=\204\302Q\275\320b\343=\206\201\265=\277\016\021\274\021\003\334\275\312\343\000\276\025\031\252\274g\241\210\275\207\205\373=\003\014A\275\377l\032\276Lg\026>L\311\036>\016\030\010\274\016\201\t=\355\314\255\275\362\213\030\276K\203\340\275^A\024>\323[\022>j\257w\274\337O\212<\346)\n>\274\255x=\2362B\275\360y\320\274\006\333\033>j\364d=+\231\267\275-\337\217=r\300\304\275\273\354\222<\2009\022\275V\342\201\274I\255\272=\317\351Y<\330\217\225=\307\262D\275\243\033E\275\026~\264\275\234r\261\275\362\277j=\270\211;=\206.\246=\022\310\306\275x\232\033>\236\364\r=0\010\304\275\021-\262\275\225!=\274\251s\324<Q~\007>\313pT\274#\264\375\274\241\244\345\275\366\\D\275\344\242\320\275:\311\034\276\r\333\370\2754I\333=\031\372\t\273\243\016\006\276l\300\306=\255\356\355\275\261\257\016>dK\331<0\307\022>\337+\355\274]\261\256=\273\275\002\276~\335\340=\377=r=\226\250\273=\364,\300\275L=T<t\316\201=\025\312\323=\313nb<\000^\211=&\353\360=\342@\006\276\t\312\223;\356\263\275=E\375\315\2736;\220\275\254\231\232=\261\203\267<\250\264\267=\341\323;<\'r\302\2754o\350=\\\225\241;\023\2755\274}r\010>\305\301\305\275\272R\343=\213\243\266=\037\334\003\276\035\204[<\243\3557=@\314L=\360%K\275T\333\244=\231=\332=\274\215\037>\023p\356\275\240E\025>z\366\222=z\335\014\276\330\241\321\275\315\353\030\276\\]\025\276VH5\275\316\344\317=Rm\235=D\272v=\303\177\344\275B\363\265;M\264\017\275\017p\230\275\t?\036\2745?i\275\260!\320<+\224\300=\300\332\222\275[\000\204\274N\363\221=\275\023\313\274t4H\275\372\206.;\010\036\364=\235\250\354=r\262I=f\316\002<ym^=\232\267\256=\367H\322\275(<\026>\010 \206<\256\242\274\275\377\025\231=\354\310\367<\216\\\212=\242(\000\276\373\301\314<\023\314\373<r\205\007\276\332\206\375\275?a\302\274\227\021<\275\206\353\204\275\010@\030>\254)\350;\336H#\271o\373x\2752Z\254\275\t\360\205\273p\233b<\355\225\003\275\252\000\217\274\023\212\315<Z(\277\274\027\234\371\275`\016\355=\204L\220\274\023=\340=]G\312=\3577&=\326y\006\274\347z\346\275\343*%\275\037\260\\=\332\342\223\275\262\312\220<@Q\365\273o\272d\275vk\351=\310\016k=>\023\020>\306\224\005>\327>\270=\235\327E\275\013G\013\276+\037g\2756\026\366=\263y\243\2755\314\003\276\364\002\237\275D\263\373<\021\346\313=\334&\302\275\300\257\327=\212\222.\274y\245\345=\027\035\262=\005\365\351=\\7\025=\026!\006>?\315\234\275I\357\036<\347h\375=\354\365\205=\372\037D<~@\031\276\303\270\347\275\220/o=\3178\342\275\023\350\014\276M~\374\275F~6\275\020@\366=?S\246\2731\312\356<\237\024\273\274\364\240\360=|\261\224=\356O\021>\200\036B\275{t\201=\000\020\004\276\004\'\332=\023\022j\275Y\236\205=\366,\376\275z\317\250=\345r\r\276\027m\303=\231\"\330\275p\270\233<\022y\244\275U\375\374=:@L\275\275x#\275\330F\000\276\013\223\254\275\251\020\360\275^\\\t\274\252\322\003\276\373X\003\274\232\311\345=\223\016\326=\225O\370<.\037\224\273.\301\237\274\215b\323\275(\251\032\275dP\035\276\031\322j=\372\023\003\276\213p\223=V\326N\274\334\347G\273\262\323\275\275\375C0\274\315\006\000>\336\232\251<\260\260q\275U\257\275\275\3577%=\346\251\036\276\222\316<\275oH\242=\355SH:q\031\007\275\2139\327\274<3p\275\317\213\363\275\247\330\266=\021\346[\275\300\255\260=\206a\242<\3517\354\275/R\367=\274\000\272=}\256\323\275L\261\301=hd\257\275\225\303!=V\366\220\275\361(7<\013v\266=\375l\321=$Y\027\276\343C\r\274\215%e=ri\030>&\310\347=\231L\357=*\204\203\275\243\367\024\276m\254\034\274\016\010\206\275EQ\336=dk\310=\204\013\241\275\302\231\252\275\363\025\243\275%\240\212\275}.\377\275:\030\314=$\"\r>\205H\003\276\013\277O\275\255\242\213=Ya\005\276\177\307\030>\\\335\364=\022\371\225=\234]\357=\356z<\275\007\315\301\273\325<\265=\263\002\311=g\356\r=\362\017\350\275v\351\364\274AK\223=\312\261\020>\214\375\202\275\032\027\204=NB\234\275\246&\361\275\355\316\303\274\345\321F\275\300\3134=\307\352|\275\234\352\226=\315\323\367=\257\2466\275\240\t\206<O\333\001\275\254\213.\274\364\n\233\275\300E\330=m\341\377\275m8\262=(\266~=\177>\374=\224 R=u\014\'=A\221\211\275\rn\002>\342Z\200\275l\303\365=\276\307\034\276\027\332\325<\240i\307<\267\316\277\275\370\273T\275\220E\271\272T\376\360<\r>\t>f\322\013>\020\212\312=\244\243\264\275\335\023\337=d\001c=\361s#=\265\221\207\275A+\017\274c7\231\275,>\212\275H\2258\275\321\357\010\276\026y\274\274r\276\036>\372\316\231\274\"\034\025\276\274\364\002\276\354y\327=^]\025\274@\266\303\275\341\332\200=\372=\024\276\222\230[\275\374\337\316<\334r\304\273\262\205\007>\013s\306\273@\301\022\274_U\021\276X\343\234\275\347\001\014<\304z\224\275\3672U\275o~\325=\034V\030\276\243\375\251=4,\025>\263\244\326\273a\213\030>\000\254\211=9\331\014=mZ\023\276V\202\347\275\352y\363\274\300\210\351\275\036\230\204=\256\253\206;\371\332\363\275\312\230\331<\212\231\353=\r\245r=\306\373T\275\371L\226=X\304\367=\371\266\237\275\372\331\023=\340W\301\274\037U\313\275\352\361.\275\017\273\302\275r#\027=~\227\357\274\205\370\235\275\322\014\374<\016j\233<Iu\231\275C@\365<<\017\006\276$7\221=\276o\374\275\016\007\235=\014)\342=Y\210\226<\223FZ=|%N\275\317\237\346=\3107\303=O\326D\275*\332\331\2750Q\n\276\235[\356<=\357\225\275\306\360H\274tK\025>E~\007\276\367\263\n\276\245$\352\2752:\361\274\002q\033\276M\244Y;\271\205\222\275!&\025=E\303*=k\034\037\276\304w\233=O\314}=t\n\221<S\032\210=\031\030g=\326\232\013>\225\353\371;\366C\007\276+>`=u\027\316<\030\314\027=;\024\202=\250,\003\276\355\323%\275\212\332H<&\037\032>E\315\372\275\247\004\204;I\333\223=a\205\005>\250\t\201<\246HO\275\214\255\326=\301\253\003>\262\224\266\275}\324j=\3671\270=\242 \211\275<\371\265\274\3037\370=9\265\234=\270\241\021\276Rr\227\275/\013\226\275\322b\322<\331\307\013\2750\352\035\276\315D\177\275\023\232\215;\016\227\350=*\'\335\275}=\201=1z\224\275!u#\275\230\241!<\325\030\335\273\260\377\313\275\337s\204\275\002\350\306= \201\002>\237\2720\275\010q\007<\000]\036\276M\220\027>e$\345=H\323Y\275W5\026>!\330\030\275\3541b\275\274\352\277\275g\311\363<Ou\271\275\026l\333<\300E\321=\367\365\327\2726\212\355\275\306\037m\275}\003\t\276N;\341\275\001\204\337\274.\306I=q5\260\275\252\313\227\275\260\263\030>\365\366\215<\206A\007\276\247\360\201=\344\275W;\213\265>=p\327\035>\001\222\356=\207\007\r>r\251\341=Oqz\274a\016\021>l\027\'\275H-D\275dG\340=\225X\000\275\332w\315=)5\003\276r\254\036\276\325\374\247=\225t\374\275J\207\221\275v_l\275Ok\346<\254s\356\275p\232\004=\351\201\030>\205\271\020\276\364\021\000\276\326\345\n\276\225n\220;\215\301\3329x\347*\275\363r\322\275GW\037\276\242\251\215=M\266\026>\232\243\000>.\323\025>\353\201\227=}\236\262\273\231\016\274=\020\246\000\275v=\n\276 \245\315\275P\343\347=9\344\260\275\306#\001>G\323\235=\336\"\n\276}d\247\275ZD\332=\325\214\001>\211\n\265\275\304UA=+!\037\276\031\252\247=\330v\023>8l\035>\223\023\025\274Y\225W\275\277\037C=T\032\340<\373*\230<Z>\265\275F\363\277=\314+\350=\230\177\347\275\323\256\274\275\313V\345=\003\226\247\274\360|\035=\312\264><g(\005\276\247E>\275#\030M\275\375\267\007>\2204S\275\007\232>=3\224\005\275d\360o<9@\313\275N\264\n\276\002\312\305=\230)\326;3H\334\274\303\321\236\274c \310=?\002\243<k\224\304=[!S\275\332\'\370<\256\351\361<\227\241\271\275\257\264\376\274\214\223\270\275\377\332\027>\217\317\024>\033\244\374=\300\217\374<c\311(\2759\311W\275\361\260\007\276\264\343\345=8\302m\275\222T\372=\245fc\275\331\356#\275\022L,\275\234\315?\273\2568|=n\256b=\337G\277<\374\231A==\033\007>Rj\034\276_\341\324=\016\315\032>\230{\244\275P\276\225=\372\375\241<1\302\021=\325\370\025>\n\020\245:U\353=\275\023Wl\275c\275\274\2758\360\003>l\025\324<\240\234\273\275\035\301\204\274\n\240\n\276Q\026\313\275\247P\207=X\333\324\275O\347\025>\021\317\267\275\'\361p\275\245\025\016>\271q\265\275i@\374\274\277\'\222=$\257\264\275\377NV=X\371\031>$\177\245<\303\330.\275\246\2309<}l\037>wq\024>g\224\254\275\017\361\257\275C\311\014=v\233\300;\010\225\001\276\\\300w\273\226\251\323\275\345\270\323=m\200L\275\212\251\334\275\236\363\034\276\363\014_\275\245;\032\276\033AC=\201\344\215<\344\275\027>z \000>\237\215r\2753\376\204\273\257\326N\275I\3732<\243,\r>\264oG=[]\263=\337k\255\273L\233\032\276\021\244F\275\261\204\017>\"\306\201=fg1=\0274\036=\213\226\376=\250\341\200=\010\211\302\275\357g\022>H3z\275\267\201\300\275pv\027\276\323\\\033=\344\275\255=3\233\n\276\211\213\343=\364\235\332=+\212\312<>\255\214=V\032\335=\337\365\344\275\300\226\243\275\337\024#<FRC=\2365\212\275\271\244\007>\336\342\365\275\025#\274=\346\273\204<\343Z>\275\345\210\265=\266\371&\273\246gY=\235\027\242\275\336h\013\276\3173\247<\243G\240\275\"I\025\276m\237\272=\0022\355\275[\254\270=\006\257\010>\322\300\014\275h\3551\275\353,\013\276\331\034a\275.\227h\275\005\222M\275Q\330\t>\351\000\225<\231\276\375<\271o\233=<xt\275;F\255=uU =\360\225\277\275\374?2\274\004o\320<<\267\017=\310.\004\276\226v\345=\340\330\207\275x\314\226\275\036\231\232<\355L\204\275\n\251\025>d\021\202=\325D\222<\023;J<\303]\023\275\205\340\r><\"\332\275\212\326\013\276@\353\265\274@\202V\275%\350\361=\314]\035\275<\277S=\327-\331=H[\t<\351 ;\2743&\330=h\010*=\357,0\275Q\244\347\275Z\017\241=\"\242\031\276\310\323\006\276\310\246d=\002\370\223=\206f\241\275\355e\003\276G\013\025\276!\205W\274\343H\034>MM\036>u\302\241\275\342\000\002\276\210\356\265\274\002\313\306=\rs\340\275\3740\016>\345s\377\275m>\026\275n{k\275\252l\025\276Le\217\275\337\314\221=,o\243=\002\363\350\274z\352\310\275\302\326\241\275:\235\366<\270\036\311\275r_\t\275\245\207\304=w\033\261\274\034\223\305\275\333\017\226=\253\262\273\275o\220\013\276 \375\n\276\263;\325\275\314\001\032\275\340\031[\275fu\257\27479\335\275\0353\375=\355<_=\"?\t\276\244\313\034>\t\255\025>?\365\201\275q\330\264\275\251\225\270\275\254\323\265\275\357\357\275\275\0267-\275\265 \"\274\204,]\275\365\270\306\275\303d\006>\365\246\036\276\367\035\017>\251O\020\276\023h\031\275h\232\037\275\274X\375=EO\333\275l\230\313\275\243\317\256=)\205\333=\213\312\231=\374n{\275\360v\251<\201\206\322\275U\333\253\275\301L\221=U\312\302\273\361%\031\276\204l\002>\214\001\336;b\264\300=%[\217=\026\036\036\276\177\232l<\034\264\257\275\364P\301\275\257\301 =\005\221\014>\023\216\207<\216\232\366=\'\333\021>\233f\017>\301\232\333\275A\371\252=\357\350\325<\322\224\001>\324\251\001\276vqI=\253\001o\275\255hI\274\n\033\'\275\'\337\373\274yA\256=L;\331<\026\325(=o\274\027\276\201V\266\275o\275\036>LL\360\275\356\300\323=\001\250/\2745\225\314\275\335\235\366=\374\202\035>\340\2321=\203hj\275_\326t=\375\r\261;G\303\362\275;CO\275\364\242\000=h\027\004\276\'\2657<ZD\317\275_\014\013\276\276~\354\275dd\234=\231\204\027>\345\3672=\267e\376=\306b\211\275\247J\004=\346\354\352<\257\255\037\275\020QS\275W\373*\274B\267\301=g:P\275\240\035\227\275{\314\306={_\255=\216\n\263=\247\\W\2754\217,<k\314w\275\273\272\321\275\321\373\271=\2748\025\276G\337\372\275\362G\025\276\225\201\312=l\016\335\275d\327\335==\227\036=hZ\033>\351\367\330\275U\227\010\276\353\303\225=\236s~=\204\274\352=h\003\227\275~&Y\274\313l\033>;\263\350=H\314\312=\357!\326\274$\3755\275\177\025j\275w\215\250\275X\030d\275\031\204\022>\202\256\023>p\230\310=\025`\324\275\273\213\262<\357\020\244\274.\003\021\275lc;=2\256\333=Qj\177<\033\344\034\275j\203\031>\252\017\244=\234\000\365=\364\n\260=\331\226\352=\307\240\220\275\r \305\275\305J\t\276\357\241\247\275\323-\344\275_\277\010;\177\023\334\272xD\002<\007@\304=\255\r\000;2\026\305<\306~\353\275hX\323\275\026\203\010>\304!\251\275\302\210\217<\005J\005\276$\252\036>yJ\025>:\222t\275\306\026s\275\300{\023>}\230\236=\030e\215=\377vm=\275\032\262<\351\263z;\350\370)=\034\307\032>n\232\334=,\356\325=XYl=\224N@=l\273\235=-\004\357=y\264\232\275KLM\275W\035\001>I\247s=\262\323\013>\010*\004\275\332\006\2179\030\370\305\275Ah\373=f\254\371<f\270\330=\324\212\037\274\343\025\233\275\2247\257<\363\034l\275\327\230\367\275<\242\350<\242\356\030\276\300Z\244=\014\326~\274\327\025\n>\2251\2539KX\312<g\004\016>\017P\211=Y\247n=\\\256\254\275\341B\271\274\326\252\026>M\316\343=\000T\317=v\\\036\276\320/\355=r\250\330\275\220\265z\275\007>\365\274$%\022>\303P\230\275\264=\354\275\020e\246=s\033\254=\331\'\226\275\337b\r<\245oz\274\363\265\341\271\353\265\334\275@\226\002\276\306\222\026\275:0\341\275\t\254L\275%\203\202=D\305\311=YV\305\275\372\310\014=h\017\321=\262\230\266\275\335W\302\275\317>\311=;>\235=L\304+<\263\367\203\274\326\035J\275z\352\207\274\006w\334\275Y\201\032>\357\340\331\275\030\034S\274\177}\033\276@\351\255=y\206\025\276\255\014@\275b\204\n>T\n\265=;A\321=\276\344v=.\001\251=\350\215\306\275\310\321\336\275g\351\302\275\363\345\255=\217h\303=`u\341\275\312\343\000\276\235\342\276<D=Q=j\360\n>GU\373=\361\351\002>\343\357\000\276D\330\371\275\275:\333\275-4\007>\211\0101=\r\332\036\276];\206=\003=W\275\017\t\243\275Z\370C\275\001,\005\275~]\023>X\373\206\273^\271x=Er\207=\300\006\017\276O\200e\275\177#\364\275\002\331\177\273\340)\030>$\261\007>4\341c\275\362i\352\275\215\2034<K,\t\276\315\031D\275_\256\002>P\264\351<\372\217\002\2762:\023\276Kcy\275\027\324\311;\243\347\004\276N$\005\275\276S\254\275\216#\005\276\202W\373=6\207\224=dH\275<\204]i=j|\272=a1\217\275\010\367\026\276\231\232\246\275,\222\331=\215w\031=-\001\006\276_\306B;\241\217\t>\300R\270\274\273@\237\275\334\016\345\274\257\270\256\275Cg\225\275\2037\217<\255\201\240=\305\273R=\020\214I<\317\265\202=\211!\211=\0264-=\006\r\372\275\303Z\343\275\271\323\002\276)\344)<\344&\017=Z*>=\240\236\244=V\023\023\276\360\306A=m\336>\274\216\301\264\275\022\303\031\276\304f\205\274`k\333=}\365\323=,5!<\375E\333\274V\002\264\275\205\254\213\275F\236\034>Ns\002\276\215\025n=Qm\265\275|\352(\275LL\206=\354N\244<!m\001\276\326\363\022\2750-$=\276\311\265=\372\372\032>{\337\207\275\030&\t>\0204\236;nHL\275\234\267\t;\364\206\254;\230\022\370\275prc=QJ\276\275\227\322\014>\364\324\231=2\031\027>U-\374\273\326,\013\275\327l\023>\231D\355\275\323\241\035=\304\t\023\275bB\222=\224\307\000\276\257\207\233=Z\344C\274w\373\320<\355\226\251\275\225\235\013>\364:\003=1\242*=\"6\027>\3335\370\275e\241\n\274\244\000\225\275\367*\001>\242\243\257=\375%;=b\252\343\275\331\035\233\2759A\005>\327w.=\206o?=\2563\014>\257?\245=\020\032\303<\273W\r\276\300]<\275\356\357T\275\232\317\321\275\334P\313\275\303\216s=[\035\222<2\243R\274Ne$\274\373\240\271\275\"\255\371;3sw=n\360f\275\257\352\016=t\245\032>\356\204\013;f\251\270\274\002\275\006> \201\336=\270\246\343\275`\272^\275\030m;<z.\255=\313-\213<\201z\324=\3662\310\275\006\206s;@\335\242\274Mt\006>\225\240\003\275\300|R\275\221e\037\276\203\252\222=uV\200\275\223\325}\275Q\020}\274\247P\014\276\376\034\005\273\016\323\246\275\225y\353\2756\332\035\275\251\335\013\276\352A\375\275\343\202\221=\334Bn\274\375\254\272=\027\355\216=\3540\361=l\033\324\275\313\231J=\260\326\351=\224A\233=N\261\006=\352\211x\275{\310\363=/\344\017\276\247=\216=\377\255\035>\027p\246\275i\211\365=\311\014\017\276I\241\377=gK\261<\203\244k=\236\316\027>\233\212\034>\034y\006>\215\213\231;\3317\203\274)n$\2750\366\010>\032k\263\2746A\031>\206\267\037\275I\262\024\275\307\037Z\275\360\313\026>\027\370\206<\346\352\005>7\204\031>\215H\273\275)A\250=-\303\026=\340E\333\274\004n\244\275\363\324\334\275C\236\205<\327\304\345<\360\357\254\2753\023\261\275n\300\314<y\356\213\275\320R\003>\205V\267=\252\374\234\275\006\313T\273V\222\361\274\017\004\005>\220\237\033\276\377\325\016>\310\325\307<H7\024\276\366X\240\275\2671\235\275\300W\340=|\'\223\275w\020\216=\341\r\252=\233\344]<\017\342m\274z\371\277\275\332\323\360\275\324V\350\275\222\367q=)$\206\275\017Ql\275\361\202A=\302\024\221\274E\233{\274\274\364\026>\254L\r=\364Z\007\275I\342\032\275\311$\210\275\217\242\207\275\002O\335\274?\333\035\276T\210\277=;\216\251\275\332\257\363<|]\240\275CL\374\275{e\353\275\353\264^=A\242\203\275\031\0336\275c?@\275\227\231Z=<\300\362=3\332\t\276X\341\236\275?/\220=\246\306\211=\037l\271\275\271\322\325\275\233\n#=\227\275\t>\002\005k=\256<c\275\272\234\325\275\266\260\024\276\032\276\344=l\001\232\274\3473\233=\332\347\242\275\033{\372\275\376f\036\276\371\215S\275\021\341\203\274^\014\023>\203fk\275\335\223\222=\316\\@<\371\337t=H\325\025>\010\317\271\274\037\221\332=\367\212\260=w\020|\275\343\341K\275tF\311\275\320\006\373=6\202\375<\336\257\306\275\310\312\312=w\303d\273`\300\264\274\017\272\313=:\374\265=\177U\032>\244\336\330=q\337?<\256E%\274\027\350\274\275j\304\374=\346\221\372=\"\3721\27425\301=\224?\230=T&m=\275\247\347\275\344\247\237\275\237y\210\275\313}\006\276Z\201\010\276\016(\205=\353\333\362\27455\317\275c;\022=\213\307\200\275\341\352\254\275\33070=\274\244\262\275\226p\001\276\023\3110\274\3103\177<p\372e\273Z3e<\227\257s\275Im\033>\304\353\226\275\211<\221=Ya\313\275\202\233\035=\255\271\227=B\371\234=\361L\265\275\264g\321=&\005\312=\230\201\037>\326\230\255\275\255N\n\276^Y\027>\277\"\300\275.\345l=\000\027\256\273f\201\203=\226\030\353=\330\007\002>\345\353q<f\2177<\203\2043\2759vQ\275u\023\022\276\267\026\270=\317\034\030\275\177\323\t\276\017\373\035>\262}\260=\371l\357\275\014\017\314=\013\020)=\240\243\215\275\234.\240\275.\344\242\275\204\266\320=NzJ\275XI;\275\243\361\013\276\374\310\032\276=y\263\274r\207`\275\304H;\275\350\346K\275\254\035\316\275\220\223u\274\367\347\240=\214\2235\274+O\376=\033wv<n\277\271\274\037\321y\274\222\353\013\276m\004\002<\2521\341<\361)\r\276\017\226#<\323\357\203\274\222\n\236\274\034T|=\350\215\000\276\240\206\245<\024\026\"=\256\311^\273>\177\021\276l\367\027\276\227}\243=\307z\031>\025\023\010=3\321\013>:\352\265<6=Z\275q;\231=m\205\251\274\222l\010\2768A\375<B\024\215\275#\344\002\276]\215\306\2756v\013\275k\325_=\243\213\242\275\"X\303\275\377 \035\276\2228\341\275\016W\306=6\247\304=\334\325\026>\252\235\233=!\324\034\276\037\025\230=j\026_\275\246\303[\275\373\253\001>\306|\007\276\332\315\037=\016O\310=L\350\212=\350\310\n\275\251\310\013>\226U\306;\205\253\316\274\316}Q=\267W\232=OC4=\254\275\276=,\340\007\276mv\036>\023Q\332<\003$\017\275\350N\010\273\270\tM\275\233&\252\274\031\335\353=y`\347\275\'y\213\274\033C\r\276PI\210\275\336?\026=\210W\263\275\332\033\211=\246W\323\275i\001c=.z\222=\231\273\346<\204[\t\276\243\277\005>rw\340\275\001L}\274|\307\367\275\372\246\334\275\323\036\300=/\314\347\275\304_>=\306$\001\276\205V\037>\025B\341=\214\016\366=\353\357\031\276\360\305\352\275\263\215B=\235\322\017>!&n=Sq\224=\030F\205=,X\000\276\314\220\035\275\025\2619\275\024\332\211=\270\2329;\022\202\n>Q\276\374=\343s\233<\030/\236\273\241\232a=\022\021\226=\243\026\320\275mD\006>YV\020>w\217\225=\211.-\275\226\211\240<\253\026\227\2755\200I<O\023\206\275\035n\016\276\302\3021\275t\257\267;C\375\242\275|r\r\276]\275\033\276yp6=4\367\004\276(\206\364=/\360\352\275q\212\025>\013}(<\315\256L\275q-\006\276\222\212\344<O\265\013\276\245\242c=\365\035\231\274\0313\244;\245\n\367=\321\205\010\276\261\334\216\275\177\353]=\341\340\350\275\313\362\014>\353\316\203\275**\346=\342\'\210=\373\036\223=I>\177=\rF\365\275IF\331<Kb\024=u\312\013\276\371\205\253\275]\256\306\275\352v\356\275A\036\250\275efT<\305\224\214\274\036b5=\034\200\362;t\376\301\274\231G\273=\334k\036=_O==?\336\366=\264\302\006>\006\346\265=\273b\022=\272\rv=\244y\352\275\210\222\236\275Mu\017\276#\264\231\275q\352w\274!\\\031>\251\247\370=\263z\027\275WJ\r>\364\323\251\275Q\357%\274\353\254\207\274\271e\033<\317g,=\270\0133\275\362\254|\275\354\377A;\2027\325=\3432\261=Q\242h<\033\354\225\275\364UH=\010Z\260<!\356\031\276\3730\034>\352P\343=\0336\027<\362r\000\276\031\356\033\2754S\001>\323\0368=@\215/\275#R\354=u\243\310\275?,\036\2749\305\030>\007\231\367\275\367\301\014>l\344\006\276\274L\022>\"\353\201\275MiQ=\220\0225=u\235\022<;\310\373\275\346\310/\275?\314\311\275\330\212\214<sIj\273\021;\257=\357\265\033\276\375:\266=\273a\337\275\371\214\036\275\351i\240=M\364\234\274\224X\376<\227\344\370\274\234\270\007\2756\246\003>\033\014\017>\301\177\003>h\371\313=\2043\000\276\2629C\275pEq=\371,>=+r\313=\332\234\320=\234\345\324\274u\\\322<Z\326\013\276\363\305\245\275\341\232\215<\272\364\260=_\312n<\243N\010\276\355\260\001=\301\207\033\276\300\017><\227(\327=\375\030\240<\345\377(\275T\317\266=|\245A=\247l\t\276P\324\356\275sW\006\276&\221J=\262\332\366\275c5\001>\235\271\213\275g\350%=\025\307\373<\237\031\277=\337\377}=3Le=\213\245\327=\343\326S\274\002\363v\275\320\370\202=\3711\205=\337\220\013\276\305!z\275L\024\013\274\033U\205=\200\260\025\275\371\213\271= \256\025>\304\353\024\276\r\001%=6\373\304;\373P\025\276\253\362\005\276,\255N<\337\'7\2759\352\342\275\342\000\006=\001\255\255\2751\026\037=\345-\267\275K*\227\275>\t\315=Oo\366==\214\305=\265\032\004\276C\326\363\275\217\242\034>\252^f\273\002\2150\275/k\323=\270J\256;\333{\351\274n\214\032\276+\215*\275\0345[\2752K?<5<\036\276\210\226\223=\322\354\024=\2246\362\275L\027\332=:\204t\274\323\377\252=!\007\255\275\362\333\327<\242\340\300=\324\311\031>\"[\001>\3156\033\276\\\336\271=\021\004\333=M4\247=\302\217\315\272\356\215\375\275\211\214\023>\250\354\020>\317\301\337\275v\002\t\276\206p\323\275Uh\305\273\334h\r\276\355\020\316\275\3234\264=\212\266\202\275\232\253\t9\023\t\362=\204G\376<\026\363\304=\365\233\240\274\343\r\352\274F\300M\275~\325\024\275\231!\354:\216y\030\275D\360\232\275\221hs=~a\216=X\333\025>\347\373\237=\0003\032\276-\334\013\276\307\026\007>\346\242\005\2764\333{=}\3521=\347\246V=\202\330[\275\033,\225\275\215\202\332=\255\006\357=I\277v=\274\021\002>g\252\365\274\372J\323\2743\315\t>\206\237\262=;k\301;\245a(<p\253\034\276\213\002\215<\032\315\275;\353\225\002>qW\314\274\237\325\377\275v\317\025>v\370\016\2762q\312\275\216Z\313\274:\236\260\275(o^\275\'\313\001>\205\226\022\275\177M\227<\0168\037>\032\027\200\274[\370\003>\252\025-\275\254\351J=\246\241\304\275\203\216\324\275\210N\274=P\314\211=\245G\004>\034\327-\275\030c\266\275\230%\031\276\207Z\t>\330\367j\275\217\220\016\276\347r\366=o\261\346\275\363\r(=\017q\211\272;\364\236\274m\347\353\275\035\027!\275\027\343J<{\252y\275g\032\344\275\353\332\367\275\r\004\201\275b\367\271\275\331\347\350\275\"\232}\275\351\365\374\275\333SL\274\261\303\027\276\037\355\324\275\344\\\252;\232\277\215<X~\033\274\300\237\002\276\270\370\352\275\034(\207\275\307\034\365\275\3209[<\306\324p=\262\302\312\275\006gK=|\337\321\275\2708\244<>\367\035\276\032\346\014=&\222\246\275\n\255\030>b\255\034>\023\207\025>\035D\255=\324\344\031\276?\242\026\276bE\246\275\374M\225\273ME\316\275\037\235\346\275@\026\221\275\370]S=2\312\327\275\215\205\026\276\220S\000>\316\312\212\275\210%\336\275S\376\252\275z\250o=\372\031\266\274vOb=\3104\016\275\254-<=.n\002\276\003\330r=Z\301%=\342\337\305=|\025\034\274\200\006\021>j9\220\275\304\250\003\276\201\360\r;\224\002\371=\n\211v\275,9\002\276\264+Q=\236\340\263\275*\377\227\273\220\024\354=%\274\314\275\310\234\335=\006\n\272\275_}\367<\007\252\340\275=\372\317<\354\001\220\275\232}\333\275\013\352\207\275A\212\310\275\225\255\375=\361kr=Lh%\275\2431\036\276\346\241\372\275\257SH=.\007\360\275h\336\003>\271\n\246=\n\\\025>2\0031\275L\016\306\274k\n\300<\035-\216=\346@\320=\001+\"=6%\033\276g\370\021\276n\277\020\276\274\356_=\332\255]<\\\344\267=N\224\013=\243>k=S/W=B\267o\275Cr\027>\217\330\216=\3276\374\275l\346\021=b&\320\275\030\177|\275\303\231U=\010\305\246\275\223\304\311\275\360\025\272\275\202\361\034=Q\t\r\276\000\n\316\274#\352\025\276\302\010\271\273(\323\356;\211\373\027\276\246\277P=\264\217\220<*4\026>9D&=\322^\020=\031\321\265\275\271\346,=\351Ow\275\267\032\352=\232\361\003=\230s\210\275Ls\221=8\237\351\2750\236\314\274\"\031&\275\3241\274<\206\245\263\275\362\316\375\275l\325\312=c\351\004=D\313\272=\321\003\315\275\004B@<\023\020\034>\366\354\033\276\002.\324<r\372\022\275\215?\265<}-\266<\225*\273=\366<\024>\346\373\305<\247i\007>\231\375v\274\375\341\235<\n\230\347=\375\343\364=d\322\017>\253>D<\216~\273=v\221\220=\315\352\036\276\256\0334\275S\335\016>\206\035\025\274\376i\014=\204=\327\275r&\260\274\306\333\260\275&n\023>I\351\273<\351\247\350=<y\240=\261:\261\275p\220\304=\321?\254=\002\323\321\274\245\317x=\2342\260=\356\213\315\273\3476\357=\351i\354=p\215\371=\216x\243=\344\255Y=A\302\343=\253\322\025\275\231F\242=q\037\313=|\022\004\276>\353\343={\274\315=\227\234\216=B0?\275q\365\260\275\243\256\356\275\355p\002\276\324\271\274=\355+\023\276*YP\275[\374\370<l\206\261\275pR\327\275\334\030\022\276\216\322\224=\304\251\026>D\265\320\272\271\023c\275o\342\261=3|0\275\275A\370\275\262\305\262\275\372^\361=s:\204\275\260\322\010\276\213\205\026>+\276\177<\026H\024\276\336\371\036\274V\227\031>\246\304g<\263:\333=\375\235\274\275jX\002\276E\361\032\276\372\270g\275[,\215=&\0225<\014\005\007>\270\244\254\273bi\262\275\0058\371=\004\214\"=U\353q=L\0061\275\265n\325=\031\212\037>\276%\335=7\227\362\275@ \031\2761;&<j\261\206\275LC,=\304\037\023\276\211\227\336=\027\267\365=\242\016\033\276t\323\263<a\224\337\275\377\030;=\364\377\031>h4\234;,\316i\275\323\272k=\325e\240=\017\027\3629\356\312\r>\214\246\364\275.\244n=\223\254\200\273\223\274\302=\311j\365\275\336\363]\275\240$\n\274\220\031\036\275yP\005=E\241\201=O\233\310\275O\013\027\276\344\365p=\030\007r\275\201G\254=\353\027\234=\336\246\365\274n>\006\276\325\256\354<\004\205\272<`\227\347\273\032\210\362=\361\322\016\276\017\007\010>&6>\275\241B;\275\013\001\350\275\354\303\240\275\210\240\301=\236%\023\2769U\002>\263\020\316=\004\ni<%\251\004\276\313\n\331\275\352\214\372=\366\275\014>\356\305y=L\030\311\275\032\246q=\3462\355\275{j\246=S\207\303<Y\373\017>\330C\026>\312\340\031\276\210Bq=\303\316t=\027tV\275\274T\006>\373e\325=\2769\025>B\254\227=t@\216=$M\365\274+\017\255\275\333\224\302=9\306\337=v\337\351<\r\260\367\275B9\034\276\316NH=\207\246E\275\006>\306=V\275\251;\3330\322<Y@\034>\026\244\r\276\270\272\375<1\333q=+Zj=\202F\331\275]d\323\275\313\017\351\275\214\333O<\306\372\346\274\215A\202\275c\310c=-\257\320\2759\213\246\275W\230\021\276\226\222\031\276{=\305\274\320\001\266\271\375e\003\275\246\203\350=\257\252\326\275=O\213\273\276^\215\275\212\364\270\275E\314\212\275\257q\274\2757\017\033>\377\010\032>\205\222\251=\331\354\256=\342A\'\2756oO\275\217\345\364={\223\304\273\237\377\216<\221t\003>\346\t\224=\310\226\006\276bY0<p\272\360\275\3052 \2732\300<=\303\205\202\275!\267\001\276\250\026z\274?m\327\274<\322\316\272\312\2202=\013\312\254\275\200-T\274\307\222T=\331\377\326=\310\342\355\274\017\256\226\275\252\320\021\276kI\237\275K\234\217\275\330c\026><\224\\<\252\261\017>\003K\356=q\304y\275h\274\366\275\354I\211=\n\032\255=v[\202<\315\247\030>\222p\002\276\237\234\353\275b\342V=,)\006\276qR\032\276\313;\351=\252\243\372\275\277\353\001>]Xd\275)\"\000=\360\301\003\2768\231\246\275\344o_\275n,\036\276\235\340\013>\2369\221\275^\374\207=\323\301\227=\033\223\233\275\313\366\370\275.\241\003\275\003\272\354<Gr\017>\212\255\322=\264}\300\275pW\305<R\0246=\022\202\362=\202\307\316\273\310\262\320=\2712n\274\252\343\034>$\364\035<~zG=\237l\272=\250z\252=m\352\033\276\237JD=\367\301\256<\000\002\212\275\262k-\274\026u\007>A*\365\275\203\270\350\275\273\342\002\276H\205\024>\267\343\265\272\033b\251\275\3559\024>\250\220\215\275\017-\270\275\257z==\037\273\350=\223E-\275f&\202\275j\347E\275\355\013\323=2\372\212\275a\370(\275\216\230\020\276\227|\334<\253\303\216\275\233\257\316\271\224H\246=.9]\275\327\306\2529\317\213\230\275*L\344\274\026o\212\275x2\t>$|)\274C@\264\275\336k\005\275L\023}\272\301Y\354=\371\313\310\274,c_=5\006,\274f\333d\274e\250\n\276\305\250\023\2768.\325\275jn\026>*\351\225=\254@\027\276\266\003\001>\354p\022>\022\311\255=\310\021r\274\230G\250\275{\206G=\252\377\352=\030\370\032>b\010N=\2673u=y\310\033\275\213\336\320:CF\250<i\350\203\275\252w\037\276&A\014\276\251\321\312=\204\265\236=\311\002\037<m\366\210=D\251\233\275\004H\r>\364\234=\2756\024\033>B\322\020>\332u\361=XB\016\276\250\341\024\276\3430#=\346d\363\275\222\315\345\273\326\264\001\276)\'\272<\203\324\000\275\376&\216\274\277\344\205=>\262j\275\230R\347\275\314Q|\275\242X\276\275\267n\006\275\240\250\226=\022}\005\275\3207\222\275\2574\302\274\253\234\023<\327\216\313;U7\001\276\007\223\254=p\271\277\275\241X&=\352D\247\275\214\023\366\274F\257==\335h\031>E\355\220=\206\"\321=.X\014>yI,\274_\317E\275\217\252\235=\372\017\261=\255^\034\276\341\263\n\276k\031E<\252\312+=\3350\037>8\365\001\276\315s\017>R\255\326=C\'\242<\301&\237;\2546$=L\314\365\275\017\261\367=\232\250=\275\014\373.\273M+w=$>\227<\321q\275=J\222E\273q\230s\275\213<\203=By\275\275\002\311\335=x\370\026>\361~\277\2759\251\330<\250\253\025\275\021\336D=\253\257x\275\003j\276=?P\332<\013w\272=\223~\352<H\301\322<n\241\021>\303\211\036\276\216\250F\273qE\001>W\217\270;WD\t\276\251.;\275&4\337\274\254\341\350=\020h\023\276\027y\303\275\027z\361\275.\002+=\240\207\010\276\3046\251\275\361\000\220\270\305\214\r\276\306\274\367=\"e\342=!\264\002\276\020\035\241\274\3141\330=\021o>=\037\204\350\275\207\220\037>\024\331\374=\235u\313=\315\305\367=|!M\275J\3517=~a\341:\376e\t\276d\377\274=\252B{=2\203\350=\236\250T\275\222\323K\275\234\345\331=\376m\227=)3q=\332\202+\275b\030\006>\271\021\000\276\002\344\204=;\237\275\274\016N\346;\260\020\367;_z\024=\337\333\365\275}\363\243=\210\007\000>P7\313\275\362\335\236=\375\215\306\275BZ\025\276\035\r\263\275\216eE=\rY\037>s7\270\275\222\320\205=\221*\335\275\313\365k\275\024\353L\275\212r\300\275\252{\224==\273\035\276\235\301\214\275\342\023\343=J\273\362=\330\226\215\275\005S\312\275\335\377\316=\326\241\254\275b\"\221\275q\035\313=\3567\260=\260R\313=\201bT=@\330\335\275\335\026+=\355E\007<\265r\306=[am=\004:\201=T\334\022\276a\316\227\275\217\364\261;\351\360\244=&\022\313\275\254\034\326\275\027@\204=`\004\317\274p\301\342\275\337\2663=s9\016>\266\244\376=c\351\343;6\267E=\315l\031=\277\220\007\276\204\370[\275\001\332\t=\377>\010\276\322\241-\275\010#\022\276\345\225\363=\234\002\333\275\217\272\313\273\217\306\316=\220\034\364=L\032\254\275\004\332{:\334Wo\275YH\331\275\264\262\264=\360\302U\275.0\257\274b\251\340\275\362\257\357\275\232\220\355=F\306\341=\245a\327\272\245\275\\\275;Z\316=?\311D<?\002\276<\233\251$\273bQ)=\231\020\261\275\342?\213\275\007\224\022\276Y\002\007\276\007J\363\273\257\024\225\275an\330=3\237\375\274\367\330\r>\320\236\217\275\247lJ\272\225=\001\271\373\273\205;\2224\373;\251\006\t\276\027\332\207\275\240\242\232=\277k\020>\211A\334\274*\350\021\273\220N\034>\214\361&=\230\303\200\275\252\023\211\275\245c\244\274\033]\305\275\210\253\027\276w\020,=c\"\277\274\356HJ=Wb\025=#\323\355=;\244\036\275{\251\007>\340`\212<:\026N;Qf\347\275\360\274\035\276.)\217\275\324vO\275Gs\333\275\020\000\244\275\033\265\025\276\334\277\353\274\256\336\221\275\t\201s==$\237=\200Y\361=\313\210.\272\375.\246;\326\201\331=/\212\371\275\256[\033\275\263\363@=~\256\025\276\306\033\024<\365H8\275`\036\021\275\020\t\016\276\207,\007>\336)\032\2757\027\374=\275\221\363=\177j\322\275I\364\271\275\341\037\327=\366{\241\275\201\346\216\274A\206\036>\272\264j\275g\205\026=O\336\374\275\032\326h=\243\345\007>\244\017\240\2757*\354\275\337\224\321=\32318<w\235g\275M\257q\275\222T\376\275\342\233\251\274\224\321\367=\270\341\206\274!4\005\276o\306}=\014\034\233\275}\036^\274C\204)\275\203\272\367=u\0236\275w\317X<J+\342\272\233\013\003\2766|\n>\256\254\301\274\2316Z;\222k\237\275\225\002N<~\332h=\223\375\010\276\351/\211\275T\330\007>S\262\004\276\021\233!\275s\265\005\276A7\t>wG\371\275\244C\003=\247j\346=W\246\345\275\006`\361=\023?\336\275\376\372\032>f#\356=\017\355\326\275\373\274\254\275\026\007F=K\2433\2744B\361=Ds\361=\246V\334=}H]=s\t\223=/\326\375<va\372=\253Q\034\2768x\035\276`\246\036\276p!\334\275\314n\026>\211Z\311=O\336\232=\260\002.\275\206U\004>*;\021>\372\246[\274\367\320\263\275\211E\216<b\004\232=\341=\307\275\251\t\027>\353>_= \274\031\276\205e\020>\311\177W<dua\275\334\027\277=*M\026\275\236\033\230\275&\346\021\276\270F\006>t\236\253=Vqj\275\037a\006\276\271Z\341\275\245\374\020\276\345\307c\275C\030\364\274a\314\177=%\225\004=n\305\215=!$\025=k\006\025\275\234D\233=\214t\273\274{\206\262\271\201\244\025\275\201\202\024\2764\232\261=a\202\310=\006)\032\276\231\007e\275\023\262\374\274\240\203\000\275\361\315b=t:s\275\217Z\017\276\327\317\031>\014\354\t\276I9\013\276\303\0177\273pt\301=Vyz=o\251\305\275\331}\005=\237\373\231\275\371\241L\275\232\322\307=$\266\350\2755r\033>\312G\372;\2232@\275F\3308=H\002\030><\212\217\274\256\025\363=\300\300\206\275%\263\030>S\302\345<YQ\336=\346]\242<\240B\312<\351%\262=\355\020%=:f/<[\302J\275\004k\217\275\231\230\016\276\225:\013:\363\343\232\275\303\345\372\275\356b\242\274Z\035\037\276\327\361\331=\330\026\224<6\354\026>\300J\324=FB\013\276\244\002\217=\030\002\277=*g\024>\252|\022>\205\303\255\275\027G\336=4\227\021>VC\376=\261\331\031>\367\211\321<\253a\322\2735\311\004>e \244\275P!\t\276\355\325\021\276\n\206\\=\014\320\272=\376\270\026>\324Nq\275\033\332\034>\224\372\353\275\316\3272<\260\005\354=v\236M=\265\033\305=\005\362P=\177$\r>V\253\376=\201\220\014>v\177\032\276\323\262\035\276\262U\234\275_:\261<\366F\220<\313_\271=\\\224\203\275<\311d=\004\343\326=mQ68\310S\330\275\257\327\321=d\202\300=\370K\017>~Y\004\276z?@=\021Ey\274\031\256\237<\214\307\226\275v\330\214\275\017!\237\275\305\232\246=^\363W\275\373V7=[\000\256=\267\333\250=\371]\247\275/(\226\275\036\245\234\275\021\354r\2756q\363\273\231\373#=8\206\260\275\r\256\231\2756Jt=\014\306\004=3\006$\275\014\213\005>]>\004>f\005+=\315r\264\275\242x\215=K)\241\275\374\361\311=\230\233\342\274!\335\261\275\034\264\254\273\212Jg\275W\024\271<\312\224\277=\357\204\002\273*\260\314<\016\255a\275\3224\306=\361\364 \275\367\234\013=\316z\354<iH\371<\'\347\277\275\345\334\207=\241\222\024\276\007g\262=\374\331\252\275\243\365\271\274~\325\306\275\266\340D=\034\267\225\275\\]\271\275R\201\212\275\323<\310=\235\036\275=2}\016=\257B\240=N\271\020\276$1\021=\344H\370\275/\007\247=\233g\014>\007%\027\276\260\262.=\340Lu<\322\257\222<>|\310\275\267\356\364\275\254\3319\275z\354\376\275\306\021\033\276\217\272\312\275+\371\210=YM\"\275y%^=\214\343\014\275\324:\226=T<\351=\270\350\005>\371x\212=\321\242\266<\274\351m=N\\\367\275\335\346\203=a\220\022>\226\333\252\275\215\014\030\276a\331\000\276\345:\025>\341\214\352<\354(\327\2750\023\035\273\231|\235\274\177\252\324=\323\206\022\275\030\245\276\274\020\346\242=\010@\010=n\367\330=n/\353=`}\312=\224n\034=\232WB=%t\377=\264G\026\276\270&\234<\344\210Q\274\006\321\353\274\310\315\032\276\3035\362=a\372\261=\325-\030\276\262\326\325\274\333\307\253\275a\247\250=\250\211\313=\233%\321\275\350\313\263\273\237\323\n\276\301\355&=\177g\034>\232)J<\274\277\026>?[B=A\305b<?\356\265=%\025\266\274P<\t>\210k\266\275\017V\240\275\325\227\350\275\003\345\t\276\315`\320=\321\374\001>\314n\300\275\226j\233\274/\205m\274\355%\353=r\265\212=!\211\377\275\360R6=\314\227\335\275\241\021\034>p@\362\275K\330\000\276\237\301\332=\033\277\353=\030\035\035\276\355\325|=\316\252\003\276\212\257J<{f\353\273\314\270\005=\260\306\026\276*+\377\275O\252e\273\001\222\350\275\372\360\254\275\277n\364\275\370\311\031\275g\365_\275\255\252\016>\227\226\362=8\334\022\275\360o\344=\004\n\306=U}\362\274e\275o=>k\227=V>/=<\311$\275D\032\033\276\005w\030\271=\332\326=\314\"\301\275\3449\344\275\304N\025\276\0203\034>\263\332\026\276oy\264\275\316\302\027>\\\031\355\275O\365\272=\357\235\345\275f\331\203\2758\341\375\275\035\317\244=.\324\215\274\233/q\275\314\243R\275\307\206\001>\317fO=\312\312\324<\271\324v=\230\317\346=\016\341c\274K]\310=\331\361\210\275\223`\227<\202\232\022\275\310\254\342=\2218\035\276>\333\377\275\257\256\t\276\226\200B=g\272\265=c\311\013>\320&\226=It_\275\244\303Z\275\313\372\024>Z\246\250\274mNM=\025\327\267\275k\331\253=\261\274\265\275\351\376\317=\332\371\034\276,\244\003<\361\225\267\275jU\005>L\260\020>\260\033\261=\336W\251<}_\233=\313e\021\2762\030\032\276\322\256\254<\005B\007\2764\005\366=e\315\347\275\376\257\217\275\263H\260\271\332E}=Z\272L\275V7\020>\253\374\035\273\376e\t\275\205\377\332=J\342\267<\322\203\007>\207\262\234\2758\310\375\275B\002\032=\340\025\016>\334\315\033\276\224\376\304<O`\201\275\t\233\302=\"\202\224\274Z\360\231\275\273\277\003\276\030\210J=\177\213\r<\235\3252\274?\317\341\273V?\024\276)\'\334\275\334\363u=\350o\375\275\265\n\034\276\024\247\005>!!\000\276hM\251=\323\300M\275\266~J\275\246_\037\276\252L\215\275m\250\344\275\372j\033\276\227C\010\275\305I\027\275o\204>=\234\035\177\275\340A\020=\0258\355=\353u\005=\373I)\2754_\016>\347\023B=\317:\332\275>I\240<`\204\223=<\271\343<\241\007\025>K\273\354\273\302\265u\275\nv\205=\316\327P=\2639\203\275+\202\373\275\267\242\267<y\\\244\275v*\270\275z\342\034\276\265=\234=\262\211\t>{\016\005\276\'\205\010\275%N+\275F\214\022\276\367bX<\257\235\324\275^z\361\275\265g\346=\2508@<\313\347\362<\304\231\245\275\"H\026>\010\241\021>X[P=>\016\035>\210*\322=\203t\305=e\257\007=\220\251\030=\227\336\035\276\260\221\215<\214\\.=\027\201\025\276\203U\034\276Zt\347\275]\206\231\2759\334\310\275/t\340\275\325\021\354\275I\023H\275@A\215\275UU^<l\271\310\275+\201)\275\001\005j=\220\211\271<\332\351\010>Jc\024\276\273\362\357=\265\247\034\276\264m\032\276*\221\034\276\370\225V\274\371a\252\275\235\364r\274E\232\330=:\000\024>V4\255=\224\324G\275\355\026\203=Aq\211\272\371e\003\275\312_\374\275J\234\372\275\273\366\275\274\203\213\301\273S\315\010>_1\272\274]T\237\275xG\027\276\2112e=#\374\025>\253\267\350\274\021F\343=\276\035\211=\033*j\275\326\224\t=\022\t\022>W\'_<+\331\033>;\354\253\275\321\337F=\352H\021\276\340\242\253\275\\\333\324;\316|\r\276\177\373\357=\006\320<\275\361\254\250\274\330\341\205\275v\277\216=\034\365W=<g\024>\204^\216\275\034\307\345=S\376\365\275\257\230d<m\317\257\275\335\027\223=\375\260\027>7\212c\275AT\030>\351\000\317\275\227\342\t>\225b\211\274\364\257\316\273\266\220\276=~\311\331\275\003\033\033>/\023l\275\211i\345=\360`@=\314\321\226<\271\034<=\233\316\031>E\372\221;\"+\262\274\302\277\017\275\370\262\335<\371\353|\275\017\224\036\275\001\241\372=\331\371\n>\325\021\032\276\250\205+\274$\313\353\275\355\002J\274E{\336\275\225\320\r=eu\000\275\'\024\247;r\252\310=@\322\375\275QTc\275\343\347\346=1L\267<fD\017>\333\016\365\275\237\035\262=\000\"\t=\020\007\035>\300\324\007\276\266\342M=\265\370\357=\004a\372\274|\230\311\275hpF=\365\026\227\274\206\276\026>W\265\377\275\210~\004>\027Z\250=\354}\313\275\352\036\314<\377\026\003>\231I\220<\033[\302=z;\353\275\276\034\267=\253\035s=\311;\254=t\225\n>FU\003\276oG\343=\207\206O=\302\314\001=\253%\344\274\017\341\356\275A]\373=\302#K=k\231\340=~\273\342<s\267\202=%l\201<Z,\220\274\205\344\331=\313\204\017>\035\336\003\276\371\261\376=\375\010\377\274Ih_\275{\322\022>;\343<\275pt0=Gy\363=\251#\207=\350\001Q=\263#\236\275\303/\253\273\030\357\216=\336\372f\275\017\036\006\276B+\022\276|\261\t>\374[\025<\345g\321=\275\256\373=\020BE\275\276K\370\273\342\025\032>\361\034\200\275R\267\370\275q\222\250\275\021d\350=\237\201\270\275\317\206\375=\277BO\275\376\"\351=\232t\303\274\002\307\346\274VC\354\275\r\007\t\276\314nh=\304\016\305\275\032n\343<@O\246\275^\032\311=\241\201\372=\004\032\202=s\326\232\275\377q\374\275\207\325\216\275}\234\003\276\221\264\035\276\025X\346=S}\023\276V\266\026\276Y\263-\275X3\031>\316\315\271\275/\003\331=\313\202\207=h\'\201\274T\343\177;a\'x=n\377O=\t_\307=m\244\243=\226\375\361;^\320\213=\360^\035\276\025#\034\276<\262U=u\232\213=\341J\226\275?\001\367=\363\314\207=\010\325\224=@\002\000=\346\331\021=\316\330\004\274\377j\322\275M\276\006\276\033h\000\275d*\036>U\225\010\276\273\020\020\275k\257\302=\335wK\275<\203\246\273\346B\206\275\321ow=T\337\200<\315E\230=\371\272\252=\226|\371=\301\240\316=\360\nK\275\027\005!\275U\210\010>i\233\303=N$R<@\225\360=B9\222\275\251\t\210\275\rI\354=\327b\255=9\0311=\220\016\316<\222\312\300\272\333\202\303\275I\240\020>\250\021\022<M\365t=\265\313@=1\n\025>|M\030\275\276U\034\276x%\345\275S\r\251<\032\001\221=p\250T\275~<\302\275\\3n\275 \005A\275\255\204\350=\311\326\270:\306\"T<~\302\034\276]\365\n>\2376\224=\234\321\326=\260<\275=\2519_\275\37062=\276\006\037\275\246U.\275\025.\020\27564\240\275o\332\'\275f\"\'=\270w{\275\'\375\304\274\036Jn\275H\341v=\371U\245\275\177\255\227\275\024\005\003=\375\236\265=\034\336a\275_\353 =U\264\315=\374\220\274\27533S=\316\025H=\025}\342\275\273z\276\275\331.\213=\344\301\204\274\322\351v=\315\355y\275\035D\322=\222d\022>\363\303\030;\001\330\376<Q\212\026>\326\250\261\275\353b\360=\313\274\031>>\327\350\275\276\371:\275\374\344b\275\220\332\340\274\320\210\026\274\223\236\256=1E\026\276\230rc=\364\000\323\275\267h\003\275\\w4\275/B\264<\377C\315\274\344\370A\274\276g\000>\t\022\021>N\336i\275\324\372~=\302\377\036\276\371i\242\275\023$\022\276[\373\t=\200\272\005\276\3736\010=&[\365=\023\203h\272\030\215\021>\315%q\275g\275&=\304\202\206\274\310wZ\275\214\372\033>\266q\025=W\356\033>\312\250\241;+\317\227\275]\272\200=\\F\212\274\251.*\2752\341\023>Z\312\001>G\035\357\274_h\231\275\213\345\214\275=\021\220=\000\322\344\275\304\267\376=$%\\=XN\014\276Di\020>\352\226\035\275\315\217E\274\346\023\365=M\036\034\275\251I\274=p\254\272\274\022\300\200=j\032\224\270\223L\213\275(h\'\275\212\251(\275r*\201=n&\031=j}\266\275g\027\277=\215\351\201=\036\315\212\275\246\242\210\274\022A>=\214\241\376=\216B\322\274\315\272`\275.\333\254\275A\220\260=~\224\270\275/\345\341\275%\003A<\225\367\207=X\242\016\276{\"\t\276\312a\203=\350\032\327=\222\n$\275\225\rr<\014\253\202\275\237\366\211\275\207\000\347\275\032 \245\275\373O\016>H\203\022>\215\177\344=Az\026>\372d\263\275\032\004\263\275\013\321\300\274\353\001\210\275\3130O=S2\336\275\344\336\362\275\177\002\231=\331n\031=\035\313\237\275(Y\202\273I\210J\2754!\345=|U\350=\251\331\254\2730Z\026\276\3206&=7P\276=\263\022]=\223\n\346\275\\\344%\275J\323\004>\"\261\322\275\254\204\227=\216\025\320=\217\320\355=z\355\320=zB\201:\032\245\301=\000\322\325\275\215C1\275\226\200\002\276\324\357\357=\220\016\341\275a#\t\2767\017\347\275\273<\323\273\'[\202\275\021\362\r>\004\323\214\275\353\323\335=\277\302\223\275-\257\311\274\r\261\234\275\013\217\327=\303)!\275.\336\276=\270\265%;M\036\350\275\316\243K<[Ol\274\206YM\275(Ht\275*0\216=g\375\253=\325\235\231\27514\322=\371\024?=P\327\262=\307\000\250:x\001a\275\310\020O=\363)\344=\020\306\332\274\025lX\275\177\263\021>\216D\250\275\275\301\222<\261n%=\230LB\275\250@\353\275K\361\000>\274\227\206=\202\242\355\275\033f\200\273%\206\377=\016\"\324=U\315\334<\021^\004\276\310\024N=\323\366\267\275\014\213\325\274\245D\034>\177v\304<5\2370=\321\305\301\275\352\216\030\276\303\375\314\275\016\343J;t\201\013\276\244;\023>\314t\377<\005\213\264=\344\270R\275\221_\254<\0133\250\275\335\177q\275\341/\267=\365K\245\275\210e\232\275\276\251\263\274\310\255q=^$\025\276\236\217\243=\352\242\317\275o\340>=\303\026\246\274\266\037\250=\'~\030\276O\364I\275\")\365\275\207\333\332<\030_\346=H\377\t\276t~\031>\311R\365\275(\250\301\275\262\313\233\275\201\255\331\274#\230U=\302\003\035>\2672\301=D\215u=_\240\272\274\263\250\351\275E\202a;\331\256\020>m\311\213<$\025\n\276\321\326\344;\375~6\274J\025\272<\233b8=\261?\"\275\254\000)\275\3638\355=\232\032\334<\330i\267=\370*\t\276\246z\206\274/w\334\271\274\253\023\276\302\266\003\276Z\\\027\276E\330\374\275\017\203\277\275,\034\235=\366`\236\275\317\200o\273\307\376\003\276\267\236\233\275-P+\275\331\363\034>\"\350P\275F>\327\275\330\307\362=\037\201\271\275\247\275\002\276\013\321\210\275\nP\271\275\227t\302=\336\325\t=\211\004\272=\351\020~\275\324D\036=\236\334\010\276\367\212\345=\217\204\233\275C]\311=V[\005\276\371j\313\275\033b\353\275\215\362\014>\320\321\247=A\253\220\274O\240\242\275f\262\360\275\2078\005\276\236\365\007>\304\037 \275 \267\303\274\003=\257=\202\032\240\275+\270\006\276r\005\373\275\214\226/\275d\326\230;[S\037>\022\331\254\275\230M\036>\352\352\240\275Fk\205=\001@\361\275Q\006\005\276\366\240\346:\242\367\343\275\326dx\275\340\320\252\275\003i\305\274\206\000\010\275\036\227\241=+\361\024\276l\333^9\0338\216\275}}\n<\350T\302\274\023\253[\275\021=\237=\025\3228=\033\032}\275[S\2529\220\002\243=\n\341\201=\300@\025\276L\321\373=\267\336\010<\226C\276<+h\361\275qL\024>M\250\334=+\2121\273%\245\025\276p_\345\274\361\236\243\275\332V\320=]\r%<7H\277<\225\n\273=\216\232\010\276\250\305j=\267\025\322\275\032I\264<\201\254\026\276nW\023\276\273\363\344\274b\325\210=\206P\305=\0247\r\275c\235\212\274*0\326;M\205\204=<3\014>\341\363A=\227r\314\274H\013\343\275\016n\025\276\21792\275\274\320\213\275t\362A=\224s\220\275\265\314\341=S`\251\275\240\217u\2757\207\272=\310\366\331\275J\322\007\2761B\310=\2210\346\275\005\016q<r\325\245=\337\233\031\2764\305\235\274\365\342\024\276M\263M<l\377\330;\302\207\240=\2338\240\275\016]\352\275Y\207\277<G\364\362=\263\242\366\272l\340\002>B\261\\\275\255-\016\276\317\355\343=\027\216b=\322\t\312=0^\277=\261K\305=\252\314\272=\327\232\203\275\245\326~=\356\2735=\r;\357<+J\2629\234j\025>\275\260\244\275\203\347\004\276\277\215\201=\327~\224\275\230\031\211\275\273.\242\274Y@T=\203\t\217=f]\331\272\376\200\024\276\024\330\245\275\373BG;\255\243\027\276Q`\025>\241Z\033\276\363\305\354\274jv\320\275t\230\021>\246{\204\275]z\373<\261\234\371=\216`\030=n\177\026\275\274\273\016>NP\375\274x%\204\274\266\346\t\275`\375\225\274+{\010>\\\214\220\275\000\275]\275I\372\235=\002_\013>\310\217\220=\250\215\211\274\251q\017\275\320\031~=\006\342\370\275\356\004\361\275\364\345\373\275{~\224\275j>n\274&\376\334=\230\356\311\275\034\270\324\274\256b\340\275VJ\026>\324)w=\2371\361=\233\010\2759w^r\275`\224\215\275Nj\200\274\247\315\203\273\232\250\340\274\324\035\227\275C\221\350=\225\357\322=\242\325\001\276\323\266\224=]\233\302\275\200\223E\275\310\020\025>U\313\270=\030\234\007\276Y+\251=\365;Z\275\367\265\367\275\305\343\035\276\260\335\270\273[\272\222=R\317\002>\007s\"=\350\306\034\276\204\357\004=9F\001\275z\245\316\275S\021A\275y]\260\274\270m\010\276\321LH\275\306\013\205=Ef\354\275\350\002\336\275v\230\253\2759\262\205=\210>k=\032Z\356\275z\237\005>~\302\r>\255\315a\275\242\272\270\275\352@,\275q6\323=\221e0<:\024\255=?4\277=\001s\361=Z\267\002>\035\267\005>0\310\253\274\216\221D<b\334\002=\217,\307=!\025X=q\362\323=\322\266h\2743\256\321\275\267\261\321\275\330>\016\276\374\355\347\275\343\210\307\275&b\034>t\t\213=\237\216\264\2751b\262\275\177a\357\275\224\300\372\275\316L\323=\256\243\t<_\236\360=ZQ\277<D\245\026\276B\\\234\275\260I\021>\000\241\340=\340D\322=P\337^<\241\335\016\276\001\244\025>\352&\360=6r\227=\026\212\201<\334\023E\274\325\210E\275\371\003\277=\221\277\006=2\321|=\331\242\013\276\215\343\310=8\331\342=\267- =\374\323\352=\263\022\264=7\261\017>\242\300\t=\024\222\247\275%\374P\275\356\037\361=D#\334\275\035g\353\275\224[\242=\032]\273\274\n!P=\032<\202\275>\237\342\275S>5<\255\205\001\275\374\263\342;\270\007\216=\231O\270\275)\235\205\275[`\365\275\262\333\031\276\206\303 \274\225\215\202=\372)\334<\231\033~\275\244\337\355:b\014\304<)\013\376\274T\211\254\274\300\265\252\275\205\247\020\276\213T\325\274H\242\262\275\ru\033\275\n1\377\274b\237m\273\213\354\200\275!s\026\2767;\033>\210@\327=]t\204<\022\302\026\276\322\363\001>,t\243=\341A\303;\211\255\366\273\351\251\300\274Y\030_=\356\330\223<\341\252\246\275\373\027\304=Z\200\364\275<\325e=\304\203\353\275\371\314\327\275o\307\016>an\233\275A\224\037\276\033a\250=\365\314\033\276\344\320D\274\273\276\033\276\221a\203=\017r\207<\034\360\021=55\350\275V\240\330\275\252\371:=\017\356\354\275\007 \004>\302\257\'=F<\213=\3770#\275\344YY=<\\!\274\007\376\021\2756\370\023\2766a\373=\005\207\013\276\030\300\235\275\004\t\201;\272\255\363=\272!7;\306\316\327=KV{\273<\232\250\275\232\211\252=\356\363\347\274\037\250]\275\231=\250=\233\375\362\274\225z\340\275r\313\246\275\241f\231\274-:\203;\230\337\211=\310:\002>\260_\035\276\212r\030\276\236>s=u\213\374=d\246\347\275\306y\005\276@\342\207\274Z\272\031>\332\313\036\275\"l.\274s!v=\177=\261\275*\001\343=\r.\206=\276-\254=\211\211\n\276o\360\224\2757R:\275\005;\027>n\367\023\276\367A\014\276G\346\216=\024q\201\275\005\257\254=Xw\224\275\241+\342=\372b\274<\336\003\311=G\225n<T}\256\275F3Q=@P\360\273\007\307\016>!(\033>\n\006\274<\367\236\236<IW\013>\306\304a=#\365\341\275/\213\025\275\303\334\025;\0106\031>\373\357\035\275\243\322\036\276p6o=\332.\014\276bV\000>\017\241\r\276?\'J\274\226cw=C\250\311\275\357A\024>\260\'\021>\235Mt\275\340\252\230=q\320\205=\322Q\030>\354\221\303=\271-\014>^1m=\'32=\356|;8\367\250\313=^$\220=%[\346\272\006\210J\275\375C\t>\213\217\n\276\315\355<=\361\354\316\275\230\262\332<\341\276\013<\021\210\211\275\267\023\002\274V\310\314=\225(\021>X\014\266\275\3125P\275\214\006\020\276r\253\205\275\037\226\203\275LO\006>\225s\331\275\240\237/=3\262\226\275A\316\216=\362\207-=+\336\206\274)\357*\275/M\027\276\032\013\271\275\365Y\024\276\311\200\215\275\231\332s<\376\242\262\275\330\342\330=@\n;={\005\235\275R\261\315\275\343H\002>\232\014\216;jb\\\275\267#\001>f\232\000>8!\314\275J\274\225\275\301\341\263=\022\370\371;\242\326\225=N\253\337\274Q\362\001\276JV\327<(F\335\274\310\260\313=r\030\336\2750R\031\275\014\347\024>\'k\365=P\204\020<@\210\032\276\257\343\032>Q\346\223=\314\"w\275\220H\234=\241\025\305\275\330\327\022\275\343\265\001\276W\342\362=B\270\347\275\331\320\370=&\321w=B\254h\275\231\205\034=\376+\241\275\220$\265\275\350\361;=\303\215\340\275.j\211=\356Fn=-{g\275\357O\377=\"\211\330\275c\256Q=\217\372\026>\371b\037>\343\026\262\274X\000\006\276\317=\205=\374\322\240\275\302\221\245=\356{\355=\016J\372=\266D\307\2743\301 \275R\n+=\207\330\377=\353|f;\220[\022\276\332\220\006\276\231\341\331=\022\265\005=\210\243\030\275\277\222\216\275[\254\344<;\3241\275\274\r\377=\021\341?\275\233\213\301=AK\264=\215\361,;\262\324\246\275\354\261\344=u\302f=\271\251\010\276\362%\301\275#\273\031=\267\363\023\276;\325\352=\350c\217<>\351\365\273\267N\364\275<!\t<BI\311=\364\245\360=\336\315\035\275I\342)=\261g\216=\270P\344\275\006\241\344\274\025\221\025=\023\262\337\275\221D\377=\024=\322<\n \371=\340|\002\276Ro\373\275\240Z\241=\034_\277\275\322\321\335=\243\316|\273\217\322\036\276\351\323z=\021\375\271\273\314\263\201\274e\237\214<~j\006>@I^\275;\022\272=\273\303\367\275\250\371\306\274\3143\276=\256p\337<\314\331\032\274/\245J\275\360\364G=L\340\025>\332\354w9\232\006\017=\001\004\322<\250\021\337=\351P\t\276\210\317\036\276\357\304\216\274\000|\213<\337\346\367=\003\312\235\274\037?\001>2\367\254=\3212\034\276\237\223\234=O\355\312=,+\373\275.\036\037\275A;\305\274\267A\316\275\306[\223=\353\304\331=E\327\246\275\234\202\352=Id\260=\203\022M\275\223G\324<l\356\375=}\t\022>*\204\324=w\307\004>\321$\264\275f\347\343=\256\335\031>-\276y<\27167\274\375\256Z\275\255\332\251=\336\300\220=\325\2504\272\236\3547\275\277s\274=\300Y\n\276/\351\341\275d/\307=s\312:\274jk\310=\341\223\006\276\261>\233=K\330\034>\261\302u\274\247\333\017>#\255\031\276/3\254<\200\r\r>\245x\231<~\300\313=rw\241\275m9\376<\271C\005\276\323\226\345=\300\252\214=\256\241\010\276\244S/=[i\302<\227(\026\276+P\016\276qv\237\275\374/\030>@N{\275\n?&=\362\334\274\275J\326p\275bG+=\210\334\213\275\211\311\300\275\020\'\231\275|0\370;\2656\026\276\035\256\325=\272(\t>\301\211\225\275\362\005\311<\305\206\016\276\301\334\300\275\244\333H<\221B\206\275\217m\203=2Y\347=\003\t6=^\350\212=\\\351\234\275\3526$<\\\000\231\274\264\365+<U\347+=\030$\226\275\310W\014\275n\267X\274\027j\346=\362\016\236=\377\254\234\275Z\347\304\274tQ\215=\251\025[\275\274\257G=\\(\247=\373\nT\275\210\313\033=\343\220\352\275\316\362!\275\367\376\356<\313!\232\275\312h\266<\035\314T=c>u=o0\355=\013\230\032>\277z\372\275v\306\023=\022\241\302=\350\177\020\276\301.\024>\3374\022>S-\303\275,\246\335\2757\205\260\275\267;`\274=}2=K!\304\274t\243\243\274\025!\244\273\366\264\316\2757|:\275\203\204\375\275\352\306\362=\0305I=h\214\345\274\353\337.\275\306\2026\275^|\265\274\257\254\013\276Y\272\214=[\354^\275$\270(\273>\352>\275\306V\035\275a\224\257=\224|\027>Z\026\376\275\343\215m\2747&\005=\331\016\340\274-=\212\2742\343\020>\327.s=\306#\205\274\336\357\001\276\247\006#=%\314\003\276\336\371\212\275A\352V8$\310\364\275\322\315\220=\213\020z=\256\223\016\276j\004{\273$\231\235=q\316\022>\247G\256\275bL\004>+\372\002>\\\366\201\275~\236\035\276\322\320\301\275Ou\326<\366n\252\275{\023\244\275\026\244\317\275\366w\324<\336.\013>O\261\322=]\016\r\276\234\022\363;u}\314=\271\365\253=\253\356\023>ae\264\275\331\317\r>\'-\005>\244\031\215\273Y\330\'<(\366\271=\017\tD\275\225\003q\274\th$\275\031\277\375\274$\003\351=\332^\223\275\231\036\024\276\315\177h\274at\007=P\247\321\275\241~\356\274%2\030\276\022\333/\275m\366\212\274m%\224\275\266\220m\274\022_\023>\345U\021\276\361\022^\275J\360S\273D2\207<\234\240\024>\351E\210\275\320\010\326\273\257N\243<G\023\002\274\000\343/=\355\277\032\276\00486=\302\316\036>\020DV\275i\204\005>\266|\r\2768v*\27512n\275\314\337\363\274\213^$\275\241\345\264\275\023\234\t>Hg\375\274\262\204d\274\034\343\027>\347h\024\276R\333\241=0\306\357<\362$\033\276g\037\274=\266\031\331\274\326rw\275c\276\317\275\'&\021\276\326HC\275\002\306\027\276\234.\033=\226\337\342\275\223EM\275OP\022>\335 \212=?\353\"=)q\324\275\274\311\271\2757&\324\274\215\252\303;\265\202\353=\3748\004\275\203X\266\274\002O/=J8\034>\013z\020>J\037\305=\216\n~=\262\300\266\273M\247\364:k\224\214=\3614\t>\370\235\372=bS\031=\330d\002>\326\000\266\275\340\014Y=\370\333^\275\327bj=kA\030>\301,\026\276\303\200D\275\213\371\315\275\364y\301\275t^p=\213\302\007\276\354r\206=\246o\\=+K\374\275\265\000\362=\252\302\204\275\013/\355<\271\236\t>\340cV\275[5\r\275\356\374\225\275\217\255H=\373H\024>\220=x=\351\374\031\276\031|\305\274\212H\232\275#.\027\2751\354\271=\371j\2349\360\265\021\276\\M+=)H\022\276F\303\217\275W-\223\275\\\346\265=ru\307;\374T\366=3Th<\360H\334=_\364\036=\350\r#\275.\325\337\275\034 \245<\023\326\003\275``\202=\256.\350=\333;\301\275x\366y;\361\365\243=\232\357=\2755-\230\275\326\330\311=\300&5=\241\006\274=\362\n*\274\221\225\224=\240\374\311=!\027\036\276{q\257=\271\333\364=\0041\351<\035\362\037\275\304\370U\275\004\247\023>\262\t\207==+\320\273&\207\025\276Hx\260\275\020\233\250=.I\001>\2200\010=\261\257\205=\n8\030\2757\200l<\356l\274\274\2443\373\275\206\022\236<x\273\004>lR\027\276\311\262\034\275\317\211j;\347>a=w\203\364=[\027\007<\352\362\254=\222n\010>8\375^=2\305U=*\025\016>7\227R=\220&\223\275\024\235\n>\273\360T\2747\336F\274\275:\370\275O{\312=\373\363\256=\353w\314=\2751\376\275:~\247=i%\016\276\341T\377\275\377\324\373<9\355\257\275\360\256\"=Ot\371\275\264~\030>\237\347\307\275!]\031\276\205\363\026>y6\263<\025?\027\275\035I\r\276\307(\362<\315\207\013\2762\307\t=\021v\n>^>\360\274\272J\313\274\250fn<\315\223\305\275k\250\361\275\035\336\242=]\322P\275\361:\277\275\334\330\374\274\014\344\347=\256\273\031>CR\016=\267\373\200<W\037\340=\333V\n\275\215\273\246=Cc>\275\256\346_\275\331O\227\273\2268r\275\242\020\354\273\377\355Q\275\312O!\275e\246\006>PQ\230=\213\256\220=\212\261R=\202j\254\2754\214 \274Eo\032\276\001&l\273\217>\331<c%\345=s~\030>\024i\022\275\013t\027>\275\206h\275\214\026\027>M\310\245=\317O\256\273\366\245\031\276\2745\025\276%,C\275\241\017\253;\336/\030\276\206\245\260<\004_\332=\303\227\221\275S n<&u\021>F\334\027\276R7\014\275\2249\025\276\225\224\251<\266sg=\3256\341\273o\205\021=M6a=\203\211/<\017<\353=\245\017\322=,\302\005\276\031q\t>q\226\024\2762!\034\276\203\261b\275s\302\036\276:\202\211=j%\034>!,\037>\310z\n\276\024A\021>\034>\373<G\333\237\275\241\227\016\276\3504_;\240*\265=\214\245\326\275\003\375.<\0215\305\275\331\261S=Sd\352=\214F\202=\t\231\242=S\031\004\276\322\322i=&\301\272<\251\344\030>\247\001\246\275\366\314\033\274\n\357{<4\024\245\275/\200\270<\231Q!<z\345\347<\242D\001>\005\014\227=\000\224\037>\322n,=\256\253\032\276\350r\006\276\361{\375<\352\360\245\273\267\264\275\275@Y\022\274CT\327;\270\t\235\275i\016\207=\350\227\r\276a\025`\275\272{\235=iK\222\275\020z\350=\243\023\036\276#\033\014=<\330\223=\\\252\021\276\212\255\027\276\303\2638=x\315\210\275\213v?\274h\225\010>i\351U=U\313\005>\305;\001\275\255\261\t\275G\2518\275\200\234<=\242\231\253=\0139-\2749V\330=\223\320\237\275o\205\351\274\030\213\335=9J\223<\245\226P;\306Z\022\275\357\347\330\275\273\234\377<@\234\032>\3346K=7\036\361\275\203\020\345=\327\033\330\275r\205\034\276;d\374=\211\020\354=?\277\007>5\024\014\276\377\rO=xG\351=\363\r\367\273\321\323\032\276\277]\271\275X\215\303\275\270\366]\274\351\262}\275XD\371=\272\365\001\275\351\362O\275<v\t>WD\n<\370%\006>\030\024\376=\r\302\337\275\031/\315=\234(\201\274\255u\271=U1\373<\353\357\207<R/\001>Z\366\251=\347\304\020\275\206)\372\275*\211\005\275\264\312\373\275\354\031\032>\270\314\005\275\261\224h\275\023\200\303\275y_\003\276r\223\n>\314\352\033=\360\371\r\275\301\276\355\274\364/v=\203\007\026\276I`\357=\004#\'=\021C\367\275\347\325\336<I\014\302=\347\331\354=\206\363\375=\371\341R=&1\264=\365\325A<_1C\275.+\013\276\235Eh\275\022J\021=\375\304\272\275P\232\325\275\344\210\377\275f\3202\275\340hd\274\277\"\210\275\351\244\254<{p\254\275\354\007\030\276\341:\036>c\271\t\276\235\033\273=|\363\341=\245I5\275\003\346\237\273\304\236\\=\360\267\373<\371\331\007\276\274^\360=\016\332\032>\353\314\030\276:^\323\275d\344\023>~\257\002=*|\t\276*\t\226\275\020\021\007>\317O\035\275}\333\367==b\265\275=\336\301\272\204\014\234=\334\314\361\275NL\036\276\353\325\010>]/`\2759m\002=\206\367\373\274\'\321\366=\345YL\274\205\016\037=\314\255\254=\306\371\354=\035\336 \274\356=\013\276\n\253\242=%\205\273\275E\013\001>\2626\213;\235|\201<\320\372\034<\'\224\246\275\027i\216\274\252\344\255=\234l\020>i\246\027\276\265\226.;R\224\004\276)\230\017\275\313\rf=\337\272\010\276\334\264\332=\024~\026\276\300\223\335\275\235i\020=\034\016\000\275\334X\027>\014\374\271\275\330x\336\273\327\027\017>C?\360=\205r\017\276\331c\030\276\270\020\300=\316`\326=\352c\230=\032\346\007>e\322u=[v\035\272\240Q\025>s\254\326\275\302G^\274\206\352\331\275\264\223<\275\2758\001>NG\002\2769x\203\275\322\002\353\275\237K@\275/\000\334\273rT\316\275\033Vj=\n\313\242\275\237\376\321;\022\230\355<\245\032\031\276\342\333b;\007\327\021>&Y\366;\014\027\226=D5\023\275\022~_\275\037~\362=C\317\340;m\'\013\276#\2177=H\300\013\276$B\277=0\014\204\274\rB\270=MU\265\274#\373\025>T\355\013\276}\213\003=&\245\370<\002}\350=\204\r\022=$O\027>\314\025\217=\324,\310\275\355_\t<\177\307\036=\032#\n>U\322\264=\2025\377=x\2737\275\230\232\002=\332\364\035=b\263\265<7\353\204=W\260\340\272\004\241\264=\326\355\006>Xa\177\275\002\014\311\274\266\201\t\275\032\t\313=\275-\t=^\332\207=\006\033\033\276\337\212\037>\016\022\263\274O\311\227=\357\373S=\007\234\320=N\220Q\275\003\244u\275+\353\025\276\261j\002\276R\303\013>\'\232\237\274\207\026\201=j\205\363\275\020?\227\275H\314\005>V\356\240=\244!\230\275\354\353\235=\"\212\277=\013\354\324<\374\375\240=\244\177W\275\024^\375=P-\006>\206\021\272\2740\006\212=\372a\203\275d\374\332\275G\374\370=\254\245v\275b\210\030\276\221b\236=\213Kl\275l\352+\275s\243\032>\371\t\202\275\323\241\001\276\344\361\265\275\3266\250<\332\373\375\275\177L\333\275\342\225\017>5K)\275h\250Z\275\"$:=\027\203\302\275\025\276\031>m\365t\275\227\343\\\275W\022\202\274\263\377\216\275e\355\243\275TU\332\275\265\227M\275\377w\235\274b:\037=I\362\032\275P\322\251=,\340;\273\356\340\267\275\032!\261=\341\2613\275\262r\025\276=q\311\274\365-\003>\023,?\2753\315\014\275\277\013\217=Z\347\026\276\344b\031\276\007u\020=\024\006\264\2756\033\001\276\221*\276\2741\251\250\275\263}\023>f\251\344;\366\234\014\276\340cJ=\004\204\300\2759\371\262\275{\002D<\006\312\025\276\341\010\371=\255\242\000>\264:\210\275\333g\374\275\277\370\023>\370\233U\275N\017P\275\237\233\322<\311\267\265\275$:\337\275\207\022\021\276\341\274\267\271\251>9=y\016\025>w<\312<\021A\306=#\362\360<a4\202<I\254[=v\353m\274\272@\001\276\225\002^;\026\215\361=\3770\374\2751#\207;\313\tM=\037h\035><&\212\275\026\312\234=\032\275\001;\223\t&=tM\211=~\n\340\274%\372\364;\020\004\276=\265>\306\275\221\255\363=\034\276\016\275\027\225\207\275\244\017\262=\257\346*=9\242t=qp\327\275\024\274>\275\023\357\031\276\033r\326\275\013=\307\274\332\024S<c\177\275;\220np\275\372o\026>W=\227\274~\216\017\276\230\253\240\275\332F\255\275\254\264\020>z\345\262=n&>\275\316]\346=0\211\300\275G\353\203\274\3257D\275#\234\251\275z\032\207=\263\204R\273A\rh<o\321\031>\3601\006>\204\003\374\274\321U\262\274\271\276\243\274\206\3033<s\225\377=&\324w\274S\206\370=K\306]\274\333\236\344=D\256\255<\275,b=\363\233\t>\362\267`=\362u\n>\373\325\340:X\3204\275.\'\261\274\033\340j=\002\036p=\274\302\025>\205\233V\275\274\215\251=\021\332\204\275\355\236\016\276\321\345\033\276\354e\212\275#\014\354\275.\224\222\275\300\215v=\240u\247\2751\010\020>oD#\275\312\216k=\0271\351;H\336\027>vy\206\275\366\300\036\276\202\002\312;\371\310r=\303\002\240\274g\264\231\275D\232\303\275\035w\205\272<\200T\275\n>\225\273\226\203\236\274\265\224\310\275\361k\210\275^\260\031>)\242c\275k9\204=l\027\223\275FB\316\275[\346\236\275_&\225=\225\261\034\276Gr\310=N\244\274\275\030\350\352=\204\371\036\276\356\361\031>\024\207\210\274\355\201\227\275\375{\303=\321\325a=b\322\343\275\260_Z=\302\253\r\276Z\270j=d\344\t>u\227\231\275\341\322)=;\363\000\276\202\266\371=\326\023\212=\356\377\364=8\204\343\274@&\301=lyB\275\346\000\353<\030\304\355=~lA=\202\335\017\276\240\373\347\275\021U\341=\365<p\275\367\235\001\276\222;\237\275Q\361\032\276Yp\232\275\204\231u=\371\333\275=\360+\024><o\026\276\200\237\032\2764$\257\274\266\341\265<&\035\t\275\024\355\006=e\322\217;\234\376\263\275w\207\001>\201\225\177\275\"\'\017\275j\021\347=\266o\007>\\-P\274\220*\014>\225\341.\274xf\016>\036\312\022\275\344W\365\272\206|\034>3LC=E\024O=!\274\206<O\271:=\020=\230\275~\211\336=\302\033\355<{\022\376=\241\010\352=\250\203\251\2753\263\035>\326\225\213\275\375hF\274\335\270\024=B6\034>\340\245r\275\232 \226\275\017\225\245\275\'O\263=\205\014\233=\233\230\336\275\247\344\276\274\353\251\217\275?\217\335\275\013\t\371\274R\327\247\275 \202\222\274\2475\371=U\020\001>.]\2759\316\036&\2756\210\261=\322\224\203<\225\315\"=\227GZ\274@t\340\274\257\216\207;\245%P\275\234\027\313\275\3744\037\276\264PX=v\310h\275,\003\261\275\025[\032\276.\261\226\275\032[0<y\211\243\274\267)\023>E0\223\275\2220T\275\'\300\205\275\362C\r<\210\371\254\275\223^\037\2765\022\340=\251\213\366\274RG\360=,\030\320=TM\374\275\241:\354=Y\204\020>]x\236\274\333,\301<s\366\272<\334#\001\275\036\025N;\032\263\004=X\036*\275\241\275\033\276\027I\311\275O:\347=\351x\213<t\367\270\275\025\227\312=)\377\201\275\237\211\330=\256\247\026\275\377\301\017>=\223Z;\2318\030<\006\315\234=\276\030\265\275n\205j=\311/`\275\3502\251\275\265*\265\275\200\261\034>\031\253\014>\214\276\327=\344\0215=<\275\343=\017\030\262=\335\005\354\275\3655,\275N\033\267\275\030\2302\275Fo\033\276\005L\251\275]W\221=\354\251\004<I\265\247=m\207\364=\021S\017>mM\372\275\360\272\315=\354O\032>\312\321\377<\320\020\005>9\241\240\275&\273\211=\277\301\002\275\276:\356\275\345\\<\275:]\213\275j\275F<\370\250\232\2755\246\363=\220\005\030>C\272\005\276\335\026\217\275\360g;=w=\262\275\271\226.=\311\n\026\276\330\343s=\245\247\311\275\226qu\275\340<\021\276\352\362?\275\357.\316=\372D\002\276\254\261\317=\247\266\r\276v\365\211\275\345\342\311=Jv\003>d\205\006<&\372\033>\034z(\275\210\221\241\275H]\001>uu\330\275\020\207\316\275\337\353K\275\3017\342\273\203\311I\275\213\235\273=]\334\002\275\036C\323\275\177P\363\274\034R\340<\256\210\036>\027\006\263==\227\r>\014\322\311=\240\202\034\276B\344\364\275\234\263\242=W#\002>~+\240=BC\004\276 \331\005>\371\t\032>r\243K<!\r3\275\332#{=ys\367=\025\3525\275\023\n\253\275\330h\271\275P\353A=\264E~:\342D\233=\321x\332\274<\356q=\231\022\030>\320\226\251<\225j\031>\267\026\265=\207\260b=(\271\277\273\022F\274\275\217\367\236\275\357V\035>o\031\361\274\n\210\362=\r\314\020>\3607\033\275\335\353\001>NzX=\245H\005>\357\344Z<\314\243\234\275f\260\332\274\2343\207=g$W=v\"\255=\327lF\275\001\3532<d\232\322=\234F\340\275\312?w\275\020d\235=\0016\350=;\335\235\275.\327{\275\361w\316=\313\351\247\275\002\005}=\351\344*=\212zj=\367\356\212;\341\206U<_\246\270\275\315\036\331=@b\365\275Mz\202\275wD\366\274\212j\'<=\205\031\276\t\206\327\273q\014\033\276u\340\316\274\235\332\n>lA\013>\210p<=\251\002\004>yQ\252=\004\347\367\275U\350\222=\374\020\004>\327\311t\274=\242\010>K\253\242\2757\273\304=\310\211_\274\276\013\260\275\202\335\220<\301M\207;\377\311\247\275\342\376\242\275/Q\244=\206\360\333\275K\030\306=\270\306\263\275\316\272\317<\241\253|\275\235\352c=\341+\230=\337\007\233\275J\244\344\275ju^\275\276\304\214\275wo\031\276\207\315\321=*\203\\=\366\371\257=%\370\247=e\375Y\275:\325\265;\317\377\217=\350\274\270\275t\306\\\275yk\350\275%\216v\275pL\230\275\200\227$\275\023)\264<-J\005>\320F\022>\010\203\023=\276:\354\275S\256\331=\330T\342\275\254\374\016\276?J==\305\247>=\350\354\343=y\352%<\326>\355=%\002\027\276\305\217\256=\r\251\355\275\263\'\317\275\001vo=E-\250\275\220\262\216\274\370\314|<tA\304\274d\310\330;{\233m=I\225\312\275\036\264\001\276;Fo\274\025T\006\276\272w\031\276h\004\244\275&\307\030>\246G\276=\304\030\372\274\021F\037\276\200\376\363\275\240\213\223=+\341\206\275\374\312\352\273\033\247\r>\020R\234=-\241\351\275\237A\033>\351U\265\275\253\236\372:\nW\026>\225N\206=\3609\235\275k\346\207\275\331\266\357=\331\227\337\275\245\314u=\026\355\324<\377\266\345=Y.\305\275\016e\026>7\305\370<\262h\304=#0\017\276P\222\023\276&9\204=|vk<\222C\315\275\020\026\216\275\317)\000\276\302 *=T\236\212<\013\213\366=\007~\214\275\266i\377\274\227N\004>3\334\006>Ps\261\275\352\254\276\275&\217\002>\243\316w<\2336\263=\363R\300\275\036\255D;`\350\201=G\274\332=Z\220\312=b\320}\274{\256\034\275\2408\022\276\324\254\365<^\343\254=rC\267\275\310b\312=\356\302\231=\224\376\264=\370\027Y=\322\002\316<\232\353\253=\266Q\034\2760\020l=\020\241\033\276\203\302\236=@(\375= s\356<n#==\260\256?\275\243i\276<C\221\366\2750\353\024\276\254h\242=\033\376\352\275!K\261\275Q\316\002\274\3225\207\274\216\361\014\276\343\210\007\275\001\005\200=\037\215M\275xn\037\275\217>\353<[}\305=\010\270\034>\216\352\307\275\364\324\241\275\3143\355\274\341\200\236\275^\313\337<\207C(={\247\306=\323\350\t>_*\237\273\234\227\340=\004\331\371\274y\235\322=\020\"\016>P\273\361\274\177\000\016>\372Hm=\034h\246=\006\222B=\024w4=\266f\256<\027\303\017\276\250\240C\275S\321\211<\032\020\205<\271N\260=\013@X\275\262\326~\274\006.\372\2747w0\275\2615\353\274c\0320=\305\370\275\2759\331\000\276\271\333p\2752\317\030>4\007$\275\333s\031\276SW\267\275\207\270w\275\361\330\206=\333\331\300=3\257J=\260\262\352=\003hH\275*\204\002>\271.\016>\247]+\275`qY\273=P\014;1\\R\275\255\314\376\275\200F\t=5B\n=+\267\004\276\246\rU\272\202\324\345=gv\353=\352\303T<\264\203\334=w\347\300\275\263\013\352=\374\312\022=\n\236\231={Wo=\370Z\256\275\257u\346\272W\341\211\273Ax\201=\373L\377\274\347F#=\3016\032\276\206\321\372\275,\263\000\276e\014\350\273\270\031\013\276\370{S\273\3731\231\274\262a\n>\347#\211\273\n,\030>\243Y\266=\271\023\246<w$\304\274\0076\037>\257r\314=\344\032\032\276(V\r>\377\377\344\275\271\343G=h\321\202\275,C\212=\273\261\'\274\326?\n\276\312\374\244\274)\205\341<\357\275\027=\355Y\371=|\257K=\213g\n\276\374P\346=\017\351\253\275\260\037\255=\335\027\352\275\0041\023=*\331\244=\342u\030\276\r\376\025\275\n<4=f7\261\275\365`$\275\204.\010>^\357x\274\362l\254=\321F\260=\331\216\336\275&\272\377\273J\000\206\275(\034\034=\331\223\032\275\027#\353\275\")\270\275E\211\324=\214\206\247={\311\250=H\256\027>\367.\232\275\277\375e=?4\373=M5Z\274E\020\362<\035^\017=\223\222\016\276a[X\275\366\252!=\263\320\254\274\032\312<\273\250\021\273\275\312\025T\274A\324r=\367\244 =T\262\004>\3133a<(\363t=\336\004\371=&\353\000\276\306\021\377\275\riE\275\024\230\244=\355g\341=Z\221\317=\271Q\323=H\350\306\274rK\350\275C\360\030>[\357\200=_\312J;>0\024\274yM\270\274\321\337\360\275\177\036Q=q\026<=\252\207\031\276\340-\302\275a\275\271\275\207\202\006>\376\244v=#\025\232=1E\005<\256\363\276\275\301\303\023\276G\013\363<\210\"\306\274\307\316\002\276\265\345\232\275\371_\035\276\331\204\032\276\345\271\263<\363\332\260\275\336\267\347\275\265\034\311\275\215\233\314\274\273\320\322\275\323a\035\276VN\222\275X\273\204\275\260\204\357< \344\031\276\270\251\237\275>\243-\275\267[\333\274\016Dn\274\210\177\340\275\205\354\027>\377,\016>\211\252X=8\241:\275\035\213\354=\267\357\351\273V\353\271=\355\226\337\275AZ\255\275\027\266f\275>P\217=\250\\\010\276\233\364\271\2754\376\264\275\307\322\t=9\317\332\275\226)\016>;\351\316=\253\272\002>\277\227\220\273\231\214(\275H)8\274\314\322\214\275\036\321\371\275\364}\253=\307\315\343\275H\021\361\275\300{\312<K!R\275qv\014>\212\241\034>\037\224\271\275\265\307\216\275\016\360\014\276\336\204e\275\024\214\027>\035\'\213<3\361\302:\321^\325\273f#\207=9\225\305=\3608\033=C\005{=\000$\274=\250pa\274oe\t\276$V\372=A\323\020\276k\214 <\241\233\002>\265\334(=\341gI\275)\256F<\017_\324=\242\236\340=4\256\002\275\236]\226<\325+2=g#\365\275\321\301\306=9\263P=A\027)\275\336a\330\275\244U<=\336(z\275s\032\350\275\342\250k<\005\013\204<[\206\004>\204s\215<\376_\241\275ms~<\264S\230=\350\374\306\275\336\353\373\275\367b\014>Xk|=\027;\347\274\017!\332\274&\001J=\210\252\211<\3435X<:J\220=\324\266\023=\037*\340=-\240\225\275n\261\377<\0003\352=9\301\323\275\246\233\033>\374L\250=\354,\210=[\271\362\275\347g\030\273\027\035y=T\214(\274\003\233\315=$\211\266\275X*x<G\200\351\275(6\263=\230\351\223;;\354\205\275lp\231\275\002\330\017\276i\367\022\276\352\371\213\275b\240\202\275\301\'\344\275m\200\022>Ev\027\275\223\336\023\276(\321\205=j_\003>e;\214\274\274W\361\275\202j\316\274\241\003\030=\301\320\363\275TNI\273\322S\325\2750\264C=\227\361\220\275\345?\025\274\375\243R=\360{\244\2747\303{\275E\247\320\275\327\205l=\263\t\355<\230w\007\275\303\357\000\2769\340\364\274HO\225=DG\322\275\320\251\306<\006V\364\275\317\"\277\273q\337`<\036}\246=\\\335\343\275\257&\372\275\024d\032\276\302MZ\2757\331\252\275\376\2574=\261\364\026\276\366H\026\274\213q\303=\202\035\177<\246\316\314\275\022\325\035\275\354\035\001\276\227\237\031>\3246\016>\013\177\366\275uK\031>\226\321T\275\317\325\261=\n\376\024\276\365\257\227=\361C\013\276Hc\300=v^\342\274\006\030\270\275\3474\212==~\021>Wq\322\275\331\347\261=\216]\264\2753\0139\275\022\007\003>|\246w=\001\373\252=\354\362\267<\207\272\016\276\250\216z\275\2357A\275U\230\264=\225/\376= \037\261\275=\276\241\275\274\371\025\276\215]\275\273\210\322\257=\000\370\204=\224Mx=\021&\371\275Ye\221\274\231\357\204\275\271D\265\274\326\241\025\276\372\005\267;\027\301M=\237\362;\275\036=\003=\251T\031>\002s\024>\370\276\260<\250\300*\275X\003\374=\376\272\253=\005nn\274\300s\262=.\241\223\2757q\363=\335\260\245=\003d)=W\274\203\275\341=\265=\017\333\004>\014\270\004>\214\024x=\330\201\274\275F`Y=\350\260\304\274D\244\371=\230?\223\275V\354\335<\222/\314=\353\304\363=\312#\006>SR\367\273lY$\275\013 \344=\207\033\264\275\203\315\225=;\216\207\275G\031\256=*\366\332=<\353\357=\317G\035\275\354\254\035>\206\252\312=\'\033\202\275[\340\372\275\236\003\023>,/d:\340w\274\274L\333\260\275#\376\336\275C\034\315=\305Y/\275z\361\220=F/t=\317\330\374\274\261\322\004>\205=<\275\2515\354=\030=\034\273\243U}\275\334\350[\275\013U\361=\316\361\010>\230\323\306\273/\257\243\275/9_=#~\341=O\344\206\275I\211\027>f\224\276=\236\"\217\275\220L\035>\245\214\372;\363\251\264=\265\014r\274\2745Z=\252!s=\241\372F=\n\312\225\275\314\022\016<\376|\222\275d\025\314<\232\221\230=\255\241\340\274\203\t\327\275+D\376\275\252\3767\275_)\254=/\205\034\276\220\270\370\275\010\230\020=i\227\356=r\217\371<\225oN\275\351\227\026\2747\316\333=\333\256\362\2758\371\325=\007\265\374;\347n\350<c\345\300<\256\324p=\225,\323<\261\322\036\276\333v\202<\206\212\272=\325\313u\275\277\006\024\276J\335F<\242\271\301:{%)\275\3522\024=\344J\226=\364\037\r>\245\016\357;\344r\362\2758\336\322\274\225E\323=b\326\033>@]\177=nl\014\276\346\330\330\274\260\200Z\275\337\224\035\276\3241\361\274\323\273,\275\201\364m:xI\231\274\333\330\276\275\017\310L\275T\270\373=\304\3457=2O\240=\003<\007>\337Rj\275\357\301\256\275N\236\311\275\337\306\240=\343\312\036\276\345S\361=\273%\016>\266\353\345<!\201J=\271\352\211=F\343\344=\177\225\244=\261\017\257=\375\214\237=\254\371\203\275l\346\310=r\356E\274\3603\247\275\252B\030<\020\344\336=\000\221O=\036\355\243\275\3457\027\275\333G\260=\213\236Q\275L\223\306=)\030\313\275un0=\007>\362\275\303\036\020\276_S\010\276A\327\373=\332\334<\275\211x}=\210\367\321\273\215\273\002>eE\316=\340\263\354\275.\001\260\274\r\017\031\2762\263\336\274\356$\330=|\354\202\275\273\007\244\275\370p\351\275\304\267\317<\2430\305\275\204\233\347=%\365\013>l\315b=\314\254J=\"C\255\275O\204\253\275\240A4\275\205\234\312\274o\n\316=\356\306\265\273\355\312\270:\003\322\210=\246(\234=C\327\254\275t 1\275\332G\365=\226\351\023\276f0\307=<\007t\275\367/j\275J\307\244\275Q|\340\275\032\242\273=[@\031\2747\373\025>y\024\305\275\023\263\022>(\337\220=Y\361{\275\342~\256\274\337G\221\274w\217I\275@\271\031\275\206\037\332\274\323\226&=\276\341\211=`\311\306=\325\230\250\275\013\000\034>\372=\302\274\013\372t=\310\016\233=\360\023\257<h}\234<\014c\234\275\224\274\023\274q\036\366<\3232C=1\322\376\275<y\235=F&\320\275\316`\320<\367\013\314\275Am\013\276i\344\006>\343mg=E\325\004>H\247\033>\251\312\030\275\341\245\035>\200\3246\275\235H\027>\340\301\003==\301h=Y66=\340$\322\274\205\352D\275>\007k=\217\234#=3\200\2249\000\204\021=\353g\002\276A\247\245:\200\316\026>j\366G<\247\211\024>\372\320\276\275\251\303\316\275}\020\370=\261\033\213=\"\327\307\274d!N=C\277\236\275\311\274\277=\350\"3\275]\013\224\274\270\354Y=\371\001\341=;\375\236\275\307C\343;]$\005\274\033\230\331\275\035\323o=(\205\355\273\252;U<v\351\226\275d\r\t>\353\236\354;\252y\337;\311\346\365<\272\274\023>14\357;dw\320\275\304\252\034\276\334\224U<Y\301\256\274\241o\211=\370\272\027><\311\375\275\233\250\267=H\276\215\275Xtl=\277\330\256\275\224pL=\267\323\351\275m\216\010\274\016\246\324\273\367y\032>\252\242\226\275b\032\035=\212\\\374=|\302j\275]\264E=\001q\300\275\362BP=\301\221\224=\213\245\017\276p\230\021\276|\230\024>\206\022\377\274\270\343\205\275\242\037\202<[}\004\276?\214Y=\304\246\273={[x=&\356\350\275\360\324\327\2755\320\336=\177P\306\275\322\373\360\275q\301\000>~\310\000\276\311\200)<B\362\322=\020\340J=\022\352\031\276\236\'\006=\361\353\n=\221`\261\274\315l\267=T\\\204=}_l=\221\247\242=\202\004\036\276\026\374\244=\000G\271=\207\215\200=3\256\307\275\302R_\275\267\207\224<\200\322\267={*\246\275Z-\313=u\226\363=\355\277\006\276\026\206\003\276\375x\025>P\367\r>eI\366=z\030\276\2755\206\321\275\312\355l\275\311\317\357<\2426\327\275uF\303\275]\357\360\274\304\225x<\271v\372=\212\366c<\013j\344<\246\204\037>m\256\212\274\003+\260=\240\342\025\276Y\005\345<\2725\302\275\3244O=\226\362\014>]\007\273\275w\257\307=8r\252\274\347\304F\274\276uC\275\311\351\306=<\351\211=}\310\332\274 \342t\274i\036\337\274\364\022\376\275\220|5=\300\022\265=\225\220\r<\221)Y=\225S\204\274#~\"\275V\016\370\275\337\212\334=H<s\274[b\305=\303\017\027>UB\300<\032\351\340\275\265\030\306=YT\223=\317q\210\274\024y\010>@)\346\2754\361\024\276\336\231\324=\247R\201=v\214I\275\337\315\362=\227\003\310=C\037\030\275+\360\211\274S\",\275\331\036\216=@\004 =\035~\023\275\261\212\026>\325\265\005\274\354%\350\274\257\352\341\275J\344\347=0\254\036>\2727\324\275\371\325\034>H\261\201\275\024\304\236\275\212G\005\276oQ^=\0264T\275\026]\304\275\264b\017\276%\036\306=og\252=\244\221\031=i\323\n\276\'\t\362\273\326\364\017>\007\252y=\262\350e\275\213\334\205\273\243\367\031>\'(P\275\215\351\223\274\307\312\375=q\3346=\267rw\275\354\211\340=|\335\256=\245no=`)\352=\000\336\035>\332\222\026=\263bC=r\356\n=\265\327\224\275{\223\335<\305^P\275\363\242:<\320,\266\275\0049\016>MP\265\274\037\327\016\276\004\305==\243\025\362\275\013\245\020\276\273q\277\275|C\215\275\235\310\014\276#\014\351\275C\202\351=\247Lu= S\350==\016\023=\331E\231=\242\231\345<\013\240\333=\016\236\325\275\352\330X\275\034[\r>!a\033>\362&$\275P\213\264<nn\260<\306\005\020\276\301]\313=\020h\312\275\201[\233=\263\260\007=e9\224\275\355\260\253=U\231\236\275\360\022\347=\340\3463\274M\213\026\276)\365\033\275\262\205\234=+\207\002>\27316<\"\342}=\343\266\021>&\025\224=~\022}\274\350\017\020\276h2C\275\205\203\320<4\214\322\2758\034\211=\331\265O\2740\266\000>kz\310=\214\010\022\276\210i\256\275B`\271=\220\352\346\274\227\004\331=!l9\275^\017\305<\225&\253\275C\010\001=hp\357\275\336\335\n\275\007\356\213\275\025O\001\276\216\263\202=\313o\232=z/\260\275Z\252\004\276\024~\231=n\375\371\273`[@=\230\341\314=\000\245\013\276\005\317\205\274E]\306=\333\023\362\275\r>\003\275\243\275u\275q\377\t\276\366g\005=\2774\324;\322\327\245=0M\237<\201g\006\275\327\271\220\275\341\336h\274\'p\365\274\366nB=l\210\013<\251h\337\275g\227\251=\'\301\277\275cf.\275D\377\233\275S\270\247\274\034\310X\2757\377\010\276,\344<=\2326\272\274Z\211\024>\217c\373\275\017\206_=k\244\370=\301Y\037>%sp=\362a+\274Yv\376\275{\342\021\275\022~o<n\304\267\274\366\001\210\273UL\360\275\367\201\314\275`\204\331=\t+Z\274\257\274\n\276\r:\315=1U\030\276\310\244\261\275\312-\027\276\003\353\223=\373\001\262=\030\371\313=q\236\200\274kR\004>\372a\031\276%\200\027>\272+\020\274\221S\253=\235\006\313=\235\267\236\274\327\267\000\276=\245w\275\233*a\275\363\202\r>P\342\226\275I\361+\275%\211 \273\007\207\215=\301q\340=\037\025\231\275\230\003\236\275A]\004\276\367\016\000>g\216\351\274f\264\371=v\237\016=\342\376\326\274\273\357\035\276\3033\277=D\211\303=\r\227\202=\220\354o=8\352,\275\033Aj=\341\003\220\274+g\346\275;\354O\275\212\322b=\377\242\000\276\301\311 =\200\267\341\275\371\346F\275\371 \247=I\354\021\276\022\202a=B\262\025>\036\3739\275[\032\366=\323X\327=\350/\364=\271\330\\\274N\014\254=\343\253\377\275\372\322\257=}\305\356\275\212u\002\275m\211\334=\251\201\242=\355b\025\276\375u,\275\212\013I\273\341)\220=\231*\005>f\354>\275\221\236\027>!tO=\305\336S\275!\320\212\274f\256\312=\373\357\372\275\027\306a<\224\206J\274\317O\031>\304M\364\272Q9\305<\340 7=\"\310\276<\n\273Z=\020\004\r>5S\016\276)\370\242=EL\332\275\312\264\311=|\274\215=\377Po=X\n\005>\367\252%=\374Wp\275\017-\365=&zr\275\275\272\t\276\337\217\024>\\#\341\275\\(\031>/F\213\275f\226\260=\267G\t\276\342O\274\275\326K\252\275$\302\024>\321\231\323=\020@\315\275<\344\217\275\022\027\021\2752y\025\276#\332\265=%\002\010>v\310\316=\260W\025\276P6\215\275zc\024\276\245\316\243=\273\226\232=\\\355\031>\257t\301=\362\013\304\274j\025\322<\303D\213\274\313\344\t=\372\257\343<z\302\014=;#\000=\277p\010\276nR\t=G\307,\274X\265I=\305s\301\274\252\314\262\274\356x@=oM\225\273\215\235V=\370&\037\276<=\357\275(_\034\274\334!\365\274\204|h\273\356L\355=\315\200%\275\224=&\275\311J\376\275\370\025\302=\211\374\021>\345\311\344=\220\014\233<\374k\277:\272@\022\276\370i\217\274`\235\302=\334\212\330=\263=\004\276\207\030\242\275K\214\267\275\022\236\321=5l\353\275\215\231\370\275=l\035>\255\342\216\274n\227\234=\210r\220\275\206,\023>y\347~\275IE\376\275$\212\240=\362w\037\275@\357\371<\201g\345=S\333Z=y\271\304=\342\342\017=HQ\334=\020\253\326\274\272\022f<\352=\010\276Su\265\275\222\001\001\276t\266\307=\267\325\357=\251\217\221\275)\303\030>m\333\032>\277\270\014\276t\267\345\275\004\337\315=`\276\240\275\350]-\275\304\342\231=\366A\207\275\3617\330\275Z8 \275\036y\034>\r\353\252=\351KX\2751\200\376\275\020tS\275\007\301\203=\330{\032>\243\367\332\275\313\275\225\275\327\"\242=\261_\272=\360\333J=\202\237\237=}P\343=\276&\021\2768)\t>\244.\027\275Ab\r\276\016|L\275\244\331\026>&\341\231=}Y\275=\\$\322=\251\230\032\276\262\220t\275\355\207\235\275c\356\205=\316\210,\275\372\333\321=\245\374\303\275w$\013\276\211\263\271\275g\364z=s\341\275\275\313\364\277\274\224!\033>P\375e<\346\213\252<\2721\"=\257\207\034\276\030\0345\275\241r\024\275\341\311K\275\027-\302\275\025\177\000>\273\300\344=\002\'Z=/YT=\252\301\210\272o\335\211\273rL\307=\267\177\335\275\253\3712=\300\316\335\275\327\254\320<\3526\350=fC\222\275\345\321R=\030\006W=\274L\306\275Z\022E=_Lr=\200\205\007>\302f\236=\025M\200\275\346\276\322\275\321s\221=\273\022\316\275\353,\002\276jkS\274\307\320\032>]O\251=\3722\262\274\273\332\007\275\216\216\312=\265e\335=7\316\354=\315\304\376=t\236\346=\3745\325=\277\315+=\0007\217\275t\303(\274\333I\322\275\026\243\020\276\355\327\257\275\314\255\022\275\230\0332=\263\202<\275\332?\376<%D\023\276R\267\365=\240\335:=s\305r<\2067\211=.\273\251:)K\020>)X\252\275<\230\234=d\"\310=\225\027\353\274$\202j=Z\335\367\274\021\017\001=\262Z\033=\001\377\304=\327\365\264\275\n\305o<\313\372\006\276_\347\260<\312\307\206\275J\177\006\276\006\025\323=b<\310\275\033\304\016\276\341\351\016>\305\002\304=#\373\021>W\037\021\276e$\037>o7\377\275Oo\033>\322\321\322=\256\304\t>\306\247\374=\336\024;=\271\347`\275\335\2006=\0074\n>cZ\337=V\026\030>\360_\017\276)\334\n\276\021\226f\275E\243\353\275\363\347\232\274\0000\276\275\001\035\277;\274\367\376\275\"\375\365\275H\251^=\237s\023\276N\t\324\272C\261\300=\377\247\233\2745\034\023>\351N\376\275\305\216\226\275\324\234\017\276\263Y\007\276\357c\\\275\220\344\350=~W\350=4\217\266;\003\347\242<(n\022\276\246\"\254\275\247i\032>\354*\331<\317\232\277\275\002\254\262\275C\253\221=(m\250\275\355\346\372:\200b\035\272\374P\037>\224h=\275\201\342\000>I&>=\247\3058\275\3670\030>\003%\374\275\2557\321=(\353\030\276\276\023\266=\252\023\255<\340\025\300\271\tyA=\364\177\233=\220P\027>\245\204\361\274t\364\321<\335\216\277\2743i\201=6\033\260\275\237\263\t\276?\237\242\275\244\216\352=\257j\364\2758\335\371\275\255\303\314\274~\275\315\275\310E\007\276`ZR\274h\036\336=\037Q\347=@\224\301=\362\000\002>\364,\363=J\255\370\275e\251\323\275\242\013\016\276\270\362\215\273\315\266\355=\231\303]<-8\312\275\351$\212\275]\024\300\275f\323\223\275\260\235\276=B\264\277=*L\036=J=\371=\250T\037\276A\222\030\272p\217\324\275\343\014\317\275\253\245v<*z\264=pU\303=\251\n\334\275\314\311\353<8s\016=\251=`=\031\367\311=l:|\274u\025\021\275\243B\346\274\031\332\034>\"t\321=~\021\030\276>\213Y=~\360\272\275\301\333\000\276z\263\013\276~\000\335\275}R\017\276R\306\312\275\234\211\327=\332\255\022>;\241\033\275\343\230\311:\372.\353\275\317#\001>tm\204;\001\3757\275*\006\020>\364?\310=6j\021\276$i\350\275q\030\240\275\215\322\275\275\220\321\005>\2544\372\275.\002\000>\342\334\010\276T\274\247\270\212\321\340\275\335\022\271=L\271\203\275\301_\224\275V\004\002>\036U\214<Jj\304\275\352v\370\2753Na\2753\324\377\274\005\370N=\n]\302=\020!\025>\037\020\306=@\034\016\2762\361\035=\255>U=\222\257\224=\302\225\352\275\325\357\255=\245^\213\275\216\204\n>(\243\004\274!\327\035\276\247\370\312;\271\224\305=,l\270=:\"\313\275\3376\332=\236\021\351<7NI=\001V\321\275\014\275\035>H\215M=\240d\364\275\031\334\026\276!\345\264=G\301\020\275[0D=g\263\363\275,C\024\275\007\254I=\333\331\025>E\332\036=\016?\250=\"\031\217<\333G\347=,\275\331=&\334\266\275x\222\314\275\267\300c=#\312\333\275\264\327\254=\361\206\375<<\203\026\274\224\356\022\276\nlY\271\3257\205=\315\200\326=c\341\006\276\272U\177=\021\240\345<\262\375\035\276\033s.=[`\277<\337\343\227\274r\363\253\275f\334\373\275\351\027\205= \240S<\255\300\214\275\375\016\013>=\346\277\275+\201\232=\375n\362=\222=\373\275\257\005\035>\275\232\"=\2559\203\275Wn\241=\325Y\n\276\224\306\270\274\277\014A\275\265\031\250\2744\244\307=\373\373\357\274\t\006\330=\303\222\365=\200\303_=\"\022\376\275\002S\247\275\332\220\315=pF\005>N\241R\274+\362\007>\0212\331\275\256\344\226=\314\277\262=T~J\274\301~\274\275\315\342\017>\003\022s\274\261[\r\276vg\030=\201\357\315\275\244\031\302\2757\251\331\274\327\347\325\275e\373\222=\220\257!= \365\351\275\032\235\034>*\214\361=\027\263\331\274\361m\263\275\0030\217\275\310\266\336\275X\243\261\275eH\342=C\330\256=\023\016\231=\267X\026>\016\241\021>HX\240<\216\236.\275@v\351=%\301\003>\203\270&=\207\352\272=\023\3402=\035%\270=\001\016\364=\275V\r>\010\251\002>1\211K\275Z\347\301=Y\335\311\275\346\327~=\037\224\313\275\336;0\275W\375\371\275\207~\343=\352\260\322\275\037\r\345\275\377\372\307\275X:\021=B\005\027\276\t\333\255=\332o\327=\r\'\246\2759\276\225\275\202\000Z=\271\004\320<\247q\361\275w\257\302\275\247\261\370\275\363\021\260\275,xR=\003=\222=\000\204\003\276\234\255\374\275uz\r>\n\222\227<\266L\352\275\202\363\304=\275\212\306\275`\371u\274\365\000\254=g\376R=\214\006\177\274\336\232\370<\024\237\237\275xc\t>\365\020\366= )\026>y~\273\275c\005\242\274E\262\023\276*\026\225\275\232f\014>\307\344J=\225\273\315<\323\355z\275\343\261\272\273\037\206\324\2752\033\010\276\244\361\254=w\240\360\274\275\221\313\275N\024K\275\223\t\270\2754\021|=!jB\275\345\356\233< )\033>\007W\002=V\303j\275?\275\361=B\335\001\276\023\250\307\274R`c\274\'\264@<\212d~=\"\262\252\273\365\n\360\275\032.\025>\354):=\227\366\326<O\205\337=|\224\007\276v\241c=\322O\001\275Z\365\024\275be\204=@}\225:\307H\245=\205\223\223=XG\323\275\345C\017>\233\017\240=]C\035\276\324!\230=\230\205\344\275\025\263W<\370]\355=\027\256\025\275\204\230\300\275\313~A\275\014D\220\275\330J\255=\275\310\365=m\245\026\276v\007\206=\340J\'\274CM\017>r\016\245\275L\324\006\276\037\375\371\275S\257\004>\214\327\231\275\006b\375\275}\277\237=\300\354\326=j\237\211\275\302\246<=\213\\\020>\031\234D\275%|W=\242\010\036=\2034/\274\322\202\231=\2723\271\275\310P\027< D\372\274\033\366T=\236\031\020>\013\312\023\273I\266\037\275\\!\260=\017\377\220=\227\321\014>\374\'\233\274f\307\277\275\351_\037>0\000\315\275\241d\037>\030#W\274\205\243\013>\335\034\004\276%B\310==\341\215=\331\241\r>\001{\n\276S\322\355=\276~\020>\0270~\275\364\316\304\275\366A\025\276\360\335\367\271"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\261\257\';\\D\210\275\033w\375\272\376\003\005\275\224\303\213\275\361}\003=\035\271\343\275K\252\236=%\213\262=\020\023\370\275\365C\236\275\352.B>\026Q/\273\347RL\276\037,\003\274\203\201%>\217\310\254<\007\017\255\275\310\234=\274\373|\033>\036\317D\275\010\'\031=\245\312\014\276\321\311\243\275=v\236\274y4Q\276\301\257\251\275\032q3>\223\222^\276&\365P>\003\0377>}\336H\275;k\032\275\225\3523\276\252J\004>\251%\\>B]\005\274\003\335\255=\"\370\217\275!\315\261=\357\205\035\276\310\262\364\275^\345\374=P\252\376=\306\031\335\274Z}/;\302\2443>a\322U=q\211t\274\314\221\300\274c]\321\275\273\301\333=\025\344?=&\210\210=\365\014\222\274w\026e=\375\211`\2767\232Q\276<\214\304=\'\035\331=F\356!>D\235O\275\"\251\262\274\246\337 >;A\223=p+\222\275|\2078>\314H\004>m\343\013\276\315#\025=\025C\036>\006\017N\276\357\232`>\267a&>\004\253Y>\241TF>\010\315\r\276\252r\333=\266\213\033>#\241\260\275\225\324B\276>%\202;\242\306\350=\316\303\345<.\316\253\275\270\023\336=\177\312\025\273\216\216\253\275\366\2036>\033+\023=n\004\250=\311\231\334=D\370\253\275X[\340\274\"\2514>Q\260)\276\264\016\220;?\267\213\275\264{\262=\334\"u\275\324r\025=\362\331\334\274\027y\013\276\017\355D\276X\2305>*v\233=8\266\036>\312\211a\276\263t\350=\230$\320\275q\274\'>\233v\346\275\274\266\357<\373\203\317\275\n\305\254\275@\323^>\'\300\272\275<~\210=\030\033t<\365\312K<[\252;>\320\2516=D\237\325\275\333\303P\276\311\261@\276\273\372\302\275\007]\027\275H\013S>\002\202\004=\326\\\355\275U\274%\276\3744a=\007\375\252\274\214\317\022>_@\037\276\302\207C\2759ML\276\327\277Y>i\"\333=y0\020\276&\333\033\276!\217\273\275\017P\241\275g\271_\276}\253+\276p\227d\276\017\361\206\275\266\301\233\274*\025D>\210O\n\276\225_S>n\233m=\005\013\004\276\255QT\276\331+\347=\243\207\315=\336#]>\264_\340\275\300a\316\275\326\354\232\273WL\274\275\274\212\226\274Q\002\032=U\253!\275K\021\014>;\272\234\275\225\017U\276\3126?\275\336\217%>%6Q>\205\361g\275_\245\022>\364{\303\274\331\025S\276\000l\327=\331\254W\275\206\315N\276\335\243\224\275w\237\357\275&\026\030\276\226\262<\276\365\244)>\303\373->\230\221\354\275\\<\314=\254W\004>\346\n\302=\004\207\275=\317\277\263\275+\242Q\276\374v\037>>]\311=\006Q\366<\214a%\275\022\326\226\275\274l\337\274\016\000^=\227H/>\322J\363<^nA\276\211\217\347\275\225\216b>\360i\226<y[V\276\354\361(>\255\241\226<\246t\340\275\360p@\276\211-K>\266\264\305=\"\325\333\275\300z\250\275\033\3666\276\336\334a>!\357@\276\250\272\377\275\r\035\226<\t\305(\276Su\334=\315\024\017>\020\337\013\276\330cG>\347\020T>\354\356#>\010G \275\232\341\212\2750\035?>\314L\255=O\361=\276\257\217\021>b\"&\276R\245\301=\370\227\220\275\245\256 \276\032G\"\2769\271`>}\373e\275\220\346~=-\233C\274\263\320;=\2448_>\350\367\022>\221\256:\276\235\327%>CF\215=q~6>F\263c\276\365x\006>\202\262\300\275\350\\\017>O81\276\310N\275\275\352\r\334=\007\301<\276YM\346=\233\206 \274le\372=|\272\340\275sC,\2759\342\004\276R\261h\275A\006\261\275\'\200\001>R\237e>_*\\\276\027\302!>\27555>\270\000D\276A\030\017\275\257\343Y>\004dK\276T\253\240<>\357A\275\026\010\021\276\374\371\225=\252\0279\276\211P\352\275Ln\315\274A\036\251\274-\341\020>r\202\365\275g\276\205\275\272l<=\n\224\010>)\277\013\276\260z|<\010\230\364\275j\351\030>\277A<\275\036\3650\276\365\365\243\275i3@>v\203\265<\244w\221\274\263\271\031>\364\264=>p\321\273=\273#!\276\203\246\001\276\334\236\335=\003\232\\=t\317\006>f\307#>91\016\276\023\233\331=KEl\275\006m;>\351v\t\276\374~G>\203e\370\275\320\':>\240\373\360\274-\003\341\2737\270\004>\340\273\312=q\367\020\275\263Z\230=2}`>\304\225\205=3\252\036>\333\207V>\277\"\257=\035\305b\2760%!\275\236\3171>J\261\375\275\262N\347\274L\310\003\276\324\245\366\275L\321[\276Q\257\346\275\342\243E<C\036\006<\301\363\333=\024\323\'>\231N\366=\372\322E>\257\017\212=\236Se>\225&\375<[\361F>\370\014`>\342\3000>\rS\222=!9\007\276\2216\203\275Bt\220\275\360\235N>\324\350\311=t\272O\276 \341\021>\374\033\242< \034\237\275\2643\004\276\242JD\276\034g<=\225L\232\275Cf\"<-\"/\274~\024%\276i\274P<\216\377U\276\355K\316\274\036\303\250\275,\323/;\240\'\304=\234\264*\273718=\371Q(>dv.>X\'\205\275\006\203\275\275\376C\315=\344\260\025\276x1Q>\004\214\362\272\333\031U\276\"\371\221\275\255\273\006>\256E\250\2755\333\267=\246\346\324\275/-=>\305^\023\276\245\004>>\364nU\275\321\315\270\275\360q\233;\304\374\332=\264\213\237\275\244\017\231\275\331\350\023>\034uc\275\371\3523>\370\377\222\275\004\340\356=,Q+>\000W6>@\003\243\275\221\277\021>\362LE:\376tF>\346\013\337=\305i\252\275\371\225Y>J\002F=\225\371@\276\\r|=2\251 \276Ii]\276%1\371\275\377\205\030\276O4\333=b\374\004>\017\0245\276\264\037Z>$\035/>\333\022^<\231]\211\274tm3\275\177\203\366=F\252\262=\256\346}\275L\256\037\276w\272\322=\214H\326\274\003/#\276z$\316\275\301\241\022>q\265C>\3627\266<e\332\210\275\211\313a\276\017\266Z=\257\311\302\274)\326\032>\210\014\">S\013,>\033\210\351\275\006Q\230=Mr3\276t\203J\276\2725%>^\005\362=\372\026#>f\204]=\327\251\257<c\311\342\274*\023F\274\016\374F\275\211\225\260=0\330H=\245\034\360\275\2469C\276\314\026\265<\311\363)\276#i!>\327\211@=y\005n\275\243Y\005>\215\031[\275.\"D\276\262,\006\276Q2\213=\214\232\033\275\275\317\026\276H4/\276\310<F=s\240:=\235\325]=\242V\025>\264\202?>\275\360#\276\220\251\201\275\344 \377=\025\014\274=@xe\276wz=>\004\272\016\276,\300\026\276\3425\004>\252\271\210\275\221g\377\2741:5\276\273\226\033\276\332\365\372\275f\240\340=\255}]>\004\262\223\275\373sC\276hYX\276p68\276\200#\010>\342\235\326\275F\361@\274t\017\271\275\221B&=w\250H\276\r\265\276=f\231U\276v\265\211=\342\310/\275\266I\037\276QY^\276\010\335><\026\255\236=T@$\276\267\355\336=\325<\003>\206\352\362\275\225\217\236\275\010\232\334\275vY\204=\305\320\366=\277\374\000\276\306\021\'\276\024F\277\275`f\024\276\342\356\222\275Yf\316=\340\352s\275\213O\256\275\242\317\226\275\231f\355=\360\300\250\275Y\300\344\275M\327(\2769 Q>OF(\276ap\"\276n\337d=\3258\037\276\277\2147\275\357\032\307<O\022W\276\223\324\036=\201\211\032\276\021c3\275>?\372\275\035\274<\276\270\355\344<\200\260\345;l\014\344\275[7\010><\266o\275\237H\201=S]\030>\311\337_>qn\002<\247\351\350<\2739\027>\275\254\321=L\377I>\235\201\202<\310\342Q\273\003\"\017=\0370\206=g\017\016=\272\001\221\275;\263\344\275\361\357(\276\205}\201\275$\3606>\234s\366<M\227Z\275\352\241J\276\267\t:\275\r\207\316=}\235G\276\035O\032\276\022K\017>\307\027\347\275\220\005\203<\274%=\276\\\370\013>oCQ>\320j\016>\325V.=\261\311L>T\242n=\267\240A=\2608\033\276\272`\020\275\246@\336\2759\356\364=\0075\'>]\322F<\371\216B=\243\243\017\276\0036\315\275\202\335\014>QB\200\275\375\035\321\275h\002\307=\327rK\275r\306\234\274\273\206\001=8:\002<\356\364]\276\341\303\372\275\240\357\314<r\031\206\275\267\256}=\216\034@>Nk\245<\235\276\271=\301\307P\276\364\354\031>\355\371\373\275\314\306\202\275:Z\367\275o\272\325\275UX\336=\013g\227\275\213\355V\276{\261\347=\021\266?>\222B\347\275\215\365\035\276A\3534>Z\2519\276\035\035\321=\2435B\276d,\027>\305Z\254=\362\235R>P\324W>\275\234\t\275\025\244\'>\235\200\002=\n\035\030\275\037o\013\276`oX\276\257L\306\275~\351^\275\2420!\276\2527\255=\021\345I\276\345\227\336\274Y\363 <\376\307\256<C\014e\276b\272\225\274DM\016\276\024\261Y>\350\200\224\275\234\321@>\363\210\362\275MX+>\343\026j<A\264?\276\261w4\276\230P4<\246\017Z>\372\375I=\225D\315=\313\367\272\275\010\300/\274\2548=\275\346\177\372=\344\227\014\275)I\220\275\310\032\036=\320\3403=x\340@\275\320\274\211<\375t\263\275\275\233\003>5A0\276\037\353\021\276\371XF\276/Xt\275<\252 \275\310\346\323<+\236\020\276\374\243\017\276+\343\214=\331\\\260==\3353>\272\366\314<\006EL>\035\024\035>\022\242d>3\301\240=_\204Q\276\363;\310\274s\361I\276=m\362\275\361\266<>\023\001\034\276\225\234\016\276J\212R>\336|\037\276\t\377O>\022\233\343=\331\244`\276D=\372\275\2402\202\275\017\346\034\276\357\274\314=\214L\377<7\007F\276)9\352=\003\002\027=\250\335\010\276;Mb>\017\353D>\275\300\017> \346~\2755=C>b\200%\275\021\212\357<\373<\317=0I\230\274\227\237\031>\355\"\234=\nm\013\276i;^=M\026V=\342T\343\275\367\274\262\275\357\235:\276\201\207\306\275\322f\252<\316h ><\026\251\275\370\032Y>\274BR>\330\242\354\275\006\214\375\275`p.=x\276\000\276\252\036\371\275~4.\276\030.\025\276\005\335)>\224\300\177\275\322dT\275%\t\307\275\265\277@>\\\351\312\275P\377\003>\226\313H\276\352\212J\276-\315\036\275a\237Q\275w\245\367=jc*\275\227^Q\276\037\310\013\2752\0227\276M.\004\276\367\300\202\275\255&\212\275\256\373\302=4K\034=S<\211\275;PF\276\2074\320=\27310>\221;\">\375\010M>%,:\276\322\265<\276P\220\352=\225g\216=1\003\033\276\355g\242=5\006\350\275AAQ\274\274I\'<Q\016\030\276C?5\276\372\245\351=\367\202\024=\021\2369>&*<=o\231G>\033\004\350\275\227\277\202\274;\356\266\275 \3646>T\250\236=\276\2718\276NP\'\276\307\250\r\276\214\360\027=@\2507>\022v\004>_\361\227\275p\216\236\275U\310\336=\361c\022>g\254@\276\272\373`\276\246\215,\275\360\256R\276\306\341\013>\332c->Y\177\000>\351\244\032>\233\261\260\275\243\311\014\276R\265\031>\371c0\276\032\344Y>\242\231\346\273apG>3X\016=L\331\202=o\373\n=\2377\"\274\225\220\023\275O\2025\276Ec\006>\214\267\270=\037v\264\275\2070\023>F\315\335=\256\362\367\275\010 b\276\213\355\212\275\223\206\020>i9\273\275;x.>\302\327\233\275?\025o\275C\020a>+\234(<\230\354r\275[I\300=D\331h=\241\017 >\360Ca\2765\303!>I\264Z\276\367:\212\2758\305R>w\344\222\275\026\236q<\247\305.>s\273-\276\031{\344\274\'\207c\275\206:c>\253\3275\276\241\027\013>\361\023\024>\025v\022>@\3728\276\321?\241=\276[\312\273t\326)\276MA\n\276\243\266Q\275\310\356\323\275 \254\212<\236\376\3249I\367\243\273\343\005\201=\001(<\276&4{<\256\310|\275\253\317\337<\226\324\013\276\314\361\014\276\234KR\276\256}\327=\013\022\031\275=\375\213=\375\356~\274`bd\276\037hF\276\244A\'\276~Tv\274\334\023M\276\342\316?\276*\253c\276\256\177\231=\360\002\216\275v\253\356<\371)\014>\010\215V\276\260\003p\272AO\245\275\005\226Q>a\243\311=\217\266\205\275:QL>]k[\275\354\241$\276B\032\232\275\306\254\254\275\023@\r\276\356\254(\275\346*\034>\237\327\022=\242\316N>\217R\343<\264\300\323\274\355n\3219)Q,\275\361:\024>\030XC\276:\254b\276\271\352\254\275n\326\321\275\207\323\255\275\317\214\036>\352\343\276=wZ\244\275\335R\346\275t\321\036\275\365\026\373=\347\344/\276u\270\027>\221\217\337=\014\351\250=\204\364\003>\377D)\276\353Me>xG_>\3563H=\273\362\035>\204,+\274;s\301\275*\353\267=r\374\013=\375\306\036\274\214:\000>\250(\231\275\207CN\2766\032?\276\241cI>2^\000>,\363o\275\240i?>\010i\016=\331\275@>\273R&\276\333S\316\273RJi=\243\234*\276\305\010\371=\330\n\346\275\256\313E\275\345\315\014<\273\004\216\274\334Q!=\271\204\334=\330\253\304\275\225.,\276\350\211\305<m}\037\276\\\353C\276|\271v\275[\026O>\004G\t=\r\331;>\375V\"\276\367\227\372\275\313\014D\274\006\005\275=\3262\250\275mP\301\275.(B=m6\r>\302]Y=\007\0071\276\236\274\'\276\021\005\204=\254\351l\274]x\275=\005B5>R\007>>\025\337\002\276\013}+>:\320\250\275\242\303&\276AU\331\275\\yL>\325\300_\275=\247,=-)\035>\034\252\315\274\202\005\027\276M\246_\276\375\027a\276\305\307%>\035\346`\275\022\271\023>\300\307$\276^\352\005>d!W>\374/,\276\263R\331\275\t\027\004\276\232%@>\335\212\227\275Vz\033\276\014D\231\273\267\365\265=\332=Y>\217\2717\274<\227S>21\376=\264\224\212=\332[)>t\231\r>\255d\n>a3\236\274\027\037\246=\374\350\353\275\242\250?>\230c\003<\002\300B\276U\006\"\276p\r\242<m\377\r\276\311\245y\275\014cX\275,\266\362=\t\025\\>\355\2300\276R\320\010>\326\2235=8\2510=\031\273\376=}\026\302\275\305I\376\275|\327X\276N\006\024>\032\231\016>\232\361\023>\267o\321<b\0060\276\240\275U\275\276\240$\276\203\341\022\275%\030\022>6P\207\275\325\020>\275\\\271x\274\373z\222=\221\230\257=\227\340\020\276\272\313F>\315\013\315=N\363\320\274O\325\267\275\237\374\243=\371\201\031\275\370\347\014\274\304\3306>\343/?>\372u!>\r\022d>\240\272\316<\343\261\244=\210P\247\275x\367\034=\340\036\'=g\313\031\276\002O\271\274\305\2779\274$\210\347<\t+\321<\036\0177\276\202v\350=G\371S:\255\025d>\225_\315\275\016\236X\274C\300 >\333}b>\370\272\276<l`\351=\334\270G>\024T\010\276=\363\244=\317/U\2766\347\361\275@\016\377\273k\033\030\275{l\200\275\246\360\024\276\2646M\276g\n\351\274\37324>\004?\020>\306g\r\276\200i*>3<V>\266\2606>@^\246=}o\200=p\247\370;\207ZB>\003\211|=(@\031\276\036J\373\275\005=\333=\273?\032\2754\0241\2762\265\377\275\377-Z\2741\362\010\276\276a\327\275jK[\276\304\331\276\275>\307\260=^\323\003>\374T\342=\010\257@\275P:a>\021:@\276\212\334\025\275\332AA>w\261\365\274{\265\367=\344\003\362=\037P\334\275\217|V\276\024\014\004\276W%$\276\267\245\014\276\022\017\322=\252\361@\2769-X\274S\307`>\210\024\311\275a\243\212=y\240\030>\211\003\003\276\322\207V>\017\261,>V\343f\272\214\370\301=\357\r\375\275\024Y)>L\253$>\270\013\235=fbS>\2426\377=\3469\340\275si\324=po\217\274\206\036+>0U >\327R\204\275hXI\276\312\024[\276\231b\267\275ycV\276\303S*>\206\326\026>\262\311*\275\222\'\001<\353\300\024=v[\016\275\206\263\026>\213b\374<\233\333R\276\302s\233=\315=<>\237\231c\275\201\212\034\276\035\327\235\275\272\025\007\2763e\212\275\366\222\261\275\367\237\006>D\350\007>\032\367\027\275\\ht\275\377 \024\274\025T\017\276\215\031\332\275\222c\357\275\231\177@>{\326^>Q\244\031>I\004M=\271\261(>\031\342&\276$g\022>\016\246\013>Zy\314=\335\t\200<\251mN>\220\342\274=\367\\W>3\013\271=n\207w<\356:\341=\316\214\315=\301\375u=\233\320\220=\274\342\362=O\326A>8P\016\276\001\232:>\206\311\n\276V\363\312=\345\356\303\274\300<B>\354\204\000\276\003c\275\274j\300\367=\220\315A>\314\241\026\275\366\204\225=\251\312\321=\320Jj=2W\004>S\205\375=\340\313O>\325\240\\\275\026\262-\275F\370\'>\377E\237\275\017_\037\276H\312\302=\276\217\340\275\361\256#\276_.g\275\203\323\306;\r\256\351=yuG=2\222\037=^\266\001\276\010\026}\275`\236\332=\231\2400\275\021\227;>\032\222\274=b\277\227<M\340\021\276\270\334\317\274\372\354#>b(B=\325\272\313\275\nk\010>E\375\363=\231h\377\274<\263\017=\032hO\276\"3C\276\300K\035\276_\201+>\362\3313>\375\223I\2760nT;Q\262d\276\313\321\356\275\363\216\211<r\345\021=\010\3064\275\335\2163\276\316\311\262<\253\032\361=\026\241N=\375\363v=#.\224\275\342\334E\276\304\227s=\335\244X\276\247\'e=]=g\275\251Z\316\274(0\006\276\266mX\275H3\261\274\341<_\276D>N=O\\P\276\265\271\037>\243\303\031\276\003\237\013=@y\'=\327\2643\275\215\006\304\275\316\310B>\037@Q\276\356\016\r>P\340\371<N\205b>n\002@=*\001\326\275\222\231A>z\370U\276\324\r\341=\021\244H>\037\273\211\275\233+\200=9i6\276\201\373\037\276\343\005\254\275\230\374\004\275\305T,\275V<\322\275\'@\005>\3618\357\275\343a\256=\032\213Z\276y=I>-\245\257\274\000wA\276\270GJ\274xj:=$\267/\276U\371\021\276\210\375\364\275\002\272\024\276\003\300\357<K\215d>\377\257<\276K\343\016\276\365S\273=N@\3369\376\351.\276e\200\245=\237-\251=\376\026\277=[\256\017\276\365\330N>\243\256\001<\271\250\260\275nsH\276\362 \322\274s>\360=\000\212\364<\232\373[>j\325m\275\211E\327<\252rE>\201\200\242=\335\274\\>\021\364&\276\312\302R>G\022\003>\304\t6>o\002\362\275\0011\202\275\3028D>\2126]\276l\346\032\276\370?\253=\331\005Y\2764h\314\275\322\272^>D\245\230=\314.\212\274\340\243r=\266\3047\276|\326[\2768\0208>t\324!\276|\324C=\311\321W=>\237\010=\311\\\027\276\332#C\276a\361\332\275\344:\030> \325^\2749\305Z\276\274\315\256=\225\254\202\275!\373V>\277!\014\276\344\220\313=\271[\035\276\006N\">\343iN>\325\303\253=t\302\356=\264\0103\276\030\304\371\275\257\205\036\274\007=a>\324b\247\274d\312\313\275QZf=\357\374\003\276G\356\366\275\034\210\000>\315\216\255=\353\2205>\345\026\262\275\250ZG>\347{d>\240E)>y\036*\276%\247\314\274\306q\013\275b\003\271\274\374\tK>=\216c\276\351\254O>\200\023\206=\267\315\307=t\262\302=J\220\330=\300\344]\276\226\322T\276\361\375)\276Q13\276[\371F\276]\013c\276+\314.\276_\337,>\n_\204\275\220\343\200=\241\r\255=\361\270X>\312R>>\364BX>\221\240\001\276\n#\276=\305w\000\276\371\256\221\274\007a\357<\006\250\307=\035\024\373\273\245q\225=A\332Y<V\272H>\2120&>>\231\356=\354\317C\275\332C\245\275{D\010>\n\224\t=\354\003\332\273\247S\213=\250fB\275\322\2604\275R\342w=\241\260\337\275\216Pa\274J\2578\276<\375_\276\262\207P<\264\222j\275\244(\031=H\233`:\031\3139\273Z.4>h&,=\300\225\t>\300\220\352=A\265:>\330\255\362=R^p\275x\027\'\276\230\2215<u\270\022>\276\367\r\276\304_\262=\201:\231<Z\222\307\273;_\211=\027\366T\276\223\367\003\275\001p$>&\3603\2761\357\276\275H\177\001>\"OD=\035\367)\276\276*(\276\326\304\272\275\214\334#>2{\\\276\020\245\207\274\022\201S<\2477\r\276}dK\276\360\021W\276H\000\305\275Z\010\006>\324#\373:\3105\227\275\214\364\357\274\266\277B>M1\355=\216\330T\274{\211\"\276K\312\230=\027\023\343\274\\C\317\272w\320\014>V\342\013\275\264\035s\275\302X\273\275T\222\327\275\223\343\366\275*IA\276C{`>\251\206\267\275\262\3726\276\273\235\261\273\240\255\304=gn5>~.R>(\276\221\274\226\202\360\275\035N\006>\322\202\024=q\207/\275\203\007C>\001u\314\275\260\333\024>\'\207$\276\334_\007\276KsD\276\270\222\241<\222\017\r\276]\365O\276(Q\034>K%!\275\307\222\370\275\2734\021\276\262;H\276{93\275\\\316\031\276\225\254O>p=:=.\374\006\276B\351\036>\274\037\036\276\212\204+\275xE`\275\004\204\335\274\315V\235\275v\345\030=ZS1>SK\350=\333l\035>\022n\365\274\002`[\276\240\310+\274k\204.>\201\360\016>8\242U\275\203\212\177\275\024x\022\276\372b\344\275\364\304\031\276\t%\262\274\013\307^\276)\316:\275S\001\031\276\274k\202\275\244\201\211\274\252\312\342=v\316F>\265tl\275F++>\330*\317=J\264\271=\336ns=\233\342Y\276;\035[\276\231Hq\274XJV\274\2479\003>X\262q=\307e?>\311\260\245=\222\350\036\276\3631\r>\006\234\027\275\264\225\n\275\275fe>\0233L\276\347\303\000\276\2019\001>\0064;\275\212\336\236=\322(\300\275\215\245\020\276\276\205\254=\343\n\005\2768\3527\276\001\341\014\276\r\211\025=\240{3\276wK\357\275z\014\000>\325)Q>2/9\275\033>\316<\242\315n=ZE?\275\322\341\203\275T\262\020\276\333\250\264=-#C\276\031\247\010\276\241D\370\275m\371\320\275\311\361:>0UF>\3679D>\000\333\013>\264`<\275\343\237\264\275\200\331\323\274\221\032(\276\367\354\021=;\365/=}\201,\276\335\255\007>\016\316K>\'<\017\276fh\343=E3R\276\352|\r=}\310\002>-\356G\275\243X\214\275\277\202\r\276\345\222b\276\315\352\307=\261B)=\307\245R\276\002\206P\275]n\361<Q\\ \276\307\355[>D\254\212\275\0312\001\276\231\013\331=\323|N\275\216\233~\274\361\366\352=\336U\022\276\212\350\370=\034\223\343\275\2616*>\020`\035>\315U\326=\035\246\177=\261E\203\275\202_\226=\374\346c>4r\372\275a\220E\276*\260\247=\365\217%\2766\306\013\276\341p\233=\235\202*<\333U\224\275\261V\206=\321\035\235\273\027UB\276a\257Q\276H\365X\276\375\241K>\255OM\276m\320\306\2759\214\t\276nN7>j\306O\276\316q>\274\332\010\243=yg2>w\266D>\323\223\207=G)\310=~\314[\275\335[0>\355\032\320\275\276\016\357=\006\tS\276\266\000\n\276_\327\240\275\004\360 >0b\347\275\304\364a\276\370\353*\276\213\r\265;e\0025>\252\221c;$\354=\276k\216\031\275\363\251!\274\360\355C>\301n\372=\323\226\036>`\306\013>|\030\302\275\206\204-\276%A\366=\340\371;>\376\270\n>\2652\255<\316\247\014>\0060 \274\3212\277\275\372\271\025\276\307\310\022\276\333\302\262\275\277\003\006\275gQ@\276\275\0214\276\327o\305\275)\306/\276^\244\332\274c\nL\276\'n\014>hIG\275b\253\"\276KP\365\275\236;\314=~6\310=\204e,<\'K\n\276\242\245\377\275X+\022\275a\235\235=\263\203e\275\253\262]\276\253w\363\2752pc\276|\303\233\275\334\367Q\276\370\003\307\272\3772#=\310\0207\2762\230N>\207*\206\275\321\234T=N@\275\274\225K\323\274\030x~=\302\032\230\274\373OM<7\017\300\273)\210\312\275\236\025\026\275\320\257\033>\367V!\275)\010\237=[|X>\345\013N\276\373\255P\276\261\273\266=\255\317\003\276\312\303\306=\034\315b\276\030NM\276\217\302\004>8\r\003>TX5\276H\367K\276V\270 >\325\270\025>\275\366\021\276\204\367\027\276X\010h\275\237\031(\275\216\034\372=|\212\211=\030I\037>z\370\257\275V\377(>\311\216U\276\222\032a=#\321\256\273\270;\025\276-x\230\275B<^\276\326O\224=\005\341=\2752%\014>\032\2245\276-E\330\275\372bQ>\346d\260=b\244\"\2763o\355\275\346\353Y\276\020\320\016=D}\200\275\356s\334\275\264\235\024\276\236\274N\276+\251\354<T\346~\275\255\364->\270\356J\276\315\356\231\275s\027\016\276\222\000%\276\035\2724\276 \r4=\342\375\022>VF!\276\247&\006\276Z\035K\276\347\021[\276\'W\034\276\355W\210\273\253\340\214\275\273\242K\276@%\001>\326^7\275\355X\214=\202\331\033\275\352\025\205\275Jt^<\301q\244=7\271D>\270v->S|\245\273\037uc\276N[\326\275\234J\006\276<h6\275\241\205V>\351\362G>\254\300\302\275^&\350\272\271\343\245=\004\035C\276)\303\321;\223\326H\276A\334\r\275\024\252<\276\304G.\275\031\034\324\274T\006\306\275.\030i=j\274\024>H\320j=R\337]>pJ:=\362\342\317<\177\327\014\275\206\347\220\275\266\204\353=W\225\014\275\362\376\300\274N\274t=\005q\'>h\331H>\007\033\001>\326\276\215=\347~\326=\014\2546\276V\203M\276C&\203\275\304F\316=:U<>\261P\301\275W\376D\275oTy=\3012\234=\214\253\342\275\033\322\002>x{\204=]\2227\276\202\257)\274\365\311^\275\252\211\031\275\265a\t;\2559|\275\217\245L\276wy\346=\326\"=\274\204rF>\\\317\272=\005b6>.S\005\275\327\rL\276V0M>p\231\245\275P\246\321=S8\034\276\347\267\226=\336\330\336\275\251\250\n>\233\322\177=+\200y=\367\372\370=p\031f\275\021Te>_\246\351\275\353\022\237=\364\207H\276i\252\322=\021|\357=&\201a>\t\'\344\274\326\310>\275\302\337\021>\256\202(>0\230\023>,\314_\275\254\200\017\275\360\332\030\276\323D\373\275n\034\266=j3\361\275\217\324N\2763\031S\276g\300\276=\234\260K=o\206\t\276\223N\035;\360\367\335=\3143\372\274\340\2704\276\375q)\275\000\017,\276W\037,\276|\355$\276)IP>\300\262\263\275&\031Y\276\024\262S>\2407b\276\353D-=ku\020\275~\307l\273\016\314E>\323Z\377\275UW\314<Fi\213\275\316\245\357;\326\346\n>\003+\'\275\270\373\000\276\302dI>Lr0>\244\266-\276l=\014=\272\317C>\242\021c>\214\333\327=\362w\243=P41\273F\264\033>u\271\356=;\317%\276\225i\222\275i\2000\276\034C-=\210\203\364\275VD\250\275\233F\264\275\310\276F\276\3333\240=c\274_=F\0065\276\225\023\244=\327\343:>\203>\320\275b\315\">t\306\362=\261\324\200=\225\233d\2760%D>\261\002M\275\3155\337=*\266\255=\017 %>\224\003\200=5\034\340\275\374a\025\276\354\326\225=\n\320\242==\201\017\276U]r\275v|B>\376J\021\276\361wI\276g\355\027=\024\244\353=\234oT>\234E3>\355\236\372=N\010\003>q\036\031\276xP\311\275z\222v=\335\333+\276\224!\322=\226\377(\276qq\241\275\272FV\2767^*\274 \205<\276\260\276m\275\316\022\331\275\315/@\276\006\324\\>\354#\003>*\317`\2757\346\367\275~\260\\>\026\265&>\340\212\303<\360\225\006\275\357\0203\275\336\337`\276\250\006{=\217\006\020>\225y_\275`\306Z>\021\236C\276\203\267A\276\302\312\222\275\275\321E>\022h|=\314sI>\356bN\276\201\356\313\275r\036\250=\235\202\376\275\263\3624>\375G\223\275\374\367 \276^\220\"\275:\341A\276\332<i\274\276\245o=\016c\217\275\365\345A\276p-\364\274\000\370V>q\254J\276~y\372\275\373\034\306\275Q\322\354\275ht7\274\217\317\240==\326\231;\240L\257\275\367\365\003>=8\017\276>`0\276\010\211\r=F\302\325=\334m\357\275\360Y\245=\263-]\276\264U-\276\276 \237=\276\241b\2758Qa\276#\311\002<*&\021\276}9<\275\317\231\204=\332f\237\274\273\270.\276/\262I>\021\302\027\276\270dQ\274\234\317\002\276\340\302z=\034\310N\275b,\375\2754\301\\\274\000|\337\274\242\377/\276\333\272B>\010\372c\276l\300\362\275\021_*\276\273\325%=G)M\275En+\275\030\337\337\275\031W\037\275\327Sb<L3\312\275\262\245\330\275\375Q:\275\005EF;d\000<>\211\333\000>\276\222J\2762/X=z\357;>%\236\240=\240fE=\021\277\266\275\3330&>\325\'\223\274\1777\005\276M\275\343\275!\177/\276\2552b>z}C\274\343ol\274\331\024.\276\315\276\362\275mI<\276Ep:\2767\036:>\321$\330\275L\232\026>\337y\237=\337\303\026<\216\242]\276Qo\272\275\354\004G\276%\347\330=(\377[\276\325\365\034\276\000\374^>9\374-\276\366~\356\275\277x\243=\350\375\205\275\262\341*>\210\002<\275\320\026!\276/OL>+n\236;\303}8<\237\276\240=\236\345\017>j\2461>e\334e\276\366\360\237=\n\341\016>\204\021\277=\206\330/<J\014b>\024\202\353\275\346/\326=\024\350\226<\221\266\023>\t\2277>#\357$>\'\342;>\212g\211<\215Y\206\274R7\237\275\320E*>u\352\233\275\330\314y\275\366\234\255\275\000T\302\275\333!\303=\330\240\025>\226m#>1\213S\276\013a\337\275`~8\275\232\007\343=\317\355,\276\277\024\367\275\3415\202\275\036\"\344\275]\002^\276\314\000\t>\003J:\276P\330\272=\275\304\274\273\276\330#>m)Q>\375\301\013>0\244\344=\342\217\007\275d\354\005\276\334\350\306=,NI=\330m\t=\232%\t\276\343\370\235<\342\221\303\272\034\030?\276\341\321\302\275w\327(>\232\266==\010nb\275\315\304\342=\341\346*\276p\221\001>\230\031V\275;9\216=]a\212\275\223\334\241;e\010s<\r\362\024>\347\332\256<:\276\207\275)\216\334=\'\224&\276\212L5\276\216i >\316S|\275\264\nD\276p \270=\240\364\275=\207HR\276J1\277= \273\022=\026\376\375=\005\304\205\274\332YB>\364\267#=\311\305\270=\204Y\375=\026sA\275F?\267=\314\202d\276\005\0360\273\257o\013\274^ v=\202)T\276\304\023n=\374\254\366\275N\377c>\250\325Z\276d\350\365=\215[\370\274\361\375=\276\360\257\360=\370\370\"=\265\305@>,%\370:\204\332\302\275\347y7\276\257E\201\274\010\226\210<\346\034\n\276\352\037\215\272\201\362V\275\203A\265\274\362\013P\276^\204\313=:\314\023\276cV\036>5\\F\275`tC\274\026\2716\276\006\244Q\274\343\256\023\276\313\010\201\275\307\003;\274PF\013\276\346\200\243<\203\316K=j.\027>1\3118>\332m\035\276\2271h= M\010\276\306\345\267=R\237,\276\263\305\210\275\247\3141>:(;\276B\027P\2766\005\351\274\347C\005=\2133\314=\332\317b\276\340\007\302=\331\345+\276\002\360]>\304$;\276\260\206\035\273\212\277M\276\243o!>\024\247\224\275\303\342\t\276x)\374\275\375u\300=\231\032\256\275\272\305\022=Q\000)>y\307#\276\265\001\276=\264\332\261=miT>\016\357V>\267X\277<u>>>P\333\300<L\003I\276\200\332\024>\250\337[\276\232\3606>I\256\346<\321z4\274\212+R>\313\350M>\264r\357\275\311\212B\276\313)b\276%\373!>\274K\353=\377\345\271=s\364\371\273\340\317\202=D\344\010\2750\032\214=\316\377\204\274\360\264U\274\232\235M>|\361\276\274l\325L<\r\275C\276\247\036\\\274\366\234P>\327\003\221\275\351\254\r\276\265)\211=$C\306=\031Rp\275\233F\325=-\321L\276\360\334\024\276\004\316W>\035~;>\215\025\264\275ad\347\274$s\362=\201\347\353=8\273\371\275\020\231\027\276\244\000\323\275\370\3410\276,\003\025\276\r\300b>\320\013;\2761\354\037\276\377\346`\276\236\014*\276z\232\027\276\177\251W>r0\340\275vE\232\275pi$\275\255\332\013\276\221\363\023>5\r1\276\025\030\001\276\305\224\221\2741*N\276H|D>\035\275\201\275\2561F\276\353\363/\2760\333A\275\005\034+:%aY=D\235\343=Rt[>\334S\371\275{X\035\276\360\0264=\242\032R\276\3767\006>-\264\201<F\314\211\275\324\265\024>K\305j<\236I\026<\214sM\276\212\004\014\276\326\374S>=\201R\276\030\367O>\027\245_\276\037p\025>\304G\373=b\007\274\275\220\274\225\275\177u\303<U\222(\276\313\233\034\276:\351\002\276S\234+>\230 \226=\276j\245<\200uU=\251j\231\275>\033J>\013\0003<k\n\017>o-+\275\361\"\223;\027>\372\274\021[%\274\311p(>\365\211\024\275\346\265D\275F\217\267=\363\010A>)z\303<X\274c>\343\353\236=\036I+>c6\353\275\325\264B\275x\353e>$\013\327\275!\'\034>\212\310\013<\354\237\032>)%\323<\345\001\002\274 \320\210=\325(\277\274\365#(<\252\327\022>\210\357E\275\230\036\261<?\322R\276\275\210\n>\"\001Z> #\254\275v\263\341\275U\365\031>\025\221G>\226\256!\276\240\t\031>\275z\326\274kP\305=\002\372+\276+Nq=^\276\222=Lz\334\275\016&\276=\262\317^\276\3526v\275\345\337\334=F\373%\276juX\276\303Oi\275jB\303\275#j\247\273)\177:\276\377\377\331=\017\257b\276e2D<?\'\323\275\340\207\323\275\314\234\360<\364q\253\275j\3667>\310\302\344\275`@\t\276\232\266>>W\037S\276\244\212\325\2746\"Y>\366|I\276\202y\243=r\330\361;\374i\265<\342;\272\274\006\355\227\275)E\245;\332!\210=\266\362\342\275\325\350,>z\207C\275L\312\245=Wv@\275\256\350\237=\032{\026=[\327\377\275\026\024\036>\247\256E>\254%$=\277\334\245\272\2236\303;\256\340>\276\3510\355=\'\246)\276\233\217W\275\341$\032\276\351?\360\2750|\300<V\036K>c\201\021>$\023\320\2755\245\321\274\033<T\276\337\251>\276\372\360,>\320\247O\275&\217\030\276\361\242\227=x}\000>/\021\030\275(\333S\276\353\370\023>\361\220\304\274R\373\002>\010_\031>\332\007\277\275\377o$=V26\276=|\314=P\013\211\275yt\321=6\225\'>\371\343\007\276\323\177-\275\025\026\342\274J<\356\274\354J\003\276\205\004\246\275\016\347a\276\356\264 >\354u\025\276\357\335\253\274Nw\213=\010\232\371\275!\2778>\301\207>\276o\257/>a\245F>=,\367\275C\342\\>\334\307\006\275\316\"j\273#\356\302<\364I\213\275\345-\270<k\034\026\275\000\333t=iV\024\276M\216\031<\006\347Z\275\366{\r\276\327m\217\275g\213\033>l]\022>\211m\t\276\262D\266=l\267(>\217u\025=\214B\225=\211s\263=B\336\\>n40\276\370\315\\\275\271\314F>1\314\250\274\307\005\'\276\365\003]>\221\273\275=\366@%>\274\033L;\030\212\020\275\242)1<\277\253\220\272t\223)>@\371H>\253\265\024\275\230\345Q\276\244\326G\276\n\031\006\276\270\364\024;f\025\016\276\377\0025<#|\206\275\217\371\206=\272\207\027\276\034\037&<\207R\352=\3216\r\276L9:\276rH\205\274\270\232A\276\025\010\207;\254\207^\276\007#o\275t 9\276\306\017\200\275\206I\035\275\3460\031\275\214\246\001=\352~\006>T\3156>>\r\026\276\347\321\205=K\213\255=6\032\240\275\007\250=\2767\313\025\276\242\331\235=\025\351\262=\231\022B\276\003\217\335\275\311[p\275\0260\337=C\027,\276a|;\276\n~\376\275nR\357\275[\226T\276Ze5\276\260J\033>\016\312\007>\255tG>u\224\306\275FS\201\275/\251a\276\362?\261=p\2333>\335\250\323=\255\t6>\035\366(>\340\003\215=\372\355O>g\017\311<\235\306\t>\001;\232=%\322\276=Y\312X>\333\211\t>\264i\203=\301\231\016\275E\306\024=\013\224\363\275\272g<>\006\000\262=\277\365\274\273\017i\313<\2244\244=\344\215F\276\202R<\276\025\310b=\037\335\276\275\213\267V>\334\321c=1\327\201\273h\244\020>\246B\346=-\266c\2762\025\\\276U\255+=B\376R>\340z\314\273qo]=\363\204\005\275\'\024!>-\377!\276:B?>\346/\311=\244&\\>\310tG\276\343N\225=\210\030\221=~\212I\276/\211Y>*#\360<\177\315@>\224\362\034<P[J>\035\022u=\226\t\007=\356\205\026>\275\021W\275\353\r\005>SH\254\2745]\201\275\256\237\347\275\214>\002>u(K>\215\315\003>\246\351\367\275\256l\365\275Vh\221=\n\255P>\025\347A>\256\373\t\276\367RP\276)\221\"\274\'8k=p\223K\276o<\000>\2413\\>b\274\261\275\020~\004\275\334\343#\276U\367\305\275\213/[\275\267:\032>\031\022(\276\341\2569\275i\266\014>\207\033Y>\260cY==\370\007>\3010\027\276~\277R>\370 \200\275\204\362\314\275\256:U\276\334\313T=\210\241_\274\n\022\030>m\217R\276\006\010)\276\3552\037\275\327\344\245\275/*W>\204\266\024\276\372/\033>\202\374\023=\303\013\003\276\254\027?\276\2077\\>N1H\276T\031\371\2755<\373\274\265\205@\276\233\362B>\315@\026\276\276y\006\275\203\210\347=\006\274M\275X%2\276\253\217e=\221\376\260=\232g\233=\264\310\020\275\001\254<>\200\331L\276\322\"\201=\004\251\237\275\255\004_\276\323\031?=\316\317\003\276\362\254S<\002\223f<O\324R>\345\234\302<\300\321\353\275\260,\003\275G_\">\256=\030=\340\251\'\2742\330\017>\211\234M>9x\221\275b\247\374=\352\213\023\275<\254\357\2758\016H\275\360\271_\276\302f\365=\220#:>ZO1>\246\017\007<!e-=\217\364\023=_\273d>d\241r<iY\254=JJ\177=\342\340\236\275j\331\257=\303q<>1y\023\276\344OP>\355\034\252=\017\254*\276\330\021\016>a\355\010=a\267P>\027=\016=\362T)>_\017S\276\301\254\253\275+\364j\274J>U\276\373Bd>\261NA>\235S\351=Isn\275.\246\200\275<2H\275\252\025?>\3634j<\353t\024\276rw\236\275\255\211\336<\233\027\024=F*\324=\351\"\351<U\271\026\276m\232\032>\032\010\340=t\350\273\275\273H\255\273\231YL\275\200f\004\276\347R\251=\252\014\342\275\023#\005>\016\204E>A\306\252=gd:\276\265\225;\276.\220#\276\250M\236\275\251^\255=\251\246\027<\254\276\005\276\245\250\033\276I\310\217=<KN>\350\324\351\275,)6>X\354\030\276D\036\305\275\355}\241\275\361\203\327\275\352\364\270<\346\022\251\2754\251Q>+\031H>\323\334\374\275\233V\014\276\264\267K\276\004\351\340<\226<\323<\340\255\032>\272\260\246=\032\000P\276\037\n\"\275Tv \276\372<\323=8~v=\\\362\031\276\377{.\276\035Sc\274a\227\342\275Aw\n\276P\023\374\275\333X\000\276+\244]\275\304Z)\276\233aS\275:\177\003\2762V2>4\027B\276\307^n<r\345\304= j;\276\346\326N>\377M\341<@\000*\276\007\031\303=\202\013`\276=}\020>\365\351\366\275\344n\021\276[|\377\275\344\345\270\275\220\264:>\205OP>kDp\275_\213\330=\016\277M\276\353<\006\275^\357C\276\223<C>rRd>%a\">\201fu=hRf=\262gJ>\231.\324=(\272O<\347@\311==v\216\275z\261\014=8\214\\\276\331=I>*\000@=P,\275=\027\262\335=\254R\355=\352\325\001=p\026\315=\242\363I=\3472?>U\004\002\276z+\t>\010V\217=5\227\344\275\325\022\005>[P(\276R\327\224=^\254\002\275\244\202\242=\317/\364<\226h\377\272\360\026\341=@l\260\274,\0263\276Gr]\276\346{\377=\324\017,\276\013\3638>\334\320!\276\002\rH\276\200[`=0\220\006=\312\271->\200\373\341\274iH\014>\003\313\375\275\212Q\241=%d\027\276\314\n\276\275\356\343\340\275\215iC\275#\\)>$\270W\275\237w\\>\203\330A>pc\021>\350\357\016\275\355\363]\276u\340\005\276\3377\237\275j\276\215=/\365\\<\363-\010\276h\202W>\371\311\275= \014\020\276\275\355&\276\203\016N>\336\215!>/\252\t>\334{\317=\247\371\013\276\200\233U\276\262Tj\275\262\315\225\275I3\2609\307P\213\275\376\237U\276\204S\215\2744\354\321\275+\362\216=`!A>r@6>X5\023>0u&>\"\235\255\275;\027\325\275#JO>\272\3323>\306s2>t\202Q>\260\340\207<\362i\013\276B\033W\276\003JR>ae\037;\210\rE=\232\217\016>\224\333\334=\260\221\021\276\220\034\002>eK\321\275Ld\007\276\266\357\253\275\361\027\023=2\255.=\362\254X\276\323\306D\276\230\322\267\275\220(6=\000\327\234=%\315\367\275\177\330&=\020\356\263\275\3225$\276\231\000\3168\306\266\003\276\220\343;\276t\255\363\274h\200\377=\321\001\214\275\320>\243\275\253\n\237:\244\r&=\2614E\275\354\336Y\276:\364R\276\177\024G>\222\223\307=\303\226\344\274\"\003F\276/9d\276\316\204L=V\350Q\276\245\331\252\275\234\271\016>\022)S;|c\374\274\240\246\210=\3229\244\274\275\027\177\275,/\277=E`\212\275\211\331P>$&7\276\342)\000>\344\365I>kH\034>\261\027\004>y\036\350=\336\342\354\275\311M0>\320\304\266\275\372\235c=\330\307\246=\303\255?>\320\355\032\273\013\027\232\275\207v\370=\264\345\266\275|\341\352\275\036Ug=\347\312\">\333XI\276\347\247\226\2751\020\023\275\323\352_<\034\034(>\'hP\276\316\362\327\275\263/\356\274~G\033>\177\351J=\210\355a\276A\3764=\272{\006>\310\252\340\274\3667\323=),>=X-N\276\207\361O>\203:\250=I\0278>\210\270\202\275\214y!\274v\337G\276V\331U\276\347\325\002\275\314\274\246<x\317J\275\033iH<\261\346\265<P\213c>}\372E=N\345\347=u\260\017>\022\237\367=\001\253c>o_A; \213\253\275$\362,\276\3634\372\275\374\014\016=\272\266\024>Y\355j<\214xF\276QcO>)<\345\275\3260B>w\350\r>\n\033\272\275#+\247\275\246\350Q=7\311:\276\343\005/=yAm\275\362\"\r>^\336\354\275\240\270\005\276\371\253\262=\220\030C=\332\230\323\272\016\211\314\275\034_3\276\323\370\n\276_\377B\275\263\313\325<\217\275\010>\354\255\016\275H\371\250\275\267\240Y\276F\377s=\213x=\276\301*\3269:\364&>9*-\276I\336\032>E\0106\275@`!\276\034ME>x\230b>\033\362\213\2759`)>1\317\013\276\032\272I\2763\374a\2761-\236=\177\177\320\274\367\354\t>:e\014\275E\302\337\275\350\247\215<r\231\235<{\356\214\275\\\217\\>\220\254\017>\254\3428\275\321\2146\275\035s%\276\366\0143\276\325G >O\345 =]\374\021>{\220R>;S:>5\202<>T\215;\276N\230:>\3627\031\276`$6\276\321\213\037\275(,\302\275..\216=\341\2769\276.\3467\276m5\327=\266j\337=!\016\355=\307\337S\276\325\321\352\275H\370C\276\257\223O\276\243+\310<\347\2235\276\214S\"=)]\335=<BG\276 \237\236\275&a\032>\277\220>=\024\231J\276x\"[=\3735\022=\250\230\233=\204\201\'\276\225h\\\276\375mO=\346_\000\275\0314\343\275t\215Z>\304\006^\276J\367\002\2766[p<mXR>\262\002%>\357\327\334\275\0145\251\275\344)o\275\267\374\253=\207\274\370=\366\270\263\275\022\340a\276\"[\316\275w\301N>\006\356\037\276\211\025|<:2\003=\2015\366\275 \251\334\274\2424\t\276\327\"a\276\2537\235=\027\365\030=\264b\312\274\325\365.>\033I\r>dW\376=0\212\237\275\304\232F=\274\017\321=\214|\005<\016\346,\276Z\222>\276\264\321:>5\232\032>CI\010>\311\203(>?\214G>\322\346\n>\026\372Q\276\310o\n\274\243O\r\276\257\022\t\276\017\314\301=\2249\005>\255\241M>\233\217\036\276Q\014\r>}nU>vV}=\272\273\276\275\217\326d\276:*-\276~\227\271\275\256\302\003\276X\341\235=\331|Q>C\317F\276\245\240`\276\364=\033>\255\n6>I\300G\276\344\025;=(3\314\275I7\343=\370\257\260\275\254\013-=\374\310\370\275\023AS>B\266\336\275~\363_>fF\005>{\317\226\275pu\302\2752\270\375=l\005\005\274>\271O\274\200>$\276I\277Z>F\216>\276_I\036=\330S\357=\177\034\362<\237t\307<\353\305\373=\017\307\026>\316:\017\276\364=*>3^\200=\363\t\306\274R\277\252\275AL0\275\001 \226=\270l=\276<\225[\276b\266\211=\335\003\305\275\310\305e\276\302\016h\275\301x\211\275\235\230\256;\221\022;\276\207y$\276+\214\215\275\013*\346\275\251\341\332\275\027u\005=f;\331=\'\261H\275\260\003\021>\310\237\022\276\203T\017=\217D\330\275\365\254\337=\260\336\'\275\236_\261<deI\276\306\034N\276^\257\014>7\2125\275\315\241\240\275wB\"\276\327Q\256<\202x:>4\315R<w\265X>\277\207o=\313&\000\273\347\320\003\275K\026$=\206\006\236\275\215\242e>\375\0365>+41\275\270\311\235=%\016^=\312\034\003\276\241\323\033\2762\241\\\276\376\006\221=~\252\223=ZUa\276A\032<\275-\025\020\276\315\217\251\275\312\177\275\274W\331D\275p\316\004=\375\237\250=\302]`=y\237\350=$\313\007>\361\272\020\276\261[\220=^\252Y\274\216\003G>\\\002\342\275eU\305=w\321\037>\035?\002=$\232#\275\375\"\n\276J\305\355<\211\005\023\276\274[T>\005\246H\276#\206D>\221\200U\276\003#I\276\375\201\234\275\004\265h\275\305]i=\340d\273\275\177\221\316=\t\274\221<f\251\246;\374\271\006>\314ec=]K\245\275\257\321\035\276\366\034!\276t\316\320=\002]D=\tu\251\275}\262L>H\276\227\275\331\2166\276\347\345\342\274\341\303\310\275\210\005C>\353\327\r\276\375\243\277=\247\364$\275J\276\005>\003S\037:\370ft=\203\312\000>\037e)>Y\254\201\275*l\355=?n\272\275\3732\250\275 \264\">\346\204\327\275\360\005n<\236\037,=\270\335B>\2444\271<\245\371\224\275\314i\"=)\346\007>\017\030\t\276\322\r7\276\320\2318=#\342*\275\230\210^\276D\275\263\275U\001_>-\024\350\275\207\2114>\301\262\351\275\010\253\312\275z\203\266=T\243c>Zs\357\275\252\364\265=\234\315\337\275S\233P\274 \322P=\340\272F\275D\214\354\275<\366\376=4\032\222=Z\276&>\343K\036>\0251\337=\003\361\272=\336W\367=\276\033\326=\252\305\303<\303\246(=Z\325\000>\370wn=\305\'\333=\324F\274\275\347\351\207=\307{\324\274\022.\036>l\333\233\275\344\331\017>\001\226%>\360\n\217\275oeN\276p*(=T\364\361\275i\024d>\207\225\004>\253@\203\275\213\367\366\275\353\036}\275\271\306`\276\202\334F>\222\342\240\274\300\257\314\274\275,\026\276\264\262\322=h(\344\275\327.a>\275\203?\276J\347\'\276\311\241\007>\027\324\363\275\227\254[>t`\256\274\001\331\372=u\356\360\275\304\340\n\276Q\211C>\tU\035=\006\244D>\346\010\263\274*)\020\276?&Q\275\324\234\270=\023\245\023\276\355\tM>\351\230\320\2741\327z=\206\020(\276[A\006>\022\035W>\221\307\036\276\215\204\231;~\221\300\274%<.\275\242\207\345<u\2036\276\275\220\000\275\330\034 \276\262\255p=\034\256B>-<\200\273|#`\275\374\312\237\275b\253\026=\315nF\275^\240r\275\0144]=\3507\341=*K\302=\365\213R=\207\201)\276c\313K>\353\355\215:\310kf\274\263\337p=\320<D>X\346*\276`\3139\275\226\320\354<uLc\276T\243\204=\201\251:>z\273+>\225\327\247<\227j&\276)\265\350<Gg\251=2\375\276=\017T\306;\362\252b>U\206\010\276`S\333<\004(\274\275_\271\016\275\037\373)>\234\3477>\017\014.\276\353\201F>J\225\252\275\004\232\230=\270\254\265\2759s\223=2o\243\275\260\217\031\276"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
