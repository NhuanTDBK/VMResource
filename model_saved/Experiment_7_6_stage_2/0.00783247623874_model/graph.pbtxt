node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        tensor_content: "DG\372\274hJP=\237\007\002\2750\206\002\276\353p\342=r\323\377;ew\002=\\\005\233\275\375T\213\275\215q\211\275\211>K=\342\035\t>\273\037\326\272\321`\236=\024\310\311=\277\177\207\275\301~\325\275\206[\003\276]\271\230\275\357\264\355=M\210\\\275\363\276\016>\250\272\234\274c\213\257<.C\244<3\216\350\275U\367\315=@y\037>\242\227<\275\360\341\370=/\177\264=x\367\362=g\2742=\204k{\275o\304\322<+\327\376\275\355\300\230=\331\t\322=\013|\265<E\363\n>\2422\013\276\315]\022>(\276\207\274\201\326\t\276\'q\013\276E\327\\=C\016\004>\307\231\342=\242M\250\2753u\344=\331\031\256\275\361\323\351=*\r\356\275\033\262\274=\207\333\024\2765i\361\275\0147\230=N\350\353\275\237(\375\2756j\216\275\276\241)\275*z\351<\336\227\033>\347h\030\275c\256\200<\234\262\317<\3157\252\275\236\007\023>\243\000\261\275g\024\307\275\3670\021\273yT^\275\222cx\275\331m\374\274=,\242<\201\240\267=\231K\235\275\340\207z=\304s\004>\236N\354\274c\221\241\274\201\027\307\275\210\254\246\274\270\0038\275\000\345\317=\263(U\274(dG\275g\361\342\275`\234\025>\301\242\363=\221H\023\276\021\234%\275\356\016\027\276\243\021\025<\306\222\210=\030\313\003>9\017\031\275\002\307\205=\3067\252=2}\036\276\"\211\220\275X\353\206\275\2629\356\275}C\t>\336\021\355=;\207\253\274\356\200\006>\306\314X\275\372\242\350\275\035\203\010\276h-\036\276\311\375\036>k\013\003\276\203^\252\275\234\231\n\276)\026W\275\235\321\035\276\332\207\036\275\263|\224<\370\240\331=\013r\242=;9\230\275\303\021\243=\305S\251=\000s\304=Z>\324\275\274W\247=E@\263\275\207\376\317\275b\362w=\253\340%\2758\241\257=\tv\321\274Q\337\346\275\3067\373\275\216\362\351=\346!\214=\210}\002\276\256\306\376=?\302\036>Qv\225\275<\005i\274L{N=\0206&=\342T\377\274\340\025p=\334Y\250<f\275\201\275\257\233\024>\022\3772=\016\347\305=A\252\024\276\023\001\032=\221\360\t\276\237x\264;\024\276\244\275/\\\231=\277\346\374=\020;\004\275F@\023\276:\303\246\275\031F\006\276\220/\317\275\370(P=\023\304\314=\344\002\003>j=\362\273\236`\344=\t\203\001=a\252\210\275e\250\216<\243A\021=q\006\274\275\032M\267\274\315\327\007>\336%^=Y\257\033=\362\333U=\305\001\202<g\340\343=\rg\350=\331D+\275\232}\202=\n\242\024\276\215\023\325\275\372\242\227<\376\316\010\276/\245\035=_xn:\022\t\212\275\033\237\006\276\004LC=@\1778=&\333\016=;6\217=\205\006\227\274\002{\360=\327\336f=\325\211\004\276\257\256v\275\002\223\346=\363\367F=\270 \024>y\326\241\275\032\215\003\2764s\203\275\020p,=\222\235\223=\270a\010=dI\037\275\273\262\237\275l\216\034>\246\rd=n\177M=N\030\033\276\306\316\254\275\365\337k=\245\265\353;\363\216\366\274\021\330\350=\213\214\036>\266\024;=\343c\007\276\256r\374<\023\220l\275\t\302\017\2744\343\330;\376T\237=\014\033\273<\216\233\205\275\026\210\226\275^\376\376=\022\325\035>\004Nr\275\217[\003\276\004\232\t\276\016\200\350=e&Y\275b\322\020>\'\332\376\274\242\026\265=G$\215\275=\"\314\275(\032\370=\351<\217;B\331H\275\n\267\000\275\222&4\275\205\320\246:y\002\036> \375\032\276[\224\253\275\222f\n>3\263\003\275\210\363\375=79\371=|c\372=\216\003\203;\315\307\025\275\206U\353=\362\326\233<\365\257\262=\346^@\275\\\251p=\262#\355<\305*\311\275\0300\276=\270\003\366\275W\376\216=\016\300\377\275\306\304\261=\240\302\276\273;\240\354\275\013\\\273=\375\363\035\275/#\244=\027/\326\275qz\025\276\314\207\227\275\317\340\211\275v\340l=$\364/=\202\t\005>\3620\331=H\007R\274\205\327\261=&\222\t\276\212\306*\275(\234,=\267\036\365=\023\032\035\275$y5=\371\206\211\272\234\355p<7W\233<\027w\203<\322n\016>\237\372\273\275\355I\356=\371\016Q\274\003\314q\272~\374\342=\361\242\302\275H^7=R\331\334=\035V\022>\271\324W\274wg%\275qu\177\275\032\004\035=\177\214\022\2764>\227<w\013H=\260\237%\275w\367\243<\210\221\020\276\001t\024\276\340zy=\364J\006>H\261m\275\233\245\016\276\345\212z\274P4\341=\001[\320<=\331t=-\215\212=>\370B=0h\264=\t\264\376=\247,\031\2763\265\332\275\357a\001\276\025\262\033>\222\275;=\2271\344\274\375\026\354\274b\036\316\275\205T\343=\207J\246=\0348v\275A`\357\275C\225\205:\365/\014>\214k\320\275Q\007\014=W\345\212=+]\227\275\227^\317=\372\\\016>\217\177\270<\260\374\027\276\273/\225=YXL=\270\265\201\273tiB\275\005\247\004\276\n9\253=B-/\2759\356\211\275\2672\261\275>\366\010>\250Tp=\355\367\004>\234\270A<\357T\027>\341X\212\273\203A\303=\034\310\204\275\306\002\236=\034\220\260=\037\320\245\275\257\364\005=\326:\344\275#\242\226=h\275)=\272\336\277\275Z\325\007>5c\264\273\206\337\345\275\270\357R;\235\223\004>u\355\001\276\001\226\235::\254\031>]3\003=}^\301=G\223\201=\211\325\024>\366\004\360\275\r\272\245=7\021\325<u\2057\275\327\014\177\275\326\204\267\275\240s\332=\321\206\204\273\375\204\200\274\254\320\262=u\031\313=\r\036\033>[\272\020\276s\342V=w[\r\275\266d\301\273\223\332\373=l0\016<<\216T\275\305X\024>f\357\023\276\350\335\034=m=\347\275}\333\254\275A\225\370\275\243\344\021\276\247]\331=\027\037\036>\305\360~=\321\351\347\275s/+;\332\255\236=\224\371\226\275U\221\t=\324\376\r>\251n\374;\373\304\315<`^\303<L\342:\275\373h\202\275@\002\274\275\264\347w< \257\324\275\274T\024\276\303\361\262\275DF\024=\264[:=\'\016\024>\373\031\261\274\017\335\025\276M{\024\275k\235\301\275\365\005\n\273\223\373\305\273\373\254\261<\t\235\000>\024\245\371\275\253M{\275H\300\336\274\221\266\017\276\260!\"\275Jsr\275D\333\031\276r\302\n>\233\346\227=\204xS=\202-\265;\221K\277\275q\324\333<\362\303\343=M\234\007>pZ\"=\326\004\337\275\014\376\030>l\236\364=\261>\004>6\024\304\275\317\334\377=\216\245\276=/\334\204=\0278\375\275\334a\344=\340\210l=\362\300c=\177R\025\276\007T\033>,,\277\275\3144W;\025\246\016\276\"B\245\275\245#\005>\021\321s\275\214\275\206\275G\221E<\225T\r\276\036\022\226\275\264U\004>\025\303\225\275SE\250\275\177\267\301\275\274%Q\274\005\244\032>\341k\022>e\271\024>\367\206\021\275\257\330\025>\253{/\275\321\223\213\2725\330\321\275\310\230\013\276\032\205\031>/\374-\275 6u=\353\377)=\252K\317\275F\037\350=\220\321\324\275 &\234\275U\271\277\275K\253\342=\\;\374\275\233\215\376=\037\366\243\274t\315%\273Y\260\030\276\232\323\266\275\302h\021\276\327>\373=\362\021\366=\255\316\357\275\027\224\305\275\356\261\313=\024+A=\177=\202\275\273\014\267\275\324\344\t>\365?\036\275\375\364\263<\320\273\017\276\226\365\034\276h\022\354=(\014V\275\313O\313\275\202\236\010\276\253\356R=N9\017>\300\232\033>L\213\026>\206c\007\274$q\036>\305B\006\276?X\037\276\224ff\275aB5\274Zy\221\275\300\273/=\234\202\342=\0214\352\275\334\000\200\275\345\325\350\275\323[\003>fW\000=\027(M\275\303w\036=\001\222t\275\352\021\203\275\326\206\251\273\371\332\275=f\240\200<\303b\336=V6\220\275?\234\327=\227\036\205\275\363\233\330\275\205\227\246\275\006J;\274\232\246\022=\346\237\317\275\210\233\006\276%\334\347=\247\216 \274\203\222\305\274\372\273\353\275\223\343)\275\353C\206=\316UW\275\274\227\335=\213\274\020\276\214A\301\274P\242\361=\202\353\300=\226\362\025=\360$\241\275\2105\023<wO|<\014}\320\275.>\r>\246\201\240=\016Id=%\261\316=\362\234\213\275\244*\353\275\241(\025\275\332o\211=f\3725\275\306\223\344\275BS\207\275b\234\314=\001\245\024=\033\377g<\335\007\261\275Z V=*\233\375\275\263\333\004>\310\242\277\275\372\371\020\275t\006\003\276H\207\024>+e\014\275~M\'<W\226\021\276\0134\217\274M\201\373=d\\k=r\2337\275\333\217\211\275\231\330\346\275\0050$\275\3648\022>,\262\362;\004\277\337<\376\376\275\275F\376\032\276\324\007\204\274\250\222,=\312\247\177\275\234\217\017\276\3529\335\274z>\267<\264\337\032\275\264\252g<\257\223\026\273q\031\022=\244H\001;\305\237X<\327\205;\275\004\260\201=\355<\010\276\350\'\317=YS\006\276\334\262\336=77\307\275\343\327\005\276\000\347\000>\324t\237=\r\r\321=\276\376\267=\267\264\371<&\257\005\2748\005\005>4\353k=t\001\177=\342\367\005\275\336j\234=2\370\013>\3365\310<\013\211\034>\017\027\250\275\352\234\"\275\"#\004>\366&\314=\315K\213=\257C\r>8\014\231;<F\032>\365\240\312=\3242\r<\017e\213\274X\\\323\274\225\363]\275s\214\202\274\232c\016\275\370cF\275\034\t\364\274*t\242=+8\005\276}]\330\275\311-\277\275w1\330=\213p\277<\222\256\357<p\235\315;\034\366\013\276_\373\373\275]\010\002\272g\354A=\241+\363=\305\213\t>\260\375y=P\222\343=\323\001\361\275&\007\207=~\356\335=\277\374\312\275\257\357\334=y|\204\274\255\035\223\275,\003\365=N\301C=8\357\254\275\200+v=p\357G\275\370,O\275O\303\322=x\247\276\275\026\366\241\275:\255f\275\333\252\202=\323\267\254=\242\370\362<\271\207\007>\'P\260\275/\327%=\263\301\371=g\362\000>\340\200\013\276\376G\376=}\276\375\275$\332\025>,\202\022\275\326\215\316\275\231\342\032\276\020\024\300\2740~\006\276`\355\370\275Q\233{<\374\373-\275G\210\254\275\214\346\035\275\237\324\322\275*\315\316=D\316\276\275\242M\t>\206@\240\275\234\367\020>\211$*<\343\251\327;\312\030\234=Nr\356\275\257\233=\275s\251\275=\333 I<\214O\212\275\271\254\253<\352 \376\275$m\301\275\266B\004\276h\277\356=`\357\021\276\340\236\212<\365\210\350\274\330\210\324\275\320\341\003>gc\225=\360\274\252\274 :\350\274\321\205\334\275\035\266\032\276\251\311!\274\035\310i\275\261\300\206\275\324\206\241=\236\025\334\275u\302\023>\006\352\377\275\204\212\023=\214h\036\276\014\027\247=>\247\026\276\346_W=\321\366\327\275K\336\026\276r(\221\274(\252\342=\026B\325\275\300\376K\275:s\032\276\201\327\022\275\030\254\020>\201\217\241\274\344\346\335=2\275\020\276Un\224=\t\r\240\275I\tc\275\216\327\256\274J\312\'<\327\352\316<\021\031+\275\177:\036=Ox\215\275\203\250\273\275\032b\242=\007\210\036=i\037\002<\215_\235=\243\0325=\337\324\300=Xe\301=\270w\271\275\204\006\372=\376\363\014=\365\275\t\275\275j\254=\214\323\342\274\321\244\315=R$W\272\261\222\033\276\357 U\275 \225\251;\356^\201=\271w\n\275o@\333\274\345\372\017;d\035\034=^\3550=\373\330\255\275\034\360<=\315\342\036>\tb\007>\2003Q\275\260\227\331=\177j\376\275\347&\221=q<\007>\023\276\374\275\242\323\013\276\345qM=\353\247\340=\322\266\020\276\237\031\354=u\254\200\275\020I\215\274\361G\300<N]\202\275\001\240\031>\226\346\370:\003\311\022\2768o\026\276\224\350\213\274.\320\335<9\337\236\275]!\261=\306;\023\276\007\376\256\275W\000\035>\207~m\275K^\316\275\347V\005\276\310\221\336=\203\205\356\275\200\177\213=\3627\251\273\366%\207;\304\303n\274\276$R\275c\244\225\273\250Nr=4\200\025=\261J\264=&\330\227\275R\000\021\276\205\270\331;J\370[<\007o\271=\311s\342\275\030\324\037=\021\246\036>\326\013\010\276\354&\323\275C\360\334\275\326]\031\275j[\024\276\200\340\266\274+\003\373\275\362\307\203\275\323\213\262\274\304l\304\273a\373\347=\342\211|<e\r\t\274\312o\237=/H\032\275\344\033\340=1v\006>\001c\031\275\225\332\304=\231J\351=|\250\227<\353\"\034\276\347\367\227=\352iD=\240\225\225=\t\344\027\275R~\006>\267\332\317\274\267E[\275\234\266k=\370\306\023=\232\004\336\275\006\276j\275\t\211Q\275\305\211\362=~]\215=:0%=}\354\223=&\021\001>\010\014\206=\201{P<\343\341\014\276\245\276\315\275Q\241\300\275\267\\\324=1*\216\275k<w<\300%\240\273\030b\270\275&\000\221<s\251\342;=F\232\275\244`\216=cG\216\274\004\252\317\275N\'\376=[j\273\275\320\304z<\213\332\324\275^T<<\255J\030\276\254\353\267=\223\025\256\274\217\r\006>\251x\374\275\273\227\031\275\226\370\026\2768s\276\275\341\277\000>#\316\216=\275\221\244\275\222|\233\275=\004l=\177\224\004>a\314\311=\030?*=\272z\025\276\034\352\005>\306\271\r\276\257\206\004\276\232\204 \273\340z\262\275\232\203\377=0\264\032\276\314\260\337=\206b\247=\003\222\373\275\332\035b\275\313\004\356=\r\202\007=e\271\032\276\332\027\317;u_\244<\365,\235\275\177\3375\275\357H\013\276|\314==\353\352\370=\r\326*\274\254\224\326\275\251\252\027=\002\'\340\275M\336\030>\336&\200=\027\241\003>oK\350\275qv\227\275\003>s=\200(\027\276\304\241\355\275\261\304\310\273\010;G=\274\236\253=\225v\373=\214\340K<(\213\330<\367\373\274<\001u\241\275O\340\033<\234\243\035>\002`\201=\230\270\215\275\323\026\240=\253\r\034>:!I\275p#\007=\036\030\004>\353\2422\275\335\205\032>j\323\013\276\227\"<\275]\2238=\234\013\303=b\341~=\267m\010\275\006\363\205=\347Z\313=\271b\200=\261?\226\275>\306j=P\334\024>!X\037>&\260X=\016\256\265=,\246\246<4\232\364=\331\n\376=\362u\354=\357t\013>\371%\010\276#\367\304;\344u\300=5a\234\275\013\036\320\275\206Js=\027z\000\2768\242\254\275_\210\260\2720\372\032>x\367l\274\272\'\200=\374\211\276<;F\000\27672\320\275\346l\264\275\266\302\255=\225\324\344\274&A\027>8e0=\006\022=\275\235\320\264\275\002\261\375=\251n\005>\375T\013\276\\\261\221<T\266\006\276M8\372\275\311W0=\232\n\346=!\022\017\276\333n\355\275\025\231\225\2753\t\245=\374\227\234<rYP=+\373\023\273\335\365\345\274\3536\000>N\306\216\275V\321\001\276!m\n\275\007\026\343\275\341\353\013>-\376\325=6\323G;=$\361\275\361\005\364<\221\333\007\276m9X=\213{e\274?\217\020\276\315\261\n\276\260\245\232\275[\337\264=K\203b=`\216\363=\261\354\265=\337\362\252\275\007\216\314\2750\036\261\275B\317\247\275T\342\033>\0257\377=\304\370\327\2742\002\360=\026\337Q\274\256\212\252\275@\270\205\275\354f\377\275\204}7=\367\264/\274e\226\225=q\023R\275\027\3142\274\237I\024==$\377\274\3263\321:]\217\234\275\224O\270\275\207\214\326=\241\303\024>5\323\261\275\367p\217=\310O\240\275\264@\221=\3329\010>\371\360\210\275\301\262\317\274<\230L=#\\\210<;\237p\275d\261\026=\351J\272\275\245w\276<V\203\333<^\261\231\275r}R\271\026\235\031\275CJ\344=\376Br\275\2004\235\275\344\177\035>\022\334{=Og\313=\016\030\375\275sQ\030>\376\326c\275|\237\031>N\005\311\274\002\347\221\275R\256\024\275\006E\261\275\266f*\275\300N\024\275\2747\347=[\373\270\273Yy\317\275*v\305=\274\330\004<WM\377\274Q\\W<\213\333\026>\355\276\014>\004}4;c\227\024>+\325\237=-\225\005>\305\t\204\275\336\226\r\276\277\276\200<\014\000\036>\214m\016\276\341G\345\275\376\205m;\205k7=;\232\216\275O\266\275=\215\302]\275\023*\357<d\331*<#\3636\275\306\025\264=\033\006\351=N\276\324\274t\315\365\275d\004\033\276\374\313\333\275w\245\212=\001\000*<\207q\366<q7C<\320r\267\275LN\247=L[\243=\tT{\275\342i\313\2753\356\215=\365\2525=\205F\337=\324\206\372\275\320&\014\2754v\313=\336x\270<!\315\033\276e\271.\275v\330\367\274\227\312\271=\334\"\330=:\206\030>yu\341;\260^\r>\370\211\n=\2018\206=\024a\217=\320O\367\274\231\355\246=\005\'\220\275s\265\344\275\226\326&=\325\234X=\344\271E\275\317\216\341\275\264\010\233\275\341\252\364=M]\222<t=s\275;\030\370\275\215J\255<nc\315=$\305\321\275\257c\213<:&d\274\016\017\252=<\330\237<\373\274[\275\301\360\347=z\241<\274\360\322\030=e\331\254<s\371\310\275\313ml<c\352\000>\2425d<f\010\255=\245\270\224=~)\034\276\252Dd=\335\265^=\251R\364\275\027\366\255;J\304\007<\002\345\004\276W\001&\275\344\206\204\274\330o\237=\340|.\275\314*J\275\362#a\275\363\013\271=Z\303\000>}\266\355=\243f\001>Z\341\306\275\265\303\227=\022Q^=\272\214\274=;cu<\2217\212=\333g\303=v\021\022=Vy\245=\226\242\023\276\336f\006> \203\277\274\200{\214\274\030Z\223\274\355p\002\276W\335\"\275\355\234\205\275\2557\033>\300b\013>\367\275\353=\207\264\007\276\006\331n\275\240\231\261\275\3643\365=\236\265(=\210\363\035=\2715+\274\227\247\262<\216\306\222\275\375\364F<\347\302\246=\r\200\371=\304\002\312=\320\2304=\\2\005>Q&\034<\263\354\032\276U \270\273\026\364\223\274\3101\317\274\212T\352\275B\333W\272\360P\025\276\372\217\335<2\336\200\274sm\022>\261g\007\276\221K\002\275\261\014\200=\033\377/=#\306\301\275+\304\036\274\221W\n>\023\222\235\275\303\333\210=\026\235O=\365\310\372\274\367\001\005>\230.\276\275\'\262g=\326\235\365=l\226\300\275\252\241\314=\225\365\265\273\243\001\305< \335\007>\335\373\004>>}\016\275\205%\r\276\354\007\264\275\372\344+\272\333\267\n\276\324\341\244=W\271\017\275\326\227\3229\340\267\\=\355\270\205\275\344\033\234\275\016Q\315\275\220\214\210\274\032\364\034>\271F\344\275c}\300\275A\322\265;\024q\350=\267\337\305=\214\333\026\274\222o\006>\256\016\031>sV9\275\246\360\027\276\311\366V=\026U\301=\243\211-=K\002\251\275% \310=\026\375\306\275\3439T=\013I\317\275\345j\320=\265:\222=\205\373\214\275\337\260\023\274\014u\364\275\033z\223=\207\374\027;\315(\222\275e\334\014\276\341\264\027\275\021\263\335=\217KY\275\2109?<\311\334\350\275\346\373+<\266\177\301<\2614\237=j&\266<\034\'\244\275\375\237\256\274\304u=<\224\336\237\275\216\247\271=]Mz\274\265r\264=p>\014=F\370\004>F\247\304\275\2641\033\275\031\221\244\275\211\023D\274\322n\231<\r/\206\272\nL\034<`q\326\275\331e\232\274;\324\251=\261\035\234\275\331~\034\276r\372\271=A\004/\275i5\224\275\327\250\005=\220P\"=\325)\263<\301e\247=:&v=\354\2755=\205\351\237=\273\262/\275\330V\311=f\260\022\276e\010\027\276\033\234\332=\207\254Z=l\366\023\276\275i\276=\302\305\013<\244\200\311\275\252\314\321=\271\327\306\275]\233\361<\235\272\326<\024\245F=\033\355\274\275\377f\025>\366.{\275z\217(:&C!=\337\331\243\275\177\207\206\274\020k\255\275=\026D\273\033\016\322\274\362w\306\274\0256\217=\221\324\255<6\027\036\276\021Q\007\276\356\034\240\275e\310\261\275qd\006\276\276\314\300<\265w\002=\037di<f}\325=\021\206\002=\256@\001>\334\363\001>\177a\007=\010:\341=Q\266\320:\214\230\301\275\221\262\263\275\250\221W=\022+b\275x\335\377=\322E\035\276N\273\020>\214}\223\273:\250\210\274\305\034\242=\333_\314\275\360\255\035\276\007\202\346=\207\254\000\276\034\210\001\276&\354U=\270U\027<\024\246d\275\310V\263<b\342r\275\3245_\275x\022\021\27631\375\273\364o\340\275\022\037\373\275\250\3107;+\302\227\2750\r\030\276j\024\032<\237\2119=\035]\342\275\016\204\030>\341\3773\273r\023\030\275\261\335\325=vg\350=\320\000q<\356\222\316=R:\005\275\332\252\002\276\267\333\t=\212C\037\276\205\035\332=h\225\322\273\273\367\235<,A\037\276\207\354\025>\002\366\205=;\036\224\275o\245\010>s\025X\275\240\261N=\236\240y\274\377\241\302\273\202\207|\274\232\376\t\276\204\210\020\276\376\024\035\276E\225\235\2756\026\272=\343\240\364<86\343\275\010\177\030\276\002\271\203=\237O\305=\240N\004=\211\376\004\276\265\373\245=# \244\274\024X\025\2760\010\230\275\251\233]=\220\t\276=\271\366\332\275\356\237\355\275gM\300=l\240\222=\335\361]\275\261|\226\275M!\277\275\305\373\221=\2024\226\275\000+\312=\211Q\237=\363;\225\275\276)Y=\334\235\205\275\206\202\364\275H&\242=\2205\r\276\r\037b\275T+\342\275\232\305\026\276\361Fc<\007\350\257\275\034\033\000>>i\005\276i\215\036>\360-D\275E=\345=\233\331\233=\347W\031\275B\355\244=,\343\242=7\027y\275\202\363\250\275\330\253\022>\256\016b\275\343k\024>\345\300\330\275Ea\177\2755o\"=\236\365\014\276\327\264\010\276.\347\027\275E\311\016=e\325\014\275\333\025\202\274\356p\003\276\216\234\273\274u\241\366\275\247J)\274(\311\366\275\006\n\267<[\346\243=\272\200\313\275\313\265\271=f\2702;\213e\323\275J\020k\275 \344\302\275\211\375\331=>V\240\275X\310\371\275\212\233\351\275/-\322\275\370\315\t\275\223K\017\276\220B\031\275\250Ce=k\014\203\275\353-\324=\021\354\342\274\217\204\013\276\274 \n>\271\0242<j;\233=\304\267\030\274\351g\000>\271\312\036= \013\240=\315:\036\274\252!}<H\363\371=\255\324\027=M\215\217=9E\304=\234\345-=\330S\332=\324\365\016=\365~\364\275On\372\275\004/*=AO\352\273r\335.\275\340\210\021>\235\374\014\276\252\351\341<\263\213\222\275\226?\245\275\251\276\001\276\346\001\230=Q\243\031\276\2722\354\273\371\3269\275\310\343\016=\274\271\223\274\340x\363\275\267\251\227\275\035\231\241\275\001,\372=\014#m=\273\351)=\277\030\220;;\262\014>G\204\227=m\366i\275\374\033\225=\373*\202=\002\270;\275FA\373=\271\260\252=iv\370=*\274\241=S|\224<\257\032\304\275\355\221M\275J\250\t\276\351\333\034\274\216\306\230<\273\334\301<\333\315\222\275\361\020e\275\324\300\027\275\233\215\025>\3432\256=\267\214\323\275\246\236\000\275X5\024>u\330\247\275\016\247Y=\312O\304\275\237\254\305=\233\366\334=\205\n\377=]:\354=$\313\201\275\nt\365=}\271\226=g\320v\275\243\317\034=C\367\025\276a\265}:\325\244v;\213>\017\276\254\333\030>q\t\233=\244\310\207<\237\n\317=\252\021\271<m/\306\274\217\021!\274\247\317\335\275\367\226\324<\"ze=C\367#=\310\307\206\275\207\010\020>-+\275=Q\\\274\275\0065\300<\317\203\307\275\263K\356=\233<:=\034\034\033>\366Q\003>\322\255\022>?B\335=\241=\230\275Vu\377=\214\024\251\275!\350U\273\260\270\230\274\313\224\200=*1\310=\372\302-\275\301\337\033\2731\355\315\275\203\321\337=F\310\002>}\262\372\275R\334\201\273E\330\005>2$\306\275\007\342G\275\377\024\301\274\345\313\377=\320\031\217\274\352+\204<;\262\002\276E\260\210=}\013\001\276J\245\022\276\263\251\014>*5\026>\317\353\353\275d\305\224=4\277\364\275\357\265\351=\303\ny=xg\315<A\227\204=e\327\361\275\350\205><61\226\275k\005\201\275\325\311\347=\207\320\361\275\037\252\021>\365\021\236=\225\213\346\275UI\260\275 \034\206=i^\001>\377\036\300\275\320y\034\275\200\226\t<N\035\304=D\323\226<\231/\007<yN=<\375\032\260\275\313\'\303\275\214]\013\276zF\252\274\'\210=\275\034\215\214=\367\203\014\273\230\233\346=\327/\320\274\265\216\033>\374a\347=?\n3=\"\342\254=Z\274\030>F\004\335=p\210\224\275\001\321\324<]\355\024\276\235\261\252=\036\037b<qH~\275\264.\231\275\340\3541\273\'M\253:)D\235\275\256p\315\275=\340\242:\033^\005>\355\017\364\275\231#\240=1?\220={j\020<O@>=\237\345\026>E?\005\276G\037\202<\351\312\246\274\034\340O\275dV\000\276\361\332\310\2758^\033>jk\233=\313\273Z\275}\332\220\273\260\207\376=5p\375=\336\251\005>\210\255\217\275k\203\027>\356f\321\275\202,\222<\275WZ=\244\206\213=8\262\257=\374\264;\275\214\323\306<\2560\025\276\030\234\027>)\367v\275\310^\022>\t\014\026\273O\035\353;\034\356\327\275\026\320s\275\216\305\257=\363\273\003\276\007\205P=\000\254\307=\004\001\017>\2142/=\250\306\035\276\037s\026\276a\264\351=\000\217\220=\265k\317\274\000\343\326=\277\023\002\275\307/\301\274\252\330\322\275\243@\036\275\352R\372=/\000:;V|\272\275\216\3334<\242\215\311;\240\017\315=K\222\025>\017\337\323=9\020\307\275IA\025\276\373\366\222=\267\037\220=\265n\001>8h\022\276\375-\276\275\245\216\007>\321M\005>O\205\033>0\354\364\275\203\217\332\275?\221\023\276\207>\010>;)\030>\376\245W=\010\335\363=\343\312\035\276\341h=\275\370\360M\275\366\207\252=\307X\001\276G&\275\275\237\322\210\275\343E\242\275\374\270\243<\252md=\021m\005\276\324\257\343<yW\270=\3165\247=6\276\n\276F=\247\275\377\216j\275B\222\302=0m\311=\312I\006\275\025\3013=R+\007=\211\273\024>\374u\376\275\177\243/<\331g\344=\200\267\377=N8\333\275/A9=\313\234\302=\025\337\017\276\340d\276=\032\276\214=\222\350\013\276\277FK\274Tv\206\275\376\317\330\275\244P\001\276\\w\373\275\013\225\010>\271i\013\276d/\241\275\r\250\315\275\342u\225\275\220\361H\273{N]\275\331\241\010\276\252\366\242\275\267\302\207\275\204cW\274\357\237\206\275@\367\355\275\333\002\212=\211\204r=\022\213\320;I\241\234\2759\031\305<\350+n=eFY=G\375\036\275vc\243\275j\306\355=\006\036\303<\336=\253=*\331\346=\362Z4;\242\203\325=\246C\215\275\312Sm\275\323\230\360=\312\230\013\276[F\260\275I\344\204=<\177\010\275\242\352\324\274_X\021\276\315\034\347<o\033\302\275\016`\272=u\323\202=\225\234\274\274\262\233\200\275M\346\003\276\337>\207=\374\237\037<$\302\374=\340j\371\275\220j\303=H\331\274=R\205J=\372\265\026>\304H\000\275\035\004\224<Z\021\360\274Fx\031\274\213\267\267=\371\n\260=A\356\001=\252\002\021\276Y\244\225=%c\237\274&\205\030\276Zp\357=\316\265\313=%9\033=\341\022\241=\233A\206<+5\013\276r\350\362\275\224\334\331\275\235\251\275\275~\310\302=\013\005\003>\354\270\214\275\252\377\274\275\n\256\021\276\312\213o\275,T\261\275\267\371|=\226b:=\307\343\n\276\326\027\002>\206\302H\274\003\335\305=\355\361\230=h\330\234\275nY\342=\314\210\352\2747y \274s\251\031>\237\237\016\276\223\313\025=O0\366\275X\216\022\276*l\302\275h\367\003\276\211|C;\366S\374\275\375\361\265=Ah\r\274\207\t\322=\244\335\340\275\313\243\025\276t,\222\275\001V\n>.)\037\276\235!\013\275\362\312d\275\344?M\274(\204\037=\005*\032\275\230\026\275=\311\334\333\275\332q\037\275\023f\277=\374\026\300<\t\266\261=y3\377\273\317\245\306=\221y\010\276[\032\335\275\025\273\262\275\336\250\026>\016\036\307=\254\370\264\275\334\026\020\276\206u\014=\306p\377\275J\307\013>\221\213\240\275`:\256\275\217\277\255\274\314\177\364=\242I\372\2756\201\004\276/?\337=7\365\304=S\306\363\275<\002\276<[\372\300=\021{\246\275\276^-=V\216\320\275\346\025\200\275*\362\302\275\306\320\344=~\365\343<\0051\213=6\232\236\275<\002\000\276\031\266\013>,\364\236=_\352\322\275\3250\211\275v\270A=|\301b:yB\207<l\265\322=%\273\266<\367\340\273\275(\201\034>\351M\256=*w\261\275\220x\240\275\262>\347\275?\345\323\275\232\216\377<\346v\273\275\303=\014\276\036\230j\275y%I<Lf\253=\205\353\230=\355/\253=SR\312=\224F\277=\3443O=\264~B\275W\017\r\276]\216\031>\262A\n>9\321[<\"\332\350\275K\340\253\275\357_\030>\261\305\002\276\201\312\320\274\315\227\324=\234\277 \275\025\215\005=\302\231\235=\032\276\230=y\242\035>\357h\026\276\362\221`\275m\332\305=Ow\230\273\314K\316\275\244\364$\273\010\031\312=`\352\270=A6\262=1\034\033>.\017\002\276,\251-=2\224\345<\023_\366\275\024n\353<\211G\303=\031|\210=:\235\025\276G\216g=\0220\305\275TG[<\321l\243<%aE\275\246\362\275\275i\333\341=R\021\022\276\202f\302\275\234\037\355\275\251\351I\275\357\256\333\275\314\201\005\276\222\257\035>\340~\312=\214p{= \251\327\274d\013\034\276\\Q\235\275,\001n=m\347\n\276^\270\222=\241\031\177\275\320p\325\2759\003\017>\313T=\275\257\370\032>\326Y\201\274\007J\307<\217\350\302\275\355\177\251<\017\257\024=\001\230\230\275\030\246\275\275\305\r\241=\355#0\273\254n\376=\335\345\243=9\276\006\276&R\253=?\007\370\275<\030@\2752Bl\275\244\352\014\275\317\310\265;\314\355\335\275bs\025\276V\357)\275\332\'\023>V\267\210\275\215\324\207=\017\030\001\276O\014\316\275]\345\024\276\271{\335=\261(\352=\207lZ\274\237\031\270\275\254<\207\274\201\346\322=C\031\032\276\356\351h=\t\345\210\275\373\323\225\274\317Z[\275\263\250\377\275\236\260\332=?M\274\275\357{\270\275\210)\264\275,\365\\\275\3638\327;93\023>I\036\345=\215\371\002>/\262\265=\035-\214\275M\250C\275\252!\322=\325\236C=\352(\373\275x\206l\275\267\346\205\275\217\241\341\275\263M\006\276?n\312=|:\034\276\205\237\355<f\245\351<\220\321\002>\315]\266\275\254\242\245=\272\275\006\276\017\322\362=\361>\026\275\265t\252\275(I\204\275\312`\315\272\034\332\376<\261\255\240\275:_p=\231\347c=Z\311\335\275\236\254\203=\035\327\007\276DPM\274\214\311\327=\223\2261\275\362\310\010>\036\264\001\274\266\373.<\260Kx=\315\r\276\275\275\364\371=\235\2269=\031o\034<\240)\304=\014s\354=R\377\300\275X\224\026\276 F\373=\374\266\017>\026\'\020\276\217\265\273\275Q\256\357\274\221\220\004\274\265E\276=\372i\365=\243\335m=P\023\341\275\212hn=\371\217\n\276P\256\033\275\254j\030\276#\242\236<N\010\013\276\237\177\223=0\2622=p\372\324=\366\320=<_\240\314;w\306\263=\370\240\356=\364\027\364=\366\255\200=\002\356\312<\233\244\340\275\nqd=\355+\005\276\267!\373<\243\\1=T\335\234\274>\247&\275\337a\231\275\332\212\004>}\262\240=1\\\310=\026^\313=6\327\032=y,M=\336\255\304<\265\223\027\276\311\261\031\2765A\025\276\267\"q\275\225\306\226\274[E\373\274\315\220\002<:g\217=\r\317~=\024\300\301=*2\313\274U\003\027>\214l\022>\2636\237\275\240S\030\275\312A@=\331,\017\2768N\265=l\370+\275\000/\340=w.\357=\256\rw=\364-\310=\215~i\275\331\t\037>\304`\337\275\306\024\326=\336\301\036\276\262\217?\274\262\227\251\274\321\364\320;Z\'\031\275p\225\330=t\257\255\274\251\177\317\275\"@\246\275\027\211\353=y\341N<\364\033\360\275\312\364\274=\216\364\217\275\302g\037>\336\343-\275\270I\035>bNI\2754\005t=\201\225\253\275\2517Y\275E\325\336=!\373\031>\252\217\344\275\317\240\037\275\357#\001\276t9\272=\260\307W\275\276\324\005>\353)\264=\370\260\235=\242\355\016>\216\036\313\275\271\014\253<3\"\215<9\374\244\274\351\030?=\246\302\330=-uk;\265\233\016=\227\203,=\241\306\333=j\355\014\276\254F\217=\0377X\275Xb\335=p\177\352<\2523\360\274\270\366\023\275X%\000>M-\214=\2714\207\275\025RZ=\270\242\275<\014\227\311=&\037\272\275\274\021\204=5^\013>\324\226\222<\3176\016>\317\374\201=vr\215\275\323f\003>U\345f=\3730\r\276\374\026\010\276^\312\013>^\2746=\2158\224=\374\347\273\275\222\234\202\274<X\215\275\260\374\302\275\236\244\023>\206\334Z\275\245\357\224=N\302\353\275Ef\207\275:\260\253=\224\351\252\273q\271\027>x\367\277\275\340\317\023>J\323\005\276+\353\026\274\016Bv\275I<\243=\254\024\246\275h\033\351\275\231{\037\276\302\345R\275\005\205f\275eY\257\275k^\006=\216\013\007\276&\023\261\275\013\361\314<\245b\220=\337\272\375\272\276\371\001\276\331}\025\275\201\3448\275\tM!\275\242eF=\332\231\360\275i_I\2751%\355\275d\377\376\275\375i\324\275!\312\344\275-\223\032\276\327\333\254\275\r\316V\275\332+\244=\300\352<=\374\376\274=#\177\r>\017<\343=\253\177\301=\274l3\272\205\305\343\275\271X\247=\341O\275=\006\033\342=T[\242\275\t\031\201<\257\034\257=\241M0=FV\217=A\001\r\276@BR=WK\022>\014\310$<\031\262W=p\007h=\2576\033\276\231r\333\275\rAH=>\256\205=\020bA=\226\034i=?\034[\275@-\013\276l\367\236=R<\227=\266ht<\027pI\2754h1=(`\274=\243\001\203\274:\242\377=*\261\275\275{M@=\215p\342:\331WG=\225\034\306=\225\270\014>\t$\222=\263p$\272c\303\272=\213r\027>\214\374\345=\353*\005\276\333\230\344\275D\220\034\276n3\354<\277\306\243\275\204\216\350\275f4\216\275\nV\202=\305~\274=\222R\327\275r@x\275\017\254\362\274\313b}\275\036\207\321=\2563\246<\247\371\332\275\034\r\001>\337\025\031\275\271\330\264=U\243\264=j\274\277\275\2744\016\274\257J\215=`F\021\276\354\026\367\275\3145\006=\306\356\330=04\000>Q\233\273=\357V\014\275\212\016-=>\331\211=t\037e:\235\301\205\274\261\264\017>\037\273\020>\246)Y\275\302\262\302\274e\352\000>^.\322\274\371wu\275ip\032\276A\re\275\330\240\014>O;\370<\226\031\321=M\233\274=\010\307\036=\223\2323=\265\216\360\275k\\\303<c\023\227\275\316\246\253=\030\340\220\275\266\276\024>\006\262\024\276\377I\374=\'+\252\275\247\360\244=B\314\375=\326\037N=\341+\005\276B$\001=\225\205\276\275\264\364`=Z\020\377=s\215\276=1=\274\275\260N\323\275\312an=\343\023_<\017e\260=i]\267= \034\033>\030\257\233\275\331\033\245\275$YQ=U9\277=-\254\345\275C\367\253=\214\000\020=1H\001\276\004I\242=\261\207\347\275[\321\034\275\350\372\246=\0264\247=\337\001\362=\274w[\275\344z\357\275\260.\346=9 \231\274\341\002\332\274\177\200\027>\322\376\014>) \361\275\241=\373\275#e\363\274@R\364\274L\322\022\276\024\021\317:\023\273X\275f1\013=\250{\230=V\352\227<\226}\000>\016\206]=\007\026\332=\202t\327=\362?\030>\252{\353\275\353\370)\275\320\360#=\254\363\237<\330\206\010\276\261\305\003>\204X\357\275Z\2466=\203\242\242\274F:\031\276/\347#=\260\303\330=:\271\312\275d\003\010\276\261:\372\275Hj\254\275\262@\002\275\030\261\031\276(\312\317<\345)J=\260>\216=,k\006=\266<\003<BQf\273\262,\001>*\302\276\275\337\241I;o\"\261=8Y\325=\322\264\364=\310\350\226=\251\320\373;}C\373=n~\215\275\255\335\003\276\365\0349<C0\263=\014\304\312\275\314\010\351=\232\343j\275\250\202\001\276\202\227\231=c.\266=\357\206\252\275R\032\\<\355?\271\275J\240\007\276\253c\226=\t\352#\273_\243\034\276\326\177\031>\236\264\245\275\376JK=?m\311\275\224\022P\275*u\364\275\'`\234=\332\003\225=ig\210\274\0223\235\275\340\364\312\275\371\234\007=\256\352\010\276\215B\263\2750R\330\275\270\347\'<\334\345\377\275a\271l\275B\203\013>U\217/\274\230u]=&\372\336\275b7a\275\232\262\363;@\321\\\275\360\366c\275\335\035S\273mB\035=\222&\345\275\031a\221=\034\202\036<\0260\010>3t\201\275\311W\027\276Wa\032\276\014\256\363=\374V\343\275?\377\362\273b\315\270=\224\312\351<\362b\033>\035\353\356=\021\346\333< \256\240\275\3742\024\276+)\342\274\355O\226<\367t\t\276h\270\230\275\344\377\251=\323)\300\275\245\014\310\275\212\t\230\275\005\210\233<\'\334s=\256\246\251;\373\371\363\275\367\204\314\275\r\246\207\275\276\236\232<\261\224\207\274I*\033\276\002O\326\275\235\355\223\275\216D\371:l\200\r>\265V\232;2\313\027>\253P\277:?\351(\275n0\035\276\231\330\310<\354\355\363=\271$\007\276\322>\010\276\230J\236\275\027\372H\2750\226\036>\224\032\003\276\2628\231=\370\350}=\301\031\027>\026\300\001>\231\032\337=5F\322\2740\251\234\275\000\332\226<\273\265\003\274\336\026>\275\271\240B;\343\350\260\271-\007\332;\373\321\020\276.\346\244=\304\000\006\275\366\304\220\273\373\251\253=\276\204\224\275\310eK=2#\301=nZ\023\276\"08=\3151&=a<\032=\256J\005\276\300L\036\275^\032\002\275\355-\334=\376Y\035\276\277_\031>q\006\020\2734\247\\=kG\023>\245\313K\275E\305\033>\335\3422\274\006\356-\275Q)\020\276/\007\306\275#\215\303=}\333\n\275;q\006<V\251\335\275Z]\016\276CTP<\025\353\001\276\262\244\032\275\370j\302\275\322\243\314\275\202\275\007\276\346!\033\276\275;\n>\263p\005>\242\211\027\276\236\034\020>4\231\007\276\255\006\216\275\225\275\032>\252\255\347=\030.\025\276\301/\014\276\034\342\216=\2557\001>JsQ\275\356\340(=\240$}<\23436=\326g\250\275\002\326\344=4\365\266=\323\001\317=\367x\315:\2147W=\001s\310\275\024\261\356=a\240\213;\030&\373=4r\001\276\020\212}=\251e\314\274\367\227\206=\330\242\366<\332{\001\276\306\3654\274N\256\350<\'a\343=8\200\023\276\224[\030>\022t\014>\356>E\275\221|\213\275\014%\002\276q\267\364\275\230\312A=\037-n<\346O\034\275-U\032\276+\373\211=\220\326\330=\330\240m\275\004IM\275\367\212\262=\272\307\037=\024G\021\276uW\314\273\023\014`=#\033\010>m\377\376<$\235\236\275\336I\024\276\356;\320\275\331\245\230\274\325\377\221\275km\306=\274\220\021\276=\223\312=\177l\034\276\272S\017\276\372\322\335\275z\n\274\275\200/)\274\202\n-=\241o\003>J+\005>F\200\347=\235L\231\275\327\302\352=\021\014\003\276\333\251\032>\276M\313=\275\306\211\275\213/\013\276\212E\220=$\303\004\276\302\351l=\006\023\013<\305\212\234\275\300\257\220=\322:\303\274h\214\364=*\306\233<\366\323`=\036w\247<\\\232\311=\364LS=\277\177u;\2263!\273\336\337\036>\213\001\253=|I\301\275\352\'\301\275\332\265\210=:p\013>\326x\354\274\346b\276=\355S\022>\211P\341=v\240X=.Ft=I\233\337\275M\236\275=(\312Z\275\364l\227=\210\016\036\274V\322\035\274\025\376\003\276\032c@\275\302\250\032\276W\305\202\275t\232\004>\266\2210=\323]\000>^\233\267:=1i<\273m\251=\306\233\372=\264c\002\276\3764\221=\035>\017\2758\271\010\276\253\226\342=\031\375\003\275#?\361=\t\277\206\275\257\246\210=\274BC\275h\225\026>+\223\242=\000\005\313\273\351\374\256\275e\237\035\275\323A\010>3k\204\275\340\261\254=\017\226\354=p\211\253\275b+\347=I|\344;k\223q;K\022\220=\026\267\316\275,n\252=\224\337\224\274\317<\036>\021!\020>\252\204\277=t&\005\275\347k\024\276\010\365\035>3\316\243<\225%\201=2\037\014>\"\023\t>4ml\275\237\363>\275\024\261\326\273X\007\004>\020\021\215=\3331\276=O\232\251\275\320\223\243\275\026E\206=-J\016\275{wJ\275\0352\236\274;\247R\275\227\364\273=\371\355\222\275\006\275\335;\203\352\036>\260C\001>\250\332\016\276\250o\001>j5@=\310\215f<\177\275\222\275\"\034\320=\227O\227=\017$\341<\017n\374\275\346\377\247\275\361{\233\274\2411\025>}\177\241=\323\020\366=;4\034\276\252\373\033\276\237\361\356=1\355\202\275\203\207\361\273\326\207\231\274N\260\337\275\205.\001\276\345\215@\275\266~r=\022*\034>\014\317\215=\335f\275<X4\355<\271l\023\276\021n\027\276c\360\014>\250\n\033\275\203\357\275=r\206A=\002\337_=g\013\036>\244J\'\275\351\302\021\276\031\2752\274k:a\274i\333^=\363\207\320\274\003\327\221=lM\031>)\236\036>5l\035\276\021\351%<\016}4\275\261\223\277\274\266\026\265\275\003\250.\275\353k\276\274jv\246<\\\204\377\275\330\330\276=>H\000\276z\036\366\275\231\034\211;\345<\324\275\240;\350=\227)e\275e\231\210=\275\320\304=%N\343=\000%\362=iP\243=\"\306\251\275\2701\254\275uG\310=k\237\024>\362 \211=u\324\326\275\013\004\014\276\376\244\224\273/\371\334\275\037&\220=\372_\006\276\031\350\035\276\236\262\200:.\221\221\275Rm\035\276\312[\333<-\235\200=\037$C=\225\376\312\275ak\314\275\267J\002>\314\314\007<\355\244\276\274AX\007\276\001R\250=;n\271\275\375\256\300=B\357\271\273[ :=\347\360\013=\243\225}\274\321\260\310\275\375;\033>%v\032>\313\271\326=\177\262\323\275\223F\025\276\022\253l\275\266\372\274<Jh^=M\245\t>\377+i\275\225\314\374\275\006\266\266=CD\326\275\274\254\375=\355\222\274=m\361k\275)~\301;\220\227\271\274\0214\377<\274\201\300\275\202\035\017>Z\031\016\276\314\355:\273\301=Y=\363\326\355=\366\331Y\275>\363\266\275o}\337=(~#\275>rH=\217\377\370\275e\317\r>\004-\020>^6H\275\262$\251=\005\017\245<B\211\344\274\203\326\002>\315\020:=\312\2006\275ES\230=\005A\240\275D\356)=\364\367\016\276\313\324O\275\031\354\261\275\225\354\265=6$\274\274R\314t<\341d\r=\311|\032\276\321\224\034<\274\366)=\316\306)<t#Q\274I\366-\275i6\366\275F\311\325;7R\273<\021K\007\276\232M\202\275\251=\230=[\273\024>p=\361=\030\262\014\276\331\211T\275\327P\030>\002y&<\327r\260\275\261D\007=\270%\r\276\330l\300\275\275\221\271\275d\374.\275Z\303\033\276\037\035\274=\301O\017\276\3377\371\275EL\010>\254\"\017>{\361\\=0\270\006\275R\303\370=\004\013\347\275es\247<\356\276\243\275%\206\217\274\325\257\356\273\311\205\212\2748\004\026=\356\332\004>IQ\360=\235U\240<\177\017\032\276\374\232\020=\320\332\317=:\022.=\354\211\367= 11=l\024\031>\323}\236\275\317\243\267=\203\337\035\276b\345R=\205w\201\275\241#\240<\371w\334\274N^\020\2762l\373=u(@=1@\001>\207\036u\275\230/\200\274S\215\261=\020S\020\276\312\'\306\275L{\345\275\267\325\217=?\220!\275A?\017\276\016\032D==\260\211\275\247\250\n\275\027\337\226\275\367\344\225\275\365-\351\2756]\217\274\260\002\r>S\352\241\275\333\305\255=$\316\313\275Z!\006>q\216\325\274b\315\014>\207\016\t>\374\217\331=-\355\236<m\001\273=\275\023\213=*`\230=r#\031>\'\200\256=\007\327\231\275%\312\005\276\">\020>\220\200\323\275\276\311\t>\352tY\273\363r\330\275\335\177\375=\006\372\252=\334\243$=\235\027\004\276s\016\341=dJv\275%\020\017>\344f\230\275\323\311\004>%\264\235=\r\340\232\274\225\272\310<\316\315:\275$\001\210=\256D\260=\373_\001\276U\325u\275\215\301\223;\026R\203\275\206*\367\275=\352g\273a\251[\275\273q\331\275\306\244\031\27524\246\275?\023\330=\272\201M\275\322hf\275\255\312y\274\212\342\025>\t\377\231\275\r\346 \2754\n\342\275\233\350\031>\362%$=\004\324d\275\026?\306\274$\351\244\275\320j\r>\262{c\275\244*\037\276\273E\331\274G\371\014>\324)y=Y\032\312<}X\263\275\366x\t>\353*\375\272.\016\366\274\035\266\034\276\267\244\257\274\022\274\024\276a\276\361=\r\263\246=\260\217\367=\271\357\241\275W+\322=\246\023\304\275\323\350\222=\313\324\005\276\375\363\353\273\273\232\261=\r?\026=\226\350\261\275C\000U=\302u\000\276\013\261\364\275\234@\016>\021k\337\274\302\230\316=H\275\363<\\\256\364\275\372P\023<\007\241\024\276\003\n\226=\351\023\244=\3035\315=\3053\304=\201H\021\276 No=\017\304\202\275\260\230\251=r\034\006>\2411\250=d\301\200=\323\334\016\275\020\241i\275\274k\325=\212\271\321\275q9\271\275\005\253a=%x\360\275n\226\034\276\241f\004>\003M\335\273\372\223m=aUg=7\301\301\275\305\321\316\275\023\355\221\275::\241\274\202\270\247=]\204\016>=\333\234\275R\\\324\275U\034\241=\005B\007\2763<\314=9\204\337\272wi\257\275o\300O<\235\233\"=\322\362\274<\372\344\257=\347\242~=`A\030\2766\346=\274\313\031\r\274\336\007m9\357\377\034>G\'\245=Rh\352=\355v\016\276\234\300\010=\263\305\017\276@\307\027\2760\022\000\276\247\010\253=\256\002\264\275\234\252J=F!\214\275\232\223\333\275(}\022\276bX\316<\340!\345=oL\005\276\300\256\033>6<\020>&\321}\274\254zQ\274\254\025\016\275ak\224\275%\264S=+v\214;1\213\372\274\035\201j\275<[\002>~\375\332\274M \237=\362`A=\271{\234=.\372\024>\271\374\026\276O\272G\275\020\007\034\276\314\3414\275X:e=.{/\272\312\353\357\275#\205\n>\031;\027>Y)\352=\031\006\360=\270o\023>\312r\026>\210\341\316=4\341\266\275\202q\314\275\341\033\034\275D<\014>8:)=\347\214\325=P\320\242\275Y\201~<c\273\266<\206\372\213=\304\241G=\263\330g\274\010\204\250=6\366\375\274\307\366\314\275\376\203\000\276\304\337\r>\"\252\204=\336\267\354\275\265\253\246\275\n\250\001>pN\024>KR\010>`\2332\275\037\365\034=}L\366<\314n\345\275KzC=\350\241\342\275S\270\314=\254\027\025\275$E#=\245\204$=v;\362\275\316(\007>.}\270\274\367\227\212=\343\267v\275\302s^\275\254\237\002\276\271\036n:}\306*\275\313\255\212=\036?\264\275\237\010\026;\274\253\036\276\265\376\224=\3503\224=4\014\004>\243C\n<\235\t\211\274\3308\355\2759=\233\275\267/\307\275\315\\f\275WY\207\275\345\253\030\276\353O\377=\277\'\300<\274\302\006>\273Z\027=}\364\217=1\344\277\275!\364\027=o<X\275d_\352=be\010>\035\007\341<\035j\024\276\364\343\266=+\336\370=/Z\002>\376H\240=B\273\324\274[.\271<\027\320\177\275J\017\002\276\367\257\004\275\365\215\344=\324?\005>\'\333\225\274\227\000\024\276tv\302\274\315Z,\275Fh\364\273\2334\036>Bf\222=e\'\360\275\347~\245\273\375\037\242\275\356v]=\244q\240\275\353\022\032>\253\260s=V{\351=\216\316E\2753\322\364\274\244\331\270<\027\252\213<\250\354\330=\354M\360\275\003K\343<\n\200\243=kD\301={\216\016\276\237\360\313=-I\265\275\236/\364\274\236iw=\311|y\274D+\034\275}w\031>\355\306\031>\264\360\271\275\024Q\365=`\353\177\272\256\370m\275F\305\346\275\341\216\325=\306\231u\2749\356\275=\326\236\242\274J\022\032\275`\003\002>\323\331:=\366\307\335=@\371\321\275o_!\275\037Q\014\274\3429\326\274\204R\345\275\315\320\336=\010\210\317<1M\244=\3147\242=\276\377\336\275\316e\214=\246\226\n>?\275\360=7\236\217=\211\\\202\274\345\342\004>\035\217\352\275Pw\200=\220d6=\024\271\307;\301\256\017\276o\253\304\275w<\022>\221\264\013>9W}=K{\311\275N\274\356=z\335\002>\332\252\355=\215A\037\276u\220n=\276=\316\2745Y\356\275Y\322\002=ty\010>=\366\200\275\177rQ\274`5\024\276\360\355\355=\370o\023>\203\"\r>\341\262T=Yb\237=b\353\007=\330)\021\275\000\006q\275N\211\031\276/\373\002\276\377\242\364\275\312\000\373\275\200!\310\275U\014w<\317x\261\275\261\347\227\275\244\354\264\275u6\301\275\362(\245\275\234Z\000\276j\332\364=\210\3540\275\241<\030>l\346\307\275\307\324\230;\035\362<=\326\354\203=!\273\367=\010\226\033\276I- \275\366\227\207=O.\347\274\246\266_\275\337\226\020=\244G\211<j%\035>\231\030\202=\225\265\216\274\220Q\303\274R*\365\275p#`\274Q.\000\276\220\302\022\276\273\344\223\275i\206_=\022\000\004>k\314\232=X\234\267\274m>\304\275\346\033\335\2749\017\247\274\2647\302=G\335\324=\356\021\312=@:y<\217\323\021\275\037k\300\275j\330\363=e\024\305=E\227\212=A\247\211\275\003P\201\275 \372\033=/q\023\275d\334\363\275\030x\010>\300\313x\275\221W\036>\220<\332\275\224\005\236:\233\024\254\275\362\213\035>h\365\004>\305\277 =*\'\343\275{\032\010\276eN\310\275Y\251Q;\265*\317=\350\364\260\275\2570\242\275\314\231\345=\333\373\002\276\357X\220\275FM\216=\370\214\202=36\307<\234\005\363=\240\020\361\274\233M\304<\t\224\004=\350=\377\275^z\t\276\372\327\377=Wac\275\337\024!=\321\231\265\275\210\341,=\376ID\275\373\265\304\275\223\'\007\276T8\367\2754\226\303\275\016\362\200\2751\020\210=\224\246\261=Uv\211\275h<\356\2752\256\274\275wC\331<#\260r\275(\367?=cE\351=\375?\025>\333\034\020\275\033\005\265=\322\351\230=\344\207\360=\207\344j\275%\372\024\276\3053\222=h\203\005\275%\262\024\276_\005\345=j\023\272\275\300\355\302\274\354\227\237=+d\312\275\004\266\224=V\211+\275\032\301C\275N\316\005\274-\255\024\276\351\303\263;\254\337\370=\223x\211\275<n\352=GML\275\345\276\006>\327c!\267\2233\013>\002L\004\275\216\252\236\274\362\344\353=\242\250u=\252\223\252\275\236\237\303=\331\241\355=\364q\\\274#\021\365\275\324f\242<\277\037\203\275\347l\007\275\321\373\036>\\\000\342=N\304_=S\307\375=\260\2556=\304\276\033<\316S\315=G\316s\274T\362c\275}\271\001\275\263\000D\275M0\037>1\226\024;\315\223:\274D\335\336\275\341\024==\257x\206=o\314\366=\204\275\373=\000\374\370=4\252\n\2765\207\226=\204\021\005=$\224\255\275/\347n=\373\r\030\276\010D\362=A~\267=\261\205\227\275\256\370\266\275\332&O=O)\315\271\232\372\224=~\345\t>-\314\340=l\211\213=\034\364\317=[|\014\275\210\377\025>Z\034\211=\243w\237\2745+\246\275H#\350<\303z\t>\273\000\361\275\266\242\352\275\004\034\n\276\210\370\002\276\335PN\275ZT\010\276t\001\014\276hd\201\275\355h\313\274^\367\343\275\225\320\010\276<?\370=d\217\000>\nR\200\275\337i\250=c\037\030\276\001\321\036\275\016@%=\3018\215\275\007\277\307\275\207\314\365=\252\373\265=\355\352\333=a\177:\275)\271\034>\203H\214=\235\232w<\235M\021>\221C\n>\004\314\221;\222sm\275j\251\t;\233q\t\276\026\230!\275\237b\227=t\006\023>\256\242\237=\3460\026=/\020\315<`~\303=}\'\022\276\270wY=<\256\276=\342?\337<\367)M\275\227\235\366\275\202\273^\271i\374\231\275YG%\274\241\373\332=\"\341\025\276\"\307\032\276\353\026\323=\227\201\334\275\202\242\246\275\014R\350\275\031\025\277\275b4\246\274\307{\314={Tp=Gt\352\275\356d\356\275\344\240\356;&\033k=\014%\315::\307\030\276\262\210\024>\313\246\013\276<\t\222=\241K\251\275:\242\010>6\305\036=\\Q\004>\025\300\354=\274\002h<\020\341\000<V\245\362=~\001C\275Z\274\316<\366\244\300=\213\3739=\010\342\r>Uk\376<\342\203\237\274\353\342\256\274zF\021\275\331\325\037=\016\376\254\275\224\305\025=X\361\274\275\001\334c=\363\334}<-\277@=\241(\017\276\376\200\021>1y\251\274w\013\025=\344t\214\275)\017\200=\270\321\014>\267\337\260\273\330g\034\276m\367\016\274\020R\021=F\r\333=2M\325=\034\273\262<\236L\325=6d\275\274\027\241\010\276\340\t8\275\362\003\332=\367Y\302\275\225oK\275R\375\261\275Qy\263\274|\355L\275\205\253\'\275\351yv=\004\234\222=\240\360\013\276(\271\221\275\r\276\013:\264M\310\274\"$\362\273N\242\267=B\317p=\004\376\337\275B\247.\275\037\301\227=`0\343=\250y\000>\320\325\275<\016\222\023=\004\330\304\274\215\236\221=]\372\313<GO\244\275\177_\230\275\032_\333=\213E\t\276`\021\022>N\202\267=\203\312\032<\322E\355<\204\260\276\275\277\377\002<\344\312\032\2767\354\365<~l\354<e\213\363=\031\244\257=\365\367\207\275\320\010\321\2749\326\223=\351\364\210=\204\374\270=jz\323\2754 \340\274f\271\200\275s\270\007<\005\340\016>\351L\212=\243Ap\274n>\234=\362\004_\275\376\341\237=\017\335\232\275\026\007E=\244u\027\276\255\036\r>89\373=^\264\304\275\023\207\365<m\220\034>P/\021\276\363\326,=\375\240\316\275z\0075=\0049\347=\220\257<\273\233-\237\275\037A\n>\341c\335\275\032k\275=\315\221\355=\033~\325\275\375v\364\275q\030\215=`j\202\275\342\210\234\275g\324\276\275\177\377\n\275\017\212\014\275\262t\021\276\204\311\317<\324\275\003\275\177e2\275\345\211\372\275\336\330[\2751<s=\312\367X=\205<\352=k\311\371=Wi\031=\230\003\251=\237\331v=\001\361\353\275\3226\375\275\216F\021\274i\3605\275\302P\264=\251\360\021\275\332Rb<,\217\364=\003\216\016\276!l\022>k\313\234=\217\324R\275\241\323\030>\'<\310\274G\340\360=\352\2417\275\030?\220=\000CR\275z\001\022>\364\002 =a\277\277\275\t\376\004;\367u\246\274^\241\r\275\3105\375\275\006\t\243<\254\374)=\215\311\017\276\375!a\275<\224\024\276h\024K\275D*\256\275\275\260\357=1\314\260=\355nx\274\330\3557\275\2700\236=\2431\004>\261\234\025\275\277\266\005\276\027QV=\350^\n>~\025\022>\001\014\007\274\234bi\273\303\271\337=\347L\317\275>\260\356\275\361\2148\275V\354\002>i\210\353=e\020]\275\220\004\244<\342\036\361=\3151\031>\033\033\203=\336\024\262\274\204\347\315=\336w\333=^\251\035>\350\216.=Ig\335\275)\001b\275\300\204\001>s\030\356\275s7\216\275\\\205\356\275\035\321\310=\261\266\302\275/\241\003\276\261\341\002>\303\2458\275\001^\371\275\032\322\205=\353\205\267\275\303P\027\276\013\221\224=\310Y\327\275=\306?\275C\347\014\276)a\257\275\316?\023=\376\312\346<\023\'\363\275\306M\224\275\314C\221\273,\235s\275\227~\367=\250\370\355\275\3046N\273\204\224\031=\246\343\031>W\271z\275\235T\256=\217\344\356\275\276\033\026>\307\251\202=\306z\205\275\370\360\017=%n\352\275a\262\303\275\261\364\255<\204\263\215\275\214DB\275\222\255\016\276S=\333\275\215\036\304=\337\266\273\274\262\347\003=@g\252\2757l\274\275\206\273\254\275\354\224\014\276Zq\007=\321\263?\275\340\226\243\275\317\001\300\275\371\321\207=\2733\345=`l\036\276\3566\336=\320\"\026>\323i\330=(\254\247=j2\274\273\266t\303\275\206\202\017>%\252\207\275B7\332<l\206\005>\340\247\010>\222P\313\275\312\001a=\275\356W\275\025R\247\275e\212\240\275\ni\365=\006\330\035>D\364\304\275[f\324\275W\347\244\275\353\2443\275\r\226e\274\345Lj\275@\211i\275b\263\324\275uY\322\275\347n\347\275\006\216\350=\257\001#\275\333d\352\275^\016\003=\232\371\013>\372\320\302\275\353\t\350\275\344\342\275\275\325\372?=\233\306\271\275l\205\232\275\357\261\031>\373\017\005\276+\312\244\275\002\361\026\276\242:\006\276*\321\251=^\r\034>\364\2228=K\034\022\276\210\244\n\276\000r\316\275|\244\263\275\177\277\036\275\315\355(=\372\325\202\275\271\343\232\275\241\341\315\275\020\275u=\20274<\333\003\n>\255\031\024\274(a\250\274\n\232n=\030\266\001>\200\253\361\273\303\034\301\275\342D\302=\"\272%=\r#y\274S\203%\275\322J\203\275\213\330\316\275\205\315\306\275He\360\275$\013\373\274\214\217\253\274A\030\214\273G\347l\275\343\302\377\275\317A\275\275\277G\242=\360\000\034\275\310:\370\275^\274\004\276j\240\202\275\277\356)\275\315X\005>\236na\275%D\357=N\245\327\274@\000\253\274c\375\037=Q\3654\275c#\"<\34791=\241\021\272<T\006?\275\326\007a\274\361\354\234=GJ#=\214#\031\276\312\230V\2758o\027>)zR=s\034\334<\340U\007\276lw\367<)\326X;\005\027R\275\n-\277\274\216y+=\221\377l=\0249\301\275\000\366t\274\217\022\033\273\024\270\256\275zC\003\275Gr~\274\372,\310=R\336\001>?fu\275\333\t\232=\255\202\321=X?\n\275<?\306=e\313\016\276\275A\266=B\254\344\275\201\356\234=\001\242\203=\n@t<N\025\247<T\371\303\275@\036:=\310\010\207<N\223\r>\355\202\266<\252z\352=\226\251\335=k\265%;B.\010>\327\267\312=\370f\r\275P:\325\275G\325\306\275\'i\r\276\327\002\354\275\324;\312\275\261i\006>\252\226\344\275\266\217\351\275\"\036\224<\362\210\245=\341\216\022>\031gN\274\222w\371<\n\202\001<S\216\026\276\271\352\367\272o\237\302\272\374\021\006>K\313\025>\227tv\275\370\326/\274\252X\221\275\307\254\366\275\231B\227=\324\343\200<\202~\307=\350\365X\275y\232`\274d\257\023>\223_\225=mJ\027>^\010\375\271\310\377\267\271\272i\027\276\371|\307=\3657S\273i\311\n>\272Jg\275\266(\327=M\357\324\275\266Ab\275=\267\341\275-c<=\357\327\004>\345\016\345\274$/\335\275\tg\224;Kp[<\226\326\020\276]\344\235<oG+=\013_\034>-\346\007>\267\375\272\275\002\364\303=\234\214\275=\023t\310=\320\341^\275\247\264\247\275\266b\277\275\026Q\321\275f\"\016\276\215,\343\275\323K\353=\'5\035>L]\310=\265\305V<\231\203Z=\310\323\001>\026\274&=,\326\013\275;\r\277\273\200\350\215\2755#\026>\007\334G=\023.\330=\261\317\222\275a``=;\026\005\276\272\204\330\2739\315\245\274\273M\200;\3027\301\275t\332\200\275\300\037\027\276\222\022\263<Ze\315\275\200\2450=\372\201\035\276\365\021\332\275\024\r\266\275}\336\277\275\375e\324\275KR\371<\366\310\251;)\2416<^$\026\276\335\337\356=;\2206\271\256P\356=T\311\006>O\265\313\275?\r\254=\324}\213\275\327\001\256\275n}\002=\265\330\214=\306;\027>\312\023\330;\364\177\004>\343\017\327=\n\222\001<\331\227\024>W\013\023\276\214\272\026\2760\214n\274\370\230X\275\276\324\000>\330\335\225=\360.\014>$\255\276\274\246U\362\275\335\3604<U\245\022>\237\305\230\274o\373\004\276:J\347\275\001\261\031;\373\030\250=\234C\256=\354\370\t>\t\010\246\275\023\312\337=\315\010m\274\322L><\334\200\234=}\343\001\275\257U\306\275\230\345\035>\374\371\242\275\372\274\247<\300l\354\275eN\357\275\205\261\213\275\312\203\211=5\316\313=\264\031\002\276\326}\025\276\307\311\357<\211#\007\276q\035\212=\354\257\317\275\036\324\321\275/\000e=\245\236\\=\361\320\367=\323\222\301=\235\340\245<\312m\n>\256P\035>\217\274\013\274\345\226\315=\357\305\002>\n\375\016\274\030\274\n>\206\017\223=\336\022\220=BL\300=\317\013\241<V\251\275=)\206\036>\016@\025\276\316\020\250\275\374:\347=\335k\303\272\205\017\257\272Roy\275e\260\260=\264\227\364=\257\356P\273\216O\305=\300|\226=\312\r\313\275\032[\364\275E\2117=\241V\032>q\007\003\276\203\\\265\275\316\272\r\276\026\030U\275{\310+\275\264x.=\005\265\035><{i\275\274S\033<\214\327\260\275-\326\r>\020m\353=\253\317\203=2\005\333\275\241\177\272<\300\321M=(\3472\275\376\377C\273\003L\227\275G\252\036\276\006\013\370\274\350\203\213=1\221\'\275\036Q\375\275\251\016\004\276\352\220\244=j\365\253=o\343\336\274\376\201\216\275\307\020\246\275\036e\365\275kW\245=\365\022}\275\203\300b<\367D\244\275\017\212\263=K\337\225\275\267\243\013\2755\247\200=Tb\006=v\262\300<\355\002\013>\252\320\322=\016M\027>\3253\n\275~B:\275\316y\024>\341,\037\276\371\256\337=ig\301\275\2370]\274\372\313\262\275\006j\375\275#\236\006\276Z\221\272=\276O\350=Q\"\356\275\315\302+<*\375\003\276\253n\363=\276\335\243=h\325g<(\372}\275\006(\025=\035M6<\225\001\354\275\rm\231\275mz\r\273T\032\002\276\260\275\033\276Ji\207<Jk\262=sK\000=\222\265\026\276\031\326\223\275\024\304\215:\362c\036>\221\255\231<\'J\013>\022\232-\275\351<\352=5\\\244\275\020<\037>\225\251\326\275\354;\376\275\3376\361=k\321\224<$\212\226<\027\201\030\275\303\260&\274\3561\305\2750\201\033>8\0055=_S4=\274\327\306\273^P\264\275{\200\303<\350\013\243\274+\211\221=\364r}=\347\002M=5\014\013=\223\325\n>\266_\257=\331\265I<\363\211z\275\n\303\030>\336\306\035\276\270>\237<\243\342U\275|\200:=\375\341y=\316\036\317=\353\322\274=\007[Q\273\334\230\021>\340\252\001>\370\207\016>i\364\363=\214\013P=\200\264\233\275\311\326\033>C{\2338\337\216\360\275\220\356\204=\022\3402=\356\374\005\276Eh\354\2752D\305=r\013\363=Q}\\\275\020:z\275 \001\302<>\347\331\275\373<\005\275\2224\220=t\201\351\274dd\237=\024\273\302\275S\r\322=\213\350\336\275`U\263\275\312s\366<\024\213X=\210\227\306\275\354XG=1\246\254<6xO\275\375(\214\275\322\215\305=\332\201\300\275S\347\236=\007\361\357\275\014TT=\354\253\363\275\020\220{\275[\332T<\364\0232\275\375\345\200\274y\206\344=!Q\n\276H\351\246=+\361\210\2757M\017\275*0\347<?C\273\275G\264\271\274\0241\020\276\201\024\306=\205\361\020\276<\035\n\275\013\024B\275\342\\\004>\030\221\026\275\357\255\275\273\326\366[\275\274G\n>\201f\276\275\r\235\311=!\255\265\274\017\350\203\275j\002\301\275\023CL\275\276\026U=\242\301\315\275\257\352\013\276\320Q\013\2745\324\232:E8\240=\303@\034>Qh\020>+\217\244\275\330\311\314\274\024\316H\275\376f\303;\017\342\365=\277k\254\275J-n\2756\365\225=\371\260\224<\322p\265\275&P\n>BT\032\276\267c+\2756w\243\275\2453?\275\227P\032>\236D{=u\350\005\275C\204\227=\226{.\275\033\030\034\276v\254\265=,\226\030\276\317\337\314\273\313\025\002\276\312\275\315<\367n3\275\032n\206\275;x\342\275\246*\231\2752\261\224\275\250\343\301<\3158\306=d\267\247=jcT=\275\341\251=De\254\275.\212\"=x\003\022>#\315\213\275\261\'[=0\226\355<b\210\270=7\000z\274x\272B\274\236\033\320=\010Q\246\273I\274\304;L\250\331\275\300m\013<\323|\225=\246i\363\2743F8<\300\210\016\276\323z#\274I\332\254\275s\304\343=\216\322\215=IX\323=\200H\310\275\365\017\010>\201 \322=\261(\356=\347\373\272\274\252\370\334\272z\026\224\275\340\327\367\275/\035\337=\361\326\206\274\332>\035=\2632G=o1\232\275\'\030\332<A\247\355=\375\363\314\275\360\234;<\345\204\210\275\245\324\010>\236\377\353\275_\245\267=[\270D\275\250\256\027>\333\\\024\276y\346\017>\034\334\025\275h_\211=\305\037\007\275\001l\300=Z\322\243=\305\212\230=O\202\261=jx\250\274d\265U\275\265\345r\275\261\234\245\274\354\244\000>\201\267\217<\241\367s\274\343<\226\273au\022=B\036\031=\376\345\352\275\342\332\376<\254\030\037\276\0172\267=\271\333\274\275r7E=\257xL=\367\356\365\275\330\r9\275\216\'\236\274\324\374F\275#A\030\275\353E\203\275\276\t\355=\367\'\005>\306\020\037>\"\370\026>2\335\230=\033N<=\302\210\211=\032\215\030\276T?\363\275\227A\322\272P@\312\275y\215\354\275\342>v=S\203\020=\347\253|=\r\360\347\275`\251\352\275\2139\314=\220\270\266\275R\337\027>\370\226\"\275l\342k=\216 \263\275\312\360/=\305x\035>\347\213\225\275\031J\326<\026\215\n>\2742\235\275g\253\007=\241Bo\275\222\256\r\276\025\223-\275\245 \261:w\334\t>\351\267o=\002\032\222\275p\276\336=\202\347\206=\307\354\325;&t\315=\035rj\275\212\300\342=\373*\205\275xu\365\274\311\310\244\2743z\231=\207\211g\275\305\206\264\274\254*\033>\353\323\034>\267\261\277=\223\307B<\337\266\211\275\272`\261\275L\014\360=\277U\314\275l\234\007>[D\217=\242\002\032>\310o\n>\234\314\000>\226\270\225\275\267\027%=\036\021\036>\200)\326=C\275\260=/s\345=\327q\225=\021\355\031\276\362l\036=\025\334K\275\350\323\253\275\030\302\222<7j\036=\320\343\226=p\274\\\275\204\221\026\276\233\177\014\276\352\305\031\276\276\250\214\272\265r\026=\261\374\304\274}\206\352=d\313\221=a\267\330=\213c\013\276\310\021Y\275&rQ\275c\177\254=\t\221\013>\245\311\347=d#<\274\177\311u=\215\247\036<\201\005\020\276\016Q\325\274\234\245\360\275\230\000\367=y\236\350<y>\017\276*S\303;\241\270\252=n\'\004\276\247\323+=(<\256\272D\210\243=\201\351d\275N\007\002\274\021\333\t>\227L`=\352\210\033>b\215\223\270\002\341\027>3o\006\275JX\371\273\257\353\347\275\316H\032>A\276\357<\320\3540\275\202\275\257=\021E\210=\247T\010>#\376\310=\376xq=\274;\004\276m\350\300=4\252\353=0\236\002\276&\353\243=U7\n\276\300\234\t=\242Pv\274\023;\365\275lt\214\275p\363\317=\"G\221\275\346\342\006\276 \332\031\276\037\311\230<K\317\301=\321,\371<d\372\245=l\353z\275\337\246\370<\177\232(=N\273)=\013\243\017>\n\335\320\275\313\356\221\275\004\'[=\371\375\370\275\031G\354\275\303$\253<Z\031\003\276I\022Y=K\367\231<H\013\032>\247_\034\276J\233\363=\014\351\255=\360\274\326\275?\360A=\006Z\376=\"\250\361\274\261\001\223\273\300\354\310=\341\to=\343\211\232\275\036\202\355=\305b\022>\021m\n\274^\345-=J\010\027\276\246\351J=\301\"x\275/\220\022>\314EB==9\304\275F\234\367\275\270\330\327;@\357\347:\247B\004\276\022\032\312\274\366\300J=fC\325=\262\334\276\275\333}.\275=oP\275\252\002\024=\315:\356=P\006\352\275\313h\235\275\261+\337\274\356\221\267=z8h\275 l\352\275Q\364\350\275\206Hy\275hW\030=5e\355\275\201\253\033>E\305\306=\332n\020\276b\026\340=\341\007\030\276-\346\007=\236\n\234<\301w\232=\345\327\211\275\303\200\316\275t\255\263=\361\304\203\275\266\230\324\275b\315\324=\214\'\377=\353\214\343=\024\334\306\275\302\344\202=\325\030D\275\214%\250\275\305\214\346\275\270\350\r= \r\267\275Kv\370<O\314\305<\253o\330\273\305\233\020>\244y\036=:\276\237\275}\330\302=wY\346\274#\014\232\275P\353\360\2751$\275\275\013\014\271\275\226Q\231\275\252\001\234=\206vE\275\321\213\320=*\n\005>0\271\203\275\315\325\223=\007\274E=\347\371\027\276\003\236\374;io\314=\264\246\255\275a\021\326\273\325d\222=\254\317\313=L\245\266\2742\375\366;\376\356\336=\273\262\003>3\273\306=q\221\261=\\\263\216=\246)\340=\275\217\306=8\226\375=X g=H\242\034>\365\r\013\276\025\232\263;\356\371\323=\306\343\000\274\332\351T<\027\000\025>\330\237\004\276\372R\363=n\014\343=\r\010\264\275v\262\201\275|I\021\276\316\330\027>-\271f\275\034\337\343=%\013`;=\265\010\275\275\264 =c\260\251\275\021\002\020\276yU\023>m#\254<R\007\275=\303\301i\275-\374\030\276\037|O\275\362\242-=\331\364\321<\245\345\224\275\223\356.=\003\016\336\275\344y\023>\201}\340<\022a\341=/dq=|\036\334\275\351\216\037>\310\324\030\276\002\217\252\274z\250\035\276\341\347\\\275}\334\n>\305\330A\270\022g\315=^k\211<\340Q\244\274}R\\\275B\014\n>\356K\223;<=\007>{{\322=G\215d=\362\273\034>x\262\374\275GK\304\275O\331\253=\010D\263\275_D\271;\002k\210\275\313\017\355=\207\205\r\275M\237\255=k;\374=\0171\007>5\362\037\275\\\211\004\276\305\340k;\300\354\315\275\262\322\026=,\"#=s\351`=%/\001>G$\374<\302\n\310\275h\014\230={\200\266=\202k\211\275W\306\210=\235B\363\275\344R\001\276\326k,\2747\244\000\276\301V\000\276)\251\371\275\306\206\221=?`\366=\276\335\212=\252\304\007>\0266\254\274\347c\007<})\033\276O\220\255=\216\365\014\276?\366\035>\027\257\272\273\324s\274:\277Q3=\372\220\234\275+\377\245=%\341_\275\336\334\032\275\232S\374\275\371\310\205\271\320\305\023>\356\273D\275\314\036\022\276\244e\224;\325\353\t\276\001\225\330\275\320\362\263;7\000\216\275zu\370\275A\211A=7j\371<\274\273\354=5\021\332\275\213\356\352\274\337\360L\275\261\377\343\275\202\222\270\275x\264\373\274cn@=L\364\006>SU\002>\363|\030>\245\371\034>\261\033\031=\320\240\363=\271-\201=\002=\367\275\216$\203=\335\304\232=j\305\263=\177\232\327=\334\370\334\275<\235\026\276\271\337\177<\265f\025=\225M\344<N\370s=\274\342\243=s\305t\275\260*2\275e\227\005\276\303\"\244\275\223E\320\2757:\036\276!\355\250\275\024\245\231\275,;_\2759\002\240\274\361\323\007\276?\311\344\275J\303\214\275\277\273\321\274\024\240\010\275\275\327K<F\346\245\275>\3526\275R\214\003\275\235\027\016>\r\343\t\276\374\317\332=\230E\212=\261n\322\275\200\342\005>\224\315\311<\357\030_<y\023\314\272\022\274B=\3074\345\275\216\337\034>\320\224X=\254G\343\275\322\353\364\275\235.\324\275\2726\002=\3235\342=\030\002\247\275\353\364\252=\357\243\252<W\206_=pG\036\276[\336\014>\263\202\230<\230\330+\273\'\366\013\276\345\307\025\2763\347\004\276x\007\003\276\223v\001\276\214\"\310\275\325#\202\275y\003`=jO-=\034D\222\273<f{=\215`\374=\3070\256\275\257\010\327=\001\347\014\275\340;\256<\211\205\034\276Sy\212=\252P\374=\307/Q\275\035\312x=.Y\202\275\324\373\031>\006\305\341\275 z\244;-\264\026\276\206\336H=\036\300\332\275@\016\362=\326\030\351\275\341j\256\275\322\376g=\277\331\364\274S$\342<t\265\275=\266;\324=I\001\250\275\354\307\033\275\253\003x\275OW\030=\304\332q\273\212\210\\=%]\000\276O\230J\274aP\206=\245\346\027>Y4\006\276\270\026\020\276\366\311\202\274\236#\302<\025\326\014\276\277\306\306<\314\365\255\273W\217\t\276\316%\221\274A\027\236\274\217O\036\276\334\277A\275 \317\226\274\221\366\037\275\361\352\036>GB\230\2754w\307\275\316g\306=)\3063<\337\213\364=RT\300\274\245\364\244\275(~\363\275\241\224\311=\005\013Z=\301F\035>T\217#\275T\376\300=\024\276J=\335\307\242\274y\377\256\275\374O\227=\215\302\224\275\244\213\277\275\353\217\005\276_l\000\276C\216\260\275\002\022\001\275b\266\343\274\037K\274=\363\354\014\275\022\303\331=\314R\311=\201\334\000>\263\031\242=&\322\315\275\305\313\021\276\300\246\307=2\367J=9\224\353\273\266\371R=0\360\273<\347\302\013=\265\334\016>tRU\275\266\2734\275\216?\031>\313\332\332:=fq=\332\202x=\033W\320\275c\211\320\275\324\231\304=:\213\267<u\301\024>\276\325\352\275\300\014\214\275\340O\240\274\320\243\233<\265\245\024\276Xq\177\275\263(f;\346>\006>\260\264\003>\322\3006=/O\275=\336\006\205\274V\373\362=Uh\253;~\324\214=\216\370\013\275\263}\006\276\010\207\357=\300\346Z<\261\307/<\377\271\340\274\367tp\275\246\021=\275R\307\342\271\376z\241\275,\207\004=\330~\222\275\374\217\241=\031\027\354=s2\004\276\'\016\214\273\244\017\330=\303\200\023\275\303H\t\275\026\261\304=o\020\277=\342\251\225<Z\267\233\275\013\366\216\275(\274\202=\316\367\t\276\310\001\263\275\215\350\300=\005\321\376=\336&\023>OU\370\274}S\016\275\377\350\320\273\377\212\006>r\200;<\"\301\r=\277\313\240\275\300\024\244\2750\267\221\275\215\245\344\275\352\224_=\372\262^<b\327\271\275\270\265\207=\366\354\226<\264\260\375\275\034\022\247\275\377\347\027>V,\223=\n\007\226=g\316\206=\311\324\313\275B\362\347=\310X\201\275\331\257\377\274\303$0\275/l\016>+\216\035>-d\270=\n\215P<\366\250\206\275!\005\002\276\177\t\277\275\365-\010=\005T<\274x%\213<{\245\240=\331j\031>\2729\032>\316\254\201<\205\300\007=Nh\030\275y}\333=&\210\245=\202\265`\275\364\357\216\275\250\335\230\274\240\300O<\353\264C=\372\\\323=F\237\001\276\237\255\'<\027k\032\276\237\360\365<W\233\031\276\n\320\255\275\305\254\223\274\177I\215\275cE\023\276\267\246\327\275\223O\017>\034\271\013>\027u\222<\336bJ\275k\352\022\276G\311(=\22630\275 (\272=\262\333\307=\264?\255\275y\226\364:)\320\342\275\035DQ\274\177\r\000\276yh1\273h\034\212\274\337~\376<\\\"\321\274U?\334=9\300\002>\330\240d\275s[\247=\312\221f=\023\371\t>n\031\016>\251\3673={\261\376\275\004WB\275\277\257\026>u\301\t\276\207\035~\275E\314\026=\307N\372<\276\201\271=I\3763\275Z\'\255<Y\361\347\274\341\257\350<\245\032\344=X~\377=X\274\350\274ie\031<w\024\021<!\220@\275\005\276\237=\264+\013\276\025B\223\275\265\217\006\276\347\370\205=V\226\247=\200\351C\274\252\207\032>\326\024z=\024_\252\275\224\251\206=SC\262=d\003\020=\3455\317=\3710\200\275=Z\337<\213\375\023\276z\360\315=zj\010>\343\232\002\276\\\363<\275<\257\036\276\213\274^\275\307p\022\276\324\376\035>J\271\371<\357\'\200\275\205\277L\275+\304\007\275\250\226\343\274\003y\036\276x\323\371\275M\313H\275:>\037\276\307\257\201\275fQ\n>}$\236<\347\032\004>\3323\226\275\241*\031\276\003\340\033\276h\356\310=\032n\232=\334\007\373\275\255G;<\360\n\302;\206\347h;*\202\033>\337\352w=.\234\230=\335\r\013\276A{\3038\212j)\275,5\345=wL\201=\336\256\370\275@\200\264\274?a\221;\215\312g=\230\353\336\275\363\261e=\037\210\200<\304\001\022>\247\267D=\t.@=dl\373=U\350\361=\035h\367=2\255\276\274r\217\220\275\213\305\022>\301\304\202\275c\307\304<W\006\017>\277\"\032=*\000\363\275e=\222\275\002\301\254;\030ut\275\252\014\240<\331\343\351=\204\306\230\275C#\300\275k\303 \275\036\357\r>]\325\267\275\252X\245\275\255k^\275\030Nx=\231:!7V\222\037\2752-\356\275\227\003\371\275\307x\213\275r\322\335=6Ae\275\260\345\002\276&T\277\275\311\207\014\276\211\237~\274n\202Q<5C\352;\021\025\360=\227\234\367=\375r\275\275e\005\200=\221@\003\276\3534\033\2765\333\245\275\306x\355=\026\033\277=\324;\032>\315\207\353=[\347\251=\364B\021>\252\376&=K~\342\275E\211\225\275_\326\231\273NC{\273\035\034\360=W\001\352=h\330\262\275G\207j\274t>/\275\235\\\367=\336\234\351\275q\260\002\276!j\341<(*|\2751\337\253=\263Y\361=\310\001\301\275B@\314\275\275a\344\275\352\231\006>\330=\010\275\326\223\211\275\316\372\212\275/\341\016>\242\210`=\277\217\030>\376R\r>\374\347\035\276\033\202\010<\210\261\030\276C\001d\274\004\026W=\207s\004>\374d\213=\210\353\017\276t\346\t;$(\310\275B\337\025=-U\255\275d<\036<\306}_\2745\322\362=\321\336}\275\311\\\323=#5\320\275l\204==\374\367\322\274\366^\021>O\222\234\275!7\005\276\020\276\263\275\360\355\n\276\356\037\374\275kB\027\27563\324\275a\316\026>\'\310\232\275A]\242=E\017\005\276\030J\247=\275\332\033\276\316H\335\275?\220x\275*\337q\275\330o\006\276\301\305\240\275f\347\014\276Fd\237=\026\312\r=\275\037c\274\217\372\323\273+P\251<\240\320\256\272z\254\356\275k\004\226\275\001E\321=\2356\340<\t0P\2733w\273=\3763\002>\217\013\244<\220\000H\275\270\006+;\362&r\274,_\257\275;=;\275\007F\342<\0201\320<\372?\262=\271K\034\275n\261\024=\330aD=\236\357\006>\352\004\006>\260\016\013\275mi\014>Cf\370=_s\270\275\241Q\n=\246\231\354=\311\323\032\276\233\360l=\000\271\034>o\316\262\275H\276\323<\275Ls\274\332\276\357\275)\231\274=X^\013=\237p\013\276\207\006\276\275\1773\312<x\340\376\275&\261=\275\205\262\004>\201q\261\275\317m\235=\t\013\037>:u\005\2763\267\017\276\345kn\275\327\036\034=\241k\321<\345\216\005>\330\350\305\275q\273+\275r>\035>AS\310<-`j\275E\242\027\275\347\371\354=R\242\215=\241?\201<F\321\\\275g6\246=*(\352\274R\244\241=\322\"u\275\252\337\245=\2260\274\275@m\236\275\003s\366=t\331\007\276\3505\014\276\036\"\317=\300J\r\276&\226\t>\341^\347\275p\262\213=\262\207\256:\033\356\334\274>7\014\276\240a <\325\374\021>bG\305\273\227\220\320<\326\003\017\276,G\032<V\022\366\275\365m\225\2758\034\201\275\236\375\330\275r\230\034=\261\372\216\275O=\203\275\301\346\016\275\340\377\342=\247\244\201\275\341F\235\2753\265\342\275\022\276\001\276i\026%\275L\270\241=&\227\247<$H\262=\314\252\016\276\367\202\010\275\227\026\033>\370\216\262=\374\306\200\275\230dM\275\371\333s\274\244\316\215\275\254\312x=q\264Z\275\002]q=(q\t>\371ls9\2418\005\276\237\336f\275;\352\031\275\320~\006=\010N7\275\230\376!=Vw\203\274E\257\020>\3352\031>\311\200\n\276\217-\251\272\263\334\336\275\032\223C=\264x\267\274\006\276)<%3\312=\r\236\373\275\272\236\020>\374\"\244=\357\367\010>\322\375\204=;G\030>l\016\034\276(U9\275{s\266\275>\344~=\013Z\034\275\\~,\2755\211\221\275,`+\2754f\177=\353\"\252\274\354\277\317\274\221g\234=\362\354*\274\267\\\030\276\271\306\305\275\256t\004=\227\240\320\275}\304\036\276W,Q\274\215\312\036\276Z\333\342<\230\377\023\276F\241\025\276<\215a\275\345\226\345\275\235\246\330\275h\311\225=\303\373\221= 7\322=w\373\272\275\320\323\326=\2338\260\275\266\306n;UY\023=\214\366\321\275\322+\350=\224\274O\273\224\346L=e\210\035>\367\237\017=Y\264\334\275\241\312\313=G\203\362=\214\234\255\275|\251\244\274\032.\275\275h\014\007\276\263R\000\276<}7=.w\025\274\300\343\266\275R\370\305\275\250r\026\275\363\310\006\274\023#\202=eI\213=Sk\350<\224\212\371=\262\315\254\274\226%\327<|\307\372\275\026d\341=\236\\\027\276\215\034\342\275\222\002\244:\200\033\002>\214H\243=\320!\335\275\rBo\275\312\250\014>\272n\360\275\225$\006<)\220Z\275SV\354\275S\346\034=\326\374\227\275\340\037\345\275{\232\005>\342@\327=\206\216m\274\306\353\027>\274\376\004>\313E\220=\253\335\n\2762|\362\275\330.\006>\316\353\312<.\177u=V-\214<c\"\014\276\325\232\300=\353\311\306=\321\266M\274\315\302\246\275\266\334\262\275\321\261R=\036`\375=\304\177\372\271K\000\207\275\312\030\362=/,\362=Y\367\327\275\021\210\313\275\034\320\235=\276\273\222<\347\311\236\275\243\2775\274\264\031[=Cc:=\007\330\227<oY\324=\004\344\267=\371\357\262\275sG\347\275/\014I\275#\255\022>\303\334\214<\371\033\251=<\370t=\206\260q=6\200@\273|\202\214\275\201\316\006>\353\322\000<\271[3\275`\274\350\2754\220\356=\376\016\030>g\364\311<\334\007\366\274\r\312\371=j\033e<2C\355\275\333\226\346=\241h\217=\313\025\370=\200\345\031>\270\214\271=\274\222T\274\222\037\301\275\263\212\007\276\243K\336\275z2\324\273\023\001\022\276\253\202v=\016DX=L\240\301\275^\204\270=\340z\306=\t\235\344\274\311Q\217=|\000\003\2767\003\200=NX\342<)v\006>\254\341G\274)+\217=\356\027\227=\027O\254=\226\025\326\275\227C/\275\252\260\023\275j\277\357;\230\332\270=\250\354\344\275[5\005\274(,\313=f\326\267\275\354Z\362\275\2611\271\275\333\345[\274\253\244\020\274G\251{=u\322\032>\035\361\246=\225\306\021\276\302S\017>\275\006\031\276\327\000@\275\245\260\223\274\321\340\001\276x\303E\274G\020\253=W\374\343=\003\254\032\275\000\334,==\206p=A\'\270\275\207\263\001\276/&\206\275!aT\275\237\n\272= \301\273=S\314\030\275+\333\242=\"\322\263=\264\260A\275\n\335\254=\337]\017\275DHG=\2747\"<\307\356\004\276u9\311=\213R\203\274\265\020\021>/\"\227\274\234\344\235=\2616\252\2750\234|\275\203\344\023\276\215\201\360<F\370\227\275\345m\252\275\016s\277=\014j\325\275\317\262\340= \375\010>xc\026\274\030\305\375\275\337:\003>\371}\220\275\254\345\352\275\270\361\332<2\031\374=\231\273v\274\000;\214=*\340\302\275e\334C=\373g\360<1\302\033\276K\255\005>&;\270;\373\017\364\275\0256\020>\344$\354<G\337\000\274\320\250\203<,\336\004>&T\272=D\224V=\237\201\316=\036&\232\275\326\262\363\275\\(\027\276r\023\254=?+\214\275\236Ox=\240Br<\215K\377\274[\267\026<\026T\334=\354R\376<\013\311\213=}\350\033\275\013\267\264\275d,\302\275 \010\217\275\rN\005=\353v\322\274*Y\267\275\345\314!=\022\212\253\274rg\225=\255y\204=)IH\275\266`D=m\372\001\275\037\240\220<\304\016\312=n\376\225\274C$\307=+\272\352\274\016\266\347<\242\252\343<\306\023\263\275\213\n\t\276\226\354[\275a\225\356=\\\311\371\275\200\355\224\274\351+\027\276{\223\226\275\225\347\031>\333\315\311\275C\224\202=Q\375\326\275Z#\010>i\246\357=\001u\305==B\277\275G\031\325\273)O\335\275\3309_=\207\250\2629\274!\373\275\372@^\275=\276\330=T)\302\275\305\247\323\274\226\226\353\275EC\230<\372\354|<\263\001\034>\344\266\351=H\305I=\014\032S\275p\031\232<\233\023\221\275\362c\311<j\336\266\275I\345\231=\263\033\335=\252t\206=\220\034\006\276\251[\234\274\274\226\313=\255\375\005>\204\330\257\274\221\204\361<8\257\364=Mt\030>\2664\237=@\336C\275\252\003\301\275f\313\201\275\334{,=K\000\033\276\230\024\000\275:m\211=\254\024\267\275\204x\005\276\301\325\270\2741\023\262\275\013(\000\276\233t\004>o\301\300=B\247&=\207\351\251=07\005>\313r\362\275F\027\017>\347\345\010>;\177\003\276\220\207\345\273\203\335\353\275r\210\264;\251\266\361\2756\024\323=\351\024\350\275\312\036\t>\252\372\t\276\3562Z\275\311%\360=f\005\033\274onr;/l\004\276\303\217\271\273]\370\226=i\355\177\274\222\214\366<\223\025\215<\335\207?=\274o\375=\235\232\346=J9\321=\304q\375=\223A\374\275]4B=G\255\321\275<\234\205=\1779b\275\230e\351=\004\263\014\275{w\252\275\t\234\257\275\330\035\007>O\\\202\275\247&\035\274\377\205A\275\032w\343\275\367\253\216<\260\206G\274\366\316\267\275fF\346=&\023\337\275L\220\305\275\370\310 \275\3720\331\275\244\363\302=EL\n\274\313\363\315=\0149\234=B\360\340=H8\021>Y\261\236\275\332\026\t>\256\240\t\2750_\204=\3638\027\275\352\210n=8\316\271\273\332\305i\274T^\370\275\346c\034>\205+\307=Q\006\365\275F\316\217\274\2571\230\274\201\374\337=\276\260\001\276\350\007\034>\333\257\215\275\017\233\343\275\240\213{\275j\342\022\276\316\034\205=\236%\220=R*\030>\177\020X\275N\243\340<C\212\347\275H:\035>\335\276\345=\345*\315\275\254\307\304\275\306\230\217\275e\364\005>\345\323\356=~\177\304\274\230k\034\276\300H\t\276{\222\300\275W8\033\276\344\313\356\275\226\351\341\275\354\371\303\275\363 \264\275v\240\023\272\033\005\270;\216\227A\274\343\373\034\276*\005\017>eg\345=\307Z\032\276\277\005\037\276\205>\033\276a\373\371\275t\245\214\273\347\317\200=\265\311\342\275\032\260\375=\3310\035\275\034/\006\276\"\307\243\275\306\365\371=\3242\017=\025\006\241\275\002\234\363=\233\361s\275\272\330\363\275M\273\363\275\333\254\277=WF\207=\221\240\024>\037\241\377<\230\202\022\276\354\322\020\276\t>\207=:\036Y=-\313\377<S\216#=\001\222\377\273b\353\244=\270\253\303\275U\030\254<-)_\275\251\377\020=\232\365\377=\035)\t>\220\032*\275>i\220<\361\235\014>\025\3528\275\210\007\001<\361\330\277;\003\\\206\275\005\336\363\2757\\\261=\337\205\002>\017\251\342\275}h\013=3$~=\206\250\231=\377\200\030>\027\033\037>4\204i\275\267\027\017<\300,\017>\307\216\356<\351\335^\275T\267Y\275\245\006z=\236\266&=\3646\315\275\212U\367\275%\343\377=\206\326j=\362q\033\273\"k\233\275\023\314\007\275V\270\314=U\307\305=w\256\264<\263&\256\275\347\211\246=\274\232\335=\335f\332=\270\206\034>c\267\326\275\026\327\023\276t\267\002\276[\035-\275\205\271\032\276\207\357\270=\006U\221<~\330\255=\331\026\376\275 >\315\273\033:\245=\027v\037>\320\261\214=F\314\305=\225\253@=\264\026\247=\251\305\022=F\001\267=\273~\013\276\365\324\276\275x\324J=\026\017\245=\367\275\332\275\333\354\364\274\272\351\376<\360\250\217\275\376(\245=\254+\023\276C\340j\274\313\263b;&\333\244=\250|\025\276\325\333\036>(E\277\275\177\347\230\275\204\321\035\276\212\026\033=}\373\327=\003\023\t\276\367m\236\2758{\233=9\317\272=\316\022\315\275P\247\316\2754\310F=\242y\273=\233\330\274\275\263\331\013>\205yH\275\215\344\262\275\2045\324=y\317\035\276\\\014\035\276\340b(=\240[\256=<\021\354\273\340Z\002>\311\037\023\275~\334\245=\215\311\324=\262|\204<\365\207\r>\231\322?\274j\017\235=\271!\010>\274k\020=g\232\214=\255\226\321=\003p\000>\007\301\305==\347\r>\006\207\333=\306\362\022>\214L\017=\363$\330<LyJ\275G\010z\275Ee\340<9\325\301\275nX\367\275\232\220\327=\201\366\021\275\330\310\027\275\0103\002=\nl\t>\024\361\323<\324\233|\275\t\226\370\275\340\320\345\275\261\316\020<\261\331\024>4\273\005\276\232\263\351=e\223g\275~\313\272<\315&U=\233-\277<\360\310\324\275\224\027\372=V5\000\276\210\372c\275p\236\321=\321!\372=E<\246\275}g\021>/[\353;\2164\344\275\\\256m=\372t\340=\240\336\010\276kh\322=\352\261G\275\250\3773\275\324\302\230\275\360\266F\275\333\264\002\276\014\276\301=\036\240C=\261#\224=\307\336\240\275\rH\240=\303\317\221\275\363ra=\207C.\275\325S\356=\232\024\034>\223L\032>\3031\226=\030H\017=C\227\262\275;\237\243=\\h\254=\215\337\266<\003\263\354\275\316V\267=]\\\275\273\207G\372<s\254\342=\304o\032\276}\354=\275\255\235\037\273k\257\362=|\315\227=Eg\021>\275\252\215<{\226Y=X\377\037\275\201\215y=\367\252J\275\201pM\275\225\224\274=R\177\323=\034F\026\276\027N\260<.6\024\275\2745\020>2\302\256=\323\200\271=\211\023\027=\346\246\366<d\3745<\353\374T;\035\316\242\274\007\253\325=\'\313E=\204#\035>\317\312\245<\021>\357\275\326\024\300=a\252L;l\013\002\276~m3=-\316\002<\344\016\006>>$\244<\277n\343\275\310\312\005>U\016\032>M)\260\274\304En\274\3210;\275cG\227:i/A=\024\032g\273\334\373\353\275Of\313\275\336\030\006<{LL\275\370\2256\2759&\016\276\366\335\031\276;md\273e\006\227;i{&=\367G\363=\337\021\r\276\327^\367\273J\004\304=\021\222\252\275\017\001\030>r\356\333=\217\323\264=\354\002(=\006\260\366\275\370\304\342\274^;\344\275\246\221\037>C}\034>\352\\\203=P\005\036\275\261.]=\227HT<\365\323\373\275\302\375\347=\310\317\035=\207GX\275;\312\314\275\031w\303=^\270\257\275\265\346\226\275&\375c=I\224L=\026\224\007\275\2610\372=R\315&=j\203_\275\374\277\211=\367\017\026\2761\242\375\274>{\027\276\347\202\327=\257\274\r>_\341\'=\362|c=\272\237a\275v\356\351=(\252\023>\020\312\220=\265\323\223=\336J\277<\0052\277=\245e\031>\246\025\357=\371\255\325\275\033\3601\275\355:4:3*\000>\302\201\013=\214\366\322\275\nu\330=\265S\035<\036\334\263<s>\314\272\t\363\253=\006\021\236=\3736\342\275\272\023[=\367[.<6\202\354\275\2077\353=\\\313\034>\023\362\'<\227,\310\274-\t&:8\334\025\276v\366\323<@\023\313\275 \204\257=\201R\206=\312\325\221\275\1774\362\275\353\215\350=\362i\350=\307\2205\275\327XW\273R\305k\275\236\222\002>Q\267\030>\276\310\220=A\332\247=~M\310;%\324y\275\223,\205\275\202\364\204\273\311\354\310=\346{\023\276\204\\m=\227\225\234\275\355\225\036>\321)\030=\226\342r=w.}<\337&\340=\342\3418=\350\3574=\306\030\002>\372\321\271=\324\340\224\275\244\326\326=\330*\300=\234\275\275=8\022g\275\036\216\236=R\3407\275Rk\007\276\036\365\036\2767\306\017=\336]0=\354k\004>\267\270\002>\014W\355;\235\244t<\204I\246<\025\312\004>\236\t\357=qw;\275O\377A\274\252\t\221\275I/\243\274D\277\242\274\221\235\363=\335%\227=\210~j\275\033\242\023\276s;\005>F\302n=\347\221\024>\271 \227=p\230\311\275!\327\216=\330J\377\275\335\233d<\356\362\024<\223\025r<i\277\213=<M\031=\317\311\032\2768\017\003\276>\r_=;\275\200\274n\302j=f\253\332=\305n\335\275n\033\033\275\001\212\375=\325\246\003=L\'\344\275\326\325\307\275\207\230?\274\345a\035>d\262\006\276q6\003=\335\367\212\275\320}0=TI\256=\355&\t\276\300<\034\276\r\370<\275e\277\326\275c\253\320\275$\021z\275\361Y\027>Ps\220=\354y\374\274\333f\022>\232\247\212\275AQC\275t\261\232\275n\\\313\275\004!\365=\250\303\221=PY\216<}\215b=g\037\211=\344\226\243\275\245\007\232=\030\360\322\275\306\004\255\275\273\264R=\315\331\034\275\021\t\373\275\372I\352\275\3560\033\276Q\225\n\273\362\037\372\275>5\204<\350\037\360=\213\215\031>\2478:=\3475\027\275=\370\026\275L\"\240=Q\016\234\275:\360r=\262\320\351\275I\nw=\274\276\274=\262=Z</H\316=\307\331\231=\371[\231\273\354\005\024>\276\350\350\274\0014\335=:2\033\274iO\273\275\234\337\200\275\347\336\235\272\233\331\267;e\261\026\276\021\232U\275c\340\025\275*\327\230\272l\320*\275\n5\013\276M \217\274g#\237<Y\315\336\275.@\027>\364\030}\275Z\261\r\276\204\273\016>\351\360\004=\016\251O\275|\365\003<\263\343\n\276*}\003\276\372]\261=}C9\275\n\301]\275\207$\314\274Z!\035\276\034i\035> \023\016\276\2517\022>_<e=\\\366\304=4%~\275)\275#=\374R^\275\376\275\034\275g\265\263\275\\\351A\275z\233(<\361P\306\275\375\'\252<\274-\031\2743YG\274\037i\264\275\215\312\274\275\306\254\300\275\356\323\006;\321\374\201\275\306\333P\274\033G\202\275\'\364\272\274\255\270E\275\303R\200\275?\312\314=\314\333\246\275\301\326\362\2753\224b\275\024\305\206=0\237\002>\212\002o=\335\006\200\275\260\321-=\356\247\325=y\\\306\275l\270S=\2453\357=\366|\307=\312\007\360\2755\004Y\275^\013\034\276\021\325\373\275\037\270\215\275\320\244}=\3749\366=\273\225\330\274n\003\222;/|\230\275\273\323\366=\027x\027\274m+\024\276\265\333L\275\034\302\016>\270\357\270<\017h\014>\273\220\377;\337\277\257=\223\331\033\276\343\351\207=PB\002>\215G\250\275\361\357\017\276\364\270\224=\332\213\260=\207\361\010\276\277Y\344=\205f\004>I^\r>Or\237=\303\304\262\275\2537d=\306\207\347\275P9\017>\376\364\362<g\262\237=\020\372\272=q\035@<\200\037\360\275\025\272\353:\032h\271\275\320\344\377<\235\315\032>(]\\=\263\010\014=\005/\217\274\227\321M\275]\330\322;\373c,\275E.\271\274k\240\226\275\237\017\"<\2652\020\275\0074\314=\331\321,\275\241]\023\276\373\r\220\275\232\345t=\371:\306<\003B4=\204^/<\035J\204<l\334\352<\2463\341= \213\371\274@PY\275m\300e\274\257\376\006>\'R\201=U\216\342=H\332\246\275\275*\205<d\326\373=\251\205\t=\230\236c<rN\214<C\330\316<Z]\201\275:\r\360=\337J2<$G\035\276\301\366\025\276\374\023\252\274T\312\014\276k\206\255\275{\023\"=\377\264\223=\315\016\024\275\351\031\261=\356K\363\274\234\343\350\2759\235\202=\310X\245\275o\347\001>\201\035\034\275\320\023\235\275\311\017\032\274\030\265\215\275\352\t\262=\022\r\010>\274\361E\274;\271\014<\030\223\262\275\311\207\223\275\010\257\264<\314\266\270=\351\247L=\277\217\344<f\376\313\275Z\361\001\275t\2110<\275\247\n>\006\021*\274\324\364\226=\264B\231<V\024\025>t\341\212\274\356\300\267=ZY\3635>\250\r<\310\023\236=>w\326=\260L@\275q\242\001\276\312\220/=l\352{\275.Y\240=\320\177\t\276\213\360\\\275\2674\035>|M\255=~\177\275\275\213I\032>G\336\343\275\025\200b=\347ru\275\2042\236=\367J\300\275\243Z\371\275co*\275\273\256\026=7\251d=\324v\262\275\0140\314\275\323t\003\276^8\354\275\rH~<U\344\360\274\257\023\023\276^\177Q\274@\237\302\275\215\207\022>\006\034\215<a\212\024>\226\325\203\275\036\203\276\275u\366\313\274\363E\241\275\t;\233=\217\224|\274\276\227\257\275y\005\353=\317\227\325=\242\246\014<`\362\035\276\322\244\252\274\252\307\013\275\213\002\322\272bV\232\275:F\337=@\327\025=<\247\372=\035E\024>\305!\031>\215e\330\275\340K\356\275\252f\342<hE%\274N\347\025\276g:\362<\326\327\211<\346\357\320\275\373\306\251=\275/\251\275\r\243\205\275\366\247O=M\306\271\275<\241\230\274\237\nI\274\364\302\027>\263\022\334=F\212\027\276\372&\000\276\254\r\231\275\304\r\262=!\206n=\362\\3=\206\365y\275\247\235`=\t\353\033>\323\311\371=DCF=\251>\254\274;\377\t>\376@\303=a\306\215=@N\215=\367\227\013;\t`\004\276\227\222\204\273\377l\266<\213g\360\274K\036\226=\004v\231\275\346\374\305=)~\r>Q\330(=\371\017\346=\306\330\357\275\035V\274\275\331\233\220\275a\027\255=\370\006\345=\002>;\275G\243c=\242=\237<\233\276e\275\323\363\376\274x\250\036>\203Q\037>\t%\021>\306\235\317\275\203\256\026>\310,\022>\326r\000\275\326E\375\274\272\377.<\250\271\003\276\246\005?\275?\212D=[8[=\347\025\373\275\177\017\333\272\371\003\374\275d\324\034\276\301\346\327\275\335\357\231=\363\327\217\275J\350\252\275\350\351\354\275\tb\007\275%\310\310<\303\\\332\275\016\320\010=\344\271\033=K\256d=\275Qa;\261{\000>=\324Y=\177\372\250=\240z\377\275\256\266_\274\222\225\245\275\347\211<=^mu=\031r\264\275q3\216=Y|\377=\317\345\t>\032\205\030\276\010\035\246=F\367G=\351\334\267;\345\201\362;\030%~\274\014\270\311=A\260\217=\261\036\021\276Q\031i\275\351$\372\274\224HZ\274\332\271\322\275]\352\016>LYk\275\350\214\351\275\351\024\n\276\216,\232=\333\000\213=l\366\316\275\317\032g<\367\325\r\276\376\020\316=\035\270\003>\202\263\323\275\0216\367\273\n\007\346\275\341\320Z=k\r\302<j\324\035>\'\264\273\275G\022l\274&\201\373\275\276\270=\275RE\330=\212\r\267\275Q<\201=\234\210\365=\366\t\267\275\017y\007\276\037\313\274\275\345;\002\276\031\343\\=\022>\265;\235\265\201\275\267\327\273=\\\016\232=\316\371\261=\205\2027<\356\260M\275U\232\351<\310\207a<\236\376\r\276\236,N\275\033\257&\275\320\355\325\275[\"/\274w\354\243=\255\341\305\271\323\301<=\216%\036=ud\225=\002{\253:[o\350\271\005\376\013>\204\210\031<\020\335|\274\035\342\003>nAK\274\202\307\010>\020\234^=\366\347\205\275\016)\204\275\0137\036>\360\205n<?t\034\275=\\\231=\346\306\303\273\216\253\305\274.\027\207\274=\327\224<t\025y=ah\006\276\301\357\364=6\330\005>\032\267\334<;\354\265=\025\355\274<W\247\334=?M\267\275\306\203\026\275\371~\322\275\303\331\250=[\232\005>pn\344\274oI\261\274#_\343\275\204r\302<\303u\261=It\260\274aj\266\275i4\202\2753<\220=e*\025=w\264\353=\256\022\240\274f\250\273\2744%\376<\226]0\2757\206\336\273S\232\001\276\324N\004>\370\3441\275e\033\300<\377`\277<\255B\367\275\327\013\033\274G\363\271=R\007v\275\252\377\231\275\271\"\316\274\257`\302=\373E`=1\345=\274\235\314\000\276\t\037\240=\177\225[:\326D\000=\003\334+=\273\220\323\275\372\316\347=\312B\301\275\016\262i=\200\311\215=\365\215\000\276@\010\327<\257\342\010\276\246\253\002\275\210o\243\275\217\355\312;\300@\013\276\335\214\t:\335\262\347<\003=*=\332\"\034\276\263\373z\275\301\366\004<\013q\303<\336j@\275\022;\036=\371\r\243\275\273V\177\275j\320\254\275\304\240\004>\301\020\300=\033\373\030\276\360e0\275\3655\257\275\013\004\361<\236\363v<\352S\356\274k\002\024\276lL\\\275I\334\341=\267l\255\274\341\337\016\276[\357\021=\340[\023>>\313P\274\234\375\004>U\352\341\275w\323\020>\022\330\032\276~\275\035>\240\032\004\276\232M\003\275\215\n\336\275=\277\335=cO\356\275\331\031\312\275\307\343\240\275\360\347\251=\326\013\342=hV\017>m\254v<\307\242\234\275\200\013\033=I(\263=\017a\266\275\213{\257<\375\334\013\275\273t\002\276Z\346\227\275\026\024\025\276\313\364\000\276\266\276q=\003\237\202=Q\357\247\275f\340\277=\025\0041=&(\204\273\300C\026>J\256\010>/\260\362\275:\346\025\276\243\205\322=\330a\370<\212u\243\275\344\206\360\273\262\326\372=\3464\252=!D\256\274\010\205\202;\357B\245=\222\247\204=n\006\340\274\2308\244=\303\362\333\275\313\327\336<\326L\030\2765\247\302=\314\317H=\335\323\337\273\237\234\322=+e\340=\3337\214\275u\336\203=\217,\365=J_\n\276\3741\024\276\231H\240=\312(\022\276\333@\300=\021k\213=\370\031\353=\340\274\336\275z\374\020\276\310\320\206\275\375k\027>\343\274\036>R\261\256=h~\n\276s\253\234=\205i6=\200\267\245=\'\277#\274(l\214\2758\256\033>n\035\037>c\330\324=Q\240\314=\222c1={X\274=\263\010k\274\005\265\n\275\241\027\212\275OY\237=\000 \271<\021\260\362\275#\'\"\275\000\036\344\273\350\252\264\274\226w\343=\263n\035\276\00226\275\341N.\275t\t\023\274z7\240\275\001_\000\276\306 )\274t\342\016\276v\357\254\2743D\247<\321;\004>\374\346\034>\325\352\212\274h\222\002=\374\237\010\276.9\316\275\273\360N\275\361\250\252\274\036C\364\275]\002\241\275z~#\2752\211\300\273\262\0359\275Y \350\275\251\013\340\275x?\246=- \235=\327\360\330=(\227D\274_\244\027>\266q\017\276y\212\251\274\225\332\247=/N\226\275\352>/\2743\014\023\276\243Lc=\3064\223=\024\005.\275\223\000\337\275\233\346\366=\303\276\226=\275\305\220<[\004\004\276\32467\275I*\024\276j\343\243\275\266\244\370;X\301\235\275o\205m=U.\361=\216&\025\276\273K\371\2753@L=q~\r\276\357\263\353\274\203\375\n\275\315}\265\275\207\262\027\275K\355\200\275vL\364\275\220\207\034>\303\366\226=\3049\021>A\211\2579R\237\004>\252\317\330\275\321%Z\275\3315\253=e\237[;\267\365\336=\231\225V=\207\276\203=C\032\215=++\027=e\231\210\275\226\006\353\273\026$\375\2744\350\246=Z\205\370\275\034\252\021\276\221|\324=e\360\220\275b\315\320=$\t\354=\305\217\007\276\357\360\337=O`\352=k+\006\276R\351\355\274\374\346\364=c\t\346<\223u\346=\204\203\216\275\237\201\226\275\021\304\030\276\321]\257=dP\022\276\342\323\001\275\274\217\232=\267\217\014;\224v\024=\251g\206=\356x\332=vz\227=1\002\025\276\026\255\227=\020Q\331=\025\337\";\035~\345\275\215\222\336\275\r\324\257\275\215\337L\275\273\253\352\275\232{\002\276\265\t\310=\\\n\320\275\254\013\031>\000\242\010>g\022\253=\3743s\275\030$\231=~\3349<\244p\356\275M{\231\2754\307\007>\312i\031\276\325\311\370\275I/\326\275\022\327\251\275>\231\261=\340\035\016>L\005H=\032\370C\275\372\213s=\234\031\261\274<^\010=\277\240\037\274\3675x=b\357\311\273\364n\260\275\264e\335=>\356\017>\245\363\013\276*\223\t\275\202d\005>\250d8\2751\327\202\275\033\263>=\317\346f\275V\007\332\274\005\256\254\275\236\031\375=\361T\237;W9\315\274\245\372[\275se\177;\227`\337<\207\312\373=\242\306\014\274\366\315\204=\320\305\017>\177\035\000\276m\261M\275\3641\034\275 \343+=\270\263#<0>\247=-\372\035\2769\350\010\274rR\035\276\363\005\357=\264\232\233<\022\266\250\275\321f\022>3\346\313\275\261\005\010=z(\325=9m<\275\250,\314;\235\270\360\275\224\362\267=)s\242\275\313\301\275=\262\336;\275\246^\007\276\307\277s\275\3165\310=\216\261*\273\026\322\2549\037\212\027>\342ja\275\334\257\022>\302\002\001\275\264\363\262\275\035\200\373\275\006\321\235<\340\005\317\271\351\343D\273\230V\374=S\200\t\276|eO\275\375?\036>\314T\000=\2215\017\276\000\264\324=1=\247\275 \263\351\275\300\225\205\275NE\t\276\0348\234\274\200\221\n\276!\220\353=_\270%=\340\220\202;\362#\302\271\"\233\274=`_@=\365s\352\275\000\277\036\276\005v\023=\271\200\302=\247\356\223\275\364\312\304=\'\223\353=\037\303n\275\251\010\377=$\246\303\275?\005\244<\255\323\312\274w\303\324\275k\211\230=\313V\252\267W\036\244=\244{\276\273P\366w=<z\374=K`\336\275\246\322\351\273\005\367\254\273\243\307k\271\216\223\306;\212_\037>\342\224\277=L\215\224=a}\272\274\313 \316=\245\306h:\251]P<\247\373\243\275u\202\027>h\260\266=w\326\020\276*\372g\275\035\235\222=\275\006\016=\"/\240=\223\224\376=\005\212\024>\363\331l=\347\030\200=\250\364\002>\031\352\332\274\230\003\022=j(\360\275\3515\302\275Bz\023\276\325\252z\275\030\372\002=t\311\352\275\002a\'\274\n5Y\275\263\252\023>t\234\376= \336r\273\270\223\306\275\2062\001\276\240\014\240\275\304`\"=\343\346\027>\323J\016\276\267\333\023=\323\320\003>\254c\373\275,5\312=!\310\252\275\330%6\275\305\244\372\275\257\027y=\020t\034>\034#\027>\022\357\267=\203k\246=.:1\275\002\375d\275\t\033\254\275\3717\255=\n\350\022\275F\353\003\274\336\014\362\274\346\354\354=\200\032\344<\222\255\266\275n\377\257\275zt\024\275\277\274\007\276\'\372\220\274\205\230\232\275\344\226\243=\362\021*\273\210,\360=te\032\274\327\224\246=h\315\203=5\251\365\275\2454\317;H\251\031\275n!\352\275\037=Y\275Ca\254=x\330\362=\305\224\234\275R\007\026\274\014Co\275\247V\263=\215\035\221\275\361\025\014\276R\321\363\275p\004\246\275\270_4\275\371d\221<7a\241=\277OQ=\361\224\213\275S\353\374=\212k\345=\226\237\027>\3605\010>A+\211=&\330\237\275\365\355\212\275uq\002>B\007#=9\223%\275\232i\234=.\213\357;\031\354`=R\037$=\246E\032>j1\034\276\205G,;\222!\366<\250\315\000\276x\204\260=<\271\031\276\322I\336=M\007\335<\036\260\235=^\357S\275\202\021\375=\241i\361\275\356P\030\275\350M\346<\370&\327=\211\025\320\275\320 7\2751\272_=/\357\n>\220\031\262<\025\006\272\275\200\323\375=#b\014\275Y\277\246\275\246j\356\275\005\216Q=\2606\236<\366`\t\275::\035\276\023s\264=:\221\204=\360\370\t\276D\261\370\275.\213\212\275\331\017\215;\202\n\242=!y\342\275\022\2128<\004\235\246<\211\004\023>4\230.<M\357\306=Y\373\350=\364\340\361\275\217\004\365<\022\254\032>\350\213\373=\307T\377\275\322,\217\274|\006\253=\317\031\017\274\311\332\010>+\245\027\276\205<\270<Z\342y=w!\326\275\311q\205=\000\332\221\275\314\367\325=\230\372\260\275\340\000\324\275\321\022\316=\300\265\215\275\232\265r=\202\3432=\325\033\t=\\\r\322=\354\373\007>\272\333\t\275^i\n\276/\314\264=\362\365\020>l\205\341\275\334\214\277<Q\003\221=\314h\203;V\203\334\275$\337\306\275#\2222=\336\267\313=\317\233\210=\301\036\362=\034\331\220\274{\212\341\275\362\226\363\275\261\365\217\275\206\241\372;\275,\277\275\005\267\016\275\263\334\246=\232B\330\275@L\356=Z\030\363\275\317\352F=Ddc=\335\013l=\316\304\203\275\234W\000>\330iD=r\025\001\276\222\265\301\275E\013\020>\333\036|<\226M~\273X\277\360\274.\r\275=#<\363=\363F\023<\236\031\237=2\222z\274\345w\275\274\375\017\n\276\0047\020>\246y\020=\233\237\246\275&\272\334\275\325\255\035\275u\017\224<\344W\023>nC\036>\245\251\027\276\225^\202\275\021\257\307\275\371S\343\275kV\341=9}\273\275\020P\300\275\3211\000>\352\353\234=wRH<\272]\r\276\227\227\236\275\274\367@\275\262\260\010>\005\223\375\275\201\t\333\275\337m\306\274\030\201\364=+^\300\275R\005\234\275\232H\352\2757\013\201\275\240\313\025>\232\273\364=\tQ\261=V\263\320<\302\256G\275H:\223\275\261\246\010\276\372=\226\275\275u\316\275tE\221\275\246\211\236\275\253\036\326=E\355\340={5\001\276\366\221\267=^~{\275\343\210\010>\206\350\007>\356\335!<|\225\005\275\":\010\276?\333\353=T:\360=\342\335\000=\264\303\273=\326j\372\274w9\254=-\370\267=\006O\020>\2165\251=\342\n\237=O_\224=\370=\261=S \025>\366\223\212=\232\022\027=\332\t\221\273\340\221\314;\304\226\t<\277b\202\275\366\226W\275\336\017\317=\363.*;Y\230\016=e\310b=\314\260v\2757\010\007=G\2262\275\001\212\206\275\322\354\330\273\306&\000\276\244\252\213=\373\365\352=\345u\224=\"\215\331=\251Q\210=\021)\034\276v\354\327\274\316_\371=\314\273\211=\213\035\322=\355%\255\275\'\324y\275\216@\034>-$\343\275\255\343\201\275l\244\311\275\264i\332\275z\316\024>e/\350=\300\255J=,\351\233\275\025\230\266\275\303\253\372\275\350\225\030=\025\372\036=;\372\035\276\251S\004=\250\021\033>]\2234\275Mx\255\275\005\370\024=\355\243\255\275\333B\227\2752\321\013\275d<\036\276\214\315\252=\203\304\236=\360\270\237\274\250\373Z<\257.e\275M\366\341=]x\376;m+\017=\200\317I<\322_\377\275[\270\266=m[A\272X\364\301=\261s\214=\0051\317\273\3231\006\275\353G\247\275\311\343\306=\351b\216=\2131\261\275\023\371\034=S\273\270=B\277\202\275 L\036\276\310\250\253=bc\326=0\255\255=\302x\225\274f\211I\275\253\372\031>a\242\031\276\347\266K=\335o\213\274\370\215\362=?\204\030=\004\311\177<r\376\003\276\322|\014\276\nF\037>\312q\002\273\2731\271<\215\373\243;\217\334L\273\013x\332\2754 \213\275\246\372\336=\\\014\253\273\177}\354=\340h\025>\250{\263\275X\010w=\t,b=\363\273\005\275\017\225\355=\275\362\032=\005\316\340<F\216\234=\343.\340=8;\247=\266n\034=\214\271\016=h3\304\275\252\324\016\276\376U\020\276\265de=\006t(\275\221\247\224<\326\322E\2757 \020>\251\232\367\275NI\311\275\036\360B=\"\334\334\275\266\004\351\274.\325\024\276\022\r\334\275V\025\345\275\216\031\363=Y9\223\274\354\"\002>\331\305\n\275\330,\235\275\243\352\344\275\310=\271=ze\024>6H\270=$\013\366=\301)\372=\010\351\300=\332\305\305\275\364\373g\275\276@i=\353\217\234\275=\013\005\276\227\252B=\016\373\031>\224\360\355=Z\244\262\275\331\035\351\275:;\226=\340\003\203=a\242\004\276-y\252=&\300\322=\220\372\022>\364\370\235\275\314\n)=\210\244\334\275\354\326\022>Q\351\256\2745\032\035>\314\020\327\275\345>0\273*[\220=\256\004\037\275\342\267\372\275\205\035\007>\231\252\336\275\215\203x\274f#\227\275\016 8\2756\3054\275\254|\025>\234j\023\275\220l\014>\201W\366=\355\206\360\275.\027\020\276\3344\021>\014\367\r\275\327\356,\275\242!\035>U\003\227=\273-\277<\227 \203<f\273\257\2754`\322=O\371\024\276\257h\207\275\330lV\275\243\340\336=ax\323<\376}y=\223\300\266\275i\265\023>)m\275\275\333W\302\275\026\210<\275\200C\206=\016\037\377=\n\023\005>\331X\276=\304~!=\221\025\016=\363\231$=\250\203\377=\367\327O\275\371qU<\357\nJ\275\373P\201\275\016\035\267\274\t\232\010\276\301g\227<\233-\322=+|\036=F\334\004\276\221G\317\274els\274.ez\274C\263\333\275\300\215\271\275g\334\327\274c\260\2629\222\206\271=&>o\275p7\336\274t\207\241\274U\017e=\n\313\t>8Y\331\275\\\207\031\275^\027\003>\304\213\363=\200*O;\000s\n\276\3119\370<#Y\016>\307:\205\275\353\021\376\273~\035k=\235\365\205\275\026\334\000\276\361[\242\275\325\275\226=\237\355O=\250q\373\275\351\240\022>\005R\032>#\0109=\346\326\353=H\027\351\275E\177\275=\360%\212=\274x\276\274X\326R=\274z\255\275\345N\265\275*l\324=\262\366\316=\232 \224=\323\321\206=\316\035\330\273\213r\022\276No\330\275N\352\023\276\265\'\035\275`\200\304=\323D\237\275\215\277\253\275O\341\306=v^#\274\206D5;\241\213?=\231\274\223\275\350=O\274g9\013>\311\374\006\276\204e\357<\275\304C\275\301&\016\276\017\325\233=a\354\370\274\251\265\351=\234$\311=(<\021\276|ZN=\351\267\332=\233(\300\275)E\326=\351pz\273%u/<x\256\031\276\\s\361=\241\031\303\275\005\257\030\276\177\337\010\276\2602\275\275\3521j\275\217\n\013\276\037\264\311=\034\227Z=\353/\234=\353}\016>\300[\t>8\232\317=6\313\032\275\241\244\336=E\323\321=\034\213\022>\030sj=O\016\r>{\323 <\003\226\267<o\341\364\275\267\300\006\275\014\300_\275\317\361\001\276\206\361\024\276\311\262\374=]G\370\274\305\333\023\275\3730\246\275\'*\302=\"\367\226<\211p\013>\357{\010\2763;\007<\354N\006=\300\233\310\275UE\376\274{$\254\275$I\247=}\205\312=\316\262\216=z\001\006\276\250\375\241=\265\'\230\274\345<\220\2751\211\\\275%\217d=\005\260\252\275<\345\331\274\0376\010\276O1\344\275\346l\214<9\323\332\275\303\005\233\275\224\345_\275\305Kg\275\356k$;-\234\031>\214|\002\276.\305X\275\210}\223\275\361\315I\275]\013\347<\004|\217=<\241\017\276\232\215\277=h\032\032=fT\222=\271j\235\275Q\262t=\270L*\275R\217\265=#\010\034\276\'!\253\274\356R\214\275\000\355\310\273\003\272\336=\317\310G\275\014?\372=\177\331\027=?m\344\275\367R\352\273\004\335\373:\373\036\024\2755\027\364\275j?\023\275\246uZ=]\200\302\275v\032#=i\337\271\274l\252\206\275\322\365\213\275\0049v=\222\355\362;\335\364 =}\034B:\324\354\206\275O\234\036<\210y\336=\030\021\312\274u\233\035\276\347S\000\276S<\227=\303\007\324\275\030\017\244=\nK\221\274T}\341=\347+\375\275-v\265=\225\225\020\276\346\363\034>\2164i=\274\300\370=\3227\006\275\207yg\275;X\205=:\346\352\275\343\217U=\366\274\020>G\346\210\274\312\244\312\275/\354\360=\222\351\320=\022\013v\275?3^<]\342z\275{\006\236=t`\211=\330rX=}\345\310=\3255\021\276a\333\361=\2476\373=\010\335\301\275;\227-=\224\366\002>\246\370\006\276:\t\004\276\334\317\000>\361\"\247=\023z\025\276*\032\032=\222\312z;\206\220\223=~\224\013>\tJ\231=\244(\026\276\351\351\202=m\331\365<\233\nT;\213\203z\275\261X\014=\353,\017>T\020z=\014\315\334=\035Y\005\276\005P\345\275\007$/\274\210\022\276\2759\232\215:]\321\226\275\317s\302\274;\313\350=wJ\332\274\332\236$=\320`\303\274\316}\274=\207^\312=\206\204\034>\335]\033\274\035\004\001\276d<\037>,\376\324\275\372\356\224\2752w\004>\212r\372\275\213\307\007\274\201\t\004>\021m\340\275v\323\214=\326\303\336\273\276\330\320=V\024\t\275\304\323\n\275\212y\237=Q\243<<n6\316\274&xX\275\371>\224=;\327\331\274#S\246\273L;y=+\005\221=\336\346\364\275\313>\023\276\316\226\037\276(pd=\364\372\214<nWn=\312\203\246\274wS\005=\240u\342\272\3518\300=t\371\333\275\010\265\025;\276\3214;1i]=i9C<\031\241\303\275\226R\326\2757s\037>\227-\215\275)\001\330=\203\221\237=\021n{=\270\266B\273\003\0004=-\335\313\2758\374\032\276\252M\032\274zp\343<z\261\246\275B\231\211\275G\322\317\275\213\177\350\275\2537\377\275\350\231\321\275\357\317\006>\3613|=\235\235\014>P\250\024\276\0050v\272_0\315=\302\356\371=\321\357\306=(?\236\2755v\357=:5%\275l\300\262\275\006H\361\275\256\266\017\276$\305\216<\232\027\014>\342\347\377\275\r\311\006>\367\214^=M\027\334<L$\031>\245y\346<n\236\315\275\231\237\263=Rk\323<j\277\275\274\232\361\366=c\255\241\275Y~\017\276\2221O=\002\261\247\275\325\326\335<\222{\317\274\025\230\350<%a^=\210\373-=\250\3352\274\035t\030\276\320\233|<C\'\212\275\277\231\365\275\325N\035>~<\357\275xJ\000<\223T\306=V\300l\2752S8\2746s\201=\016D\017>h\241\356=\230\177\t=\027:\001\275G:\215=\330?\222;j\241@\275\244\272\276\274\311\353\006\276\030~\016>V{\344\274\007\245r\275\205\035\002\276Es\345\275v\316\360<\021\301d=\371\226N\275q\245\342\274\037up\2747t/\275\357H\017\276U\332\025>b\350i<|\242\204=\006\326l:kq =\254L\337\275\265\273\000>\371X\010\276\037\276\232=\2020\234\275\266\210\270=\256#\331\274\217\200\315\274\357\254\t\273\200\257\335=\373\345\201\275B\337\372\275\260-\220<\234\003\240<\027\247\225\275o\205\263\2751d\005<\000+\317=8\263\t\276\246#\211=\377u\215=w\231&\274\267\t\261=\303\222\226\274\261\026\334\274hj\r\276\207\227\225=\004\035\026>\'\373\032\276F\031[=\250\257\033\2762\320u=\364\010\336=\n\211\032\275\311\010\030\276\324\302\354<\250\301\341=\021\346|;\360\013\005\276\021\337\305<\322r\311\274\336\2053=\254\341\006\275\325\010r=\202\007p\275t\363\031>_\205\262\275>\345\324=Z\260\271\274\203l\010\276\003\301\014=\247\264\021>X\301\232\275\225\343\225<E\244\026\276\220\360<=\344\250\334\275\271\367\244\275\243\300\345\275\223\366\201\275)@\327\275\300\271\205\275n\331 =a\273\201\275\336\177\232=H\261\305\274r\016\303=\215\346\372=\367\374\234=\370k@\275\253y\010\276\3638v=\2156\000\276\234\023n\275\004^P\275\2769\207\275\"|\001\276\201\351\031>\207\261\010>\247n\302=\035\024G=z\233\343=\305\222#<\232\303\r>{\206n\275\001\241\263;q\2046;\220\354\222\275\026]\216\275\032\310,=\320(\020>\256\267\021\276S\247\017\275\331\242j=_\254\020>jc\341=g\330\272\275c\353W={\365\013\276\001\236\300=\267t\226\275\225l\017>}\230\373\275\210\221[<\200\366\035\276dY\245\275\032#b\275,\215\327=n\361\222\275\374\tu\275\365\236\002>\330\353\002>\337FU=\343\261\266=\255\316\267\271\227r\220\275\221\005\255\275\236p\312\274B\343\251\274i\353)\275N\177\300\273c\215\356=P\312-\273\314\236o<\270\006\r>\316\302\242\275\r\224\r\276\242\2344\275\020L\014\275E\373\326=\032\277\362=/g\003>_\261\023\276P:\323=\330\205\010\275E\336\211\274p\276\305=\374\330\215\274\241\315\203\275\036\025_=N\202\312\275\366$\230=Jl\023\276\026{d\275\241x\263\275\036\220\202=3\223\377<\271[\217\275@\247\222\274q\r\264\275dsu<\214\274\303\275VL2=\216\353e\275\376\374\320\272\2242h<\226\034\201\275\216\301\016>\245\275\211\274\316\366\036\2753\313\300\275\257[\333<\224\000 :!-\260\275<\273\271\275Y\307\314\275\032\323?\275\217M\024\275\001g\307=p\353c:\271\357\310\275\332\240\177=\024\273\267\275(V|=\177\201\005>\211\001\017>\342,\355\275\274\215\277;[\026\025>\002{\177\274\342\236\355=\265\337\351\2758j\335\275\374\350\014>U;\361\274\177\246^\274\303\363\210\275\243\267\032\275\300D)\275j\346\003>kN\242\274\002\265I=>1\250=,\311\003>\302\025\013>{G\373=|}.\275\224\261\317=\3315\363=\032\300\327\273\332^\365<h!\211\275\2177%\274\311\035\236=\000\346\244\275\344\360Z=\373\364\017\275\034\257I\274=Z\005>r\323\010\276\343\320\320\275c\242\321=x\235\257\275q\203\204=\352\345\335=7\374Z\275\2156\310=\333\216o\274\344[\345<\004J\222=&j\003\275\274\316\346=cQ\266\275\\\314\334=\237A\t>\363\302\253=\300\263\372\275m\n\035\276\263U\024\275\324\t#\275\211\225\033>\014$\323=7\330\213=k\267\363=\275Tj\275\201~P\275~U\032>\224\023\335\275\334\251\242\275\020VH=\275\262i=]\203\r\276\370\201\240\274\243G\034>\246.\234=\006N$=S\312\371=~C\256\274:\236\003>\356\024\247\275\264\232C\275\016\017\024>\373\207\266=\333\233\362\275wB%=\212\373\006=\335\226\354\275\'\274h\275^\354Z\275qU\324=:3i=\241\014\366\275\245\301\026>\320\202\n=\200\"\"=\204\016\004>\332\"\226\274<\2300\275z\217\231\275\032\020\254\275\311\213\030\276c8\320<\201\245\232\274*\006\020\276\020\365w\275v\001\372=\340\263\005\276\322F\213=\355\350\310=BQ\036\276\256z\272=\032\017\333\275\007\3332=7`3;c)\202\275\n\364\020>\263\337k\275\261u\002>\300\215\240<\2519\243\275\351\010\367=\304f\261\275F\251\010>\212f\r=\344\320\036>i+\n=\341\354\327=\325H_\275\377O\222=M\364\270<?\275\315=in\006=\033\000\024\276\224\235\031\276#\313\203\275\307)\320\274\003\001\255=\\\037\344=\343\023\013\2741\377\307=\006FA=rA1\275\201\260\217=)\273\343\275\365\334\257\275(\025\026\276#\237\302=\267\036\362\275\027!\316=\r\213\330\275k~\207=C\356\326\275\341\223\263;J\177\347\274\371\277\313\275\010\227\016<\017+\211\275\014\341\007\276G\017\304=o\330c\275p\t\265<\2160\360\275\254\217\223\275m\266s\274\"\\\020\276\266\363\221\275\222\274\216=-Y\233\274M\375\341=vW\362\2752\026\003>\3202\257=\206\010\021\2769Hn=\227\211y=\326{\321<.\276\363=?\322\336\275\265\240\303=\210\347\010>\323\365\023>48\244<\363\251\013\276s\217\212\274\033\223y\274`\204\251\2750\353\242\275\024\017\373=\204\336\366\273\023\301\327=\252F\330\275\272\203\375=\007rG\275_\237\336\275N{Y=\352\013\035\276\223F\300<\'\2532\275\200\271\356=\260\265M\275\234\210\273= p\363=\341\216\024\276m0\247\275d~\255=]P\365\273\311\250\316\273\276j\321=\202\2313\275\003\021\302=q\320\031>\333\213\273\275\322\003\022\276\326\"\005=O7\032\274\237\001\372\27583\252\275\343\356\306\275\226\324\025>}\272\363=<@6\275%E\377\275`H\033\276\306l\272=`\277\005=\205\274\014\276\331\022\267\275/c\202\275K\246p=\230.\352\275\026\361\001>?\363\216=\330\271\032>\374\375\032\276:d\277\274I\010\n>\001\227\343\274\\\365\001\276\305K\345=7*_\273\374\265\001>~\024\216=\000j\204;\267M\004>\365]\352=\343,\314<\232\261\022>\314#G\274\226\311)=\335\224\010>8\316\016\276\2432\257=\255Z^=t\330\262=\001w$\275F\211$\275\315\243\331\275\302\016[\275\224[\021\276\251\302L=\307\374E\275a\002\003\276\316t\354=\362$\025\276\234\301\252\2750\225\216=N\034\361\275b\031\270=$#\322\275\335\254\300\275\252\027\353=\351\377\346\275\013\027\022>\200.\330=\242:\\=4\360\250\275\010\323Q<\207\030\001\276\255\361\272\275`\n\005\275-\242\217\27563\020>\352\330\013\276\324\214\014\276\323i\016>\360\032x\275\020\302\233\275\202\332\226<E\016\026\276\361\006\207\275f\343\002>\316\3144\2730*\005>*\341[\274~T\336\275\347\244\256\271\211[\252;\010yV\275\270n\016\276B\306z<j\025\247=\016\320\027\276\237\345\013\275\213\337\005\275\334\014\331\275t[\351\275>\352\230\275\356\332\t\276\360\317\305=\3153\264\275\201\267\266\275\371r\350=yN\006>\271#\342=O\234\242\275V]\317\274B\205\027=\357\037\276\275}PH\272Q\342\014\276+\324\200=\'g\237\2754\221\233=\275\241g<[\261\323\272\220p\201<\215\017\007>v6\026\276\244\267\303=\324L\325=F\003\032=\201R\232<\366,\321\2749\276S\274\362\225\013\276\331s\330\275\262\355\007=R:\'<z]B\273\203\322\032\275\205\250\304\275d+\002\275\215\007\374\275N\265\303\275/F\265\275\306\317\277\275\215@\323\275Y\375\017\276\035\230x=\353\253z\275\334\262\263\275\276\356\025=\032\353\201;\361\364\016>G\375&\275G\253\022\276Hr\233=;J+<\023Z\024\276Z\241\371=\305G\213\273\337B\r\276\333\177\010>6\377x=\265Gg=\365\272\377\275\206\273\331\2759\024\304=\023\302L\275\361\260\300=c\370I\275v\021\315=\250{\246\275[\226\230\275\324\377\032>\316;\370\274\027 \306=[\377\025\276\034\372\035>\244\331\276:k\233}\2741\211\224\275h\243\300=\340\030\354=\237I\345=\3701\323\275\'Q\342\275\353\3228=7/\010\276~z\033\275!3\217\275\342\277\262\275\320\367\030=\250$[<\253\253\242=\323\302\347\275\016\245\346<\203N*=\002C%\2750J\037\275\232\370\277\274\266\003\307=>>\342\275N\373@=\304\263\300\275\2216\373\272\n\222Z=`\023\372=\375\035B\275S\201\263\275\361cH=\024\220\210\275\207\243\355=Go\022=\377\303\237=j\326\330<s\371\245=y|\333\275\314?j\275\360F\271<\216\213#=\372\247\220\275\016J\031\276\237\320@\275w\367!=\362E\276\275hG\037=\300U\022>\344B\324=\373\371%=\001\206\"\275\025\035\036=\212\311{\274\363\323\261=F\002\277=\275K:\274\331\027\232\275m\255\017\276\"\244\346=\014\204\250\275\262\035\016<.T\370=\305\224\244\275\265*g=\277\036\323\274\366\223\222\274\36169\274\3371\"\275\320\265\317\275\341_\330<m\221\210\275hY\230=\273\316\035\276\010M\t\276\310F\371=:\304\364=\340\017\347\274\026\204\220=\252%\217<\265\021\273=<\373\203=>\352\260\275\230d\020>\017#\020>\201\241\006=\366-\026\276\014\212\2439\207\251\343\275\301\016\355\275\324\006\241=\271\273\301\275\331\313\227=s\333\020\276)9\234\272J%\317=\226\253\026\276\004\307\322\275(6\264\275=\335\334=\357\034\210\274\005\324\301\275\0327y\275\345C\266\275\017\213A=\316h\267<QA\226\275$\033X=N\233s=\260\273\205=\371+\246\275\220\313\\\275\020:\250;\342\212\356\2756\263\006>\254\240\233\275rf\010>\204\274\024>\360\230\316=0a\262=\202\345~=\371-~\275B\313\n=\362\262\362=\306\215\376=\0061\217\275\335\250\314:\215\204@\274\223G\204\275q\006\017>\374\270\313=\227\003\312=\206\216\026\276\367\264\242=H\245\214\275\243\246\340\275#\312\026\276r3h\273$y\223\275\213\241\020>\020\347[\274\275\252\035=w\364\307\273\3627\003>k`\010\275\301b\361=\361\355\363=d\313\336=\037\030\361=\360\320\027>\345M\357<\274\240\206\275\026l\234<a\311\003>\373\005\247\274K?\366=\013;\003\276\272u\350\274G\032\021>\252\240t\275\177\365#<*\345\200=\225\n\021>\010\305H=m(\264<\002\335\252=e\271\257=\033\017\340=\016>\316=\241\032T=\370w\337\275tUg\275\353Y\000;\014$`\274{WJ\275\351\305\336\273\0108\232=\372\343\032>L8\275=\340\3072\275\2605\013<\016v\247=\250\315\311\275\250\372\017\275\346\256\230\275\3757\210\273,.\357=H\316T=\357\206K\275#\020\340:4\224\331=\0011\345=C\215z\275\350e\253\275@\222\r\276\226\201\206=\033\340\375\275\004Am=Qh\376=c\247F\274\240V<=\206\210\020\276\246\352\252;\357\010\224=\261\307\265=\376K\201=\027\335\234\275\006{\216\275ZNs=\206#\n>\252\r\177=\260}\303=\261K\017\276v\270\362=\220f\210\275\2651\344\274Ju\231=C\010#=w\210\006\276U \307=[\007\336\274\316\214\214\2753\376\367\274\224\323\035\276\271\370\334=\032\347\235\275\027\213\000>\026\332\202\275\272\323:\275\024\346\321\275X\205\342\275\327\257\230\275v\336\316=\241\356\244=\303\271\t>\225@\346=Y\307\206\275\224k\030\276\327\352\3709\261Z\036>\252u\216\275\206\311\255\275/6\276\275\ra\251\275*\330\037=Y\202[\275\244\314\032>\365/\365=\3275*=\203\373\223<\271\222\010>&\342\014>Pt\031>\213^\n\274\342\031\316= #\244\274`5\223\275\277\233\027>\007\376\227=\234\010\370\275e\333\206\275i\377\342\275d\237\253<OV\253<S\035\213;\347L\220\275(\345\274=\362O\265=\202\336\016\276\212\346\203=\363\017\236\274O\\\373\275\2611B=3Z\223=<\313\\=\226\354\323=\262\377\360=<\300\244=*\315\336\275*\014C=\'\010\030\276\031\370\t>\276w\324=\214x\375=.\204\234<K-\344=\360]d=|\002\217=B\345\376\274\027!\361=<{\373\275<Z\273=\206\027\007>\202\016\300=l/\336=\001\205\267\2754\005\331;z\364\031\274\212\013\310=\2449\331\274\374\007\020\276\371\317\000=\220\350\022=sI\321=\356C\317==\276\376\2759\366\021\276\345\266\275=\247\265\227\273>}\203\275\341\304\220=\n\236t\275\375\273\266=\373k\256\275\216\316\240\275<\321\265\275\337\007l\275\336\007.\275D.%\275\274\357\336\275\272\201\320=\337\201\367\274Q\277\271\275\361e\212\275\261\315\343=y\212\025\275w\254\334\2759\014f=\237\302\257=\205\332\025>\327N\201\2755o\301\2755\320\342\275R\241;\275\370\231\301\275\374\272<\275\341\345\276=\rTg<\371\273\002\275\212%\213\275\022I\345=\315\017\333=N[!=\336\306\352<H\365\352\274\253\017\362\275\010\276\035=\321\311\027=\267\320\025\276\217\213\223=<\030\272\275\305\237U=,l\335=p\032\275\275\023X\363\274\304\034\363=\343\305\016\276`h\200=\027\316\311=H[U=\003C\221\275I\204\257;\332\277e\275k\315\002=V\013\t\276\344T\377\275|q\302=\0078\t>\311\030\225=\350M\010>.\261\340\274(\255\313<\252\027V=\222\271\232\275o\036\222;H2\353\275\224\202\372\275\271\312t<\216\362\305\274\371%~\274\002F\024\275\224\034V\275r\344\345\275\270\242\300=\276:w<\2722\360\275\225AG\275\246\032W=\372\340\326\275;\324\250=\'\200@=\256\036\302\275\263\260\254\275\270g!<\205U!\275\307\225\221<B\031\375\275\221\023%\275\003g\361=\177\r\327=\216*g\275\036\363\326<\235\216f\274\274\210\025=\003\010\366=\361l\353\275\266)\024;\n\003\256\275\020F\236\275[\371\330=\241Lm\274X\213\004\276=\301\002\276\2552\216\274\245\375\235\275\200g\314\275~{\020=\345\220\372=\237 \312\275\207\277\001=\227\035\000\276\200\227\213=\374\374U=\010b\002\275Q/i\275\321\356\313=p\217\225=;\204\313\275\006D\033>\206t\246\275:\275a=\246\035\227\2750\345\017\2761\362\036<\364\272\250\274\237\022\032\275\367\311\017\276Ma\236\275\006\235\256\2750\230\t>^\271\017\274K\240\001>@i\343=\010:\272\275\370\345\001\276\272SK\274\370U\341=M\037\345\275\005\376&\274\363zr=9]\327\275\031\334 \275Ns<\275\006\260\022\275J\031\223\275\275\222\347\275\205|\316\275\002yT=y\225{=\326^P\275\362\202`=\205\035\235=\213\364\225=\2503R\275\002\014\213\274*\n\240\273\335P\315=\215\203\255=\305\375\032\276~\033\263=\256 \301\274\3762e={x\206=\315\312\205\275E\324\221<\017\252\376<\250\311\324=o\016s=W\211\236\275\025\230\250\273lAY= \375\251<R\263\253=\230U\005\275\371\215\177\275\025%\244\275G\267\016\276\341\240|\275T\344\036\276q\207@\275v\361\222=\036h\336<\335\232]\275S\001\205\275A3\355\275\376\035\327\272\256\352=\275`\313\001\276XR*\275\357_\010\276+p&\275\177\014\310\275%<\213\275\227\031\320==b\362\275\215\303\364=\361\002\032\276Q\260\221=\337\230\032\276\366L\006>\365\343\267\275\222\277.\275GN\241=\327\301\025>\036:p\275\235\242\217=UQS\275e\373\336=\256\267\270;r\266D\275k\022\006>\276\335\005;\250[\032\276)h\035>\213-\244=\324\345\342=\3665\371=q@\032>]/\271=I\236\t\276\232\3142\274\275\243\342<\274z\006=\020\343n\275\224\r\262\274\277>8\275n\314\371\275\241c\033>\201\002\n\275\2673\371\275\027\264\212=r\372\307\275\317\026\231=\026\322\250\274\230+\231\274\270\013T=JY\320={\325h;\246\007\211=\321}s=\271g6\274\271\200\261=\014\340x=\356\372\342=\347\345\213\275cd\367\275\357x\306\275\220n\313\275\343\354\360=\355\257\'=5\013\024\276\017\256\262\274\215w\326\275M3\233\274\rU:\275U $=;\343\330\274GM\017>+\313\264;\362\006\000=\307\241\204\274\231\220!\275\036o\265=\017\277\010\276\203\366\255\274|:\323=\221\376\230\274Ey<=\365\225\361=WX\010\276\370G\235\275\266\202\r>\354\006n=\031&\230\274\0219\033\276\275+\030>\3131\213\275\'\013\324\275{V\004\276\214)\024\276C-\327<h\035\226\274f\003\274<\204>\024\276\235\276\033=#\221]=v)\253\274R\371\351<\'\265\356\275\221\243\034>\326xt=\370W\023\274\002v\356=6\332\021=\337\021\002\276j\255\355<\233\036\211=X\337\023\276\245\027\254=\260\265\025\276\363\326J=\357\254\006\276\016\371\004>\245\301\236=s2\340=\240\214\n>\301l\201\275\376\272\001\276W\266\220=\216\331\276=\300\216U=\367\025\357=N\003\316\275#\377_\275\245\014\010>\240h\213<\302\315\276=<\304\010\276F\333\252\275\377e\r>\017\247\364\275\020\301\003>\341\377\037=m<\'=\032p\264\275#\177\024\2769\260\331=zS\215\275\224\334A=\032\3645=\263\300\007>f\004\275\275\";B=\344Y\004\276\246m\302\275c\020\030\276\374\3661\275H\240\331\274\364V\373=`\025\372<Zp\\=\222\327\030\276\273\007\322<\t\025\036\276\274z\370=\274\226\036=\305\216\025>\216>\020\275u)V\275UX\373\275xH\223\275~[\264<\022\267\347\275\311\206\366\275}\\\334\275\310\000\235;\266\260\261\275]n\331=\373I\313\275\273\206\373\275K\200\236<\301\021\217<\023\346\211=\361g\036\276\215\221\345\275R5\305\275\342\231\252\275\305\211G\274\333\351\021\276G\356|\275\266*\005\276\010\021!=!\030\345\275\006\025\336\275\354\033o\275\322\005\235\274\365\317\000\276!\240\340\275\365\263\017>6\253\206\275\007\211\037\276N\026\256\275?\220\000\276\340\256\254=\031\006\270=\245\307\033>\000\000F\275\265\275\216\274u\217E=\322M\354\275\371\356z=\025\356\r\2768]\311=\336\375\024\276\374\354\027\275\332\036\016>E\273\333\275;\374\243\275!\314\"\275wP\005\276\313\200v\275B\304\327=5\007\223\275S\231\206\275l\226\263=\373\006\243=\373\230r\274F\355\031>B\254\333\275P\"\335=t\242\333\274\t\016\000\276-E\207=\017\022G\274\036\336\010\276N\234\t>\024\373\342=\252\227\020=p\270\204\275\310 \351<\331\007\020\276) \277<\263\033\304=\225\017\344\275\306\355\033\276\323\206\226=\371\177\000;\034\026\373\275\330\177\326=\375\354+\275\366Jk\272\265\332\266=\320z\254\274!\0259=\024\307\204\275S\321\020\276\235-\204\275\225\223\367\275%)\206\275l|\022>\n\203\031\275RI\025\276W/\353\275\245\372\356=h\330\253\275\344\255\355\274v\006\245=\231n\035=y\034j=\013\274P=\235\005\004=93\366\274\331g\234\275\032+\t\276\005\354\272=\026\224\266\275Fc\036\276\213+\360=p\027\272\275\377W\265\273\213\303\036\276\245\244\224<C\356\204\274^\241\310;\357\313\211\275\262\223\"\275\353\305\301=\033\264\372\275\347\305\001\275\n\2012<IS\020\276q1\202\275W:\250=\252\n\030\275\010-\025\276\263\t\323\275\215^*\275\205\3728\274\251\227\320\275\326~\347=\316\t\027=\037\t\301:a-\270\273\243Q3<x\322C=\350\370\365==-\205\275\010^\024>Y\254\247\275\'\213|\275,\013~=eW.=\021\224\337;\017hs\275\331\002\023>Z\334\361\275\266\224\235<\000\360\356\275\236\310\354=\016\324X\275\0078\363\275H\312\206=\263\3500\275\367\340\312\275x\247R=\237\307\377=S\277\261\275\234\211\351=c\316\362\274\205/\t\276\003\031\236=\325P\235:4\200v=\277\007\010<\276/\022\276,\n\000<\222@\335\275\'\226T=\337\014}=S\207\333\274\224t\022=C4\270\274\310Y\273<\nu\014\276\212\310\372\275\327\374q\275\355\0224=0\347\310\275\322$\276<\301~\314=\n\332\003\276\303^+\275D\341\370\275m\036\230<\277\246Q=\t\261\255=\021\330r=\331\305\233\275\346\375\274\275$\227\335=\375\006c\275\257\301A;=\342\n\276\317\317\364=\222g\331=\211\374\007\276r\335\204\275\0259\001\276e;\312\275D\304V\274m\313_=\216\206(\275ne\244\275\'\242\003\276\353\227\213<hh\306=>\000\031\276\003<%\275\315\351-=\221+\017\275\322\013\004\275\3205\004=\242x*\2754\344\360\275\263\305\370\275z&\321\275\236\027\006>\233\240\266\274\241 \334\275\205\027\024>\004\352\320=\314\225\222\275&\226\261\275C|\353\275}\324\260=}i\003=&c\361\275\316\300O<\\\235\002\276=\032[\275.\207\017\275J\253\005>\264\254\004>!p\320\275V\254\000>\215\255^=\033L!<\226G<\274t\0165\275pX\274\275\357\363\007\275g\367\034=\002\310\002\276=?\023\274b\242\223=\216M\257\275%\351\204\274\210^\234\274X\264\314<\034$\352=a\333\303\274\253X\335=\323e\003\276\251\260\265\275\'\367\n>\271\251L\275\013\351\207=\302\226\r>\272h\375=\204s!\275\003z\232=\307\312y\275\277P\302=\324\003\022>&\373$=\227\317w\274\250\376n=\321]\032\276\235\007F=\365\375\006\276N\200\222\274\247l\273\275Gn\020\276\320+\207<\022\257\355=>M\342\2741n\207\275U\374\233=\276\353\033\276\301+\021=\255\024%=6\350\337;8)\001<\377\016\366<{|\032\276<\003\354=p\220\025>\363-G<\027\2353\275\035@\267=aY\274=\231\310R\275v\001\352\274\000\376_\275\330\374\350\275\235\375\362<\237\256\364\275 \021\267\275\007i\223=\312\340\366\273\362Z\022\276\312~\220\275\300\301i\275/\222Q=b\266\221=\345X\375\273\255\"Y=\313_O=\347\006\026>I;\343=\000\345\233\275\356\363\200\275X\013{=\366\376\002>U\324\276=\036l\022>#y\221\275LB\035\274\024k\037\276\351l\267\2751L\250=\324\252\177=W\363\250\275\301\310B=\354\250z=\031K\013\276\343\344\030\276\366fa\275\342gu<\317\034\316=\264(\355\275B\343\324<M\002)\273Y\373p<\313i\324=v\301\026>\n}\022\275\r\261\353\274M?\002>\014\357\n\2759\007U\275\213x\'\275\207\022\201\275\307\\\364=\357\001\217=d\244\377\275$\231\013>\266\373\324\275\271\266\000\276.p\256\275\001\220\376\275\321C\204\274 \322\030\274\234i\362\275\276u\337=\325\205\373\275ljJ\275\203U\004>! \321\275\350T\323=[\200\372;\225\360\013\276\027\371\351\275\216\016\020\276\"\236\030>\253\273\215\274x\251\227\275\354\216\024=D\t\244\275@%^=T\224\212\274\344\304\363=A\004\233\274J\215\242\2744\343\204=\274\030\177==`\354\275\213\276\016=YA\006>\363\003\032>\032\005t\274[\3152\275\377\235\005\275\035w\014\276\021\234\245=\226\'\033>`K\n=\322nn=\241\r\215\274UV\006\274\0107\245;P\033\350\275\240\022\374=rG\240\274\303d\324\274\200[\002>\n\346\277=\264\0319=\346\245\353=>\362\n=\210\312\302=\006\020\371\275\265\007\004>_\030\002\276vB\027>BA\332\275J\003M<\227}\025=8\205\301=\331\330\r\276G,\261=\220!\206=\2724\021\276\213e\311\273Qv\206=\244K\261=\265\227\023>\274\201\322\274\316\201\014=u\264\262\275t\265\241=D\200\243\275\325\237\335=a\022\020=\264m\375<\317O\003>\270Y\310=\222\270\020\275\322c\010>9\327\022><T\027>9\262\024\275\177\202\254=\227\227F\275\227\316\034>\032\262\217\275\357\360\223=9\312\t<yj\016>\017\220\260\275\251\323\314\275\366M\331=\324C\256=r^\"\275\344\334\212\275I\035\357=O?\267\2732\r\213\2752G\r>\007\212\356\275\306\367\220\275/w\226=\274#\007<uI\211<\367K\356=\330\374|=OG\202=y\010\202\275\"\367\002>\230R\267\275\0136Z\275\331\3355=\241\355\246=\326\271\327=\rq\007>\232lC\275\030\352\241<x\202\334\275\354\257\201\274Aw\007=\256w\r\276\261\017N=P\302\361=\325\200G\274\270\211e=\363\034\330\274\227\305\215=\266\365\014>\311\347\'\275\245\243d\272\216\316\006\276\207\034\342<\302nu\2751mh\274\030}\321\274Q\344w<Aa.\274\220\266\032\276\202\274\255\273\376\255\214;\033\370\332=CK\354\275\177\200\215<[\322\030\276>d\000>\213^\036>\300\"\033\276\356\037\021\276\003l\017\275\210\"\252==\310e\275\025^X=\256#\006\276-\354\212\275\260\001\244\275\321o\371=;\361\264\275P\002\217\275c\204+\275\362\210\000>)\372\003\274J\371\366\275\242\037\032>\220_\013\275=\254\235=\310\001\371\275!\303X<+p6\275\036\357\322=r\033]\275\233\213D<N\252\371;\350\004\'\2757\370\205\275\243\370\341=\020j\364<Z)\227=\204C\377\274\333\310\007\276[\017\245\275c\273P=\3505\262=ce\021>\243.\371\275\016\350{=\013d\004\274\333\340c\275\341\323\222\274\022\007\007>v%\337\275\376\177\233=tq\306=XR\014>\032|\025\276/\201W<\t\375\260=\037\331 <1\327\000\276Dr\204=V\"\027>7\023\260\2751\333\013\2763\224\370=\226\263\243\275 i\013\276\370\314\373\275KR\202=$\337\r\276\360\020r\275\013Uc\275m\273\017=\324\363\354=\246\214\277\275*\351\254\274b\033\037<\215\266\025\276/\177\031\276<\351\021\276\363\241\347\275\264h\240\275\272%Q\275\023Y\236=\214\036U\275\234S\212=x\351\032\27442\253\275\246\217\305<\t\237\354\2753\252\276\2754\353j\2757\352\254\2756%\224=\257\205\034\276\306\231H\274~\014\000=\233\"\372=\367\242\335<\016\326\000\2769e\031\276%\234\r;\263t\027=H9\026\276\365\252\006\275eM\010\276\337\307\365=[a\000\276+\305\355=\352r\014>\223\256R=\177\220a\274w#\300\274\016\205\373\275\224\031\225\275\270\222W=\266R\226=\233\224\245\275\254\244%=\364\222B\274ZS\336\275\353\202\352=)\030p<\222\274\000=nLi=\351\212\200<\n\246\005=\251\306\224\273\342\367\r>Au\222\274\t!\316=fw\270\272:\252\261\274\3456~<\217\200\264<6_\356<\273\361!=\347v\277\275R\356\320\275.\274\325=\204WT\275[\006\245\275\177\257\316=d\\\267\275\257\324\305=\250\'\367=\200\033)=q\320F=b\347\273=t\3705==U4<\347\330\035\276\356Z\222<\247\343\252=\364\261\344;\314\032\260=K]k\275|\310\006>\024\251\305\275H\237v=\037\236\361\2749(\250\275K{\237<\311\2222\275u\177i=\333\230[\275\357Ql<\272\374\306\275\367o\014>\240k\260<\316i\224\274\n\024\234=\225e\327=\350\016\265=\242\023\333\275Y\243\270\275n\251\177\274\274 \022\272\000\206\003=sb*\274\221\001\227=\305\274s\275\263y\224<\342=\354=\215h\027>I\212\002\275(\033X\275\227}\316=\261\204\027>\325\324\001=.\267.=\352\250\343\274\340\275\247=\363\014\256=\024n\211=H\334K\274\205\362\010\276\276\274\311\275\242\3435<B\364\033=\250\373\307\274\325\205j\275\340\251\035\276tD\262=\353\262\265\272<\351\214\275\001\201c;\252P\322=\217C\n\275$\303\035\276\275E\003\276j\356\301=\rl\020>\250\210Q\275A\026K\275\346\021\224=w\003\010>\356\247\006\274\225\256\356\275\236-\316=\274\315\233=zX\241=\341K\263\274\"O\323\274\367#\257<\034\244\370=i\366 \274\325]<\275cI[=9OM=\257\"\316\275Ni\037\274r\345\230\275Js(=$\213\367\275\275\312T=\241\261\020\275\277\257\260=\026{\366\275\375\254\245\275\252\370\013>\377\016\345\275\214\212\032>X\020\274=\250\266\025=\371\270\016\276\321C\t\2765L\215=\352?\340\273`\"\314=:\2573\275\3173\232\275\342*\225\275\245\357\022>\031\325\001\276\367\201\r=\223h\353\274\251\"\362=\303\356\n\276]\023\277\275\177\273\253=\347\003\034>\213Q[<-\037\235=(f\000\276\267B\232<\t\253\256=\250\017\r\276G\014\t>[n\030\276\'S2\2755\342\372=[Y\273\273\363\346\364\275!\235\217=Y\214\003\2766-\022\276\331}\034\276\342\271w\275W\211\206=\335\002\033\276\267I\205<Q\001\020\276K(\037>\340u$=@\330\214;\374yi<=Yl;\237\360\347\275\375\231\014=\366t\001>\177\356\371=j;\347=k\032\376\274\301\217\323\275\025\264\350<_ \014\275|\232\261\275\363\035\224\274\345\361\240\275\364\304\300=r\013\260=\253\322,\275|\271)=PE\267\274\233\361\310\274p\360\261<4\370\214=\343\222\'\275\355\001\003\274P\255\016=\020\256\211\275\216\270\302=\232\332\035\276G\361>\275\217\216\367\275\235\361w\274\000\367\023>`n/=\034W\365<\351a\000>\nW\010\275\016\250\034\276\316/\005>\306\206z\273\210^l\275@0\020<\343\231\030>\221$~=}\001z\275\234\034\276=\210\002K\274\021B\232=1\023\326=\377\004?\2737\264\033>\260\375\327<\302W\027>I\202\344=\377\220\231\275\274\220\213\275\262\234\370\275g\034\226\275\373\"\307=\2071\220\273\371w\241\273*\270o\275\267\275\201<4}\257<$\276*=\227\003I\272\241\307\226\273\000\261\032>\363P\016>\371\355\324\275+Y\004\276\231\315\345\275\007\264\036\276\"\243\017\276\245\324\327\275g\314\327\275\356M\r\276\366\256\203\274\230\367\321=\342\025\226\275\'>\234\275\230\330\342\275g\331\373=\373,\037\275\032A\016>\000\202\020\276\225l\276\275\274s\237\274\026\254\010\276\301\324\016>9\005*\274\245<\247\275\200\020\237=Q\006\215\275\261\234\367=\014\342\014\276\342\256\007>\365t7\275\364I\313=\r\372\206\275}\2265\274L\345\301\275&\353\236=\223-\032>\316p\020>\256\222\004\275\324W\321<lS\377\275\350\367\337\273\025\321\373\275\336#\246\275#\020\010>\005\340\303\275\210X\241=z\207\351\275;F\234=\345\340f<#\377\327=\274\353\205\275\311\237\306\275\232\360\221\275p\246\264\275)\365\014\275\326\303\273==\242\026>\334Z\004>\215\276\213=\200\363\361\275mv\234=\013\002\014>X\274\341\274\323\322\302=\357\346\036\276J\204\376=\305\017\243\275\260\253\013>-\301\301\275\315\2145=\030\222\334=\252U]\274\312\331\315\275\206\270\334=o\344\222\275\027\261\036>\027\004|<\205k\203\275;\216\002\276I(\010\276Gpv\275\374\267\t=\265\005\217<u@0\275t\202\324=s\306f<\276\303\343=}\0005=I\036/<\000\237\252=[\302\314=6\341\030\275\243\312\014\276\303D$\275\326\003\301\275\026k\206\275\203\016\321=5\377o\275vd\242<;\t\005\276q\207\237\275\326\304\032\276\210\264\330=W\033\262\275Pw`;\351\036\004\276x\272\347=\331.\215=S\033I=/\233\005>g\262\027\275\374\317\241\274\314\332\n\276WN\010>\350I\320\273\361\206\214\275!J\247\274\274\326\247=\326\270;\275\364\032\244\275\030)\352<\333\200\306<\tP\021=A\257\211\275\261!\004\276\253\373q<W\363\372\274C\322J\275p\345\r\276r\270\026>as\035>\246\314\023<a3e\273,P\250\275\017\313\270=\274;i=\346\345\207;NRR=&\034/\275\262J\035\2767\341\021\276\373\323i;\245\314\373=\030\\\270\274fU\024\276\232\261\016>(\021\336<\376N\357=(\014\026>\231\363\002>\360\177\201\275\201|\241=\226\200\005=\265\267=\275eN\274=J\211\034=PQ\024\274\257A\252=\377T\023>\"\305\200\275H\204\002\276m\024\031\273(\254z\2754\025\246<\266\355\362\274\014v\335\274\375(\014>\271S\356:\300\005\032>\305\334\r>\372\357R=\273\311\250\275@t\031\276t\0204=\220\013\234=E\016|\275\200\t\367=\205S\t>\267\310\020>\302K\014\275\303\215\272=\r\361\350<\366\217S\275\034\356v<\357\205\000>j\241\213=v[\r\276Z\255\314\275q\232\245=6\325\327\275"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\361\031\212=\017\022N>\233\367M\275p\364\201=i8\257=\302\265+\276\006\237\357\275+\034\342\275\346N\007\275b\345\033>\236]\341=\220|[\275\326-\333\2750hM\276s\'\350\274\263\324\005\276~\252-=ss8\276\256\302\375\275y\377\032=\275\035S>1j\005\2763c\224=^\316\231:\266H\245\275\225k,\276\307 \r>\320\357_>\270X\236<u\034\367\275oh>=C\255\024\276z\3011>\353\300#=\201k\313=\327R\316\275\221~\004>\340\361(\276 x8\275\243\316n=8\270\013\275T~\033\276\226\260\025<#\346D=\263\243\024=\254\253\023>\035\010_>P\317G>\000Z9>\007\371\224\2751A\002>\312+\340=\375;\024=\363\271\367\274\361r\232=n-\362\275\312\216\261\274\224$A>\r\263V>st\367=\010a\237\275\273\365a=h\322\r\276\035z\347\275\00440\276a/a\276]Z >U\243a<`r5\273\034\025\214=\227b\373\275;\204W=\307\264\t\276Jq\205\273\230CN>d\244]>\206N\026\276\266\r\337=\236\326P\275r\372\212=\363\353\337=\354\373\347\275\261\275b\273\224k\n\275\216\024\301\275\344\317_>\300\251\223\275\253\030\n\2768(\027>\024\257|\275\311*\301=\242^2\275\354\004M\275v\r\233:\212_\010>\367\330`\276\211\260Q\276\353\2366>w\335\350=\374\242&>\235ma>\311\304\023=p\272P>\260\233\021\275z\241\030\276KBW\276\330\313\030=\261a\332=\333\262\371=:\365\251\275\254!5>@\005\276\275\366\300\317\275\237`\332=\002\263[>\tVd\276\245?M>\265\307\221=^\272\211\275(\345\201\275,\207\252<t\313B>\r\246\243=\277\373\243\275Z\247\234\275WJ\024\276\221\201\207=y\326\361=\274\007\322\275\332%\311<\350:V\275\377g\224\275\372\346\">G+\366<\277\320X>\002.\352=\301\\\031>\020\355\024>\264\006\324=}X\207=3\217\364\275\243\246*>\024\002Y\276j\"\320=\n\225M\275\306\377<\276\330\242\360<\270\273]\275j\t#\276\266\313\274\275\225O3\276M\217\222=x\325\316=\341)\265\274\210\354$\276\203\260<\276SO\022\274\201\300C=\2274\224=\203\372\247\275gf\375=%\3415\276K\312\320=f\030\013\275\212-^=K\205\'>I\033T>\200\304\014\276\312_\254;\243nT>X\254\010\276\376\317\315<\022\355%>\030)\035\275]\253\366<\336\3325\276XR\037\276\330\247)=\362\267\024\276!\355:\276)%\242\275\201\273\253=\327\316`=\013\034\361=\331\2361>\355\275U\276\216l\214;7\001\003\276S\216Z>m\365\367=\264Y\275<fi:\276\255\202\027\276\352\251\322=|Ub\2760y\001\276\267\315A\276@\326;\276\030\027\005=e`\312<D\201\022>\221\245J\274\023\362>\2763\327}\275\354\373T\276cS\037>d\330;\276~\210Y>cZ\213=;jK=D\336!>/\243\033;<9\253<\255\026#>\030\337\212\275\363j!>\310\256^>\324#&>=\357\255\275P`\032>\227[\363\274\036\363:>\007\003T\276\"8\030\276\236\372\271=\222\026\201\273}\366W>)C\320=\274\252\310\275\343FS\276;\242\035\276j~W=\375\207\236\275&\362U<\022$K>\342-\312\273ac\331=\'\321\004>\347\311\013\276G\225\241=Z\254\t>\025\343\345;\275\323-\273\3339 \274\004\336E\275\304\223b\275\205\217\274\275\304\302\t>\017\222\274\274\246=\325\272a4\000\275\313\236\350\275\252\222[=\216\366\300\275\000+O\276*E]\276\326.\037\276\005\250\'\276F\372O\276B\031\364\275{B\230=7\n\354\275\373d9>\257\227\036\275\375\246\332\275\326\034\"\275\3725\027\276\235\263?>\334\303\313=\276h[\276 O#\276,\303\253=\037\367\225=\244\033\001\276\251y\336=\264\311;>;G9>\275\377\023=8\306\310\275\316\237\346=\200s\322=\317\2455>\033h\314=\370\372\366=aQH\2766\241\366;\rC\030>\003\302:>\365\205.\275\363\263\316<*56>i\260\004=I\242J\276\'mX\276\214\000\210=\362\001\026\276\264\031\324=\344\301e\276\026[\251=Gv\r\275jmK>\354\351$<\222\013\204=^\304\024\276%S\333\275\"W\203=\255\322\227<\364\350,\275\3301\322=o\243\003\276\247I~\275\307\017\334\275\356\367?\276\336\351[\276\272\272\252\275?\216\031=\377[\n>yZ\">\261\252\030=\332\212\276=\206\017\035\275(\r\037>0\234\235\273}\326J\275\036NH>\252\210c\276\213\361;\276\233\356F\276\331\226m=\031\003\352\275h\207\020>\201L\0168\300@\234<t\027M\276\203<\234=OJF\276\337\350^\275\247F\331=\207\253\203\275\320\233\247=\263\264_=\364\021\035=;\373B\276[=\027\276\213\370\'>i\232\367\275i\303U;\r\211/\276\005\274\354\275P#\344=uZK>i\301\366\275\3667B>\007\227\221\275\1774*\275|\312\323\275h\225\347=\227\3253\276\313\2079\276\230\373G>\230\305e\276\035^\221\275\314\001\230\275d00>mR\304\274I5\362=e\240T>\347N\035<\20411>\202\302x\275\240\226\332=\265\320*=~\205\030>\361+\255=\346\223`\276[\371W>\214$\356\275u\363d>.6\222=\213\253\371=H\375\351=#E\372\275\177\356N\276\312\203\340\2732Y$>E\317\313=A\213\313\275\006q\'\276\324\n\362<%\224?\275\217W(\2762F[=\320A7>p\n\024>\317$S\275e\2725>>\334.\276\221$H>\035[V>\343\323\020\275\220\263\225\2751\2151>?\300(\276h\221T>\333a\374\274?=\267<\\\274q\275\316\306\252\275\202\205\355\275\360\005m\2750|V\276N`\001=6\362\\>{\256\356=}\333B>\r[4>\304\327\224\275Vz\030\276\267\212;=mT\366\275\207\353\332\272v\305\367=\035\241\362<tpZ\272\2451*>\024\n3>\210\331R\276\365pZ\276_\213O>\233\203b\276y-K>\200\177\375\275RF\313<\\,\326<a\253\016\276V\247\213=\352d\031\275\316\316)>\356\233\225<\022>\">\020\351\231<\003\316\035>\331(\355=!\206@>\362\230\035\276o\261\t\276\316\346\261:`\221\374=\370Ta>\204\n#>eE\">\3531\365\275\376))>\301\005>\276hR\'>g\2348>s\215\312\275\350\271\003\276\271AD>P\274N\276\031\370/>\206\235\030\276\353\262\033\276\266%\273=v\275\340=\340\275-\276<9\001>\255\334\255:\321\244M\276Qr3<~\336W=\310e,;7\nQ>\022\322\\>_\224\037<\255_W>\236\013\004>#\251:\275\220\306\356=\320_*\276\245\257\232=\0240>\276Ab\021\276,i\366\275P4\333\275{\315)>\377\275]\276l\244W\276s\241\204=\304R8\276\325\027!\276\314\332\017>\321\335\224\274\004\324\360\273/\334;>\305\232N;J\265/>\200\007\372\275n\362\325;\204\222\031>\207\330\032\275\374\241(\276\370\341\037>\362\274\023>\205\322#\276\365y\270:\242\003b>\272\263\017>\204*\243=\026\226>\276\215x \276\023\330\r\276n[\007>\216\351\221\275\021.$\2769\017\030>\317\231\022\276\252\212\r=\025\2775\276!|\313\274Nq,>\276\034\244=A\202\022>\366_i=\263/]\274\374\276\352=2\357\021=\3758%\275:\201B\274%2\206=\213p\204\275\020;\'>mN\'>b\224\212=h7?\274\265O\025<:\372\317\274\354\200\342=\246\345x=\204*<\276\220\344Q>2\225\274\275w\200\322<\030&S>q\211c\276\034\267\342=\260+&=\260B\243\275\313-5\276\331>b\276&\262_\276\305\234\265<\321E\017>\0046\375<\313\014`\276P21\275\243\247a=\276\352\337=\033A\321\275\331\321\016\276\313\340N>f\200\n\276k\376\013>*\203\"\276\214\005\326=\302}\303\275\037\246\373\273O\341\037\276L\253`\276\226wt\275\022\300\267=\231\355\263=\254\032\027\275@/\212\275\340\376\253\275\335G\023\276(\3053>\034\036\032=\200\327U=\265\322?>\n\2270\276KN\000>\323R\254=\355\177\263\275\006\204\303\275\257\021f=\277\251\033\273\330X\204\275\004^\006>\200}T>\001!D>\272\032>\276\226\351\016\276\267d\210<Wg\256\275\342o\324=\034\036\r\275\262\202#>+\333\314\274\231\0064\276\261\276\257\274\327O\350\274\370\365\034>\343\310(\276C\320H>\270\250\022>\025\200`>\333\244;\276\021\355\005\276\364\270\250\275\325U\004\275\321b\334\275\322\340\002>\033\346\255\275\212\r\311<\017m\020>\026tM\275[X\270\275N\365\254=#\3035=\255\214>\276\nh\331\275y4\262=\014\035\234=V\326N>\342\323\213=\251\310^>4R\202=r\343\201=\257I\001>P\316_=O\325\374\275\033I]\276\240u\230=\3334\031\276\343U\264=\250B\005>bP\037\276}\315\035>/\336\317\275\001\241X>\275\t\360<u\273A\276\365b\327\274^\356\260\275Z\376D\276\370\230\371<91\243=\304\006\020\276\036\354K\276\004h\235<:/\r>)\360\003\2753\303\325\275\232\255\037>\233\227\250=\272\310]>\316q\221=\331\232\204\275\327\233\245<\226\360$\276\300\207\357\275m+c=\212_\256\275\316\204\216\275\372\322\354<\332\337\262=j\256%=\262\374\206\275\245\233\022\276\024R\311:~\005\374\274.\276B>\021\344\201=V\231v\275UL\324=/\261\036>\324e\223\275\334p\327\275t\311\240<_kF\276\2363\270\275\332.\322\273\007[\306=\217\312\030\276\342\374\260=}\207C=\307\257O>\023\211\030=\227\003\317=S1\206=\031\262\375\2745\332\201\275[\204@>a\177\323\274Nk6>\201\265H>\342\275\330<J\221\252<q\003\236\275j/!\276\274\241\324\275\334\327Q>\356\356\017\276\236=Y\276RK3\276\331\326+\276\261\216B>\211Z\342\275\n\374\301\274=\220\351=\222\245\024\276;p\343\272s\272D=\320}\220\275\321\314%\276WA\256<\232\312\004\276fg\240\274\360\330\242=2\244\002>[<A>g\362\327=\013\213\016\276\026\3243>\033\252\020\276\352D\355\275z\372:=\240\257\035\276\257@\265\275\000\317\305=\034h#\276\032\375!\275x\265\014\275X2>\275\321\024/<!k\362\274#/`>W\330\t\276K\272F\276\263\311F>G\360\233\275b\3301\276\t\001!\276v\002\274;\245\221Z>\332Y)>\377\304\032>\027E-=\022\215g\275\'\247>\276\r\000%=/O\020\276^\222A\276`\035e>\220ON=\\\273\367\275\246mF>\242\237\332=3N0\275)\334\035\275\226\332\352<\305\322\310\275\375\371\\>\022\355\207\275\014\3107\276\371;\322\274\270\"\331\273\250\235\032>\023eH>\360\017_\275\267\270\305=\263J\251\275\257\347\205\274\3263C\276,\250\331=\030\326\032\273A\272\233=\030dC>\231\314\027>\343(\003\276\201\275\364=l;U\276kb\010\276\347\035G<\326\244\035<\231\270|\275\214\003\346\275\305\330\266\2759\027*\275H\367\274=\374\355\236\275\353R\251\275\322i\026>\025-C\276\301\004\234<\243]\022>\205\212\246<\021\306\307\2757\324I>DL\344=\300;\371=\013~\306<\3410\365\275?^\t\276\222\353\370\274\352\205\013>\272~z\275\203\213(>\252\250\375\274\037\013\347\275\354$\004\276giX\276\332\244-=DQ\223=<~=\276A\023\262=\234\271\214<:\014\353\274\344\3307>\212=F\276\336\035\234\274\204\'=\276c/\037\276\230\211b>\320\243?\276\2302\007\2763_\266\275\001L3>\244\357\036\276<W\'\276\327O\217\275\215\357\324\272\371\300b>\316U\034\276!\343\014>\260\340N\276\3554m\275Cf\033\275&a\000\276w\264\234\275,\221\204=\027\233S>\2238%\275\020\005\007>{\252 \276fU\021>\243-\007\276\357\257\032\275\243\307[>\013\217=\275\nF\227=-Y\004\275\001\032U\276p\251\301\275G\025&>qHU=X\227(\276c\371O\276a\247\265=\037YA>\031x\214=\003\322H\275D|\r>U\322\365<\223\t\353\275\2200\365=\306s9>}\377)<6{\370\274\311\224\037\276.\206\036\276\375\314I;I\236\355=\213\372\326\275\265\344`\276\031\225.\2768\204\"\276\272\271$\276>\252\n\275\307\016:\276\025\005_\276\017\3774\276\004t\240=\212\021W\276m\313^>\210\225\331\275\363\275\335\275\335m\214<\212\331\200\275\327{\336=\006oJ\276\325/?>i|G=q\225R>\207\355Q\2755\306\310=\021\240\001\276\323\021\001\276\332\215\246={\3330\275\177M\353<o\343Z>\237\250S\276\016\352e>\010\354\002>\354\206\210\275)\347W>\312\220;\275\307\354H\276\025{\033=I\315\335\274\320u\325\274,\207\027\276>\227\177=\023\330\036\276\364<#\273\231:\361=\250\026\301=\324\302\r>\226Yx\274\300\361\025>\356\266\206=\377\200\271\274\371\356.\276\270\266@\276\003\252\274<\205u\246\275\315\233]\276\360\010\306\275)\207\304=c;P\276\303\365\336\275\023\226\255\275\252A\205\274/\014\360\275K|\n=\006\306$\276$\3773\276\256\252\352\275_2\030\276\003\222U>j\364\315<W\276k\272\302\301\006>\300\353\">Y\353!>\361\327\242\273\321\t\024<$\211\351<&\t\327\275\223\030\373\275\215s\212\274Hq\r\276D\036\207\275\335\275\226\275\374\2738\276N\206\244=&O\024\276\240\210\265<\366\340\006>3\000\\>\303B \276\341X\252=o\007\240\275\247\302\364\275E\332_\276H\357<\275\034\235@>\377C\r\275\340\376\006>\341\334\230\275\344^~\275\276\273\301=0\361Z>\216\236H\276\004\316\026=\033\323\247=h\312\3339\021q3\274\306\254Q>\370PZ\276\350V\\\276M4A\276\245_\210<\263\322\031\276\026\253\036>\26738\276n\255\356<\022\347U\2758*\364=]\2400\275D\312M\276\221\177\270<\375\355`\276\367\010\301=\230@\274<-0s={\244\277=\320\177\362=\263l\307\273T-\215=\275\305V\276\331*\251\274*\224\221\274\\%=\276[\202b\275m\206\025\276VZ\221\275\351E\222\274G\217J\276Yp&\274r\230\322=7\367r;\034\264\000\276L\021\246\274\340a\004>[\030*\275\340v\351\275\000D\326\275\211W\371=\352\305\t>s\\\016\275Z\247A>M\363\262\273\023J\301\275#k\355\274D\206\030>\350\036\233\275\371t\037\276\202\rN>_\310X\276\273\t\026<Wr\331\275\236\305\231=z\3063>\257 \322\275\311:\265\275\311\013\357\275\230s\366\274\205\346\r>\353\017\002\276\304\013I\276\336\0302\27614>>j\263\320<\rT\340\274\213D\234=I\357\032>\370%\376=I\214\252=\026\232T>\307\335\366\275}W5=q>\247=\013\241\245=\362.\005;\270Z\025\276a\244\261\275YF\013\273(n\201=\27065\276\244H\344=\320\244\033>\303H\206<\252t\006>\025\244\033\276d\256\344<f\027\'\276\304\275I>C\305E=\206\017\010>\307\203.>5\354Y\276\213eu\275d\240\246\274<O>>\336\240\361\274G\017\372\275\'r!\276W[e=\265\022\033\276\213\000R\276h\204_=C\306\365<\006\216%\276[\274\013\276\275q\316\275\351\371\004\276\356\200\211=\013\200.\274\347\300*\276W\260R\276\224\216j\274U\315\377\275$\026\213===\n=\036\242\023>\020?$\276\341RW=T\207X\276\205m;\276-\226\031\276@O\253=i\0141>3,\253\275@\004X\276\250\311+\276m\002\326;\217\223!>a\000U\276Z\205%=\021\034\n>|+\345\275\202\223\027\276\247\036\010\273\004\347\000>\336\311\022\275\211T\261\275D@\257\274gx/\276=+\207\275\300\233\336=\235\226Z\275\035`}\274\000\353\204\275D\313@>\363\357\373\275=S?>\220\210H>\337\261\241\275\323G\261;4|\301\275^\351C\276\004I@\275\360y\016>\214\342\021\275,a\363=\220,,\275B\n\240==\212X>Cm\315=\254y\310<\2259\361\275\214 \311=0\366\365\275\225\346\036>r)\314=\272r\223<<\323\332=\254O\317\275\355\n\217\275\030l\255\275N\013\350\275\010,U\276\260a\217\275c\262\006<\226(\037>3XE\276\317Za=s\236\200=M\366\021>4\357U\276\271\016\255\274\367\225U\275\344\241\005>%\260,>\247\304\377=\245Y\223\275e\r\363=/\2372>\016\375L>3\354s<\270\203\031:\235#\225\274AK\354=\224\233J\276\006K\371\275l\'\002=]\313\234=\262-\233<\033\353\036\275A\006\233=\000\275K\276\317\272\240=\350\321{\275\177\344\255=jcR\275\203\005\246\275)V|=Y\255\n>F\312D=\232\202Q>\256\324t\274\353\370\254=\215\246\316\275w\'\352=\377pA=\"Xt=\004y\351=|\r\006>\035,\024>\300=\330\275(\233\006>=\234\320=2\035\">a\375\004>\007\321\276\275\320\364\016\276(\303\334=R\250\271<\232\317_>\323\212z\275\322A\013\276U\222\307\275Ia\004\276\232\023\257=\242h\227\275!]1=$]\245\275\345\255)>\272/\272\275&\004\036\276\225\225\350=\272y\317\275\316\232\014>\017\351y\275\205\016\210\274\306\177\340\275vA\330\274\0250\"=\002{\022>|\374\325\275\311{\230\2753f+\276\255i4>a\301\333\275W(\r\274\337\025S\276\355#{\275-\304\253\275\025B4\276\023\246M>\212\264?\276\305\346P>\300\372Q\275\210\265\202=\2738a\276{\3235>J\204H>\036\253\210=wiP>d\336\255\274\262:\217<<\224\'\275\310\275\232;\322#\351=?U6>\230\376\017<\000\352\037\2769D4\275\354\2721>e)\255=}\206\326\274E\177;>\255\':\276\251|6>q\220\210\275\022T\327\275\371B\007\276\371\217,\276\013\351g\275oy\233=\335\004\277=@\2176>_\037*\276\226G\272\275U\262\023\275\261\325\273\2740\r\234<o\000\253\274\301\264\221<f\177\206=\275\302c\276\0174R\275\360\030\004>\365\227[=\235\334\023>r\274\320=\026`\300\275\271\007X;c7\035\276a\362\304=\025\n1>B\211\370=o7\020\276hw\300\275og\t\271(\na>Rj\375\275\334\337a>\343\302\023>N+1\276\373w\\\276\033\254[\276X\323\320\275\377\301\346=\022\317\013\276V\3772>\366\366Y\276\326>&>1~\220<l\324\007\276\262\300\005\276\2615(\276\236\307k\275\354\314\210\275$|K\276hO\257\275\324\260\016\274\300\230\302:\256\350n=O\232\033\276\246\313\356\2737\321\202\275JFO>\211\220X\276]\263\241=DD\024>\3665=>\207\242\373=V%\327\274\247\222*\276\344\340,=\000T^\2757R\354==\332\357=)yr=\251\214!\276Q\\5>&\344\326\275:=\370\273\265\274\326=\370\211\016\276\276\213\226\275\314\212\002\2750\311/\276\227(\344=v\373\210\275\357\000\n=;\261<>_>\n=\325\306\177=\241\376\335=lx\220=\331\3754>#\230\003;?\264\240\275\204\336d\276\250~\323\275\331\341\243\275\013vI\273\351\365\017\276Q\345\275\275\224\375l\275\213\007\t>\257\362\001>\253\340\306\275}\224\216\275\270\2558\276E\331(\276\014N%\276\3749\242\275q\335\232\275oM\014\276\272\314\372\275d\355\260<\226\'\274=\346\253 =\377\214\340\275\243\300O\2767\222\010\276rv9=\036\023/\276\235\220\007>\007+2\276\177\341M>C\021\241=b\235_=\262\241\355\275,y}\275\327\337\010\275b\034\037>\232\210\017>\227\t\320<+C\261\275G\277\253\275\263\366Y>\306\272T\275G\204\264\275\304]\036\275\3357I<\211\231\326=\2361\n\276wdN\276\273\364-\276z\276\201\273\2108\t\276o\305\210\275iIh\275\370\324\361<[#G>-\336\204\275xq\344\274?\204\'=q\017l\274<#\344=m04\276.\340`>I\251\326=\210k\030\276\031\265)\276\032\034\037>h\257\352\275:9\351<\267\322\024<L\\\276\274\273\250*\276\302tz<Q\263\303\274\234Y\031>\205\373\302=/\'R>\325\030\200=R\273\000\276\301+*\276\'\231\367\275V\003\375=\275 \315=\220+\025>\352\210\360\274\260O%>\240<\334=\316~6>k\002H\276\n\032\361\275r\017\205\275AC\205<-\300\r>\234_\002\276h\225\320=\0278\003\276\326\346\026=\355u\324\275b7\017\276\342e\036\276\371\266\026>\t\177C>t \326\2759\303D>\322\233J\276\307\010\n>\251[9\275\252\272<\276-M\025\276\356\n\321=\031\210\307=\020\223\262\275\373WC<\302}>\276\313\205\247\275*\206\004\276+\214\010>}j\006=:@\210\275\334^L=a\266\010>\217\262\354\275.\314\222=\201\033n\275\343b\233\275\004]K\276fz\003\276\215\264\266=\373\037\022\276\275\3457\276\213\333$=\023\3341\276o!\332;\023\202\256\275\024j\001\274\276\376T\276lq\264<\376\2244>\347\3255\276$b\033\276\034\204@\276T\377)>O\3174<\206\300\t>\230\332\332\275\242T\210=\312R\332=\\\\r\275\312oX\276\223\222\003\276\001\327d>\\zE>OZa>\211\323\013\276\002\361P>h\035\257\275,\037\'>\020\334*\276?\223\257<\216\354\210\275\013p\317=g<7\275\321@(\276\266\374\204=\r\311=\276wX\014>\215}\325=\250\n7\276\302,\335\275\206\3168>\230\310\337<\017Q8\275\213y9>;p \276\312\324\224\275\t\266T>W\263h<\020\236\">W\nc>\254W >W\231V\276-\3429\275\254\216\256\273\332=\323=\230/;>\256\211\343=S\307\336\274\"\335U\276\321T\013\276;Y3\276\2548\r=-\000U>\270\327K>\340s\264\275$\345\272=\004\242=\276\256\001\200\275KQ\232=\376ab>\227@d\276\245\211]\276\256\376?>\242\025\270\274\341\214\307\275\3327V>K\303\314=,=\304\275\340\035\206\275o\271.>\370\273\331\274\303\256\372=\236\2423\275\303\314\035\276-\2629>x2\231=\357\305,=vl\177=1\310\020>?&\316<\177zH\275\3202\002<\247K(<\216\347(\276\336n\005=:\346\215\274g2\324\274O\207\307\2753\356C\276\235}B>\241\002\225\275\031~n<\310^\025\276\230\"\303=]\305\003\276\354\254\033\276R\010_<tu\256\275A\377@>\222\210-\276\224\014F\274**\360\275\332\233\310\275>r_\276TH\235\275\213xU>O$\275;F\311\022>\342\240\244<\002+ \276\307\016S\276\222\246\363\275\266\320L\276A\3745>\370\317<\275W\316\322=&|\237<7\372\261\274\346\253J\276\331\223\026>\353\301W>\272\273.>\2219\027>J\344\305<|\233\007>\0322I\276\213\333\337\275l\001\313\275\225\n\305\2741\016s=h\3140>\312\305\037\27692?\276\022H-\275\200\004U\276\023\022\275\275\341\003\206\275V9\244=\203\005%\276E\252j\275\226m\212\275R\226/=fY\277=\326\247\037\276\225\023R\276\220\2332>@A\213\2745{\217=\3736\317=\205H\301=TOY=1W\326=\000\302\262\274\026ZS>(\346\250=\365\203\237=7\362\245\274\207\232^\276\005aH\276\371\031^\276\t\331L>\326\265\246\274o\177^>\251\211H\275[\310)>\360~\377\274{H\242\2752\376\r>g=\223\274I\210D\276\037\014\253=\355\006K>:\256\017>%*\374\275\314\023\034>X\207\204\275e\303[\275\266\030\024>+\340O>j\005b>\362\005V>#\361:<\301=\374\274\240\204\032\275\333y\364\275\351\250\035\276`\303\032\276\023T7\276\257\320\210=\324\305\003\276\201\302/\276\262\013\004>\331p\025\275)%\325=\223rc>\262<9=\'O\244=\253]\r>\304V\023\276\232\311\223\275q\226o\273\237]\377\275\267\363\021\274\036?o<\277I\304=r\335~\274\223\331A\276\333\266<>\227\343 \276\341\025P\276\215B\233\275^\\==\rSH\275\004\331\007\276u\361\227\275\311\226\365\2755\224L>\252u\212\2758\203?>\367\342\325=\013\340\016=\317v\246;\371Zb\275wk*>\212\364\214<=1:>\277\231:>JU:\275\002\300\312=\311J\001\276\226\217\274\275\346\0339\276(B\251\275\t\310:>\r6>\276\255\3351\276S\373\301\274\313\350;\276y\210\372\275\301\244$>P\003Q\275m\367\343\275\363\'\331=\241\317\002<V\3340\276o\204D\276\272\232\374=u\005 \276\355I\034\275\323\377\032=\013\210_\275j\377\\>\204\215\302=|c\351\2754\227\270\275\233ab\2752\357\340\275\022\340b\276Lc\371\275\256\331T>\262\235\031>\232\257\300=V\\_=\374Wl\275\274\304\265=1\230\360\275p\374\353=\031\021\372\274\245\337\006\276\003.\026>\231,\361\2757/\257=\024v \275k\026\263=1\264\241\275\253\357\217<\236\206%\275(k\212\275\021\376\311\275\350\265\024\275a\310\200\275\273J\304=[92:\345\025\n>~\323\023\276_\211\322\275\003.\322\275\371\247\022\276\312\367\r\276l\367\022>\004p\332\275\375D\327=\264\325\003\275\2563Y\275\246V\013>\211\362\210=\036\335\222\274\2367\376:P`e;\017\002\022=\272\003k\274\317\376Z\276N\035W\276^\030#\276X3\024\276\220(\024\274\'gB>\361\346\345\275\256\004\017>\233\245K\275\364\254}=\321\204\r\276c\262a\276\000\360J\276x\345<\276 \304\315=M\215\277\275\'\014\r\276\003\276\'\276\306\236\275=\221\257D=\033u\271\275\266\014\034\275\010\203G>\342s\231\275\266\326\357=.\333\004>\231>\014\276\236\246\005\275^r\">\355C\353=\223\204S\276\347(\021\276\300)\r\276P\322\315=\255X.>\306r\'>\220\2351\276)~\013>\364>X\276\207\220<\2752\266\210=B\212B>\025\001\013\276\350\304\372\275\232v.>\270\240{\274K}\353\274W\222\203;.\t\020>\024\366&>PU]\276>\026\245\275\027\261Y>\3766\364\275E\274\'>-\325H>\201J\370=\211\271W\276\0232\007>2)W>2\360\314=jf.\276\014\351S<\3414->\177\n,\276\251\037\034>\207(]>\242\033;>\2240B>\255\375S>\254\340\362=j\ta>\246\320\r=\217\204\004>P\2171\276@\221\242<\323\021\221=d\256->\010\237\261\275p\\*=\340J\357\275\036|9\275\375\004\317\273\331\364a>E\005M\276\312\374\r<\202\236\035\276\332\275S>\376Ca\276\327\242\260\275\325QY=FtU>D\240\312\275\267\2326>\200!\241\275\037B\207;\326\327\n\275nO\"><h\213\274\246\370\363=o\030%\276a\246\341=\023\373R\276\016\351\314=r\240B>\326j\024>\r\000%\273\250X\224\275\230\240J>\r~#<\252Wl=\021\301a\274\033{^\276\242V\307\274\201\256\253=\017\234R;=LU>\365\364\355=\355kb>z\253g\275\276W\302=\322\003\016\276\023\033%=\217*\275=\036\252\255=\305=/\276b\275H\276\361ZE\275u\217N>f\220\021\276\224&h\275;\347z=\342\016,\276\305xO\276V\207\036>\013\r5>\214\364,>\341\323\237;\300U1\276\212\267\013>\r\275\010>U\363[\275\327\330\205\275\344i\001\27534\355\275\207\030\031>\033B\205=\\\336(=\323=\n\276\323\302\303\275\265(\260\275\271.*>\225RI\276\365\327\001>\351\010=>\274\222\324=S\024o=I\007\273\275{\334x\274a\365\252\275\232\3053\276\364\352\003\275\370\335\277=6\310s=\016\034\255\275\016\250\324=o\360\004>x,Q=`i\036>\312\341\032\276\303\2159>\266\001\">\030i\376\275.\247\257=Jqq=7Z)>U\000\004\276\261\226\343<\345\031b=\362\276Q\276[2\t>U\333\236=T\237\030>\356\341W\275Vc\020\276\260\325V>\315\246\244\275,&#>\335\'\353\275\304\221V\274\'<K=\271\236 \276\253\033J>L\3308=R`\031>\336\202%\2769Yo\275\036\372k\275_\\-\276G\007\027\276b{\273<\234\314\232\275g]\230\275\247\225\005\276Yh\362\275\361 \304\275I\304\241\272[\311M>@\0056\276\260x\347=\356p\363\275m\242k\275]O%>:`%\276\362\241\025\276\362\n*>\305\263\036>\237\213\262<\030\260\250\275\2030I\276\207\216G>\300\022J\276\t.\377\275!3\317\274F\251\020>\376\036\023\276\324\215\313\275{q\327<\217|\230=!\025\\<M\010\013>\271\371q\275\201`>\276\346\221A>\nQP>\377-\020\276\026\200^>\272\367\006>7l!>L\257\220\275\277\233\321=\022\245\027;hS@\276\253\246\240\275 \3456\276\007\237\010>\353P\225=E\364\'>\000j\353=\200\377\014\276\350\2058\276?d\300\275\003\n\014\276E\036D\276b$\276=\335\266S>Y\304\n\276P\211\366=\312z>>\'HD>\355\023\275={\205h\275\227\262\231=\305\037\020>~\271~=Qm\241;\022\216\023\275\2674\300\275\007\337\230=k\343c>\374\270H\275\305u\244\275;\024\321;\r\010\230\275W\022\341\273\247ge>]y[=3\252\265\275@\232\014\276L\333\302\274\022L\337=\377\373y<\014F9>\360\250\235\275\251\215I>\233\352\034\276\r\3668>/\211X=(V\246=hn\344\275\302iZ;\334\215^\275\265|\251\275\261\342*\276\0234\214<\017RC>\202i@>\024\337\023\2764\357Y\275\217\016==Vp\016>}\261J\276\020\t\372\275\000E,>@\317\302\275\253\304\353<nO1=a$\022>\205\356\262\275G\257I={\0215=\201\033\341\275\354T\261=\262\2554>*U?\276iz\257=\n\223\321\275n\313\020>\3137z=`\177\207\274&\311\333\275\026\256\345\274\303\330\343\274\231\272\224\275s;T\276\211\372!<$\322\237<X\327[\276\347\357\016>\367b\004=\027\177\214\2754\327g\274P\303C>\346\021\256\275ZV\354\275\372{X\276\272\365\371<+x\250= \257\371\275\tUF\275#H\033\276)<C>\3760\303=\025\263\337<I\236\t=\263\236\301<r!\343=\032\010\243\273\320\222\022\274)iW>i\004\033\276\366z\032>\010\036H\276B\346\031>\310z\376=\306j\312=\254\034\017>\316\245U\275X\004\t\276H\260\274\274e]V\276%\2362\276\027\'*>\032d#>\206\303\201\275\243})>\330X\212={\354S>IZ\031\275\211\366;>NtF>y\013*\276\r\246M>\211\234E\276\325\300M\275\225L8\276\\x0\276\343\317W>lX>\276\'\277_=\201\3019\276\224\325(=B\377\023\275\217\275)\276\033,\313\275571\276DA\317\275\342\020\016=\277p\212=\364\240:\275\257\360M>\312\267]\276R\246(>\007\325\351\275c\321L\275\032)\211=*\023<\276K\030\033=\006\237\357=\032#\203=\010\364\271=3\3101\276D\207$\276<\002\241\275\300\333J<\200\305\333\274^\005 >9\326\020>\355/\253\274\270\223\322<\266\3507\273\332s[\276\326\273\020\276\333\206u\275\321{\335\273\031z\341\274\340\201\346\274\037\2707>\302\203\342=J<X>p\3434\276\"\216A>|\272\010>\203\236.>\214\376!\276\026\035\025=\257lS>]g\247\275\035.J>\241\026u=<\200\213<JO\007\276\262\212\010\273\307\020\016>\304\315#=\363\374\261\275Gs.>\217{\267\275\333w\327\275\251\352n\275r\234\014\276\206\264\237\274\216\330\037>\301\374\207\275\314\355\327<]\357k<\227|\036\275\256\347;\276Q\377\267\274\306/N>\347\232\013\276\037\365S><|\226=n\260\000=\340\236\227\275q\307\321=\005W\332<,\024\002\276,\315C\275\335]\374\275Y\347\356;`hK>\013m\303\275\375o\013>\222\206\014\276\252Ir\275<\344E\276\226\276\217\275\347\270K>\"\303X\276\350]\205\274\026\021<\276Q\317\211=\033\222[\2739\214\244:\2317\353\275\302\r\002\276X\235:\276\214\325\036\276\217\3276\276&h\373\2746\343\013>\r);>\214\360\330\275!\272\222\274\214L\256\275\344\202@>\007\t\377:\345\262\307<T\344\311<\277\332\277\275\037k\007>(\265\027>\261m \275\353X\006\276D\224$\275\326%\374<Wg0\276\346\203\007>8\340\\>\307\267D\276\334\217%>\216\223\222=\361\236R>D\315|\275\001\324\216\275\260B\274=\215\353\033\274\272>\013\2765\216\001>Ti\025>39\270=\200u\262\274`\022\r>\345^4\276\030\001\205\275\304\204B>\252$\361\274*\"\247\275\276\220\360=P\366\021>M\032\273\275zbY\276n\316\014\276tX\334=\340\033*\274\265\335F\276Am\311=0\371\033\276Xl\340\275%\311d>\0179n\274p\246\004\276b\224@=\001\2548>\034[V\276Lc>>\272^\000>\327O\274=\025\031,>\006\3546=*aa>\353\360c\276\320#\006<\2668!\276\021D6\276\027\031\022\276d_\301\274\001\251\347\275.\003\321=Sc-\276j>\236\274\342w\277=Eg\373\271\016k\324\274\222,\261\275\356+\005=\257\221\330=^\215N\276\026C9\272(\276\017\275=+\342\275\030HX\275\315\246\360\273\314\204\327\275\324\205\360\275\\\363\000\276*.\335<Q\240T\276\366\007\006>,f\245=\235\027\201=\304\302\\>\335\244\007\276\241\2144\274$\226\311=\261\254\'\276\022a\302\275!)\033=\300S\032\275\261\363\023\276\335\226$\2767\206\035\275@\330\037\274v\204\235=x]T>\260\217b\276\371zI\274\223\023\024\276\016\237\313=\235\021\273=V\034\335\275\037\347\336\275\304\316\035\275\262\023p=\030,\320=\005\303\246\275\354!\271=q\221\302\275A-\326\274\303\270>>\230\301\354\275\336\2041>m\033U>\r^\200\275\345\247\351=\352\000\033\274:\341y\275\267\350l=\263\021)\276%\227a\275\317E\322=qPu=)^\001\276D\207\022\276PQ\242\275I\037\356\275\034>c=\200,\210\275]\315\020>\316\273F>%W*=`\361L\276oi\204<\363\354\032\276\177V\360\275\212oO>;S\022>\354\200\315=`\303|\275\303g\202<\005\014u=E[(>?\213\263=\317\026\031\275Y\026\343<\247I|\275ed\232\272\250\306T>s\0139\276\321\337\260=`\331;>\276/!\276\177f\250=U\267\263<\302\316\212=\224\312<>\205i\275\275\005\275\343<#2 > \276r\275\356}(>\031`\027>\373\324\035>`xS=\"^9\275r\234N\276\232\323\'>\343\026\336\275\325\246\212=h;\357;\233\004\215<\017\272\311\275\31701>\340K\010>\205\333F=\234\337\230\275=v+>*|\r\275\032jd\276ujd\276N%{\275\225\365C>\261\255R\276=\374\306=\372\rE\276\371\240G\276\037(\346<\350\307\330\275\025G\245=\247\275|\275?\311\262=m\231o\2747\270 \275E\343\321\275\336\203<>6\322B\276\354\215\262\275\336\337\342=\276\2504\2767\031\324=y\212\022<\256\177\272\275\'\225\206\275\t\320y=\003\371E\276\362\235\005\275\357p>\276\334\244Z>\tU\037\276hd\301=\235\370~\27500\247\275j\237Z>FF\222<\202V\335\275\222G\337\275X\320\024\276\305Q\014\276\347MA=\261\337\020>O\315d\276o\312\206\275\021\031\372\275_Z\023\275g\361\362=7\014@\275\344\3363\276\013{\025>,\007B\274\272\265\004>\304d\313;\200\276\014>\014\030\350\275\247\370\231\275^\364P=z\021\207\274\036\337\243=\250]e>IH\354=cK6\274#\003<>\261}\024\276\315\226\236=\023\'\014\276\351\020N>\326h\321\275\324\037\257\274\322z\010>\241MC>\353s)\275\320\231C\276\212Q\"<\001\222_\276\035\303\020>4\246Z=X\226@\276\210\274\023\2769\227\206=\343\330\366=\260^\206\275\314\211)\276\221\214\202\275\224\323/\273\375\021\224<\336\333\005\274~(%\276\242\026<>\371\232\002=\203na;56\273\275\222K9\276\351R\336\275\n\033\032\276\310\244\035>x\230\014<\240)\352\274Gi\026\276\254\214*\276&C\\\276E\246U>\253\373\212<\205\304\r\276.IN>;\201\277\275\333\342&\276k\341E\276!\373N\274:\002D\2762\345\037\276\235\370\340\273\000\317\000\275\316/\032>\375\000\024>\205\020-\275\264\213\">vR\353\2756.a>\002\342\023=\034e%\276q\261\257;\377\376\351\275`s~=\200\004\366=Pyi=B\320\032\275\212\031\004\276\332r->\253\341R>\222\037\224=]\223z=T\245\274;\342\336\300\275\300\301A\276\301\250/>\304s0>T\275\202=F\255\325=k\321\276=D\226\002>+`\345=\254\250_\276n\2436\276\r*\244=\020\246m\275\037\261\342\274\010j\321=\237ZC\276\007\3346>\374\273\020>;\371\006\276\2114E\275\325p\">\000\005t=B\303\030>\363k\037> MM\276\244\356Y\276J_#>\346\203\245=\000\"\277\275\030\3634>.53>u\351\203\275\014\336\201=G\255\025>\360\222\251;0~\356=\2452\232=Y$P=&\204@>\273\346L\2751X)=:\262[>\363\001\231\274\025n(\276\237p\004\276]\217\375=jc\004\275I\320M\276\031\332b=\340\252\000\276\330\230J\276\334\335\254=\030\337\351\2754\214\312\274\222k>>\205\005Q>\005\200\n\2760U;>\340+&\276\202\235\037<\343\013N>4\316\021\276\215\235\\>a\315\337:s\036x=\023m\014>x\3012>+\365\002>n\245\257<\257\026\214\275\320\267\013>\226\316\225=\232\323\223=&\273\252\275rar=r~\276\274\002\337->\352\215\002>\033\345\305\275\001.[\274\370\376\017\276uy\240\275\001\242\014>L\223\000>\303S\322\274\200I\216=F7e\276~\353{\275\270)\257=\227\t\t\276\016\315\225=.\005d<\210,\234\275$Z\031\276j\2479\276F\026\030\276\326\260C=0\257\354=\235\r5<s\3254=\222\335\373=\350nB>\3740\t>\003\312H\276\2434\332<\315\350+\274\225\236\340\275\303K!>d\335\223=<\031C>!\343\345=Mv}\275Y\261W>\351^\261=\"l\033>\261&\014>Xw7>#@S>\222\240\377\275\252\260\002\276s\243\263=\027\0002>\315\355&>\035*\\\276\327\010f\275\361Y=\276\273\321\271\275\342!`>\030ka=\013\326)\276\301=+\276f\255\201=\243\r\020>\031\3329\276\037\340B>3A\010\276\352W\251\275\270QK\276\313%\006>\367.T>\232k\246=\306\033`=5\350E>\373q\031>\222\023\220=\253T\306=\005\034\377\275\350M\275;\200kK\275\016\007\003>\363\306\312\275W\312T>l\321,>\223\310\030\2766PM\276(c\216=#\017\t>\203\341\024>\317a\r=!e\364\275\367\235\023\276\327\367\261=\271\205\005\276\213S\'\276\3066e\276t*\371=]j\n>\247\314\370:\010\220\206\275\\sR\276\351\241\006<3\353\002\275\346(\014\276\305\271#<\241\307\016=U\217\206\274\304\272\000>\244\036c>\200\343\014=oq\333=Wp\203<\031\211\205\275%\037\227=\3264\252\274BAa\276\332\032;>\005A\254\275.q\010\276,/\353=\177\014%>u,\217\275\327R!\274\313qc\2764\235\036\276HyC>\014\263\026\275U\350\243<\224Yq=(\341o\275\357bG>q\217\354\275\273ob>\311\310V>e\230\300\274\353\2669\275\213\347\232=`V-=b\232O\276a\210\3427\222B\367=YK^\274\031\340\267=\351I\262\275\213\261\224=\226\004\240\274\200\257\022<<\363\r>\035!O\276\205\373\323\2758\377\027>\222\353\016>\373\2040>\013M\331=\023~a>Z\203\265=\036\266\311<\221\321\014\276Rd\267=\372\363\332\275\347\205\350\275\352\215\037=(,=>\274\226\226<\347\264\243=?\331\237=Z\265J>\375*a>\227g+\276i\357\002\275H-:\2768\306\026>\226\303B\276\017\014\367=\301\376V>ni6\276V65>\351%\002>F\241\244\275\024\010\007>\325\364\360\275\034{\002>}t\357=#\215c\276\311\224a=\305\273k<\336!\317\275\020\322\026\276\'\260V=\267z&>\030\207T\276\034\206U\276\035R\305=\203_9\276\034N\022\276C\315\r\276\324\002\366=\232\326R\276\224:\274\275\217b\261\275\003\342\311\275G?\004\276\344\002E\276&\261`>\340\026\022\276\0072d=\002\266\213=\335n\234=\275\223\246=\234\270\000>X\3623>z\256o\275\224\203%\276WU\t\276\266\262\203\275\243*\036\276,Z\263=\201\005\322\274\001=B\273/\277\324\275\347\245\026=\215\270_>:\331$>\311\n\202=\033>\224=\231\371&>(p\'\276\316,v\275n\373\014\276\307\304\016\276\375\227\326=^\014\313\275\324\031\316\274\204\352u=\345\232\347\275\357\307c>\006\273q\275\332\274\030\275\345\007:=\264\205\305\275K\306%\276\220\237?\276\363=\351<0Q\'\276uw\327<%S\336=\260\2373\276\254DA\276\010\324\037>X&\366=ob\023>\355z\230=\177\n:\276\212\247\272\274k;M>\302H4>\033\266\\=HL\031\276Em\232;\021\273\326;\337\213A\275+\215R\276\017B\031>\025\312\233=B\201:=g\240\225\2758\037\002\275\266V\342=\315W\025<\304\230O>\345\363\003\276\354R\325\275\223{\n>$\204\356<Z\020A>\340r3\2759\326\241\275\004\355\271\275k\216.>\353\371\356<R\264\341=\362\233\221=\036<<\276\255wN>\347\313v\273\340\3723>j\003\036\276\304G\306\2751\333\257\275@\215\371=1\211>\276\025\344\336<[\237@\276kF\260=)-b\2760\263,>\260\335\221=V\016I\276\026\340A\276\272\3542\275\236\016^>\215\223\277\275\311\006Z>\356\216\333\275\344\332+\276s\276B>\324\375\367\275\234\3348>\237_,\276\005\360\010=3\236,\276^9\343\274O\006J>\243\204<\276\260\243\230=\346y\207\275d\266P>.\230\361\275\275\301\326\275\320\342\277=\310{ \276U\237\016>\356\224\243\274\021\2122\276\201^!>\203+Z\2765|K\275\307\031\024\275l\206\251=\332\323\035\2756\227\0209\232\320Q\276\365\357^>6\263X>\203l\350\275\254\211\356=\200\353I=]_\006\276}\335Q>5\247&\2762\210;\276>L_\276\027\374\233<\202U >!/\002\276_\010l\275\377\317Q=\226\021i<\342\341\362=8\210\016\276\021\206$>CM\336<\262\001a> \266\213=k\305\247=\312\346K\276\361<o\275\202\335->\270\331J\2769\244\255\275\332\014\363=Vx\031\276\200\356\270=\317\331:\276\216\275\261\275\261z\236=g\341\007\276\025\032\250\275\304\332\246=J\036X\275\341~A>\2445K\276\037\253\\\276!.d>0y@\275d<\343=Z\253\301\275\326h\275;\304.\017\276~\234\363=N\362\033\275\254\271(\276?\216Y\276\3474\031><\364\'\275a\3771\274\276\3712=H\025R\276tx\002\276\242$\013\276\257\321\033>\006\240\254\275\276\010\373\275\367\223\002>\r\227d\276)\020A>\336X\n\276\212\220\233\275v\317\352=\267\"\361=y\274\010=\031\213G>01I>\252w\205=\242$*\276U4\314\275\314\343\356\275!b\027\276\362\317\020\276\020>\022>\223Z?\276\240`#>\271\213\225=\365\301\303\275A\300(=\'\342\021\275\323\275S>\3572\314=\027\210\270=:\201Q>|\366\032\276v\371\204\274\365\325\201\275\375B\242=\263H\335\275\021W\217\275\214\273.\276\350;N>\203\020.=\310\rX>\321\317E>\221l\273=\361\234\030\276#\223 =\314@\016\276\270%H\276\252\312\334\274\233\371U>r\002@\276\330\265\003=0w\223\275\357\3663>\242S.\276g\033\325<\021]\025>\310\270a>\272-\312\275\345PT\276\211\202\220\273\246\221\002\276\303\263\001\275\304\246\036<\325.\334\275\224j\013\276\271\026_\276\232F\215\275$\276\300\275\301\321\025\276]\245(\276\344\2208\276<\005\033>\366\353\002=\035\342\024=\370_\321\274\300\3136>z\254\227\275\245\242\334\274\257\277\013\276P\260\335=Y\3415\276\213\271\312\275\016\226\352\274\031\224\"\276\'\003\005>\354\320_\276\033\237\034>\345\350\022\276\200\316\244=\375\267\331<:\205\326=\"5S>*\216\273\275\\\211\"\276VD\211\275\037\002J\274\256q\356\275+<\312\273\311\235\\\276G\272Z\276R\360c=\023\307_\276\227\342]\276\262\352\\\276\032X\231\275\237\221\334<$\244\374\275Z\021\334=\2151J\276\\\364\206\275\372G\262=\326\216\034>\300\241\264\274\014\242\203\275\3636\275\275\025\336\233<\303l8\275\222g\357\273\237\'$\276\213\257 \276\tj\242=C\254\027>\231\346\r\276\002\t\217=\177\376\035\276\342\366\\>\270\213\314\274\362U1>ex~=S\325e\275r\221K>\302\007F\276hy\r\276U\251V>9\331a>\251\'\346\275\324\361)>@\0345>\246\031\361=#j\311=:\265\334=Nz >.\340\312\275\3725\301=\3145\032><\332\023>W_a>\232\204\244\275\006\314:\276\272-\002\274~z\001\276\361\334^>\275)\034=\372\006\214\275<]\362<U\326J\276u6\"\276\001\034\001\276\3776&\276\253}[\274\270\316\017=\337\333\370<1/\353=\365_\001>\375\311\005>X\022\020>{=%=\026\360\010\276\'\2639=\2426K=\354n\336=Z\322x=\250T,>);\242=4\024\"=\003\223\006=;\3719\276\232\274\322\275\270\253\017>6D\026\275\000\305\356\273\243\010O\276\247\034\231;\355\201\340\275\370\335W>v\356\026>\014<\336\274\211\370Z;\342\014d>5\007o=\036\301\025\275e\266\264\275*[\314\275#\234\230<\026B&\276\204\207N>\3473\233\275~\351\330<Z\361\033\276\366\350#=\267a\036>\243=\020>\353\242\344\275\304\371\256=S\004r\275u\352\226<\330dM>/\263S<\361=\221\275\366&S>o\335\267=\307\376>\276;~\233=5\t\347\275J\220\027>:\337\037\276kM\336=R\306\326\275kt\272\275\377\301\005\274\027\227\370=\347\244\316\275h\357\324\274\363_\237\275\315Z\307=\254x\010>V\320\341\275\341\020\3079m%T>d\361\331=\\n\032\276\351\344\213=@r\260<{\330L\276\226\nD>=T\031\276\004.X\275\363\0212\276|\304\331\275\313]\334:t\003\r;\243\254\001\276\277\035J<\3472W\275\317\2432\275\253\214\223\273WJB=ICF\276|f\231\274w\2771>\260\320\215\275\204[C>-\300\321\275\020\312\322<h\256\006>)\\0=\033\'\370=Y\270\362=M\254V\2746\334K\276(h\317<\315\307\035=\364u\204<\235\030\327\274\203\272S\275\336\212A>\363uO\276\'7\373<\312A1\276\260\243*>\320\017L;!\0335\276\nC\217<1\264\226=\357\320,\275N\324e\276s\323\261=d\277\021\275\270\240X\276\2055a=k\371T\2760\022#>=5U\276\000\375\332\273Bi\002>\214\222\213<\271\3652\276\037\307X>h\353\374=*\233\241=z\273:\274V\016V\276]a\337=\035\315%>\322z0\275!\006\'=\260\377\037\276\207\020\022=C\215b>\300\036\027\276\265J\227\275\304\370\312=\231BR\276\027\304\267\275\304\232\222\275o<\360\272;+\270=\201\"G>y\241I>\222\210\210\275E\245\213\2730\331L\273L\263\303<\325C\035\275\333\346V>V\364\231=\271\241%>\270\226\016\276Fj\226=\354|\005>\037\\A>\255\256<\276\2608\343=Q\274(<\017e?>\300\t\321\275\2211\316\274G \233\275PgB=\316Q\205\275\nZ\003\276!\246\327\2752\3507\276S\\\270\275!\330\361=d\246^>\024\365\311=\337\310\005\276\231B\000\276\212\2562\275\375\345n=\322\037L\273AD\017>\n\363f<\271R\341<\253\322\023\275\331\375e=\313)\236=\020\215H\276=\276M>\246!S>P\376->\205\306\026>\0227X\276\351\3620\275a\"\252=\032l\375:\265\024\350\275\247\213\244=su\036>\342\361<:X\035.>\002UH\276\014\310\365\275\272\227\002>\322\205\006;\022\343\330\275\253\2722=\225\301%\275\234\017\360\274\311-\">Z/\262\275\272u\212\275#\223\344=\363\253$\276\251$\005> \253v={\326\205<>\202-\275\314\247R>\227i\363;,;\205\275\345\027\332=(\261\360\275\341\315\241=\315\2536>x\2233>q\341\225<U\333\262</\331\323\275\022p\234=\020\315D>\335YU=Z\0164>\350\213\027\275\032\216<\276Q\252R> \2032<M\302\200=\217\377\235\275h\331>\276UM\224\275Q\235->\020L\020\275;\n\007\274\022\277J<\250\333/\276|\326*=a{\202\275mHC\276o\303\241=4o\020\275\230\3577<\2228->\025\225\004>\312\355\233\272\024\203\374=^\0052>O\224\037>\004\320\315\275P\337\212=\36173>Pq\t\276\223$\314=\034\216_<\n\305\020<\004@(\276\215\232{;\023|.=\244\353M>\314\006\250\275:\241\252\275 (\233=\307f\335<H4\251<\345\366z=\310\201\245=\317\340.\276f\223\365\275u?\272\275R\234\365\274\2441\301=\234\324 \274 \275L\276\3461;>@\343;\274V\335W\276FRG=pD\245=t\360\250\275y\276a>\t\030(\276s\200\037>\305\023S>U\232v=\026\207\216=\026\222\206\275\361\202\005>\014\310\376;\252\347(\276tGB>\334i\244=#\223Q>\346\t@>"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
