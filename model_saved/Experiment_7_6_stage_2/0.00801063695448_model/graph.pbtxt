node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\200\204\242=\225\352\211\275Ui\205\275\3547!\275Y\005\227<\006\325\223=d\342\014>\372\342(=\367j\013>/\326\203=\253\202\274\275\306K\3418\021\246\250\275\235\017\251\275OE\351=\226\004P<\303!\374;\007\023\245\275\321!\203=\005u\337\275t^;=t\013p=\232_>=\'\245\355\275\003\323\322\275\017p\327=\356\207\203\275\367\207\344=\365\344\233\274\263R\n>\363\245\213\275\\e\032=\3710\205\275!\001M;\357\264\210==\230\n\276k\333|=\207\333F\275\017h\330\273\365\267\r>\016\346\010=\377\373}=r\220\314=\005\006\215\275\274\237\360\272i\374\032\275\240yR=#\264\003<\341+\245\274|\271\001=\305\2479\275\210K\007\276m|\003>\316\346\032<\307G\304<G\344\366=\303By=\200\253\267<\332\334\373=\020\204%\271\023\002\244\275C\267\004>\315\323\013>\363\232\t>c^\317=u\013\352\275$\023a=\224\346\357\274xX\226<b\363\211=\0103\005\276\\\016\371\274\030\304\252<\331\214\251=\217\275;\2752\030\330\275\\v\021=\362\275\245<\017\247U\275l\210|\275\357\264\305\275bm\023\274\261\371\014<b0\003\276\321\246\020=[V<=s\037\002>\354`8=\361\3751=k>\345=\362\260)\275\261\230\n>H\004\005>o\356\233=,\240m<u\234\253\2759\314\220\275z\241\244\275N\226\031=\245\377\227<|\231\222=\021\255\367=\036\315.\273\200\213\264\274sX\002>\r\346I\2756\000\200\275#\353\363\275\023NR=\2353\335=\t\201\004>\227\336\313\275\3510\245=\331hu\275K+\007\2762\020\022=TO\331\274\326>\007\275\347\346\354\275\332\347(\275G\207\253\275\021(\025\274\n1 ;\376\370\270\272$\256\341;\363\215o=Q\237\354\275\030\365\345\273\021\243\014>w\307\336=\307\022\334\275\032U\242<\325\205N\273\320\207\373\275-\003\270=\014\017\002>49\301=j&n\273\272\313\251\275~\255-\2752\347\214<.\265\201=\231\335\335\275\3025\035=\033\301\227=\207\270[\274\312+\363=\014\255g\275\264\353\354;\376\354\242\275^6\222=\212x\356=X\220\013\276\344r\026=\374?\245\275\237:%=\014\321\036\275nV\273\275W\310\261\275\013\220\r=\334\212*=\2556\021\275\213b\006=\t\330\322\275I\370\007\276\272\320\006:?\rj=b`]\274\236o\007<\355\222\016\274[\314\273\275\371X1<q\004\026\274=\236\324\275~\370\364\275\266[\276=\013\331\304\275\030\327\271\275\004g\010\276hM\004>2\213\277\275\340\230\226=\205.\316=\355\225\236=\305q\314=\303$\247=\362\232\373\275\370\336\351=\243\366\005=\321\331\211<T\354\t\275\242\346\314=\345d\307\274\273\262 ;x:L\274\352X?=\311\206\341\274\355\022_=g\354\267\275PK\306=\346\351k\275ix\234=Q\242\024\275Vy\257\275B\\\267\275\336\355\374\275\273v{\274\215\305\343\273\017\356\243=\265+\n\276\312C\202\275_\254\220\275\007\375\233\275b\215\313=9\235\226<uKd\275\370\034\324\275n\317\217\275\004\234\260=;\320\251=X\347\000>~\025r\275Ajz\274i\274\"\274\034P\335=\332z\254\2757\3627\274aJ9=Z\322\303\275\315\201\314\275c\312}\274A\001\312<\352\266\305=\234\'\016>\232A\261\275e\267\264\275{\212`\274W\333\227=\314\332\240<\314\312\300\275u\014\347=\226FS\275)\225J=\377\220\361=EL\362\275\335\250\n>\240]\237=x\227A=\327Y&=\245u\331\274[\017>==\333\\\275N\3202\275\005q\216<\"H\277\275\361\to\275\224\310\010\276\0349\275\275-5\366=\325\004\262<\3076r=8\\\r\276\251\242\317=\340;\376=K\030\271=\275\264:=?b\352\275\344q\232<p\032\226\274\316\217\007>\340%\277\275<\213d\275]\260\003>\033%\r=\220\340\277=\321\254A=+\014G=\256<\247\275\250\260\001\275\215\003\223=\177\304\224\275[\377,\275+v\006<\317m\004>\232\034\352<:\273\002\276\002\306\212\273\207l\033=/\2432<\324\351\242\274t\210\366<\250\245\247\274\005\372)\275n\317\202\275b\320\223=\211 \376=!\272\037\274\232\322\030\275\274\355B=\340\221{\275\010\367\367:\361n\201\275i\206\347<jy\272\275#)`=\026\254\010>\306l\'=\314\302\365;N\230\004>\003Q\247;\024\'\004\276\002m\265\275\364@\265\275\247\321\021\275Yk\273<\212O\251=\346\035d=\211\313\322=\227\234#\275\242v\261\275\242\223x\275v\2736\275\371%\375\275\036\027a\275\252\320@=\253\356\244\275\337R\227=\351\267\371=cy\373\275J`\003\276?iX=\376|F=\234[e\274\334\352\354=\204\030\001\276\321Bp\274\212}\322=M\351\201\274\030\221\376=\032e\014\276\313\351\240\275\355n =$\351\007\276\217\331\360\275\177/\206;2\273\007>\010\272\024<\024\313P=\203\0332\272\354\355\323=\331x\270\275R\267\276\275\002&\277\275u\365|\275u\355\263\274\267p\337=\013\020p\275\225\001\235=*\017\321\275\357\217C\274\205\035\273<\322^W:\275\006O\275\007Y\304<\021\3636<0\265\241=\300\274$\275^\325\337\273\323j\312\275\"#\372\274N\256\253=\323\274\315\275Oa\361=e]\034\274\270\307\006=\337Y\032=\345\320!=\353\336\214\275\034\211\004\276\272\352\317<d\255\214\272\334\023\364=\016z\021=\322=\317\274cG|=*}\236\275\304\271\354=\363\317\335;\"\262\327=1\211\355\275mn\034\275\365\256\006\275\324\006\215\274\210\323T\275 q>\275\n;s=\265n\315=\233\240\333=)z0\275\256;6<\034\024k\275!\266\241\274s\264\263=G\360^=\n\004\334=\251\023\220\272\276\265\240=\367\342\036=^\214\270\275\005\0044=\203\031\344\275\235\251\340=\266\277\203=:\317\262=\320\267T\275_m\r=D\2326\275\366-\037<\023\354Q=\267q\275;Z\212\201<\327\2446=\244\3141=\221\273\216;v\254\022<\027\n\260=\273\177\256\275\260\271\223=\017\347\235=\351\004w<n\307\370=\006\235\333\275\251\330\302\275B\332\375\275\303\244]=\270\371U\275.\270E=\2660\025<qp\254\275Y\207S=k\235\321\275\243U\341\272\323\033\274\274\313\261\001>\004l\324\275\251\007^=\322\362\210\275\300\207\373\274C\310\225\275\210`\t<\333J\033<LUS=|\023Q\275\364H\274\275\304`\355\274\3100\274\275(N4\275\274\357\353\2756\227\202\275\225*\013\276\327Tm\275\267\311M=\252\207Q\275\2444\265\274\336V\235\274W;\211\275J\362\233\275\335W\377=\352zv=\017\016\\=\2146\357<\243\233u=\360[\000\276q\266X\275e-\354=\nL\372=\201y\274\271\332\352\006\276\236Z\327<zyR=.\376\345=\n\365\212=s\267\350\274\033\023\337\275\201I\370\2758\350\376\275\361N9\275\204N\037\275\026\225\311:9\333\256\275\316\361+\275A\010\272\275]\024\036=e\"\275=l{\343\275\316rD=J*L=\324#\376\275\323\033\t\276\377\353\254<D\370\352\275\260)\016>\031\'\016\276\233(?\275\031\257\211<\2479\340\275>\325\335=\222\366\006\275R\232\351=\262\241\322\274\361-\306<\262\360\313\275\337_\265\274\"\232Y\275W\334\222\274R}\r\276\217f0\275]F4\275\255\373\000=n\306A\275E\245\353<a\3217\275\234\366c\275\221\322\255\275}\031\374\275\212\037\241\274\374R/\275\216\241\347\274kr\330\274\273\223\223\275g]\r\274\017\343\325\275\367z\273;\206\225\207<\024\346\016\275\305\330\275\275\023\351\205=\rd\032=1\017\251=M\037{\275\201\210\251<\362%j\275\316\004\263\27506\002\275\022\355\361=9\035\370\275jt\370=\257p\346=\334U\333=\316\353\034=\305\201]=\2456\243\275\005Q/\275?\375\034\275\034K\212\274\0267\276\275\265\213\253\275\2339[=6p\024\275\277[\t\276Sy\3049\266\257S=\374\322\312\273X\023\306\275\213\231@=\265\030{=\233)U=\273Z\227\271#\275\005>\244!\337<\272\016\263\274\334|\310=KYu\274\205\n\001\276\217\027\241\275v\210\004>\223\236\021=,/X=U\024L=\366\025\202\274\030~\301\274\301M\223=n!\237\275^\333\264\275\226\037\374\275<\210\227=\t\360\252=\220#\367=\033\030\236=>\303\351=\266s\003>\242\271\322=u\363\302\275+\277\215\274\273x9=b\373I\275\rB\317\274k\030\223<G\344M<V\272\342\275\314\201\037\274\2508\330=4\244\r>\020\025\206<\354@\372\271\370\315\357\275\265\210\370\275/\303O\275\321\365\236=\033\330\374\2759\304\r\275S\031\322=\351-\220=j\343\306=\230Q\304\275\371\376\023=\341?0<\204\325\001:\223\275M;\236O\027<[\264\340=M\035\233=*\005\311=KA\010>\3615\n>RE\330=\363\365\345<\322X\213=\'\332\324=+\333\326=\320!\211\274/2\006>\324%\250\275\355}G=\344\322\354\274\n\021u<\000<\014\276\305\212\213=9\331\014\276s9\013\276=`\010>\236C\257\274\006\306B=L\226\231=\302\034c<\316\324-\275\256\034\n\273\350\245\001\275\3200\005>0\021w\275\322\227\303\275\3719u<;\334\014\276\254\313\334=p\225\325:D#\007\276\242>\357\275O\2665\275\356O\033\275:s\271=\346\336\365<D/\254\275\253\365\324<\242\020S=F\206\037\275\241 \231=aF\237=\005\224\335\275T\317\213=\200\373\034\275\342\025\373\275Qq\354=\3323\346\275\214\244\227<\243!\365=\'\363\005\276\n\355\003\276u\375\365=<l\006\276\017\275\022\275lZ\335=\036\302\212\275|g\370=;SD\274\\2\016\275:\364\361\275\321\236\006>\226\312\023\275\027\214\n\276\313\217\267<\317\211\312\275\351\375\275\275\361\206\201\274\316\377\005>\n{\343\275\262\234\322\2750\374\006=\262\355D\275\202\032\354=\235F?\275\315\023\203\274\240|\251\275s#\317=\007cB=\315-\314=\225\2736\275bP\235\275M\264\234\275\202a1=C\006\354=\233\034\370=\331\030\342\275\225\026\362\274\3656\222=\364\351\352\275\017=\226\275P\245&\275s\020\206=\335\262\221\275->\342=9s\247=.\363\204:\2222\340\275\262n{<\377\236\203=\316\025\000\276\242U\221\2755\356\037\275\037T,\275\275\232\272=\3113\301<\0066\014\275o\350\200=S\316\000>\224z\271=\0312\232\275\312\232W\274Z\327\203\275\362f\003={\250\335<ey\360\275=G\351<+\270R<\256\023\236=\251f\364=b\257\003=\221.\007=\004\276\377=3\\@\275;\261\n\276\335\0201=\303\223\232=?ap\275v&I\275\tn\376\275\345\333\242=\317w\252\275\346\205\364\275l\344\233\273\307\236\230\274\242\354\256=\253\225\010\276<\212\377<\006\246\255\275\340D\013\276@\2039=F\020\003>\375\234\340=82\014\276a\206\225\274\'\234 <\006c\372=\226n\317=#]\305\275\340\034\r\276\375+\344\274\004\206\231\275z\376\005\276IJ%=\177\223\261\275\262A\004\276\230\r\357=\n#m\275gm\275=V\031\257\275\023pU=[2(\275\334u\370\275\033K\001\276\364\021\010>\272\352\027\275\360>I\274\313\306k\274\323^\225=\021\035\205\274\366\334\020\275\313\355\252\274>\234\001\276\240\343\201\275\377Bp\275\255\014\367\275\377\001\271\274A\354\207\275e\300M=q\026\373<\274|\305\274\241#7\273\346r\321\275\262i\372=|\253\373\275}\257_\275J\264\315\275R\323\302<P\007\232\275\223a-\275=@\346\275\234\353\277<D\274\374<\270;\303<\344J\242<\311\220\317\275`\014\216=\321\234\360<\270o\010>u\2748=\022\315g\273i\326/\274x\245\352\273,4\262=\224o\302\275A\021\035\2752\027\002>\203\314\t>5g\251;z;V=\035R\032=w\301*\275\351>l<B\n\013>o\346V=o\353\252\275h\020\250<\361q\006=\236s\332<\243\206\362= \300\377=0\273\202<\234\227\264=({\214\273\322\244\250=%`\n\276k\275\301<;\310\200=\247\375H\274`\353\241\275\251\352k\273\256\021,\275\353\273\330=90\322=[\026\223\275.A\210\275[U\204\275\013\303\001=\236\332\010>j\330\377=\033?\014>\311\201\007>\3702\364\274\250\267\005\276I\312\202=P\275\301\274\023\020\260\275\243\021\267\275\247\216@=\200oX\275\002\221\362=\263\270\205\275\230\"\326\274\r\316\271=6\324\002=$)\315=\271\375\304=\002\031\303\275|/\253<eG\204\275i[\n\276\335\272\204=\323\014\335;\345\340\373\275@\3475\275m\364\256=\250\316\325=\232\216\315<K\240\260\274po\311=*\353\321=z\301\256=\247\205\366=\0326\013\275\326u\326=*\330[=m4\264\274\007\254\207\275\370J\271\275\337\002\370\275\312\207\200=\003c\373=~\366\273=\307\205\217\275\311%\226=M\357\316=\001\250)=\022\216\030\275\336\227\251=\310\322\226\275N\266\t>\212\232\355\274D\251Y=\244e\271=\322\366\366=\353\360\254\275R\r\276\275\254v\007\276\275\372\227\275\374\342U\275\025\365\337\275T\332\347\275+\014\344=\200A \275\347\304\027<7\022\213=\224\022|\274,\013\341\274W\264\211=3\350\371\275\346l\016\274Y\320\320=L\t\315=\013|P=)f\240=M\203\322=\341~\277=\026-)=>\300A\274!\211_<\213<\000\275\361\301\214\275m\231{<\316\002+\275\203\236E\275n\346\261\275\242\250\305=4Rw=\301\234\246<-\221\242\2745\246\254=9\215i\275r@\276\275Q\272\316<~\013\317\275\013\266\374<\312\271\005=\0169\234=A\370\314\275\262D\262=\207q\024=\320\242\365=\357\036\264=r\264\t\276\266\025\314=\001\034\331\275P\367*=v29\275\005Q\263=\205\205\373\275\366\206\376=\275j\205;\256r\344\275\t\037\017=\340g\246\275\316I\264=b\022\016\275pu\002=rT1=\310\311\206\275Z=|<IC\035\274\275\357\001>\335\270>\275\0305\252\274D\370\007\276;<E=\277\237\024=\227LS=\363\246\325=\325E\361\275\005\311\247\275\237x\003\276\365?\354=\34425\275\255L\033\275\323\026\004<\356\242\003\276oEb=\235\357\322=\323\000\003>&\261\372=\200\010\227\275\233\3538\274\334\374\337\275\347P\232\275O\327\304\275\200?\245=Z\000\221=\2773\350=\030\335\243\275\327\327\n\276\366\242\274=X\316\221=\332\'\230=\341\355\375\275\025\377\370\275J@R\275t\263\273\274#G\373\275\217!\226=\327NF\274\235\365\227\275\271\231\007>bw6\275\347\033\022<\372\214\377=\n\224\347:\\\340\202=\276\020\202\274^\354\363=.QT=\274\324?\274\272\352{\275\275\230\221<C\301\202=n\323\027\274\317\204\304=b\241\025\274\301?\241<\030r\251\275\016A\370=\232\254\235\275\343\223Y=\026\264d\275\306\317\324\274\353\035\035<i{>\275\313\013\213\275\320\211]=*}q=\335\225\344=M\022\224=u}k\275\273\351\364=\207\206I=\267\313q<f\225\266\275\037\375\270=\267\237G<\271\276\272=\271P\225\274\324\365\350=l\002\007\276>$\265=\372\255\363=\211\023\354\275\210\225\315\275\026\304\255=\250\023H\275\347M\342:\rc\341\275\352\031\362=\216\270B=\327\034\261< ~6=\230V\215=\236\302f\273\007\235F\275>n\245<_=\343=\362\343\036\273\2207\350=\001\357\376\275\326\020\252=\202\324\230;K0X=%\020F=\354$\251\275,V\014>\025\251\003\275\326\300\234\275Ih\241=\353A\256=\032l<\275ap\020\274c\266\377\274Y\250\364=\254Ju=\313\342\037=\344\010\250=\017s =\254cd=\206=\327=\016\367\357=\222<\340\275\026J\243<p\202\270\274\252;\007>\367\330\331\275\271k\211\2740`\202=\242{\235\273*H\270\275\371y\207=\240\374\235=\0216\221\274d\357\242=\207\304\271\275\371O\212=A\342\n>J\020\210=\252l\255\275:_\370\274\311a\307\275\272\267\"\275\203\332J=\230\206\005\276(Cl\273Ph\350\275\034\240\274=lyt=\r\223\000\276\240\264\200<<\270\240<\255\273$=+\317\355=\240\013\013\276^}\232=Z\034\272\275\304%\346\275\352y\225\275X\243\304\275C\376\237\2733\006\247=\363\324H\275\370\230\205=\220\246\016\275n\210\251=\274\034\232\275\341M\227<\004A\200<\226\017\320\275Ep\206=VMI\275\362=\032\275\323?\264=\347u\241\275\242^\252\274\\\200~=\254\266\224\275O\r[=\343\323\344=\351\246T<9:\364\275!\001\336=Bu\230=\210r\340=\350\007\330<p\022}\275\262X\013>u\343\341=\237\344\214=\230\377\372=\034\267:\275\373\265`\275\211\376w\275\267\317\307\275\337\203\212=WAm\275\'\320i=\023\312\250=\tJ\315\275H\374`=2\214\"=s\267w\275p@\264<\004@\351<(\311\312\27533\204\275i\024\300=\264\376^\275\024\007\203=u\344\002\276\3702&\275\2276\300\274%C\357=\341\"\010>\271\217%=\364\036\005>\0253\010;\231\374\013>\201\207-<\351\352\014>\261\326\246\275w\264\253\275\267\345\006>\036\272\220\275d\014\310\275\014\263\014>\0249\305\274@\311`\275j\306\343\275\264\370l\275\261\253\270\274\\B\375\275\347QG=0\3122=\237=\323=3\273\203\272h\371\204=\264\351T=~\321\006\276o\233\002\276\021%\360=}\360\202\274kq\320=\374\276\271<Dg\021=M\216\360\274\220n*=\324\314\342=<c\352\275\230\227\307<L\327\022=\033^\306=\235\203\240=c\302\324=s\\\261\275\232\031\346\275\260&\232=],;=Y\376\263\274\246LI:\227\347\343\274\356\356\362=!\255\263=\206t}=\026\355\245<$-\024\275\304\023\341\275\034\n\351\274,\276\013\276\0027\344\275N\037\000\275\275\371\235\274\322\263\333\275\243\034\235\275%C\263;}\307\006\275\326\214\341\274:\350&=),\022=(D\244\275\212\202\300<y\016J=s\342\021\275\\]\377\275_\222<\275,n\t=\375A\264=.v\353=\323;\003>v\2557<\2642\002\276\260\'\322\274\260\313\347\275\261\212\254=+(\347<\272\256\361\275\264\200\231=\177|\341\275J\026\246\275\240\370M\275M\263\272=\275\"\027<\\\375\343=f\314\353\275\025\022 =\207.\341\275\032b\235=|\252(\274uL\327;F\010\331\275e\365\024<~F\234\275Dr\264\275M\377\035\274\376\231\006\276\206\243\230=\377\3353=<\327\003\275Ndb<-\263@\274\320\r\372\275\n}\233=\265{A<\313\211\265\275\323#\016\275\016\231\245\275pU\001\276[j5=\350*]=\203\034\t\2764\346\267\2751;\224<\366b\323\275\032\373\344=\\\205\206\275,\271\013\276\204R\355=JiL\275\010\232\031\275EM\007>x\\\204<\321\035\243\275\te\327=J\274_\275\220\226\005\276?N\326\273L\224\226=\252\036\t=\034\031T\275Wr\312=\006\030\372\275\030l\320\275P\347\326=T~\236=\245\n\007\276\006T\347\275\334:\376\275\031=\275=\332\n\260\275\000\021\340\275N\024R\275Gm\r>\270\237\257<+\261\373\275a\004\246\275P\314\240\275\266\020\204=~\246\230=\007\226C={\375\362\275\033\252e\275\3530\307\275\207\361\221=\234\244t=t\236\230=\324ha\275\332\213#\275\334\3254=\2714\272=\211\362\265=\311;R:\366\271>=\267\274\273=\272o\001\275l \220\275d\3137\274W\355\344\274\343\325\332\275\021\210\211\275\304u\023=\251\226\n\276\317\275\215\275\364\3328\275\262J\222=\215L`\275\216Q\327;6\312\361;\013g9=j#\362:\363n\177=6\302\214\275N;\246\275\022\373\277<\002\030Z\274\014\037\272<14!<<g\244\275\007\274%\274\002#P=\211\216\013>\264u\267==\207s\272\275-\006>y\330\263=\360\\\244=\215\272\027\275N/\244=L\237\353=\017\317\334\273X\207\334\275\245\206\027\275\360\357\333\273x\322\261;\371\3759=I\310\376=\027w\257<\347&\314\275\363\361\245=j\307\207\275\"\036}<\252Lo=N\344\212\274\007/\001\276\3069\234\275r\377\"=\231OS\275\265\001\353=Y2\013\276\330\270\372=\016\362\211=\220\204\356=\300\274\360\275\3656\265\273\322=\277=M\235\372=X\271\353=mk\265\275\030\002\244\275`Wh\272\267\305-=K\177\004=7\234~\275\240\352\213\275\224\257\227=\223\342\354\275G\206\220\274\232\241\013\276N?\364:K\363*\274\357\225~=7\252\265=\013\264\231\275K\rP\273\357{\316\275\335\003\t>^:i\275G\367\252=\222\205b=\274\273\215\275\355\2746=o:\356\275\352-Z\275G\376\231\275\251#\n>P\333l\272\272(\207=\212Y\335\275\256X~=\355`\325=\2744\300\275|I\240=\361T\275=\200}\213=\220?\323:\206\024>\274u3\325=%\302\010>\'\270\332\275\342\2152\274W\204C<to\323:\357\254(\275X\331U\275\3258\347\274\211U<\275]\347V=\025/\323=`^/\275\267 \203=V\010S=\341\"7=\271\\\342=\336|\255\275\305\236\365=\262\304m=\233\010\360=$\221\004\276\003z/\275k!\233=\267\373\367=0\315\315=\211\312\000\276\2028\343\275bn\021=\262S\001>\277t\313=M\260\270\275|\245\277\274I\357&=\246;\264\275\276\203\225\275\273\215\247=kY\235\274\242\022\364;\026\027\300\274[P\014>\027\332\215\2744\315\325=\343\230\214=C\206\321\275\014\341\t\276\366\177\256=\326\354q\275\335\341\320=\336\274\010\274v\014\010\276kxT\274\312UP\2735!#\275\262:y\275\340u\305=\374Y\032\275_[\013\276\270,R\274\271-\031=\243^\360<\t\222\343=\001\300\367\275\017\373\227\275\001\205\353=\311@\301\274]=\341\275\360\224\317=r\327\2669\257zS<\366S\010\275\253;\331\275\232\314\303\275\370\265\357=Yv#\275Ma\337=\321X\327<\333`\021\273\033\275\010>\254hv=\366y\356=\315\304\220=\316\356\377:\257\016\003\276=\016X<\r\3414\274CE\341<\231\371\344\274\321\251\315<\025?\255\275Y\317\010>\314\222\254\275\206h\021\275\244\246\'\275)?\024\274K\021\333\274\337Rn\274\272R~\275Jfc\275\303\006\216=\022\373h<\353\304\254\275\353\346k\275#/\236=oS\311\274`7\312=\213ta\275\t\316\214\274\016`\357\275\236\203\334\275\026\331#\275\260\312\014>\234j\320\275\260\376\327=k\326#\275\022\346\212=\004@\322\275\210k\002\274o\215\003\276W\340\353\274\252\r\372<l\035\034\275M\250\255\275\312\211\t\276 \334\034\275\314\270\332=\034(\241\275t\265\347\275\322J\006\275\0212\212=\034\030$<\322\366\360<d\346\275=\037\215\204\273\260:\367=D&\004\276Y\350\370=p\232a=\343\304\246\275]gc\275\002i\365\273\'$?=&\317\300<\340[\024=\274\355\350=\002Z\266=\006\273\305\273\260W\207=j\367\r\275\023\300+\275\021\351\372\275ea\327=\332\370\t>\037\230\326<\264\234\250=\214\271\363\274\204\314\372\275\304\023\367<\377zl\273\372\202S=\312<\277\275\274D\362\275>\274\377=\202\370\257=\333\330\362\275\202\"t=[\013\351\275\235\010\213\275\336\226\333\275\201a\370=\355\242\000>V\036:\275;\177\010\275\211\376{\275/Q\345\275B\342\330=\200\003H\274\256\221\006\273\005\321\300;\363\222\206<\312~\350\275\263Z\014=\250\202\304\275&\355\002\276H\316\227=o7\262=\303\370p\274\007\244\241\275\314\375\247=\263`\340<d\ri=\000\254\207\274H\243I\275\340\302\023\275\341\275e\275w8\025\275>Z\272=\245\243\207=\205=O=F\231\366=\005\322\261\275<&\021<\331\017\353;c\271\007\276\001N\004>t\200\261=n\326\276\275B\204\307\274\323\346\300=\311\010\243\275\323\020\332\275\272\301\000>\323\240\352=\214\213\335\275C\356\001>\004\346\355<y\342\203=\202\355\010\276\031\350\356\275\271\266\215=FV\030=Ot\227=\025\037\013>\375u@=\376\344\270\275\271\300\256=\245\226\010>\001L\331=\036\\\350:\200\315\256=5\351\226=\241\025\004\276\251\243\367=7^2\275.\356\347=y#`=#.\003\275&\231>\275\272\032\177=s-\r=\255?\360\275\234\337\006>\001Kt=\373\2465\2759\303\306\275\263 \213=q\223>\2757\364<=\334h\201=b& \275\252(Y=\343c5\275\235\032\370==w\223\275\213\313\327==)o\275\334\'x\275\'K\312<p\252\217;O\031\021=\\\230P<=r\177\275@\357\225\275\265._\274\342\207\010\274\267\256\277\275\212\317\214\274X\252\014>M1\213\275T\271\204<P\352\205\274V6\n>(\210\327=\333\014@=h\342\365\275\240Z\363=\375\250\001>\261n\337\275\333\023\333=Qsi\275\335:\261=O\034\362\274\017Ch:9\346\353\275\355\372\326\275\0176.=\nx\321=\332\243\312\275P\276\001\276\375e\213\274\265 x=2\257F=u^\212=\036K\002>]\257\005\276a\3118\275\262\\\314=\233\321[<1y\303=M=*\275\276(\302=\'\200\216\272n\212\014\276DI\227=\337\001\326=V\033\353\275\033\263K\275\220Q\256\275\337\004\310<\002\001\353\275O\265\210<\226\207\371=\016\235\t>\343\367/\274m\276\302=\240\250\307<1\320\304=\346\312\035=/+\212\275C\017\222<F\344T\275]~\273\272\220h\361\275\361\323\r\276\274\201\215\275\r\017\322=Q\301P\275\311Q\365\275\321E\306\275+?\366\275\354\326\322=\010P\007\276\376\251\232\275%\201g\275\365\245\341<\rn\206=\362U\271=\031\320\300=\005\311\276\275\341\260\002\276P/\253=Z7\204;p\334+;\370\216{\275:\267\321\274\227Z\203\275\377\375\206\275\203\027\263=[\206\215\275\207\227\374=]?\035\275,\236w<v\225{<\332\025:=\244>\t>\203:I\275&\n\r\276x\310\337<C6\316\274\376\266\217\275Q\331<;P^\200=X\341\335=\305\030l=\201\240\003\276\335\220\305\274\r\376\010\275\357\342=\275H\354\271=\225\031\217<v\363\302=\3122\013=\007\205\000\276jx\256\275\231J\270=\215\026\376=\370\255\347\275:\370\304;P\206\257<(\031\004>\304l\304\275:F\315=r\374D<\360\033\221=\034\260f=:\234)\275\360Y\217\273\306\353\354\275Y\262\265=\002\210\352=t!\207\275\207E\264=\312\355\222=\033 @\2758j\323=[Bi\275\334\226\003\275\003 \014>\201\207\341\275sQ\020\275\3057\005\276]\021\254\274\027\310\025<+\274Y=\242w\211\274K\014\252=\022\232r=`\003\340<\344\265:\275\370\370\322\273\003\0130<^\021\266\273v\364\303=F\260\251\275Y\307\260:\203c\310\275Lv;=\024\031\016\276I_\205=\375\341\224=\202\251^\275\201\215\335=\240fe=\243\014v;jJ\247=s\214\302=a8\213<C^y\275\000\271\346;\267\265j=\223x\006\276\230;\006>f\331\371=\003\005\005\275\377\234\2528\237\362\350\274n\363|=\202\227\267\275w\245\027=E\300\376=t\370\377\275\376\032\004>Q\315\230\273\020@\315=\311\353\346\275\034\211\002\275\366\354:\2753Yd\274\220b\316=\024\305\205<EA\234\275\224\243\327=\372\256&\274\017\222 \274Z\263\223=_\024\346\2733p\374=d?\307\275p\257\315=tx\000>5\325.\275\374\235\367\272Yx\\\275pT\372\275<\317\241=\214u\007=O:\310\275\377n\355\274\331\234\251\275Q\307\203\275\225B\334\275/\345v\275\346\342\320=L\354\225\274\0362\236<\200O\'\275/\315\010\276Nr\217\275i\323\226\275U)\016=V\354\203\275u\343\204=\nFr\275\240\272\006>\225U\177\275\335\323\360\274\306F\371\275\263\023\361=K\323\310\275\265\021V\275\'F\315=\353\307\274;\370\350\000\276\366\262\372\274\370\335\226\275\206\221\273\274:F\321;pq\206\275\344w\200=\307E<\275\344y\360;\006b\304\274\201\336_\274M\210\262=\005\315\260\275\365\032\013\276\357q\001>\221\320\006\276W\274\224=\375n\231=k\264\273\275\267\360\233\275=\366k\275ms\271\275\300H;=\234|\223=j\007A\273$\212M<~\360\026<l\221\035\274\\#\210<\230t\353=\254\240\232=&\253\374\275\310M\036=\374\235\001=\343j\303\275a@\360=\205_(=$\033:<\377\030=\275%\226\302\275R+\304<\302\364\271=\265\345\023=\230\020\014\275\263\205z\274\265%g=\305\277\234\275\246h\371\274@\323\271\275yf\032\274P\355\225\275F\346%=\223\224[;<i\334=8\254\373=\343\331}=Z]\005>\333\360G\275x\031\016\275\022\256\t\276\320\035=\275\262\371\003\276J\030\n\276\255\347)\275\273\'\013>\271r\017=\311\331\014\2769\177\277\2753\262\376=e\023\352=\334\265\224<\352\225\323\275\2249{=\214B\242\275i\014y\275D\025\277<^\035\014\276\231\370\324\274\026\352\216\275\271\350\260\275Y]\003>h\020\r>\243=Y=x\303\025\275j\n\000>D&\266<A]\256=L\241\335=\010\362?=\215R\211\275\240\360\215=\026\002\376=\325\017\251=\253FW\274\345\354k\274U\206\t\276\250\211Q\275E\271\247<\332\201w\274TQ\227\275v\370\312<B\374\312;\363&\227\275\347\213q<`\014\300\275\357w\024\275+Rc=M\320\347\275\237.\t\276\263\350\300<\025\335\n\276\244\225\363=\377\034\321=L\325\333\273L\321\214\275\n\360\366\275-\320\240=\2259\306=\227\241x\275\037\177;=4\340\375\275\247\321\364=\376:\353=\242\216\377={-\267\275\202\361\362\275+\332\227=/4\030=T!\n\276\030\260\005\276\302\204\004>pU\221=.\262\236<*1\253\275\025\313;\2734k4\275\255\213\t\274`\214~=\013\005U=\2623\206\275\256i\225=\272;\236\274@\211\217\274\256z \274n\334\204\273v\361,=\307\277\222=f|\212=\234\030\003>2r\315\275%\340\363\275yz\010\276*w\223<\034\371\026=Ez\331\275^\270W\275O\005\301=I\317\323\274\252m\311=\236\366:\275{u\004>\302Z)==\210\334\275\254\373\355=\023^\304\274&\361q\275\271T4\275 \341\303<m\016\230\275\202s\225\275\233\r\005>%d\307<\225\355\000>\367\274\325=\242\201\353\273\265r\302\274\3260\275\275\243OA\275+Oy=\024X\027=B\325\244\275\235\343\006\276SS\242\275\036\211\002\274\341\344\000\276*\255\321=t\203\240\275\363\222\323\273\201\315\346\275W\354\t>\005\004(\274\n\346.\275?R\254\274\260o\351=\216\003\327=\235P\327\275,\314\013=\036P\270\274\321\223\304=c\r\007\275\251\303\240\273\037\372\231<:-\262\275q;i=\276a\377\275G\243\237<W\314O=\370\241B<\314/E\275_\2151=(g\002\276\r\357\200\275\314\245I=]\362\275\275\200\345\323\275/bb=\026\235\346=kc\013>\371\037\363\275\r\016\201=\246z\314=\225\260\343\275:sl\275Q\031\246\274\2001\333=\027\002!<tX\013>\010\002\266<\235U\353\272\027\250\216<DL\222:\000\177\313\274\243\007\001>,>\210=\306 \207<\"GN=}t\007>~\342\213\275\366\033\3279B\210 =\365`\371=\023p\221=b*\225=\257\371\255=KC\017=g\023\254;\333\360\276\273,\261\231\275$H\237=KV\345\275\2577\000>$\013\';\313@t\275\202G\247\274\351{\243<\001\312\373<\272#\000>=\365\004\276\350\222\035\275!-\254=8\302\227=\312\204\230;q\275\340\275\000\2642\275_\367E=\017\330\261\273x\352\217\275l\263\276=`\235\002=.\217\362<\002\232l=\237~\326\274\231\224\n=,\360i\275=\354\377=\347\331\n\276\220)\334<\244\024\323=\204GX\275\242\005#\275\270\231v\274\340\314\013>\007\177\241\275U\362w=\003 \303\275[\202\376=\023\274\373=\253\334V\275d\326\316\275\222\244\366\275\255\316\360\275C\261\003=i\253\005=Q\024N\274\343U\244\275l>\206=\353\220\272=\245X\270=\264,\350=A\344\337\2758\234\347=R\021\226=n\242\342=\022b\302\272m\227\252<\252\326\313\275\246\351\004>\247\237p\275\334k\010>\344jY\274\255\272\035\275\0319\035\273\337\243\002=\273\277\004>\246\356\241\274e\302\343\275\244|\n\275\013\207\254=\351\227\267=|\3313<\231d\231=\255\010|=\226\207\277\275\260K\262\2751\020\214<\345\227c=\254JO=\342|7\275\240\323\273<j\271\177=\031\311\366=&3\005\276\230\334}\275\346u\n\276\253\274\321=\001\035\245<\254\223\254=\357n\220\275\230\346)=&I\006>\r\343n\275\'J\003>!\033\016>9\267\300\275\000\275\344=\203!\342<\210\227\272=\317\310(\274g\254\330=:\306\310=x\007\013>\206a$=\221\234\r=\304\010\354\275\246t\t\276\330Dq\274\322\311C\274w8\223\275\017\3215=[:w\275\300\255h\275\327X\304\275\250\360B=\252\377\277=\357\360\346;h\255\243\274d\332\260\275\200\211\210\275\333W1\275\\\t\201\274;\022\253<}\274\241=\355\262\345=s<\346\275;\016b;\322O\275\275\0343\006\276\353\311\"=jg\360=\'\321\014>\255\375\226=^|\337\275\223\355\035\275Ed\'\275\340\034\246=\034\364+\275<t\330=g\227\246\274\373\266\361\275/\362\353=\\\026q<N\276\341\274nO\260\275\377$\000\276\242\305\013\276\321\257\347\270\240\024\213;\032\211\331\274\261d\343=\272;\022\274K\351\206=\207\352\001\276\206\032E\275\0003(;\316``=\327j{\275\350\367\253\275\353\336\002\276\364\013\234=\210\304+=\221\267d\275\206\356j\275\252\366\223\275|\365Z=V|\004>\264\024\232=\267jt\275\211|\272=\377\315\212\275\244\037\310;\3234t\274~\016\303;##\250=!\r\000\276\361\313c\275\321Zy=\004)\r\276J\245\347\275\326o\234\274\215\322\332\274,\204\203=\322\360\020\272j]\216\275l\310\224<\023-\364\275\315\035C\275\275Ti=*\274\340=\000e\276\275?\347\264\275R@\346\275\330\034\300\273\243\337\037\275I\211\271=\321\275\007>+l\223\274\356&\002>\"\034\266\275F\304\n\275\250\231\360\275\265\357\354\275\313\273\274=\013\006\225=\035\313\311\275\217\t\360\275\225\345\n\276&A\205=q-5\274z\263\013\276\335v\274\273\327\"\300=v*\245=U\202\341=x\215_<\001H[\274\020\344\316=\252\275o\2746\245h=k\344\257=\"$\237\274\234\263\001>w\362O\275G\344\214\275\351\n,=8$\n>\240\377k\275e\212\362<\327\315\322\275;\335\224\275c=R=Rt\352\271\263|\336\273\255\201\300<\203\275\306\274\340\302\265\274\023a\203=2 \324=m\036\366=\367[\001>\373@\332\275\032\364\261=2y\307=\250\014\n=\266\350x=\014\277\235<2\034@<_k\234=\262\225D=\033\010\365\275S\260\347\275\224K\210=\335\313\212\275/\001o\275\307Tk=\236XU;\314\276\217=.\374\253\275$\353\343=\224\242w\274\365\356\300=cb\255\275\004\254w=\246\t\300=\314\344\233\274Al\200=\030h\010>\202V\373\272\237\r\254=\264\246r\274\253\037\251=N\344\340\275\323w1\275\245\370\032\275mk\245\275+#\'<\216=\211<\263\227\365\275\323\373\306\275C/\273=y+d=\331\230\014>5 \300\274\207x\303\275\262\007\007\276\"6\014\276\336K\255\275\"\346\032\273\031\246\026<.3\344\274\320\211\272\274\364\334\235=T\304\321<)\340\260\274\234\344\317=\317\242\316=Zd\221\274\303z\307=_\030\245\274\214:\\\275\202\005\211\275\241\323(=\032.\356\2755\332\260\275\311\3765=l\316`\275\271\363\201\274\3721\215=\240\360\363\275\226\">=G\022\343=-\002\277\275\3256\303\274\211\276\207=L\264\224=\334=k\275\334\031\373\2758\252\376=\236\357B\275\346%\373\274|\333\271<\367f\346=O{\204\275%\314;\275-L\377\275\301\3663\275\355Y\302=5q\223\274\177\236\313\275\032;\232=p\023\r<G\263\n\276-U\261\274\332\271\311=\347~\031\275Y\231\313\275\234\265\263=\346F\353\274X\346\203<\304\326\373=\357\322\000=H@\267\275\210\227\000>\374\224\360=\262\034\372\275p\324\313\275\22763<X\000\261\275\201\313\277\275\352m4\275\207\347\177=91\250;\251\211\017<\020\241\231=\"\221\363<=\356Z\273B\355\242=\324e\010=\222\340\317\275\033%\002\276F\260\255\275\360-\t>\r\2775<\253\352\365\275\336\337\377\275\321\334K=\340>\253\275\256u\367=&T\342=\364\261d\274=]\371\274Z\031Q<)\024\265=\342{\244\275\323\036S=r>\346<\004\272\272\275\252O\236=\021\222\316\275\254\320\013\276\221\201E=\310\311\253\275\267\"\342;\003\036\024\275G\374_=3\376c\275\232\341\316\274\370\216\002=\257r\337\275\325\237Y\275\212\275\030=\272\342~\275&j\246\272\306\232\220<\344\003\245=/\264\275\274m(x\275\252\307\230\274\252\311\352=\331pH\274H\005\005\276\232\t\020\274\310\232\t>\345T\344\275\025g\243\275s\235\323\274\245.\363\274\0251\r\276\177\372\035=vM\201\275\315m\323\275\366\325\206<\232\334\n>\375\021\000>\356\363\202\275\266\304\366<+\315i=\037%\320\275Q\222x=?\275\226=\377\355r=\233\2019=\377\214\323\274*\020(\275!\200\006>\022[\210=\037G\263=\2003\375\274wO\233<@\202\361\275:O\251=m\216\204=\326g\017=_~M\273\357\3332\273l!\310\274\372\356q\275\201\300\002\276\244c\331\274\374\263\304=\327\340\263=\346\203\214\274\363\003\265\274\253c\243\275$:\324=\231;\302=\266\271O\273Kc\000:\017\240\340=\224\224\000\276\252\336@=\267e\227\274r\350\007\276kp\207\274\001 \244=\tFe=\313\375\307\275\\\355\322\2750\351\350=\257\000\013\276,/\217\275\242\327\005>\240\005\215\275\224\330\322=B\0049\275\235\220\301=\261\251\311=\\\367\227=\001\260\266<\375R\315\275\220i\340=\234w\271\275\'\226\220=\014\270\236=\206\362\000>\360\001\235=\'\312\351=X>\301<\032\351\202\2756\227\356=\3674\271=.d\274\274B\207+=\351\370\312\275\275(K\274J\222\231\275<\377-<\027b\372=\235E.=\317\024\376=?\270\005\276\360\242M<\225g{< V\355\274\244K2=!\375\374<\345-\021=\320d?=.~\311\274E7\317\275\243 +\274\231U\313\275d\032\342=\276F\235=\010\325\350<Rc\300=\237;\224\2753\332\000;\307\254{\275\343\271\010\276\215\377\2067\263 (<\327\312\005\275v\372\271\275\211k(=\035A\242\275\245`3=\355\217\214=\261\266 :u0\016>q\240I= \t\300\275\034\000\256\275q\201\007\273\235,\314\274Z_\324\275\205\277\002>7:\317\274?\017\233;\030\207\217=v\226\210\275o\213\002>_\232\225<a\277\372\274\023\377\277\275\253\310\370\275\264E\346;\035\226\007>\260-V=\014\225\023\274\334\217\006>\220\260\n>w/\010\275\363\327\347=\324f\031\275Ac\271=j_\334=\227^\260\273\365\310{\275\237r\334=\236\177\211\275\"C\340\274\351\306\216\275\357\361w=)\261\227\275\2721\305\275\373\213\027=\026\332\000>\275\215\212\275\276)\212<3u\341\274\264\002,\275{\336\221\275\245\346\354=@\211K=\347\022\014<\306K\346\275\344\031H=\357\013\250\275\354V\003\276\\\215\271=\261P/=\3059\355\275A\010\355\275\346\376\036=\030\365\367\275\017;z\275<F\377=`\003\t\276\355F\250=\222\326\373=\374p\345=\220\337\320\274\004V\203=\2116\034\275\033\317\377\275\313\355\010\276\025\n\230=p\031\006\276\323\351{=\220\266\367\275^\227\207=\366\241\000\275\316\034\r\276\177\n\255\275v\376\276=\257\014`=\000{\216\273\215\017\351\275\3731s\275V\365\312=\252UF=\350\250\345<\326\220\005\276\003g\311\275e\026\003\276\"r\331=\3368\245=\265.\253\275\265Tz=H\177\032=L\031\262\275\333\212\207\275>\026\362\275\260\365\343<n\230\001\2760.\r>\250\216\217=\326\303\307=\313\353\226=\341G\364\275x\r\323=o\\\006\276\236f\203=\331\266\307;\343\221\t>,\262\225=Q\3744\275E\370R\275\231r9=\177D\\\275\326\324\000\276j/\322=?\202\330\275`\023\236\275\267\021\t\275{\022\333<b\337\335\275\327,\016>\301\372\001\276\331\334\322=\336\210\302\273\303\374Z\273(\270\270\275\320\346\373\274\351\303\275;\336\241\352\274/\017\364\275\255\017\362\275\000\225\316=<\235_=\004\005Y\275\007\225j;\213\316\010>\247\346\352<\254\244\375=\232\363\314<\225uV=\003d\303\275\270\261\202=\321\317\250\273\243\263\324\275\226\373{\274\352\226\225\275\321^\364=\341\262\317\275\302\302\007>\200<\320=\205\261\335=\201\231\304=\261lo\275Z\233\374=n\320\001\276G_\007\2737T\341\275\272\336\206<\344\245\020=\314>\234=\020{\257=]\325\021=kUr<b\030o=\036i\216;\031j^\274\020\353\353\275#.\362\275FMc\275h6\201<\017[\003>n0a\275\342gJ\273\204\353\003>\225@\246=0=\274<8I\351=\002Zo=?\230\302=\313\\\256=\026\354\033\275T\'\313<\025F\317=\275`0=(\223\006>\276\020\270=R\202\014>|i\306\275^\033a=\2302\343<\230\245\005\276\314\353\366\274\007U\241=\273\225\t>\026\310\204\275>\207\272=\327\221\216<\350\002\361\275\t\313\232<\371\264\347=t\337S\275P\214\265=\324\316\336\275U\304\370;-\227\325=\373\305v=*\327q\275\335\203\013>Vf\362=\325RZ\275j\216S=\223\372\031=\007\023\313=#\256\223=K\320\237\275s\361y\274\315G\263\274F\251\250=n\205\002=\203\363c\275\211\244\227\273=\3646=i\271\307\274gF\326\275\201c\026\275\376O\373\275\037;\242=\205\305\'=\"{d\273{\321\266:\264\343\r\276\273\345\370=\016\375\321\275j\311]\275\004Zh=\026P\025<{\361~=\273\252D<\035V\333=\312o\202=\222\326\321<\365\026#= \331\025<>\232r\2754V}=Oj\231\274\003\306\004\2765\253\205\275/8\342=4\206\360=\266\016\313\275\250\327\351=e\271\353\275Re$\275\346\366\263\275R0\341\275\323\212\316=\211wK\275g\374|=O\270\360\274^n@=n\245\031\274\264\350\020\274\002\020o<g\327\314\274\026\223\253=C\273\200=\\d\314\272\207\361\r>V\213v=\014\335,=\277\260\006>\014\210\343=x\037\205=\343\005\232\275\311\260F=/W\235=\t\353\010\276\\Z\003\275\205\322\244=\226;\357\274*r\210\275\303\2738=4\3652<\367\362\217<\362s\t>\377\221\n>FZ\'=\357\\\004\276\226\276\321<\324Y\345=\253)\371\275\302\250\266\275KE\242=\372tY<\220\014\202\274\261|\001>\031\365\246\271~\005\000>\233x\254=\362\332\366\275\304\330\350=\177\247Z\275~3];\204\276\272<\335\342\256=\201\340\377=\343<!\273V\243n=\225\206\030\275\304~\227=+N\230\274\342\314\310\274fv?\275\215~-<CG1\274\323\361\341\275\300\374\243\275\354\004\261=T\356\334\275\265\005\332\275\376\220\336=\030@\320=\177\325\004>\022\235\201\275\330\313\225=d]\264\274R\027\350=9\362\264=:-\265\274B.\303\275\270\346\n\276o\357m<\2356\254=\372\340\177\2754\317\223\275\275\002\014\276\300\336\342=\222\203:<~\231\362\275Mg\242\275\233K\214\275\256_W\274V\027\003\276\2763\334\274\205\332\344\275(\334\367=\241\204\326\275|%o\273d?\234\275R\343\355\275\321?\324\275=\210\354\275\320\211\361=+3\r\274\036\204\325=s\366\270\275\262\276\210<[\252\006\276\355;\251=9B\032=\"\215\257=,\315\003\273O\333\313\2751\233\301=\017L\276\275\244\243\263=\250\266\r>\317\375\345=\216\237\366\275\332\253\345\275\255\334\343=\2278\361<Y\332\300=$\'y\275\001a\370\275Z\037)\275\312\243\353\273}\333\034<\347\010R\274\335\361d\275\304\264\354\275y\205\257;\257_\252=I\355\276\274\030YE=e\236\315=Y\030\376=\275$s\275\245\366\260\275)\246a=\327\327\227\275\342&\317\275\331\365\t>\244\340\202\275{\375\243=\316\322\201\275\035-\300\275H\362j\275C\340\010\276\204\346\\\275\307&\016=\244\207Z=\022\303\010\275\243\024\367\272X\311\242=X\363\001>\336\":\273_\373\002\276n\226%=\017s\245\275v\211b=\225#\321\274Q\033P\274\315*\321=\273\304(=@\275\231\275\002\233\313\275N=G=\252\254\337\275Oi>\275\367\252\010>_\337$\274\321y\247=DN\305=cqI\275\337\210\326=\337!(=C\224\352=\260Hw=\037\r\220\2758\330\264=\200\341k=\370|\256\275\202\261\320\275\225a\014\276*y\357=\330\307\366=u\321\241=\260\342\225\275Q;\250=J\\\177=\263\035\366=M\311\373=z%!=]m\013=`X\342=\177r\026=\313P\226=\323U\301=\016/\303=+[\004\276nL\326\272\013\261\353\275\355\204m=\372\333\354=\213X\244\275\303\263 \275\242\n_=\345\362\246=+\202\t=E\250\202<\244J\007\276IU\013>\267C\231\275@\210$=[\365}\274\337s]=\314\305\206\275]a\345=\205Y\211\274\"\353t\275\032S\\=0\247\226\275F\320\022=4\201\006\276\312\234\350:\363\370\364\275cl\320\275\034f\265\275`\303\217\275\277\260\367=0\206\226\275\256\366\273=\250F\307\275w\004\361\275\200{\236\275\346\367\343=\364\3266\275\227.\252<\'^G\275}\202\346\275\340k\266\274HG\201\274;\222\266\275\013\353\351\275TO\315\275a\362\266\274hVA<=\306\201\274T\264\006\276(\323\202\274j\321\002>\203Nu=\266\227\335=\354\200\361=\334\354\325\273Z\310\037<iB\233\275M\204\225=$\245\275=\324o\252=%\033\251\274}\025\214=)\207\207\274v\317\006>\306\232\327;$~\243=;\230\260\275\036~b\275CTZ\275y\341\263\2754\325\241\275(\027\314;\210q\311\274\3653\376\275\267\312\253\272v)i=Z\375\243=M\t\t\275(m\274\275/\366I=\224\207\367=\227f\024=\373\327\243=\310D\r\276Y\326r=>\367\243=\271\217b=\330\037t\2752E7\274Y\243\255=\237\204\001\276\337\306\346\2758.\000>\216\305\007=\023\232\023\275\031\363\000\276\353\262\223\275A`\001\276mo\272=)\316\t=)O=\275\310\206\307=\272L\007\276~\265d\275\364\225A\275M&\343\275O\351\215=\013H\215\274Y\232\262=\017B\001\276o=\217=0H\250\275\270\\\005\276\376\241^\274s\365\267\2750R\033<\253\337.\275d\271\337=\252}\236\275\3360\261;\033\225\234\275\362\\\240\275\363M\227=n\214\n<-\243\370\275\347X\340\275\214e\250\2748\244\256\275L\370\277<\277|\275=\302\237\340;!+\237\275\353\314\273\275o\346\002\276m\261j\275\330l\332=\254(\016\274\213\223n\275cQ\r=\250\347\222=\331Ul\274\252\025\237<\213E\n\275\2629M=\251f\352<\267I_=y\330\236\275Ce\304\272\360\332\326;i(\004\276{\364\244\275\027\314\231=\304\016\300\274\351M\254\275p\"D=\344\030\007=\035Q\335=\023D\014\276\007\243\240\275\212\013\006\274\223S\005\276H\353E<\014\211\255:k\371\010\276\277\256\300=\306W\212=ir\343\273]\225\261<\317\234-=&\242I=o\362m\275\026W\t\274\303u\302\275\'3\242=6T\t\276Yn\274\275\005a\005\275c\331\363;\367R\323\275\321\004\n\276\335\322\337=i\253\336=\315\353\307\273\203j\211<\210\342\211=\203\274\001>\266\242\010\2764u\250=c\022;\275b\026W=\355N8\275<6R=\025\325\014=E\201k\275u&\243<\353\206\375\275\310\220\264\275Z\353&<|X\216=\307\361\276\275`\021\256<\363\366\337<\273\027/\275\337\320\317=\025\327\206\275\222sx<Q\277\372\274\341\372\003\275\356\013[\274\374|\345<n\304B\273\230\366\257=\354\037\016\276p\247\214\275\377Ne\275\205)\214\274\024\372\260\272\244\024c\275\n\026\274\275\341)\t\275\010\321\233=\251\213\273\275\245\251\003\276GJ\340\274_6\214=\004\364\331\274\320 \320=R\3621\275\343%\302\275\257\326\236\275\010]\315\275\343\210\365;3t\342\275:\216\375\275t1\311\275\370>\247\271m\026\227<\264\264\007>Cu\325<\010<\242\273w\024\215=\304\'\210\275\177\307\346<2\334\004\276l\353\332=fa\330\275\024c\225=\257 |=L\034k\274\036\360\227=\024\177\010<\364\"\375\275du\301=\227\010\353\275\212\203\240=\257\317\r\275`\235f=Ysy=V\2347=\210Z\r\276I\220\214=\323Bh\275:\226\311=&\357\244;\242\353\211={l\301=\207\305s=\365\245.\275$\373J\275B\246\302=\243\221\256\275\003`6=rj\001>4-\274\275\246\\\273=IY\240<G\234~\275\271\364\216=\0142$<\362~\233=!\200\334=8\'\\=/\200\235=\207\304\256\275\232\300\252=\244>\271\2751\263\014\276\357\311\347=\356\271\332=\250\036R\274P\232\333<\313\2657\275 \253\244=\320<<\275\024\r\304\275-\017i<\331U\260\275\351\\5=\275Y7\275Zxe\274\365\216\024<{\357\005>\240X\353;\001\207\210<ul\003>\352\327\001=\355\r\270<e\3531<\006\215\000>FX\255\274^\010\006>2\017\230<\014\210\315\275\333\204\345\275\037\357\340\275\217/\275\275\201@\354<\030\2426\274\315\030T=\313\326\235=\017\260\177<\265 \t=-\335Q\271\317 (\275\024\240\310=|\010 \275\320\037y:_g\221=w\310\'\2759:q\275\321s\334<a\234\006\276\321\231\005>\307f\361\275r}\257\275\365\302\215\275b\337T<\234\320\232\273;(k\275\340\026\232\274\350\030\263=\307\362\252\275\212\231`=\362\367\014\276q\243&\275=t\032\275\336\246y\274)\232T\275/\201\007\276\317T\003\276S\326\336=19\221=\224\256B=L\340\265=\002\035\230:\355\304\277\275\213\372\256=\\\205\200=\351/\240\275*^\272\275\334\224\346=\005\302\315\275\253\3670\275\223\264\257=\302\364x\275\n\374r\274\311\\\n\276\342\022\210\273\223\301\022\275D\325\021\274&\341O\274R\376\245=\271\266D=\226\357\\\275\304\032\201\275\332\255\223=F\307\006>\223\313\212=\356<\363\274\027\033;\275?\2276<\337\255\344=zH*\275\351\003!=&pC=\272%\226=\262\256\261\274\257\310\345=\267}\210\273\267\264h\275\202\372\253=XtG\275hY\271\275\256\272\374\275\241\2502\274hU\223\275A\000\325=s\r\337\273\303k\013\276\243\352%=\021\007\246\275V\270\242\275R\r\362=\020\254\334=\235\323\256\275\313\275\210=\242\355\271=g\023/<\363\247\220\2757\202\035\275\330\'4=\305\252>=H\007\213\275\016;\376\275xK\202=N\026\006>\247\303\013\276U\365\013>&\356\r\275\025\351\375\275\206\240\266\275\337\362\004\276\253\274\021\273\037&\016\2761-\200=\304!\365=\214\206\277=\326w\356\275\356\264~\274\340\2523=\341\215\345=N\254A=\007\002\200\2739\246\212\275\332\276\212\274\354\017\342\274%s\347;\022B\322\275\337\320 =\316l\377\274\016\335\177=X\325\223\275\275f\265\274\347D\376\275AO\346=\220o\331\275\315[n<\205w\372\275\236\337\246\275_\330\210\275X\317\361<-\027\313=\324\315:=\2106\302=8\233\272=?\266\203=\251\024 =\031N\n\276(\222\3159\006\027\014>\016D\366=H\214\270\275N\256\330=.\203\r\276\305\351\332<9\006U=s\222\356\274\336\017\201<\225W\014=g0\030\275\316\271\004\276\226H\006\275+V\210\275T\"\223=\r\330\275\275\205\271\332=\320\306m=\235\304\005\276Q\"Q=hJ\222=\201K\211\275\255z\237\275\nw\236\275\216\237 <\274\205\331=\352m\266\275\204\014C\275\245\000\374=8\231\004>l\247\236=\361$[=\322\270:=\331P\004>\210)\347\275\266z\364\275/\325\337<\247\257\322=F\340~\275\326\327\302=\332;^=K\331\004\2756H\t\276\375\016\221\275\023\251\031=\352\304\004>T\214\257\275\021V\253\274\375\">\275\361\327\217=\263C\317:7\263\241<\377\371\371=\377~\372<P\235\267=\323\257^=\216S\365=*\271\017<\342\023\027=L\365\267=\366/\364\273M\220\341=\375b\226=00c;\360\273\337\275\307\203\007\276\'\264\344=\264L\354\274\017o\241\275\364\213\214\274\373~M\274\"G\307\274\026\350\225\275d-\355=\023\201\014\275cd\321\275\034\371\340;\254\257\240=\360\030\256=\004\022\351<7\013\330\274\314\226~<6:d\275\r\200\221=\361\021\t\273\203\213\352<6\020\304=\357\267\314\275u\305\207;\204_\257<\251\333\273=\367\305\007>U7\352\275\030\234\205=\'\217\331<o\322\014\276o\026\337=\232\240\004\276,\220\244=ddm=\230\016\272<?\262\316=\273\327\001\276\313T!\275\253nT=\007\234\200=Y&\364<\261g\246\275\002\344\265=4q4=\375O\246=\207J\276=\303\331\274\275\362\227\214;\232\322[\274\315\247\374\275\366\340\010\276\355o\341=\242\0163\275\334~M=\2474\014>_^\371;v\016\t\276l\005\367\275&\000\265\275\230\321S=\365\244\366;\256\213\356=]a\363\275\321\225,=p\'\274\275\333\265\243\275\001\001\217\274\264T\221\275:K\004\276y\214\346\275\'\257\353\273\363\234\001\276yG\200<W\204\004\274iC==q\220-=J\233\005=\324b\315\275i\362\002\275B\020\274\272\226\330\324<\266\216\336;\002\'\336<G\037\373\275\202\036\321\274]\017\036=\355\332\277\273w0o=\307$P=k\260\203=FX\235\275H\3371\274v\3543=\222s\020\275\201\n\340\275I5\273=\253\207\006\275\021e\213=\253I\367\275A\350\001>\215\016\003\276>\250\236\275\272\362\n\276\007\005\351\2759\036;\275\252\213{=Y\027z\275+\303\341\275_\211\357\272\033\202\226\275V9\033\275\271\225\014\276n=\214=\261\355\244\275;U\353=\252}\014\276\006\360\241\275=$\003=\320V\366\275u\352\252=\375X\262=\321\253D=\237\370\017=|\227\361=\037bo=\024\310\000\275\240\005\273=\362\001\325=!\201\223=\375\221\362\275\003*\336=\'P\234=RN\\\275\270\226\014\2767a\013\276\371U\267\275\262\341\206=\0339\231<\0209\300\274\376\026\345\275k!\006=x\257\206=\225\024\314\274jt\237\274\250C\360\275\013`\033\275\241\365G=\217Z\331\274\031\353\001>Z\301;\275\242\323\002\272\031\212\301=\246_j\275W\335\276;v\270\301\275\000\343\t<\362\000\227=\325\2538=>\254\t\276\217\003\034=\365\021\236=T\367\r>\356\246~;\266]\210\275\271w\021=\303\245\216=E%\235=\226\341\221==Pi=\017l/\275j_\265\275\245\307S<\2229E\275\276\240\262\274r\261\267\272\267\000\246=\025Q\364\275\220\364\351\275\275\003e=\005u\312\274\246\372\034=\356\323\276\275E\321,\275h!\265\274\234O\004>\360\256\366\275\006\021\346\274$\010\253\274\224\251\177=\300\022\001>\312q#\275\201\205\331\274\346\014\321<K\001X=\275\027\236\275\234\352\357\273\330y\221\275\022\016w=\234\003\206=&\354q=b\010\363=R\311\332=\007T\270<$\242\317\275\302\316\330<0\366_=\312\034\014\275U_\266=K\243\213=\0177\317=\215\276\226=\314+\236<\177\022\005>\001\324\352\275/:\211\274@\273\353\275\0333\016>\227\242\261\272\342/\201\274]V\035=\300\330\003>W\234\005\275\227\020\353=\2344\275\275\250\366\211\275\216\240J<s\323\305\274N\035\327=\236\333K\275\016]\251;\216\277\317\275\273\211\323\275\323U\201=\247v\220<\332+\325\275Ky\254<t>\006=\317\363\376=\337\272\244\275\352fl\2759\345\003>\026\341\027=\257%\307\275\201?\302\275\224\305\t>\200\314\251={\332\300\274:\n\234<\270K\217=\213\264\371\275\313`\253=\n\213\344=\303\034\205\275\302\205\013\276\"\311\006\276\2760\231\275\307:i\275\333\241\303\275\305_t=xm\363\275>g\301<\252\376\214\275&\303\224<\025\025\346=\310#\310\275b!\314\274\026\330\251\275%\251\002\276\030\325\276;\361\357\231\275^V\014>\357+\253\274\201\210\300\2750\353\030<i\324\356\274\251\331\226=\334\375\023\275\\\202\005=I|{;\303\026\014>\265\367\374\275\300\"\260\275C\205\251=\247T\207\275h\262\255\275\341\365\266<\243\213\206=\006\217\377\275\235\270.\275fH\336=\0033\250\275\267\215\200<\234\355\006\276\322\323\226\274\321\'\256<\006\253\312\275%\0377<\033]\n>\362\245\372=&\216\313;R\362e=\353\226\266=4\316\216\275)a\323\272\010)\251=~w7\2759\262\005<\276\233}\275\033o\243=\356\233\341=]\245\302\275P\370\233\275\016\007\366\275\000e\334\273&\360\000>\265\225z<\306A\237\275\006\214\007\274)N\322\275:\207\334=\304f\263=I\226\273\274G\312\305=\010\314]\275_U\354=+s<={\013\254=\023F\232\275m\r\202=\301y\004\276\201\024\221\275^\030\004\276\031\251\320\273\t\030\207<A\017\367\275cZ\312==d\276\273\324\313$=\352\030F\275\317*\032=O\242u\275\3105.<E~\024\275\n;\263\273\355\005g=Y\373\000>\324\014?=\2144\362\2755\203\223=\271+\\\275c\334\002\276\213\274\216\275H@\007\2767\270\372\275\377\250\003\2766B\000\276\224\304\363\275vY\375\275\223\223E\275\0015d=9\032\374;\034\201\250\274E\204\343\275\247\336\223=\374\316\261\274K\227\022\275S\355K=~\232\010\276\310c\362\274Q\037\033\275\224\311\200=L|\231\275\241p\311=\002\026\337=\243\231\324\274\005\326\220=[\264\327=~4\203\2750\244\360<\257\337a<8<)\2758\026\306==\034\231\275\233\302\367<\007b\246\274S\223\003\276\234\220\212\274)\372\277\274\0108\321=\255\020\212\274\234\260f\275\367t\006>A\211\001>d\273\320\275\222z\251=\347\242\332\274j0\005>\347b\211<t<>\2754\032\336=\254\330\321\275y\213\035\272F/Y=\001\362F\2757\005\354<\277\243t\275nh\361\275\207\227\366\275]\335\003\276\312\316\212\274%\344T=Ff\010\2767\262:=\302+\226<\214\230\302\275\252\221\n>=\355\243\275\275\353V\274\341zs=\2161+=\222Z\274\275\266\214T\275z\204 \275?\340)\275\236\251\177\275\241\023\312\275\212\200\217\274\224\232\221<\203U\225\275N_\260\274\2762\232=[\306,\275\343\026\376\275\0048\230\275\030\277f\275\332V\026=4J\361\275\326\312\356=\373\352\333<\207-\246\275g\331C\275\272\034\023\275#\t\017=\365\311\223=\375\000\263\275\266\272\001\275><\275<cv\367\275\346\316\303\275\330\207\222<\334\026\217<\277Ml=\265H\251\275\004\303\003>\007\303\t>\314\026\320\275e\324\233\275\\\256\320<\317\216\004>\277h1\273\031HP=\262C\277\275\227v\210<\2379\214\274H\344\252\275 0\347=\261Q\306\275Y\354r=*\375\361\275E\331\313\275}[\362=\003P\225=e\233\211=\177\260\266=\237\203\211\273\260\363+=\310\3453\275K)\362=\317\353{<\334&\034=Xw\364\275\207\223\241=\262\352\311\274I \336\275\0360\335\275\022\253\206=h\317\326\275\"\250\014\276\321\347\002=\024\215/\275o\374q\275\261g\204\273\005H\252<\313\334V\272\271`\240=Jn\267\274\367\234f=\351\372\357=\355\322\262\274\314\311\357\273o\026\034<)\310\366;t/e<\323-\357<\240\372\255\275\263\330^\275B|-\273\323\320\036=\276\317\272\275D\233_<\316\317\274=\330\370\276;\233,\006\276\261\345\371\274)9^\275{\354\345\275\225\374\205=+\200\226\275\221r\333\275\331\0321\275\3010\355=md/\275Y\311\357=dx\265=S;\375=\310@\\=H\252;;\232\t\336=\330\265\363=\'<\031=\360\235?=\320\002\025=%\215\276<\357\035\343\275\341v\210=\325\276\006=!\345\342<Ae\033\274i\030\257\275\233\326-\275\302\257F\275\345\215\312\274\300v\327=\344\212\215\275\001/\246\275\357D\261\2748\\\007\276\266\260\353<R\033\001>G\334\232\275\243t\243\275\304\377\324\275o\304\224\275,7\207\275\275\244\335=\201\366\n\276\313\271\000>\252\315\325\275\267\320\321\275\257\222`=,2\013>Qz\223=jk\210\275\207H\205\275\037-E=-\337\t>S-\252=@O\034=}A\327=ix6\275\362\332\340=\221\226\002=H\r\201\275P\363\216\2752\344T\275\226\275\345=\234.\202<#\022\233\2753nq\275 \210\023=\017\264\002>\031\377\225=\335\005\345;\327\355\330=YA\007<\362\200\331=\355f\300<\322\374P=\026\206\345\275 \030\261;\222\0072=U\'\002>\272\2541=\277\360\315=\342\224\364=T\2262=Y\326B\275\355\377\344;e\242\354<\345\277\023\274\227&\250\273\257\305\036=\207\366\013<\227\235\013>\224\310\257\275\032\020\016\276\310\212\245\275\014\302\235\275\272\230\251<>~\361\275\271;\001>\222Y\021\275+\244\317=\017+\372=\362\006\364\275\343\364\324\275\204d[\275Q\315\354=\233\"\335=\356\t\332=\317c\016<\310\007\254\275\034=\330=%*\257=i@\264=\276\310\222\275H8\204\274\272/\365\273 \335\325=\240\267\020=`T\001\276\272\\\304\275\305\202\215\274\363U\350=\177\223h<\376\226\341\275AP\326\275-\025k\275\242X\252=\324\356\231\273\374\302\367=\227O1=\246\333\t\276\267\234\274=H#\311\275%\022\236\275\367\233\323\275\371\375\326\273\356\022\313=\006\357\330=-z\265\2756\r\202\275\324#\322\275q+\t\274\371o\265=x\023\360=\027\213\356\274\016\242\331\275\027\342\r\276\365\027\007<)\377\270=7\236\'\273\205\210\205\275\371\010S=N\216\227=\251p\202=\n\251\242\275\214\r.\275v\347\306=\376\267\004>\312\261\t=<L/=_#\016>Xj\265=$\254\343=^\242\321=\214=\274\274Vq\257\275\247\213\212\275\224\250\214=\234\371\270\275\306.4=\033\200\227=\3256\366=\233\302\355\274\346\221o\274B\361\333;\361\341\024=\021\214\254\274~\263x\275\345\211\032=\245\2110=a\014Q=\220\205\217=]i\307\275\354\332\276;\022\024\004\276\030G\275\275\2143\306\275\213\307\357\275\243\360\362\275\213`y\275\206\231\030\275\n\203\222\275\313!\231\275\250f\340=\367\315<=\331\244\323\275\';\375=\252F\004>PeM=\314\302\004>T\252\353\275\365\033\214\275\275,~\275\261\273\366=\221o\212=\361R\220=\232\010\272\275Y%\010>\346/N\275\335M\213\275\215\210*\275\016i\334\275Kd\214=f}%=\'yy=\326\303N\275\273\256\222\275\303\373\341\274\"8\321=CY\022=F\224\347<o[\025\275\260\214\006<\263\260\031=\2736\313<\322\377\177\275\3238\260\274\365\314\267=\371P\361\275_*\314<\322\220)<\243\373\240<\005\005\250<\310#\276=-E\240\275D\230\375\275s\272\274=o\316\226=j4\302=\245\230\006\276\025f\354=\340\265Z\2758v\227\275)n\256\274\362D\002\276\374\256T\275\304\360\351\275\'\255\351\275\247\203\234<\210\374\353\273\354\2610\275\3631\210\275R\362&<\334&7\275i\274a=O3\010\276\270\3547\274\253\262\014>x\347O\275`}\362\27552\223=\007\375\212=U\335\007\276\016\266\000>\233\251\262=2\240\274\275si_=\366Z\003\276\340)?=t;\025;\035\333\333\275\231\256\210<\302M\354=\203\300Z\275\270\261q\275\306\205\342<7{\367:m\203\323=\225%\364=f\021\232=\032\310\014\276\324t\033=\330\177\t>\214\317\325\275SR\023=\352\302\300\275.p\007\276_A\001\275\244\2258\274\267W\251\275B\3631<\351\"\233\275/*\017=\2461\256=8\277\222=\251)\223\275\203|\356=-\035\334\2755\354&=F\350\316\274Rq\224=e\007\246\275g\202\010\274\225+7\275l\355\000>\313z\305=\321,\361\275\337\244\364=\245\031\001>\217\324\006\276\024\014 \275\324\206w\275\333\306\r\276 P\t\276\276Sr=\301\262\251\274\213-\n\276\254\255\013>\223\303\236=\326\235\375\275RgC\275\373`\223\273\327\362b\274\235\014\321=\237\t7=\325\023\013>Sd\215<\217AA=\352\272\236\275\271l\213=\306\267\221\275D\031a=N\217M\275\322\007\355<\"\264\251\275\342\203\206\275\344$\252\275\221\314\233=\337\207\343:\350\n\365\275\001\222\343=\207\377S\274m\315\213=\014\336\216=,\006N=\205\3175=\017O\n>B \374=\352\336\201\275\037\0079\2754\026I=\373\005\360=\203Q\005>\222\351\233\275\276\361\014>K\315\251\275k\2612\275\224\264\220\275\214m\225;\021\354\342\274\314z\225=\211\340\003>\035M\273\2724\264\241\275\326\222\350\274\006\347\377=\223c\251\274\313\027\350=\026\227:=\377GE\275\265\307\354\275\257\315~\275\321\027\230\275if\353\275\335]~\275\251\316\004\276\003\031\210\275\252\r\227<_\372?\275\242\226$<h#\376\275\347\201\016\274\274\276\352\274\251]\262=\315\016\013\276\210\0361=\322\337\231=D\010=\275\313\336\363=\007\n\006=.\204\352\275\351w\r\276\246\216f\275\242\006\215<\342\036\n\276\354\010\204\274\032*\357<\252\010\211=a\363\243=\300\017D=\312\2568\274\036[7=\317\021\234=BU\320=\016\322\216\275y\326\244<\0072\004\275\222{\n>\301\244\255<J]\215<\321-\201=\226o\013\275\261h\340<B<\265\275\217h\222=@D\013\275\001\025\201\275\357;#<`C\203\275&\243\246\275\224\014\361\275p\271\344:\332o\273\274\242m\371<\227f\335\275\263\007;<\\\035\365=\377\376\310\275e\334\264=\323\026\000\276f\003)=\316$\333=\320!\264\275/f\277\275;ir<\021\212\010\275\340\213\313\274\231H\222\275\370\014\004>\323\026\251\275\323\322\227=6\237\343\274j\345\376\275,\232B;X\256\310\275a~\346\273m(\216=w\216\365=y`\035\275\357\004]\275\254\273\365=\331#m\275D\010n\2750\263~=\230\304\306\272N\222\353\275F\265\301=e\025<=\024\303e\275\206\n\351<\017f\"=\250\355\014\276|\370n=\325\030\320<W{\264\275\250\312\367<\202^\n>|fw\275\357\231K;>l\264=\\n\365\273\002\311\020\275N\365\002>I\266\374=\302\317\317=\rX\354<\006>\275\275\302$\366\275\016t\341\275\355}\232\275\017^[\274\243o\255=\222(\003=`$\305=Y\030\243\275\242\352\215\2746}\270=lD\211\274;t\r\276\243\271\232=\311\225\207=\235\354\230=\231M\340\275\355g\253\273\000\273\371=\357a\213\275\226t]\275r\r\275=\274X\324\274j[c\275\344\035\231=^c\246\275Z4\352\275\220QN;\252\202\003<\004\374\221<F6\324=\322\3002<\000L\r=\271q\344\274\360\016\n>y\030\232=w\273\t>_WM=}\022\223=\342k\236<\354\307\257\274\204$\354=\351\254f=\200\204P\275\371n\240<2\243\005>\367\322\262\275J\232\260=\263\026\014\276\327\331)\275\263\334\373\273\244\rR\275\037\216k=\322\272\214\273\032`\204<\246\001\364=\227T*<U\006\034\275\375\276\001\276\2237@=x_\t\276\tU\217=\233\3256=\232\226\274\275\374\032\277;\220\024\226\275\252?\t>\353\230\235=a4\250\275\017\242\356\275\357\250\367=s\256o\275\'^\204=\301\004~=\263,\r>\373\2026=#/\306\275\205\323\243=\264\344\023=\231R\247<\234\265\270=\000\017\253<\334)A\275\023\3368<o\263\315=gqL\275n\365\013\276\226y\003\275\026K\212=!W\201\275\\\352\224=\307\225\000\275\321\376\r\276\021\310\205=\250\353\025= \241\036\275\251\205-\275T\370\315;\031\035\362=T`\261\274m\373\330=&\017\234\275\024\266\360=\201{\206\275\370\361\331\275\023\263\024=\366n\302=\322\261\007\275qU\326\275\001\016\212=\302\263\020=q\226\005\276\204\335\330\273\034\251\313\273m\247\202:Ll\353\275\242\334L=\355\247\320=\211p\315\274-\251\230<\027\341\235\275\233\033\356=\314\355\r\276Y0\216=_}\203\275\024\232\314\275b\3637=\027\226\277<<\002\361\2752\275\335=\375\240\215\275\270\364\226\275\276\231\371\274\275\333w=\317\224\013\275m\342\003>b?$=e\031\235\275\226\350\373=\374`\223\275Fq\303\275c\020\361=\032\240\254\275\020\220V\275\222\265\315=\260m\r>>\002\365=\232L\332=\360z\001\276bR\305=nF\252\275\035E\246=\237\275\030\274\331\005w\275\316\242o=\334L\217=\360m\254\275O\000\301=@\320\351;\013\331\301=\200\t\333=\3730\177=r\361b\273\010O\273\274\220\023\003>\316\021\263=\001[\004>$\223%=\372\232T:\2721)\274\373j\317=\267\030\r\276\211\322\322=j[\353\274\300\307\273\275 \\J=\274\236\331\275?&\004\276x\335\257<o+s=\n^)\275\230\231\200=>\244\016=\0164\237;\022\307\303<\251|N<\006\255\335\275\007s\334<\323\331\236<6\335\377\275\032\341\233\274\204\270\034\275cWL\274\317\037\375\275\373\354\000<\016\000\316\2739\327\352\275\'\324\2269?\330\232\275\307\312\003\276\366\2616\275\037\352H\275\t\324\326=\254\020\255\273\232=\372=\342\362P==>\032=\325O\241<\304\345\234=e\033%<\227\327\317\275\026L2;}8\372\274\257\304\002>\331X\374\273\010\260\220<+\201\373\275\324m\225=\'\013\340\275s\356\255=8q\263=Yn\337=\021\260`=\256\334\323<g\230\324\275@\360\'\275H\344\362\275,+\334\275y\024\306\2757\210\216\275.\345\010\275\001j\265<\022W\207=\310\347E\275e\315\251=\252\302\242\275\232\202\t>\353\304\263\275\353[\000=B\346\372<\025\204\261\2755\276\367<\360\360\342=\n\240\321=\030RO=K\243\010\276\314\374\335\275\t2\226\275\000\213#<\026\202\263\275cW\273\274\321%\277\2751\233\275<\211}\010>l\215c\275\014h\227\275\356d\243\275\004\360\032=\352\025\002<\347\007\343<\360\221\245=$X\254;`\3220\275\224 _<\223\310\271=\310\255`\275\274e\352=\204\313\332\275\"h\262\275\354\204o=\202\246\006>q\013\372=\205\230l={%\002>oY\'<\027\233\350\274\227\360\267\275\263\363i<\036\014\013>~i\341\275\337\233k\275\037\331p=+\322\240=V0\231=\206\023\377\274c\356\363=\215\264\244\274\211\256\264=]s{=\245Y\014\276%\276F\275\350P\313=\334\337\034=%\006\335=,\321\215=v>\357=\372D\365=\001\300\360\274\207>\224=\346B\347=\313\263J=\271\222\201\274+\003\3608t\007\301=}\260r=ue\314=\234\222i=\343-6\275\036\302\324;e\000\261=\214\244\275=\350\217\365\275\304\201\321=:?4\273]\323S=C\374<=\301\"\306\273\210\265+=y\370\256=\236\221\374\275\361\203\317=\215\333\227\275#\007\013\276\341O\203\274\342\324\207=\364\003\243\2747_\r\276\311\360n\273h^g<%u\r>0\325\r>\\\367\221;\363\360q\275\204)\357\275\340\307\221\275\271G\362=\031\367\355\275\352%\264\275\340\331\206\274H\267\n\275\r\257\332\275E\t\347=y\263\014>_\270\356=De\213;\322\\\231<\353\234H\275\254\234\372;\245\002q\275\211\304\367\275k\256\370;\232\305\243=\252L\351=\310s\003>\351Uc<s\370\177\2756Q8\275+]w=\345\340\351\275e\250\277\275\326A\356\274\177\222\375\272\235v\241\275%I\013\276\262\314L=p\340\335=\327\272\352=\306\310\\<\262zI=q6\303;\205)\003\275\377E\252\273\321&\266=\336\020\216\275\237\337\272=\346\004\234<T+\007\276\260 \";X*\251=0\301\225=\217\210\210=!\027R=Dj\202\275\343d\260=Zf\376\275\341\014\330=\305\177\016<\222\2253=\220*\007>~\013\021=\037J\371=\316\251\221\273\007\334\206<\252\220\247\275\272x\032\275b*\246\274\203\221\221=\366\241\302<A\246\210=\201\310\227\275\341\217\306=\256\231\346\274\303\025\225=\2431\264\275\322\230\000\275\232<\277\274\204\"\240=7*\334\275\\\325\251\275\352b\353\275\034\244@\275\343\000\263<\203\375P\275f\005&<\326\233\302\275\022&\242\275\266\377\324\275\261\343\010\276{\024@\275U\372!=s\240\232\274\207\r?=\261\305\314<\246$\220\275\002\326\215=\376\324\256=\267;\256\2753Q0=\030b\326=N\343\236\275~\033\326\275\310|\350\275\300\250\224=\227\007\253<\267\025H\275\27088=\307;z;\257\302\374\275g{;<\\\234\246\275\210\344\t\276\336\000\265=\014\224\375\275\360\211\354=P\215x\272\335\222\341\275#M\323=:%,=\215;\211\275\003\236\211=C\336\365\275\276o\301<<\007\371\275\3153\003\276\010x\t\276\365C\005\276\276\372f<\223K\373\275\2072\030\272\364 \257=\223\221\033\274,\371\r=\355b\273\275\332\020\302=\206p\010>\376q\242;\025:\205\275\315\346\247\275\020\351\353\275ss\236=\r\204\326\275s\276\215\274I\034\222=\027\033\337=H\362\346\275.\255\225=\275N\270\274\023](\274d\350C\274\216%\202=\251\020\r\276\003:\212\275\264\343x<\320F\022=\267A\260=\242\316\247\275\rV\360\274{\241\346=\324\r\276==\333\007>\337B\321=j\322r=f\220]\275\236\332\300\274\177\330\356=*>F\275eY\235=\260\317w\275\214\324D\275\366%Y;\007L\215\275=\326\033=\271\211\002\275\235\316\225=\233\003&\274n\306\013>wp]\275\261\243\000\276\351z\314\275\305\257\014\275\305\336\314=\360\230K\275T\217\331\274\267\224\305=k\355\362\275\010\030\363=\332%\320=\325y\312=\000`\014\276m\230\007>\267\212!=\356\261\214\274\266W\231<\2659\373=m\030\251\274&\260\352\274\034z\374\275\216\345P\274\302&\374=\2735\033=E8\025=O\371l=P\263^\275!\240\356=\257\320\250\275\306\021[\275{\376\223=O\340\357\275\370\225\226=\241\345\320\274K\342;\274\0026\356\274\371C\033=\tT\000\276f\r\'\275\361\021\000\276,\360R:\247O0\275(\253\226=!\006\024\275h\031\222=Q\364\037\275{\2324=B\023y<K\341\374=\r@?=\204\034\265\275|.N;\006h1<\001%\327=\255\255\203\275\013\320\321=-\213\264<\036\366\345\274\316\273\364\275\3334\325\274\027\260F<\206t\314=\024\250C<\236\351\362=\214%\237=\330D\320=Rf\t\273^x\301=\357\023\233<\277\020\232=\257\357\224<:\017\213=\315{u\274\007\375%=d\277\007>\004\'\200\275o-\255\275`\203%\274Q\343\265\275\314\351\003\275\342\361\370\275\303\225&=\274Q\272\275\035\212\363\273o\214\263\275\203x\327=ec\350\275\345s^\274`X\234\273\234\350\226=\355\035\016\276A\272\321\275\256$F=aB\242=\020N3\275\320V\340;\024\n\260\275s1\255\275\261\303\251\274\237\345\215=\233F\316=\215\023\374\274iB@\275\244\275\001<\354\265\342=U\002\373<\005\270\241\275\202\342;\273\336\211\t>\215]\315<Y\315\000\276v|\303=\277\203\324\2753Y0\275\314\244\346\275K\031J\275&Y\207\275\353\005\216=Z\001\001<\242\002\340\275\305\2769\275\275\301\221\275\267{\000>\211\275\216=\031\243\030\275\362y\225\2753\r\035=p\256\257=J\305\242\2759/\221\2746\252\360\275\234\220\276=>\250\334\275/\001\211=\251\254\315=\224\361\371<\001\237\005=C\332=\275\325|&\274P\013\222=\220\034\002>\310\254\262=\0325)=\035\247\266<xS\267\275\262\351\314<H\315\364=\367-\256=\366\214x\275\242\314\242=\021\305/=\n\271K\275\357\305\255\2753\316\002>\300\021\001>\350p\374\275\374\367\250\274\362\324\t>\376\246\204=P\007(\275\226|\371=N\354\251\2754\272\315=\304\366\301=\014\334\265=\236\255\214\273\307\342\316=\034\000\265=\250\326\221=M\211\242<=\301\n=e\030#=#\035\272=d\364\377\275%\010\022\275\327\261\332=3\261\010>\322H\215\275\375\207/\275F2\013>\310\244\026\275\367\327\256=\306}\027\275\253W\216=\255H\314=\261N\006\276\315d\r\275Q\254\220\275\353&\'=\016/P\275\032\316\016</7\211\274\244X*=\236\330\311=\263\242\361\275\2368\344<\202\262\204<?\240\003\276w\234\234;\254\032\275\275\005\274\264=\303Q+\271\357\313*\275\251\202\371=\364$M=\263L\260=\353\001\364\275xf\235\275\275\340\340\275&\306!=w\346\256\275pZ\274\275\304\0026:\314\271\'=\r.\354\2750\204\337=7G\271\275\232\220\005\275\005\322\334=\346\215\331\275\177\245K\275\270\302\002>\247U\203;@\224_\275\240\361E<u\341I\274\032\271\244\275\007\265\206=\240VQ=%/K\2757%\340<H\177\276=8c\330=\343J\330\275\210\276\210;Tc(\275\277ro=\302j\267\275o\375\324\274\3638\342=\200M\331=\034s\372\275\337\331\367\275\365\2741<\200[\344\275\034\221\356<\225\227\331\275O\365\001>`Z\355\275\314\035M\273S\220F\274\017\210\270=\351S\206\275\2477\351=\363q\351\275;\227~=\274\343\221\273\270\215\374\275\001\307\234=ANr<\211\267\000\276\300\322\303\274O\017+\274Q\232\217=|\326\006\275\311W@\275t\241\001\276\2639\325\2757S\212=X\202b=\034\310%\275\'&\271\275~I\207=\263\\\n<W\345\371\275\251\335\354=\332\363\232\275\240\201e\275\033){\274\333\014g\275\346\242\237\274\246+\016>\031d\343\275R\332\321\272(u\241=r(\037\274\2749\306<\031\027\353\275\222\022\303\275\032/\344\274%\265\236=\346\'\317\275\236\023\277=\361\274\275=\330P\374\275\024\2210\275Al\271=\276M,\275c|\337<\227\3006\275\312\335I=\324\247\200=\361\355\351=R\006\277=M\016\344=%\267\013=*i\243\275\n\335\231\275\234\342\315=*>\355\274\000\033\232\274\236\343l=W\316\270\275\003\353X=\305\344\257\275*|\373\273\316Y\366=\351\021\205\275\245;\370\275\372]\302\275\356\204J=\270o\271<\374\036\272=\257\2430\2751\230\272\274\034\354\232\275\035V\364<C\341;=\226\344\244\275#>\351;5\275\313=\205\310\005>\027&\321=\231C\010>6\216\202\275(\237D<9\200\372\275\335\367\007>\014$\013>\2412Y;6\262|\275f\017\275=C\230*<\357;5==\356\207<:\265\313=\224na=#w\237=w\026\022=\241\003\367=\277 \213\274\230\336\342=\367/)=\020L\312<\203+\310\275\314\362r\275\251N\005>\262\355\247\275?\345L\274\357\303\317:\376M\t\275f\230\356\274\017\023\337=\307\365\317\275\1773\020\275\360\210\237\275)\260\013\276\236\377Y\275\342Bp\274\322\310\366=\004S\305\275\336\231\276\274\227\007\005\276_\033\321=\0162\310\273\262_r=o1\320\275\253\026D=\200\211\220\275~l\262\275\tf\036<\275\034\301\275\360e\236<\250\013\324\274i\235\n=\200\315o\275\230\030\225=\3703\246<)\202\206\2750Jz=\376\0204<\240\003\227\275\024U\374\2750@\271<\235\210\341=c\375\277=)\254\236=M\'\020=\250\231\306=\354\370\263\275F(\322=,8\177\274\327\363\302;N\200\025=X\315\n\275\227\270A=kt\361\275\264\026\353<\341V{<\360J\233\275#\203\341=-1\202\275\303\037\r>\230c\346\275\336\213\203=n\2070=\230\336V\275\251\354\337=^\252\006>\027b\363=\361\335\225=\210\t\007>\211\315\005>\307\253\312\274#h\212\275\270U\321\274\003\r\003>@\314\362\275\210\262p=\360!\375=\246o$\275\223P\304\275\323\236\275\275\027\345\327=\002\220\345=\217E\277=\337y\377<\352\325\270=\370g]=\365\211\315\275QX9=\241\242\001>}wK\274\243B;\2748\237\233\275M\232\n=\314\221\n=\217E\251\275\354\352\264=\033\254\023<\205\333B<\270\327U\272\260\010\242\275\034,q=\353]\261=f\315\203\275\356_\245\275\037\227\253\275\032\333\247<\257d\367=GQ\001=\323ep=\267%\247\275I\220\265\275;\365i\275\\X\t\275\276X\306:Q6\026\275\316 \237=W|\200\275\204\206\307<\037\3553\275e\007\n\276\2076\257\275\272\317\310\275G\203\214;\033\005\303;{p\013>e+\000>\371K\337=\034!\317\2755\024\352\274,Fr=/\220I<\006,\332=L\341\206<\233p\230=?&\035<\310j\000=\216\377\214=T\371\277<\351%\227=\363\010\236\275\000\356\314\275\377H\203\275/\227\032<W\205\003\276G6\323\275@\025\363;\272\037\001\275e,\262\275\021Y\313\275\322\337\322\275\361\353\257;\265\312\325={W\306=$I\n>z\363\316=\251\227\236=\007T\004\276\227\375\312=\032\361\360=D\322\264=\212D\3559:\003\357\275\014\001\335;O\227\334=5f\000\276i\205r\275#\232\312\275.\273\253\274\020\335;=\305\371\256\2755c#\275 ]\235=\252\234~\274\203\313g=XC\250;\355\031\205\275^\240\027=ip\326\275\022\026\241=T\235\260=\375\267\305=\371$\031\275\320\242#=\264F\344<c\336\255=\335\260\017\275\323\307\254\275\355\302\014\276<\300\315\275\214b\310=\226\327\010>\235>\257=y\222\274\274\200\301a<\004\355\007>\306\017\007>z\241=\275\017\020\324\274\216\034\250\2757\214D\275&K\300\275w\267\346=\010\321l\275\000\024\202\274\354ED\275_\230\013\276e\017\361<\324M1=C@\301=\331\336\265\274\327\"\365=\212h\376=*\377\305\275\376\304\203\275\2177\235;\354\337$\272/s\347;\201\270\230\275\032\220Q=\311f\345\275+\343\301=M9%\275f\245?\275\004&\000\276$d\246\275\225,\260\274R\276\211\275YR\t\276\262z\000\275J\225\016\273\350Cg<\340s6\274e_|=\234\210\003\276\223\266\241\275\332i\252\275|^#\275\374\020\312<O\262\364<I)g\275!\303\346\275\202\210\001\276\233\203\320=si\264\274\"r\363\275\001<\300\275I\243\322=]_\370;P\371f\274/8I=<\202\343\273?\304\262=\"\240\324\274\326(-\275~\216\t\276\007\243\373=\254Q\312\275\373\340l=)?\273=\365\227\264<8o\363\275e\375\340\2758\316\377\275\023\307\266\275\254\312\032=\250/u\275\277\266\337\274\266J\224=\365@k=\371\376\356\275< \005=\326<\005\276\227R\014\276p]\027=\362\365\367=\2326\001\276\210u\376\273\024\257\202;E\357b\275\2179\375=\\\336\332=\271\370\205<jt6\275*>\361\274\213^\347=\222\320\226\275\355*\246=\353)\314<\356\341\227\275\315\005\356=]\252\002=\255y\036\274\245\213\264=\277\373\346=\243M\260\274g\327W=\342\226\010\276S\215\t>A\217\363\275m\213D=\363s\377=3\241\303=zd\324\275\025#\301<\243\356\204\275f\n\240=\031G\232\275\236S\365\274\332\334\360\274\3745\314<^\315\265=M\266\301\275\200\344\224=C*K=\177[\265<8\374\245\273\256\270\223\275\367\373v=\322\341\232\275\031\232(\275\233q\252\275\334TO=\036\260$=\236t\244\273G\226\005>J\211\356=\'\312\327;r\236\324=K\033\343\275\031\306\014>;\364\255<q\300\315\275B\235\007;\343\030\334\273\344\213D=-)\000>\000\257\315=.yX\275e\355\034\275;<\253=!\216\211\274\326O \275\326\010\326\275\372\364\010>1\306\245=\\\366\377\275\277~\267=Ld\225=\371B@=\343L\250=Z\007\262\275$\202\307=\227\320\220=\327\ta;O\223\261\275pC\377=Qf\362\275}\026\265=+\351I=}\221\352<=\314e<<@5=\316P\347=\372\002j\275\246b\270=\216\377\231\275\326:\302\275?!\214=\377\013\352;5\2328=\250F\271\275~U\340\274\322[.=\225G\372=\337\366|\275\246\252v=??\000\276\240O\306=\263F\315\275\254\363\234\274\242\236\203=\2173\355=\211\022k\274\010]\225=\240\013\210=\273;\221=\030\361\300\275\313\245z\275&\217\344\275,\245\363=8\010\017\275lm\014\276\242u~=m\225[;4\374 =\213}\345<\210J\374\274\310J\263\274\0058,\275&\226\310\275\320\306\351\275\360\340\004\276\0251\200=\020O\264\275\001G\010\276\251\'\252\275\000\250\007>\232\026[\274\010\255\251\275\266E\261<\235\274a=g\301\336;\314r\256\275\307\325\356\275/N\210\275&\277\204=\314H<<\311\212\016\275\032\265\224=\234[\313\275\316\260,=\344\215`\273\357R\001=\370s\013\275\013\345\r>F\363V=qs\336=l\025\275=\270/\366;\r\253\334\275$\267\204=\237\351X\274\342\'\253\275\373\254M<\'m\342=5\032\\\275I\271\276=\300\331\014>h\205\013>\242\346\'\275*\007\257=5\016\200<*._<G\373\236=(\337\301\275\034\305\244<\334>\224<\\.\244=\327\323%\275\016\315\274\275<\233\223\274\330\206\010\276bB\243<)\206\227=\325\321\250=1\317H\275\336\326|\275K\316\240;E\231\356\274\271y\004>*\030\320\275.P\237\275\314\243\352\275|\014x<\336O\360=\250\364&=\220\306\220\274,3\211\274\201R\277=r\374\223=\020\222\323=\215\207i\273\026\320d=\321\244\344\275\302$\005\275\304\252\025=i\264\360\275\002\360\265\273Y\006\244=\025|\262=\0348\007>n\2502=N\250\n\276\240\254z<\270\244\006\273\350\341x\275\252\236\221\274\322\254\014\274\270\013\313\275.A\007\275\243\224\035\275F\027f\275\\7\027= \325\325=n\301\032\275\007\321\236\273\007\220\241\275\226\313\240<\215\240\336:m\211\264=-\364\024=\013@0=(\'\354\275\250Q\314=\224p\211\275\3435\353\275\314\'\213=\245\331\326\275\334\377\276=\317\276\373=v\264\234=`\357\024=2\344\231\275IIo=z\270\372\275\310\006R=Z\0035=\204;\r\276\202v~=6n\202=\271\242\336<\333\307\377\275\265W\000\276e\221\366=\235\276\000\276\035\007H=\"\344\275\275c\036\220\275VZ\207=\353\027\247\274\356\215t\274\205;\337\275A$\003\276R\240\215\2756\350\253\274\t\272\247=a\351\214\275\332\\\302;\277\371\212=\365a\227<f\241\314=*\207\030=\032l\t\276\004\023\021\274O>\346=\274\212\266<\002Y\250=\325\362\267\275\337\263\242=\242\216\257=\323E\227=e\214\005>\021Hp=4\230\370\275\307\373\226=\353e\323\275D>\373\2759\005\006=\347\210\n\276\002!\302<\251\215\327\275\240\306\226\274\224\267\001\276SF\324=\220/\243\275r\206\313<\355t8\275\n3\375=\275S\010\276\007*\006>i\247\361=.\032\302=Dm\333=\226\222g=M\\\343\275\215$\351=\025O\217=A\014V\275\007\365\340\2755U|\275\250\351\257=.\2512=\316\275p=\354\336\025=\375\036\000\276\255\036\007\276\265\353\304\275_\216q=\317f\215=\360|v;\020\211\323;\240U\227\275@U\343=\177s\261\275\355\367,\271\002\301\207\275\332=\307\275h\345\035\275e\200\216=$=\203\275\262\246\325\274.2\265=P\271\334\275\221\236\367\275\336L\253\275}\027\274\275H\002\322=\261\033\222\2759r\3739\227;\317=$\372y<\363\327\230\275d*\273\275S,\336\274n\212\254=7\027\234=\316\312\207\275\220\227\237\275\312P\223\275TG\341\272h\332C=\256\"\372=*\343\240=\224\2664\275\272\010\000\276\t\353\005>\'\301\355=x\027\227=\264\256\346=a\372\t\276\031\313\271=\345\013\024\275\224\\\212=\317W\207\275\224X\224\275\212}\223\275\016\002\206=e=\326\2756\251\022\275\256Z\020=\360\344\004\276\327S\277\275\024\254\244\274W\025\223\275\035q\236=\336\024-=G7\202\275\334\247\334:o\t\222=\242\273H=\\\026\235=\251q\215\275\320\017\265<\215\206\275=95\231\275Qx\224=/\254\022\273R\333\257\274L\202`\2753\223\013\276iA|<\177@\226\275\305\276f\275aG)\275u~^\275\351\007\345\274\3568\311\274m@\273=\'y\303=s\n\037\275\211\326\356\274\0303|\275\213@2=\326\362\252=\323t\263=\354\027\202<\223?\001>\251h\245\275\026\017\n>\347z\001\276U=\003>\247\ra\275~=<\275\240\311\332=\345Y\"\274V\353\353=\201\363V=~\326\300=\356q\241=\314j\t>\344\231\241\275Q\010\237\275\201l\332=\307\222\\;n\344\006>\317l\n>b\332\270=\220\242\007\276\005c\345=\311\352\347\275L\375S\2759=\013>x\271\252\274\343s\364=\023_\271\275\263=\024\275?k0=O\242\217=\340\231\r\276\303\347\t>\201\377\330\274\345\371t\275\305\'\\=\366j\202=\277\351F\275\207^\273\2752rg\275\261fG\275\001\270j=2\376_=q%\"=.P\276<]\314\237\275\316=\226=\0251K\274\032\363\260;\034\316d\274\362a\233<\304Py=\262p\003\276t\311\007\273!\221\257\272\213i \275\360|Q\275\177\273\225=sp\312\274\034<\305\275\342\254\362\2758\006\311;\223\034l\275\247\220\r>\'[\342\275\331n\021=\321r\210=\010\030\310\275\344\207\304\274Y\034\344=\367\205\253<!l\247\275\234\257i\275\203\210^=>\257\314\275\306\244\226\275H\326\013<U\312\223<fB\010\276\213\\\253=\016M\202=\322_\266\275\305\304\020\2751\035)\275\'wW\275\003 \007\275\222\023\303\275\262\316#\275\300\303[\273z?+=\2272_\275{\202\n>\272\357\271=6\216\273=eM\013\276GbK=\371r\271\275\342\013\004>\333@\277\275|\t\224\275,\352\275<\255i\275=\201\025\020=B\034\366\275ii\247=J\345\320\275t\223\005>\021\275\205\275\024\260Z\275:\376\362=\344T\\=\212A\203=\366J\243=8+\305=\217\325\235\275\3405\372\275&\220\000\276\302\247\204=\211\267\262=\3000h=Z\206\225=z$\313=P\022\305\2743\330\010=\241\331\263=(4\343\275\251J\201<\313\013L\274\210\230U=M\001\320;\355\311\260=;\362\307\275%\277e\274\013\2438=\201\231U\274f\343\201\275\250C>\275\002#\205\275\205\220\003<\3447\'=\213_\304=j\035\362=S\364\314=\223\353\322=l4\230\275\236\016\255\275\371\323\302=|I\346\275Zy\364:\376\347\r>7\177\273\275\347a~\275\267\350\363\275\326\032\003=\234\035\321\2731q\306\275\237$\255\275+\030\216\275\344b\361=Bk\014>&\213\221\275\025\372\000>\003\\\003>M\257\210=\352\331\237\2750\243\306=f^\225\274\335~^=\371|\222\275\263\020\222\275\365\205\016=`#\235\275\306\322\314\275\"\336\024=\317\037\006>K\373\337\275!\321\004>r\211\263={,\313<\\\211\226\275\354\223\345=f\335\365\275\275\351@\275\326\332%=h\025\230\275\004 \245\275_\004\215\273Z\271\317=ORE\275\317\353\300=/\014\006\276S\340\001\276q\026\t>TR\361=24\323=TZ\343\274\230W$\2750\204>\275\277\002\032\275m\323\271\273\307/ =A\313\001\2756\212\331=\n\332\307=\335\210:\273\362\370\324\275|\374\334\275\236 \332=F\301\262\275!j\000\276\020B\347=\336BR\272dp\331\275\034\246\237=\226u\006\276\307\337j=\336\332\333\272}\247\311<\262\324\267=\254\201\351;\307\016\007>\n\254\236=[\277\314\275\266\330\262<\022\322h\275$\366\334<\310\225@\275\375\345p\275\300X\300<\204\270\333=\2355\362=\322\336\010\276r\271\337\275)5\036\274?\032\005\275\361\327\220\275$\263\360\275\007^\270<\325\'\223\2754\251\204\275\254\270\363\274\357\373\273=\030\347x\274\272\225\223=~\246\225=\337\354\355\274\305\203\203\274\020b\326<\270E\260=\216~\355\275\250JD;\251N\262=J\277K=\362\033\253\274\245\226=\275v\222\305\275\203\275\235\275KJ\364=\241\260\345=\262\375\010>\240da=\372z\207\275$+\200=\367\365\000>\347RL\275\001c\304=\260, =\033\260\220\275\366\315\203=\216J\257\275\256i\234=\313q@\275E\345>=R\367\215=o\005\300\274\325\252\254<b\177\212=\302\341\n=\346L\323\275`Z\320=\345\333\247=\376\234\226=;\212\251=\277\224\316\272\355`L\275B\031\217;\246&\237;.\244k\275eJ\376\275\365\210\220<\217w\003>@\244\214=\344\002\334=\036\272\376\274cJ\031<xD\"\274\212^\234:\026\225\341\275\306Y\266=\213J\372\2740\303\r>cj\236:\232\220e=e\226\006=\211M\267\274]\255\374\274\016?\005\276Vv\371=\266\273\233\274\025 \013=u\017\311=\332\204\237=\203\220\t=Z\303>\275\224q\275;y\005D8kW\202\275\312\030\251\275Anw=i\237\204\275;\353G\275\006\263\361=I0\010\276\002\265\270=I\337\221=4\022\006>\004\234\300\275\035W\205=\021F\371\275\022q-=l-\246\274\376\314}=\013\220\337\275q\246\300\275\2036\217\275~\024\201\275\031~\200\275\244\351D\275\310\200\001>\362\017\377\2758\241+=\315\345\357\275\221W\n\276\013\326h=\251a\323=\253\364\215=\263\244\363<\377\006\215\275\275!\234\275y\310Y\275\327V\231\275\336\306\215\275(\246\231=\203\314\315\275L\231\033\274Z\3277=\321Y\000\276\224\211==\256\375\022\275\225\266\225\275K\332\036\275\320Z\357\275\226F\275\275\356?\324=\226\304\374<w\271w=\360I\n\275;\347\n>\310\010\t>\035%h\275\026{\367=\363\331\247\274\306B\177\275!\216\253\275v\323$=(\272\326\275\251\001\016>\022n3\272M.\245<\010\375!=\235\222,\275\030\366\014\276\376\030\315=\212Kq<~^\227=|\354\210=\377\257\304:&\020X=:\263\241\275\325\016\014\276^<U=\277K\320=!\224\221;Y\206)=^\275!=\263\307\271\275\334\304\363=\027\320J=\212\367/=\025E\367=ho\300\275\240W\321\275\307\262]\275\313\022\340<\177\035\326\275=\201\254=\321\263j=\003\213\264\275\341\300\352=\326\007.<\227\256\037\275Fy\313\275\257]p;\001!\014>\001\272\245\275\312\376|=\273\260`=\007\204\371\275\377He\275\246\376\227\273g\345\037=&\371T\274{\213\210\275\370T\001>\302\032\246==\214\370<\021}\206\273\240Y\205\275\330\244\032\275u\020\327<\227h\247\275F;\020=\262\346 \275\304af=\342\\\363;\212\315b<)\242\211\273\353\004\202\275tCr=\232\276\355\275\371\330\207\275\231\3537\274o\204\341<\n\030\001\276\310<\242\274U\300\007\276H\316\232=/\204D=J~\272=4\277y9\355\2474=U\303\230\273HI\256\275\201\257A=\357-Y\275;d\220\274\355\3402<\003h\212\275\206[B\275c\362\272=MA\314\275k=\316\275\325YT:\351\307\223\275\251e,=\363\315\257\2754\207\343=\323i\210\2759\205\361=v\373\000>\221x\311<\373J\243=C\363\333\274\007\245\\\275\340\206\247<\335\177\357=@\277\320\273\334\240\246\275\360t\010\276%\376\213\275\212\177.=\316\243\214\275t\272\316\275g\311\t>&\257x<\264O\240\275\250\2347=\273\245)=\21137=\331\017\246\275\257\020G=\006pi=\260\241\331\275\202^\004\276\207\260\302\273\216\366\351\275\265\036Y\275\'OK<\373kM\275K:\211=E\250\343=\353n\344<d\014\210\275D\244\010>6\210K<\215\333\005>\000U\006\276\352X\351\2758V\304\275p\033\234\275jA\356\275\246\016\356\275\325\372\274\275\306l\370\274\363O\334=j\344\237\275\027\356[=<\037]\275\030n\031\275\"\214\377<\324^\t>N\247X\2756\250\003>\215m\360=\272\267\365=Z~\353=\036\346\212\275\367U\314<\235(\213\275\237A\243\273\253n\203=\304)+\274O\025\303=\261\344\254=\002\007\342=\0256\202\275\372\002\000>9L\342\273\201\227\256=a\277+<r\331M=\242\243Z\274\270<\361=\313\264\356=2\251\001>\377=\005>\310\254\014\276Y6\311<\024\350\357;\255m\300\275\301\303\272\275\220(\343\275\271h\005\276\013\017C=\314c-=\246\362\007>\023\000\223=\032\315\200=i3\235=R\251\321\275_c\007=\276\257\331\275S7\225\274`]\201\274c\317\205=\233\200X\275\323H=\274\356\240\253\275\262\037\225\274\357\\\346=\002s\277=\261\372e\2750\252\304\275|\251^=A\032\245<O\300A=\224\275\201=B\353\315\275\277q\342\275\346NY\275\363\367\351=\002\342\305\274\350\332\241<\362D3=\234\002\236=\331\357B\274\031\222;\274~\230$=\352\311\274\275\340\022\257=,\307\013\276\272\253\\\275Z\2659\275\252\0226=-\024H\275\314CM=\214(c\275\031\347\002\276\372\243p=\226 \246=\000\231\341<\027\177\235=-\226\025=\210\026\274=d\347\206\275\032\2723=\374\326\355\275k\233\307=\t\221E\274\243\226\005\275\022\260\267=\016Q\216\275S\375\034=\337\006Y:\316x\206=f\220\355=X\001-\275\333xz\275O\301\233=\035\374\323\275U\375\006\276\004*\277;\3101u=\206M\357=\216\276\315=\371\210\201=c\215\326\275\216\355\006>\211\032\242\275x\217\341\275\310\231\000>\017~\207\275\276\016\275\275\013\005Y\273)\321\262\275k\331\345=\314\325\240=\364d\202=%\253\304\275\320\314\306\275\275\024\366<8e*=\036\307\003\276\263\237\244\275\367R\373\275*\023!=\000s\227\275\034o\353<i\245\376=\336C\261\275\327E\317=\345\222\334=\224\310\'=\324e\013>\225#\217\274\305s\000\276\320\235\234=\367\211\335=n\357\325\274\364.\351\2741\374A<*\212\007>\311(\016>\2439\304\275\2059\001\276T\204\325<\377s\r\276\320x\376\274<8\251=\350=\252=\351\376\356=`$\352\274pQ\273\273|K\274\274\315\235==\345\242\361\275.\367\003\276\351Z\213\275[b\337\275(\307\030=B|\t\276+\005\275\275Md\006>o\260G\275\205\377\203=\270\205\364\273\236\020\370=\022q\341=\204\216\371=\340\037\362=+\236\r>vUc\274\264Q\237\275\364\352\202\274UG\n>c\036\255<\335\333\237\275\230\031\347\275\213\306\343\275Q\007L<\2525\022\274\332\007\207=&\201B\275*\364\004>)\022\371\275\322\267\365\274\336\000\007>\322\300\207\275\343 \273\274\215D\007\276\303F\274=\217m\316\274L\"\342\274\276\241\265=s\257\t\276w\223\037\275\200>\253\274\225l7\275\243\014\326=\233l\250=\250\356\221={\220T\274SH\347\275\225\335\324\275\324\276\253=^\226\010>\177\214\326:\024*\003=\207\273\000>u\035\034<Mw\357<\177\035V=9\266S\275\362V\366\275[\032\270\275o\341\007<\235z\347\275\002\242\335\275Un\377\275M\373c<\273\214\023=7\315\363\275a/3\275\345\032\256<\200R%\275\275\226\362\275`8\324\275\340U\337\275\210~\007\276\257(\007\276\362\233:\275\313\n\333\275\303\335H\275}x\347\275\024\267\315\275\345q\335\274\361\"\277\275\356\206\227=k\361Z;1\236\r\276\nR\t=\352j\220\274\262\215\236\274!8\357\275\rP\336=*:m\275\245\320\211=\273\360\242<\373\200\014\276\204\'G=l\352\324\275\026\277\371\274`\363j=G|\233=\344\315\370=\304_\245\274\006\'\016>\004\327`<\035*\006\276\224\225\t>\354G\225;\315\270\004>\r\252\303=\273\207\213\275\r\232\204\275K\016N=\273\337\307\275h0\341=[\215\265\275\321\242\006\276E\315\001=\r\327\r\276\\\302l=\3446\363\275 \303\215:\352\234\000>\321\000\000>\023\276\304=\344\314\001\276!\220\016<p\305\003\275\231\030\222\275F\272s\275zm\341\275\006\213y=`\276\005>%\213\002\276\263\217\366;\355\347\200\275\310g8\275\252PM\275\342\212\010>\327)\335\275\007\303\014=o\222\354\274\274QY\274@\014\001\276\350\213Q=\270\250\342\275&\231\337<\027\357Z\2755v\241\275N\340\034=\230\036{<\356\342\267\2753\212\r\276\214\225\177=A{\315=\200\326\006>\303\334\256\274\353\232n<\024\341_=\361\360\351=\272{\220\275\371\326\247\275\350\350w\275\266\013H\2753t\342=+l\315=u\270\201\275\253\336\3479\255H\377=\223_\205\275\205\317\201\2752X\246=I\321\235\275\213\000\216\275/?\217;p-*=\202n\257\275\360\346L\274G\351\235=\315\254\233\274\263\207\002\276R\033\330\275\320r\301\275\023a\014=\235^l=S\307e=\212\213p\275\"\035\007\276\333\362\325\275\277\306|\275\223\212\363\274&!\326\275\202\355\307<\0215b<T\223\245\275hn1=\364\237\211\274\204y\005\276\2436\215<\226\320\215\273\336\225t\275\345Q\266\275x\243\273=\356\t_=\252\364(<\232\037\023\274\365t(=\035\375\266=M\245\025\275M\007\003\276\215@\227\275#\235\250\275\000\214\224=\333\341\207\275!\251\235=\177\360\211\275\370\243\226\275\004\\\266\275^\'\250\275\277w\r\275\037r\033=d\0104=\210\210\240\275\233\0207=\304_\224=Y\363\334=L\225\315=?9\216\275\036\217\343\275\2403\324=\331\306\326\275- \323<\206\365\367\275\350\226[\274w\374\003>c\021\350\274\021\232a=\373\370\371=2\370\001\273\223\031\337=b\234\373<\357\332\005>\321*\243=\017$\304=\3415\001>U\372S=G@\215\272vo\355\275#e\324=\372U\t\276\241\020\224\275O\312\210\274\261\t\275\275<\300\211=\356Q?<o\326\273\275,y\200\275\332\227\375<\337\217\365\274J2\251=M:\365=z\266\322=\305_\007\276\276:\317=|.\017\275\223\010\314\275\013Zh=\360J\376\275k\314\272\274H\276\245<$If=\206E\257\275\300\001U=\305\270\340=\277>y=\230\233\'=\256,\375;\216\361\272<8\364\342=,p\355=\000\234\217\275\032=\326\274\005&\200\275\226!\217\275xU\004>\365\203\253\274\202k\002<\t\035\341\275>,\261\275\010\206\231<\'\240\233;\214\0034\274\325\354\374=\230\336\252=\027\025Y=\313\302\336\275K\013\205<\343\375\334\275!\3012=\2368\303\275\216\264c\275\027\307R=\217u\361=\216\263#\273\222\335\367=\227\335\'=\373\017\017=b\365\201\275\233\017\200=\241\237\356=H\027\267\275\261\344K\275\377\234,\273q\225\221<\023\337\216\274\ru\335\275\203_\004>\2146\352\272 \016\277\275\027\323\036=dm\236\2758\237D=n\372H=\330\355\307\2750G\202=\031\236\307=V\027|=;b\314\275\231\300\257=\221A\006\276\311\316\005>\213@\215<p\345}\275\271\\\375=\331\371\273=\375\253\331\274\261\206q\275\177D\363\275E\025\026=%\242\265<\361\233\213;\357\306\223\275\247\265\347\275\343t\272\275\254\302\016=r\213\017\274c\246\377\274\341\303\273\275\021t\003>rL\374\2752m\341=G\326\354\275I\227\276\273\324L\317\275xK\360=\331K\r=|H\302\275\353\222\007\276\027\236p\275/\013\200\275\357Za=\361\351\326\275\253{\372=\"\023\250=\306\006\007\276\223\265\350\275\356\024\013>\000\264F\274\n2<=\346\3104\275_\253\265\275\362\273\310\275R\357\351\2733\024\r>\333X\374=+\037\177\275\342\345\003\276H\'\352=zO\031\275\006v\001=n\205\230\275\323\220\314\275\322\307\001>-R\310=\230\234\000>\251\245\376\275\310\337\333\275\313%\013>\373I\005\275\373i\005>v\256\005>\"=\354=89\"\275\2631y=\n\255!=t?T=\177G\324:a>\n=\035\003\233\275\314\344b:\217\036@=\037\272\356=\300\025\373=\341\005C\275 \245\376\275}\365\010\276!\006\377\275b\320\367\275\023e\n>\246\022\332\275h\224&\275\213\005\315=FF\314\274L\240I\275~1\311\275\275\334\201=\215\203\327\275!\324\003=v\020\241=\"& \275\'\031g<T\240\263\275\252\326@=(;\320=\001\361\371<\376\031\264\275\021J=\275}\303\002\275\2525\353=\307\362\221\275\241Z\005=\247|;=]+\211=\234\214\034=\241\214\256=\224\274:\274\340\331\267\275 ^\351\275\252\241>\275.Y+=K\341\003>0\206\232\274F=\354<Cj\343\274\\\353\324=\332,\255\275\303:\007>\353I\247\274\307\216\204\274\373\215\375=\"\206:\275\375\214@:0\353d:\217\r\313\275(\344\002\276!\034\347\275%\005\221\275\337\031\304\275\246\t\310\275\234ep<\002\373>==\000>=\367\372\025=\247:\336\275M\006\017=\"\2161<\207g\244;w\370K\275~\2469<\372\000\213\275\006\257\014\276]{\026\274\2758\'=$\036\311\275w\355\202\275\372E\271=J[\274\275\322\215\327\275\345\353\272\275\213)S\2753\330o\275.\001\255=(;J\275\376\233\261;3\376Z\275\255\245\374=O\303p\275\201q\210\275O\277\355;\370HK=\270\017\341;\231\331\376=\315\234\273=:\332\355=\223\337\r>\215\032Z\275Ub\224\275\\-\307==)O\275\310\311\006=\265\326+=W\377\214=\177RD\275Z\327\257=yy\034\275vzP9\340\013s=q\375\252\275\'\005\002>\313M\326=2\006\177\274\311\322\236\275\357%~\275:\024\000>;?\201\275*\226s=\004\270\327\275\303\214}=\346@\353=\373\200\273\275\005*\r\276\346\021\225=\333\023j=\263\364\027=\r\321\205\274\331D\334\275\036\233h;\033w\231\275O\005Q=-\356V=^r\232=\320\302\000\2762\360\317\275<w\007>\262|\016=\224Q:;\347\221L=h+g<P\347\211:\307\343\366=5l\001\275\325zp\2752\223\332<\003\021\373=\335&\222\275\262$\344=N\241\204=90\n>\261gH<\333{\312=t\004\300\275A\001\252\275\2115\336\275f1\222=\2575\336\2746\377\377=\212\272\331\274-\372[=$\266\335=\233\225\325\275\203-\360=s\373\032\272\221\203\306<c\177\241\275\325\033\003>\002\036r=\257\007\303\275\270\366\274\275g$\272\273\021~\244<h2\320<|<_\274~Q?=8\\\000\276x\372\304=\335\306\236\275\020b\341=\215vF=i-\374=d\341\r>\323\337\334=\317\035\302:\336\246\337\275 \003X\275{&\277\275\225\363\200\275p\336\313\275\262\314\351=\317t\204=\035FL=\267\361\273\275+\241S\275\033\003\303\274R\320\223<\252\331\353=\251\026\006\276\360\371\367=|\346\262\274\314\022\255=7\256\332\275\237\275\333<\375\273\371=\217\221J=\277\373L=>TS=\333+\232\275\244\310\311=\367i\225\275\375\255P=\323\320\267=\242\325\010>u\253\201\275F\027\213\275Q>\256\275Jz\242=\343\023\260=\257\332\275=\300\267T=\002\227\211\275^<\377=\243?M\275\304\n\226\275\321\210\330=\010V\233\275\001\250\263\275\217(\207=g\031\337\275*\235\313=1\032\250\275\346\351\304\275\3175i\275C\376\256=\260\005\313=\336t\035\275\244\220\241=Jo(=\004\273Q<<W\307\275|\304\034=3\366\342\275\254\273\201=\325?\030;\t\010\013>\364\027<=<i\301\275X\036\010>B\375\241=\017\327\004>\320~\013>\235\264w=\233E\261<\313U\367=\277&\216\275\273\243\257=\216\201F\275\230\266 <L\333W\275\000\374\336\275\021\346\272;\033\340\005\276\275{X=W\374\274=F#\037=3\262\002>\226\252\341:eb\n\276\016\211\233\275\037\204\007=g\032\205\275.\301\340\275fQ\334=\2350\317=>\n\217\275Z\310\217\275\0353%\273\004i\016=c\263\216\275\325%\310<\030\315\003\276\205\316G\275\031\277!<\362\302\002\275\267\005c=\252\371\234=\203\375\300\275;\333\340\274<\342\236=%Mz\275b\345\357\274\002u\203=\3423\211=S\"V\275\004\003\376\275\336\342$=\237\234+\275\001GF\275N\240\002>\010F\246=u\321\021=\376\033\257\275\233\214\202=\340u\336\275\r\263i=_\2435;k\n\266\275\226\205\002=Zb\251;Vl\374\273nF\260\275\217U\310<g\027\345\275\3110\246\2758w\010>\203\025\256\275\233\211\310\275\254Z\352\275N[\254\275\245\355S<\316\224*=D2\237;o\274g\275\203I =\rL\003\276W\265\257\275B{\347\275\027\201\304\275SP\003=0\323w\275a\235\022<P\230\216\275\035\224\336\275\314E\206<G\317\322\275\335\216\315=\354\257\247=\024\006\305=\245\240\204=\326I\344\274\025\215\200\275+}\375=\265\231;\275&\372\257=\374.\006>\300\330\000\276%\267l\272\266\224r:\247M\327\275\224\r\227<\330c\222\275v?\360;Trh\275r \006;\213L\222=\361X\007\275\323j<=\224\025N\275W\356\t>vQJ=\306(\362=\376\257\033\275\0278\215\275\223\006\006\275\352\205\261=\021\223\231=\212t\277\275\213\025\010\276j\353\260\275\3305\260\275DW\240=B-\257\275\313\235\236=C0\243;\313\247\r\274O\026\345=\2603\271\275hF\325\274\'\377\311\275\373\273\337\275\204\223\324=\302\313\014\276\223)\213=\263\001\303=|J\323\275\267u\306\275\241<\360=\216\374\256<\021A\251\275\245Dx=Z\312\227\275\233B\217=\364}\005>\313a\217\274V\235\340:\371\245\325=\311$\234= f\267<<\t\221\275D\016\010\276o\204<\273\341\300a\275\214\331\206<D\324\247\275Rwi\275\353\363\367\275>\272\221\275*\250\000\276\277\023\353\275\030\273\235\274|\343\320=J\215\331<\362\273\223\275\016I\313=\273*\010\276\013^\340=\230\201\020\2756 A\275\323\315\330\275\020\036\355\275j\337)=\006[\340=/\\\000\276\306*\004\276\256\301\227\275\231\274\n\276\013\237\316=\361\222\272\2754q\363=[\223\203=\023\'\335\275\227\027\370=?\235p\275v\364\203=\361\211\001\276}\352\244\275\216E\245=c\263\264=Q\267\304=\241\230,=|\351\352\275#\354\371\275\036&\276\274\357h\203\274YA+\274\235\3164=\367\211\326<\354X\231\275XG\250\275\001u\306\274\006\020\237=\024;\360\275\363O\252\274t\367l=d\270\314<\177-\t>\241\250<\275P\233\013>\231\234`\274\t\305(\274C\007\252\275dq\306<\032\333\262\275\274\221\375=\360O\242\275m\037\002>\033y\221\274\026\013\201=1\374\224\275\216\373\367=\323*\230=\324b\315\274\2769\200=\227M\354=;\342\235=\200\316\207\2755\344F< \221\366=l@1\275\203\237\006\276\214\246\354\275\267\266\257\275\367\360\331\275 \320\220\275e1\023=\001\265\240\275p\336\332=\364\260[\275!\213\356=\216\2068=\245KF:2NV<\035a\315=\025\036\262\275NCS;\344\266\257<\336?\226\275\034\312\000\276\332}\300\275\250~\233=>z\013>\215\366\313=\330m\304\274\231\025\000>\\f\363\275+\313\273\274\017\\\374<x,\302\275\033\221\312=}\356\273\275\265\017\223<F\206\341=A\037\267\275\372W\213=\234[\252=m\234\003>\214\200\236=\017\027\276\273\031y\034=$~\272<\257\320\353=\317l\341=J\322$=\250\210;\275\325\177\377\275\342\363\335\274\227^\272=\315\366\235=w\235\366=\351>\224\275\342\257\013>\026\370\364=!\n\336:\367\014\330<\2539\274\275\250\355\002>\r\277\314=0\324#\275e\001\345\275\031\314h=\341\326\244\275MM\235=\251k\t=a\277\000>V\3657;\n\020\203\275\343\356\236\2758\336O=[\363\260<H,\214\273/$\006>\362B\337=\201\245\371\275\274\257\005>\3753B<\226\337\035\275\333\207\353\275\271b\375\275\226b\345\275\237\314\317<a6\317\273\377\000\010\274\332t\267=\372\3171\275\245\353\216<\\\341\325\275\303\347\341=\261\332\251;\251W8=j>j=\276-\022\275\347X\276\275;\330\261\275\005\3409=#Sa\275c\3730=\203\342\014\276\345\031}\275Tr$=\0211\003\276\332N\177=\214\016\325\275\220\305+\275\007\307\013\276s\314\016\275\242\267\213\275\307\256\315\275\204{\271\274\311M\275=\365\034&\275!b\265\275~\370\242\275i\231\r\275\340\037\363\275\303V\331=\200~\216=?\305\372\273\177\324\262;m4\n>\375\247\332=3J\332<\222\331\236=t\205\335=\177c\363;c*\316=\317\004\325\275\335\226\014\275X\007\340<\203\333x<\021\211F=1\215y\275\031\333R\274c\365\372\274z}\200;\206\261\023\274\257\344\333<\352\314%=\363Mt\274\360\354Q=kd\262\275\024\2470\275\312q\001\276\035\253\364=\231\266z=\263\363\313:OSH<\361]\373=_\223\375\275\213&\247\275\354\235\335\275\2343M=\035\232\331\274s\023\272\274\341\206\331=\372\0265\275\310\242\247<\273\256s=\272\017\003\272F\034\341\274\010-\211\275G\273\361=&V\335=\227\203\372\274|\361\305=\350\303\n\275\347t\321\275\302k+\275+\3429=C\362\366\273\320zm=p\357\221=\"9\\\275\214\355\303=\245\323\025=e\222\371=\267\244\305\275\240\223\341<\233s\007>\347;\320\275\340\025\344\275E@\343\275O\217\266<\344\225\t\275\\@\014>\246\235\000>\241s\002\276\3638\252\275\252x\007=0\364m=)57\275\017\304\233\274y;J\275>\221\264=\306\232\372\274\321$\257=\366+\224\275\300\217\256=\207\357\225<S\354K\275B\"\233=\312)\263=\321\216\332=\244\222\000\275\337\241\204<SD\361\274\316\006\303=\305}\217=\023\320\220<\t\001\375\275\371\247I\275|eV=\2773\303\275\022;\316=J\017\260;W.W=\325\206_=K\356}\274\252\241\017\273\342\324\360\2756/K=l\353\023=o\016\332\275\021gr\273bl\367=\354\215\013>;\t[=6\353\310=\250\n\246\274\230\332Y\275\244\200\344\275H]\335;\207\314\214\273\330\362Z\2750\234\317\275\300\240\272\275\370P\235=q\nW\275gE\227=\257]\332\275[\242\014>o\351Z\275\010G\325=\232\200\030=S^\013\276M.3=\276\240<\275\365_<<`M1\273\240\304\364=a\367\027=\367\033\010>fV*;\347\rv\275\221\315\347\271\312&\004<\245\324\361\275fu\247\275A\323\n\275\222^Y;\350\377\006\275\313\3205\275\377Rx\275BS\251=?\2622:\001\360B=\277HD=I\034-\275\246\014\234\275Ig\035;\020B\006>\250\023S\275\257!N\275\230{\250=\034\\\271=2I\366=r\327\263\275\030\027x\275\331\373\014\273\023\320\274=\034-\036=Xb\376\275\312s\005>+\277\230=\317I\341\275\262\203\345=\346\245~\275\\\212\266=w=?=\204\376\233=\232\251\334=\234++\275\366_\367<\376\266+<\031c\253=*@\002>\270\303\024;\036\177\014>!I\252\274\276\256\323\273\245Ej\273\214\320\374=\253X\313=\023~U\274\020\344\211=E\207\256\274\265\231\250\275Q\034n\275\336\2663=\231\017\242\275\264{\251\2754S\001>_\025\213=\215:\r>\017\003\362=n\377\324\275\325\226\225\275\230s[\274\241R\007\276\225\340\264=\242(\027\275:-d\275\265\322N\273\360sr\275\307}\363=\026\003\244\274}\n\024\275m/c=p\313\371=8mt\274\323\2457;\"\t\314<4=\r\275K\310\006>X\345\221=\2355\t>\001\251\363\274T\331\372\275Ak\254\2746U\200\275\372x\366=Li\245<\0221\316\275\206\026W\275\340\263\330\275\324Jb=\340\316\241=\203\274\223=Z\350\273\273\024\347\010\276\367\323\251==6\263=\031\372\263=\243J.=\212\215\326\275\211P\226<<\035\001>\230\331\000>\203$\027<\3300\343\275\344\033\350\275H\262\t>\tD\337=\260#\275={\257\244=\220\025\n\276\022x\371=v&\340\275A\345\372\275 v\360=\345\324\364=\252(\032\275\305\271\206=e\334\001\273^\316\245<\323\214\203\2754\274\332=\362S\245<F\351\022<\213E\324\274\345\276\\\272>d\\\275=\236/\275\331A3\275\251A\010>tB\317=@W\217=\313F\302=\302K\203=%\322\245=a\022:=\251\310\201\275!\262<\275N\312\346=\025\373c\275\006B\344\275\303\324\372=\360i\240=\257\241\267\275\005 \024\274R\2022\274\276\341\000>\352\216\003<\226\325\352=\272\002\251\275\274\325\276=w\217\261\275fp\"\275vu\010\276\376\252\014=\236\235\363=\035\274\322=\333\377\232<\332\272#;\316\002\365\275\357\014\223<!J\341\275\375;\355\272\252\\\322\275\316)\325=\222G\362=\211f\212\275\322o\317\275\310\033t\275\322\271\243\275\344\247\232\275\302G\312\273\324\034\347=\353\335\377=j\324\251\275\033yY<\305\331\371=\3157\357\273\017I\347\273bG\266=v\021w=\'JF;\351=<=\357\'C\275\265Z\2118\037\243]=l\203<=RC\n\276\277\003\264\274po\261\275\264e\261\274\035\337\317=\004\323\357\274\210A\002=;.~\275\317\254\202\275LiR=\257/\004<\256\362\016\274L}\214\275\321\212\245\275n\tf\275\337&$=\242\034\204<\006\332\326\275\241d\202\27570\221\274\264q\003\276\215o\017=\"\245\254\275\276s\034=\'\3673\275\003F:\275\203\363\314\275\366/\260<h\333\341\275+\235\221\275\255\3418\275\305I\366=\253\321\243=\230\3354=\223\034\275;\244\273\377\275\240\207\007<o\342\203=1\370\212<\240\356\027\275\264\034\263\275\226!\320\275\314v\265=\036\211\362=a\020\215\275\251\375\003>\037%\247=#K\t\274\242\272\232\275N\347\354=\360\361L\275\230\234\000>Y\006\350\274\336\347\240\274s\333\325<a\n\010\275[\330*\274V/\242\275\362\030[\275\020z\337=2\003\352\275\335\220\010\276H]o\274G\342\254\2759\240=\275\311\005\271\275\304\375\220=\346\235\206\275\374\343\216\275\336\301\216\275>\355\356=IR\240<H\201#<`\234\r\275r\232\010\276:\214t\275\361\374\246=B\271\002=WB\262\274\330JQ:\230F\374\275%1w=e-\001>\027\230\250\275\274x\010\275\0072\310=\310\251\335\275\215h\300\275Uv\332\275\216\365\310=\223\321\337=\373\260\002>\240\262e=\252q\202\274}\216\263\275\036\344\260\275\357\311\"=\027\341\365\2747\027\007>\333\353\365\275\010\341\312=\341\234\032\275\270\305\274\275Z)\036\275\253\342\235\275/\342\376\274\257\345\367\274(\017\341\275-\244~=\333\002\215=;\376\025<,ap=\363f0\274\246]\014\276\372\307\177=\226Q\305=\315\233T\273\220$\006>\250\327m\274\342\233\231<\315f\242=\352a\252=\013F\306\275T\004\261\275\302 \261=\033\010\352\275\224\034\377=<F`==\025\347<1\236M=\217 \347\275\2676\307\274\200\023K;\200\321\365<\352\013\374\275\342\224\\\275P\267\365\275)o\003>\256\232\006\276\031\025\274\274~\307a\275%\031\014>\037r\033=\266\305\301\275.\301\234\275V\002K\275\333\274\310\275\363\332\377\275.\007\022\275&\320\020<)\032A=&D\244\275\277b\232\275+\317\006>\361\213}=\300H\345=\3575\320=b\243\342=\024x\374=f\036\247;\301Z\000\275\357+\331=Q\263\261=\254N:=\242~\230\275Z\205\n>\341\n\306\275\324!\370\273&\230\007\276l\275\231\273\331\3250=\371eU=\302\024\344=\306c\351\275I\t\224=0\360\310=\275\235\250\2732\014\341\274g6\343\275\003\232\236\275\301\032l;\331\324\227\275\256o\303=\210\276N\274\2300;=k%\276=%\022\t>\204?\372<vs{=\253l\\\275>\026\t>\364\205\315=\rN\241\275A\340\364=\375\222^=a\205\317<@\"\013\2764\355\333\274\302\245#=Ab\001=$\214\321\275\030jq=^\376\327\275Y\222\362=\"!\265=%\256\357=\244|\336\274\331%\t\276\256\347\014<y\215\273=\ry\250<\324C\237=\231\013\353\275\\x\000>-\342\213=\r\001\001=\"Tc=\310r\362\275l\'\027=\277\303\307\275\262\343\273\275\262\263\271\275=\210\364\275\234i\017\275\010\2755\275\255_6=\\\021\370;\222b\276<R1\016>5z\t\276\323=\252<i\256\265\275\3331\272\274q\002\206<\210f\257<<l/=$\361\363=\024!\036=\231S\356<\305T\327=\321\245\331=\002\023\320=d\340\300<h\205\216\274;\241\361\275\343c\253\274)\306\350<2|\342=\327\241\214=\301U\323\275\026\252\330\2753\213\203\274(\372\372<\2274\355<\266D\272=:\237\265\275\252\033\253=\"L\n\276\020\332}=\"\027u\275\037Vi<\276\365\257=(\341\347=gzD=}\0261<-\306\364=\267Rl=~d\265\275\224+\226<i\245\033=\014\307\202=\306\255\263\275\200\r@=Y\244\313\275\001L\312\274\035;A\274\372\312W\275\270\266r\275\370~\036<\030\365\274=\232\303y=W=\007\272\241=\256\274\315\361\363\275\263C\030=\223\370>\275\273\035D\275N\354\373=\251\024)\273$\316\301\275\213\355\202\275\312\207\374\274\271\005\207=\005H>\274\226\252\362<u:J=\300\327\370\274f\0267\274\266y\021\275A\252.\275\305\240\310\275\342\245|\275\007b\341\274H\312I\275{\223\311\275(\337\210=\302\323\204=\277\232\277=P\210\323\274\230B\016=\013\341\363\275-\021\013>\361\353\231\275\275w\254\275\261;\254\275\231H\'=\221q\257\275\362\357\371=+\212\206;\214\006\000\276\334\311|=i\253\230=\370\276\373\275\021\341\354=\031B\005\270\314\304\226=d\024\254=\332\304\003>[\351\200\271\227\241\264<\302\353\373\274E}\367=^~\"=\307\234\221\275\273N\214=\020t\r=\236\243\004\275\376v\276\275%\001\326<Iji\275\361Y@=$-\363\275m\343\370\275\021\026\307\275\311\260\002\276\216\312\227<>O\r>\330w\004\276Uv\210=\264\223\236=b\222f=\020\373\\=h\246Q\27439\212=\356\'\210\273|<d\275\030C\245=`l\321=\245\357\000\276\360\276\345\274\253\371\307\275&\225\370\275\253m\024<\366\367\261\274i\215\226\275\207\343\377\275\2176\361=\340\275#\273]\031\235\275\177\205\201\275\267\371\003\276\003\325=\275\233i\226<\303\326\022\275@G\355\274\001\217)=\0161\260=\312 \346\274\326I\273<\220Wo=VZ\266=\252\342\202\275\353\341v\275\321;\337\275\334\262\270\274\216b\255=7\324\'=\300b\345=\243+\333=\376/\270\275\373\226\257\275cE\362=\230\203\214=\271\\\\\273\202\035\244<\303\377\326=g5\013=\212\212\337=0\233\322<\366q\010\276\362\316\330\270\330\372-\275<\232\021\275q\266\264=|\200\327=\311\367\334<\372\330\034<V\224t=t\033-=b9\305\275MJ\024\275\224x\360\275\247\333x<\351s@=@AH=\276I\227=\267\344\006\275\253\245\334=\202\362\246<iA\202\275k\322\330\275pD\313=O\365\345=\307\306\220=\240\267\327\275{\327\344\275\020| =I\'\370\275K\202\272<\003\027\346=F71\274\234\331o\275\361\023\002>\251\264\237<\274\367j=\247\332\032=\'\251\246\275gN\036=\267\030\n>\204\003/95\250^\274\370\243\254\275:V\350=\346\236\r>\313\336\356\274\305\001\263=k\265\350\275\310\315\254=c\226\360\274\360C\014\276x\304\342\275\0234z;5@\n>\232\253\351\275]\225\332\274\2766x<\357\334{\275\r\205\013\276\274\207\322\274\212\377\002>\000\277L=8>\237\274\006\352=\274\220\376\214=\335\226\275:~\'\255=\306\244\007\275\365\366n\275\266e\302<\257\331\250=n8\005>n\206c;\034o\305\275\331=-=o\177\001\276rd\002\276w\200\345;\212+\376=\027\320\272\2756\306\217=[#\014>Vo\312</\0345\275\276,t\2750\000\337=\013\341\321\274\2046\323\275Q4\336\2752E\262=\376\363=<\320\336\227\274\265\311U<\370\353q=\325\222\341\274F\327I<oZ9<\2170\003\276I\362\230=|[\311<\304\007?=\303V\363;\261ym\275\347\234\352\2752\037\207=L\203\253\275\233H\365<\\\271\205=\374\203\230<\242S\352\275\003)\244=\022\311\277\275\332Y\212\274\365\203j\274\362&\367<\3709\353\275\257K\212\275\206\000\336\274\210\305\320\275\372\332%=K#\233=\177_\010>\207\013\266=\263\361,=\3022\000>p\272\376\274\373\200\244=\n9\231=EX\255=\244\204W;\300\362\002\276\307\257N\275\004\260\000>\247\235\337;a\262%;,\325\365=(\020V\275\270\330\'\274\031j\235<\250t8\275\377\232\022\274\3306\225=\0072\377\273\345\217P\275\367\241\342=\373@\003\275\n+\247\274\002\240\014>\2722\025=JYP=\275\345\321=o\355\232=\252@\347\275f}\270\273\330\202\225=\314\256\333\2742\372\215=\316 y\275d\346I\275\177\331\341=\340\021\332=\277B\255<\365\320k=\216E\365\275\337^!=\346C\204=lwb=\017\374\002\275\n\247\003\276U\014\257\275\341\261\336\275\202\313\365\275\225\337\t\276)e\205=\206\326\036=3%^\274\224\014\r>\363\254\205\275\244\214\201\275\347\364\022=Z$\301=\033\263\235\275\021O\352<\3657\272=\254\331\213\274Ao\274<`\'\254\274\357\212\313\274\253\000\330\274\203\227\363=\242I\253\275=\000\300\275Q\215\020\275\332\342\250=\304\274\260=\036\237\217\275\331\326_=\240\004\314=\242\306\370=f\t8\275bx\223=\267\340\305<\342,\200\275\312\217\300=\177\364d:C \"\275\230f\311=\377\246\301\275\001{\256\275\316e\304\275\347a?\274[5E=\230\020\273\275&,\031\274\023\354\260\272\302G\316\275>\350\006>\214h\343=]\241\004\276\211+\n=\241\334\341\275\340\016\312\275\223\256<=O&)=\263\271\026=c\306\326\275\224\274\211=\367\315\'\275\301\365\r\276\230\207\372=\222\312\001>g)\r\276<\242H\2736\031\353=\276\345\314\275\221\373\000\275\250\343\007\276hk\212=,\360\r\275\230/\025=\206\240\t\276\354`}<\355H\234=i\211\237=\220\335\320=\355\363\005>\303\320N<\026\305\217=N\272\243=\215E\250=\261v\373=\274\322\370\275\310\350\032\275#ze\275\031\326E\275\021\307<;CB`=\370\320\010\276\263s\305=\332\243\240<\007 \336=\201\270\222\275\325/\r>X#\237\275R\225\310={\271\315=\311\330\366;wwA=\025\245\373=\022]\014<\341\213,\275:\205\366\2756\027\367\2757\274\203\275.\366\274\275\025O\237\275\207[\004>\203\224\337\275\331\273\202\275\300t\241=\223\336\271=\316\264t\275.\032\366\275\265\324\013\274~\275\014\276\346\347\014>\263\\\245\275\314f\266\275~\3360<\233\300\253\275\204\256\275\275\221\365\234=\257\325^\275\262\023\177<\222\234\r\276\234\330\255=A\337\373=\206\345\362=\230\276\232=\320R\340=L\342\314\275\223\257>\275^\031\340=$l\203\275\331\263\214\275\272(J\275\223\354\356<\304\2355=s\017\266<\314\034\362\275\005(e=\371YL\272\371\364\027\275&\037\312\274d\356\267\273\r\366\367=\203\233\341\275\216\303\004\2750\335\356\275\017\034\226=\177\025\232=\005,\026=\241]2\275\341/\255\275\035\300i=\370i\360\275-K\375=q\']=\343\272\256\275//\006>\275\010\262\275\235S\317=\326>\013\275\331~\372\275\020\376\200\274\360\337\013>\'\271\261<|(\252\275yS6\275\036\260\226\275\013v\014>\351\037@\2759k\370\275A\245\000>Tq\036\275bf\014>\203\305\345\275\013S\325\273\355\357\301=\222\336Q=\277\361\002;U\025\271=\357 \003=\220\216\353=\362_\003\276@\313\303<\017\260\317=\033\030\355\274\223\252\001>\276\260\265=\237q\n>3\212\355<\312*\251\275\3426.=\276\337,<\374\216\225=\035\210\375=\n\262\r\276\231\273\201=\345X\t\276\'\320\007\276\257\377a=\373\216\226\275=\370\005\276\210\206\315=N\222\246\273[fv=\021r\376=\332\222\005>\357\202\252=Z\036\240=\261o\360<T\266\001>j\301\351\275Z\275\330\275\256\206\275=\267Vt\274y:\001;0\250\274;\025\251v=\246\262\006\275\312\257i\275\203!\t\276\365\321\207\275c\206\242=\364K\236<\302\023\001\270>w\271\275\246\006\004=\367\300!\274\036T\374=\204e\304=\362\242\375=_\202^=\337\350\277=\177\010\341=a)\201<\035\221\307=\231,\204<\207^\313\274j\235\013\275~\364\007\276\366\014\313=b\271$\274&\026X=\345\364m\273-C\234<\261\316\027\2746\266\345=\222\357\337=\327\014 =z\217\270\274\320|p\275\030\371\241=\030\220\213\274\304\234\234=\273\307\357\273\036Y\372=A+\002\276\304c\301=\203u\235\275M=\310\275b\237,=\227\273\211=\224\020\377\274\366\316\350=\367\037\262\274\277\354\213<x\246\312\275\022\247\246\275B\022i=w\216\305<\001M\317\275\330\223\323=\340\320\371=\365\316*=\320r\256\275\275\203U=\301?D=\270\217\221<\363\307\013\275t\370\321={\224\350=\241\215\377\272\344\217\313=\r\327\250\275\217DI<tY>\275n\321\222=\247JM=\264b\"\275j\231\007\275\210\257\005>P|\010>\376k\001=\274x\223=\357nV=n\200\271\274\336\361\200=\312\223\345=/\263a\275A\304\007\276g\325\315=\333\364\346\274\006\2320\2751\321\275=\277\322a\275\225\251Y<\0008\354<\001d\210\275\347}\204\275r\357\207=\330\376\010>\336\261\031<.\330\271\271\373\002\360=\"\3320\275\013\343\177=.\366\346<\212\207:\274\270{\305=\207\036J<\312\031\000>\375\370\003>\016\254\332<\031\315a\275.~\014\276\021a\224=\027\363\316=\332\210\007>\035\252\275\275\376\216\025=Bb\204\275{\325\367=l\221\376\275km\323=Q\327\201;f\007\235\2733%\002\276Y\"\372=;\302\313\275E:\010>\345:\277\2753/\n>\205\274G\272\220\251\356=w\016\\={/@\275\3567;\275\263\324\271=\304\007\375=\345\027x\275Q\000.=%Z\243\275@t\257\273\267\005\223<\270\313u<qg\305\275\343v\220\275\311TF\275c\375\201=t\271B\275\241 \361\275t\276\224\275\335\250\341\275\306\213\216\275\005\257\202=s\314\004=\003Y\324<T\347\267\273\224<V\273h\220\261=\365O2=$\215\237=2\325\001\276\353\232a=\276\215\311\275^\251u\275\035$\235\2752\211\360:5P\221\274\330\200\'=\334S\306\275\210x\221=\'\321\n>\340M\254=\310\036\000\276\003\212\376=m\200\242=\377\242\300\275EW\204:\247\224\020=Z\346 \275,\252\207=]\014l\275\270C\350=\362y\231\275]\204\312<\206\273\001=4\177\320\274\224\326\222=c\347\251=U\2738\275\014\323\261=\252\346\370\275\r~\014>\276\210*\275j,\032\275QG\305=\364\320\267\275\267\020\256\275m\333\211=\353\234\010>e\320\352\274#\226\235=G\274\031\274\\\002\376=1\327\001>\203B\321=\037\354\204\274\256*\013\276\3438C\275\027\250R=\274P\r>\353\355J\275Y\2072=\225H*<\306\'\227\274\207\276\261\275\026`\366\275\266%\262<{\3760=\337\203\004>\362\314\203\275%d\234\274$\257\332\275\250\364\377=\371\224\014>S\321\212\275\214\322j=3~\002\2766\025\266<y\362\223\275\305;\002<\006\2666=\366Q\237;q\245\000>\354\037t\275\354|\235=XR\316\275\210d\332<\332\227\037\275*\221\320\275V\357\010\276\360\372\325\2742\316\004\276\356/\204\274\311`\251<\274\260\376\275p\017\212\275\267W\000\276\316\370\231\275&\305m=\264\007\226=\274E\226=\362\331\232=p\325\354=\211\253\232<\245`\005\276\342\353\321=\004\335\376\275[2<=\334\305\014>\256\251\205<\316E\301=\245\343\013>L\302\357=\253\351\201\272\314\351\361=\266\204\030=\256\301@=\227\212\326=\r\024\310=N\311\267<S\n\342=\317|w=\177\2148\275iL\003\275\"\335\240=\222\302\232\275\351\345i=\375\237\307<\360\036\310<\341z\373\275nc\235\275\367\014f=\323\311[=EK^\275p\325\366\275\022f\272=(\351\001>)\223\341\275\231n\356=%v\001>A\217><\371\273\004\276J\224\024\275v\343\226\275\n\360\002>;\227\000>Z\367~=\255\241\342\271\211d\'<\243\246\255=\022\367\253=\277\241\223\275tk\333\275\331\244\277\275\241\206!\275\370\227y\274(\204\276=Dt\n\276\357\255\020\274\245\215\334\275\222\221\010\275\210\344\240<\3317\364\275\032\342\263\275\271\277\'\275s\350\251\275\377\325\005\276b\037D\275\373L\357\275\355;\005\276\006h\223=\335\314P=\300\004\311= \210n==\374\375\272\327v\241<\032\200\320\275\277\243\234\275\006{\266<w\222\226\275\245\311\235=UY\273;\351Z\315\275\350\177\361\274\010\250\260=\013l\213\275B\265]<\334\341!\275\2150\001>\357\211>\275\315\217\323=>\266\006\276\203\330\331=\207\347\274=U\375\001\276\005\021\323=3P\216\275vr\244=\346\212\341\273\261\351\234<\222\201\000\275\032\220\003>\266~\230\275\305m\237\275\212\300F=\230\206\032;\016\360\336\275\222\220\037<\330K\372=\306A\r\276\374\311\003\276sR\254<\001\352\r\276\033\322\273=Z\231\363=\003n\344\275\240!c<\004\353\'=\366\033\r\275\347\322\245=/\036\246=\337\232\350<u\'\272=.0\237\27529<=\372\373\242\274\315\224\360=U\007\311\275a\256J=l\003\013\276C\312b;\332\344\341\274\260\206i\275F\254n<\245@F=\307\274[=\220F\347<\017e\206=\260\357\n>\375\376\001=\302\326Q\275\346\257\n\276\364\310\324\275\314p\354=|\342W=\270\341\335=\247\312\241=L5\007\276\tA\214=\312\027\272\275\317`\244=\037\254\371\275\230\025\241\275\213q\233\275\204Q\242\275\327\013\316<\370\216j\275g\030\265=\246n\315\275\205\305\256<\322\344}\275\323\272\325\275%\032\267=N\367\375\273\225\377a=p)\240\275\247\361\210\275\262\013\016>\031\264\034\2751\'\365=|\005\265=c\244~=\234#\220\275\245\017\371=\223+\377=\364\016\346\274\265\317\301\274#\243\220\275\213\327\035=U\320\276<\3012y\275>\275 <\026\222\333=\371uM=\2631g\275\236%\341\274\024\325\272\275\242dh\275\273\005\016\276\024\010\317<\226\275\360=\300\034\007>\021\245\231\275\316>\\=\224\276\243=\260\025U\274\nZ\331<$\373c\275\322n\241=*S\353\275\2510K\275\020\377\014\276\307P\033\274\347\010\234\275h\n*\274\0364\033\274\371\370\236<\214\260\261=\237\300\252\274\320NY\275\324i\372<\003\372\231=y\346\214==\331\207=\"\311<\275\203\312D=uG\355;!\332\372\275\254\003\201=\316\302\231=a\2562\275\236\340\370\275\"\254\220\275~e\253\273\010\001\346:j\020\177=\0015\017=\344\330\336;A\366\246\275&\007.=\032\"I<\0217K<\262\337\255<\321<\007>\350f\230=,!\243\275\260\373\210=\356\325\014\275\257r\304\274\000\315\356\274\2665\265\275\370\332\340\275G\272\014>\205z\315=\262Kc=\264\020\357\275\240%\211=\\\333\310=3\312\250=]Hg\275`-\033<\274\020\325=\0336\251\275C\345)\275\336\010\315=\256Uy\275f\322\017=K\010\006>yC\252\273\227G\r<\200\274\301=n\216\230\275\202\003\213\275\345\356\330=lE\204=\303\240\361=\2042W=\251\313u=%\212\231\275\313\227\345=\366bU\275\233\341\333\275\324\347\262\275\350W\260\275\304\304\336=\310\304\204\275l|\252=/\020\'=\234\205\354\275\365m\234\275Mu\363=\224\030H\274/s\010\276\226\235\207\275VD\354=\362\014\246\275Yq\005>\n\0302\275\346CW\275\023\252\323=\272!\002>\016\n\346\275\367\276J\275\232\016\364=g#x<@\365\010>\335\206Q\275g0\335\274\224\375r=]\367\232\275\347\327\365\274by\242\275\234\243Z\275\001\035\031=\316\327\035=\334\"\320\274c\323\010>\"\360\353\274[\271\202\275\331X\315\275;]\224;v\312\320=\257\207\362=\234B;\275W\022\305<E\276\252<\320\376p\275%\025h=\224\231\225=\337o\241\275\234\352V;\310\020\300=\347\323\013\276\376&\230<\2132\325=V\010\240\275Yvv=\036\306\005\276\271\036\270=A\367\373=\006\351\004>s\260k=\205\350K\275\251\210A\275\t\325\327=\377H\354=\324N\367=H\n\317\275\234z<\275\020_\254<\341\324\241=k*\362\274\023\374\343\275h4\255\275\350%\321=\235\225a==\273\010>\233\355/\275\353;\226\275\256Ey<5\307\202\275\357\236\222=.\341\323\275\007,\321\272\251\004\241;@\311z\275\327q\222=\330\304\356=\036\n\240=\003\336\215=\315~\277\275\311P\302<\342G\313<rn\316\274\356\336\r>\354\271\252\275\204\206\367\275V\224\326\274{i\200\275\\\341,\275\352\275\300\275\330\325\021\275v\343\310<\364\233\207\275f\r\232<X\355\371\275\302l\372<\307&\002\276\350t_=r\314\032=\371\252\270=\211I\355=\304\360i;\233u\211=\370\277\250=_\006\022=\251\017\013\276}J\370\275\264\002\007\276\004\233\217\275}WP\275\025\276\360\273\342(\'=\341\013:\275\\\201\336=b\351\013\275\t\373\203\275-\346\325=\322A/=\nh\254\274\204\036\340=\270\003\355\275\222\234\352=\350\n\000>\016TA\275\372\206\310=Y\262\301<\253\300\370=\217f\236\275,\321\032=\236\373\361:\331I\207;iP\276\275\224\036\324\275C\332\215=\341\221\331\275\237\nM\274\263f\206\275\337\336\266=Hb5\275\227V-=W1\t\2766\240\225\275\237\"\303\272\223\3351\275\2517\263\275\307\206\026=\363Y\013>\210<\266\275Zd\315=\225\224\353=\221\236\027=t\363y\275\215\030\232\275k\"\234\274\327\372\314\275Q<\246\274\241\357\324=\316\200\0138\377o\002\275\001\375\304=8\367\313=\177\333\326=\\\234\226=\344$\275\275C\343\237\275F1\363\275D\266\005\275\016h\374=\032h\266=\266!\376<\t\311\310\275\226k\301\274[\033\365\275pn\373\275ye\332<\316\r\274\275\006S\036\274s\367\217\275\323\004\320\274\346\"\262=`=S\275\362\217\326\275\nG-\275\312\020\3129\312\003\211\275\305\013\331\275\037u\t>\223I\361\275\314\337J<B\003\310\274\026\250};Z\232\223\275y\300\226\274#\344\034\275\336v\242\275\250C\307\275X\333h\275I\002\332\275\324\375\275=Q\244\200\275Pb\r>\325\010\214=:\276\251\274\210\030\351\274k)\277=f\373\343=\2048\326\275K\3721\2750 \367=\"\244\361\275]\371\343=\035q\010\276\207\316\000\276\023\347\206=8\365C\274\201\274\273\274\272\336\366=1\031\361=\227F\264\275\347\006r=\226\267\260\274:n\000\276\372O\014>Cl\301=<8\005>\0254\257=\230y\347=\326\270\302\273\351\374\346<\237\364\232\273\254\315\022\274T\3361\275k\227\007>Bu\270\275\305\302.<\032lW=\313\315\003\274\271\270\204:\006\303\367;\271\346\323\275\314\240\274=\343k8\275\032x\363=k\n\r\275jU\207\275&\312\334;\266\240\363<p\017\007\276\346\003L\274R\334\021=9\016\342=IF\240\275\274\350\237={\375\314<\035\327\213\275C\241z\275R;\211\275T\004\345=xdL=\"\363\246=\320H\307\275\036\\\306\275Y\304\367=u\200O\275n\340(\275\373\261\014>\263\246\301\274\"C\370<Y\013\255\275\364\367\372\275\333YJ=j6\371=k5\357=\037%\233=/\"\357\275\033\261m<\013\353\353=\367k\306=c\245+=\343rK\275B+\226=\204\254\006\276\235he\2759\203\244;\321\3551=\317\354\373<4\273\335=\312\313\201=\342\200c=O\032\005\276\275p\273\275\305\202\325<\336\025\370=\302)\003>\212r\006\276}.\227\274r.\375\275j\236e=\335\274\305=\237\233/\274K:\201\275\325\325r\275\356i\327\274qe\003\276\006t\311\275b\277\253\275\345p\343=m\313\311\275+\355\345\275\350m\312=d\267#\2744\330\315=\034\305\356\275\373\3767\275\202\3060=A\346{=\257\nh=X/\335<\216O\336\274\245\346\003\276*j\335=\335H\213\275\254v\266\274\366\206[\275\2471:=^\270C\275{\2653=\355\033\321<Y\3658\2752s\224\275\310\030x< \347=<\263\327\371=\237<\345\275z\233\241\275\205~\034\275,\256\327\275\022eR\275qB6\275\216C\272\275\312\003E=\2409\375\274.5\036=\177kc<\315\261\001\275\352*\201=!be=\016j\374=\001\334\372\275,\001\317\274\023\204\027\275\004\000\013>Ev\204=\307c\332\275\372+\320\275=\264\206\275\242.\305=\224i_\271\206\026\347=R\031g=G\033\334\275*\024\337<\257\032N<X\227\250\274\267\025\337\275\330S\t>\312\205\311=\370L\004=QP\016=\033\220\t\274M\002\201\275\301\324\271<\321\245\004>\3354K\275\031\372\000>\360\207\247\275\217\3632\275\303\'|<\2726z=s\274\004\276\027\214\257\273\350\360e\274Q\302\206=\241c\006\275\373!l\2758R\367;\356PQ\275\225nm<\232+\334\274,[\355=\210<a<\032 \210\275\356\204u\275A\227\001=#V\207=3\203\014<\214\036\246\275\223zG\275>\363\004>+9\r<O^\310\275\221\373\244\275Ki\003>\020-c\275\330\245\000\276\340\002\254\275[\031O\275\340F\022\275k\365\364=\"\014\371=\222\324x=\333\260\320\275tN\306\274n\002\222\275\031\021\202\273\016%|=\017\177\302=\324\273\351\275\306m\264=>\265\335=sH\333\2752\355\t>U\317\324;\256\310\277=u\036\253=cL\035=\201\026\232\274\3517\220\275\344\325\025\275\364\351\202\275$J\203<{\334\303;D\326W<\013\016\212\275\341* =\3315\330=\'F\214\275:\261\275\275\276\004\334=i\214\004>\362\341\t\275\330H\344=E\312\235<3\250\237=\014\007\005=\357\233\327\275\007\366\004>\245\030\206\275Rvf=\256aS\275\366\336E\275\253\212\205\275F\357\256<p\215\236\275^\2111\275\373\020\346\275)\266\256\275\253\024,\275W\354\004\276~\016\251=\272\315\001>\307.\214=l,\030=%%\022=\226R\351=#@\n\275?\352S\275\272\250\377< \335\014\276\346\r\300;\030\376J=\341\354\327\274XY:\275\177\271\207\275Oj\\\275\313\336\370=\246\226j\273\254\001\010=p\267\242\275\232\310K<\314\001\227\274\t\251\005>.\317\n>\353{\210=i\201\005>#N\206=\025\177\307=d\273\236=\277\254\302\275o8\310<Vw#=&\355\210\275\340\235\001\276\214\352\260=e\331\260<Z\004\315=\020\330\267\275\030\350\254;\376V\307\275\242YX\274\240[\350=*B!\275Z\314\245=\006\223\353\275brv=\366\321\213\274\322\240\347\275\365\365\013>\325\340\356=\2175+=S\200\"=\021\340\372\275\206\017\021\2758;\211\273G}\r\276\\P[=\273\367\255=\260\222\346=K\237\313\275\351\036\261\275\233Ei=\377X\310\274\346\254 \275\003\320 \275\020i\254;\357\275z=\320M\017\275D\353\231\275l\031\306;\203b\224=ui\357\274\177\271\263=\260\377\337=S;6;R\373\360;8\034\005>\351I\310\275\037\227\230:\270\2069=\326\376\355\275\360\270:\2752\352\007\276R\215\206=\312w}=8n\224\275\206f\354=\246\321\356=\230\025\275=2\3361\275\311d\271=\220l\200=\316:\321=\3437C=t\370\004<Y}a\275\2416\n\276\010 W\275\362l\345\274I\253\276\274U\242\017<b\004\324<\035\2226=O\003H\2735Z\336=\245\nL=I(\324=\377~\311\275\342\245\320\275\022\300\'<\261\315\210<0\010\220=040\275\232&0=\325H\362=\222\253\266=\234\031\335\275\030pB=\365>X\275T\223\352\275k\233\024\273\033\025\330=\334Z8=v\277\000<\211\327!=\223W\033\273<=\301=\207.\375\275T\264\202\275\251\347\222=\312\252\251=~\363\n=C_\000\276jy\207\275?\003\265=}\2776=$a\275\274\306\346\204=\013\017\372<f\200\271\275<\321\210;\307\305\n>Y\231\272<\350\020\265\275\372\370\013>\224\226\260<^x1<xn\006>.\274\253;t:\234\273\017\253\004>\177*\263=\324\371/=a\252\300=\314w\206\273\364}\307=\312\276\002\276*.[=D\334\310\275\374]\351<\274K\226<\235m\200\275\234U\336\275\361\227\211=!7n=\330\034\222=H\243\221\275*\241T\2741\250S=\270F\231=x\347\'\274\242\266\275\275\316\031\221\275\212x\243\274\210\303\315=K\334R<\251^\242\275I1\246<q\317!\275\246P\032\274.\366T\275}\217V\2742T\227=uov\275\2534\260;\227\007\352\275\323\366:=b\017\003>\244\370\002\276\230\325\301\274P\377\n>\362\365\367=Y\032\217<F\301\n>\244\034\n\276{Kk=\276;\271\275\326o\345;BG\000\276N\226\356=\262\317\013\275\242\337\243\275dn\r\276v\235)=a\247\271\275CR\004>tu\367=\377\277!<G\032\014\2760\243P\274\365\211\230\2753\352\263\275z|\265=\343\353\004\276\264\302\201=\254\265\033\275\240\021\376\275\013b\226\274\014\353m=/\224&=\214\324\324\275$\202\267\275q\003|<GG\034=JH\344\275\355\356\324<\244H\003>\335\374\277\275\310\017\212=1\307\323\273\240\0035<\030K\000\276]\032\372=\206\360\027\275\3246>=\326d\210=\234\246\014\276C\315\027\275\\\t\214=a\374\361\275\242X\215=\340\342<=uj\007>]2H=e\027\230\275l\341\t\276\034\202\276\275\313\300\246=\234\215\306=\203\177+<7/\360=\376\217\335=\367\277\200\275\002C!\275;\363\025\273^\306\356=\233\271?<\321\340\235\275\233\341\201;\027\020Z=z\005\240\274\330p\264\275\316\276\221\275\230W\033\275\223\\\007>\340\344\342\275)\312\005\276\255v\311=\347\241\323\275I\245\251=U\372d\275\357~\004=\372\032\004>\025\323\027=\204\263\333=\302V\014>\rLM\275\360\356\275=\361~\004\276\300K\361\2751]\261\275\215\320^\275>\350$\275\346\213L\273\261\\\376=\236Ft\275\273\212\222\275\020\240:\275#S{=\313\235d=\214Z\220\2748u\010>J\206\363=Fr\241=\035\2108\275<\270\366\275sK\270=\315\251\371\275\354\002\324=\265e\r\276\201\231\374=\262Z\252<\235\3679=TA\215\274\204\257\213=\302\210{=`f\301\273\362}\342\275\231E\243\272\006\200}\275\243\301\232<\3603\210<\261:\272=\020\311,\2750\342\003>\267\177\361=\2636I\274_r\004>\233s\312\275F\004\221=]\214\352=L\037\220\275\2042&\275g4c=\023\007\252\274\332\'\257\275\204[\220=` \240\275\304\311\205=\250K\237\275\262\334\264=eT\375;\364^V\275\241\317\302\275\226\272\027\275\213\272k\275\242\242\340\275\362\0265\274\262\351\023=I<\375\275\342y\303=\237\372\377\275Co\275<\323o\223=\2719\360\275pQ\000\275\347\300\000>\374/\304\275\317\034M\275\345\233j\275\217\217\036\275\241_\253\275\'9\371\275qE\276<<O\006\276\223\264\252=\217r?\275\032,\267\275jRb=mw\013\276\003)\213\275\256a\013>Cv\005>\016\323\275\275\253\340\346\275\274\323\030=H\034.\275\024\250\246=76\352=9\301\333\275\235\266G\275\327\272\n\276z\017;\275\342\364\274<>T\004>\214\316\323=\204r\301\274\324z\375<U3\301=\324\362\274\275.<\353=Q\344`\275eB\026\275B\303F\274\033X\247\275\2079)\275h\302v\275}\030\005>\376lZ\275\367\2101<\344T\010\276\246\270\224=\211\324$\273\347\324\013\274\227B\262=ioo<g5\t\276\225\247\275\275\354\233\352<GE\352\275\034\320\262=Q\255\357=\352\275u=}\361-\275\023{\223=j]\354\273R\027\314\275\205\227N\275\255*q\275\240\373\320\275)n\336=\352\315\317=\3765|=\2201\002\274-u\360=\350\242\005\274f\233\306\275\201n\r\275\225\353\245<\022\345p\274\315o\272={\324\366=\307t\323\274C\367\313\275=;\337\274\322\302\"\273Z\004\247=$\244\214<X\321\240\275\231\317\010\276\267\2508=\220\001\230\275\365n\272\275\271\224\002>\017%\023\275)\250\225\274\227\322\n>\rq=\275\275\205m=ts\262\275\356\264+\275\255\262\237=\016\325i=\341g\216\275\374\271h\274\267\372\301\275\306\013\265\275t\372\230\275\214\224\246\275H\244_\275\303\014K\275\243Q\351\275\267\354\224=m:\031<W\007\265\274>\231\226=\036*\327\274\202\306\362=*\004\200<\032\330i\275\346\263\034=\245\002\216\274K@\r\276\0356\300<\204\205\310=IW^\274\007\252\337=\311|\211\275\270\366\275\275\205\331o=j\270\360\275]\360Q;\255\246\355\274Z\260H\274\265LP\274\327\016\340<\360<t=\264\241\244=\235d\n\274\355\024Y<^\242\030\275f\004\332<\214L\313<r\306\241\274|0\030\274\334^\327=\333V\031\275\327\231\352=\211\363\254\275\252y\233=Z\001\235\273\003s\017\275\225^\240\275\242\301\231=\254\004\034\275\226\316\360=\021\371%\275:1\223\271\t\030\314=\250rc=\360\335\013\276\351>\323\275.\007\355\275\334:\304=\377=b\275\365\265\342=\226\215\201\2751n\345=\207;c\275m \006>\022R\367\275\326V\303=\2621\221\274\006|\002\276,?\010>\303\r\331=\200hX\275!\363\371\275\314\275\324\275a\n\363=\237\353o=\361\336\027=Q\352\223=\317-\345=9M\265\275\247\345\275\2753\337R=\223\013&;\251=\241<J\261\002\276\242\314W\274\277Y\024=\357\020\232\275\260z\322\275\223\253\000\276C\020\351\275\373\204o=\343dd\275sS#=\210f\027=\226\220\014\276\230\234\342=\020\324\304=\206i\210<\277\351\031\275\317cW\275q\256\002\276\332\\\206\275\225\227\310=\366\n-=XB\254=g\270\254\275\350M\262=\200\372n=\203\333\265=\276j\330<m\036\000\276>bl\275\0214\262=-@\316\274\217\201\274=\374\227\241=]\037\315\274\267\270\200\275\246\341X\275\373W\373\275\2026\220=4\347P=\274\254{\273\267U\240=\247u\205\275\340@\333\275\273\371\273\275\020?K=\351\206[=\347\203\266\275\251/\002\274\300\275\255=\013\305\005>\241\217\303<\027\321\305\274}\233e=gn\032=\333\003\204=\n\016$\273\004\2202=\312\233\275\275\3002\345=\346\364\330=\010\036\223=k\023\247\275Ta\365\275\337\245\211=R\226\n>\313\027\025=\343c\277=f\357\321\275\242\366\215=\236\350\222=\214\232O\274s\210-=T3W\275b^\001>\332\235\272\274\t{\267\274\217#\371=]\307\246\2744w\360=q\364\010\276\214y\002\276\232A\006>\005\335\344\2752X\024=\303\255\020=E\'\375\274a\027\203<Q\230\356=P\207\324=\177D\004\276;\036y<9:\265\274\360\356\342\275\225\333\334\275\303R\320=\360\327\345\271\031_\311\275\017n\207\275Q\356\350<\364\237\250;\034\214\262=\007\003M\275)\350\n>u\020\263<B\034\274=\017\265\376<\211^\250=\235\245\242=\276\036\275=\006\025\360\275\274[\n>~\203\340=+\373\257<>$\250=\020\037\n=\352>\016<\241\315\312=\320\215y;z[\350\275\247\0314\275\037H\350\275OP\010\276\265\315\300=\360DN\2755\037\323\274\013=\241=\331\0066\274\223\210@\275\363.\005>*\215\330\274\026*\006\276=Z\317\273B$\360=\353\345\230\275<\316\342\275\252\002!=:\273\226=\357\327\013>\276\201\r\276\002\356\305=\270*\363<\364 ]\273\\P/=:!\214\275\342\352\364=\266\'\235;&lX;\327f\250=1\301\217<\373#v<>\244\212\275\354\266\022\275\022_\355\274\317]\254\275.X\232\274\233\002\211\275 \255\330<\016\243>=\034\206\336\275\324@\'\275\033X\222\275QLx=6\312\316\275-$#=;\325}\275i\221\236=\263\252\347\274\322Gi\274^\326!\273{\377\313\275\377J\261\275\341\227\341=\231\256\271\275\314\223U\274\0208\246<\265\010\t>h\261\261=na\026\275)\264\372<V\273\033\275r&\346\275\236\357\274=\330\353F=\211#\201\275\275\003m=\316\250\257=UPH=\320\235Y<\013\214\371=\307g\344\275\321N\247=\005J\345\275M\2435\275\031[\322\275Q\261\247<T\210\235\275B\014\353\275\376U;\275b\325\276=\036v\332\275\267ae=\311B \275b\365\373\273B*\231=\0230\"\275\007\\{=\0351\311\275\307\2023\275\0305\001>\3241\021\275\214L\342\275\246i\223\275\320kB=\326\313\014\276/yo\275\224b\305\275\027>\002>\"\201\214=\016\342\352\275Z\245\312\275\367\027\224<\316c\t=\0372\211;s\321\263<y\372\007>O\246M=\305\374\232<!\214\364=\215l\236<\220\025\312\275\177CF=\227!\266=U!\271={\247\376=v<\270=\343\025\255=!|2=*\375\207\275\236\201\276<\333\366\\\275++\202=\305\363\326\275\261\273\001>Uo\217\274$\236\246=0$\006>6D\333\275#n\'=|{.=\"([\275\257\362t\275K\006\234=\317{\204\275T\017-\275\241\354\347=`1\241<\302\350\r>\202\251\\\275)\013\331\275\236\261\342\275\247\334\240\272U\353\334<\331;\242=M\017u\274!\233\240\275\035x\220\275\376\020\003\274\277!\000> \362\212=!/q\275\016R\303=\320c\376;\024\347\245\274\241\r\324\275r9\032\275\330\301\n\276\002\243\202\275\321\365\252=\323\037[\275\270!\326\272\204\341H\275t\350\262\275\022\035\246=\344\242\253\275\344W\271=.\224\234=\341du=e\017*\275\0328\025\275D\362\204\2751\377*\275\316\243t=\270\211\345\275\256\346M\275Nd\342=\2372\310\275+\013\263=\305\215\246\275s\256N\274\240\374\336=\320\311\017\275\261\242o;\237\027\010>\303S\322;\t\214\223\274\317J\350\275\004s*=\206b\314=be\247<\315p\014\276\026#O={!\003\275\354\244\215\274i\242q\275\236h\270=*QL=+\230\260\275\236\255!\275\020\254\231\275A\002l\273a\027H=\213\324U=\223\013\006>\220\320\002\276\310\224j\275\254\367\247\274\372v\'=\"\240\333=~f+\275]\002\271\274\347<\360\275\213V\244=\315\025\033=p\321\305\275\372_\256\275\007\266\310=v\252\014>y\365\233=j\262\203=/\0046\275z\354\333;\274=V;\327R\272\275\361\026\250=<\030\302\275\234\271\315=\302\230\301=\341\004\240=kH\212=\344\010\000<b\257\246=\244\247]\274\313{\241=\330,\203=\"\264\273\275\361\037\004>sx\014\276\246\2412=\233\313\005\275q\377\247;\350\322\351=\005\347\277\273/\271\367=\267\275\311=e^U=\'q\305\275T{X\275\370\301\036\2747j\334=\347\372\014\275\207\302\314\275\234\227\366\275\004\027\010<\376\245\366\274\250N3<\027\247\r\276\033j\277=4J\210=C\272\205\274W\257\213=\204Qg=\275\304\336\275\370\325\370\274\006\313\346=\245\026\264=E\031\330\275\244k\t\275\347\357m\274\262^\330=\223\350\007\276\007\265\302=\\b\321<R\007\364=\226\316\035;9\214\211\275\217y\263=\026\000N\275\\b\013>T\372\270=:\025\247=z\365\007=\324\310\003\276\316B\305\274\227Go\274x\227\225\274\350\007\252<\350\254\323\274\027G\212\275;xK=#-\321=\250\254\245=\242\317\005=\203\013f\275\216\321\267<M!\315\275l\365a=\"$\n\275\014o\251<J\355\373\275\233\340\265=\203\320T\275\272\361i=\264\302\256\275^P\275=\236%_\275\341\212\236<\374A\360=\372\217\356\275d\212\371<\0133\360\272\253\214\241;\022\202\362=\301\227\216=H\237\317=\260\037\214\275\204\222\355\274\263r\201=\314.\202\274\205\325\376<`\013}=\212\240\371\275\203\'\270\275 \232\n\276\213\251\353<\354\312\336=\365#\016>t3\215=O\001o=q\303\376<\036\345e\275\234\362\n>\2170\253=\207\017\253\275\260\245\253=E\325\256\275\017\3168\275\255\347w=M\255\275\275\"\215\335<{b\272;\004\377\361=vx\227\275\361\347\230\275v\211\324\275\321\316\231\274\001\314/\2753\352\254\273\001\323\345=cc\271=\331>\"\275\354\006\212<\236\024\r>Z\203\010=\337\345\006>\301\274x\275\021*\265=,\"\272\275I\301\227=\335\276\342=z:\264\274u6\001=\035s\336\274\367\021\r\274u\232`=\324\036\253=\r6\222\275r\275\306<\347\362\351=2\366\224\275\365\353\365=\316!\365\275\330\277\263=*\373\364=\201\271\356=\227\233\356\275j\205\240=\330\216\226\273\311G\374\275\273\251\267=\340\343\222=t\212\005;\344.Z\275\262\320\027=Yod\275\"\033\264\275\242\246\374=K\245\222=\332\326\242\275\023\227\254=/\033\034=\331Ja=\313\030\324\275\224\n\014>OT\306<cbB\275\246\t\366;\237>\206\275r\233\312<\'z-\272\020JQ\274\365\376\315\275\0039\244=j\272\001\276\221\251\302\275\241\255\370\275g\260*\275tY\226=\262\033\020<\270\1773\275\210\246B\275\247\241\222<\377\225\305\275\320|\265\275\374_\204\275\370\200\017\275.\307\n>\204\204M\275\023\234\013>)\227\331=6\246\001\276H\357\342\273\025-\024\274\330i\255\275\265\033\372=\245\323\310=\261wU=0\321Y<\266\010}\275XE\202=g\272w=\324\357\304<<\020\000\276\032\321f<\336}\211\2756[\341=#\300\371<\3118\325=m\027\236=B\267b=\032u\372\275\301\261\003>o\177\306\275Q\370\216=}\242\200\275\021\250A=\347\332\254=u\021\222=O*\343=\004d\270\274\215\335\254=\006\332\243\275\201\376.\275$\317\312\274\367\372\232\275M\236\231\2755f\265<\230\367\343=\347B\356=\271\225\034\275\362n\027;\023\340\355=\246\024\343=\216\274\347=+\003\335=\320\355\344<r%\330=s\260\325\275\243<\275\275w\032\016\275\277\021\257=v4\356=\177\322\222\275\r\336\275\275]\272\021\274\0344\000<\262o\270<g\256\344\275&(\014>\030e\251\275\006\200\273=K\275\301\275\001\336\321=\001\242\233\275\361[\330=\262b\014>\006G\337\275f(\016\276\255\035\264\274t\271\007\273\365\327\327;qG\375\275\250h\330<\243\006\320=h\350\r>\345n\251=X\335\250=\370\003\253\274\271F\366=\006o\r\276\363\350\273\275\323\226\366\274\000Z\010=\277q\327\2740x\010>\230\367\343=*\014\276=tG\340=h\001*\275\352\342(\275aY\375=\254\361\020\275\252\3527\275\345\257\202\275$\244\376\275\005\177\363=\333\321\336=G\374\332=BMS\275*\306\222\275\3773\315=\260l\023=e&\311\275;{\303\275s\311\374<<oz=Q\215\351=U`\234\275M\314\360<yA\371=\200\235\207\275\'g\344\275\212\331\364=2\363D=]n*=\277\215\227\274\010(\252\275\322\261\214\274[\277\242\275\362\273q=\327\315\237=\376\n\013<\323\202\001>\232\232\203<{b\253=p\220A=X\\r\274<O\377=Y \247\275T\234a=T|J\275\263\227\375\273,\025\264=\333\254|=\317;\346=\364\211\346=\214\320\353\275\212\305\010>\373\010d\275\206Z-=1\206\323\275\271\310\226\275\343d\221=\367\003\265\274\227 \362=\375\370\035\275\233v\311=\373\243\344\2755\257\330\275P\246\342\275LT\001>c\315\273=\342\350\345\275\353\252\004>\230\375\357<\022\241\014\276 \351\253\275\027\362\255=\226\324\365=h\3335\275\243\t\315\275Ym\224\275!\002T\275-o\355<M%\341=z\233\002=\335J\212=8\022\263=p7\003\276\305_Z:\274\3158\275\215\005\213<\376\3078\275\344\024\344\275\247\240\255\275_\316\325\273\227\361\256\275;\354\254=:\\.<\\\2233\275G\317N<\027m\353=\323P\205\275\022\033\204\275\006\250\320\275\023.\330\274\033\242\320\275\335\027\223\2751\246\303\273\274\017\322\275j,\234=\325/\236\275`\336\223<\226\032\320\274\364\225u\275\224EU\275\271\265\302=\244\220\236\273>\361\230=\377-\004\276\316\324\242\274\031\013\002>\252|\305=~S\313\275\377_)=Y&\000\275gh\310=\241\233+\274\377\362\223=?\202\321\274\214\001E=\000\264\216\275\204\206\345\275L\342\031\275?\366\274<\013:\360<\327>\273=u\226\346\275{\344\\=x\221`=\350\026\364=sL\353=\n\036\216\274|,\264\275O\306X=\303n\360=\316l\243=|\027\337=\375F\t>\036\330\305<9\334\317\275e\370\306<Q\356\260=vm\n\276\270\335\375=G)\254<\215E\243\274u\003\374\275W\300\327\275){g=\314N\236<\337\374\306=V\310\214=\305\266Y\274\333\210\022=\271(\306=(\017e<\204\276\373\274k{\010\276\265C\225<\273d\325\275\257\352\t>J]\270\275\210\001\215=\277\341\234\274\032\251:<\220\331\235=\233\225\237\275~\346\276\275o\253\341=\017\270\216\275\315\274\000\276wd\223\275,\t\n>\235\304\261:\242\006\326=\373\213d=\263\250\325\275\261\363\203=m-\242\275Z\316 \275:\351\226\274\250\010T\275\242\227\032\274\033\224\260=\003\007\317<\342Mq\275\272U\304=2\312O<\024\361\211=\247\205\000\276A\271\n\276!\260\371=\350\237\250\275m\353\247=\337#\016\276T\206\301=\016\002\211=&\303@=\260~\232=\314\2001;u\256\202\275H\326H\275\361\017,\275\333\317\267=\013\001\013=\264\276\006\276hu\221\275\327\225\254=\270\357 =T\0007=\305\342\302\275\225^\254\274\365@E\275\"z\377\275X\000[\275\317\212\276\275\001\345\307=\240O%\274\002\327<=\267\272\256<0D\330\275\003\027\027=\334\335\010\276}\316\301;\214\253\202\275\3649\003\276\255\240\276\275.Y\367;\357\354\254<\263)\305;E\336\207\275\031Y\206=8\312M\274\253\356\200\274\237]\367\275q*\370\274K\311V\275\254}\312<\027\277\340\275F\201\210\275\010\033O\275\355\245\240\275~\354[<\221\352e\275\340o\353\274M\2577=D\2654\275\242\200J\275\376\214\346\274\200\334m=\215\"\001\276\3561\245\275T\351\354=\373\212\354\275\024u\211=X\206\263\275kL\251=\014\226)=\363\211\344\275\321]\251\275\351Q\335\274\323;\353=V\2212<\254R~=\255\017/\275\005\232\274\2752\000i\273\377d\016\275\220&\310;\023b\231=\376E\221\275[3\321=\222\026x\275\340b\361=uL\374\274\364g\006\275\373$\346=?\034\370\275#\261\325\275\236\377\364=\270m\337=#\270\255<\243;)=\337\004\275\2743a\260<\007b\271<]\177\227\275%p\320=\342\257\242\275\323\252\r>z\025\212\274\360\206\227\275wU\004>\367n\327\275\367D\322\275\\z\"=\200\330\355\275\211\263\252=\376b\352\275\017\361\001\276\353.\354<\215q\360\274\240\343o<H\'\037\274\036C\003\276Q\\\211\275a\233E=`\\\246\274\332\257\326\275\327\277\250\275\356>|\275V\321\201=8X\371=\367\345\366\275\254\021D=\221\375\324\275C\217\335=\207r\014\276\017\315J=\021@\332\275)k\247=\330\335,\2757d\246\275\036\227A=u\200\373\275\277\372:=\243\222G\275\024\212k\275E\033\000\276\204(R\275\200\023\267= \335\335=\340\255\373\275\324\232\302=\004)\264\275\0105f=\014$\272\274\376\303\032=\007\234\352\275Q\277\202=\364\241\276<\252P\362=\206\235.;xW\301\275\252\331\346\275\207\247\035\275f\222\341\274!\305*=\212\t\014>\333\326\350\275\372\3141\275\362\315\245\275\005\275%=W\352\205=\277\222K\274\345\020\240=R%\364=\025\277\332\275\341r\300\275H\215\244\2751\303\306\275<\256\316\275O\317\212\275\005\361\223=\341\201\241\275\005yq\274\362\246\247=\307\257\267=q\232\001>\255L\320\275\350\254\366<\241c[\274\005\220\367<\353^\367=(\005\231=\230\221N\273x\365\232=W7\254\274\233\214\356<\376\272\212\275\025N\304\275\273\036\271=+4l<\244G\250\274%z\355\275\037J =\3443L\275\300\373\213=Qa\322=gH\251\274\362\227\007\276Vpd\275\224\035\220;\320k\217=\260\000\345\275\233_\340\275\236\320Y\275\324\374\337\275P\201<\275e\026\306=S\025\200=\026L\252=\360\356\370=\001`4=\256\017#=.\253&\271\034\277\001>r\346\341\275\230\273h\275_\322\264\275\021\220x\274\301%\344\275,\201\333\275\203\211$\275\002\374\031=\313\257\230=\202C\345\275\266\330\243=\363l`\275Y\223o\275\027\341\013>5\267\225=m\221\343\275\033\204k=\236v\244\275\253L\310\273\n5\025=\025o\205\274\265|\234=\200\325B<k\206\365\275\342\\\261=\326\334M=UYx=\3229B\275\217\225~={:\347=\344D\360=\306\326\277=\023\304+\275\221\006f\275\356St<\243\202\334\275eQ\247=\273#\313=mp\331;\240\275\312=V}\310<.LE\275\227\215\313\275\023;==\273\376\025=\362\233\371=\304Q\232\275\354\242\341\275\371Yd=N\251\"\274S\020\223\275\317Z\000\276\331\207\321=E\r\372\275Pe\210;\322q\210=\013RN\275\322\016\346\274\020\006\240\273S\214\254<I\026\233=\342)\233;no\246=\017-\372\274k\257\033\274\360u\271=\350\321\247=\376\002\226\274\301\327X\275lC\217\275\270:\217=\303\034L=E-.=\'\363\346\275\020\207\323=\300\035\347\275\026\372/\275B\244\r>z\353\236\275y\200\235=\030\230\254=Hg\r\275GB\356\275\327\036/< c\337\275V\355\340\274@q\330\275\244\342\001<{J\234=\202d\204\275\\\361\306<\026Yq<\034Z\376=\354\215\217=\252S\315=Q\357\302\275\177\363\250=K\311u\275\232 \375;X\002A\274\002x\227=*\033\274<\364M\352=\373\203\222=\352\335\335\274\270=\300\274>\374\005\275\264\364\343=\336\356\321=U+\336\275!\005\201<p\317\007\276\262\034\333\274W^\020\2759\216\212\275\365\220\260\275W\243\306\2756\217\007>/l\000\276q\305k\274\233\203\330\275\225N@\274\351yI\275I(\311\275w\2068\275\344\327N\274\273~7=\005\322\\=\342\354\001\276\316s\224\275\312\226Y\275\312\314\273=E[\242\273l;\261\275\325\270\270\275\326s\304\274\013\351\242=\206\"\250\275\354M\373\275\3101\356=\345\330\244=\245\373\267\275\300\320\343=b\331\254=\241\300#=\350m\265\275`>\216\275\001\255\213\275>*\037\275\330\260\315=\266\207\303\274u\3234\275\010\330\322<\031\255;\275\0347\034=\020\361\361=\266K\366\275\333\350T\275\334\353\237;p\\\365=\350_\016\275]I\227\275\315\026\223=\374\304\212\275\211Y\354\275X\362o=j\024\007>\224\256\362\273I\215\006>\010bt\274vc\262<\372\214]= \345z\275\026\356\271\275\366\266\357\273\276\363\001>K\275\356=\335\301\007\276\312\273\t>B\343\256\275\010\014q=$\353\240=\370\203\330\275Yr\251\275\204\313<\270eP\n\276\331\374\352<S\021\352=Z\333\275;\033\311e<>\000\373\275\341\025V\275#\331\261\273Wbw=5>\216=\002p\234\275\201d\363\275\324\337\026=\257\367w=9\267\346<\t\223\232<\357\200\320=\024b\211=\322\r.:?Y\347=\231\333\255\274\357&\225\275?\227\371=\037<\363=\360qP\2755\007\220=\343\327\004\276\215\016\n\2753\256V=\311B\360;pp8\274g\213\275=d\3111<Y\247\263\275Uh\273=\254T\002\275\254\360\373<8\344\242=*\274B=\261[\013\276t\202M\275\314\021\340=\034\226\000\274M\365\307={k\320=\361_6<\2729\215\275\331 \250=\252\340\230=h\022\257\270(S\272\275\235\275\003>`\207\301\275\013\t{=\037\353\356</%\224=\017Q\006=\347\306{\275)YB=\346_~\275p\273\233\274\215C\354=\255*\t\276r\310\237=\244D\313=\305\230t\272J\202G;k\014\263\275\372%\244\275\333o\n=\316v\273\275q\2768=\232\026\006\273\257p\234\275\320\033\313\275[\034\213\274\177NV;\022\211\331=\307\034\212\275(N\320<\303\031\354\275S\335\330\274-\r\337\274\331+.\275\214(\377\275j\210@=\014\006,\275p\033,<\357e\225=xs\217\274\265N\244\275\302\345\\=\255S\005\275T\377\324<r\212\344=[\331\303<m\330\313=%\025x\275\007\3618=\277/H=\254\350\204\275\301;\323\275\177\372w<\'\003\214=\331\006j\275<\341\010\276\211\025\010\275\223R\222\275\233\275\017=\025\211\223\275\277\034\016=>-\372=-\375\200<\2012@<B!\363;\366\355\230\274\303Y\253=\276\212\314\275ZQ\352\275Y\006\346\275_\332u\274\242V7\275\001\275\241=m\342j\274\0350[\275P\000\375\275\030\337\234=\310cr=\031t\255\275HL\002<\370\317`=!\372O=gl\"\275D#\207=v\260\002\276\211\033\363\275t\247\320=~\224\300=\310\246\300\275I\036m<H\270\322\275\023q\233=\372\373{=lM\337=\030\374\002>\322b\302=\231\'r<l\243l=\354\341N\275\350|N=\307s\225\275\364\242\223=\232b \275\n\312\007\276P\tA;\250\252\272\275\"i\003>\266\004\343\275<r\035\275?\210F\275\361\261\264=A\224\243\275T\032\273=ZX\261\275\222\255l\275\037VU<\334x\244=\267\317\235=\r\324\005\276\314\025\251=P\335\310=-\345\013=\346/\201<\353\246\323\274\372J&<\243\246\264\275\220\377\265\275\241n\303\273mP\207:&\035\275\274\276\220]\275\244\021\265\275#\304\231\274\027\rv\275\357\216\357\275R|\303=}\016\240\275Q\272\004\276&\013;\275\356w\375=q\214\235=\314\310\231<\331?\227=\365(\227=d\220\007\275P\224\002\276v\332\276=.\337@\275l\240\356\275\005\354\001\275L1K\275Dm\255\275\364HI=\223<\234\275\246kU=\372\225\014\276\252\274\370=vc\275;wE\312=*\311\360=\244.<\275\225\303\210=\034U\004\276(\217\310=\261\302T=\035&\242\275\n\321\226\275\261\331\232\273\223D\373=9>\263\274\027\337\226\275X\367\261<1-\276<I\225u=\003J\340=\0270\376\2758\322\\=f\257.;\327\212\036=:\257\277=\325\326t\275\342^\214<l\024\216=\025{\207\275\363\241\215\275HFu\275%&\224\274\025\026d\275\232b\005>\306|>\275\336\376\205\275\217\347\335\275\234\230\272\275\251\010\n>l\327\004>\231F\377=\347L\r>\206\334\026\274FF\004>wo\007>\247\256\226\275\377{\257\274\001\231M\275\222\341X\275\177\236\273\274\315\361\r>\201]\001\276i\2138=2D\361=^\277\230\274\301C\356\274/\274\226=\200\024\305\275\317\230\247;\366 \204=\3012\353=l[\203=F\234\346=\'\245\373=\225\367\336=\357\332\241\275-\361\214=\300&|\275\217%\323=\247\256z\275\r\226\355=;!\244\275\374O\r>\366e\003>\371\250\350=qc\277\275\333\377\261= +\260=\207VH<E\354\243<{\331\021=G\264\031=\263(\247=\373#\264\274\305\371\321=\254-\312\274\250z\000\276\342n\301\274\3459\225<\262m\037<Dx\222=\357\231\003>sBv\275DV\254\274\210\010\321<\332k\201=o\267\254=\274B\327=c\365\262\275\227\274\210<p\212\004\275\247\251r\275\302\264H=\205\333S=~V\363=b|\004\276\375\006\326=\350\375\251\275\032\r\341\2757\277/\2758\227C\274s\237\311\275\274\221*\275\033l\232<\233)\014\276\300GI<\217~k;x\357\021\275\237\"\021<M\035\376=z\250\n>\275Lr=\241~0\275\327\366\333=K\342y=MP\010\276y\026\032\275,\261\245;7\342\264\275\024\312\227=\226\370\212=O\005\377\275L\232H\275\272@\262\274m-c=\030\234\200\275\361\330\000\276\013\224\2439\254\333\355=\274?4\275\331\'\027=(\031\306=\007\021\007<L\261\261\275\203\027\005\276\377\326\230=2\252\234=\255\300\265\274\355\265f\274\266\254\205=\351X\305\275\322\336\351=e_\312\275\376\336\014>/\260j\275;\375\r\276<?\267\275\037\247\376\273\344R\317\275\2001\267\275O\206\366<\207R\355\275B\374Z;\003e\211\275\326\310\010\276\253\374\006\275h\264.=\352\313P=\247%\375=\2660\227\275\350\314\001>\327\037\321=\236\203D=\364X\005\276\r*\305\273\335\323\243=uW\211=X\213\207\275\0316\352=\254\240\007>5{\300=\246\303\271\275\377(\323=\267\371\312=\276\021\341=1\306Y\274H\3060=\371\327\277\275\245\255\277\2759\003I=\334\222\335<A\234\371\275\235\002\002=\370D4:\2446\254\275\256\322\231;W\362\027=G\261\207\275\367\016\314=v\254\267=\177g\313\275Ui\\=\200\341b<%\354g\275\235\342\206\275&9\233\274`\231\002>\371\355a=b\020\232\274\026\240\\\275Y7\005\276E\010}\275\302\354\205<E\nA=\356L1\275\310\205\004\274{\341\256=\267?\010>\221\357\224\275\245.\376\275\336\336\305\275N\231\323<\251\331\313=]>\341=9\236\"\275n\264\362=\234\013\214\275V{\223\2757\320\006\276\016\336\007\275A\320\243<\031\t9\275X\005\310=w\305\006\2761\342\375</\303\347=\363\000\222\275\037\341\005\276\252%\376=\'\307\347=T \007>\321\315,\273\272\261\007\276\345\032\014>mo\031:\267\250\347\2751@H\274\022\036\352=Z\n\263\274\321\033\254=x\243\324=\332\325\377\274\315\253$\275\337\304\\\275\366g2=2\223k=\345\262\233=_\013\246=\020\360\273\275\013\'\342\275\254\373\022=#\225\256\275o\r\356\275#Z<\274\223B\014\275r\374\322=\244\224T\274\030M`\275Lh\240=g\205\360=\307{\367\274\264\351\205=\260\335\037<\030E\335\275P-\002=y\267N=\344v\022<a\3475=<\225\365\275:i\301\274\320\010V\275s\343H<-}\254\275D\205\331=V\227\267=\232\360\255\275\341`\227\274)\231\265\274z\364\352\274\005\250\367\275\271\230\004\275\345\024X;\337\333\000=\232\022-\275\375\003\302\275\341\343\342\274\231\237\311\273\352\025\314=\002\265)=\274\267\374\275m\'B\275N#\236\275\240;\310=-\371\n\275\254\357\256\275>\242\206\275\360\023\326=\326\323\014=\271/\346\275<\350\315<\022\023\320\275*D\233\275\346\231y\275n\340\373=^a\272=\013C}\274\346\034\254=\372\225\241=\336\361W\275\367\200\240\274\346\311\345=\032\227\003\276\315E^=-X\312\274\273\t&\275\377\033\212=\321\245\232=y \221=`\220\003=\306\242\202=\320\235$<w\210t\275\370\276\225\275\337\242a=\265l\327\275\302\213\217=f\2259\274\177P\001>\025C7\274\021\300\216=\3526\371\275i\213\001>@\216\n\2747\026\257;F\333\344=*4\350=s\216\372=J\213\265=\301{\004\276\037%\t\273\306\265\342=e\001\250\275?;A=\207\001\371=|\007\252=\360\"\346\275i\351)=^c\306<$\371\210=G\263\227=\214\315\244\275+\3667\275\227~F\274\302M\001>\314\243\372=\326\312\360=\363\005W<\230i\260<\302m\237\274P\014f\273\341\177\307\275\357f:\275^\267\017\275\363M\211\275\363\350\235=\203O`=\375G\330=N\020\321=\313\021\025;\227_\016=\025\367\253<\333\325\261=\331\217\242\275\363\236\357<~\257\274\275\'\346\202\275+\007\230=\010\345\013>\337\327\345= \353\362\275//}<\245D\014\276\302\221\334\275\326f\337\275\021A\t>L\262\314\275\224l\337=\217\024\370\2754L(\275v\"M\275\275>b;z\331\236=\232,\007\276s\366\255\275\342\347`\275\261\030m=w\246\233=\322Y\304:k\214\360=\247\300\317\275\344\271\360\274(\342\177<\362\014\r>8&S<\361\320U\275t\030\324<\266\016\335=+\321\331\275\371\301\347\275\222\310\006\276\034\353\003>\302p#\2750\354\245\275\243\010\350\274\\=J\275\211\347f=3\237\363<\351\337\305=\343\375\013\276\214\023y=\231Vo=r\rz=h@\004=n\277\275\275\355\205\323=[=\014\276\244H\237\275\343\273\205\275\271\206\216=\373v\275<\254O\003\276\r\323\350\275\001\003\001\276\337?\370=\230F+=\244M\007\276\355\336\301\274\250\346\360=\255\246\030=\273\321\340\275\314\'\205\275i\000\207\275\251\017\\\275\376\031\222\272(\255r\275\"\377\032<\255o\020\275\333\312\302=\345\225\301=\n{\262\275c[,\275O!\226;\366\252\365=t\370\251\274\255A\006=\304\331j\275\316\2203=\340M|=\353\234\003\276q{J\275\275\223%;\274b\002>Y\270\257<3\322\003\275\204\320\316\274Pk\202\273C4j\275u\025\365=\025I\252=\027S\336\274\361\222*\274\3253\007\276W%v\275f\271\235=\360R\235=\001\036\311\275I\033\014=\334<\017=\321\262\005>\243\352\365=l^}<o\030\337<&\200\215\275\242o\377\275_\302\203=\223\001\203\275c\346\251\275\207l\230\273\276\323\254=\342\314\362=E\314F\275\235\361\336\275\361\374\232\275\322+\r\275\362F\214\274\363\326\251\275\004\362\231=$\216\356;\370T\276\274\225M\265=Qt\226\275SF\213=XL\016=\271\335\350\272VM\376\275\204\335\311\274\344\277\304=>A-\275a=\227\274\2011\364=\362\373\366=\024b}=\345\313\347\275\232\255~\274\203J\361\274\274l\032\275wB\367\274\201U\266=[J#;O+=\275\213\023\376\275\026\265\335\275\303]\014\276\303\313\243=\350 h<f\334\212=\021\373\272;:\247\255=v0\317=\311]\317=M\351\234\275q\235q\274\301\200\257;_\001`\275\036\233\241\274MB\000\276aQ\245=P\222\302=\013\371\271\273t?\236=\233\255V=\'\231\313=\177\204\357\275\307\317\375=f}#<\240Gp=\376r>=\357\247\320=\303\020U=\006\212\333=\314\347\005>\344\351\315=\241A\337\274\236\033\307=\265<\343=\301~\263=\006u\260=\223l\207=?m\342\275\3168\317\275\333\261\272\275\304-\004>^+\276<w\325\333:*\370\005>\200u\336=\244\221\331=\r\007\270=\027w\224=}-\341=m\343\272<\021\'\217=>\247\265<\njX\275J\216\r\276\342\265\031=\350\366\013\275M\303\203=\255\003K\275\326\372\310\275m\315\274\275/G\335\274\r\321\004>\303!^=s+\252=\312\\;=\267\327\r>\023A\322\275\326\373\317\275\252:\305=\347K\315\273\205j-\275\331\0219\275\251\353\237\275t\350\200\2752\360\032=\240:5\274}\361\022=d7\n=\365\003\367=\303\334\220\275\201T\352\275\355-\261\275\256\322,=E\204\335<\010\301\303\275\362\324\020=\305r[\275\373D\203=\255\227\345\275\'k\t>1\251\341=\027\327\325\275i\243\346=\325\204\225=\204\220\372=\263{\022\275>\361\177;dx\210=\264^\t\276\247\303\331=.\016\375=\337F&\27545\224=\267{\300=\201\337\247=M\265\031=\225P\247\275\231R\027=d0\334=[\026L\275`<!;\247\300\313\272,L\242\275Q\346T=\251RV=\300*\265\2757\336\021=,. \275\342\353\004\276l?\307\275Q\353\355;\241\013\313<\022\022r\275f\250\230<W\3619\275R\021\326\274\270\271\335;H\225I;\333F\257<\303\360\237\275R\352]=\271P\014>\276\226>\275bI}=\323\333 \275jx\216\274;S\322=\263J\333\275&\275\003>\027\264\300\274-[\341=\242b==\352\014&\272\312\340\232\275\307\201H=\236\007\360:\253V\320\2745\370\303\275\374S\211\274\3713\004\276\232\240\302\275\026\t\353\275)\t\"<Lr\266=V\325\225=\247\304\244=]\222\251\274\332\021\206=\324u\261\275K\260\374\275\000\257\244\275\257\244\237=\007\363\357<\307\314\247<\\y\367=\346&\236\275\222K\347=s\246\332\275r\222j=mq\372\275\221\3367\275\330\206\212=\212\027j\275\350v\333<Q\276\376=\217\332\361\275\010D\007\276bH\300=d\314\247<\263\232\001>\022R\226\275B\'\326\273MB\231<<\262\024<\263\213\237\275\320\337\001\276|\377\000\276B\365\230\275\273;w=\365V\221\275\240MY\274e\271K=V\213Q=\233kG\273aOq=\243\235\020={\201\316=\360\233\220=zV\246=2-\352=\233L\362=\216\372\241=\247\200\256\275\332\233\002>\001\273l\275\215^\272<\226\230\365=x\241\315=\t\203\353\275\010\013\363\275\342{#=\323\275\254=\'/d\274\021\017\366\275\241J\354<\341M\365\274\271?\320\275\'\0229\275\252\352\272\275\303\344\341\275|\337\n>\037M\036=i\372;=V\033t=F\376\362\275\343!\254=\362\000E9\313K\207<\247 O=\026\021\r\276\264\257\033=!7\326=\260:\262=\237O\305=\365\2702=\253\210\232<\300\331a=\230f\266<t\370\327\275\363b\351<06\311\275\230\344\254<\300\243\267=\207\340\375<\206u\324\275[\264\n\2751\234\206\2753\377\272\275\236\275A=\264L\027=\027\342\376\275\033\320\262<\004\031\310<D\364\265=\261X\005\276s\372\006\276\221+\346\275\234d\350\275f\232\217=\224S(\275\366\t\236\275\356\211\375\275\260?\267;\256\341\317=\360`\333<;{\010\276\310\353\303\275\322\235\326\275\237\010\261=R\244\246\275\377\213\335\275g\364\215<\342\026I=\241\323\346\275\013\321\210=\317\326\317=\024\036\016>\340\215\026\275\301\006\344:[\021\372\275\0028&\2750\335\371\274\207\002\220=8\266\210=\021\r\006>\361\212\010\276~\375\035\275|\365\005\276uE\332\274\253\343\036=\236\004\374\275*\371\t\275\317\037\307\275i6\276\275\235\024\321=(\030\343\275\026\036\213=\262\014\367;lp\177<by\344=\035\014\251=\210#\025<\242\017\200=\207\364\031\275\233\311\305\275\302\227\246\275\331,a=\260j\253=\007G\370\275P \207\275\243L\006=G(\n>\2158v=K\273y=y\261\372\275z\350S=Z\316\267=c\350\014\276\222\237m\273\034H\362\274\200M\325\275\306oR\274\000\\\336<se\342\275\350\302\241\274\026\354\276=H\002\240=\223T\216\274\266\377\327=\204\355\342\275wJ\'\275\030i\222=<iB\275\2348*=/\304\272\275\266Bk=\355\3465\275\311\276\\\275v\364\320\275\207\257\227\275\nB\264<\014\353\362=\363\221\237\275\036\270\240\275\\D\376\275s\213\010\276\314r\364<\206=k\275\003m\245\275\005W\231\2758{\001\275\314\2163<\240\375\223\275-\"\305\275M\027\247\275\216\013a\275!bC:\352\277\n>Qf\234\275|I\n:kym\274\233\221[\275\235u\236;}%\236=\010mG=\206\200\324\2756\2606=\220\252\202\275\311\204\004=b\032\372=\0076\177\275\235L\235\274Z\351\006\274\366k\334=\277\354\321=\360(\346\275\255\323\251\275\357\272\310=\376/L\275(\336\000\276\333d\242=\017\347\010>c\260\277\275\266\020\270<7\360\000>\327f\366=\327\336\"\275v\036l\274\201\312\222=\231=\331\275>\":=F\r\334\272\333O\367<\026]\317=h\323\245=\330\\\263=\\\307\376=V\344\304\275\237Y\305=\214\332\006=\252\270\317\275\'q3=2\322b;\374\225\236\275|B\004>M\261\342<\002\352\370\275<\331\251\275z\270\213\275\212Z?=\265\016\r>q\362\232\275\323\341?\275\262\202\004<rk_\275\366\037\350=K<\356\2758\313C=nH8\274\203C\337=\364b\365\274 C\264\275\216\230\233\271(x\364\275\177\222\255=\025y\317<m\311\205=\237\346\003>\\\354\267=a\275\003>=/T<\037,\264<O\352\270=u\372\233\275\304\206\r\276k\004\341\275@2\314\275%\243\351\275r$\002\276\376\016:\274\336.q\275\325\002\210\274\346\033\363;\334/D\275\250<\362<\255U\357\275\274\254\260\275\352\315\006\276\016c\312\274th)\2752\277\264\275\005SR\275\256\365f\275\263N\013=V\267\006=\006q\255=\352\014\257\275\362\324\206\275\343;\365;\344\260\205\275G \305=\315\214\213=\311\n1:c\346\257\275?\354\241=\347\230\200<N(\340=\252\224\270=;\364\355\275\270\250\226\275b\271\340=}\327\241\274S\375\004\276.!\032=F\3179\275t\300&=\025\\\370=&\263\237\275\246\345\007\276!\006\261\275\243\257\277=\317\005Q=\304v.=\375\267\r>\2634\262=\010\216\257\274\177\233\370\274\344g\226=\361\261\341\275\276\354\216\275\267\277\370\275_\347\255\275\375L\271=\355\376\316=\352\371\306\275}L\316\275\272\332\311=\016?\240\275_S\263<8?K\275\212\223\376\275\020n\363=\324\266\006\276c\024\365=\032^\303=\017\306\025={\014\024\275\322B\333=\330\300\356\275\037\357\022=.\300\203\275\364(\354=\267\035\334=v\215\245=\362\376{\275\366n\321=\233\224\242\273\351\010b=J\371\002>\343\363\013\276\362\361E<KD\221\275`\033\'=4%_<\330h\207=f\031\013\275\036\261\001\274W\002\266\275\024\333\003\276]\357\352=\010\245\206=\305:\033=\354\354c\275\251:\005\276\214\201\261<\371\026\006> \360\316=g\362\361\275\325j\314<\tg\005>\222\335y=\227\255*\2749\326\320<+\346\212\275\010\\\351\2757n\362\275\257\255\363\274\255\217t=\247\212T=\316i\255=\252\360\026=<\335\221\275[\005\370=\366\253!=\255\016\213\274\265\267\367\275t\265\250=F\204j=\"e\275\2756\204\316=I\031\305=\322\343\311=\231R\250<q\274\342=\225\266\013\276\357\252@=\033,\253\275\272\250\333\2755i\t>\234\233\375=\355\362===\211\215\275\267\231o\275Ws\217=\254f_\275\033\332\314\275\334\007\204=m\344\223=\322J\316=\177\027\236=\022J[=|\247\264\275\324\023K\275c\345X\275\202\222\316\275\220\225\341==|D=\356~\245=\270<\037\275\304\021k=a\325\240\275\036\013\310\275\003\362\013\276\034+\317=\036\217\014>\226H\335\274\353Q\340:\030\343C=h;\235\275\032\210\213=\277\314\013>\320t\227=\016o\035\275o\030\037<\021(\220\275%\250\275<\275\273\306<\0209\360\274\326\275\330=$\355\331=\006\r\322<8[\205\2743\256\264<l\014\305\275eo\263=)\n\315<x \232<\307\033\322=\177\021\225\275\005\'\240;1\230\006=WZ\366=\331\337@\275fE\241=\201\'\314= #\005<\216\234\264\275a\227X=\363k-\275q\332o\275~;\303\275\314\205\037<\314Eg=\371\261\t>^\221B=\216]\203=\005\271 =\264\272\216\274U(\234\274\333\256\023\275\010\007\t\276d?\315=\354ND\274\273\327\\\275l=\371\2743{\007\276\240,\221\275D\300_\275X\365\013\276\300\313\004\276Z\017\374\2757S\263=w\020\326\273\265\001\037\275\223\267\\\275\242\031\264=\030\313\003\276\3431\251\275\327\310\322\275\210X\240\274\335;\306\275K\330\227\275?|\214\272V9\261\275|\0043=]\262,=\340\354D=\372\274\370\272\001\007\317\274J\212\250\274\270y\343=J\360\343=ESC\272B,\t\276u\003\276\275R\267\240=\217\254\320\274\276\266\375=\217\007\r>\247\355\351<{\016\363\275\037\350r=Y\254\332\274~,\344\273\314F\365\2758\271\275\275x\311\321=MH\327\275, \007\276$\013\230=K\226\341\275\006^\230=$\266\270\275\276\356\235\275\020\263\344=\343z\212\275\362\252\251\275\261\251\314\275\273\303\320\275\335\234\340:]\333\263\275N\322\353\275]\260\345=b\275\014\276Z\230a\275\\3\275\275X>\203\275\303\006\254\275\214\341\317<\351\033\217=\311sL\275^\226\270=\336\006#=\270D\262==\225\374\275\253\236h\275\025\035\216=t<\255=E\003\231\275\301\301\317\275B\2545=\3240$=\234v\007>\312B5=-w\224\275G\000\310\275\214\\_<:\034J<\364\256\335<\251\334\260\273\220\235\314=\332\004\277\275\010\273\375<^\203\257\275\010\364\313=\232\037[\275\220\305\321<c7\276\274\257]\215=`-\364\2728\333\356\275\301{\003<_\263r=\304\031\340\275^\202\n=2\237b=*\231\377=\200\364\312<y1\242\275q\374\320=\335\272\007>\225\230l\275\214\322\303\2755\350\234=\026\364\261=D\201\'=*\033\243\275T\342G=\351\362\354<\325\211\240=FA\312\274\021dd\275\277\032\367=\274h\n>\270\233\215<J\247\361=\315\300\337\2734\017\270\275\225\001\302=\235e\010>\302\004\326\275\023\3349\275\362\260\261=\226\230\002>\372e5\274\253N\250=\261\200\325=\372\372\263=\302\244\321=\303V\245\275\351M\216<\024v\310\27438\010>l\\Q=\251%\276\274d\260\351=Au2\274\304>p\274Q\224\312=?E\373=\357\372,=\276\340\253\274\214@\353=g\344\305\275]\244Y<\001\227\242=r\016\232\275!\207\323=\267\032\225=\000I\320\275\264\356s\275\323\027\374=,\004\225\275\277\376\224=v\007\2069r\335Z\2725(\006>\254}V\274>\223\003>\374h\212<\221\244\002>\201p\010>\355\030\002>\332wK\275*\n\'\275\265\217Z\275yx\007\276|*\377\275\'%\277\275L\201\257=%\024\352\275d\246I<`R\235=4\000\270=!o=\275&d\007\275\010:@\275\317\272\007\276\311\221\003\276\236\372\326=\346\253\354=9\274&\273\246E\271\273\373 \346\2759\035\326\275o\211\321<`T\000\275A8\227\273\024\200\263\275\017l\247=\345\315`\275t\026\007\276\341\361\373\275\010s\353\275\033\000\204<\235\236\314\275}\326\365<\225N\242\275\254\234\213\275\376\341\330<\361\301\333\275v\376\361=\206O\335=\335\251\360\275_V\230\274\214J\026<tC\372<\t\331\006\276kr\005\276\352\332\236\274\201\2679\275]\356\303\275\374=G=\010\236\220;\351\260\255\274\333!\336=\246\355\331<T\225\034\275\321A.\275\326\203\013\275\221\220\271=\"\307m\2740&\344=l\243\255=\317\243m\275\t\035\005>\332\353\203<\257\233\005>\311H\321=\332\332=\275\370\334C\275r\355\244\275\351\315\303\275\035\031\n\275\373\251!\275\321.g\275$\367\350\275*\017\303=\361\341\323<\277\363\341\275\277\361\224=\341\367\203\275T\314\004>^\232\013>9\264\006\275\234\232\014\276p~O\275\254\203\014\276o\300\323=5\360\002\276QQo\274\314\261\367\274\227\204\373=\013\224\310\275,}@=\007\205\305\274y\030\351\275\336%r=\355,\022\275||\367\274%jD\275Sv\000\276\253\345\323=\203\'\264\275\306\210\222=\354_\244\274\326\253\302=\305\317\370=\005Ao\2747\005\340\275\030\022\007>\200\312m<\320\210O\275O\026m<^\235Z\275s\036\370\274\323\247\237\275\370\n~=\244\2540=\325\223n=\335\212\315\274\030j4\275J\210\240\274\03644=\031!\006>\276P\020\275\320\327\314=\272n\003>\024\342\202={\237\345<\256\007\265\275ah\025\275\303<\022<k\225\302;\352*R\275\000\007\210\274\024\010\363=\225T\r<\335h\220\275\n\243\355=\314\030\275\274\306\033y=n\224\013\276qC\270\275f[\307\275l$\272\275LD\255\275\001\335\355\273\023\024\010\276w\310\002\276\271\002\325=\216\221><\201\225\000>\330\r\214\274\376\225\327<W\005\374;\246>\004\276\211N\366\275\343\342\366\275\237df=\017O\244\275L\211\331=\364\004\345=<\026c\275\311\035\002>Z\336\207=\251W\215\275\361\327\320\275V%\237;\003\031\005>\217\277\t>\267\351\t>:\326\262:V\211\000\276&\335\032\2746Z\270\275\363\n\327\275\241\243\335<\251\364\r\276\375\366\214\2758v\205\274\221\225>=\236\313\256=-\346R\275Z\274\342\275TU\322\275\337L\005\2763\360\251=\032T\342<\324x\034=\312T\250=\255,\365\275yS\233=\226NJ<\2477\226<\310,\254\274\271\356E\275]p\304\275\236\007>\275\226\t\243\275gp\237;\254\022\235\275\364\254H=)U\273=/n\030\275\226F\301<\027n\027=\030\233\277\274,}\202\274\030s\010>A\247\374=\215U\334=\312U6<\304+\210<.\214\013>\023\203P\2755\377y\274\237\"\000\276&\212\330\275\267I%\275V.\367\274\244$\250\275\2372I=\004\370T\275\304\270(=\355\253\323=\344A\255=\3760\374\275^Z\002>\203\307\262<\251x\367<\201=b=\305\355<=\251,\013\276\370\255\377\275\255\210\347<Ojt\274\315\3307=\205\2702=\251l\r>Mi[\275\377H\371=\\y<\275;\032?=\303b)=?n\002\275\2078\034=\235\343^\275\347\255c<\353\002\004<\364p\325=\311\252\214=\224\212\320\275\267\341Q=\210\346U\275\234\202\356=\\\353\001\276\324\"\253\275\245\314\356=\315\341\323=\312\201\220<\272\364\212\275\221e\201=Z\236\300=-\010\236\275X\207R\275V\027q\275\325M0\275z`\363\275\370\375\277\275\036\303\306\275\226\013\213\275^<\235\2758*\004\276\256C.\274r\370\004\276\366>0\275\213n\007<\365\016\030\275n{\363\275\026^\250=Q\024}=d\341\364=aZ\366\275\237J\360=\220\265\341\275\216\207\230=?\346\321<M\200\004\276\212\270\273=uSQ=\233-\302\275D\016\204=rR\357\275=\353\277\275|!\342=l\234\000>2\243\341\275a\030!\275\362yB\275\224\200\353\275\273gJ\273\245\356D=2H\255=?\340\342\274\262F\t\275\017\342\001=H\200\251\275\342w{=y \367\275Hk\016=\223\342\214=\241\362\300=\016\264\366\274o)\230<\201\332\231\275\273/\236\275\205\312\000\276\034\247\266=\360\235\212<\354\031\305<9\244]=\233 \244=mvg=\353[_\275\334\233+=l\327g\275\320[\316\275\302\221\005=d[`\275lM\016=\315-\345=\263\366t\274W\317\242;T\225\261\274\213\221\211=\031f\013>\267\275\247=>\034Q<z\372\313\275\321@\346\273\215b\201\275\320_\206=\360\352\035=\005\302\267\275v\222\301\275\023r\364\275G\022\300<\037#\323\275\023:7\275#\301\325<\377f\'=\275d,\275\246\0246\275\356\027!\274LI\r=\246vD\275/\031\244<n\274\377\275\254\212\271=\234\356\010>V\310B=z\221\t\276\256\342\324=@\201h\275\257\306O\275\234\336}=\005\214\005>2\034\036\275u@:<\274\003\211=b\234\227=\354_c=i\327\275\275]\212\272\275\202b\324=|!\301\275\343\367i\275|yt\274\355s\337\275\2209\213\275].;\275\367\354\300\275\204f\374\275\245\177\202=f\314\374=\335\242\227\275\0321\343\275\223\204X\275T\\\340\275\236I\021<O+\030=Q\253\273=\360Y\255\275\030\332\312\274\304c:\275q\207\014\276\017\2330\274\024\346\004\276\317\272\200;\374\275p\275\230\023\203\274\256\343\361\275\343}\013><Y\307\274C\335\351<p\330\337<u\355\213\2754\334\002>\343\262\351\275\240\214\013=\020K\t\275\272\374\006\276\263r\331<\231\324P\275gw\317=d\224\352=.\320\206\274\347\227|=\260\335\311=\345K\226=k\336\323\274\323\273\t>v\322[=\233q\251=\262\255\t>\267&\000\276#X.\275]\255\224=\001\335\317=m\237\372=R\224\375\275\326y\004>\265G\306;\330\242\200=\177\370\010>:?\224\275\2446\365\275\2654\016\275\005t\373\275_N\206=!u\344=+\375/=\332\033\347<\224U\310=\246`\370\275U\331\t>\203\370:\275Vyr=\354 \007>\177\367\267\275\013\365\030=\010;\200\275\325c\254=\n\332-<l\013\217=\236\347\340\275\035\021D<\226<\330=J\007\345=\216\177Y\274\303Nm\275\220\214\307=OX\304=\014\253`=\304\233\332=f\007\244\274Lx\250=9IP\275W\223\307\275\240\305\014\276\2640\342=\203k\270=\333s\232=Z#\240=\351\341);\254MB<\250{\022=q*\367=^\034\n\276\376\275\247\274s\224\220\275\323\261\240\275\'r\263\275\266\362\231\275\\\377\026=\334\324\311=\236\2008\275G\\\222\275R\317\361\275\230\221K\275\216m\375=\264\362y=\206\256\264<\031`\013\276UMq=\351J\372\275\0332e=\262\272\275\275<\035\354=\360\r\227=V\363L:\202\202z\275\253O\327\275q\366\374=\372\271\213\275H%\033\2759\036\367=\220\346\300=\216|\267\275\027C\036\275\207\013\330\274\310j\005=\346i*\275\327\226\222\275\252K\177\275!Y\236<H\364\014\276\244\252\327=&\261\270\275\327\351\226;\030S\320\273\310\370\201\275\234\304\273\274%\372r\275\351\021\364\271\006\027\n>\341\200,\275Jo\334\275\307^\264\2751\037\354=ad\341=\177,q\274\020\247\322<\323\242\246\275\'\034g\275g\214\204\275\017e\322=\344\311\330\275:\016\343\272\262=\200\274/\323\301=\301\3464=Q\262\347<\220\232y<\345k\\<\014xa=Y>l=S\272\337\274\t\227\331\275a\021\323=\262\357\t\276x\226\003\275q\314\353=E\350\343\275\271^\233\275\226\274\007\276a\356\206;\3742b\274\023\261\327\275\336]\342\275\231\341\253\275\317\351\356=^\024\370=2\035\014\276\032\302\350=\356\353\004>\211\346;\275\026\344\013\276\347\260\t>`\367\303={\3630\275\033G\274=\335\363\002\276m\344\004\276\220Y\235=\020\220\337<#\224\010>\352\301\007=S$\334<q\365j=\315\201\343\275\3309\200=\240\025\316\275\240\352\232\275\327]\002>2\203\300\274(\340{<\334\037\216\275\365\256\251=\341\202\264\275\252\200\010>\350\264\241\275\345\247\267\273\373\312a\274\036\025\354\275T\002\256\2759\013\203=\022\312\363\275\247\177\306<\t\316\226\2744\213\030=\356u\004=\222u\004\276>\014\266\274\374\023\375\275%u\331;\276\303\230\275\307\376\201\275\372E\337=\314\266\347=\257Y\321\275l0\325\275\212T\202\275\025&\224\273 \351\203=c\260\365\274\366Z\324\275\006e<<8\355\301=\225uR<\332?7=\304\353\367\275\2627\202\274H\374>=\221e\002=\226\334\231=\334\\\007>1\032/\275\324RX=o\306)=\221\'\005>\257 \r\276S1\311=\246b\342<\023\207\205\275:\305w\275\330\033\363\275\254\241\231\275\356\346\216\2756\033\037==\225\345\275\266\233\001=\005\320\\=U\206\363=\201\246\\\274\006_\000>,\034?\2756\232\342\275\276\034\325<\003zW<\374E\010\276G\024B=mR\005\276\331\333\320<\262\275\340=\366\326\224=B\303\367=\371&\236\275\372\014h\275x\271}\275\257\216\254\275\237\342\242=\220&\210=[\325\310\274\344M\245\275\021\362X\275j\254\312=\302\037\352==\342\003\276\344!\227\273F\303\230=\030If\275?\377\253\275^m\340=\025\300\366\274\332\344\014=\354%\325=\251\353\302=\317~\360=\315\360\006>\372E\324\275\177\334\246=U\277\233\275\206m\002\276\327\030Z\275)P\210\275\361L\266\273D\244>\275\211\357\245=,\342\317=\357\014\\=\232\311&\274\306@T=\370C\322=\211s\253=g\254\203\275s\233\350=\301u\342=M\014\034=\352\314\323=\031\314y\274Q\201\366\274\236-\005>\016\312\n\276\262\007P=9\227\225=\300\216\240=\342|j=B,\205=;\306s\275Kl\t\273\250\364\246=\364\210\201==\376\211=\214\376\222<(]\264=V:\014>{\336x=\360\0206\275\240\201\363=\016\206\002\276\230M\002<y\217\346\2758&i\275\352\234\263=Ky\366=:\0071\275\275;\313\275>p\224=\375\2623=\357z^=\210R\361\275\223m\360\275+x\207\275\001K\374=4\305\326<}\276\362\273\372\032\007>\333\260\026\275\303\031o\274:(\364=\302\306\361\275\273\214\343=:\177\355=*J\301=\207;h;\232]3\275\231jf\275[\376\n\276*\032\321\274\027\250\212=\345\022\235=qV\251;\206\346\336=\324\321\312=B\213_\273\220g-\275\275\200\350\274\233\033\273\275l\245\303=\256\276\244=\020\235\313=\017\022\352<\367N\034\275G\027\000\276\037L\323\275\267\372\344\275\2538\320=N\210\246=?\344\363<\201\317\377\275\nT\350\275\210F\305\274\213\347\341=\232/\350<-\3661\275vg[<-[\365\275\230\'\315\275\270\260\000\275\306L\323<w\227\323\273\210\032\261<"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "^?\026\276\2776\310<\334\232:>\035\027\362=\224 \237=\315e\001\276$d\034\276\333Y\336=\311\201_\276\350\362%\276\255\350\214\274K\314R>\006-\013>\032 C>\265,\016\2764\340\t\276n<\307=\232\2146\274\260D*>\257\226\263=@=\367\275\t\035N\2762\030\212\275<\010\n>\373\275\316\275\310Y\245=6\177\216<Do7\276\no\302\273\'B=>I\303\001\276\371\016.\276\235\270P:\276\207$>saU\276\322(8>\020\t4\276\304\311\332= \356\345\275/\242\377\275RA\306\274\334*%\275G\336\023\276\345\323[\275~a\206\275\246\240\332\275PDV\274i{I\276@bW>,\n^>\221\324\313\274\226\r\376\275\345\343\254=\325\232P=\212H\273={\352\354\275k\001\010\2766+<>\3514R>\360R\210\274)\362\017>RA\240=\3020\240=\2010\235=q\215\264=ax\200\275\272\342\254<mA\307=\244F_>\033M\251\275\240!\302\274\036X&\275G\310X\276X\254\324=\300\347\200\275\265\'E>.\355E\276+\213\272\275o\020\213<\220\231E\272j\033R\276b\357\370\274\007k\365\275\363\250\364\273nY\226\275KU\255\275YHI=t\r\003\276\2254\002=q\322I\276vc\303\274^\257i=B\266e\276\\\000\235=-X\211=\323s\224\275\257@9\276\007\241\212\2757\340\226\275\231-P\274\353\013}=i2\215\275\332\2243\275\000p\274\274\016\367(>\234\342\365=\202\321I>B\215\245=V\3777\276,T~\275\275\2356\276\325\311\022\276\343\364\025>\335/4\276ea3\275\373\324F=^0$\273\244L\244\274\241\225\307<\010J\222\275O\343\251=@\254l=K\353\312=\214\321\n=\221V\025\276\3414e\276\256\222\021\275Q\350\000;\352VH>\314~t\273\223D\337\275,hC>\010n\030>\354e2\276E+\270\275\022\307x\275\027J\361\275o\3745>I\027\"\276\"u\304=\\l\'><\314G\276\341~\304\275{0\333\275\364\266\231\2753s\035\276\013\242m<3\217y\275\034i\024>b\375\235<\372z\266\274\2219&>5GX>\364\245 \276)\0336>\222\'Q\276\303\233`>#\216@\274\341\277E\276\271\330\264\274~C/>\217\314B\276\tV\275\275r\361\327=\220s\345\274\002\210\032=\025\273\002\276@\206 \276\322\374\302\275c\371\260\275H\215\363\275D\252\302==t9\2766\350\227=\264\252\035\273^\340\006>Z\310V\276\321\254\227=\224\t:>:\031\354=\006K\335\275R\325K=\332\242\032\275R|\n>\317\325Z\276\353\177v\275\213X\000>\355\243s\275\314E\225=c\000a\276\376\\\006>\273\273\261=Y\365#\275.G7>[t\364\275\243kd>\0331\243\275X\371\205\2753X\253\275\347\364V\275sB\031<\tt?>\240\273\356=U\032\'>h\237\330\275\r\001\252=F\333.\276\247]\211<\216\260#>\217H\232=\207hd>\367Y\256\2756Q\340\275\305\201\n>\255\223D\274\034\262Q>\334\320)\2749\201\307<q\324Q\276\036\021\325=\327F&>S\3328>\372\247\266\275\255#\376=`\210*\276#\325\007\275\220\300\r>\261s\020>0\366D>5\"K\276\225\014G>\365%J\275\023\206\\=0/g\275$\312I>\314\256!\276\255\2145>}\306\271=\345\010-\2763\036K\276\332B\t\276\016\277E>\303K\327;n\262\371\275\220L\335<\223J@>H\206B\276\306R*>\016^;=p9P\276\347\3505><M\031>*\277K\276\333\017Y\276\250Z\237=\032+(>^\005\007>\365\013\324<l\263\330<\206\351\036>\034\343)=\317\203\300\273\305\0375>\276\246H\276l^\024\276\271k\204\275\240\220(\276\341\362_>\373\2324>\303d&=\334\354+\276i\034\\>\250\374:\2762\246\331\275\366t\212=\267\030\006<\007\3405>\177l\353\274\314\242\302\275\263;\335=\337\271[\276o\300-\276\344I\\\276\347\263W\276\210\347\341=\3678N\275\316ue>i\327#\276&\261\367\275>\323>\276\003\305\032\276\253\244n=\256\032>\276X\234\261<z+ \273\221\265I>\tjZ\275J\342\263=N\233\353\274\352i-\276]\2429>\233+\024>\004\037b\275\2132\032>\323\242\315\273\216&^\275\236\"\r<\303kP>q\356T\276%\3263\276\263\317\240=x\237\007>\000E\357\275zgJ\276\251i\324=\3210\010\275\264.E\276\332\232)>Q6\026>\007\316\250;F\207X\276\366\0249\275\216\306S\2760\2430\276q\322\245=\307#\214=J\007\037>\250\357\354\274\2706&>|)\005\276\342oI\276D\n)\275\003\214Y\276\034\355B\276u\324.\276n\032]\276\276\236\030>VZ\021\276\020\032R\275\250\267H>r\253W\276 \220\212\275x\"$\276\350?\352\275c\316A\276S\213\324=\t\2153\275\377K\005\274Q\270\317\274X\0105\276 \2136>\242\030\354\275\266\2053=\2216N>\330\352\317\274\227\003<\2765\354&>:\221>>5\206\332=/w\333\275\276\351\004>J\323\034\276\376\340\341=r\335\025>\364tV\276\224$\275=\245??\276\206&\320\275\354\302\262=x\002E>8\330\017>Y\317\245\273\037+\260\274\251\370H\276\230\214b\276\203\005\274\275\206\240\020>\344}\023>\221s\372=@0\346\275\320%\207\273^\031\347=\244\001K>\016\233\341\273\254\304.\275\373\023\240\274\226\311\352;\244\244\021\274\347\217\222=\354\213\273=\357\005\303=\326l\352\275y\351+>\016\234\000=\272\241(\275\013GO\275\025.\004\276\006\031\276\275\363I\366=U\356:>\372\t\225<_\371&>\266\200\376<\034l\002>\345\332\203=\023\233\262\275\237o\207=\316\315<\276\205nU>(\254\333=s\211\321\275\317\317\320\275.\036\005>`\257W>s<?\276!PE>\037\020>\276EgZ=7o\322\275\030\n2=io\304\272\373\362\235=\320\267@>\351GG\276\245\324d>\313_V>\320D\362=\327\024\347\275\262\362\037\276\01366\276\355c\\\275\244\364<\276\255a\240\275\264q\302\275\240\2400>\272\306\003\276\320G}=\r\271\030>\354\241[\276\"f$\276 \326;>\310\021\335\275\235\306O\275\272iz<\372\025L<\344\257\302=y\336\026\276W\365\367=^%\016\276\'\312\021\2757\357\037\276\277\346\242\275r\230\032\276b\352)\274\227\177K\275!\361\037>\340\233M\274\370GC>+!C>y\375\360=;\340\366\275Y\320\301\275\203\032\273<\347\022(>~\241\\\274\213\321E\275\"\033\267=\246B\207=\363\336\\>Q\237E\276Xn\350=\243\306\220\275\260\311\350=\253\000$>\010\000U\276 \206?\276\303\354L;\330\312\023<+\265\035>\254O\271=\213\314(\275I\203Z>\023\367\021>\223V\037<\"\355\363\275\232ML\276\373Xv=\333\010\234=)\217V\275\257\343\340\275\320%\">\007z\267\275$G)>8!Q\275\003c1>\362^d\276ux\372=w\355D\276\237\023H\274\177B\361\275f\231E=\247\365\261<\002y#\276\367\362O\275\002\335%\275\347\016\375\275\232\342\345=]\013\235\273r(!\276\033\326\035\276}~\376\275\332\376\016\2753\'\277=~\003<\276P\260\026\276\275\270\023>\346\026\305=\305\375\374=\n\234!\276\261\222y\275=99><\243c\275Jm>\276\212\\\007=?\227\000\276\004R\250\275\tx\016\276\324\351$>\t>7>\033\007(>\031\350\323=7\242\006>\342\352\315\274\324\355\241=\311\327\032>&\000\355\275\270\256\007>XK\232=l\246\000>z\345\330\274\217\201\364\275W\247\010>\243\007l\275\331\271\025\276\342\227\214\275\325if=\227\222+>\213C$=\246\207P>\266\257U>\2074\216=Ff-==,B=A\024,\276\222\202\326=\002`\373\275\267\346E>\263\274v\275\222\271\037\276\3368d\2755$\224={\264\265=_h5\276%\2127\276\224\202\007\276\032\t1\276\005rz<h\300\'>\004%\306\275\240Z1>\267\243\021\276(X\300:\332\330\n\276\203\334\001>\253-\241=\025,\036\276\361\221Z\276Y\tR\275\254\3339\276$I\221<+F\224\275\037\345`>\255\346F>Z*\252\275\350-\314\274\234\244`\276\352sF>\3612\230\275H\316?<\263\256\002\276\344\333\245=\360\307!\276\310\n\\>\374\t\264<\337\300\t\276\203\035\374\275\253\200\271\275m\2038=\217\177\363\275Pw\245\275\007\270\214;\344eX>\212j\034>`iQ\276\364\234b\274u\2420>_\035\016=\346\333c\276`:^\275\212Xq=x$A\275\274\224\317=\375\t\333=\311 \371\275\035/\\\276\211L\263;R\370\030>C\251\351=K\026\231\275\275 \314\275t^L>FA5>\336U\213\275<G4\276[\371\327=\3528\373<\225\0211\276(9\335\274\337\316\333\275\274\036\037\276\010zz=B\016\314\275\217\272\214=\2425o\275\'\t\313=9\236K\276\377\252V\276)\207\206\275g5#\275\246F:\276\343\276\217\275\266\365\364\275N\3410\2764XW\275\231\213\207<\351fU>\326}0\276\212V\276=\352\211\364\275\225&s=\276_\264=\263\323\007\276\276IE>,\236\327<\360\344<>\325pR=\225\3752>F\353\213=d\236\341=H\016\313=\n\000\307=\300r2\276\237&\260\274\271\332\010\275\036\276\356=\010J\257=\3376\342\275r{\001>\275\355\377\275\3019R>H\205\326\275\340\301A\275; @=\335\200\254=\360\014\177\275\035\314\003\276\313@Y>\3535\013>\220\345S>\357\256\217\275\3779\001\276\310\276\211\275\2409\222=\220\262\274\275[\3678>k\2418\276\277\303Q>\373_\253=\020\272\021\276\324X\r>\2707>\2765\204!\275\327\262\236<\325\301\206\275kHW>8\251N\276\006\314\225=\311\217)\276\013\370\332<F\360\000\276I\264\005>\267\375\003=],\272=\327bU>\030\377#\276\021J\373\275\035\242\035>\377>\007>\\\362\331\275\214\004\236=\000\205w==\345V>\030\265\231\275o\350C\276\321q\266=\255\211\021>\256$\327=@\354K>\362\266\311\275\346\364?=\262\014\322=!\371\201<\202MQ>\006q\353=[\300\026\275O\3353\276\312W\306\275\243\233(<\303\265D>}\237\275=\336n\274\275>\256\013>\371m\035\276\242L&\275TTt\275\346\323\225=/\342S>\003\242u\275\2610\305\274ul\024=\036\006A>6\3659\276\321T#\276\265E\021<\035\277\255\275%u*>\361\"e=ap\t\275#v\330\272\220\376\000>t\272\200=+\2354\276\244I\\>O%\365=\212\256^\276K\2408>v0R\275l\270\214\275\021#)\275\031cE\2769\377->\370\375\230\272\330DC>\343\256\236=\371\321\267\275\177/\031\275\251g\316\2751U\246<\355\224,>\256\001\372\275o\252\350\274\334\376\374\275(S\031=\026\200{=eG\307=\035M\212\274\014\350\010=\322\345P>\343\026\'>o\217\366<\362\343\332<\352\263\014\276HRV>\335,g\275D\370J>\036\002\037\276}\020\000>;\005\372\275\352\225v=<\210\367=Ds\354\275\205\335W\276\2013\342<\030\321\325\275\332e\255\275\353,J>\371\234a\276sQ7>\372\311:>v\201\247\274\314\236\206\274\257\271\364=\312\204\207\275s\256O\275\266\255B\276Q\342O;\327E\022\276\266S\003\274\256r3>\312FA>a\320\277\275\246\371\270=3\275\276=\340-\331\275Q\030\022>\277\237H>\232m\035\274\003H\313\273\013=F\276\031\'\257\275\334\026Z\276\022\202\354=m\233\003\276^F\003>o\026\206\274\225\311\334=\373\320\214\274\306\370\013>G\312\217\274>\001>\2768dq\275\021\224\021=$\227\321=\327\'1>\nA3\276\001D>\276\217\275D\276Z\034\272\275zJ\263\275\354\335\241\275\014\216\004\276\237q\353\275\372 \325\275\276\300K\276\257\032\364=\0305H\276!\010A\276\021\031j=\267\264>\276m\223X>U7C\276L}\203<\\\336F\275u\343\004>\256c\r\275\330C\230\275wM\020<s6\004\276\265L\030\276\037\030@\276rD\245\275\275\232\026\276\326\363\256\274K\304\220=a\t\356\275\374\010X>v\275K\276S\003\341\275\3127\304=\315\226w\275\r\312\017\276\325\213\323\275\245\3764>\237\'5=\304L\266=7\211L>\374\321)>cf\255=\010\200\221=\334\220\030\276+\007\013\276Q\3016=n\364K\275g\331/\276\363l\221\275\327\306*>\007\242)>\310\254U>\351\255M\276\0301\321=\240\033\003\275\304M\024\276\264\007%\276_,\353\275_\177\337\274\354\313\217\274\027\201?>\277\035\\\276\207k\346<\275\371D=W\314%\27606\341\2753u&>~\261A\272\371]\344=\024tQ=\273A\021>\354Z\034\276?\232\305\275$\024\372\275\300G\302\272j\216$>W\304\243\275\235\302\370\273\354\3005=\014\325\246\275\364\225H<g\257\213=\003\366\230=\334\253\275=\235\274\272=\203\t\r\275\230O&\276EC&\276\312\031\'\276\r\n\202=\236\010\017\276ZT_\276\023\251c>\265\316\002=\211\225\017\276D\014U=^\245\236\275:m\021\276\360F\013\276t>\n\276?c*>AXB>\033\227^\276e}\034\276\022\3442>\214%\307=\002<\227=\244\322\234\274\356\243<\276\001N\344<\010\177\364<\032\203U>\311\017S\275\236\2169\276\033t(\276?Z\274:\224m\014>\343A\206\275\257\352b>\300\n\017\276@\007w=^\247\262=\013\r\324;\373Cv=\223\035;\276\377\255l=\026\023\356\274\320\324,>oH\342\273;r-=0\314\325\275!y`>\206$\\>*\367\030>R\034\n\276\351\001#>\214A\323\275a<\305\275\330\241c\275\311L\231\275\216\214)=~O&>\321\036a=\357\034T=h\223\224\275\314\246O>\353\376\025\2767\205e>\033;\217\275M%\273\275\025\251\267=\0348\344\275&\023\274=bX2>\270\214N>\227\230\232\275\272\220\325=y\021*=\201\033B>\356WY=\373u\207=\025\010\222<\201\034\"\276+t\226=\374\363\343\275o=\241=cPa\274\204\335G\276b\251\002\276\223:\345\274YUe\276X\333\003\276\311.\005\276g \032\276C\243\365\275\343}\312=^\234\264\273\321QW\276\257\262\213\275$\217Z\276~$\226\274\206x\224=^\016K\276^+\214<\241\332\230=\251\206\000>\326\216\360\275\236\3042>\257\361\312\2746\320\004\276\262?$=\250u@\276;\220\206=]t=>\037yc\276D\272\217=\317\303\356<\010\243\306<\300\262\334\275(\223\352=\224\003\200\274\371h\327=\245VQ>\337\036)\276\226k@\276%w\016\276\227\025a\274\367\022^>4\3536\276\320F-\276\371\026(>\005\323\\\275\275\3126\276\226$\n\276\304+B;\261\226\206\275wG\025=4\355=\276\356\017\033\276\374\n\226\275\276\256\374\275tn\205\275\257\371%\276h\216R\276/\364\351;\371\201\003>\345\222\002>p\266\'>\020f\316\275x\016\031>\245\332Q\276\257A\236=\340\340,\276\001\360B>\262\224&=aP\021>\037\367J\276}uA=@\314?>\005qm=\'\315\201<\322\210\001\274fZ\326=X\300Q>\200\356->\371\214\350\275*~w\275\026\255Y>o\306\021>\260\tE>\220\251\025>\331\n\302=Y\367\260\2751<\351=C\027&>\345vO>=S\242<-\034.\276\335:!\276\230J\310=\232\231\350\275\310\254\022\276Y\227\372=\214a_>\307c\033\276\331\305\004\276\037)\025\276\317\307\005>\342\333A\276\236\214*\276B\2541\276\214e\267=\370@[=\235\211\204<!\327\366\275\035\237Y>\\\271`>\017\250\032\276\371\016F>M\322I>\"y\315\274P\221\023\276\006l\333=7}Y\276s\320I\276\3554\201<\222+\373=\351Q\243=\276\241K>\265\336\034=\215\355\020\276W\344=>\234\257)>\003\222\373\275\010k\233\275\037\312`>\202n\343\274j\033\325=)\217O=O\374/>!*\014\276\n\2310\275\231\006\010\276%F\002>\364\247m\275\326+\357<\325U\033=\245\360A>]/\024\275\000\235\233\275\265\235\274\274\0258\324\275\313\220\013\276\317\252]\276\n{\354\275f-/\276+GJ\275</<>m\245B>\'v\274=ljD\276\260h\233\275\r\342\353=u~\242<c \241<\036\215H\276\321\0142\276T\213\024>\3372\350<\022tW>\366k~\275\032\034s\273\212x#>\037\230#\276\252t\027\275\007\362`>\346\326\267=\335\335\351=\326.2>=\306\314=\303\"\n\276\017\353\001\276&\002\303\275\"\003\340\275\200\307#>\017\314\301\275\356\313\207=\271\233\231\275\251)G>7Yh=\325LQ\276D\347\035>\217\032-\276\022<9\276\252Az=\244\366\337<s\204j\275\364g\027>W5\332=\305\251U\275\r\036\006=TA\301\275\0356t\275\354>\020=\355\316\035\276)<\236\275?\264\002>\321_\241\275\347I^=\252\241 \276\274\311=\275\365\312\336\275i\0162\275Ch\3379\221T\363\275\350\321\374\274`?5=\221o\221=\352\250\r\276\034\tK>\352?^\276\207\r\265=\034\300\366=,\000\n\276\3072\212<S\330\007\276P\357\237\273}\177\250\275\202iP>5\355\005=mVq=ha\351=\276\3100\276\323\306G= \257@>\\\224P\276\212\'\273=,\266F>\331 \013\276n%N\276\232\360\230\274\212\036\r>\207\261\314=#\026\305;\270\013J>ay\216\275\245\023=\276m K>H\020\235;\221\246\204=\324\362\300\275\334,\340\274r\347\036\274q\363\257=\337M\211=\212\354\230\275\263\022S\276R\204\314\274\266\225\001\276:u\273=\032\2000\276\327\234J>\215Q\035\276\010\216\r>\260\207E\276\362\t\375\275\010\376\200\274N;.>?yd\276\223\377&>\202&\013>Hi\226\275\240:\346<\260E\252\275\tu\355= =M>^\343I>\034i]>b\3654=\022\277\203\274\024\263\312=\336\254\024\276\010\244b> \000\017;s\263\034\273\344\264\233\275\350\311\233\274\244D\006>;\016S=\3742H\276o\200\231=\177}R\274\273&\271\274\276\251#=br5>^\344\026>\263Y&>\241XA>\240\2725>\247}\304\274q\273R\276\241\343\307=cd\260;\357c\237=\250\277:>\232A\010\276w\324\013>\0322\361=\234\253\237\275&\337^\276s\006%>\204\240a>\242\230+\274W\223\007\2760%6\276\373\215)>\025\357\363=\322k\003\276\234\031\222=\004k\t\276a\324y\274+\'\350=\260\226\004>6!.\276\332\320\311\275\031\200\231<FB\301<\233\247\337\275\033\036d\2767\312\265\273\026\373U\276\222^Y=F`\037\276\001\371]\276\022\337\225=x\366\365\275 \315b\276\270\350\342\275\3376\021\275G{B>\365\343B\276\240\372\333\2756>\022<V\224\304=-}$>\2323\016\276\234=>\276q\373\307\275\261Q}\275\255\217\256=JP\003>)\301\250=\255\r\026>\267\307B=C\tR<\343J\305=\3175H=\002\227L\275\214Mn\275d$\316=\301}J\276\224\014]=\022\212\330\274\330wW>`\017\245=U\204\\=5|\376=\340\361\334=\003\261\\=\366<\021\2763XH>j\261\327\275\266(J\276\n\235n\274\367\264\261\275\'J\341=<?\375;\326BB>l\023\363\272\343\347\306\275\345\n\007>\317\354$>\033a*\275\007\352Z\275\342\023;=\235\267!>\'\325\315\275\323\367->\365\350A\276S\371\000\274\001s\261\275\335\035W\276y\361\341<\271T\261;kSc\276\212\326}=\2105\237\275\222\204F\275\023\021\212=\327\355\210\275\260B\023\2769\262\n>\317\0064\275US\202=\260<%>\177\350c\273=\276\313\275\354\276\350<\317\277\312=z\306j<\223\rY\276\t\234e\276MW\337\273\371\223\245\275E\354)>\202\024\034\2759\342\026>s\355\034\275F\352`>\033y[>\243\302\272\275\330\305D\276\322\010\023>\3157\255;C3k=P7\256\275\366c\036>\311\326\326\275\033`#\274n\t\375\274?\211_\2769\360!>\013\201B>\216\377Q\276\200E\332<^V\357\273\2677\365\275mj\376=\303\370\037=\304G\275\275\256;\256=\355me\275\n\026\026>\272\277%>=\014,>\251\000R>\347z\\>\250\016\030\274\004=\210\274\365\221\000\276\370\344\026>p\213\354==gH\273\235O\362\275O]\016\276\\\260.\275\'#\322=\316\0345><\004\260\275\243$9>\014\205G>[\016@\276\374\336\362\2755\242G<\365KX\275v\211\344\2751\341\004>\241\371:>\374M\036=j\303 >\303l\002\275u\256\267\274\016\327\315\274\206\345\013>\307?X\275\377\375\354\274\177\310\261=\016T >\013h\212\275\371\243[>L\022\317\273\360\243\200=\033~\225\275\225\250\025\276\355\303\201=TD\261\272bt\312\274Z\253\000\276\030\370\317=\177\'Z>\233\017\026>!\373\257\275\rc\016\276\207\272\304=\r\205%;\276\314\320\275zy]=\254\027\006>\364+@>\037\326\016>\315\2309\274M\2346\276\270\rF>g\202\333=\260\211]\276\341\216\230\275\341\356\016\276\302\260;>O)\'\275-k\375\275\275\3524\276\200\306\231=\237\235\345\274\325\3417=<H\017\276\307\232\374\275\272-E\276!\'\212=u\236F>\375G\210=B\203N>^$\\\276\221\3561>e\255b\275\207z\004\274\271\177$>\317\211\r>K\335T\276I\331\335=\272\000\003>4\243\344\274?\002e>\\t\304\273\346\236^=\0270\014>\\|F>\233\\\251\275M0\034=9\202\024>\245\333,\275\334\311\022\276\232@4=\271\332\022<RJA>\337\246\264=9e5\275\316GF\276\013\2357=jW\320\275\370\301\347\275\206\035J\275]r\'\276\247\303\007>\335e\212<\016wO\276\272?g<Z\264^\276@\233T\274\352\277\270;d\321\236\275.\343,\276>\335\007>\205y\302=M\365\251=1kk\275 \023\r\276\365{\025\275\367p\352<\305\241\030=h,\020>\257\330\353\275\ro\355\274\021$3\275\301\356\317=\022M\"\275\002\214N\272B\241\005\276Q\245M\276%\202C\276\367\274\366<\377\227N\2768\341.>\000\331\305\273Y\304R<.\215Q\275A\222#;BH.>j\036\014>V\261\">)\256\205\274={\035>\221\375M=m=\017\275~\035i=\316\321A>\220\273\013\275:l\336;M\313d\275-D\220=\300\024\242=\003\327b\276\203\3234\276\223\002\010=\234pT\276\270\264\363=\241\021\302\273\340r\006=\263\240\030>\274\354\273\275\251\206V\275L\326\005>C\372l=\t2\316\275\222\214\325=54B\275&G\031>7l@\276\260\014S\276\255\257\230\275\217\014\332<\203\022\024\275\350\2240\275\264\215\025=\323\031\372\275%\327\276=\340\305|\274\032<H>]\232\014>\263\014\031><z\003>\332&\366\275\276\021\002>T\221\315\275jW\021\276\263\021\304\273\027+\343=\356\007\027\275\177\376\226<4\322\003=/#`\276\005\217\366\274\034\250\021=\023\004`=Z:R\276\231\353\364\275\t\036-=\220\277*>\371\375\024\273\337\3055\276\310et\275U\000>\276\365\260\362\275\377\352\266\275\254\223Q=\201a\211\275\017\300\352=\300\333\013>\271\302\300=\273\213\021=\225\334\366\275\3013\260\275NW\307\274\307vP\276\022p\016\276L\234\210=\253\231=>\274\030\301\275\3731\202\2750\030\016\276\220\260\344=\0063-\275\363\020\350\275\006~\311=M\210>\276\316f\315=#\271Q<\310\003+>\301\001\\>#\350\261\274VQR=\254\2275\276\264\242\013>\227\236=\275\302\322T\276\364\353\033\275\270\'\034\276T\023\221=\226\337\244\274\303A\031>\t\303\036>4\3165\276rc\210<\200\204m=\331>\251=\231\362i\274#]\r=\341\236\034>\262\303\303<\360\267:>\272\027\352=\206\241\030\276u\005[\276)O\250\275&\221\205;\220\202\253=p:\312=_I`\276r\223\315\275S\245\030>\242\371\346=\310$1>\366T\"\275/\303Z>\334\230\215\275k1\341=\372Q\234\274\371X\270=\353`W=D\001\021\275\203\276\027=\266\2401\276\240\344\221=i\251\221=ai\271\275\300OV\276\244a\364\275S\341R\275I]\304\275*\367-\27647\004\276\264\326\\<\243\000\010\276-H\244\274/\316c\276\362\277\362=\313\344=>\332\217\032\276f\203H\276\374C\014\276I\315D>\205\307H>n^c>\275\016\t\275i\376\332\275\256\235\037\276\225\262\225\275s\241\035>\003\360\301\275O\304\216\275w\334\354=o\037\260\275\222\213\336=\004\323\236=\337^Z>\270\2120\275\262\207\373\275\366\300\000>,\017\365=\277\307F\276\366k\361=:\320\214<\314\t\004\2769\256\014\275=\"\266;&p\347\275\013\036 \276\316\300\370\275M\013\t>-\202.\276\242\364\265<?\324\300;C\377U<\220\005\360\275@Y\345\275z^\\=\364*\274=\223\204)\2765\005V>\205\321\017\276l\307\265=\357\205\024>\223X\003=\00124>\2034Q=v.=>\272\327l=\205Z\005\275\2130 \274k\021:<\376\265,>\360\320\311\275*)*\275\325cX\276>h\266\275\204\330Z=J\353O\276N\243C\276+\244C>\006\247W>f\367\255=\325\211\202\275\310\267\n\276\246\317\023>\242{?\276^j\013\276\336\037\030\276o#\r=\365%\004>\361/\036>\273\223\205=\237\006\224\274\034[\034\276\202o\010\275\262\221\356\275\303\334\331\275\024\310]\276p\265#>\207\315+\276\377<U>\305(\305\275x<*>\325c\205\275\326\312!>\212$\255\275-\010\030=\002\226;\276cLI\276j\301.>\027\372)>\2155*\2748\232\366\274(\265\363\275Nw\321\275\256\r\010>\221\275\177=\342~%>\206\267\t\275\3041F\275/T>\276X\317\033>\222bj=\t\371\262<\245i\027\276h\352\310=D\336c>\376\243\364\274\017\343\r<}l\032\276^\024P>f\030\307\275\362\243\032\276\036\247\306=]!\202=Y\340K\276\200\2666>S\224\376\275\234I`\275\222\2658>\302m\032\276\"\222D>\346F\224\275\375\230.\276R\210\364\274\370\205\033>R\211\375\275\220\003\220\275dL\261=\300W\036\276Z\233K=)\364\305\275\222\360@\276Nv\364\275F\237\220=D\226\316=2\307?\276\212\264\210=C\2370>g\025\246=M\332\357=\235\214\261\275>U\003>\206X\341\2758\\\353=q\n\276\275\266\231\376\275:\004\220\274gJ\037\276\037^\334=%\264\007>5\277\376<\252\301\275\274\233\362\204=\231\372;>\253\\\020\276\016\330\265=\375_\034\276~\332\014>\347\265.>\325\367)\276\370\0000\276)\005\270=.\256\005>1\336\005>\r\302~=\205\324\205\273xc4>\216\363\336:\3253\274=80\366\275\302f*\276{J.\274*Q\362=9\0209>\370=\361\275\001\2507=\346QC>=N\t\275\356e\310=\215\252!\276@\314\247=\224\342E>\340E\232=\245g.\276\265\342\244\275\033\316%>a\220`\276\0143\327=C\301+\276VH\354=\367+\211=yI1\276\310\211\234\275\311\303\223\275.R\273=\226\367\341=\245\217;=Z\007\243\275\337qp\275\353\032\301\275\232;\236\275B\372\006\276\346\275\221\275\304\0339\276\2635\206\275qy\360\273\270Pd>\014\274\t>\215(\363\275\255\016d\276\266\204\233=\" \006>\352S\335=\253\347\003\2765<\203\2756Mc<\362\370\370=\000\305\021>-\267L>\275\273b\275+\022=\276\243\212\026>`\363\340\275\343\021\377=\272n\177\275\003\254\022>\271L6=\320-\343\275a\035\027\276\200\225\035>\256\023e\276\247\2737\276\253\005\357\275\352\177\344\275\247\237\'>e\255\010\276d\204\006>\217$\326\275\252\273.=\213\3201\276\354\343\243\275$\341\351;\244x\316\275\204\314\361<\007\203\262\275\254_C>\225.\337\2739\347\035\276?x\213<\215U\226;\320;\003<\245\276c>\202\321J>\371\312\225=\366c\333=\2742\t>\321\271\377=\237\342\312\274\022\2341>xr\004\275\225W\221\275\303g<>\305\233\311=\021\250\231=aF5\2768f,>\241\3746\276 }\340\275\250\255i=\\<e>\276\244I<\3457\n=g\002P>\303l\025\276?\024d=\240\3461\275\255\006\343\2744(\301<\341\316\203\275\033\345\350\275\344\371[\275#\017\n=\275\341E>\233\346V=\202\2364>4M\r>\264\261\245=E\321~=\177\t|=\003,5\276b\216\024\275\037\035\356=\344\310P>\235\301\236=F\331\304\275\232J\372=I\264T\276\312\\*\276\037!\243=\272\331\314=\326\343\n=\345\252\255=.\200\235<W\233W>H/\n>5V\002>\246?\367<\352\357\022>\335\347?\275~y1=\371\357,\276&&\033>3u?=\222\225S=d|V\276\036oR\276\212A\222<\313\255}=P3F>\232\024`\276\275\235\305=`\237D>\241`\210\275\034vQ\276(\314\220=\325\222G\275\001$Q>\312jY\276l\013\300=\033o\245=E\215\345=\320\250\003\275\366\236\010>b(\213\2755\317B=\223t.\276J\2571\276$\205\341=\002\353\n\276fW5\276\270]@\276\212W<<y\023W\276\026\ri=D\333\024\276\254\234\354=*\014Y>Xm\351=\301R2\276t}\362=\353\354\016\276r)\337\275*\306\205;\002\007\357\275\247\002\247=\351\233B>E\225\025\275\267\333\211=\277\365\373;\014+\032\276e@\366=\366\356\233=\332s\222=\213Y\000\276\026}Y>.\266\322\275@u\004>#^\227=\217s7\276\204\004\210\275\227\001_\276\020\311=>-\274<\276<\026<\276BE\002>\345\022b\2760o\344\275\375!\017=\032h\330\275\372%N=\263\006\t=\207e\320<\216\302\267\275\0139\\\276\347\274\341=\247\267K\276\274\353J>\211p\255<A\253\265\275VT\264\275Q\353F\276!\026F\275$\3430\275\036\203z=\332%?>\257\351\n=^\317b>\365\007\250;\233Pd>J\005F>FR+\276\303WP>5\271\267\275\324$\347=\202q\311\275\220\215E\276\007\370/>\343-\371=9c\217\274\270\022\271\275\204\225\221=1\323\276\275X\352)=\023\311\026>\262\236I\274\301\3474\2767\013\227\275`\356R\276\342\277:>\376\313\252\275\301\351\265\274\025q\027>\262\312\024>2o\007>\022\245\337=2\353\250\274\002\035\266=\337p`>\216\261e>\300W\344\274\327/\t\276!\3415\276\206\255\010>\244\351@>\n\270y=0q\214\275\253E\026\275\312\375\375=\264G\214\273\231\265C>u\324\033>\304X=\276D\032\235=|\304>>\315\334\364=]\232O=\302\232\200\274\252\367\357=\004>\254=\340\2044\276\353\000\014>\200V9\276t\241->\016\261\022>X_5\276\317\346c>@\372\233<\240\024\341\273\336\273\353==\013\376=\355\3175\275\305\360\241\275\236\207\351\275\252\322l=O\256T\276\273h\260\275\371\301\374\273P\000\344<\345_/\276\206\r5\275\202\t0=\374`\327=b~L>\325p\326;92\227\2754C\361=JT\345\275\374\0252\276;\000N\276e\275\251<\303\252C=\330\3424\276\2675\001\276\255\215N\276\224\367\">\242\204L>~HR\276e\201\022\275F\204\222\275\310\'3\276\300\231\266=\275\346%<\363\235\217\274U.m\275\2738P\276\271\215 \274\271X\376=\250\037\r>i\312\263\275}w\000\276\010C\010>\223\306E>n\r\251\275\027\355!>\000F6>\023N\037=\307\355\032>\336\rX>d8-=tE\371\275\032\232\021\276:\357\315\275p6\235\275\365\352\216=\255?\314=\027v\354<\005T\357=\tSN\276\005e\022\276\310y\211=\214)T\276\256\261\261<\271\324*\276\364\361A>~\270X\276\341\025y\274\000^T\275\235\224F>@\341\226=\240\t\316={\004\240=&\021B\274!\326d>x\217\231\274^< \275yB\311\275<)U\276\226q\322\275\335\375\034\271R7A>\305\3052\276X\273(=\2116f=~\355\037=\324~\036\276\001\334\224=\255N?\276\205r\315=\'6\304<\307\343\357\275\\\352\267\275\241V\004\276h\353\315\275\214\002*\276\271\270\">\222\235]=\024\223\374\275R\333 \276\337\0131\2765s\233\273J\034\021\275YGU>eo\333\275\364\274T>\354\256\232\275EVL>\315\277\251=\320\371.>\"\244\220=\205\337%>\177>r\275\274\303B\275\336\251\213\275\016\234\322=\265A\363=\367\373V\276\261i~=\212T\006>alE>;\025!>\rU\030\276\264k\035>c\251\221=\227\220V>\235=0;t\375\362\275H\003,=\0223\274\275\272\305\007>t\235J=\223\2437>\314\212\204\275\020\225\005=\260\342\277\275\204\313*>\336\2129>\210\330\023>\323\316\035\275\363,2\276\"\313\354\273\251\266\211\275:\013!>\2404s=\257J\003>\370XL\2762\'=>\006OX\276\262\267D\276\351\325D=%\342M>\214\237\334=\231\311T\275\301\211\305<<vc\276\n\370K\276\346m\316=\361=;\276\310aP>\200\236@\276R\214\026=\242JI\274QJ\267<3\250\031>e\2216>~\037e>[A\201\275\325q\037=\311\263\033\276)\371\026\276\211@b>\3101&\276\315i/\276D\346\311\275WO\001>AB\020= \332Q>Y\3417\276\000\301R=}!.>\374\276\002\276\34021=\233\235G\276\255\022\250=\277\350O>\017]E>\307\350T<\251x\376;fn]\276\257\203W>\263\372\363=\256\0356\276\203\314\025>\371\3243>\303\314R>\032V>\276\235%B\276\004Z\317=\337aa>\330\025\006\276\310r\213\275\215\037L>\375\214\256\2758[#\276\3465.>N\367\355=Y\020N\276\372?!>\"\355\204=;W\030\276\213\200\004\275\324W\002>5\242Q\275\216\357(\276/`\006>\241\333Z\276\252\027\025>\031\313(\274\276+Z>\035w\246=\024\217\021>\2057\325<\316\334\202=\016t\263=\324a\032>\256\274^\276S\362\010\275\242W\024>T\273\277=\257\202R\276\020\n\321\275\007HZ>\037f\263\275C\263#\276\244\326K\276\311\000W=\375.\363\275\232\2423>\346\303\016\275\\\0108\274\265[b\276\353\314\311\275\33176\276]K\265=\006I\014>\321\016F=<h%\275J\220\001\276\346\277\251\275G}<>9\307Q>o\211\035>\001%u\275v=S>RR\035\276\3371\031\2753\242\025\276\331\271i<\333<\367=\251\225\037=\0230\006>\0172\357\275\\\301#>\366\221Z>\377\005\266\275|\\X\276fo\n\276vKD\276\225\326\\\276I\257\344=@\376\255\274$\240\255\275+<\350\275\375\326\204=\010rC><w\003=\027Bc\276\247\206\232\274?\2759>\264\035=>\242zC=k\003><\t\177\025\2763[\r>\306q\221\275n\021\317\275\322@-\276\352\335$\276\014\254!>\251\\\333=.\353\000\276E\327\n\276\\#\331=\342\300e>\232\323)\276\035\265\210\274\221\221n\275\177D\272\275\n|k=4\347\227\2735\214\t\276\201\032\374=\2430\277<;\323\024>\034\371\234=\037}3\276,L\026<9X\007\274e\307\335=l}$\276\315\346\230=`\257\352\275\021\314^>\350\020\314\275lp\203\273\245\267;>\355wV\276\226\206#\276\366~\032>G\356W\276\273\251(>`r\003>\035\361*>yV\344\275\313\224->#\337=\276\365\342\265=\016\354\013>\254\325\020=$_2\276\233\275\\\276IxK\276bm3>\036\254>>\271D-\276\360V\307=\325c!=l\251\242\275\177EV>\000fU\276\376\264\020>WX\342<=]\005>1u\321=\365\342]\274\351\363\236=\nM5\276\017\266\333=c\3117\275\001\037\224=\363\357\353;\264/\361\275\017]\033\276`\355b>\315\020P=\225\375\253=\256\364O>\207\206\275;\232\254t\275\360\007c\276BnA\276?Zd>*\312\312=D\032\356=\213\266R\276\332\324<>:Q2>\366\0332=\237\3008\276\007\\\363<\nnT>\213\312\224<\366>\235=<\0012>h\245\017>\301|\245<\335\342\221=y\244\t>=\372\360\275q\233;\274=\031\t\276\231\217d\276\3426\317<$W3\276\260\200\202\274\315\\`=f\262T>\323\330_=\3137\270=\373\001\230=\032\325Q\276\341\327t;n\342X>X]\211\275\205\030\311\275R`\312<\325\327E>.\003z\275\3250\343;\263\302\245\275\320\3311>\235\222\212\275\357\215\214=\027;8=\0351[\275\240\225\001\275N|\241=\341`\337=\303\020q\274I\010\002>\177n\025>_\366I\276\363\366c<\001\201\231\275\277\2411>\030\301>>S\346?\276G*\341\275\374\333\021>\271\336\345=\270(\026\276P\220\030>\264\245b>\030\230\273=\367k\031\276\2310\007\275\004z\252\275\t`\017\276\310\326L>\225\305\306=JB\237\275(\224\222\275\233\276b\2765\267I\276\301\241\246:\243\232.\276\260@\370\275\022\275E>\340\001C\273&8`>\245\225\254=~2K\276o\227J>\025{\001>\315\n\350<\007\244L>\333u\301\275\316\334p\275\242\021\347<\002^\304=\270;\320\275\261\034\014>\022\264\343\275\273`\313\275\3715\376\275\234h(\276\3665\370<\325kF>\262\276\325\271[w\372\274\301\266\262\275J\235\020\276\264p\255;\215:\346<F\353\034>i\277O\276L\002\327=i\250\204\274\222\201\025\276\252\323b\276&r\325=BcG\276\223{[=\327\307\013\276\375\033\360=\341L\254<v2\261=\273\333\347\275&b\'\276Id|<>K\033\2720\340\312\275\243\225(>\320\316\330\274\217\002\312=B\211\263\274\351\351:\276\241\324(>\t\241\210=YY\261<\327\336\351<\rY\t\276O\007\216<\204<\222<\006\026\264\273\322J\016\275\326\304\025\276wX\032\276\332~*>d\213Q>n\016\365=\"\274\t\275\014$\327=\223\035\324<\300\033\257<\241\206\204=\362Q^>\301-Q>\n\337\374\275\216\311\004=\014\230$\276\251\332F>\324\316\325=\246C\332=\234\217]=5%}=\352\220H>][K\276\316\253\300\275\362\253\220\275$\343\253\275\274\236a\276\347}\335<~\010\225=\305\0064\276\324\322\036=\020\205\274=}\376\363\274\312\272\002>\032\005U>{(M>[7\014\276\257\222\254=\021Q\'>,\273\027\276\22730=m\321[\275\267Z/\275\363\304\013>\276D\343=\2020M\276s\020G\276\214\362\241=\035^\347=^\274:\276\374E\237\274\202\350\006\276\022W\325\275?\2651\276\206\362Q\276\360\3757>\353.!\275\223\237\007\276\027\347\266=e\0078>)\343C>\227+9\276gO4>\220W\014\276og\273\275\212_\305=\033\375\267=\267.,>RGM\276\205\321\021>\221jT>r\026`\276\255\216\246<\3771 >)\223\"\275\253\272O\276\213\317)>\307\010\007>%l\024\273\022$I=\020)\342\274i6\035=_h\270\275\300\340\"\276<\r\324<\210H\000>\353\313\262\275\354\351\t\276?C\022\276U3\n\276\215H\347\275\233\356a>\373\277\037\275\371#\300\275 \2638>\211_\230\275#v\356=\331\206I\275\203Z\344=\355!4\2767\000\025>\271\030a=\364\250\350<c\313\206<?\036\251;c\334\033>\271\032S>\255\033\276\273\r\\\356<\266\006h=k\347s=\316\357\320\275\036FW\276\273\244*\276d3M>\272\336\006>\220](\276\331\0211=\215\361\235<\037\266\230\274\257\032\333=\240\266b\276\323\231\254=\275i:>3T\260=\002\3654\276\n\350J\275*\376\234\275\017\225\217\275\0309T=\245N4\276-w\276\275\250\253\316\275\303\370\341=\260\337\331\275\271\2120>\205\216y=>\276\001>\345\357\203<0\242\021>Z\362[>\341\035@\275:\315\323\273J\343\236\275\265z.\276\321\254\237\275b\2528\274),\251=A\260\244=S\320\"\276\337W:\276\327*A\276\272O\346\275\243p\000\276\264\000\201=\005K!\276\371\255\316\275\246n*>\224`0>\\\206\264=8\263D\276e\027\030>\\\020[>\207\237\n\276!\304\016=\006\224\032>\356\357\240=D\207\267;\241\006\006=Y\260\257\275(\335p\275\021\225\037>\372V\034\276fMb\275\307X\365=\035P\035\275\306\254\261\275\005\3328>\370\243s\275\261\2031>3\034\017>e/v=A\222\243=\022\337\260\275A|c=\032x\253=\0205E=\305\256\014>\036\\M\276\302g\341\275\316\016\210;\315t\360\274(\334L>u\020\026=.\275\302=\004\227/\276\004\005A\275v\231^>\362\217K>S\364G\276\342WU>\002\275Q\276\246\020\034\276\201d\211\275\3745\270\273\243l\216\275%\250\335\273GG9\275\227\337U>\300\355\315\275\005\214\037\275\036\264\233=\264m\263\275\230\351(\273\220\374\006>\373\312\277\274\303\203\013>|\2531\276c\312\221=f\364\024\276\244\333\320\274\327\313>\27605\212\275C\340\346=\177I\255=\200\211G\276(\355O\276Q\304\347=_\303W\276^&\000>n\307\006=\371UE\275\336\365.\276\371*G>1\204I<\25336\2751\232B=-[F\276\306\303\004\276c\301P\276\253\310\216=p\177\256=\246\0242\276\241_\206=\300\235\363<\031g4>\323C\203=&\261h\274\366\236\016>j\306\232\275\014}\361\274\261\333p=eN\315<\304\013$>@O\265;2\373\231\274!\234\030\276\227\327\352\275\357\027\002\276\323[\376\273\225\261\256\275\206\3125\276\257WP\276<#7>*\213\013>7\004\003\276\2126\351\275:\'.\276\346!}\275\243\210\033\276&c\231\274\273>\271=\377\220\367\272\213\266\010>1\030\263=\022\273\342\275Z\244\256\275\370|\252=\272\216/\276,\260\010\276\245Q\333=\260T+>\270\315*\276\351/\035>5\034A>B\370\005\276k\351\006\276X\033\373\2749\234\003>~9h\275td\311\274\251tK\276\001\'T\276\241d\277\275!<M>\353\311]>\275\3541<8\3164>\273\270\212\275w>(>\rr\271\275w;\270=\"e\213=\346\361\376\275\003\253\335\275\340\210\014<\266\025\232\274\314/\322\275\n\032\022>\322(\016\276\343\353\350\275\370\320G\276}WX>\316\203\300=\334\311L\275\351\261\213=\037M>\276\336;\001>\014ON\276\321\3704\276\325$\002\275\265*S\276r\362\255<\352M\020\276}\371\317=O\202d\276\254\343:\276\334\203L\275\274%\023>\337B\334\2744,Y>u\r+\276\207\344O>\017\244\305=\017%L\276\257\356-\276\202=\020=\004Y\013>\002Z\274\274\221\005\362\275K\024\256=:\354\n\276\202\026z=\0041D>\237\360\331\274\332lA\2766l\025>\243B\353;\230\317X>\345U4=\277#\323=\222K\026>\276~\355\275\234W\355\275:\343\025=\236\034\222=v\202\'\275\277\222\263=\245\322\317=4\365\337\2755\220e\276\027uI>1\312U>\262hA=\242\263\345=Q\275~<$\204H\276\320H\344\275\266j\036\276/\205)>\246\314\013\276?z\377\275\262\016d>l\222\224\275;\236$\276F\004\t=I4E\2769\314C\276\000\247\237\275\336\376\004\276K\314X>\260\312\200=\240\227<>\215\312>>\232\376R\275D\033\003>\211c\001>\006\2122\276\363x\216\275{h\014>I)\n>0\325f=:\2170\276\273\007L=s)\351=niP\276\007\000\021\275\333\007,\276z\332\272\274\355R\262\275\211\251~\275\007\251@>\220\345\030>><\241=CKF=\227\032\017>\346Nb\276rT\253\275{\233\021>n\314\010\276D\305\256=i\335t=-\246\223\275\361\205\303\275G\255B\275\267\303J\275\360\025\033<L\244\230=\017\305\030\276\024\216u\274\'4+\276\003\310A>cQ(=\275\245\307\275]\322k=m\342\241<6\234\240=[<\220\275\215{\256\2756\341\001\274\302[\346\275\236<\272\275\303\304N>\315\366D>\212\226@=3p[>\017Ly=\350\\\350=!\346\376\275\313\202\316<f\3162\276\345\270\034\276O\337\025\274\201\241\210=\376\261\355<QG\307=,u:>\3759J>cL\n>\217S\035\276\301\322\300=\001\343\306\275\262\233d>,U\307=\322\016!\276 W\013\276\267\356\013\276O\025M\276\030\201\231\275e\272\017>\\z\276;+\205!=\317\312*>\245\3163\276a\032+\275\262\370\013>U\247\233\275\375\213?\275o\355<\276\263\302(\276\330\226\007\276\243L\034>a\217O<m\206J>!~\263<\375\2610=\207\323Z<w\212-\275nn\232\275@\021\"\276\214hA>.\326\326\275g\004g=\252F\">\200\273\364\274\253\2307\276\210>\345\274\305,=\276\263\"V>@--\275\242\177`>c\330\265\275\300\321\261=y=U\276j\272\235\274|97\274\3334\317\275\370\201(\276\01319>i\003]\272\020A6\276\020\253->\266~\235=?\370F\276\010\223\r\276\370\335\r\275O\025a\276\177u\026>\260$\001\276\242=\271\275-O\331<OR\370=\035\334+>\216\216\013\276|\317\365\275x\236 >\013\017b>\031\3110\276\036\017\032\276(nK>{\202\007>\033!\007\276\236\202\311=\245\315t=\305\351\257=(\t\r\276\250\324A>\0228\272\275\327\0004>o_\027>\232|.\2761\214E\276\310\270\247\275O\254\316\275\302_Q\276{]\263\274\2520Y=\221\322\223=@J\035>\347s\314\275kD7=u\021\033\276\270\026\311\273?%\244\275\227\305\210\275q@a\276\033\027^=\232\362\262=\020\320\022\276m1\022>\320n?\276\275\003\217\275p\005a<\254\026\003>>\221\277<\354\237\"\276\304MW>\216\023.\276\254g:\276\010vQ>?Qv=\322\220W<=\r_\275\230\362*>\243.\013\275\305\n!\276\363\254D\276R\033\036\275\244\017`\275\203\377o\275ta\001>\232q(\276\303\026&\275/\342S<\375|&>\027\023 \276\321\005e>\030_[\276C\226\023>\323\235\037=\352\005\374\275rc\337\274c\245\342\275\250\327V>\340\000\001\276$<*>gO\002>\250\260b\276\232\014\016\275n\3251>E\222\201\2758\306B\276\001\327\025\276m\352\014\276\037\037Q=\n>\255\275\360\367\256<+\222\032>=\245\203={A\330=\252\032\223=\311*\007;<0\036>\216m\034>G\256-\275\000oJ>\006*G\276\022\362\016>\3207\004>\304\304\277\274\220m\310=\325\320\311=+\270\212\275\364.\020\276\214\335\222\274\366\354P\276F;\315\275\003\222`>|\213\265\275t\016J>\3548\242\275K\3059>\003o\014\276\t\003`=\345\010K\276\242}\221\275\177w\302\273\365\235\361=x\250\203\274v\206\254=@\2330=tx\236=d\\\246\275\275bf=\277\247C>Z\246~\275k\007b\275\032\020`\276By\022\276Go\251\275n|a\276\337\365\243=S\357\032=\023\316>\275[8@>\351\202`\276[\233 >\325^\210=t\013\204\275\362\376~<\0350\327\275d*\215=\037\325H>\302\373\355\274=GY\276\002\230\374\275\024\3705\276\264{=\276\2637\\\276p\357v<\354\014\010\2761\232\310\275\374ye\276\366IX\276,?_>\374,>\276\214\316c>\374\271\361<\2418\013>\026C\265=\013o\241=\242\342\027>z+R\276R\334\207;\202\377\016\275\321\207\032\276{\227\007\275\032\221J\276\2777\\\276VA\210\275\204\224\034>3\263\377=^\212\017\275\226\243\032\275\326\226\031>v\356\000=K=\317=\326t\275=wX\027>\365r6\275\0356\260;~x\306\273\2204*>\021G\037\276\013\272\272\275\244\206e\276\242p+>\213\032M\275\"\362\016>\252\375Z\276\036Y;\276\347:j\275Ks\303=70\006\275\0364\">!\262\237\275q\351\025>\260\320\000\276\221=d>\210\336=\276ci\021>0}p\275]\255\r\276\"\324\003=\261\\\037\276\341\267\364<\256\265\237<\216\246\327=\360f\010\276\252\003Y\276\235\377>>\035[1\2765\265D>\262\\\031\276\253Y\324<\001\013\254=-\260\347\275/w\356=c\212\023>\231r\030>\2333\245\275\264\204(\276\362\312*>\312\254\034\275E\035\"\276\243&?<?~G\276\364q\001>[Z\336\275\\\233\336==\216Q\276\350\354\016\276\301\0217\276\201\301\365\274}\206\225\275\267$\347\275.\201|=\304AI\276\231VE>Q\354Q\276\303p?=}\325F\275\320\326\204=Z\310\r=!\006\013<\320R3>T\377#>\\A\"\276U\271c\276\361\3553<6\232\300\275P\006G\275h\211\261\275Q\024P\276\324\227\204\275\021\267\201\275\242\035+>\225w\361=^\000\313=\032\306\037\276J\246K\276\305\014\221=\2070\356\275\250GA<\264\270Z=\205Y\221\275\333\006\263\275\3133C\275\370K\303=\310\373I\276\014\rJ=\032\246\352\273\332ZO>\211\025R\276[d\025\276Y\345\034\276\325g\250=\236\365M>\220\247T>b\322\232={;\360<j10\276\372[\223=\006\320\330\275\314\204\332\275\020\255\263\275\204\256\266\2751y\263\275\266\267L=\334\2546\276\217\261Z>\206\006X>\303.+<m\236_\276\216\235\345\275\310\312=>\375\220b>\261\2670>\006\313\375=\315|\236=\"\200(>\201\033B\276X\335 >\333\245\233\273\202B\205\275\024\025\330\274\314y\275=\202\221\325=P\214\002>\221\0059>\325\336\314\275M\315^>\371\336=\275I\233^=\333\340\212=\036\375X>\036\\c\276\205Rx<\006q~\275\237\214t=\315FY="
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
