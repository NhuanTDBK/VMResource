node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\317c\032\274\335\240\266\275\027m\360=?\221F=\255F\241\275\221\3017=\020\215\372\275W^\337=Ov\302=\313\374\317<XY\321\275T \271\275\003\222O\274v\035\376\275\"\274\000=\276\314\331\275\326\222\357\275-\257E=8o\264\275o\231N\275\204l\013=V\331\301\275b\237\303=\362\010\373\275\010\345\253=.E\336\275[\n8=\373\351R\274\235\355\204=\345\355\211\275\242\370w=\021\036\236=\365\213q=\221\372a\275\020\214\350\275\002\366\367=S\305\225\274e=\363=\323`J=\220\220\330\275t\243K\275\375\331R=\321\323B\275\304\0232=*Y\314\275\230\203X=6\226\017=\022)\366\272w0\372\275\347\030\352=\034\010\004>\025+\274<\310@\024=L\224O=kJ\014\275\320\356\312=\202\323\260=`Jd\2754m\267=\237\301\262=-y\270=,\367\215=\357%\252;\205\341\376<\257?\357=\033\374\266=\231\0035\275\246D;=`\315T=+U\270<\246\010\231<\016~\371=\303#\227\275\253K\355=\032\031\336\275\2622\334=\367\337\341=\364\242\347\275\360\260\002\274\361\335\370=}\034\312\274\321\203\363\275F\345\003\276a\263\203=\'\303\r<\250\221\332\274\344N}\275\377i\037=\347|\213;\006\030\345\275\264\336\204\275_\266\253=^x\331<\231\325\365=Op\353=\352*\177\275\326C\203\274z\264\366\274\023\004\"\274\247\377a\275>5\210\2753\217\274=S\330\323\275]\257n\275$7\212\274FC\320=/\026\013\275\241\310\272\274\277\217\322=c\366 \275\260\352d<\243|\244=\253\004\261<\017\217n=V\215\304=</\344\2752\244\267<\356\356\216<\243\031l=$\016d=\034\354\370=\251\202H<t\375\355\275\236\024t=\332\362\250=z\375i\275*:\233;\031V\271\275\355\262\022=a\357\220\275\213\265s=\024x\253=L\216V\274h\026\274\275b\245\320\275\216g\330\274\302\317\353=\023\347+=\203\177\355<T\253t\274dtg=\342\000\360\274q\347L\275G\024\001\276Xz.=\325\315\032=\221\346\345\275X\206\341=]^O\274\321R\240=\303\367\237<x\'\274\275\274F\330=\227\3511=\253dG\275\233\3714\275\032\2648=\212\243\007\274Zb\332;V\312p\273\246\372\347\273:\213\231=qre\274\355|\303\275\212zD\275\275\006\346\275:\257\247\275hUW=\206\255\374\274oZp\275\311\276\237\275\322|\342=\313]\354=\026\336\250\274\325^\347<\360\267\346=%\255\362<\330\270\375\275\302\265p\275\'w\206<\363\233\200=4w\203<~\006\317=7\010\325=o*!<\236<\242=\267\340\321\274\3508~=\014\321r\275\205\225\227<\212n\254\274Y\2278\275\310\376\341=\006E\327\275\031\254\001\276\036/b<\002y\340\274\325U\255=\207yq\273\300U\372\275l\030\244:\230\037\374\275K\232Q\275\2759\300=}wN\275Sg\271\275\215\241\326=\346,\345\2754\345\030\273\361L\333=\250O\367\274v\240\031\275\327\027c\275\256\310\002\276\254\027\211=\364\301\226\275?Al\273U\2212=\277\031\213=J\364\000\276]\271\203=\336\013\316=}a\337\275n!s<Q<f\275\037\374\343\275a\276\263\275\343[F\274x\002\265\274\370\\\310\275I\374\002\276 1\353=\216\020*;\034\270t\275\\\325{<N\275\321\275\336G\270=$\247\216\275Y\252\340\275M\215\364\275(\336\276\274^\307\360=\232;\206\275\214\331\335\273\307\003?\275C\324\346\275\341d\264\274\225\236t\274\312\253K\275\2415%\2753\243\003>3b#\273\007\246\016=\306\373\217<s\344\214\274\002\275\324=]H\240=\253\303\233\274\240\\\354\273\005\374\230<N&\307=\211\372]\275\010\260\362\275\032\315\237\275\356nj\274\000\314\316<,_\200\275\216\356\r\275\347,\370=\214\300\337\274\032\257\021=0\007\271;{\311\223\2756\000\366\275D#w=`F\301=yS\215=\021\220\242\275\346\262\274<\005\301\270\275\245\376\346\274-5\346\275\374\026\307=\313m,\275e\332\265=b\332_<L}\315\274\350W\306\275a@\245;Nc\'\275\372\350\034\275Z\235\222=\264\354\352\275\314Q\336;\250\364\244\275\371z\344<\263\251\320\275\232\201\244=+\017\321=\212e\004\276\237<\223=\026\n\301\275i\237\272\275pe\277\275O\017w\275\3608\361=h%\334\275\036\357\216<qB\230=i\257\002>\233\237\260\275\030~\255\275v\215e<O~i=\242\355\214\275\3268P\275=\241\302\275NR\236=\2304\201\275\305\361\202=\234\210\251<\207\366\264<\017A1=j\022\353=i\233\344=\353\362\"=\013\234\007<\020\024\370<\333\246\334=\234Z\274=\371\"\253\275%\203\r\275t\030\007\275+\351\274\275&L\000\276\345Z\225=V%\255=)Y\354=\262\312\345\275eG/\275u\021\277=1Y\242\275\316k\217\275\024%\230;\000+\373\275\005\345\376=sP\305\275\357\367~\275\376EV\275O\021\250<u\305\001\275c\331\277=I\0312\2752\022\230=Y\264\342<\367\034x\275\255\035\353\273/:\227\275\300sO\275\201@\304=\273\307\257\275-@H=\342W\222=;\250\264\275\337\216$=\332K\242=\372n\375\274A 7\275k\267\014\275-]\026\275\021\036^<\261u\340=<\331\'=\025\340\365=\244\301`\275V<0\274\032z\340\274\036\247\270\275\317\315\363\275\301\t\002\276F\024\255\275\025Qn=\341\177\302\275-\364\245\275\035\220\350\275\206\216\245;L\247\";\031$\001\276\332(Q<\0248%=\252\026\315\275\203\270\312\275\2677\340=JW\300=0\351H=sY\262=\001j:=\036\223\220\275(#w\275\350b\207=\310(f=W8\242\275e!\356=\3602\307=\347Tf=\334\215\363\275\222XY=\007U0\275Qol\275PR\254=\010)\004=O\022\306\275\212\265r=L\021\320=\007\246\267\275\265d\003\276K#\345\275\271\271\240=\345\275\244\275\307\210\302<x\351\017=]9?=-\3325=\211`\335\275\231$K=\301\322\035\274\r\'6=(T\325<\3039\300=\023\361\310<\232\036\237=\274\2063\274\364\363\243=\300l\375\275\314\"1\274qp\311=\303b\327=\n\357\245=\310\037\222\275\246a\233=p\004\004>\220lI\275\263\013K\275\016\343\213\275\354c\247={N\332=\303\020\325\275\226\260\267\273\312\370\246<\205L\273=\213\300\253=<\0246\275\213#}=l\000\320=@@\004\276\222e,\275\260\367\322=c\2403<\3526\273\275N\334\002\275\236\236_\275g\276\262\275\212c\355\275\024\020~\275^\004\022\274\237\351q\275\2027\227=\347\306,=\217O\207=O\332\361\275\231\375\356\275O\265\312\275C\246\251\274\246\245\177\275i\261\224\275\245\213\214\275\346\257\033\274\252U\211=\344\336*=_\270O=*\332 =\367Ht=\256p\346\2750\274a=V\024\304\275a\021\000>s[\274\275\214\367\223:\366Jv<\310uu=\034o2=\325\000r<\277i\272\274\243\224\363=\323\364w\275A\216\255=\024&*\275~\312\223=\003?N\275k\010\336\275\356\352J\275\211\002\370;\233\341\256=\334\307F\274T\234\230\274\233\201\001=\0140\206=c\356\260=\355\247\331=^\327\312\274w\257\241=\355\324m=\227P\203\275\251*R\275\371@\275\275R\274\374=\352\201c\275\352\334\226<\264\027g=A\1779\275u\244\037\275\322u\367=aM\207\275\211c\210\275\317\301|\275\371\314\335=v\016\247\274>\257\300<\r@B<\341\024b=\360&\314=)J\236\275fO\221;4s\217=\256\350\242=\002ES=W\3460<\3104\006=\356hV;5w\340\275|\004B=5n\000>XJ\376\275L;4\274\217%\254=$1\215=\0347W\273\177\r\337=oZ\314\275)m\320=\'\\\002\276ZS\233\274\'\326\355\275a\324\004\276\377b\367=`f\236\274\225\232\333=\333\247f=\342\006\375\275*\267\312=\364\210\374\275;\357\036\273\251\014\272\275M\250\276\275au\264\274\261\255X\274\006k\246\274y\221\243\273\235\243\263=\252\0326<\307s\000\276&*\237=\377\262\241=\261r\367\275\305\223\365\275\3245;\275\275[\314<\347r\320=\351\246\374\275A/\354\2759\365\346=\371w\206\275\006Zy\273\013&\215\275\016-\232=\305\242v=\024\233\000\276\365\242h\275\342!\007<\244\217\014<5\377\331=\311\245\371\275\032\230\204=\032\216\211<\357\222\311<V\273|\271]\375\301<\2540I\273x(\032\275s\216\362\2744h\232=\267\262\321\274\327%\205\275\264\026\203<\376\017\265=\202\035\214=\277\r\235\275T\177\';\030\017\302=\366\\\243\275\026^J\275\017\016\320;p\272\315<\226\365\032=\270\304g\274s\252\373<\221\235\235=\022\346\244=\327\315\251=\272\325\231=)S\227=\206\030\227=\223\031\303<\000@\222=\213|<\275!P\004>\033\362\334=\221J\336=\305\2543<!\"\376\275^~\227\275\006(g\274\2546\374\275H\201\357\274\200\017\353\275\230a\254\275\007\215~\274R\263\204=.\316\312\274\202YC=\257-K=V\304\301<\260\272\322=\227r\226\275\213@\344=\r\207y=\222\313\264\275\0260\217\274\275\342\245=\325\007S\275\2147\371=\360\202\335\274\367\361]=\350:{;\334\030\214<|h\001=\317\303m<v\022\352\275$l\241\275\267\360N=V\"\310\275\370\200\222=\026!^;\006=\270\275\r\321G=\202\210\323\275\036U\336\275I\255\207\275\274\332\341\272\322A\343\275\305\312F\275\253v2=\322\332\273=>\226\246\275\273\224\340=\355\220\352\274\322\273\316=\272N\221\274\325\317\227\273\375\216\357=\371\306k=;\334\273\274\365\226\357=\033\303\247\274\020\030c=\222\005\361=\200\213\256=Ns\345\275\304\364\001>W!\227\275\224\264\306\275@\256\221=\231\325\\=x\215,=\354lK\274\014\345\000>p;\"\275\333\211K\275\357\014\t<\261Uh=N\020z\273\301RQ\274\352\300\364\275b\234I\275\025Xi==\251\020\275y\257\225=\342\002\277=\216jT\274\243\326\016\275\211}\004\276\232\303\327=\005\305\220\275\344\355\313\274\014\035\276\274\304\251\266\275\375\210\236<\320\377\330=\335\013\001=\300\202\221=\220D\271=C\036\256\275\235\213\266\275\354*\303\275%=\021\275\364\277\032\273\232mZ\275ol\257\275\023\225\360=Q%\315\275\244\240\271;\264\013\345\275\222\027h;u\367\275=M\245\211=\202a\001>|V\230\275\327L\333\274y\254\332\275\317?\370\275Ul\202\2753i\326\274\271\037,=\030JF=\277Yd=cu\274=ne\377\275\331\350\177\275\201\246\246=\307\017\353=qN\003<y\365d\2755\262\300\274\207\323\021=54\021\274\347\324\237\275\207E\320=\020\314\035\275\217\243\207=\3018\037\275\317z,\275\225\245\266=o\366\271;t\311\336=\277\242\215=Y\0252\275\"+z=\237B\366\275/\014\206<%\271a<\363\t\n\274\021_\221\274\006\240\342\275\220&u=\370\316\360\273:\355F=\271\320`=\273\310\247\274mf(\275\303N\273<\245U\017=\343\275\302=Q\213w\273\212\225\262=\376Z\220\273R\250s=W\324\036=\357\316\220=\223\224\341=\237\356\002<\010@\002>\227\345\313=7\254A==-\367\275\237|\352=\355@}\274\262\371\301\275\177\241\'=&H\245\275\257\362\321\275\024n\224<\203T\366\275\256\317\353\275\332K\004>d-\201<\274\252\251\275c\341\345<\212\257\245=\301\010\337\275\307\215\311\273\212L\235\275.\352\007={F\323=\255qm=\t\213\316<k3\010=\244@1\275\373\203\334\274\334\214\226=PW\217\274\377\207\031=\255k\325\275+\304\273=\002\256\014\275\266\213\205<\021\200c\275m\215\262\275\314{\001\276\'5\212\275x)\345=\210\316k<\365\013\353\275\303\302\216\275\255l\001>\222\351\314=\305\214s=\321a\035=\300\217\264\275(j\2539@\231\203\275\366\245\367=\201~\000\276/x9\2750\371\251\274k\206\330\275P\016\200\275\373\000\256=\303\242\300=\277 t\275*\336\212\2757\267\244\275\270\242\370=\271i\007\275\330\275\214=\312\342\304=?Pm=8-\250=\213v\014\275R_\264=\255?\221\273/&[\275y\361\315\275\3303\232=z\303\254=\202\365\261\275g%\240\274>8%\275\362\206\003:,\275\324\2744s\317\275D\026\215<\254\242\272\275%C\233\274m\250\345=\236\275S\275\022\032\376=\342\031\023\275\324#\340=\232\275u<\255[\376=\343\372p=\247\177\214=\225y\374\274\305M\205\275\353Z\216\275\317\361v=\013H=<(H\366<\024i\307\275j\007\342\275`\226\261\275\361\243\355\274\371xF\275\355\227\225=A\356\317\275\341\342\374\275\235\0173=\233\r\251=\323\333\304={\200\232=\347\030\030\275\231\014\226\274\376vm<\004\244\023\275\035\215C=T[!\275yI\003\276\243\316\001\276\272w\301\275Bz\271\275h^\001\276\356\321\364=\335\253\332=\214\346\002\276W\276\321\275\316\244\220\275\223\326\343<\033\315\356=\300=\363</4\370\275\227\316\277\273\337t?=W\2529=\006\t\272\275?\t<<\020\200\326=\324O\277\275}E\277\275\346m\320=T\362\275\275\214\237i\275\224\236\203<)\256$=\000\300\365\275\341\345q\275k\026\222=\362\241\353\2750Y\311<\277\'\277\275\214\177\312<{\265\224=\233\216\251;\2759\205<\241\265\253=\217\330\n\270S^4=\271\314\326<\354\213\023=|\220{<\203\327\373\275UW\270<\215\355\216\275\234,\013\2757c\202\275\032U\362<\312\332\245\275\261\202\377=\025\241\"\275\377\363\342=i\363\265<\t\031T=|\251\352<(\312z\275\357\020\035\2759\236\025=$\350\320\274\335\266\340\275\335\3163\2757\245\307\275\345\217\322\275a\347\345\275\221v\215\275\267g\253\275\001\031\361<V\350\207<\376ko\275 \330\272=V\345\027\275*\345L=\202\237\227=\324a|=\211+}\274\262\301\007;D.e\275\200\006_=\007\361\002>r\375\327=N\377\007\275a\262\315=\017\236\002>\341\311\024\275\345k\"\274\244\230\336=_\"b\275\031%)\274\3709\304\275\226\224\026=\017\215#=r4\262<[\212\302\275-\206\264\273>?\004=\370\261\n\272\234\256E=J4\031\275\306\273\346\275\201s;\275\311\227\302=\264\033s\274J{/=GH\344\274R;\016\275~v\211=8RM<\"-\235=\371\343b<\360\223\025=,=\334\275o\321\203=\224Ia=\201u\365=5\355\\\275.W\002\275\361\366\255=u\036\003>m!\351=\341\013\330<\240\373\276\275\211\003\227\275\207i\000\276\3267\'\275\240-\316\274)\240\310\275\343q\347=Gz\202=\r\207\241=s\233\227=O\265\371=\361\204\014<0\242\303=k!\334\274* \254=\331\354\365=AU\304\275\216\031\347=\r\330`=1\t\t\275\307\372t\275\262\324\211=\243\004X=\223\203\375=\240~\014\274u\013\217\275\237\367\373\275Y\344\343\2759\367\003>\320Y{=#:\214=\271z\275=\004\357t\275\342\373$=\265\217\241;\223z\034<\246\313\266=\n\202\213\274(\355s\275X\221-=z6\304\275\035?\375\275\302M(=\301\216\357\273\323\3474=i\256\036=\215\rY=\r\356\334=R\"\031=/\017\005\276\225\200\213=\217T\216\275\350\347\231\274,\254\315\273\007d\252=\302\303\357\274\r\352\027<0,u=\233\247\276\275\230\033\003\276\325\265\271\274m|o=}\020\254\275M\263F\273\243A\303\275\313+\227=\353*(\275\235\232\206\275?N\273=A77<\357\033\241\275\017\334\255=\230\242E=\\\332\376\275\362\000(=6\020\370=\3310\234\274w\262\004>\007\036\223=*W\352\275R\245_\275W\227\243=\275\256\360<F@\332=\033\236\331\2752\177\021\275(\257\217=\036\372\246\275\341\333\334\275r\\\210=\003\007\206=\204\362X<\325\362z\275\310<3=\333\002\262=1\001&= \260\007\274T;\263\275h\200\363\275\273:\305\275\325\274\327={F\310=D\367\310<PP\275\2753\240\362=\002@O=H\276\317\274[l\335<\007\327\376=\n\206\320=\367\376\205=\313\244\211\275\360\311X\274%\003W:\325\272\256=^\363\206\275\314\221\364\275#\023b\275/\267\252\275\263w\273\275\254\177\205\275\313\003\227\274\247\177\305\275\342\224s\274s\020\324=\177\307\210\275_\247v\275h\345\247=7\304\032\275\000t\336\275;\240\216\275K\367\033\275;\213\330\274\n\267~;\022ar=^%\004\274\3619\220\275\0339\352<\010\315\333\275\333\017D<\037\313\375\275\014\232\274\275&\363\351\275\020\\\035=\266\237\300\274)\300A\274\024\251\216<\362\r\326\274\355[\362=L\030r=p\323\375=\214\027*\274\305\360x<\301(\177\275\2036\346\275\020J\034=\220m\003\276:G\000\275\341\244T=#{,=\noc\275\214f\203\275\226-\321\275\000\024\375=j\205\251\2751\013\266\275\000\325\307=y:\270=\206\344\312\275\373\211\355=\236[\003\2769\225p\275=\211\263\275>{\331\275\\\301\360\275\310x\312\275\'\217\243\275\325`^\275\230\226\354=\20326<\000h\350<T!\270\275\032\315\251\275M\227S\275\024\324\354=zG\322\275\242W\252=l\363\357;\332T\020\275G\254\246\274q\251\212\275\204\324\337=\250\373\360\275\025pS<\000\323\375<\335\032t=\372\362N\275\030|\254=\323Br\274\rf\331=\300\010\265\275\200A\002\275\277lr\275m\r\233=\033\'\224\273YB\227\275\362\222\253=\355\306#;}\004\236=\300\334\216<\335\333\002=\247A\312\274\001\360\351\275=\375\323=\006x\321=4\253\367=\264\017\'=A{\251\274\260.\354=\177\t\025\274\344\302\316<Hf!=\264q7\274\266\356r\275d\n\003>;h^=\340\262\236\275;\177\201\275G\341\257\2743\343\270\275\231~\264\275\236p\354\275\216\226\330=\357\317\312=Y\213\255<3\203\320\273\362\260\001>\200\277\026\275\213\002\323=[\245\312\275\317\000\344\272\353\345&\275d<\020=Xl\262=\215\266\215=\365x\244=-\327\237=\000\340\370\275B\027\003\276\333\232\207\2749\244U\275\256N\327=3=\364=\340\237\375\275\007\220%\275.\264\302=\003K\226\275\030Tu\275 \325\257<\005.\313\275\321\"\356=\245\026\322\275{d\035=\016\331\363<_b\267\275\013\305L=\023#\254=\337\034\245\275\'\213z\275\023\037\202\275P^A=8$-<,\260\323\273\235n\311=/\271\260=k\240u=\274\212\000\276\215\231\366\275\254\024\244\275n\345\373=\302\331\264=S\356\206=c\315t89\265\204\275KC\345\275\237{\312<\332\026n\272Nn\305=q\321\374<8\177I<\006\210\326=\370\246f\275dk\360\275\203\033\213\274.i\361\274\337\261\261=\177\177\335\274\231E\241==;\340=)\017\021=\350\305G=\220/\207=%ay=\275.\001\276\226\333\235\275\361\226\374\271D\016\316\275Os\220\274\200\312\277\274\331[\3229s\202h\275\235\244\264\275\333*\236\275\213\270\274\275\036\245\213<#\026`=\374\342\232\275_\202\221=\220\336\372=Mk\311\275x\256\006<\307\303\213\274\336\247\022=\035\222\306\275\243\324@\272\236{\022<\264\n:\275Kn\373\275\030\001\244\275\304*F=P\326\272;\3674\216\275\026m\376=4\001\370\275\323;\264\274\207\355\243=\316\347;=\200Y\377=E\306\342\274In\206\274\017\177\000>j\274\356\275\332p!\275\344\306\364;[S\002\276h\366v\275\225(\375\275\235\210\344\275\242\317\275=&\331\303=\330\373\222\273\375\240\271\275\020F\232\275\354N\342=\260 \215\275\017w\225\273\361bU\275\336&!=n\035E\273\250\221\010\2731B\251=m\304\260\275n\227\014=\226\020\301<\245\232\264=ZU\255=[\020\004\276\262\201\204=/\013\206=a;\273<\257\303\236\275\033F\330=\331\261\273\275\257\006\274=\375\360\254\274<Z\354\275\375SD\274\'\337q\275\314\014\267=\204k\242=\021\303\363\274\005\205\317=\244}\337<C\217\270\275\036\274\326=\323\326\271<\362T\234=.\224\366\274i\221\276=\327c\007=\353l\272\275\200b!\275\3171f\275\263|*;e\210 =\204\207n\275\254\000\233=\t6\317\275\n0\267\275)\273\261\275*\375\300\275\234\177\264\275\024\373\277=U\301\272=\"\355\340=R\341\241\275\252|\233\275D\034\330<BO\271\275\025\255\360=\205\013\007=|\232\241\274\343`\210=\303\021\253\275\247\2606=f\242\003>\005\320\272<\\`)\275\322\325\257=m\327\273\275\021\251\000\276\211\361\277\275/\013\235\275\332Y\335\275\365\005\371=\017\304\007=\373H\"<:\273\020=\027y\276<\007\226\032\275\223]\346\275Kez=\344\r\252;\014@\240\274_\261\230\275\002\'\333\275\210\245\236=\241\256\222\275\214\237\324\275k\342\200=\233\004\n\2752<W\273r\205\213\275\375\363\277\2752\020\277<E1\300=;\332\242\275\267\236\343\275[\326\004\276/\221\013<\367n\016=\263\234\262\275g\355\177\275\003.f=5\014\026<4\307\013\275\ts\347=\312\201\315=\017\244l\274\203\013\327\275\335\374\353\275,\301\226\275.}\247\275\006-\373\274\037zo\275\342\345\004\276+\366\321<\343H\251=\257!\203=\2501\300\275\353i9\273\257\323\370=\207>q=iP\234=m\252\370\275\000\301\246=\356\354\231\274\331\344\346\275\326\366\361=\340\\\376\275\205\264\345\274:\251\377\275\350i\322\275\237\221\021\275\202\327\034<\250\370\364\275\'\304j=8\244\375\274)\035b\275P\315\372<\320\340\244=\377@k=\340\222\004\275A\324\006\275\273\001\273<\354\3619=}\2779\275_a\235=\202\333\356\275y\'\203\275L\276\313<\217\236X=R\336\207<\274l\302=8\366\311=\250|\005\272\200\225;=V\216\211=\374\210\215=\267\017\334<=\360\033=\333\340\213=\nw(<5\020\334\275\332\2106\275\034%L=\216\001\233\275\243<\003>\373\275\001>\212\r}=\205\265\r=&YT\275\035[O\275s\347n\275\235\266M\274v\214+\275),g\275\301\035\252\275\360\356\343=\270SV=\267X\023\275\376m\320=\025w\256<g\267\303=y7@=\031\375\206\275\204\202\315\2749\237j\274x\347[=\316\351\246=\352\325\235\275Fh\022=\203=\354<N8\223<\325\347\365\275\333\016\370=\256LX=\3040\302<\271\221\245\275m\333U=\302\3577=\2318\325\273\363\302\337\275S\205\345\275\265\364c\275\307\311\236=\205Z\240=\246^\265\2750\242k=x@\223=\347\342\201=*\2445=\017\263d\275\206\002\256\273Y\310\323\274~o\224\274c\330\252=\312\230\240=n\333\214\275e3o=\314\373G=gk\346=h\245{\275\247\220\013\275\031\352\004\276\263\233\274=\017\351\356\274\270\321e\274\005\344\347=<w\266\275<\206\344\275\235\n.=\331\010\215\275\334U\312\274\223\341\273\275\354Yd\274TG\237\2756\271\246=\362\254\322\274K\221\237\275\275^\312=2d\220\275\260\254G\275\031\016\221=\322\335\374=\250T\332=F[\223=\303\356\333\275`\037\363\275\234\201~\275\205\235\204\275\371;\035=\207\364\222\274\020m\265=\216\322\301\274}\275\330=\234\220\t\2739X\322=\357x\004>NQ\365=\364O\270=\232\n\005><\267\270:=(\001>\273`#<\315\277\000\276&\343\310\275XD4\274/F\314\275\3416e=\034\007 =\004!\227\274}Q\317=\370\023\266<\271\373\001>!v\203=CC\232\275\372\214\317\275>+\335\274ua\371=Q\030\326\2754<\302=\337\021\013=G7\213\275\003|\031\274\203]p\274xA\022=\023\214\314\275\2057\346\275v\334\305\275ya6\274lU\307\275Cm\010\275\201J\313\275\202\3004\275Vq\277\275\226W\250\275L\261\217\275J\234\306=\207\034\307=\211\305C=\034\022\301\275\207>\301\275\206\241l=n\202\323=|\'\373=\272\014R=(\205\245\275\351=\356=\274 \375\274\027\354\002\276\374\365\211=\\i\352\274\271Fb\275-\202\003\275\231\370\025=q\3631=M\"k\274\351\333\024\275\213\355J\275q\035\311\275\323\316\213\274\024\237\243\272\255\247\271=\023\360\341\275:\371\331\275C\311\324\275Z\307j=\034\255\373=\260d\303\275I\332\352\275\240T\001\276\032\353\033;A}\246\275\314Jy\275\351\256\235=\362\367\200\274\362\022+=e\003\336=\026\031q\274\322w\241=\254\254\261=5C\004>\010\235\364\273\'\250h<\037t5=\200\310\266\274-(\003=\315A\310\275\003\257\352=\331\240U<qG\231<3\027\330\275\244\355\203\2739\343\335\274\257n\345=5\006#\275:\363\026=\222\361\332=\274\215\361=7\006\000>j\262\003\275E\234\005\273:\337h\275\245\214\031\274\265qh\275Z#\033\275uiD<\202\375\363\274:\023x\274\031g\035=\002p\365\275@\353\305=\213\243\220<\370\032\211\275*\310\211=\234\314\366=\374\332\213\275{\261\300\274\270bX=\351\275\274\275\345\313U=\201`\307;\236d\n\275n\225\221\275I\221\350\275\371\363\233\275\315\236\222\275\261\202G=\007l\243\275\303\032\237<\303\030G=\335\270\275=\234\310\346\275\242y\215\274V\027\315\275\\D\225<\263\310\306\275\375[m=\000\001\333\275\013M\244<\000\014r;\337\232\252=\207\013<\27547\005\275\345\312\363<g&\240=r\334\223=h0\374=\234\276\264=H\304\321<i\304\224\275\267\315\357=|\333\211\275z\264\306=q\025\343=\014s\363\275T\320Q<,\254\377<\306\206\260=I]\350\275Z5\002\276\262\341`<Z#\334\275\316\032\332=\"\253\222\275\231\257\221\275p\036\332\272\271\252\324=-F\327<j\017\007=k\332\246=\233\225 =\201 ]\275\004\346\310=:\271\364<m\321\343=T\257\357=\005{|\273YFw=,\241\003\275\262\'\353\275sX\'=V,0<\204\374\342=D\317\316\274\233=\355\275J\347\267=\303\017\010\274\244v\234\273I0\262\275\373\210\265=\271\224i<\207F\371<>4\017\275\016?\353=\030R\275\275%\230\255=\005aS\275\215\026;=\302\373\274\275pF\003>\234b\315\274A\206\343\275K\263\321\275\366\304\345\275S\223Q\275\216`\334\275@\242\001\276$\305X\273\307\314+;w\254\360=\001s&<\253B\325\275\240\324\303=3\346\302=\377j\256\275\304\3659\275~=\253=kM\246\275UWh=#\231\272=\235\342A\273\312\220\321<\026\334\204=9v\001=\250bo=\034=\201:\355\223\225\275\202p\346:\314\267\242=\366\342\364\275\035\215\324=\027\240\003>\n\366\325=u\321\004>\010\351n=FgJ\275Yb\246:\353\036J=9\227\260=s\341\237\274\272\342o=\037,\255=\217\244|\275\302\325\275\275\332Aj\275\264}\316=\342\035,=q\360\266\275\336\323s\275\217\271\210=1\355\347\275\337\342^=?\310\001>\037h\240\275\335-\261=\264Fv=[\360\363=\200\212\360=Q\355\204=X\301\375\275\224\221\037\274\276\224\366=\330n\373<\206\r\222\275\336\027\360\275P\361\317\275,\213z=A\374\335=Q\275\032=A\036\333\275D\276\355\274\306p\255\275\t\256\200\275\323O9=\230\006_;S\227\377<*4\205\275V\366\006=W/\256\275h~\014<\222cJ\275!\345\272=\"\235I=\371\277\334=\357\364\372<\341\307\227\275\345\317\211\274&g\304\275\0001\244\274YN\345\274x\270\311:\263\374\"\275F\226\364\275\271\331\332\275?w\301\275\267N\023\275U\372\324=\272S\000\275p\250\373;\342\356\034=\320i\021=z\002(;\026\342\376\273\324~\262\275\261\000\301=\320\314\372\275|\307\315\274T`\266=4Kn=\307@\362\275t\014\203=\254=\234\275\242\325\007<\026\256\230=C\3129=n\2153=1\000\261\273\375\0100=\210\002\256\275\242\214\021<\0330N\274Bc\307\2754<\003> ,l\274o\266\";2,\006=\236\251\204\274]%y=\214\257\032<7\177\353\2751\016\002>\3068\'\275\353\230\310\274\036\360\033;P\331\300\275T\230\272\275\373\013\376\275C\253\367\274u#\342\275\224l\261<\234\3513=(9\335\275\264\227\237=\306\3106\273\352\005\352:\225,\240=\000\361H\273\251\241\302\275\202J\313\275\030,\220\275\035\345L=\333\221\024\274l\361\024\273\342\245[=\340\277<\275\001\344g=\002\333\317\275\002\341\025=\320\311\263\275\317\365u\275\320\206\322\275\240S\204\275\241\262\013\275U\350f\275\301q\232\274{\253\232=\325\337\335\275\326\310\371=\355\317N\275\037\225\324=\3512\322=\200\357\354\275\237\361j\275\250\220u=,\001\270\275|\326\200=x\363-<\237\225\230\275\235r\352\275\272\365\276=k\326\362\275pt\217=\"f\305\274\312\\^=\240\227\246\275\247\031\004\275\203\035\332=\315\246[\275W\304\331;Y[\320=\350\225\004\276\t\000\300\274\200\324\231<k}\303<\035;>;\377\330\320\2735\375E\274lB\205=\202[\225\274\"Y\342::\377\376=L\022\354<Tq\367=\014\342\026=u\305\021\275\303\223\316\275\311\013\004>\212I\000=\201\n\207\273\311\342x\273\347\273\373\275,\346\277=\345`8=I@\361=\252v/\275\201\320E\2757\351=\275\220\277\303\274\277\361\201\275\207\246\257\275.\203\305=\010V\276\274\222\314\257=,\027\005\276wO\034\275\350y\307\275\261y\265\275>6\241\275\021\225\037=\334\265\306=\210\223\003\276$\270\362=>\304\362\275)\205f=20\371=d\212\316=\326\021\213\272\256\276:=`R\226\275\217N\303\274\207=\336=\343d\364=f@\330\275 \343\004\276R\216\234< \360\334=\333\023\004\276)\230\320;\373w\031=.\241\211\275\237\215\303=\206SU;\267\200#\275@\201\361\275i\354,=\003\204\026\275\266V\304\274b}\347=\022\363\005=\004S\315\275\200\037\324<\212&\221\275\026W\227=;\2606\275Hm\000\276\377\026\333\275\264\345\304\275\336\323\236=%\235\345=o;\253\274\307\367\373<PW\221\274d\nH=\034@\303<,M\023<\034\007$\275\002\327\202\275<\312\201<\201r\266\275\225\351E\275\017\243\315=\341\236\236=\2005\322<\rn\304=V\276\357\275\222\2269<oD\026\273\344\241\025\275\254u8=\303[\355\275\262rN=(l\247=NK\233\275*B\227\275\305\210\376<\377\n!=\205\333\301=]X\340\273\305\211\214=s~\270=SO\033=\242v\362\275\255\272\320=\001\221\313\275\032\037)=\225\r\354=\377\227(=\224x\365\275\313}\314=vd/\275\353\245\351\275\360_\252;\251%\013=_\254(=\270\327\336\275\267\313\351\275\330\001\331=w\344\215\275\245C\365=\223*\231=\230q\214\275\022\371%\275\216\213$\275\342D\235=v\241\211=\260\360\242\275\250\r\262\274\002\315\344=\203\'\246\275\231\244\325\274\275U\221\275\232\242\300\275=\321\264=z\031\225=\223K\177=U\317\305\275\237\020\230;i*\237\275a\363\235\275\\\330\353\274\263>\356=\337\315W=\217\310O\274E\277\260\275\201\036\231\275\366\257\203=\177\201P\275\341\336H=8\271y\2756\321\001\276\"\253\003><\307\243\275\'\026\024\275\361,\263=\356\021\323=\t\254C=\375\264\274\274e\205d\274[&\263=\364%\243\2751\227\004>\000\n\005>_lp\273EJ\252\275\345\303\237\275\233\007*<\242\220\255\275\321*\307=\247\210\205=~\016\350<\230\251\024=\271{\300\275\252\343\346=\206\334\305=\370Z\220\274\333\270\035\275t\212\266\274\274\332\362\274\224Z1\274\314\226\217\275\r\032\r;\n\360>=[\365\253<\260\306\226\275j^\000\275\220X\301=y\340\'=#\361\000\276bT\252<\3643\201\275\271\'\304\275|\304\243=.\200\222<0k\370=\343\347\336\273\232\226\256\275)a\367=\342&\n=|R\t=m>\245\273\301\206\326\275\005\036\357\275\236M\032\274\373\307\316\274\357\266\037\273\361||\2754B\235=\363\240\344=\002C\342=S\223\273\275\263\246\325\275Cc\337=q\315\350<8\231\224=\335D\207<\361\035\025\275\363\036\004\276~\342\265=\333\310\202\275\305\264\254=&\304\317=)@\202\274T\234\367<J\325==2\002\\\273\334\355\261\273WN\223\274\367|\343\275S\336\233=\214\212\312\275\n\271\230=7\002\220\275 \353\265\275\006\251l=\362\014\254\272\226m\245=E\241\252<A\023\231\275\363\224\213\275\001\335\237\274\256\212\366=\234\330\307\275X\307\273\275\275\352\266\275y\0074=\306!\027=\354\337\001>2\256\337\275h\254\035\275bq\254=\200\222\371\275\320\200W\275M\362\263\275\371\324\213=\206\261\207\275/\035K=BP\004\276\201\206W\275\211\216d=\210\023\253\275\364\342\350=N(\345<\355\262\316=\225E<=\374\010\216\275\002\222\320=#d\370=a@{=\275\201\350<.~X\275\001\035\210\275\300b\351=\007\037\205=.%\346=\332\013n=m\000\025\275*\207\312\275\342S\231=\312\031\261\275\2228\325=m\236\254\275\353\'\272\275\"\277_\273\304\344r\273\341\234\205=8\313\205\275\337p\003\276\213\0269\275\371)\376\271U\352\367\275Do\"\275\264v\233\275_m\354\275\341g{\275\211\217Q\275\237\203\240\275C\316h=\264\263%\2742\344\341\275\212]\"=\374\024L\275\204\210m=\371s\203=\267\200\264\275\034\265\271\275\360\350\271=j\200s\275\320\273\316\275\020Q=\275\333\255(\274\311\353L\275\327\000z=m\212\321=\361\222\331=/j\364=\315\201\251=\243m\211\273\016\304\200\273\0104\233\274Bg\300\275f\035@=\247\341\314=\020W\252=\340:\313=\244\373\341=\327\313\036\275\326\340\212\275t\276\272<?:\201=\340\350\205=\025\366\204\274\266\335l<Fn <=+,\275\300\360k\275\377f\016=\024\323\364<I\226E\275\033\232\266=\004\377\260<\375\217\240\275\373\213\372\273\320N\356<\235\261\376=G$a\275i\262\264\274\037\245\004\276a\374\373\273I\356\352=\310\300\000>\'b\270=\206\353\204<\225T\241=\021\347\321\274\320*\314=>6\\=\225\247\316\275\"7\302<\202\350_\275\250<\200\275\212\243\263\273\302s\375=?\373\314\275\373\344\033={\266\000\276\246\334\330=\234D\025=\302\341*\275d\256\265=\325\325\304=Mo\361\274\336\032\002\276\366s\344\274\004\233o=\317\206`=\325\200;:\335\273\352=\274~$=\344\251\220\274\331\327\364\275\201\\j=\330i\277\275Q\0213\275\207\300(=&\256\241=/e\246\273\255\251\373<\272{\347\275\216\251\347\275a\331\222<\367\212\240=U6\006=\221\266A=\223t\201=\326zi=p,\321\275\273\006I=\376\236\342\274|\t\257\275\225 V=\243\352\206\275\310r\212\275\014\321\352<\371\345\334\275\335zx=\235\036\036=\\\325.\274FZ\262\275@o\227=\365f^\275\274:V\275\241\343\344\275C\303\216=\005X\\;W_*\273\303F\033=#\223\324=\306\263\202\275\2057\264\275\r\262\340\275f\221\213=7&\270\272\214?/\275\372J==\310\\\355\275\212\225\333\275\275\353\356\275\324L\320=\350\033\337=N\330\007<\275\243\001\276j\205\337=\236\026\242\275\272\010\325=V\004\240\275\273)\004<:\016\275\275\014\345\217\275;K\243=s\023^\274\307Z\241=\346\370\016\275\325\275i==\204\216\274\306\273\346=\354\003\245\274\231\322u=\236\350\325=\372M\342=\246\216\356\275e\216\005=\375Vk=\014\205$<\337s\n\275\247q\277\275u}\242\275\274\356\214=0\016\366=\326{\332;f\246\360=\016\344\225\273\325\317\311\275\246\005\207=\275\253\216=A\277\246\275\217\324\344=\346\315u=\353\205\356=\005n5\2755\005\367<%{H\274J\325\233=\217\360\033\275N}\t\275[\235\211=\007:\277\275\327\202\212\275\214\021\343\275f\033\230=\366\022\344\275\350/\203\2757\3468\275$F\252=-N\316<\221X\355=\\\320\253\275\024\202\216=-\357a\275\323v\310=\341H\235=\311\014\300\275\342\016d=_\007\005\2751n\021=c\235\307\275c\370\354=i\265\003=\346B\225=%\\\000\276\224}\360<\2660\247\275\356\306\372=\177\350\344\275s\010\373\275}Hn<\325\367X\274\025\327\272\274\335/\310\275.m\215\275\323\037\331\274I\037\245\275\261\031\222<b\332#=a\206\004>UJ\260=\177\t\026\274\032\343\273\275A\205\221\275D\346\352\275\377\241\002\274\245\222\372=N\306\234<\367\027\370=\350\211\345\275R\022Y\275\301&\357\275\351{\342\275\3178A=\272\376\204\274\342S\213=\213\265\364=V\334\317\274\363\302\000>/\007g=\275\373\247<\371\201\305\274$\2769=\347\200\350=\305 \344=\351\210o\275J?\334\275\216\244t\275\3547\274\274\203Q\252<\031;\310\275\211\020\302\275.\363p=Z\316\361=\257\343\'\275\265\352\307\275Q\253\347=\352\356h\275#\022\260<\t\027\371=\376\376_=\215,p=\370\356\003\275\324Z.=\002\331\205<\032=\360\275\314\256;=\\\211\026\275\320\225\354\275\235<\316\275\356\366\364<\305\231\352=\265\260i=\272\330@;\364\367\275\275&~\226\275=v\306\275l\330\323=7\307\301<\025UH\275A\330w\2755\007\317=@\247\304\273\342\025\324=\315W\307\274R\313\334=\346\032\324=\"@\246<r\260\354=\250\376\212=c\312M\2752q\262<\334\206\371=2\260\332\274\220 \306=\214\246+9\007L\304=9\265\352\275\223\331\340=@\366/=\344\266&=\342\032\250=\026k\343=,\333\003<\362\252\377=\255\'\233\274/\205\213\275\n\315\003=Ro2=q\365\366\275\017_ =\213,\327\273\250\002\217\275\001\t\267=\356\035\213\275\351z\263\275\234\307\234\275y6z;\0049\227\275\257\253\213\275\372\3505=;\361\362\274\335\256\000>m\365\336\275i>\354\270\361/\007=\205\177\204=NUX\274\345S\n<Y[\207\274<E\227\275\322\365\276\273\nh,=\t\035\377\275\366\211\336=F\327e\274c\205\366=.\035\246\274s*\264\272\326\336\230\2742\372u\275\0211\215=>\000\346\275\252y\216=\375\215\313=\006\231\313=\016X.\275<\213\013=]\\\027=\377\305\327\273\351\256-<\2549}=y\032\003\276\201\3075\274\343,\014=P_7=\274@\265=\241\315\330=\"\037`<\0045\246\275!S\253\275\221V\334\275OrI<\347=\323=]v\340=AD\367<\262b\203\275\336\373\035<\005\0331=uo4\275\000\353\345=\007\206\222=\325\263\033=\rz\263=\314\356\263=\302\004\334=x\366\000>\032nA=\034\\\373<f\027\221\275\316o\257\275)\235u\275q\221\331=*\346y\275\303\013\367=\245\206\270=\271\267\237<\236\301\304\275\247c\003=a\362\242=WT\336=\232V\306\274+3i=\330\237\252\2754\017\301;G$\207=\371d\210\275\315\372\340<\004s\374\275\206\004\221\274\235\2253=\210\031\204\275\333\r\202;\021+\271=\375\337\003\276V\205\020=\200P\332;)\267\326\274\323T\030\275\313Y\362\275j\r\375=\027,\025=W\027\027=\207\371\303=\266}f\275\353,\205\275\376\364\236=\254$\265\274\321\245\332<\217\177\217\275j\023\212=s\351f=\222\305Z=\317\356\211;\316c\273\275\210\336\211\275\340}\206=\231\037n=LN\020\275\177\275\336\275\327\373d\275\3457\234=\232\224\000=\264(\215=\023\000\376=zU\230\275\223\276\251\275\220v\332<Gh\247\274\317\264\347\275\260\310\332\275\355\366n=\023\202\026\274\361\264\252=\266\323\310\272e\226\343;._\367=9C\320={<H\274\313\242\223\275: 7\275\203:\357\275p\274\004>\035C5=Yxv=\252\036\277=\2767\004\276K\335\223\275\224\206\340\274VZ\315;\310\260w\275\271f\231=\301\000\271<m\233\253\275\261\013T=\301t\227<\010:\025\275/J2=\214\006\344\275\274\347\010\275\t\025\216=\347\345\345\273M\226\362\275\322%T\274\"G\003>\265:\212<,3\\=\301\372\r;\334d\256\275h\331\231\275\273\211\343\274\203\201\335\275\254\205\322\275\026\023\201</\3646=\211\270\367=\330\374\252\274-P\364\275\344v\350\2752!\311=\277\371\025=\326\226\317\275\030=\345\275\240\332\347;oE\206\275\371\307\347\274\'\225\004>\220\336\321;i\032\362\275*\235\261\275s\227\363\274\3110\333\2756\036\260\275\223\350k\275\331\230j=(\243\227=~\004\252=f\331\246=}\031\356\275\232N\340\275\347\231O:Vti<\264\206L\272\034\365\204\274\210\245\310=\343\370\237\275\347\233_\275u\225\334=\030\374\306\275_L\261<5\027\206=\255\313\346=\312>J\275\024\253%=\356\222\373\275B\275\273\275\230;\235<\300 \360\275\354\274\306\274\3636\205\275|\035\213=J\350\262=\271_\243=H\276s\275\361>\357\274\305\3237=\210;\037=\026\220\223=\224\271\355\275F\333\361\275\250\367\253\275\007\216/=\342\013\r\275\357\022m\275E\346\334=\212L\312\274\354\236\333\275\266\331\257\275-H\237\275\224R\206\275\016\355A\275\024N\301=O.\267=\344\260\224\275k\177\310\272\336+\366\275bu\372<\227z\324\275p\017\275=\370\346\232\275\375\374b;Ok\310\275#\231\001\276*\255\031=\221\313\220;\037_\000\276*\313\376\275m\263\212=\022\301e\275{\3308\275g\235D\275\3069/=\306\230\354\273%\211\376=\300Y\247\275M&\351\275T|\353=\236^\217\2744\003\223=}P\201\274\036\362\371\275y\321(=\356\371\235\275\330 \276=\3563\n\275\356[\371=N\034\007=\005R\001\276\367\360a=\004\342o\275\312\000N=\261H\025\274)\216\371\275\206\023\350\275&ue\274\231\2315=_\261\230\275\0272\016\274\336.)\275\321\273\340\275\245\253|\274\371|\032\274\342K6\275;Y\310=\003\237\333=>\313\216=\362\300\002>\255\306]\275syx\275z$!=\347Qo\275\025\000\211\275\344n\352\274%\014\363\275\003\243\225=\241D\006=o\220\352=fMI\275v\237\254\275\036\021\234\275\254)e\275DD\226=\367\330.\274\224\003\313\275\277\350\274=\263\262\345=\271c\004>q\2164=\310=\177=Wk%=\215\202\274\2743M\311\273e\023\326\275/\372\272=\370\217\314\275\230/-=\027r\232=LQ}\275\005\022\313=\350\2223\27557P<Or\341\275\0311\361=\300\237\237=\306\0079<\325I\237=\333{,=j\233\000\276\220m\270\275\351Y\212=x\370\265=\301c5\275Xo\345\275\216\231m\274\234\235\212\275S\241\255\275\310\275Y<&%@<1\244\334\275\265L\341\274\314\225\316=\rv9=zw\304\275\242p\264=\217w\371<#\272\277=Y\307\t<\270\014\343=@\307q=\000*\262=\222\300Q\275\341\032A<\362\214\216=\372N\365=.\361\221=\272\326\221=\240\227\312=\374\006\357\273\037\310\213\275=\273\275;h\341E=l\350\205\275\016\212\265=6\026O=8\353t\274\247\361\272=\351\250\213\275\273\260\320=k\177F\2755r\226\275\322\215\250<!\240\242\275^\301U\275\3060\272==_\201\274\214\305H\271\266\006}==\324\270=\031Z\023=M\273\244\275\300L\341\275q\230\355=\230\021\272\275\260?\246\274\340\263\316<}\276\305\274\373u\347={\333{<\356\216\251\275\271D|\273\206\206\347<\235a\363\275\021|\027\275\351\030\212=<\224\337=v\022\345\275\310_h\275*{\245<e\361\001>\330\254\302\275\355\230\313\275\022\370\321=\017\356\226\275FX=\275\321\3464=Q1{=\002l\215=\300\274\243\275\210h\213\274\257\317\363\275\"\270\232<\240\033c<2V.=\300\276\314\275bs\212\275|\276<\275q\206\252\274\373\020\013\275\323\242u\275\n\332\272\275\363G\372=8\376\000=\353\233\004\276\361\306\023\275\357\2770=n&\301=V\247\272\275\204\025\025\274&\025\327<\304\301.<wy\375<\336\010\355<Vb\002>\003.\334\275|\316\205\274\234C\324==V\224=\242Nk<\314z\324\275\251J\301=\301\000\300\275,}\215\274|\253P\275\353\322\200\275P\256E\274,?\342\275\n\371\037\275\273tN\275Xn\266\275\233\220\320=\341\t\224=cQ\356\275\206\231b=H4\251\275\014Y\234\270\324i/\275BY\261=\362yr\275XI\002\276\332\377\250\275<K\326=\326\207d\274!\247&=\036*D=x\337-=l\007\364\275\005q\305\274Z\332\362\275\371k\201=Q\355\367\275\267\353\331=dOP=\303\272\000>\247\036\270=\367T\364\275h+\035\275\213\355G=\021\004\274=L\301\376\275\363#&=\271\n\276=\033\302J\274\263@x=7A~\274\253\335\266\275T\244\205=%`\364=\017\247\000=\032A\324\275\317\236\245<\206\205\245;\\\250\340\275\211\261\004\276\026\205\033\275F\253\356<\233\322j\275Y\006\241=$\254\3108\301\201d=\350\351\002\2755\345\216\275\017\001\377\275\300I\210\275L[\231<@\243\317\271\333\005\"=\210h`\275\002(4\275^[\262\275\014\023\222\275\333\236_=_\323P:\226\243\360\275J\223\377=R\205\242\275\002>\361=l\230v\275iX\307=\326\224z\275}\302R\275\222\355\352=C\022\260\275\254p\021=\004l\307\275\nVY=M\016N\275\236\367\253=v:\306=\2511#\275\261\033\231\275&!\315=\013\352\315\275L\340N\274\026d\032\275,\336\304\2752j\240\275U\331\246=1\2575\275\360\020\217=\005\334\343<\031\004\253<\277\375\256=\230B.<? \307\275w\223\264=mR\034\274^\305\003>\327\233\003\274\320F\205\275C\266\032=\230\261!\2734d\243=2\270\221=:\217]<\360\255\037=8\004+\275}\027\221\273.W\344=S\n/=\235Ha=\330;\322\274\255i\003>\234\352\321=\031$\256\275<\013\313\272=\030\343=\207\300f\275\r~\003>q0\004>+6\253<\214D\367\275\267=\326<\224E\234=\371s\036\275\236+\032=\346\353\004\2760UT=\232\311\323=\340\316\214\275\235p\270=!\027W=\241\006\331=\007/\310=\233PB=\327a\"\274\214\250\274<\232\326\366=\243T\266;Zs\225\275b\301\370=\324\324\000\276?\032S\275\235K\337\275Z$\022\275=\235+\275D\023$=?c\315=(\272\264=\233\\\214=\346\364%\274\006-\003>\322\317\330\275\302\201:\274w\327\222=\236}\315\2746\231\224<3w\371<\235\332\342\275\025C\022\275\364\365[\275{X\344\275\202Rz=\322\315\307\275*c\300\275\006\253\234=zu\325\275\\\\W\275\320g\247=\302\014\021\275\326n\250=m\002|\275\004Q\003>\354\205\264=\317|\234\275R\014i=Gue\272^\246\313=\337\236\303\275\247@\203\275\256Ji\275[2\315\275\242\343\030=\323#Q\273\331\253#\274\206\352\267\275\317\261\325\275[\353\036=?\202O=X\214\032=4O\362<Q\030\302=\315\026\357\275-\231\315\275\025\372\007\274\036\232{<\014\037\n\275\331->=\007q\366\275\027\236\200=\255<\347\274\234H\032\275/5\253\274\306\333f\2756_\233\275\216\331\354\275\036{\304=P\264\021=\204<\373=\326A\014; \310\330\275+\355\320\275\300B\013\2756\257\316\275\226\376\214=\2502\027=Q\371\225\275z\317\316=\265E\214\275\\8\365=\261\370x\2759^\205\275\314\261\247<\317sF\273\372\001o=q\244\002\276w\221\\=)\000\207\275\317\367\214\275\212\304\324\2757J\246=\206\215\345=\241\352\016=\'z\014\275\306\245\345=\303\333\254=\254X\273;J<\340=\321\204\220<+\355~\274\351\030\244<\360\316\266\275j\001\241\273\026}\367\275\005\216X\273\000p\326=\341\357\340=q\274\227\275\365\035\236=\302\241\010\275\302\300\255\275\001\177\353=\340\271z=\372\324\324=\305\341g=\251\325\n\273Y\312\264=uT\004>\221\020\367\273\001/\236;\351\332\345\275\026\033\334=\236\362G\275\343\251\256\274\253\033~\2754+\220=)T\324=\357\351\225\275\"W\222\275K9\344\275\010{\201\275\234\304\027\275\245\311\350=\003\017\371\275J\t\005>\036\250O=\375\352\233<\004\270\350<7\\\033\274\254\314\273\275\272\016\276=\213N\022\2735\361\375\2752\346\202=\272\212\035\275|\377\253\275\300~\003>+\315\302=\361\213\327=\032\002\261\275\370\2040=\030\345\232\275\372\322\003\276s\274l\275\255\364;=y\302d\275\342Y\330=J4\314\275\323$\357<\376\377\207=\302\266\213\275\037[\233=\321\342\346=\341<-=\036\007\211=N\306\272=\002#\274={@\241\275\345\022\265=)\314\343\275\206\214\367<\242e\313<E\217\225\275\222\t\247\272\2478\372=\371\302\353\275\204\340\214\274}\227\314<\016\225\255=m\001\262\274\005\261r<\2310Z\275G\276\'\274\032b\203=\344E\216=\2014\373=Nyp=\"\320\360\275\035\276o\275$\203\177=\223O\261\275\237U\347\275\374\257f=D*)\275@f\234<Y\037b\275m\014\201\273\251|\216\275\363n)\275uS\364=\324\234b=Z\021\313<\310\275\276=\340\243\231:\0164\375=\244\034\353<\234~$=\340\317\002>%{\002>\330\236 \275\030(\242\275\021\346R\275n[\351=y\257\254=%`\227\275\336\001\367=\306\346\261\275\370\237E=7\317\255=\233\261\302\274\337\234\343\275\265T\257\275;\376R=\317\002\377=\266<\270=\301f\337={\247\306<\367&\253=@\371\301=qF\256=}\314\265=6\231\233\275\274p*<\370Q\233=}a\207\275|3\341=\330e\303<$\210\262\275\3658k\271\205\240\207=\236\266\275\275\224\217\322=j%L=!\265\363\275}\265\355=\rY\325=o*\267:7\263\026:\261.\203\275\224Ud;T\202\221=\201V\231=Un\235<\223\206\220\275In\357<=\207\377=\261.\247\275\221\221\344\275\241E\213=\201\007=\275\373\230\217\274\034k\225<\345\\a=\313$\262\275\317\225$\275\235\001\337\274?,\366<4L\323=$&)=\263G\233\274\221\200\002\275\313\221\320\275P\303\236<\336\263\200=\025G\030\275\315T\251\275p\312\007\275\256`\256=U\240\366\274\240\025\350\274\001\242\206\275\333E\312=Q\374\324=\007\035\256=%\013\225\275\373\245\343\275\2734\337;\352\033\370=\014!\320\275\222V\207=^\322?;x\367\000>uf\266=\025\346\375\275\351\367\037<Kz\214\275\252\331\316<Kc\221\275I\252i\275\336\342\325\274\201K\340<\261\247\273=4\363\375=\363\037&=\001\202\306\274\210\216\254=x,\003\276S\346\251\275\272\301l<\022\340o=\230\242\220\275+K\212=\326\371\342=\251\002\230\275\234\202\341=\364<\341\275\272\367\002=&\261\337\274\200\030S\274$\321h\275\320\025\243\2758.z=\244\352\217=:\342z=9\340\364\275\233\245\003>\010\225\002\276\330T\274\275}\263h<\377-\226\275\240(\313=b{\264\275\313k\303\275\000Z\322\275`;P\275\332\256\312\275(j\213=<\226p\2757Y\302<\0170\362=\007\244\211\275\266\tL=\252\023\r\274n\277\200=>\232\243=\374\253\367\274Q\014\300\275\373\233\202\275\353\207\244\275\2143\200\275\202\273\000\276Q\341\332\275NW\014=\212\323x=\327L\273\273\255J\275=\326\211\240\275\354\003\031=yN\\\275$\007\355;\217\311\314<u\226\234=n\"f=\306\305\300=\325\254\r\275\214\315\007\275\033Z\364=\255\345\\\275\377\271\241\275\332\333\356=\t\010\307\273w;~\273\321\300\347\275\277y\377=\307\035\371\275\274\000\324=\212C\362<\241i\351=\034\033\313\275\013\205\234\275\256\372I<Z`\010\275\257\333H=\321\240\343=\005O\332=\225\306\316=|\252\201=1d\364=A5\221;B\227\333=\246\366\274\275\254\300\221=b\223\265=\225K\227\274}rI=\252\002\261\275\243[\r;UK\326\275#\246\376=\260}\216\274_\337\301\273\305\232\306\275\354\236?\275\367\035\210=\241\342\326\27535\243=pI\324\275:H\231\275\266\035\270<\265\354_=\322X\305\275\3103\371\275\247\364\375=\022Y\276\274g\270\301<[\014\220=\336E\304=\331\243;=\013\031\351=\256\022\212=\361\245\320=\300\207\273<\326`\374<\022\325d\274\302\025\277=\216\263\343\275\362\321\275\275\037\005\363\275\350\332\327=\331-\337\274y\223\372\275\375\221\341<W\304\224\275B\230\303=J\362\247=\353\325\333\275\353mL\272Z;2\275K\020.\275\3129\366=6e\213<4d\312<\020\247;\275\027\330\220\274 w\312=\303\301\227\275A0^\272\"\262\225<T\233\201=\2275\237=\275\216\373=\276\362\214\27589\346=\021D{=\003\372\232\275\226\245\337=\210Q\267<\203\324j<\346\232\316<U\355\004=\247\324\003<r\213\330=kG:\275\317F\t\2759w\333=\355\344\033\275\355xK=\210$\205=\266.|=\217\213\210\274/\367\336=_\010\305=\221\024\214\275;d\271<\301\026\347\275%\370\311=\302\r\014:\302\341\263\274\232k\336\275\302\247\003>E\3552\275\251o\216<\270\343\004>\010\031\261\275\266$\001>[v\270=\327e\344=\031\263\236\274\036\232\267\273\313\362\222\273\270\244\305<B\267|\275u\364y\274\200\342\317=\374v\222\275rxC\2756N\205=\357\230\304=\262Bl=\373\227\202\275o_\004>\210&\255\275\257\363\365\274AvQ;Z\237\r=\313\320\270=A+\353\275\335\321\241=m\231\345\275\360\217\215\275\357\036\260=\344\353\304\274\230I\325\275$\253\021\2754\371\261=\221\030\024\275WZ\366=\2408-=\260H\245\275\324\027\037=`\363\212=\177m\273\275\302\300r<\317\360\356\274\257\321!=\222\340$\274\025\262\000>\227+\003\274\005\226g=[\275\\=\ny\314=b\004\260=\256\233\277=<J\362=w\034v=\364\324v=\300hf\274\310\300s=\207\355\253<\370\3570=N\t*\275J\351\005\274\342\301\231\271|\237\265\275\000\035\330\275k\371\200<\377\035\335=1\341\347\274D@\332;\347}\315\274\226\210\025\275?S\363\275@(\273=\321\027\305=^\367\253\274\221\026\344\275o\321\244\273\374\236\250=_X1\275\312\327\245\275p-\360\274\233\217N=\2118\347<\323\271-=\\\244\263\275\310F\262=\017&\236=[\255\313=\357\237\303\275\252\276\3738|\215\261=\005\235\243=yNO=\357\373\024=\363\377\341\275T\354\303=\337\010\343\275\367\222\233\273\264:\317\275p\312\351=,\264\377<\263\027\376=\237I,\274\260t\373:\275\2313\275\223\334\265:\303\026\377=&\253n\274U\314\307=u\307\367\275DY\376;\275\341\226=G\312\335\275\217\016\232;\004)1=\013\037\002=\374\017\306\275\243\302\202\274\253\017\005>\217b\322\275\232\324W=:C\323=\243\000`=\277\250\354\275\320<\334=,\226\311\275\010a\273;q\033\376\2755&\231\275BY\351\273\216\327(=g\002\303\275<\305\373\273`\322\265\275\2066\323={\350\205\275\375/\320\275\312\037\252<\323J\001\276\020~+=S\344\004>z\200\243=\233q\003\275\312Ni\275\361\264\261\275\023ep=\336\026|=q4\331=R\r\325=\026\334\332\275~6\214=\013\331\001=vkT\275b{ =\256\n\001\275\200\323\256\275n\323\260\275\241\021\250\275\227\270\337\275\030\032\206\273\260A\344=\"\242p\275\305!X\274\031A\235\275N\371\375\275\2457\302\274+\325\247\2744\325\275<\201Z\332=\361B~=\353\372\347\275\002\013I<\177t6=\320\027\355\275\200\033\240\274\376\346\235=\374\232<\274r\330;\275\255\025_\275\365\000\001\275_\001\236=?B\017\275\035\375\336\274\t\371\t=>\213\313\274\377\"\263=\274\210\275\274$\275\252\275\203\\\234\275\360\013\304\275\232x\352\275\232\005\310\275\256\343\204\275y\363\037\275vHK\275\273p\227=\255-M=\033\254\234\275sFS\274\004\316\313;\'\266\242=\341H\314=l\200\304=1\216\002\275\221\243\346< \227\332\274V\341a\275r\271\261\275\\{\222\275B\277\000\276\346\201\004=\376I\372\275\013M\333\275\225W\264<\006\364\030\275\375\206\357=\002~|\275p`\332=\211\206v=\374D\000>y\201=\275\225\372\034=\232zN\275W3|\275\001\242\204\274\003Y\355=Y\024\244<V\247\253\273R\022\373<\337U\300\275\266\344\345=U\333\300\275T\031\317=:P\273=NN\237\275V\214q9s21=\025\322\032\274E\313t\274\020\310\350;6\214\216=[\223o\275\300\275\266\273\365\363\025\274\343\247\000>\207\361\004>o\035\t=|\343\322=\204\025\313=\314\003\003\276\267.\351\275\247!n=\257_\270<\225\274\311\275\314\270\303\275\323\375\316=\363\235l\275\032n\222\274R$\352\275_L\337=V8\372\275\377\275\2759\032f/\275\364!\217=\001+\343=\2653\036=\001\312\246=n\257\341=D\242\334\275\020,\032;C\037\303<\014\251l=B\317\025\274\336\351\266\275zn\341\274\361\0374=\016\245M\2755\023\177:\001\345\251=LA\222\275\364\353\326\275\316+\232\275\367%e=\037\245\241\275\342\337f=\306\031\370=e\331\255\272Ktz=\302\321\251=\267\'!=\2774\350\275-Zq\2756\2371\275\'\227\313<\225\316N=m\255\246\275\244\307\307=\217J\245\275\021\265\276=\354]F\275\310Q\316\275\250\215N\275V\216\221=\375\370\222\274\236\264\002\2750(\322=\262?\363=\335q\355=\276*/=\3445W\275\267\257;=\314\374\016=\237\t\202=\326B\"\272\002W\245\275\024\351.\273\"]\301=\264\354\332\275\310\020B=\203\377\030<Rc\314\275@\261\001\275\007\227\000>*\307\306=Jlr\274D(\352<\010\"\316=\256\013\320=h\236N\275\234\\\302\274]I\317\275\237\004\321\275\355\245o\275\266\307\317\275\220I\206\275n\340\214\275\240\023\242=\"\330\3169\032+\365\275\250J\317=\247\000\314<O\340\324<YLB\275\276\013\003\276\\C\270=\263\227\332=\264\344)<\200;;=e\313\027\275\303\000\335\275bH\260=\204\210;=\223x\243\275P\r\003>\017\373\277\275\372?\255\275\243F\206\275\231>\242<;\000\003>W~\013=V}1<o\213\235=z^\325=\270:\316\274>+\357\274\010\251\310\275\214\345\222\275\234\341\213\275\250<\313<\271\341T=\377\246\342=\026\200\002\276\"\226S\275J\264=\275\262p\314\275\n\263\001>\215\375\310=WW\346<\200|\347=\306\013\207\275\240]\234<?\244\363\275/\2209=\014\317\353=\235\000\001\276\330B\234=\330\371\255=)~\342\275\232\001\314\274KT\277=L\225\215<u\037\363=C\024\342=\3425\001>6\270\272=Cc\236<\341Z\264\2757\362\305\275\005\013\252=\212\300\310<ww\025\273\361\367@\275A\314\222=\033\210I\275=\263\023<sU\256\275Q \200\275\346v\344=\321\307\n=\226\r\002>b\245j\275\300M\226<S\3264=\234A?\273Q\210\307=\254\356\307\270\020or=F\256W=\271P\252<P\346\344=\231c\361<\023S\273\274\303\311?=\230\032\217\275\t3\236\275\215q\307=\343q\320\275\325x\200=-\372\352\275\025\020\314;I\226\316<\374#\241=*X=\274t\000\205\275i\301\206=O\362\353\275\217\353\310=\336\321?=\210\267J\275R\240\226\275my\266=l\\c=\275ID\275\227B\256=\375\310\376=\023\251\000>}\274\311\275h\355\010<:\311\004\276I\005\032=\264\244\260<Qr\254=\210\347X=\337\373*=Le\211=]\230B\274$\257M=\006e\357\272\312bt\275.\003\313=\351\366n=\"Z|=\271\337Q=\314\272\373\275\327U\347=\0177\354\275\264R3=1\251\361\275\rc\357=]\310E=^\204\214=\336\324\316\275\317\264\240=\201\014\320\275\353\221\242=\375\247\023\275\211\031\250\272\236d\304=&|G=\276\277S<\3347\252\275&L\267=\034=\251=\251a3=L\313\367\275\276\257Q=\310\234\236<8\310\273\274y\252\332\275Y\265\362=\341\323\215\275h7\333=\016\364\273\275+\240\006\274\355\007{=\243\335\214\275\340\314\236\275\356o\354=\261\201\200\275T\241\200\275K\374\244\2749\027\246=\255*\306\275M1\016\275\014\224\222=\177P\275\275\256X\232\275m\371\023\275\334\310\270\275\006\371\315\275\311&Z\274\2440\203=\272\311\362\275\030\232\253<+;z=;w\267<\376m\321\275\003\323\343\275\001\004\227\274\223\0006\275L$\256=\362\363\331=x\007U\275\202`S<\260N\225=3\036[\275\006\371\214=\350\303\243=\323\r\235=\224@\337=\241\213\253\275=\351O=\374\363\340\275R\337\266=\272\303\255\275\247\317\247<\265\236\375\274\316\262f=\035|\243\275\312\327^=\262\320\003=yi\376=MJ\362=G\235\203\275\3470\200=Oe2\275Z\224\347=\2271\264\275?\250\250=V\207\307\275\365\3264=h%\000\276\237D`\275\354I\230=\354\3629=\231q\226\274{\331\361=\372\037\266=\360\234y\275b\301\371\275r\026\375=\251G\244<\277\242\254=\323|\207=r\202c\273@\021\355\275\001\336\274\275,\365u;\246\316i={\242@=\261U\206\275\264_\021\275@\202\'=H\360,=T^\270\275\345j\232=\372t\275\274\025%\246<GC\303=\037\204\004\276\233\016\274=?\224\304\275\000\252\007=\201G\331\274\271g\340=\312\246\314;\231B\343=\356\004\243\275\345\002w=^\265|\275\0326\212\275\007X\324\275\326W\\\275\352B\351\275\002+\217\273z\240\033=J\224\003>\215\250\251=w\262\267\274\2767\216\275\372\371\241=\001h{<\373\327\260\274\"\003\332\274T\352K\275~\017\'=\342\314\372=\307_\204=\207\375\345\275\205\021\003\276\325\252v=\270\023G<\245i\203\275I\344\324=\007\336\303\275\304\0342\275\351E\271<\330\237\260\275\375K\272\275\264\364\317=\320\231\356=)\025\223=T]\305\274;\001\010=t\031\310=\351\370\315=;\306\007=\251E\340<:\212^\275H\372\256\2743\344\007\275d\307\267;Q\265m<9\310>\275 \325\037\275\234Gq=\261\355z=\340\002\266=[\340Z\274\250~\303=k\360&=`yg=\357\242\006\2753\332\320=+\321\256\275\267\275\274\274\017\373\204=!n\354\275\235%]\275A}\304=~\006\372=f\247*<\026\330\237\275\321N\334;\205\222\251=7\336\000\276\004\030\223\273A\203\244\274\305\236\370=\025\261\376=P\304!\272S\213\371\275\203\031\215\275(\351\223\275\323XF=\347p|\275C\244\322\275v\237\351\274+\361\373<\024\324x\274`\000\347\275\360\210\350=\265\374\320=@;2<k\237\353\275(\001\207\274_|\020\275\357\203\267=4\355\236\274\362V\206=\327\206V=\005\347D<\2751\351\274}\235\316=\213dT\274H6\373\275}\274\203\274\361\005\376\275\214\203\333=\273\037\340\275\224\031\301\275\355.\322\275C\264\325=\274\344\232\275\370\364A\275\222\203\025\275e\332\244=\322\227\000>b\255\250<\366!\241\275\300a\'\275a\037\275\275\242\203\305\275\253\201\217\275\317\0269\275\376=/=R(\264=\377<\351=wf\241=\343u\177\273\020\001\322=\264S\342\275\331\326\227=\231&)=\213)\256\275}9\312=\246F\032\274\217\321M\274`\177\004\276\243g\354=e\372\207\275\333\336!=i\032\031=\004\225X=\272t\224\275\254NI=\251\\\346\275\361\243\027\275\252\301\222<\307\265\023=\335\202\347=\221\363\274=\002f==\t\245{\275\213\343\355=\313\252\020\275\253#1\275\354i\016<e\007\324=#\366y=\264\342\261=\\M`\275\026!\000\276\342\344}<\272\335\247\274r\327\235<\033A\364\275\177\201\235<\004\200J\274\235\205\314\275\267\001\356=\270\220\242\275z\215\005\274\207\0162=\025\223\021\275\315_n\274a\002\371;n\201\177\274:\022\362\274d\230\255\273vZ\310\274\207f\220=\350\246\377=\346\245\250=\271c\265=)Q\214\274\275=\320\275\233\2728\274\311\271\226=\234\006\377=\350\337\300=\247gx\275\321\020\026\274:z\375=\t~\243;\317\342\356\275-\214L=\366\320\004\274\237\033\207\275\001k\363<h\365\264<YC\372\275\242(\262=\205\233\263\274\251./\275\224\210\266\275\326q\305\275R\235\302\275L\"\352\275\000\241\327=\214\336T\275\311`.\275o5\374=\245(E=\261/a<\207\241\275\275\312%J=4\336\347\275\010[\305\275!<\233\274D\325\004\276\024\254\300=`\366\373<\306\326\306\275g\346\264\275\370\372\332=\374\034_\275s\207\306=d\256\356\275\341W\"\275J\216\212\275\276G\327<\312\2579=\355\317\032=ei\253\2753\366\327=\324\300u=\314\027\275=CM\302\275\210\266?\275Y\020\313=\245\312\r=}\226\240=\224\333\017=\347y\204=\247s\312=\022\342\252=\022\346\007=k\373\211\275We\347=M\250\246\275#\226\206\275h\333Z=\335\023\333<\235\301\312\275 \005\365=\314H\263=\244\001\201\275A\250\025;@J\350\274\234\225\021:{\025\313=\271i\264=y\276\364\275\2537\030\275$\355.\275t\366\247=1F\330<\336\241-==\367?\275M\024\037\273\363\030\013;\003\'1\274\271\270\220=\270\321\321\275UV\350\275\225\251h\275\"<\330;\326Du\275\032_\270\272\227\033\007=\362t\256\275:^\356\272\3718\341\274\227\2026=\325\252\274;9\354\344\275q*\227\274\351#\215\275\372-\371\275\t\007?=\022\315\221=j@\331=\3653\310=\312s\220\274\350\323J\274\245\202{= \234\201\275\242\327S<x`Y\275y\021\211=I$\330=\021\224\351=\320\r\224\275\036m\376=U\356K\275k1\004\276\270>0\275\273\n\277\275\366\364I<\303v\322\275J\205\363;%\326\032\274\231\252\035\275\361*\276=)\246\247<\366\020\003\276\244\220\207\275+\263\315\273e\235\355\275\275\342\274;R\231\340\275\226j\254=S\201\005\275\232\242\205\275\361.\020=X\321\300=\362k\344=\372\357}:\210\t\372\273\364\302\230\2752\275\\\274\263\253\341<\013?`\275lu\275\275\025\3753\275\271\366\255\275\241\304\237=\204\005\273\274\200\216\310\274\344\027\215=\230hr\274\334\326\354\275\366\242 =\3405@\274+\205x=\261\001\355\275\3607\346<\035\356n<\270\321\r=tiC<\222\261\367=&\331\341=\010\t\010\272f\264\210\275\\\366\361=\332\271\221\275\302\352\341=\354LA=v\233D<\247|\000>\265\331H\2750\330q\274\020s\244=\366U\000\276\223d\355=C\230\360=\221)\274\275\316~\274\275\326\347\003;\033yV<3e\267\275\366\032\340\274J\010\321<\312\317D\275}X\003\275\035\233q=\361\007\251\275Y\022\200\274\270+\377=\276U\372\275KC\312=\357J\313\275\0160\375\275\016\250\337=\\;\020=\271\014L\275\006\250\362;\010\013\251\274\332\257\334\275\273K\215=\3048t\275\023\033`\275\305\006d\275\347\016\002\275_\366\351\274\205\366\301\275`W\377\275\357U\216=0\277U<\354\002\314=q]x\275\327\026\275\2756\374\260=S\351\321=\353\350\210=)\025\205=\316@\347=e\270\006\275%\037\000>~\231\236=\"\252\255\275jLu=\t2\213\273\006\326\257\274\264%\201=\276\342\372=U\240\340\2750\253\326\274\371\334\347\275\027\360%=\340\205\350=Jn\363=Nq\335=\313X\304=\336\356\327\275\267=\005;\264\260\010=\360\027|;\210\234\2079\237\315\334\275\234\004\202<\374\232\240=W\305L=O\323\332=MJ\340\273\0353\271\275\261\010K=\264\346\310=\222\357\233\274\357\364\241=\275\323\255\275\305\302\333<]\234\251=\207\253~\275\'\347\204=\036Y\220\275\224\023\260\275\003$\\\275\010\305\251\275:!\223\275\231\201\275=Mv\315<_@U=\313W\351=8\203\316\275\346\262\247=|y\305\270\203\363\330=+:\005;\264\272\223=\001\274\307=\200)}=A\333J=\234p\314={\321\346=7\355\273<\364\232+\275\tk\255=\215w\334=\352\226\251=\022\220\357=\315\317\355=3\025A\274.Z\000=\251\204\255\275Z\340\330\274\022\241\364\275a\204\303:!\271]=8i\322\274\224A\261\275o\363R=\314\312#=P(\004>\"\271\325=\265\005S\275\207\024S=\207\253+=\202\263\373=\363x\017\273\277T>=V)\017=\335\023\334\275{\203\317\275,\010\177\275\202\'\315=P\016\013=\014\322\270\275\036(\263\275^^v=\000L\307\275Yb\203=\372\275\361\275\307\376\001>TT.;v\010\265\275\352\237v\274\014\027\032<\277\251y\274\224R\227<\225\251\214\275\n\273\350\275PK\251<\342Y\320=et\270\275\200\326\313\274I\220\221<]\'\224\275\016&\320=&\036\377\275T\002m=\304\3362=\263\t(=\272\241\242=\000,\254=\352?\001\276v\203\254=\335P\206\275\2257\371<u\316N=Fd\240=\030\344\256\275ov\373\275\367@\221\275\2526\321\275\n\377\203=\247\211\221\274I\310Q\275\265\\\335\274\372\322[=\372\264\225\273\340|\212;R({=\255l\212\275\315\234\364=\325$\007\275w)\257<\035s\266=\341\177\334\275?\366[=\206B\346=/\203g=\344fS\275[\3077\275\207\372\211\275)mj\275<\203\343\275Z\355N\275\346\273\221=\213\027\371\275\232b\356=4d\361<B4\215=\206$\261<\256\032\316=\323La\273\013\240\364=9\333X\275\343\034\203\274{\0045\275\\\203\375=\r\234\037=]2\315\275#x[=\024\333H\275\024p\271\275\354$\323<\377\037\315=\033\035\243\275\t\334\307=\205\350\312=d\254\020\275\241\351\262=\362K\026\274\0014\301\274\315\227\347\274\307\274\263=\312\234\230=3\257\315\275D\220\277=7\245\214=[\204\266=\253v\352\274\303\036\271=\252j@\274\252\364\240\275\357\021\200=\307\333\226<\265\374\201=f\250\307\275\363\244%=\036\231\352=\332\332\304=l$\032\275\330B@\274\013\250\002>\316\234\255\275\206\252\203=\032:]=\0066E<+f\300=4\304\306=cl\322:#\255\003>5\r\276=|gn=>5\366\275\360\361\374=;\253\301=\337\3719=e\314\333\274\200e\213\275\261\372\225=!\302\376<\362\250\271\275\361w\003>g\307 \275\245S\236\275>i\023=|\260h\275@\035\365\275\005\264\021<\264\213\001\275\237\230\224<+\271\343\274\266,\003>\274\210\334\275\264\226o=l\025\356=T\327\322\274\343\301V\274\2654\347\275\201\355|\274\373\354\233=,\\8\275\230;\272\275\351J\247\275\267\307Y;+d\036=\023;\360\275X\237\250\275\307x\234=E\315f=\021\t\267=\2414\374=}u\377\275\235\007\250\275\261\227\000=\251\005\253<\365\316\222\274u\352\017\275\202\nn=\310\216\003\275,\314\215\275\357\000n=\241\372\242=^)\352\275|\357\000\275\3349\023=\033[\265=\'\246\232:\311q\350=Q\'\273=\325\271\267\275\332\030\223\274\247\220\024\275\217\261\260=C\337\201=\023V\364\2759%\301=\362\362\021\274p\024\266\275\263\257\343=O\275\355\275\r\374\340=\252\252\337<\274o\r\275:y=\274!\354\265\275PX\360=\272\006\276=\203\274\227\275X\313\253<*\314U\275%\336\321=\242\314\227\272K\272>=S\3267\275\316\332\272=d\036\001\276x\234d=\220bx\274\316\315\\\275H-\207=\233q\222\275\370\375\340\275\276@\235=\326s\311=\360\366\005=\215C5=\323O\306=Z?}=\016\240L\274v\226\327\2755\207\027\274I\024\200\274\2731\212=H*\241\275\215O\231\275\034\346\000\276$z\266=\235x\024\275*\255\261<MR2\275\001:\374=\037\216\317;1\r\021\275\3115\353\275\272M\216=\270\325\226=\274\366\351=\250\372\361\275\340{9<\025*G=\027=,<\341\t\325\273\323\301\365\273\227x\327\275\"\323\212\275\254\360\322=\214\254\220=\313(\374=\254\226f=k\364F\274\235\225\367=@=b<\331)\237\275\032H\313=\341\001\366<\240r\311\267j\351\356=d\200\233\274Z\257\240\275\031\031\030\275\206\201p\275*(\304<\361\022\002>\000T\256\274r\333\271=k\220~\275|d\346\275$\225\271\275\204\300+\275\346\207\277\275<\325\212==&\014\275\327\350Y\275vt:<\035\217\337=\352lJ\273\222)\273=\\\211\241<2\316\004\276H\024\262\274\017\243\332\275NJ\252\275\013\240\233\275\216c\241\274\016\245\205\274\000\'\367\275\004g\312=\225\312\325=\224!&=^\234\205\275^\323\033\275\352l\t\275*L\371=7\005\215\273f\256,=\244k><\r<\373\275d.\245<D\321\322=#]\361=\022\241\355=B\226\330;lK/=\364M\336=\330\323E=>\245\027\2750k\347\273\020\376\321\275p\027\265\275\227I+=\347P\325\275k\250\326\275\304\\\001>?\024\336\275\024x\316\275\237\022<\274/\031a\275\255\223,=\r\220\306=\264\375\026=*#\004>\0229\242\273\0372\242=Hv\000>\211\365\302\274\254\036\241=G+\306\275\252Xd;\202K}=\342\333*\275w\264\036=:\241\023\275\2006\365<\376\343\261=\222.\201\274H\322!\275J\023\005\276\242\362X=\000\000\307\275_\347\365\275\275\323n\274\203 \331\275\037\021\014\2756Z\324\275\211V \275m\214!\275e\336m\274\221x\230=\327\025\202\275A\\\316\275m\330\332=S\315\343=t\"\342<7\3025=\373\t\356=\017\340\327\275\362W\013\274\342\262\266\275\310\000\277=\363\210\376=\200\305\r\274\233\307e=\256\322$\275\202|\222\275\037\327\237=\334s\325=\217\2770\275\332!\022=\006\277\271\275\301\263B\274\036\256@=\231\034\302\275\177\374;=gb\312\275-E\254=?\344\324\275{Y\214={Z\337\275\360U\240=\374\366\266\275\264\017\363=]l\277\275l\314f\275\316V\002>\035\217\272=\255\211\307\275m\014\342<S\220\323=}\317\333=\256\272\003\275\353\330R<\246\244\314=\223\010\206=\277\3208\275\005\273\254=qY\271=\373j\231\275P\310\306\275C\350\305;\242d\230=\304\360\211=M%\t;\322\325\177\275\241]\241\275\344S\001>Q!Q\2739\245\220<\267^\203=w\365\242=\305\317\377\275\330&0=\326\333t\274+\355\002\276\341N\362=\341\277\351<,z\230\275n\017C=\016\037\000\274l.\214\275\274h\036\275\034\346a\275\361\233<\271i\t\002>OX]:e\216\334\275:\033[=\325\271\021=\371\260\275\275#\246=\275\342\215\302\275\260W\316=!\000\034=1w\355\275\2679\245<J\214\035\275\373Q\322=\201\016\351=?_\007=\320s\331\275{\205\277=\331\326u=\013\257\317\275\266\355\257<\026\\\334=\215?]\2759\300>=\303\267\266=\"\363\010<M\330\303\272MU\311<-\302\363=\010O\227=\252\035Q=\215T\277= \371\177\275\273\000\254\274\234\217\346</3\203\275\312\327\'\275\237+\375\275\"\311,\274x\320_\274F\005\237\275\013\275\237<ij\253\275\030\030\352\274\030\310\364\272\266\236\216=s\312c<g)Y=\315#];\30161=3\275\r=\326\366p\275}0\213\273\375\201G\275\265\235\252\275\255\231\204<u\242\257\275k\324\332\275\325\343\241\275\2074\274\274\263\365o=\203\002\351=\266L\310=\335\262\003>\373\247\326=\'J\221\275X\177\356=e2\243\275\006W\347=+\325\211=\355H\246=\006f\343\274\364\340\036\275\363\306\326=}\302\314=\001\234\234\275T[\325\275\234c\277\275\226{u=\245v\376=\374F\000\273\035\2477<\366\026\354=\002\257\310\275\253\322\344\275\024\265\341:\303\217u=\323\247\235<\370\305\254\275\000\373\225<\376b\321;e\363\265\275r\306\036=w\217\315<\277N\242<\3775\003>\231\257t< \036\023\275\216=\252\274@\357\316=\352BD=\363{\323\275\2623\244\275\220\002\037=\267kK=3|\333\275\215,!\275\234\020\275\275L\232\253=Cz2==\241\226;\021\256Z\274\256R@\275\3117\245\275\333\020k=^%\002=\024r\200\275\202\004\320\275\341\271\000=\313\205\004>\202\\\342\274\251\n0=Bt}=\373Z\371\275\277u\204\275\277H$=\026\213\264\275z\352\360\275z\301\256\275-c\354<\341z\276=\223\270\363;\316\027\370=\357\317\004\276\3270\275\275\345\006+\275\250\r\241\275Ie\222=\221\007\233\274\375+\234=!\013\363\275\343\361f<fh\257\275\227\200\275\275D\210.\275,\271\220\275G\373\237=\372\322\263=O\263\"=\275\350\024=}9\000>p\213\270\275\256\330\270\275b,\233:r\337\275=\241\n\214=\033\031\373=[\201\253<\266@P\275\375)C\275\".\261\273\222\310\303=\316V\226\275\317\317\273=\303\355R\275\203^\000\276 \347\214=\2735\322=5=\014=`\271\340=o\3132=L\350\237<\246\215N=Y\212\374=\272\364\321=+G\327\275\267\267\324\275Yu\031\275Vs\345\275\253\305i\275j\246\330<;\221\246\274\0228O\274\262-\350=\214J\307=\274\350\330\272&\026\237=+\n\017=\010I#<F\277W=\n\003\r\275\347F\362\273\341\250\214=KS\335\274L\354\t=y\206\002\276\3536\273=\216\214\254\275bc\341\275\307\010\204\2756\271\350<\306r\307;\336,\365=\207\017O=\007\030\001\276\306R<<\'\373\347\275\331\205\347;\252!7=c\223.\275/1\270\275\305S`\275\320Lu\275\022j\244=\276\223\321=\363\351\210\275\232\314\305\275\325\250M\275\311Z\305:>\373\260\274\352s\215\274\035\024]=C\347\355<\317F\260\273\240\301\376=\344}\322<\035\350\240=\370\212\330\275\3115\262\275\007\025\213;\366<\267=\033V\266=n=\017\273I\217}=\026\372k\275\247\036\304=\033@\370\274\252\271\010\274\370\211\246\273\341H)<\277\317\000\276\306\200j\274VF\r=\222\313\347\274\370\312\351\275\001j\320=\325\020^\275b\005\342<\235\177\300\2746\257\277\275\267\032\202\275\031\206n=%\002\345=\275\231H<\304\262\016\275F\355\242=\244Jk\275\2737\317=\365\336\266\274\374\346\016\275%\222\306\275\375Ee=\360n\025=\262h\335\275\336M\305\275\0223h=\017~\002>h\357\266=\361\306\332<U\341\272=\333\253\251=\001{\203\275\235\225\360\275\273\372|\275\030\207T=4\250\355<7\232\313=\270\203\245<D>\267\274C\026\273=\207\245\310=\317R\330\274\003\266\305<\366\336\372\275l\225\235<\010\346=\275\242\204}\275+\350\217=P\323\216<\335t\017<\367\221\377\275\263\346\000>\n#\234\275\206t\371=\310\377\330=Kv\377=\270\010y\275\035\'\003>:\343\350\275\200\0341\275t7K<\322\2724=\317\014-\275\240 \212=\3346Y=\004m\262=\324\022\371=\376\276\337\2731\363\206\275G;\225=m\326\274\275Y)\004>n{P;\037\320\351\275p\276\276=\345\320\263\274\365`n\274\345\366l<\316\352\367\274\315C\344=\275.\244\275n\355\315\273~MQ\275g\225\231\275fc\231\275\335\357\r\2758\351C\275\036\243y\273\247*\002\2769\373\363\275\231\211\335\275$O\314\275\240\303~=z\200\362=\250v\274\275zF\261<\203\234\323\274\022\244\372<\247\327q=\314M\\=\354\253 \275\246\253\327\275e\210\210\275\037\333\330=\202\262j\275cr\304<\215\226\311\274=nN=\312-\000\276\364\343\313\275p\n*=\035\346\363\273\323\216\300\275\346\222\254=E\316\350=\035\3411=\240c\377=\320\000\322=W\200\271\275r\"\265=y\364\360\274$j\253<\261\237\374\275\377k\341=\340\233\231\275\361h\000=}\303\253=\025\221\240;\271m\312<w(\375=n6\311=\036\304\326\275\237n\227=`\343\314=\321\020$\274:H3=\0238\263\274:\321\307\274\336\237\263\274\3442\267\274\224\231\256\275\361%\354\275\254\005H=\316\365\327\274a:\276\275\"\341V\275\003\364o\275H/\023\275\231\3115;\332P\375\274#2\305\275\210\305\255\275\240,y=\351g\220\274b\374\331=|\273\004\276\301\230\220=\252e\353=@\322!<s\010\324\275\202\207a\275\327\230\224\274\353\224\353\275\213\0315=y\367\302=\332\247\267\275^\001\346=q\201\267\275ZD\177\273o\321\314\273\026\034\322=\201v\267\275\r\034\252\275HW\373\273qU\260\271\251N\351=\365\360\"\275\250l\201=\371\023\223\275}\301F<\257\027\301=Uu\272\275\325u\351=\006\006\343=\213L\264=OI\232=wx\372<\025T\327=\360T\350;}\242F<t\203%\275\233E\221=c\025\231\275\026y\245\275\"jn\275\010\177V<2@A\275f\343r\274\365\236\360=\031z\335;\214\235=\275V\370\340\273\023&\272\275\370\327\031\275X0^\2675G`\275D\327\221\275e\177\373:\032tt=a\022\262\275\320\325\375\275n\"l\275\270K.\275\264{\332\275\033\3725<\252\010\351=X~\231=\3672\311=\203\355(\274[\270\310\275\364\235\351=B}b<@\3109<g5\245=\224\022\371<o\3140=\257\n\355;\226{A\2738x\225\274Jm\326\274\n\024\227\275\275\3675\275\341\374\003;9\275@\275\030\225\003\276\210\020\036\273hZ\373\275I\367\325\275\371<\324\275\220\226+=\264\013q=n\021|\275\351\357\257\275o\'\272=\364\n\336\275P\340x\275:\006\302=B\007\314\275x\177\230\275\2462\256=b\351\336=!\200M\272\202<J=u\023\321\274p]\337<g\002\003\275#\350%\275\370\364]=q6\002\276\275\031\323= \215\330=S\245\353\275\347\342\277\275\024\336\363<\271\307\217\275h\232C=\307\350\334\2757\340I\275\033a0<\304i\034=\237U\255<L2\252\275\342\240\343\275R\304\342=\377\223\205<\362Xw\275|\236\206\275\267r\312\274*\361h\275\313\240\342\275\351\326o=C\306\261=P\014\002\275p\3726=\322t\361\275\247\262\351=\314\315\005\275\001\3660=\234X\342\275\230+H=\037\347\221\275n\350\261=\263\354\000\276i\310\267\274\255\246\216\2750\363a=\327\275\004\276\221\206\036\274\332\246\301\272\360\2415\275\370\032g=1\221\303=\007\257\337\275-\207o=m\247s=\215H\334=q\275u\275\303\037\262\2755\303\252\274\2318\201\275\274P\246\275\223\n?\275o\355\010=4\225[=\002\332\335=e\223\372=\307\220\360=\263\363\314\275\232\020\005>$}\370<\023\310\214\275\300~\020\275O9\314<\312\354\002\276D\317k=\226\252\250=(\333\250\275\244w&\274\335\002\262=\213Fe\274n\214\345\275\n\256~\275ew\345=\254\273\234\274\256\252I\275\352\266\035=S \301\275v\274\213=\013S\267=><\316=\317 \320\275\304\342\022:\300*\034=\251\035\210=*D\264<g\264\216=h\242\275<\351\032\277=\323\247\253=j\037\315\275\"\230i=\320\227\326\2754M\203:\206\262z\275\337\244\355=W`{\273\000\273\255\275\341\326\006\275\335\346\221=\004\234\364=%\347\206<\346\027\217=\341\002\003\276\017\207\033\275)\323\341\275:\202x\275^\222\262<q\221@\275\274\302\341=^u\220\274Li\206\274h\031\027\275\255!\344\275\367\010l<\003+$=D&\267=bY0\275%\003\013\275lU\247=z2\260\273N\336,\275k>\246<t\255\224\274q\274\352=\262\373\262=\234\336\217<\022\t\374=e\372\364\2755\177e\275\002 \023\2743\002\354<\213\206\002\276q\332\326\275\307\316\305=\3149\352\273\267\214\224\274\234Tq\275\003\211\002\276#J\001\276\334|\004=6\2019=T\005\251=\371;\337<\346\221\n\275\353\000\253=\316\202\334=\276#\271=\245\331t\273\274\261\216\275\276\037\326\274\263s\023\275nc\256\275P\324\016\275Z\023\263=\344\023\325=%\340\336;\274<&\274\334?\376=\030\024\010<\003\006\331\275=\202\217=\226@\226\273W\335\352\275\246\222\227\274\324\252\313\275\321\337\376\275?]\270=\036\350\373\274p\241\322<\307I\021=V=\222\275^9\007\275\211?\327\275k\377\237;#P\000\276\013\222\316<n\244\205\275\245\336\214\274S\342\270=\001\251\342=j\241\262;[\2700\274\214\014\002>r\n\263\274S\364\"\275\210~\247=\377\257\027\274\241\341\342\274ue\264\275~\206\224\275\026m\\<\362\200\276=p\332\333\275\001k\223\275\273\010\023=,\013\354=#y>\274\332)1=e\313\373<\240\\\217\274\360\241\250=\345\305\024\275k0\323=)t\327\275\030hp\275\337Zn=\3055\233\2754$\336;/\036z\275My\316=\250\322\230\275&c\202<\343\305\356=\337\346\220;\003\033\217=\315^\304\275\001\320\333\275\0032(\275\334\230q<\026\026\324\275\257P0=0c\247=2\246\316\275L\302n=H\247\311\275HM\344=*\314\250\275\332\354\257=>t\316=G\251\333=\025\367\315\275\25649\2751b\354\275*\210*\275\313,\026\275_\001\376=w\355\314\2753\276\365\275\333\264\272\274\207\224\255\275\302$*=\224\303\315=\351\327\307=\021/\006\275\037\236\250\275\014\0238=\372@\206==5\312=\275N\237\275d\211\366\275\341\363v=\000`\274<\0161\240\275\376k\270<\036\272\240\272Q\254\002>bD\r\275WH\3659\220\2440\275\351\3705\273\230R\313\275Q7\227<\212\242\001>\316p\247\275\312s\216\274x\315?\273\371\346S=\177\375\343\275M\016\307=r\306:=&V)=\261\270B\275N\227\366=\251\213\312\275\361\333\255\275n\323\205\275\031\354%\275 \276\345\275/Nz\274\331|s\275\211\007\203=\200\375\017\275\322gA\274\201\241\226\274q\212\316\275D\'X=\236r\223\275\007x\302=\203\335\\<k\327\r\274{^\322\275\303T\305=\2243\206\274\261\037\360\275<H\327\275P\241\362={Ap<Xp\244=\017\334\230\275\335 N=\014\366\273\274\362m\374\273i\001Z\275\213\252\361\275o\323\002<@\321\210=\005\220\376\275\370\220\367\275\351\365\224=pGX<KE\345\275\272\267\324\275\277\251\205==\010\304=DA\030\275\205\353\341=\311\200\026=\271c\275\274L9\336\274n\031\300<\375\374\214=_X\206=\311\222\204\275\377\206<\274\242\037\005\275SJ\302\275\320\361\252\275\372\207!\275J\250>\274$\332\361\275\357j\205\275\346\267\002\276\346b\003<\232`\273\275\342\007\243=\256\336\235=\203:\362\275\177\325\203=\223\367\352\274\267\204\250\275\226\030\200\274h\tR\275!6\267\275\350Z\307\2759\264\250=k\374\005=v\001\362\275\300f\233=\372w|=\371f>=HT\343=\326\213\233=\351Z\307\275\227\3653\275~e\037<V\350\323\275\320#U= \255o=\221q\002\274\215\222\023\275\216\327\363;O\356\207=\3427\253<\311\226\261\274c\331_<\377\330*\275\024\364\271\275\231\302\'=\336\336\003\276\224O\177=\332=\244\275\327\203\223\2755>\365\275\r\027\341<\363^\240;\227\226\256\275b\267\223=\200~\374\275\345y\307\274\007h\243\275\022\217\257=g\311\343=\361\236\240:\372~\201=\236\252\356\275\333ki=h\211\346=!\272.<\034\367\275\274\360\362N=\016\014A\275\001U4<D\357m<\261\320\212\275g\222\355\275\235\006.=.)\361\274\r\302\261=\261&\313\275T\022\004>)\023\357\275\251 y=\246\302Q\273\256\367\304=\336\367\237=\272\363\271<\031\207\206\275\031\330\261<i_\326\275]\254\007\275g>\223=z#\330\275M\365\260\274\261\"\222\275\260\206\345\275\325\217\246<\034\306\223;+\365\271\274\352J\234\275\357B\372\275\264_W=%j\345\275\355\235\202=,\277\211\274&\240\n;W:\211=\200\357$\274\327\024\246\275\000\225\220=H~\201\272\312\214h=\t\222\325\275Kh\020=\337\320\373\275yG$\275hc\345<r\265\241=\007\244\362\275o\301\210\274\210\033\226\275\034k\352\274\367\300\003\276\370\375\014=ya\350=\013\272\356=\317{\230=\246]\257\275q\265\222\275\365(\305\275^\031\270=Q\t\001\274e0\265\275\265\273E=\'\026\372=\263\276\306=\214\350\202=o\202\233=\026\367\244\275B\020\272<\276h\221<6H\255\275J\317\206\275\021\200\372\275\'\177\344=\r\346\363\275m\344\006=3c\321=j\263\361\275F\351\254=\233\232\023\2743|\355\274+e\244=\263(2\274\313\236\203=\336\r\256=\037\326\253\275u\203\310=\245\335Q=\217\2557=\217D\000=\330^\002\274\351\313\"=\017LZ:\216\300\203\275[\010\342\275\300\006\236\275,k\246\274\000\n\253<\250\263\206=\014L\364\275\227\275\300=\272\212~=0\346\305\275\246\272v\275\364x\343\275\331\013\360\275z\r\261<\321\242\377\275\266\266\304\273\027\335\376\275 !s\275~3\033=H\373\336\275\321\352\376\275\273\205\215=\265\r\365<\\\302\255\274vd\303\275\031\313\341=\032\305\254=\224~\347\275%\266\243\274\260\311\365\275>\313\232\275\245\271\003\276S\213^<\267\034\005\276\006l@\275S\343\306\275\252\000\245=\304\006\257\275\210W\300<~\034\340\275\267$\234<\037\320b=Q\231\377<\300\253\226\275\014Y\330\275\352%\271<\372Vv\274\001\3209=\3604\276=\014+\317\2741\035\320\273\354c\337\275%P\352\273U\023\304\274\341f\002\276\237\320\323\275\246\200\245\275\027\272\266=\336\020\237\275\231\375F\275\221K\316\275\357\374\020\275\300\372\312\275\317\315\237\275\247\211\326\275D\270\333\275B\324\265=#1\305\274\335\003\222;W\001\243<b\374\004\276xk\317=\002x\216\275\303U]\275\234\227\333=\372:\000>\225X\317=$\257\237=\221\307\000\276\322+\267=\3428\200\274\200q\270\274V\320\241\275c/\260\274\343\233\370=\376\211\021\275\3376Y\275\221\037\326\273\261J\033\274\213P\225=g5\312<\007\010\230\275\2132\003\275t\022\300\274iK\r\275l\n\345\275\2444\363=\204\201\\\275j\270\210=r\212\312=K\315\351\275\214\235\016\275\004s\365=\365\375\313\275U\254\347\275\372#\037=f=K=x\020\261\274\372\\F=p,\304=\276\305P\275\366\363\357\274r\001\343=\000v\234\275\346Xa=\021\013\215\273\020\276\352<#\336{\275\261\200\000>\243\002\267\274\301\275\260\275v\334\262;\342\374\304\274\231B\350=\032M\3309\016;\246=\331u\377=\327Y\336=\2079\235=\313\333\241=\325\273\240\275/\202r\275\035\211\210=\372\243\307=\036\375\326\275H^\214=\336q\364\274\243R\320\275f\300\313\275\023]n=+\027\324\275\275\325\226\275\375\312L;6g6\274\357R\205=Jp\300\273\376J@=B\350\313\275\347\341^=\3704\333\274\307\"\2059\261_2;HE\203\275\354<\245=`y\202\275\333Rr=\244\222C\275\244\255\265=*\251\234\275\305\317\332\275\224\235r\275\323\333\203=>F\317\275$\266\004=\267\376\303;\370J\361=de\330\275\361o\331=\037\036\t=\221\256\254=\236hM=\212\316R=\244\217\354\272\010\2016\275P\336\324=\362\222\177\275\247\343\000>O\362\':\373\353\324<\2675\343\275`n\032<\226\275\315;n\031\361\275b3\300\273\033\375\221\274Q3\271<\330\254.\275\245\371\326=\310\004\236\274\014\251\304\275\035v]=A\274\344\274\307\207\304;\035Fv=\300\367\367\274d<\037\2752\343\200<\2163\001>V\206\003>W\030@\275 @\305=\350\311\232=\347\037\214=SO\200\275^B\320\275\004\200\265\275\206u\342\274E\215\202\275T\023\300\275#X\354\275h\376\345=\037\270\361\275\307\217\303=iW\274\275l\243\265\273\020\'\375\275\214\034\277=G\'\001>\371\313~=\324@I\274\325\177\202\275\200A\233=\257mF\275\344\031\374\275\365\252\326\275\214x\347<3\306\321\275\202\375\203\274)\246\306=\022<\363\275\347\252\236=\220\315\344=\322\317s=\313\317\261=\362\302\324\275\367\006\276\275\014\367\007=0\317\350\275\333\365\222=X\346\202=\024j\221=\251\252\225\275Q\ng\275\033<x=\274\203e\275@1P=\324\207\247:\205\031\275\2757#\263\275>>\245;\250\312;=:[\356=\0354\013\275\366\006d\275\3342\355=\271\023\234\272\342\372\206\273{\217\333\275\241\203s\275\027\353\035=[=\340\274\241\200\211=L\375\236\275\256E\003\275,!\\<Wo\361=\320!\226\275@\272\246=\246\016\265=\340\374\241\275\360\346\310=\000\231\202\275\023K\005\275M\225\214\275\3258\237;\376\351\325=\365\326\376=\212\303\234\275\321/\236\275Z\271\356\275\356\224\351=o\3532=t~\341=px\t\275\3247\220\275#K\344\275$J\261\274\334\274\232\275\334\220h=\026\277\325\275\243rr\2746\r$\273\310\341\265<\331\336\306=\310\332\356<]\317\003\276\256\350\002>\341R\214\275\373\301\001>X*\010=\244&\250=\237@\372\2758\037\357\275\311G\252\275\341\275\337\273k\333\310=@#m\275\251C\344=\254\372z\274]\027\252=S\001\207<\020Z\333=%]{\275\361\010\315<\374\023\231<\204\376l=d\244\206\275B\354c\275\316\326\217=\256\"39h\227\233<\033\013z\275\021\315\327\2759\253\367\275\177\023y<zcO=\315\234\267\273\247\026\202=\007s\236\275\217\306\203\275\307\244\235=m{\300=XS2\273\222y.<\343\205\363=\235h\374=`b\261\275\243\211H\275\354K\304\275\367\'\303\275a\372\246=,v\264\275\252\014\340=d\326\272\275x\004\005\276\310\n\336=\376\360\212\2756\211\222\275\000h\004>0\320\366\274\376\264\307=\330\037\002>\031\232\203<4\261\n=9\001\332\275\207\2555=\032\262~\275\013\rJ\275\312\357\244\275l}\344<\037t\305=\233\254\306\275\267\254y=\035$\363=\263\267\313=>;\216=xJ\270==\016\363=\247y\344<\373\005\263\274\241\303Q\275\214\226\013\274m\226\225=\231\321\351=\000\232\337\274f\213\206\275kv\263=\226\313\325=\352\214s=`\266$=\260\306<\275\357\226\213\275\361J\202=\'\354\001>\330\361\241\275Z\230D;\203\267\264=\n\213\354\275fU\332\275\342=b\275,&]\275zo\001=>`\204\275H\257\361=\035\237\272=%0\016=o+\372\273b\252\313\275u@\315=\314\2222=\250\367\336\275R\034\214\275\315\031u<\233\025\236\275J\'\356=\317\207\261\275t\003\274\275\006O\322:G&\212\275N.\320\274hp\317\274\326 \242\275i\262D\275\304\377\344\275[\374\223\275\023V\205\273\232s\203<U\353\377<\234\346_\275\035~\003=\017\305\372\275_%,\275\313\224\370\274\034\007\347\274\311\225z\275\261\362\246<\307\241\200=^{w=4\243C\274\360\017\327=\325)h;\232%\227\275\024=\257=p\237:\275%\266\372\275u\023\021=d\336\357\275\345\362\373\275\205<\376\275\257Ka=\014\227\211=H\212\204\275K\257\222\275\034+\300\275\202#\203\275O\3233\275\227\220-\275\007\241\032\275\362\217>\275\016\302S\275\331\201\210<d\305+\275\327F\331\275`\267,=`\023\310=\037\345\'\275UB\314=\303\214\337=\"\367\241<a\374\002>\321@h=&\327\232\275\214\205\003\275\334of\273*\2307\2731\036\265;\330\377\274\275>\327\324\273\2666\223\275zF\257=\274C\271\275\206.\221\275\032\025Q=\345s\320\274\255\262\003\276p\372\372<\201\177\266=(\007\003\276\"T\377\275$Y\306=\020\177i\2758Y\257=\307A\256<\276\370\333=\374\247\257\275\276i6<F\334\233=\276\277\002\276&u\247\275\021d\371\275\n\345u=\223\260\214\275\377\225\270\275\201\237\333<\231uf<\'\036\272=\204\341B\274H\3301\275U$\274=R=\247\275\313\363\346\275\276\257\345<\326\2729\274=e\213\275\327\3635=\260\336q\275:\322$\275\312^\245\272TA\030<\225\001\033\274\242\304\300=\234\254\276<\3451\345<\367E\217\275\357\243X\275\223\261\206<\321\364\344\275B\366\001\276\203\374i=l\357\272=9\005b\274\206\203H\275L\307\337=\327\317\205\275\240\256\002\276A6r\275\201.\344\275\025m0\275\376\205*\274\006\205\257\275v\351\250\275\275\036$=\204/\273\275@\303\246=\256\311\237=+\217\233=\035\265g\275`\335\376\2751\'\374=w\323\256\273\344%\367\275\017\241\226=R\257\002<\222\254q<>\243\032\275\217\022\211=r\035B=6\272\367<\272_J\273r\332g\275\345}H=\212\257\233=\306KS=\375\324\214\275v1c=\327\253\366\275\004X\313<?\031\017<lp\270;\306\027\345;q\004\222\275pI\353\275cg\325=\031\031\206\275;,\235=\017\371\202;\312\340\200\273 \335\017\275\014\353)=\230\241y\275\344V\371=/\261\002>\217\336\235<\213\365%\275\274\264\371\275\340\252t\275\010.n\275\027\224\204\275Kp\361\275\216\357\325=\357s\002\275G\253\372=\251\323\300\274x\373\277\275a\016|=\363a\326\273;/\253<@\024\034=\245\214}\275\255\314y\275cU\374\275\306)\367=E^\223\275\247\313\312\275\236\206==\313\202\004\2767\327\227\275\326E\272\273\267x\373=jD\337\275\023\305l\275t\217\223\274\226\321\231=\014\330\034\275\266\034\210=\330\303_<\203\233\337\275o?\354\274\305\361\341<\254&\321\273\211`\006\275}\363\343\275+\367\216<\211\034\325=\226}\233=\007\311\302=\035\022e\275\261\024\314\275\227\343\r<G\305J=\003\240G=\023?\216\274\306\353\342=p1\374\275\256$R\275iFY=\262S\353=\000\3578<0\273\251=\261\331\250\272[\366\263=\330\032\307=\255\367\027=\240\222\246=\242\266-=aS\244=.\020\254\275\310y\305\275\244\016\223=\263\022\024<\352\241\301=\023b%:\025\346O\274\264\221\322=\245\311\016\275C\000\037<Y3\370\275L\014\341\275\313\366\035<k,\300\274\212\361~\275;\274\371<;4\307=\251\347d\274\"\306\256\2750\366\341=\030\275T\275\312\211\004\276\034\000\336=\212\314\353\275\3264\317=\250\\\375=\340NT\274h\202\302=\010\372\276\275\346\265\275\275?]\375=\313\003$=\324\245\241\275\366\375_\275Mx\243=\3569\262\273G\200\225\275k2b=\207\236\332\275\310\334\261\275BQ;=\353\314\257=\014\273\370\275\nST<\333\033\n<F\221\254=\371qn\275$:\313<\265\304\357=\014\234\271;\336(\304\275\241\343\226\275\203\r\215\275\020\346\314;k\347\252\275r%\266<\221\033\324=$`\366\274(\227\367\274=\3320=\364<\373\274\0166\004=\324n\020\275\253|a\272[\201\020=02\273<\226\337h=K\220\257=\023\\\324\275\342\017\335\275C\265\225\275hU\005\275\200\203\346=\365\316\252=\236\302r=\237R\023\275\245W\250=\306\317\004=\246\211=<\240\274\361\275m\223\262\275\2666\226=\034M\346=\'k\351\275\177J\225\274g3T\275\355\030\003>\210\003\337\275J\r\027\275\014\205\212\275\266\207\204=\214<\321=\003H\212\275\357}j<[l\300=\341\216\005\275\207d\357\275\240\351\311=\337+\270<\244~\355=\364\302:\275\362\036|=\243\233C\275x\035\202\274\212.R\275\275@\226=\204B\037\275\205GN\275\345AU\275\376\364\003\276:2\311=\016\036\357\274X\247)=5\347\312\274\316\322\271\275\312-\002>\267?\034\275\n\010\261\273#\374\270<\200\215\311=\222\035x:\304\325{\275F}\245\275\330&\217\275C\005f\275\205\334\270\275\014bk=sf\230=]R\272=\213\317\243;s\000\320=\267\250\257\275\253\271p\274\035\010\332=\201\343\276\275H;\217=\347\322\206=[\031\264=\031\027\242\273\374\263\356\275wn\207=G\005\374\274\253A\371\275\300\324\366;}\0048<<c\211=\360\331I<\277~\303=\235\336\345\275?\260\001>\200\372\025=\216Y\365=\'\336\317=G\202\341=\033\022\300\273\205Ze=\315\216\245=\230\003\206\275\2200\354\275>\202Q\275\264Q\274\275\344\352\361\275\245v\265=\252\335\372\275\231\363\322=M\007\201\275\004\213\263\275\205S\350\274\245\267\211\274\326\035\366\2755C\316\275$=\026<O\244\202=\274\332\266\275\035\t\262\274\001\026\201\275\003\312\346\273Z\205C=\356\014\315\274Xd\373=\033\326\346;\332\310\006=g\341\375=\3701I\275\302g\266\274\234\037\221\275+\223R=V\313\263;\244\235\235\275T\235\204\275\365\245\313\274\351\214\001=\324\270>=\231\021\n=\253\352\317\275\335\321\307\275y\034\313=\002\275\2749Q\365\\=\303\020\002>\201k{\275\005\374\316<<6\302=2\3765=\315\017l\275\360U\264\274\230\000\230=8f\220\274$\337{=\220r\236\275-\310 \274\363\316\371\275\273,E\275\223\275\337=;-\260=\030\334\204=7\014\003\276\3730\037=\332\305\251=\271\273\037=\307L\332\275\013\032\241\275\353\027\010=\327\330\000\276\355uP\275ge\336\275\\\274\210=\200a\364=p1\230<\375\003I=\355f\303\275\343\203F\275\316\220\306\275UW\250=\244\021\300\275\235\r\260\274\326\207\222=\317\253&\275O\271y\275\241\363\307=\201\250\363<7^\022=\201\221\225\275I\321\327\275\213\313P=w\247\350=/\261\232\275\243S\316\275\305\341\316=\214\371\341=\277\276\322<P\220\252=`\342\277=\324\240N=\234\312\204:W-i=\315\204\037\275K\362\350\275\317]\212=\267bU\275\377\263\006\273\241NJ=\326\250\302=\350\363\000=\357\325\320=\3269\331\275m\231\250<\225\323\265=\362d\366=\017q\274=-%\222</\303i=(f\032<M\342\034<v\242\370=\017\303\013=^y\341=\212g5\275S@r=Gn\274=\201\027l\274D\360\000>\246Y\260=\355:u=k\367\320=f!\205;\362\324\272:Q`\340\275q\255\216=ab>=\2501\376\275\005\203\246=\201\235\362\275]q\022=(\364\367=(l\374\275\313\310\373=\214\274\004>3\027u=\305\344\321<\355\252\340\274\267~\254=\020\256\345=\215\333\030\275\250\006\375=x\255`<\261\273\216=\370`\215\275\316\327\271=\177\010\257=\313\013 \275\376=\376<~H:=\312\211D\275CD\351<\326N\375\275_Zh\275De\363=2\035\275=\031\234h=!)\234\275\364$\201=\310I\300=\003O\325\275L\010\362=\261\032\255=\304\244d\275|P\n\275q6\240=\270\202d<\311\231Y\274\370\232\236\275\354b\323\274\234\024\003\275\253\217\211=o\371\216=Z\243\003>~\\\352\275f^\220</ \321\274\020\026\337\275\331s\273=/\377/\274\265%\322=\251\001\177=\014`\213=\026\343\252\275\337\211\000\276>\321\244=\030\037\320=\200oe\275\322\203\253=_\261&\275\314\2402\275\337\330b\275\304A\000\276\363\321s\274\254\203\t\274\3502\205\275V\036\330<\202\232\201\275O\343\351<\333\361F<;\373\252\275]bk=\372\220\366\275\230\323\311\273v\373\036\274h\377\310=\206\224\325=\303\366\373\275\230\362\272=\225\217\271\275\331\017\032\274eC\320;\202(\277\275\245\004V\274O#\354\272\357\250R<\372\002\307<J\016\352==.\000\276\366\273\010=\277v\300=\203J\355\273\346\312\273\274s\226E\274\237Cg=A\367h;z\251\235<l\235(\275\314\205\312=\262k\004\276\262\263\322<u\267\333=\302l\206\275\002|\215\275\003\265\251=\376\277\255=\235d\001>\223\340\211\275j\251\004\276O\375y==\300Q\2758\250\240=\3734\027\275|\326\222\273\304\205\316\275\255\303\365=\344\361\314\275\034*\226\274\315\021\005\276\341 \014\275L\255\234=\t\242!\275\217\323\'<3\367\222\275\367\316\336=\274\323\266=\205-\261\275m,\346\275\265M\353=\345\203\223\2756\003\224=Q\2030\275My\374\275\260I\351\275\341)\246=\031\313L\275P\327\364=\200=\361=\236t\374\275\034\220\235=\306\2600\275\351\272\371=\334y\020<\016d1=\267X\325\275\374\365l\274\277\375\240<{m}\275\222\301\036\273\335\364\016\273\276\340*=\223 \243=\271Y\250\274>r\341=bD\032=N\032\000\276\244[\312\275\371LS<A\020\266=7.F\275\r\263G=?\341\217\275\333\272\236\275\236\271\311=\226\203\034=|\345\274=\205<\225=\233\272\257\275\030\314`\275\314\302\242=\351K\263=3Y\333\275#\371\341=h\036\323\274v\344\367\274\376\334\372=\235\001 <t\002\375< t\247\273\200\037\266\275\014\347\332\275\333\247m\275s\277\375=_\016\350=\346?\273\275\345\223G<(\267\227=RNI\275\223X\364\275$\026\227=2Tu=\036\232\326\275\364x\262\275\006h\377\275\016\253\212<\240\250`\275\236k\360\275\336Ro\275$&\2729\225O<=|I\373<>\334p=\355h\251\274\336<d\275\330\004\261=\326\334\254\274x.\361=\032\370\014=\204\247\352\275\026\325P\275\226d\361\274\264\336J=y@\362\272\246&\307\2753\001\314\275\203\347v\272\3625\265\273\014\242c=%\324\002\276(\327\001\275C\372\027\275\211\274\223=\024-\2279\253\332i=\246R\002>\222\276\373=G\333\275=\263-Y\275\354\253\004\275\273\301)\273\266\323<=EB\253\275\021\240\372:\333\202\005=N}\352\275DK\t=C\373\352=66\241:\376\225\273=\032\347\r\274\361\347F<\313\250\227=\014\342\377\275\206%g=\313[s\275\371\004\330\275\244\347d\275\270Sk<\266\236\016\274\026\027#=$\367G\274>\222\021<q\024B=)\364M=gd\311\275\261@\001=I\032\227=x\335\323=\306\014\202=\262\335\264\275\032\2500=G{\353<\275\243\'\274c\370\"=\204R\324=\226`\375=E\353\377\27522\371\273\343:\304=\333\344Z\275\315\233\216\275\016\004\266=\006-\207\275\246Y\240\275\233\373\370\275\241\232;<?\243\000>rl\312=\207C\'=\365\017\234\275\304\036\266\275\355|x\274\360\020\300=\222s\336\275\372\367Y=v\n\351\275\211\212\024=\032\306\303\275\247\256\310\275\001)\371=BT\244<\037\350!=\355\031\026\275\205j\334\274d\340]\275#x/\275\330]\352\275\357\373\224=\275\374\004\276|:\305\275ui\316\275/\366\231\274lg\241=\340\353;<\343\224C=\214\257\302=\334\277\375\275\206_\347\275\3221\267=\341Wl\2751\033\246\271\301yL\275\210\256\013=\374\253\276=bT-\275\345\020R\275\003\207\337\275O\241\277\275\200\013\337\275\247\362\321=!\343\235\275\226\022\365=[u\022=\252\243\333\2759\270\210=\245\341h=1\343\240;\321\334\362\275\254\324\247<nF\026=\014a\330<\277\260\363=\345\222\031=U\024\234=\036\020\033<\333\311K\275fC\344\274\002\036\256\275\214\274S<\350\017\374=\204\242\321\274\2571\226\275\241\212\352=>\214\361\275SW\333\275\000ga\275q\320\224<\263\252U=\243\372\221=\251{\330\274$\322\264\275a\2208\275\024\213\304<U\026\240=bHZ;jn\233\274\332\352\371\2756/\241=B\235Z=\3500\256<\206&\317\274x\246\372\275\203\003f\274\212\254\000\275y2\002\276\002Y\016=\223\240\262\274\266\350\207\275\233.\331\275\312\274@\275\332\014-\275\3427\243\274i\003\336\273\035\345\234\275\323?\031\275hL\332\274O\220\336\275\223\"\256\274\037t\203=r&C\275\022\004\033\274(4|=\261\366\000\273\314`\336<\357\211\261\275\024\353\004\275n`\361\275\322u\003\2766\342\240\274\342\r\362<\017\251\220=B\327\365<\253K\360;p\254\r\275\206\221\365\275\023\203\000>\374\200\005\275\312c\225=~v\273=\344u\256\275\226\177\211\275\255\277\240\275\324\230\205=\243u\267<\247\332C=\357\025\300\273\246N\220\275\360\201\026\275n&V=\361-\344\275\177\021f<oi\352=\351\225\007=\312\274\003\276\204T\005<\241\324\205=\200h\307=[o\004\276\352\217\230=e\346\267<\322m}<\372\327\321\272\024\305\237\274IB\272\275\340\013\322\275D\032\244\275Za\315\275\177\327p\275j\311\375=:|\344\275\354\356m<x\340\361<+zW<\000\251\301\274\376\n\264=4\016\347\275\200\257\204\275\2763\326=<i\021\273a\366\207=ne\277=2\016\210\275\247\'\220<\n1\334=;\t(\274\020k\334=\266%P\275\267\'\247\275;\333\317=[\343_\2751\210M=m\305\322\275~)\307\274\017\347\266\275\211R\314=\340\324\215=\325\233i\275\031*\256=\203\354\331\275UZ\261\275<\255\233\275%\373\304\275L\203\364\274\212\241\340\275Q\000\027;\032|\201\274n{\225\274\237\225\313<\233\325\321=)\001\327\275\245\305\256<[y\212= \233\004>v*\363\274\254\352f<t*==\026\377\020\275\347\3358=3\256\362=\241\365\222=)#\222\274v\371\252<\213z\306<u\354\'<J\021\310\275\301v\267=C5\277\275b\235\222<\272\357\344\274\372\235\313\275<\321\321=\2152\215<\376\024\302\274I\375\327\275\340\344\000=x\301\021\275\272\016\004>\202[\035\275\250\004-\274=/\200\274\367\223\300\275\372\220\202\275\200\023}<A\242\252=0uz=\237\204\345\275\322\036\220\275\367\215\371\275\004\353\273= t4=f\021\350=\223\004\373=\374\331\375\275\216_\304=R\274\337=\264\352b=0\332O\275L\350\222=\224\016\021\275\246\022\030\2749 w\275\333\341\315=\301\3658=\305\177\254<\037\021\210<\335W\n\274:T\374= 6\271\275\rj\357\275\2705\357\275\213\2465<w\275\362\274}\3616=\266L~\274\342\3407=\214\344\357=\023p\306=\037<\301=\3712\330\275x*\374\275\344\221,\275\231^\275=\245\335\365=\314\230\354\275\337\351d<\266\021t\275w\333\252;2\024\266\275l\250)\275\317\305\356\275\\\234\261=j\203\315\275C\334\350\274%,\310=\035\212\332\275m\242\321=(\337\003>S\331\317=\000\336\301\275\365\263x=\326>\227=\273;\342\273P\211\216\274\235\212\343\2750\315\237\275\3413\313\275\346>\001\276\253*\004>\256\275\315\275\200\317\302=\220\346O\275-\352Z\274~\362\002>\326q5\275\030B\225\275\320\363\320=\016N\367=<.l<l\331\254=\222g\362=\241|\270=\351\237d\274\371c\260=\274d\314\275\272gA=Wf\203=\261\003L=\322@\026=\022\004\335<\020\367\004>\036\254\303\274\035\333S\274}\205\000\275\260\334\334<\367\261\353=(\312\233\275\256\221g\275g\202\270=\363\324`\275l\364\"\275\177\235\004>?\207\027\275\203\254\202\275\237]\300\275\273\306\233\275\002\235\276\273\351&9\273\023Q\347\275Jf\356\274O\343\370=w\365\251=\257\257\353=\366\227\273\274\222N\252=\363\222\272\275\230\307\342<\222\342\326=\354\265\262=\240o\322;\212\246\002>\357\026\250;\032^\354\275\354\030\233\274\006\235\220=\006\370\004\2767\017\360=z\202\276<\335\344\354=8\246\254\275k\340\377=`\032\321<\266z\244\275\333\032\200\272\316H\226\275\370\336\2749\203:\026\275\344r\314\275\3074\204=\322cO\275V\203\371=\215F :8\021\253\275V\235\200\275\025\214\032\275\342S\204=s\211\275=\233o\372=\256\325\364\275\217\205\201\275}ZU\275\307\300\262=\376C\216;CJ\355\275C\250\346=yz\365=\215!\227\275\021\374\360<\030\2406;N\276\001>\344\314\311=w\344\316\2758R,=\300\t\251\274$vk\270\214\232e=5b\361=\347jE\274N\342\307\275\005\253\344<YcC=o\302\351\274\200q\004>\243`\254\275\\@\322=7\350]<\236/\215\275\345J\001\276\246\002\204\275S\330\211<\307\316\241=\201R\007\275\227\303\332\274\327c\r<ln\352\275\301\310\365\274\326\202\372=?\270\010\275\364B\307\275\271f\002\276\033&\231\275\313\257\202;\235\340\240=\321\373\236<+\r\265\275)U\375\275\017\247\002\2769\251\355=\017\\\357=\254\205\224=7-\222\2759\265\335\275T0\347;\335\351\367\274A\035\014=\361\302l\275\361\030\222=\303\250\257\275\031\352\003>\020\305T=d\2334\275\263YG\275\372\206\223=~N\243=\322QL\274\272\354\305\2740\225F\275\027R\202\275\206U\377\274\304BU;N\nQ=\007d3<\333m\332\275\005\316\020\275\244\304\253\273\266\370\364\275r\245@<3\0309\275a+\262\275\020Q\375\275\343\346\032=9\326\243\275(6\013\274I\312\363=U\327\271\275J\330\205<\305aI\275En\202=P\331\366=\316\222\271\275\327\246\243=y\207\245\275\304\225\315\275\227f+=E\366\371\274\326\216X\275\273\264\026=\370a\217\275\372\315b=9\343\236\274\347\342s<5\265\245=\032s\001>\350\300\300=g\204Q=\241l\236=T\354\351=\326\\\351\275.s\304<\204\377\301\275p\007\350\274\376\237\251\275\246\3534=8\333\275=\006\202\025\275\240$?=\024\356\372=-`\001\276);\336=c\253\253=\033\246\257=\r\311\262=\177*o=\022\003C\273\201L\341\275\370\305 \275\236YW\275/\276\000>\254\201@=;\\4=\235\366\026=:y\325\274=\244\315<o\267\214\275\342\315\247\275\022\260u=O\256\357\274\330\233\263\273\240\341\335\275\331\023\351=\255o\334\275\277\306\355=\326\035\260=3 \214\275\242\371\236<I\300\345<\005\006\"\275}\352\217=9\\\361=\246of\274g\000\330=\000F\266\275\376-W<\270\322)\274\341\021\261=.Z\277=\246\340\'\274\007\333\213\273H\344\364<5\023\327\275\024\241\302\275M\2512=\231\365\375=\277\214\326<C\034\037\275\232\374\177\275\177\364\357= \021\345\275\324\364\374\275\336\320\340=y\310\313\275\343X\324=\243\240\212\275\254{y\275wm\373\274q\310^9\216h^\275\"l\274\273A\010Q\275\337\214\201=\265\253\267<\3700\262:C\345]\275\220:\217=+\327\244;\317\206\022\275\033~;\275\t:\350\275\020\347\270\275\345\tw\275\325\331\244:\377f\205\275\304\224]=8\342\340=\210\265}=\223@\227<+\367\300\275\277\206\244\273\343\271\301\275\326\255\346\275(\231]\2751\364\203<\262\357\377=\316b\250=c\253\236\274\224\366\217\275\210\224\211=\277\033\253\275C*\225=\274\312d\275\302\212E=a\254\251<\"\340\270\275f\254\273<?\007\227\275`{\331=\257\302\251\275\007O\277=\303\246\010\275:\377\347\275n\222\026\273\357T!\275\260\307\221=\210\316\222=7\204O=oQ\253\275[\n\206;\277\315\375=!\315\307=+\246.\275J\'\250\274s\003\357\275\010X\033\275\331@U<T?\334\273{\360?\275\234\017k=be\177\275\275\031.=gI\346=\240\362\345\275\261\376\360\275\221\"\270\275\004-\032\275\260\n\301=U\263z\275\306,\312\275\tQ\213<\322<\343\275\233{\002>\235\313j\275\244\022\337=\205Z\335=\323\302W=b\022\355\275\371%\251;\021\225\036=&O\253\275\200\005\213=\273\354\375\274\323l\325\275\256\303\216\275\270\346R\275g\327\036=\277!\337\275\232\362\326<\361\330\003>\010Q\332=+\253-=!\340\002>\177\377\004>\0037\315\275D3\375;\367c\326\275\263\336\322=\362\341\023\275\370\276\022=\270\035\262\275*L\322=\355`\261:\354o\r=\026\336\373\275zW\205\2757\245\244=Vu\244\275\264N\272\275\270\344\036=o\374\267</P\214\274\255O\311\274F\261\311\275n\032^\275?\227\217\275\3358k=\2627\033\275\014\347\326=H\0324<\276\352\255=\266&\024<\024\026\200=\302\000\231<a\321\257=.b\366\274A,\336\275aJ\237\2746\360o\274R5S\275Q\205\220\275\215\350\317;>\327\371\275<ka\275\330\247\312;[}\006=h\'\245\275\351\205\373=A=d\272z\223\212=\371\334Y\275\226\026\031=\2260\003\276\371r\362=O\002\276=\002{\002\276`.\376\275\026\274\327\275!N\021\275d\243\337<\3266\374\275\257\323\214\275\315E\277;\251\276\317=\362\020\363=b\253\232\275\'e\331\275\240\007}\274\313\301\233=\355\2674\274\2175_\275\266/\243\275\022\255V\274\265\264\275\275\237F\331=\372\025\313\275Ue\356\275\307EP=\315\353\257=\034\335\335=x\357\030\275\337\267\332\275\310FU\273\344\r\234<v\350\260=P\207\002>\360\366\202=\310\364\275=?\373\267=\020\314\030<!\333\"\275\320\234Z\275\253nq=\371\254\033\275\344\361\315\275\314\227\225=\256C)=\334\355C=\262\232\303\275\177\312\304<\306 \223<5\244\000\276\233\214(<\010\205V=\255(c=\030\260\356:\214\270\033\275v\326\247\275]\347\264=\016\235{\274\032\205\260\275\371\r\253=\323#\362\275\021\271\337\275R\221:\275tK/=<z\234\275Nm\346\275$\256Y<-\020\206=*\367]\2743\225\257=\212%\205\275fw\232=\321\244\257<s\237\322;\'\236\335=9\r\346=9%\310\275 7\270=F\022Q<\205\203\004>\004\355\356=\217!:=\216\200l;\242!G\275\257\361\307=\323*\253\275\307\264\000>\225\312\225\275\003\234\251\275\004\324\370=)\357\370<\344\227\206\275-U5=\276[\003\275:\356\222\275\203\216D\274K\251\332=\177E\240\275s\240\305<\035\347\310=\353\014T\275\333Sd=\222\250\324=\3431\200\275*a\255=3@\366\274\\A\252=\202F\003\276\372\252e=\206DY<\t\204R\275\2510\232\275}\032\317;\025\221\231\274\252\371`=9\034e\274\326\331\260=\347B\243=\2433\203=Sf\310\273\363\r\300\275\311\245!=\232\337G\275\200\335\260\275xA\027\275\024|}\273\330s\240=\022\343\233=\036\021\002=\236\344\003\276T\006\201;??:=\213\022\234=\331X\300=$\267\234=*\360A\275\1776K\273F\217\027\275\3637#<o\203\365\275\211\207i=-\256j=\226\321\206\275\341\374\365\275s\235\205\275v{\275\275\363\275\340\273\334\301\341\275\316\332\324\275\335Gn=A\366\245=\345H\261=|\364\360=\270\243B\274\203}\235=2\235\260=AzX=\315\337\354\275g\000\365=\2325\306\275\210\216\321=\255\257\274\274Q\007\221\275\312\213\301=\370\242\244\274\357\332&\275\326\315b=+\321\266\274\033*\031\275\t\277n=\234\'\270<-\337\367\275I?\000\276\230K\337\275!\314\230=\300Z\307=\337\341\222\275)\227e=\0061\031=\245Y*\274\372\367\264=\370\367@<\324\0327\275\315\324>\275\024\220\345\275\355\272\212<(\234\272=SK\010=\311\253\274\275\030\211\004\276\226N\312\275i\257\270<>}\323\2752,\360<\220\266\276\275E\316\222=r?9=>y\260\275\323\204a=x(\226=\207\333\024=\003\337\371=\026m\271\275Y\314\334\275\266$\314\275\244\004\312<\234$H\275=a\304=\351\274\250\275\222\203N=$\370\307\274ee\333\275rn\244\275\360\177\204\275\375\327\203=(\370\237=\362K\025=R%(=\034\\\372<\351\217\000\276\242\246\262\2742\014\371<\347\376{\275\204<d=\260Br<\312\304\225\27558\372=\036\215\347\275\002\013w<\344q\240\275\306\322\233=k\232\256\273g\007\354\275z\260\234\275q\017{=\373\324\002\276\213N\260=\202\007\307=\211\235\222=e\r\034\275\030B\322=\350\255\352\273n<\350=\237\226\000\275-\265\271\274r\313\261\275e\203-;Q\214\017=\211\324\'\274iZ\203\275\212\346\346\272T*\323<\326\021\"\275\377[k<\257P~\274\275^\004> \006J\2743\020e\274j*/\274\020G\303\275p\261<\275\026\357\023\273A\377[=k>#\275S\302\265=\331\r\017\275\032k\301<\371\327\320\275\253\014\210\275\204\334K9\026RT=\366Q\327=rK*\273\352]\376\2755a_<\337\216\377\275>\273\234=N\021\351\275\333w_\275\304\240\214=P\001\315<\263\355c\275\357*\301\275\177^\211\275$\367\342;\327\326S9BD\357=\251/\000\276\305\2420=\250p\202\275iM\242=5`\327=\002d\003>AP^\274\010\0224\272{\034Q\274\365]\243\275\216\210\003>\354\027\236\275\205\003\362\274\232A\332=\324bS=s\220\256=i\214D<\225\363\236=\315Hu=i\201\213\275\\\033\363=\244\225\213=\254|q\275&\034\236\275K\307k\275>-\263\275\257\206\000>\017\014\032=-j\277\274\377\337\317\275H\265\235\275\304\010\352\275EB\221=\256\244\210\275&\231\233\2740v\340\275;\324\3349\017\253\016=5G\312\275\352s\222\275U\262p\275\272\317\363<VSF\275\254\275}\274\200y\305\274\315\272\375\274\207\202R\275\221\302\215=IB\322<\217\262\254\275ug\316=.F\300<\335f%=CZ\273\275\300{\312\275&i\312\275\215G\244\275\370\366\217\275$\213W\275\022-\262\275\247\363\003>JZ\350\275c\204\241\274\271\224\231=\'\323\222\274^eo=\314\024\344\275\366\237\334<\246\017\365\275\244\177\355=]\302V=b\014\327\275\315#\300:\\\010\365\274\335\345\215\275TJ-\275Lst=\354v\336\275\343Ac\274\n\313\005\275b\000\313\274\202d\023=\016-?\275\007t\264=\200\370@=sw\034\274\016\220\313\274k\021\003<\212#\216\275D\315x\275So\305=\337\021\362<\031:\351=\252Zk=L\274\256\275\020\374\312=D\361#\275Qa\020\275\3669\203\274q\001\210=\342M\225\275\304,\304<\211=\313\275\377,A\275\361M\275\275Y\260\257\275t\037\374<\233\033\250\275\365\225\367=\037\177\347=\234\224\206=#\213\177\275\317\252\306\275\260O\212=\346\363/=o\310\231<\022N\271=\317\244\303\275\032?\370=\336\260\003\275\222\340\251<\315\355\245\275\301?*=\351L\375\275\307\337\300=a\303\205\275\372\211\233\275\025\346\211<\222n\316=\236c\213\275\261\237\252=\t\364\017\275\216<\333=\357\000\251=\331>\252\275z\214\311=\261\013Q=\243\231\214=\246\251\223=\260\022\222=\004\256\010\275\332\r\234=\230\223\026=\253\320\201\275^\215\353\275?\242\312\274\341\260\200<>\310\207\275\373*r=A7\244=(F\242<\271^B<6\323\372\275\3129\351=&\214\316=\301C\313\274\236\327\206\274\354<\032\275\361#\357\275\274\340\253=`\336U:\025\372\035\275\315<\363\275+\340\316;^\301\266\275\034\323\374:*\352m=\232b\262\274R\242J\274\207\022\226\275H\232\344<uZ\233=\236\333|=\243aq=\031\357\256\275\r\020\206\275\200\270\226=\310\316\371=\035e\300\275\'\245\351\275[~\022\275/l\344<\271`==7\244\312\275\037\342\304\275pG*=\036\346X\27512\315=c\225\214=\025\237\221=z\311g=\'\315B=\331Fx=/8\211\274\310M\317=\354\365_=\367u\377\275\353\r\364\275\376\242\207\275\002\304\212=\224\201L\275\236i\330=\323\205\223=\267\026\344=\264N\305=PJ\334=\304\301\260=-\315\347\274&bq=\331\360\321\275fO\235=\246!\027\275\263y\330\275\304Ms=\312P\251\275xD\261\273\240\375\314;@\264\342\275\366`\235=\302\n\265=K\315\303=&\003\240=P\372\250\275zq\324=\327\003\243\275x\236\364<\014k(<\355U\376\273\242\262\213=\273\001\350\275\026\357\215=\2625%=\t\347\004>v,L\275\215\326\037\275\025xn\275\267\004\302\2738g\004\276\306T\377\275HI\310=\213\306\332=\250H\302\274\353\370\002>Zl\300=$\252\350=B\371h\275\347\023\223\275\276yM\275j\223\304\275n\"\356=X\307\327\275\376Y\273=/\255\323=\272\324o<(n\374=\031\2136=#\276\233<\335r\314=\033\232\320\275A\014\204\275\245\207\022=o8\362\275\021\022\323=\\\352l=\027\027\266=l=\200\275\274e1\2745\n\204<_\242\340\2752\202\246\2740q\345=8\347N\275f&\270<=\366i=\342\302\330<J\330\343=\366\270\357;\353x\341\275\014\357\007=@\205\311\275\325\202\034\275\235!U<\004a\256:\223P\212\274\323\342\322\275\263\277W\275E!\306=%B\372=*\"\300=\263\363\201=\023qx\275\374\266\240\275.\"Y\275ej\234\275g\3666=nK\000\2760\022\231=\264o\364\275\310\272(\273\275\316\020<\233h\233\275e\240=\275\000Oj\273[\361\323<v\016\325=\216\274\320\274s\036I\275\255\0040\275\235\2743=}\034\265=\272\024\365=\250\206\266\275\326\206\017\275\203\271\323\275\376\230\346=3\371\350\274\346@\377=D36=om\214\275!\r\332\274D\362\242\275Uk\320<E\301\371=r\213\210\275T}m=\272E#=\337\010\212\273\326\202$\275\262\222>=\371sj\275MJ\312\275\202l\335\274\353\013\270=Y\023\271<d\316\252\275\276\256\352=R\340\343\275\334\244\233=N\351\016\275\002f\004>eMx<I\352\307=\233\354\004>\266\230\325=\366\314\211=\030\221\306=s\300\225\275L\026\026\275\230\005\251=j\241\212=5\317-=\204\026?=\335\203\236=Dg\346\274~\006\177=\235\031\005>\034\205R\275\3342\002\276Ww\342<\023~\022<n\275\351\275\222\231\211\275{\275\235\275e\204\336=\020.\307;\017?X=\013\227Y=\276\\\250\275\224\311\353\275\035\317\216;\372I\207=Y\254\270=\252\265\322<\221\372\001>=\206Z\275\303\256\201=^\267\352\275`\363:;(\332h=A\325\212\274p\326X\273\255q\261\2741\312\244=\357\252\001>Rl\002>?\336\332\274(\201$=.\276\354\275=Af<\007\025\252\275\255^\363\275j\000\260\274Y\324\341=?\ne<\331]\342=\301\203_=h\237\205\275oU\331=\270\3047\275\002\025\205=\304\201\243\275\224\213\002>\374\234\262=Q2\235\275\212\003\211=\305{l\275\024\253\254\275\352\270\212=\321\225\001\276\305\361\326\275\007\013\246<\354\261\344\275\2475\340=\035@\376;iv+=\002\334$=\242P.\275?3_=,\215\336:s\355\266=\373;l\274F\2656=\363\000\310\275\004\000\252\275\264\262h=\303\010\230\275\336m\227\275\021uR\275VB@\275l\322\246\275\336\256\323=\362Y\276=\253!\254=\224\276\345\275\211\213\033<|z\003\275\027\274\335=X\311\037\274U\253\234=\312J\'=\\\235\251\274/y\332=\326\357\001\271\273\315\372=\233\366\"<Pg\247=O\330i=\346N\340\274\000\313\363=\366\274\275=\253\255\356\275\274\262\216\275+*\372\275\316D\270=\320d\221;\336k\351<\253\210\340=\205>s\275_\250\002=\233F\275\273\003\014j=WK\322=\323\"\320\275\251=\307<\227!y=\322t\317\275\'\317\023\275\261\303\242\275\330!\324\273\256\025\207=T]\206= U\207=ra4=zW\302\275,\326\223<xe.=\316\357\003>\342\241\367\275\220\"\357\275\266\315\357=_\322\255<\253\t\206=\246T\351=\032\000\373=a\005\230\275Q\264#\275\275\340E\275B@\262\275\245cX=T\372W=\\z\255\275Z=\337<\332\272\206\275\002\302\322\275\230\251\245\275)Tt<J5\367=\237\205\r=\324\263\231\271\013\347\303;I\202\263<\300(\244=y\006\331=\007\330\353\275\241\021\226=\201\241\225\274e\212\225=\336n\347=\260a=\274@\237\260=H\251\331=C\336\003\275\027\r\034=\304\221\331\275\026\260\312<1\306\235<+\264p\275:>\235=\363\251\217\275\200\310\366<\343wK\275\357\306l\274\025b\352=9\215\301\273}:\001>\257\256\021=\321\365W\275\212\327\325=\"\235\212\275#\234\240\275\301YF<\027h\025=Y\2348\275rn\261=\304\343\374\275~,o\275>\030\002>r\201J\273\324\375\362<\031Q\360\275\315\332\352\275\367\007}=\254\237\n=\232\341\356<\321D>=\034\200m\274\367\337\"\274W\267\343=D!z\275\025\342\237=\240_\000>\031\313\222<e\210\275\2747\0171\275\211x\371\275?\2242\275\331\376\337\275\326\313\250=\3330\371=\257\274\241=\013\276\350=\216\313c\275&\316\227\275\257\312\371\274j\214\331=.\213\311\275k\003\267=\306\253\354=\255\317\343=\202DT\275\341^\004>\030\262i\275\211\214\332\275\262\303g\273\0210\342:A\001\n=\364\300\225=\366J\000>\205\241\220\275\375\220\337\273\027\316\232\274\032\275\316\275d\363\252\275\257y\244=\224\271\216\2734\"\003\276:f\227;\024\312\200=\257.q=\322\325\245=\032\340\373\274\231\332\360\275\347rw=w\010\234=~C\270=\334\227\212=\3017\204=\257B\014<\334\305@\275\306C\227=^\2670=\347\342\362;\314\241\322=6i\275\275r\023\301<@\331p=\026\001\220=B}3=\307\003O=\2151\205=;\234\215\275p\032J=7\227\226\274db\244<\237\322\315=[\274\242=N\025\367=\3625X\275g\r\255=\353\333\365<\020\024\256=c2\324\275\243\266\346\274\333b\257\275\230\332\214\275)\034w=\341\017\311=t\364\233<\0205\336\275\213\025\261\2743\366\204=\352\227\344\274\303\322f\275\241\344~=\306!\205\275\326\221\312\273\261\022\266=\361a\343=\330\000\306=\265\327\255=\326\365\370\275\244\224C\275\204S\357\273MB\007=\343uL=z;\226<\021\013\251\275\032=\372\272\253\310\003\276\243\014\211\274\264H\325\275\003\276\313=f\031\016:O\240\277=_|\312\2754\016\332<\2327\325\275\3624Y\275.#\271\275\344=\316\275\373\3207\275M\365\355=1\221\201=\350\316\004\276\375\230\346<\230>\304=\327\032\202\275,@\271=|#\003>\363\3539<\031W\370\274\031]\001>aM\341\275\276\267\230=\206\374\355=\340\246\002\276\361\017\343\275p\366\340\275\214\372\021\275\317\007\2169\250=D\275_\023\\\272\273\360\313=\327\335\215=#/\214=\312\374\350=\001jB=\213\200\031\275n\031\005\276\307\233\350=(,\320\275\200g/=.\361u\275Y\272\271\275\333\002\266<a\2143=\365\214\206\275m5\343\275\337\302\020=\230\211\275\273\324\307\200\275)\2549=\013F\347=\3129\200\275\301\314f=\014\261\002=\213\352\350=\242\300\306=>\016&=KP\222\275^\247\257=-\253\337=\207\227\\\274\017\255\363\275\022\242\357=\217#\357=\203\245\265\275\252t\321\274=\027\255\275\204$\355=\362\303\251=\036;\023=40#\275NP\250=\0039\276=0=\207=\035\005$=\224\220\215=v\301\020\274\356\262\212\275\301\301\013\275c\302\366=\t\266\324\273\230tU\275k{\271\275\317I\236\275kh\2179W\255\361\275\034\255\233=\001\331\010\275\254\332\324=:\\\262\275\375_\242\273\032\263B<\271\177\301=\241Z\202;\344\361\032=\212\320^\275\372\020\303\2752S\000\276\270\223H\275\332\310r\275Dr&=2v0\273oT\274\274\226gU;\205m\275\275\207i\002\275\272\220\002\275D{\031\275\277s\304\275\204\375\001>\261\224\211\275S\004[\275;\002\227=\177\267K9\210+\334=6\211d=)\216\253<I:\272;\207y\257\275m\025\324=\215\225\274\275\354l\237\275\r\252\000\276iU\367=\017A\260\275_\024\223\274\253\203\273\2750\001\274<\214\250\215=\257q\355=\022~\341\275\204F\213=*\\\220\275\263R\340=\355\213\307\275\230M\003>\342wC<\020-\257=\003c\212=\257\307\273=V\032\224\275\372r\277\2756\275\226\275\007x\n\275\006\343`<\200\231\370=\365\032\371\2758\204\366=\325\346\301=\367W\370=2\202\304\275\001^\016\274Q\321\307=\222h-\275\346\200\353=\3732\303=\017\t>\274\201\315\324\275\207t\262\274\304\231\231\275\227\252\254=o\3041\274\207\236\212=TD\253\275H\356\206\275~\271@\275|\271\003>/BB=\260\273\240=\350\270\261=\005\235D<\266,\302=qy\215=\323i\234<wZ~\2747\220q=_\'\304\275\224{(\274Q\257\202\275/?\331<yJ\321=t*w=^\005V=\365\301\303=H\236\242=\035-\252\275\214R\275<\216F/=\275n\334<\000&\247<\032\266\214\274$\311\246\275\244\n\370\275\035~,=\350\031Q\275\346k\275\275/\341E=z\034\363=\206\333\311\275*\361\320\275oj_\275\023\375{\275\034\220m=\324\302\367=y\333\326\275\362s\035\275\320z\314=A\343\374\275CT\200<\353^\301\275\276\004\365=\004,\245\275\216\327\343\275\211D\241\275K\232\257\274\006\226\356\275\3131\251\275\306\002\325=\356\"\000>\261\304\311\275\201\202\266:I{\001>A\276\202\275\213D\217<A0\251\275%<\027=\322\341\352\275\036\014\345\275\263\344\343\275J\231\003>\037W\027\274\207\223\021=Q\377\272=\017d\221\275\265\020\267\275\214\354\037=(1\274=\rF\367=|\025\225\275\270\272\375\2754\275\241\275\233\254\254\274s\334\264=\375\263\347<\274i\313=6W\300\273\356\300U=\013\375\253=\300\310g=y.\367=\314\276\235\275 \225\344=\277d\360\275\366z}\275\266\266y\275\321\331\345=9w\251\275R\254\373\275O\235\217\275\223\031\331\274\010\237\324=\214s\004\276\226\273\341=\tM6\274pL\245<i\200\224=I\310D=\030\320\325;P\031c<\262!\206=\251\026\003>\252\221\253\274\371\330\266=\257(\214\274e=I=\207\'\272\275C\263>\275\214e\335= \355\005<\207\332\314\273E9\241={e\257\274rP =\322\241\276\274\307\355S\275\257>\'=p\027\356;\313\244\345\274\255\n_=\023\310\257=\351\035\273\275\037\364\307=l\2047\274k\024\320=b\024\312<\216\374\221\275\213\210\373\275V\237\374\274\325\021\3537\201F7<\025%\375=C\3425\275ti\372=/\035\032\275\370\016f\274\016x\004\276h\234S\275\300\323\361\275l\271T=\260\364\035=\377F\212=\213\364\241=]n\361\275m\310\261;>\223\362=N\226\235=\014\232\314\275.}\331\275\034\232\270\275\212?[=p\250\300=/\265\250\274\347.\347=\366;\026\275-\311\360=\277#\261\275p \234\275+%\276<\2200\313\275\276\316^\275\032\014\323\275\221\000/=\202!\203=%r\221=&D\327\275\211\264\267=r\316\213=\252w^=\315\267{=\033\337\362\274\313^\001\276H\327\252\275\223\325\252\275\334\264\327=x\252\031=!z\361=\266\206,=o\004\374=ea\255<\365\314\257:AR\253\275aq\315=\306\322\324\275\366\215W\273\027M\365<\361\370\322=u\311\004\274i0\363=\264\303\306\275\246(\236\274\352\024\263\275\202u>\275\353r\257\275{\301\373\275Q\354\255\275\200i/<\253\306\324\275\035\263\301\274=\013\341\275n\331\340=ZK\034\275#\035.\275\335\014\261\275\347\227\177<\215(\365=\321G\237=\240\375\214=d\215\212=h\3036\275{F\317=\017Y\016\275\372\333g\275\230[\340=\312|F=\306bV\275\000Z\377<s$\227={\n\361=\212<\205\275o\313\264\275\246\035\216=\333\203\311\275\020\253\347\272\200\274E=\276F\017=I\270\227=\270x\233\275\257E+\275[\016\231\274m&\353=\316\337\335=\340\037\246\275J\310\216=\207\331\r=\301\243_=\010\241_=\005^\274\275\213\225\237\275KB^<f\356\021\275}\210\202=f]\231=\362t\303<\214\237i=\034nw\275\270\342!\275PR\262;\320\2534\275rF7\275\263\217\305\275g\312\000\276N\204\227=0\'A\275\376\260\033=\275\203\366\275\332_\003>\004\001U\275G\305\321<^W\001\275W\377\215\275\031\305\264=\362\361\257=\345\336\201<\026\340\316\274BH\215=\013i\361\275\331\201\331\275\3730\313=\010U\376\274z1\302=\207b\366\275\340\310\375\275\260\2032\275\236\025\361=\231\'m\275P^\327\275\240y\227=13\374\275\017\300\234=\2109\336\275\025\215\351\275?\307\004>\344\\\376\275\377\344\330=x!\303=7\271_=\207Tp=\227\'\363=\337\027*\274\261\307\310;\231 \202\275\261\267{\273\273@\272=\311\014\242\275-*\230<\300\243\311=\032\010\307\274\314z\334=\004\216t=\335\347t=\\\211P=\341\206\236\275r\237\245=\314\330\302\275>\234\316<D,,=\246\314\351=\221\'\257\274\263\306\263\275\361G\263<\302X\315\275\247*\314\275uE\250=5\205\315=\251\245;=\244Xa=G\336\024\275\276l\332\275q\204\356=\201]\362\275p\352\351<{l2=\346\276\340=+\262\242\275P%\352\275\316\225\240\2758D\344\275\377(\367=<R\311=*\365\177=\314\337\313\2756Oq=\031;\311\274_\310\027\274i\337\030\274\354\236\234\275\007l/\273\363_a\275\313\212\004=t\373\223\274.\201\202=Z\177\220\273\241\327\267\275b\370\002>\370ki=\320w8\274\241\247\360\275\036\r\373\274\301\305\333\274\257!\306\275(\372\335=\336\200L=\333\310\311\275\223\333V\275\203\326\377=k\275><.\\\304=_\022\347\275\351\362\257;\364\260\353\275C\022\231\275\361\021\002\276,u\365=\241n\001\275\265\371\346=w\316\234\275B\276\000\276\r\265z\275me}=\253\325r\275\016\n)\275\310\224\027=*\260\002\275\307t\356\274\03043=\351w\213<2\304\263=\377\243\252=%\347\305\275\331\322\346=Q^\007=W\202\242=\034\200\325=\233\353T\275\034\277\321\275^\2523\275\005\202O=#\277\332=%f\207;2\341\253\275\227\357\225\275k\034G\275\017\375\014=IZw=Q9\320=9\342\330=\020\235\321;@\307\311=\023tI=q\307\312\274R\311\302=r\353\214\275l6\362\275T\310\001>\236P\266\275\272~\261=\261\267\314=g\254\335\274\006\340I\274c\237O=\nM\344:\037\025\276=Lb\376\275\020\n\310=\223\371\316\275\340\037\232=\210\375\355\275I\005\346=\343\356\216\275\017\376\347\275\'\3730\275\001W\253=4\361\313<\216\234\276=A{\301\273\003\216\362=\0362\246\275\334\374\356\275\342\276\364\275{a\376\275\021\305I<\005\244\340=\000\234\000>\237\262.\275zB\210\275K\037\232=\2324M=T9\210\274Z7\226=\225\246\346\274\033\332\261=\323\035\003\276\013\262\234=uW\004>\006\250z\275Ky\351\275\362\030\351\275\226P\361\2759G|\275x\327\362\275\333\226y\275\350\3521=\352\310\242\272\344K\317\275L\030\003=\313\346u=\356\253\234\275=\331\231\274\3574\323=\363\332\202=\371\332\214\275\274\254\177\275\264\n\376<p\265\000=Ve\334\275\315\333*\275\300v%:\227\365\312=)K#\275\035\013;\270\346*\211\275\206\343\001\276:us<\036X\324\275:|\313\275\203\247\300\275X\361#\275C\342\252\275\271[\311\274\337\337P=1\340\347=sN\235=|\227\323=\241\251\327=\224\215\360=\026+\220=\323\317\333=\2514\253<Q\366\231\275-\010N=OB7\275\374}\236=7\313\"<\343V\260=\026V\255\273\314\361S<\323\252\376=\266\271\234=\031\370\310\274\325\225\217\275\327\360\320=H\224\254=\266\304\314=\374x\362=}q\206\275\300T\003\276~\302\365\275\234\342\307<9\007\312<\250W\205<\254\313/\274?\370\235;!\356\245\275\337p\336\275/\340\251\274\256k\366\275\\\362\371=\205%\360\274c\337\177=O%\032\275>\023\362\275f\211U<w\211\364\275\343\214\206\275+\256\213=\236cm;\007d\370=\007$\357=\205\373\306\274,\262\257\275\354\234\241\275\337\344(\275l.\235=\212]P=\366[W\275>\210\002\276j7\242\274?\222@=oc\200=\002K\236\275z\216\366\275t\256\345\275\305}\"\274\001\300\251\275\371\005\301\275\256fI;\034<\244\275)\337=\275\002\360q=\220\007\265=b\305\346\275l\353o\275*m\366\274\207\335\354\275\276R)\275\323{2\275\031r\361\275\360\266\332\27388\376=\310\236\201\275\202&o\2754\325\001\276tV\370=\370\r\237<\367\210\277\275\307\200\226=y\201\276\275\001?\330\275\347\177\343\274\337\332\350;R\321~=H/\373\275\030\207\001\276\246\005\034=l\027\021=+\034j\275f\0306\274\020\267\010\275\304\353\251=\'Q\002>\213\3337=\033wF\275I\332\257\272\264\277\342=B\t\266\275{\000e;\216\024\026=\033\374\343<\222\021\337\275\316O`=u\365\213\275\366\2747=7\352[=_\320\254\274=\342b\275\263\r0<W\332\025\275\331a\220\274*\312\242=5\"\215=+\0017=\272\350\026\275Sg\315\275\267Y\\=\003\362\177\274jH\206=\277\334\002>\026}\307\273.\266k\275\004R+\275\257T\232\275<^\347=L\200\303\275\255\033\350=\326\222\207\275\016\361\304=_\305\352\275E\257\001\275\023\221]\275s\373\270=\353\355\206=#L\330=\350A\261\275\377`\006=.\361\262\275\225>\177=4\357\363\275\236d\217=<d\301\275\362\021\261\275\242\363\275\275\010\302\352<\373\247\231\274\334,\216=\246\245\226\273\231>\376\275\t\335\362\275o\336\262<}0\274=y\344\305\275\002k\250\275\362\356\213=\345\250\000>\232\345\216=\026\333\002<{\027\274\275\214\214\304\275>\220\000=1\231\201\274Y\250\211=\3318 \275\010~\255\273M\022\347\273\255\341\307\274\035K\357=s*\257\275\004\253P\275n2\n=J\177\027=\242\004T<\270\3534=5\350\312=i8\232\275IB\214=\016.\000\276\200\250\354<\244b\257=\"\246\013\274\225\205\270\274\237\346\215\275\213\321\303\275\346\254z<\364P\313\274d\341\201\275\017\242\206=\030w\201\274\246\345_=\224g\017=\320)\243=]2$\275\307Dc=\3741p<\346A\211;\365\352\364=\243Q\315:\0367\371\274\355\2017\275\306\250\314\274\244\177\370\275\'&\376\2756~\232\27428c=\001\354\354\2759J\242<q8\204=M\204n<Z\332\216=\031\256\032\275.].<\252\372\221<O\344o=\023\255\322\274\201j\030\274\260\t\341=\2757\025\275\362>\203=\336\206\314\275\371+\017=\377\031\001=q*\003>>a\333=\251q\003\276K\221\234=S>\271\274\035\222\374\273\342\367\226=\'\204\222\274\262\363\273\274\271\250\233=c\226\237=\003\271\004\276\267o\306=r\"\177=\021M\317\275\343sF\274(^\005\274\003\254\207\275+ \240\275\312T\352=\306w\237\275KB\245\275t\021\266\275e\303>=\323aL\275z\306G\275~\377I=\031\332~=\203\322\332\2756\324\313\274\305a1\275)\304\322=\225F\321=\272{\370\275,a6\275\350s`\275\2219\376\275)\346\323\275\213\272r\275%\033@\274\\\334\353=\344g\257=\375*\332\273^\n\253\275\262*X=\232\266-=#\317\275=N\206\314=W\021\213=\220lj=w\307T=\323\022\304\275Y\002\246\274\252\030\230\275\2264,\273U\235\302=\206\376\300\273\037\'\363=\026H\303\275O:\320=\026\234 <\225e\236\275\334\263\241=_T\322<\233\373\214=Q\242\272\275m\370\014\272\331\276S<\273\026\255\275O\244\260=Rm\240=\2032\277=\251\243~\275\245Jm=kM\257\274\372\ro\275\335o\301\274\252U\366=k\277\243\275\007g3\275\177\'\361=>H\231\275<|\351\275\243v\362=J\366H=(\341\300\2752\327\003>\203\364\232\275\032\226\353=\247j\254\275Z4\263\275K\2434=\200#\220=\361\356\236\275\270\347\323\275\r\357\232=\374j\330\275\223H\255\275\261\251\342=nW/=(\330 \275\206\371)=\250KD\275,\275\264=\234\301\226=p\216\370\273\274\355\002\276\352w\335\275\350V\322=m\376\333=\022;_<N\244\222=\016\270\375\274\375e\227\275+\264\350=\023\350\250\275\301[e=\270 \276=\373\354\272\273\252:\025<\337t\322<\t\225\371\275\366\343\205\275SO\356\274\211Q\337=\263\037\020\274CF\344\275\301I\372<h\217\325=y\371\304\275\266MZ<yq&\275\010,\027:$x\276=\023\354\237=A/\377=\030\367\326\275u<\263\275kRy<M\010\273\274.u\244\2752V\251=\022\366\213\274\004\202\004>=\315\232=8Ix=\017\275\233=\215\342\204=)\025\255\275\273m\222\2740b\372\275-s\241=E\330\001=`\260\022\274\326u\003>!\301,\275\2152\273\275\347\205\325=\033\313\334<\346mR\273\313$\235\274\241\252]\273\2311\310=7\340\212=\342\324\326\275/\017\030<^\255\032=\037\005\321=\0263r\275\021\026\362=)\302\237=\030$\375;\373h\343\273\302\233\002\276\034h$\275\260\013\303\274\261\344\261=\241\235\247\275c\311\245<\212{\325\275E\261%\275-?\271\275\006\225\264\275\321W\232<Y.\211\275\306\335\376=\224V\236\275 \005\203;\n\354\322;\313{^\274\246\266\234<HS\204=.\\\304=\t&\215\275\331\004\024=\037\000\224\274\343q\303\275~Y\240=\230\007\353\274\242\243\r\275\026\017\204\274\261\314Q=F\\o<\241\345i\275(\321\230=,-I=\247\007\245;\270\3645=/|M\273\242C\343<\314n\007<\257]\352\274\023\276\003\275_\205\024</\277\004\275o0-=\224L^=\373\223\314=\2526\331\275\214\230z\274Z,\354=Y\017\250=K\320\230\275K\n\270=\005\254\304\275\243V\260=\220\241\330\275\245\035\000>\335\2303\274b\220\031\275\324\021)\275\211\310>\274(\375\225\275\337bd;i\212\024\275k$\213=\017\263\207=y\327\375=\2777\177=\020\206\277\275\311I\340\275g:\260\275\316\363<\274vL\205<o\307o=\353\335\003>\200v\321=\351\000\255=!Ah=_@\001>i\255\265\275RG\342;\313_\360\275g\206\001\276ym\223\273RI\242=\307\r]<}\313F<\225\335\241=\n\245B<P\274\321=u\353Q\2756\020\207=\332Y\357\275,\373\335\275\034\251\004\276\315o\250=}\344\260=b\214\266\275\327\302-\274A&\270=\'+M\275^er\275\246\004\303\275\334\030\240\275\315\331\206=\324\312Y=\252\333\031=\231\330\"\275Fr\376\275^\204\\=\251\373\252\275v\233\337\275\270\262\022=9m\276\274Ckg\275\253\323\340\275\260\215\372=?\247\307\275\245d3\275X\324\367<\346+\273=K\215\302\275u\334q\275\367\034\351\275\373\031\262\275\345\211\201\275IX\177=\374\237l\275\316Hh\274\007\031\177=\376Z\345<\263\375y\275\231\252\021=\002\262\330=EL\336=\036,\352<\370\024\321\274\320DF\275\257V\360=\332\021\202=\013\257\365=\275w\251\275\347\r^\275!\347i:<2\231=\375\224-\275T\265D=\251 \201\275\206\321\001\274)<\264=\277\007\264\275\252 #\273c\003\017\275\352\225}\275\035<\263=\324\177\210=\010\020\001\275l\314\257\275\257\237\267=\237\026\372\275,\201\000>[\357\201=v)\204=;B~=\337\243\202=\273o&\274\247\315\212\275\007<\331\274j\177\307\2759>\020\275\021\200\r=\005\316Z=\201ux\275j\300\373=\274\354a\275i\273\001\275\316`\\=6\367\221\275Vd\002\273\354-\330<\000\335\214\275\021<I=+\270\260=GF{\273\341\317\304\275\353\356\353\275\337\200\312=\277\030\001\276\356\261i\274wH\022=\353\371\005\275\230&\366\275(\r\212\275\017\351\000\276c\3338\275\326\0169\275\303\335\230\272\301{\233=\027\304!\2755\316i\275\341\247\320;\265u\206\2753\016\302<\026\022\341=\301<\277=\370?\013=\362h\355\275\205O\373=\014W\337=\020\250\341\273*\005\203\275!z\303<\t\205~=\302\322\355\275\337\360\347=/\353\354={\312\005\27527\036<\333c\370=eg\000>\374\2064=x\013\305\2754h\344=\374\310\354\274\013\336B=\366\2636\27537\263=\3763\342=\242\235\207=$\332\177\275\302\025\230=\276\335\224<yN\355=\005\244\206=c~\254\275v?\002>\365\355\215={\n.\275\234@\223\274&\302\r<\344[\314\2759\326\360=\346\342o\275\327\366\003>V\332\223\275\254\232\360;\343\263\376\275B\000\347\275,\276\225=\252R\214\275\026!d=\235\365\363=U\267\355\275\354x\361=\031\327\327<\273~\272=\313\251\210<\353(Y\275\311\237\356=5`\321<\367y@=v\224\270\275`4T\271\007\000\245=\234r\321=\302\211/=\355y\r\275\267\307P<\017\273\216\275\260\006\225\275\340<\314\275W\r\366\273y\320\262\274I\004\235\275\267\005\002>]m\216\275\246\356>=\247\335K\275\035\035\232=\375\332\304\275\250\367\222=\315\320e=\307B\366\275\245\254\275\275CN\004\275\203\\%<j\227\237\275)~\260=\360dK\275D\316\266\274\352\310\373\275\364\3239\275\315\364Z<\366-\245=h3\242\275)Y\222\275s\254;=\"\207+<)\215\235\275\341\226M:bO\307=7\t\353:\200\262J=XX\n\275\221y\270\2750\3549\275\324\254+=Ivx<y\276\016\275\021S\"=j\305\323=,i\260\275\'\371\353\275\210h\250\275\224\231\351\275\221\207\311\275\320\241\341\275i\302\331=Gp\362\275\350\304\316\275~\216\361=\275\204\322\273T*\032\275\024\340\356\275l\277\307=\363\324\242=\327.|\275h;\202=\233\316\001>\177\020\370=y\332\211\275L\217\253\275\024D\331<\023{\271\274\013\202\311=d\007\315\275HQ\254\274\035>\246=\024-\336;\352\366\004\276\344\337I\274\322\037\000>\303\026\261\275\217\315\203\273\341\377\255\274\224qj=\n\375\376=\026 U\274\214b\234=\225\364\361\273=E\020\275b\203\261\275. \004\276\377n\356=\277\356\005\273!u\'=Ge\002>6\216&=\335G\244=\241P\215\275)!\252=\0316\233=,\'m\274#4\320\275$G\364\275\255\204\274=v\265\004\276\273\253\327\275\323\030p\275\346P\266\274VP*\274\326\303_\275\207\n\236\273\206\307\205\273\355w\267\273=^\351\275\027\352\000\276^\304d=\230\370\016\275\363\243\003\276\250E\275\275\260wv=\271\211\210=\200\215q=$en\274\'\345\221\275!\240\354\275\016\203\266\275O\242\\\273\247\333\323\274\314\r\204\2755\025*\273\036\213\353\275\250=\002=/\240\256\275lL!<eF\202\275k[\r=\367 \274=\324(3\275\252\365X=P\230\275\275\352?k\274\247\227g\275\265\325\223=\227\356\n\275g\333Y\274\362\261\270=\361T\003\276\301k\204<\321I\301<\'$\217\274\253\216\001=\273\205\207=\202\007t=\356\350\316\2746\303\323\275?\2143=\232\220\330;nI\300=\026b\224\275\343&\350:\014G>\275\367\301\320\275\324\364\314=\211u\274\275\362+\352=\316\374\303;\211\346\257\275}\000\014<j\r!=\36028=~\320N\2754(\235=\324\375\320=\273\224\341\275\241\247\374<dF\330\275R\275\326\275)\350\207\275b\030*\275\347\230\001\275#\345(=\363\000\254=\275\264\246=J.Y<\2147n=\020$\346=\322\245L\274\234\350\207\275\206;N\275\201i\030\275\305U\216\275\371M\220<A\035\361=\207\234\000>\004\346\363\275E\354\237=\376\303\234\272.\323\001\276\t\335\320\275\317$\260\275\014f\354\275\234y\250\275=\237\313=\376E\306=\"\377w\273)O\'\275\373(\247=\220\342\346\275\203\365\000\276\264\nQ\273\rO\277\275\313\322\334\275>:\254\2754\310\336=p\322\243\275\000\037t\274\355f\275\2754\267\277=\323u\307\275{\220h\272\274:\274\274m\356\022\2754\371\025\275\336\235\213\275\341\252\013\275\020\205\320<b\362\274\275\214\366\276\274\004\213\271\274\260\252\374=d\027\375\274-\357\200\275\303\362\201\275\233\203\326\275\002:\317\275_\205\3248\263\271\363\275z\034d;\314x\014\275_\334n\274\022t\233=\3433\006<\2756\213<\314~\233\275@\323|8{\031g=\217s\215\275\317|\024\274\235o\310<\222\340\265=\006\254\357;\344\205\001\276\213\000U\275\251H\273\274/#\326=M\303\002>\222\255\246<5\351\307= \177C=\343j\274=\351j\344\275\001\337\332=_\244H<\345^\274\275[\273\341\275\370\265\'\274\027\252\237=\331\025\227<4\373\216=@\330.\275\273\371\334\274[:\304\275I\313\004\276\\\262/\274`\260\n\275\311XZ\275Z\246\215\275\265\016-=\354\330\210=\355)\276\275\340\204==\"\324\254=\000\036\336\273\317y\305=d\212\357=a\354\205=\026\210+<10&\275\001\304(=\365\'\264=C+\256=\354\245\000\275Q\312\215<\022\005\212\275\321t\371\275\272\272I\275<\033\255=\343~\330;H\340\263<\235\023\005\276\240W\256\275\020V\034\275\314\303\331\275G\351\017=\213/\240=\301n\200\275\0005\301\274\322\207\357\275\306uf=\243\237\'\274\037\214\215=k\363:=\3122\267=<\236\036=\260\314[=|\235\204\275\265\021\n\275\024\004\353\275\236g\275=U+\304=q\300\225\275\312-\354\274\321c\203=\326\004\311=b\325\006=\253n\367\275\304?(\275\255$|\275\203#\306<x\335\235=a;\276\275\344\220\310=\304.3<*\347?=\334\275\001\276~\211\323=\331\354\200=\032\306\234=g3\224\275\375\2469=\321\006!=v&\374\275\th\367=\033K\265=J.*=\3305\205\2743rS\275?e\255\275]p\000>\306\232\354\274Um\324=\204/\354;Z\320\332=\024T{=\225\305\002\276wE\251\2757a\222\275d\324\256=%@&\275\241M\006\275q\364!\275*g]=\277\220\230\2751U\022=\024^\237=p\230\246=\224\001\301\274\210\225o=\215\230\265\275a\334o=\037\364\226\275\245{\260\274e\323\277=\210\336\262\275\271\277\203<\024_Z<\010\262\202\275d\253\372=\002\021\277\275\032,\375= \202\031=9B\307\274\207\313z\275\274!\270\275\214\262\346\275\032\346\314\275\305\377\222\275p\364\232=b\247M=(\333\333=\243\345C;\366e\213\275\224\372\307=\245\024\345\275\225\200\271\275\"\266\302\275\027\272i=T\343F<d\315\276=\203A\375\275\247I\300\275\364\313\242=Rn\334=\337p\200<\226^\222\273r\032\360=\273h\301\275\310\216\274=\307:\271\275\036\275\361=gvY\273\362$\023\275\215&\374\275\342\237$\275X\336\350=\305\r\313;B\355\341=\025v\020=5)_=\034\347\003\276\004\300v\275\353\230\222\275\'@\005\275I\274\354\275C\000\003=\006\300\365=5\315\265=\324\346\004\276\002V\270\275\n\016V=\244\027\225<\030\361\301=\247\031\204=\035\016\020<\261\235\023=\340\242\013\274\304\364\326=m\007\346=\351\215\235\274F\007!\27581n\275\024`\035\275D\371>\275\252\021\003>\313\014\016\275,\276K\275\270<\333\275\235eS\275\370:\312\273\343\263\262=4wD=\024\305\271\274 \022\235\275\335\333a=\265\023\344=\202\305\335\275X\030\371\275\032r\252\275}%\366\275\367\272o\275\2544\226=\344\356\344<;4\325\275\213\313\303\275\023\335\344\275\335\366\220<r\341\365\275\331\247\340=\030\027I<\226\036\"\275s\341\241=\336]\312;{\203\311=\027\027p;\010d\n\275\007\262\301\274\250\362\364\275BL\207=\216\335u\275C\207\272=\260\334\330\273Cg\346\275!\\\317=\300\240\233=\'k\255<\245K\014\275\245\344\022=\247\362\220\274~Bu;\004\316\275\275\222R\244\275\035\023\313\273f\027\306=\346\252\302=]0\337\2758t\234=\277\271\347=D\205\235\275\243\314\377\275\237\002\353\267**\263\274;\230\337\275\022#\374=f\345\000\274\265\021\301\275K\334\371=|\250\326\275`\034R\275a\323l\275Na\345\275V\355`=&IZ\2724\n\314\275\250\021\201=mo\325\275\'H\356=m\026\263\275\257\254R\275-\244\321=\262Er\275\253}\233\275~ \304=\"\241\220=\276\315\270\275\354C\314\275\037,\262\274!\016\201\275\224\030\002>c-\253=\266\350\236=EP\330\275\322@\264\275\345\r\315\275& \243\275\314\262u\275\313\344\262<;t\327\275\220\310/=_<\307=\300\240\004=e\0077<\016\367\225\275\\\257>=@(\356=\246Q1=\2008\236\275/\203\035\2754Hw=\267IL\275\030=\315=\231\306z=\245B\335=\004\346|\275\035\377\343\274&\010\247=\251\343\204\275\223\252V=f\232\331<\267\322\357\275\003\302\237=\352(\332=,\346\211\275\323\352\t=\211iv=\255\036\215\275i\263\265=tp\301=\330z\007=\317\354\320=O\377\233\275\277\277\211\2758\326\354=\'\310\000\276\001s\n=\317n\225=\362S\263\275\354\366\202=\"\226\363=(T\275\275t\250\n\275o<\214\275\224\360\251\275\213\361\360=\256\257\302\275\013\004\300=\276\211<\274\223s\203\275l\023V<\232g\244<\274\252\350\275\251t\234=\315{6:8\020\006=RB\360=\214^\350=\304\361\032\275A\350i=\214\362\234\275[\214\210\273\314\275\026\275~\013\341\274\326\265><(\265\371=*\254\342\275\331U\370\275\326\372\326=E\233\211\275-_\271\274\207\017\313\2752M\205=<] \275k\236\213<\366\341\307=~\323\207=]E\373\275w\210\034=\344\001\227\275B\020\336\275\320r-\275\003\022\024=\366\034T\275\3400\275=o\266\360=&\241N\275\207\221\310\275\207\357\340=\212\310\326=\032\366v\274\333\343\277\275\325;\030\274\004\244@\274\311\366\003=\342\257\007\274P\277\001>6~-\275Cu$\275\242n\315\275\210\250\002\274n\335\233\275\007D\336\275\340mY=\324Sa\275\370\372\234\275\255\335\001\276\332,\2229W\216\032\273>\233\250=\255\301B=\315v\214\273\235\352\240=\230\276\253\275\376\232\301\275#\354\201\275\203\261<=\375\010#=\362\275\347\275\252t\203\275\214x\372=\376\202<\275\363\232\217\274\265Z\256=8\340\302\275\031N\262\275|\300\213\275\2357\025\272\3331\010\275\2043\347=Z\245\370\275\212w\265=\261\211~=I\224\276\275\257\341:\275\352\343\347=E\t\273\274\007\364\001\275\227\366_=\310$\314\275>*<=\3646\242\275\341\030\202\275\201\207\270=\251\035\353\275\376\326Q=\375\234\332=\205\010\310\274\321\345\333=\005?\250\274V\205\340\275\'\217z=_\'^\275N\220\r\275\235<\214=\254\355\004\276\242\026\264\275\201\357\234=\244\317\263<\330\331\365=\003\333\273\275\t;\245=\003\021\014=^\005/\274\211\353>=HC&\275\374\231\354\275w\204s<4&\351=\327\332\326\275\026\253\004\276\351\233\016<\246\236\214=\021V\260\274U\226#\275\207\240\206<\212\235h\275\030\321\221\275w_\304<\031\214L<\256\203\001\276\250Zu\275\215\310\002\276r\327\222\275\225\377\312=n\3433\275\314\"\037=:u\211<\226\357\000\276\377v\227\275\207\000\013\274\227\"\370\275*\316A\275\257\246^\275\304;w=\024\037\375\275\302\362\323=:Gv<\360\276\310=\265\"\027=\374\366\305\275z\t\001\27621\245<\021\013\036=\327(\370=\200C\201\275,%T\2752\301\240\275\032\261\232\274\301\267l\275X\307\364\274\373\253B<\253\315(<\234\216T\273\020\315\232\275Ef\304<\352\333\227=\367Y\300\275\200\203\350=\202s\343:\277>\177;\245\376\3029\330\377\341=\350\001\201=y\266\342=IS\252\273\364\224\211\275\027\246V\275\334\225\303\275d, <\324\370\272\275\237\337)\275\r\350\205\275G\200\241=\t\376\227=x\303C=\033gg\274\335\023|\275\024\317\006\274\276q\034\275c\030\004\2769\006\343\275\214\034v=\006#\263=\004\277\232=\035n \275V\216\274=\212V\003\276UF\356\274\223\373\341\273\203p\367<k\233\332=%R\250<\367<\243=\253*\323=x\232\035=G\313\351=D\271\260\275\352\225\341=\322V\243\274\223\266\310\275\'\324L<\025]#=\201\002U\275\303\357\317\2750U\240\275\364\366t=R\\\215\274(\275\360\275\220\201\311=&\005\004>K\260\316<\036_\210=k\376\362=H\260\014=V\314%<f\254\006\275\346\344\311\275\035\235\327\274\333\311\301;u0\344=\206\314\365\275\370\333\225\274\3077Z;#3\275=\221!\362\275sy\026=\274X\004>\023R\237\275H\216\274=\336P\365=\261x\215=`}\312=+[\367\275^\351t\274o;\337\274ph\311=KwB=\330\"\221\275\020\261\343\275\010\346\036=\036\317\363=[\223\345<\343V\372=\243Q\265\274\340\203\312=\252\225\213=\225\032D<\366\341\251\275\005\304\303=\3540\242\274C\221E=\271\255|=)\304\332<\245\337\307=u\270\247\274\032\234\206=>6\005\275S;\003\276\037\300f=[\256\364=y+\213\273\210|\230<\013\201\036=\'\326\244\275\224E\313\275\3329\324\275\322\320\240\275\355\316\262=\303_\377=\313\274\314\271\034\331O\275\037\022\265\273\260\030\357\275\355\210\243\275F\272]\273\310\373\327<\t\232y\275\000*\203=\262_\324\275+\250\300\275\331\216\260<\242\324\t\275\257\030\242\275S&\374\275s\314\253=\370y\330\275\233\r\223<-\202D=\236\t\252\275\347\207s=\237\007\224\274>\342\013\275:\205\276\275\350E =\344\307\241=\357\003}\275\211\016j\275gW\234\2732\200\206=+\"\266<\374\364~=P\336\243\275\210dz\275MD\204\275::\007\275P(\372\275\031\227\206\271\203\007\023=1F\314=\240\333\334=\010aS\2752\014\t\275\325\352\234\275&\273\262=\017\373\343=xV\205=\222\336\262\275\271Z\004=\310\t\255\275h\235\220=/\245\300=\023\234\201\275A\216\007=\010\246\017=\224\335\323=\370\0330=I0^;\314\244\216\275\364\347\236<@\031\336\275\300j\034\275II\357\275d<|\275\323\307p<|D\356=\277\006\317\275\373t\350<\025\001\031<\000J\266\275B\025\016=\252,$\275\n\222,=\256\363\322=y+u=3\'F\275\026*\214\275\2162Q\275H\256c\275\337\306.=\257\027\200\275e\212\211\275\006\342\373\275q\234\221=ye\240<\0024\"<1\325\225=\242\246w\275\357\247\310\274\037\273\332\275\311Yw<7\202G=\241\341\205\275\025\333\351=s\260]=n\377\332=\310\032\205=Z\276\231=\227\020\314\275O{\004\276m\246\n:\323C\260\275t.\305\275\2211\266\274\365G5=!\207\365\275\316\320G\275\270sq=\346\320 <W\277\357\275\227\341 \274\377\367\362\274\334\016\316=\204\322\252=|M\351=\250\275\003\276\247s>\275\374\253R\275\260\321G=\325\246\212=\3215d\275\311\225\327=\301?\203\275f\341\021\275\235\263\241\274\036\270\316=\025a)=:2<\275G\242\252\273\342\001\273<\276\362.\2751\333\340=l\3545;\256/\324\275\017\276v\275\240\270\350\2754\311\235\275\303f\201\275NR\213=\215\267 =\271\246^\2744G\371=+g\003\2760\177\302=\300\277\314\275Gw\205\2754\013\216=\r\014J=\251\225\342\275_Q\221\275[f\353\273 \002\237<\327\375\273=\366\356x\274\355\202\274\275\023\340i\275\027^\r\275o\226\230<\'\300\355=9t\033\274?\214\031=%\017\232\274dr\331\275M\010%\274,\333\002>\217\230\217<\223\356\260=\244\262X\275\352\375\375=Y\3575\275\014V\270=h\270\207=\002\212\"=->\202=\377\223\250\273\204\313\253\275\241\221\356\274\247\243\000\276\323L\005\275v\235\300\275\270\035\257=\275\265V\275#\034\001<V\323\360\275\264\266U\274`V\353<\2242\024=r3\227\275:\331\002>\313kG=\225[\035\275\253p\357<\264\177\362\274\035\234\264\273%\360\036=\023K\372\275\010\317\325=d\364\217=\307\206\201\2754\375\215<op\241=\244mk\275\010\202\261=\312\023\364\275\233fd=\023\263&\275\302\277\220\275-\336\277=\262\266\334\274\023\270\347\275\013+\031\274\202!\023\275\311\007\237=\303\202\246\275\250\344\002\276=:\000>\203h\264\275\204\230}\275m:`=\016\2322\273`\345\004>\373o\243<\372\201\334=\341\310\001\276Y\252\225=(\001\302=\004\035\243=\001\021.<n\356(;\211\347\265\275\376\217H=HO\274\275\366$\353<s5\356=\207\252<\2751\236S=3\"\365<\025\311^=2\235\277=\365B\227=\022\013\252=\254r\366<x= \275\304_\352\274\325>\366\275\035\004==\016\301\242==}\213<\241\'G\274,[\257\274\\:\023\2755\216\276=~\343\246\274\217\277d\275\\;\341=\333\321(\275\010I\314<\257H\306=\032t\023\274<\334\220<_)\200<g>\332=\276\222\254;\240\230\357\274\353\321\211=\242\201\350=\021\232\311\275q\214e=\"\327\204\274c\232\312\275\321\307\002>\242l\350<\206\010\252;\034Z\306\273=5\224\275\331\203\312<\016\002[;K\341\023\2758\313\365=\341\302\235\275y\0243<\034?\213<\320\244\030=\261L}=\002\217\002\275\2568\260\275!_\364\275\214c\030=\0070\223<\343\026\003>\247?*=\301\016\004\276\3379\233=X\346\375\275\025\307X\273-\257s=tz\234<\035\263\361\274\324\220\375<\334\270\265\275\331\357\211\275\2138\024=\025\213\302\275\027\034\010\274\316\031\216\273\334I\003\276\226\222\256\275\004\324\342= \343\351= k\371\272\014\033\252\275\374\343\261\275\211f\207\275g\313\027:T\244\257=\332~\363\2756A\210<\256\013(\275A\334\310<#\344\237=\227\240\027=\331/\033=p\303N\2759\221*\275\256A:\274\356\025\001\276y\026{<t\207\347\275\020X\263=?\'\221\2755\177X\275\246-\216=Ds\033\275\352\227\203=\322\232\211=`%\006\275\020\n\274\275\0376\261<\'\262,\275\262\3228\2754.\n=\t\002(\275\314Z\343=\237\364\003\276\372\333\360\275\244\315\332\272\"\340\232\275j7\230=\216\026\255\275uPO=\005\247\362\275DF?\275\313\207\224<\242 \210=\315\021\264\275t\227\331=z\242\177=\003\274W;\032B\201=\351\332\237<K\026m\275\252\311\277\275\325\r\230\275\367\263\010=Zs\212\275\237\322\252\275\233w@\2747\032\236\275\324P\245=\344\343\306=`\210U\275\026L\275\273\271*y=\362\203j\275\311t<=p\031\374=H,\374<}\221\232=Qg$\275W\0060\275\251\227\347\275\325V\350=q-\245\273b\217\305\275\357\373\002\275\311\014*=\232\243A\275.E\325\275\325\360\317\275\343\336l=c\240\304=a\343\006\273\363\017\361\275\367\036\331=p\355\010=\020=\305=1f\004\276}cd\274\347\025\352;ty\266=\005)\355\275\0048@\275\353\026A=]GZ<\n\016\346=Wsz=~\353\336\2737:\201=\333s\352<E\352\317\275\364\020\234;\306\234\221=\372\271\013=\211\031\360\275\255\272\033<\257\034\341\275\220E\335\275\205\313\267;!\375\234\275Va\272\275<\221\253\275;\014\322\275\307c\316=o\253\036\275\177\004\314\275\257}\345=I\205y\275U\201\341;\370\254\215=\335_k=*\302\250\274\276\213\224<\'\024\265=\037:\370<$u^=\244\001\373=E\235]\273X?\324\275a\"&\27569\332\275\330\365\211=\241\363\270\275\265\221\207\275\032\355\217=-.*\275\317\256\314=\274\246\261=\203\361\304=\'\272\356=\024\027\342\275/\r\335=\373\354?=\225\225\271==\216\266\275e\301\335\275\024\002\252\275c?\253:h\027\340=\035CM\273\211\034\207=\231\321\361\274\204\366\341\275\r\241\203\2759\253\302=I~\025=B\033\333=]\001\300\274\360R\263=)]E=\004\360\274=\372zx=\371\252\234=\251\271\320\275\'\307\345\274\240\224\216\273J!\353\275\373 \254\275\260\2755=\361\350\000\276\335\034\316<\025\210\374;\347\356\370\274WIG=_\356E\275\275X\211\274\224l\262\275\376\320\022\275Y\255\037<\223\336\325=\362\244\330=\340\222\364\274\234vo=\235\326\367=\357\340\377=sj\237<iF4\274\271v\347=Y=L=\360\245\344\275\336\020>;;\237\232\275\274\336\344=\253L\352\275\205.\345<\374\334s\275\350C\337\275\ns4\2757\211\207=W\356q\275\334\213?=e\3264\275t\236\274<\264\313\017<\204V\233=\276,\3249\235\277\221<>x\314\274\211\335\374=\241\010u=a\345\001>\2551\272=\346\335;\275\251\356\003\276\n\222\314\275i\251\002\275\275\023\223\275)\032\300<\036\263\312=}\274y<L\266\323\275\206\300\372<\025<\225\275\261\\\372=\213E\206\274\007rD\274\024\367U\275<N\003>\036\031\302=J\222{\275>\200H<J:)=\352a\221\275\007\340\314=A\261\374\275\230VX\275-\310}\274\345\336\372\275W}\002>\375\332\304=SQ\300;\007\235\346\275\323y\312\275N\005\267;\221\266\316\275\002\201\233\275SY\002>\022i\355\275tT\232=\227\357\200=\207\333R\275NW`\275\310\010\006\273^8\261\274U\273\323\275\024U\204=\217\014B\275\303\211\021<Q\017\357\275\246\366\236=\0172\376\274j\017\316=\205wA=\030J\004\276.p\300=e\312\263\274\3625\241\274\236\363\034<1\277\204=\247\017\305\275\377\376\030=\272\231,={\344\304\274^\246M\275\343\212C\2753\362\240\274\354\236]\275\252\225\363=\377\312\302=\002\353\036<|\312\364;\t8\236\275\027\032\264\275&^\236\2758\211\002\276\321\277\234= \003\364<\252o\003>F`\363\275\"\010\235\275\201>\231\2755&\224\274\270c4<Ab\301\275T=4=\036\023\001\2762\257\354\273Q\033)\275\275\323\020=\233\\\351<\264\314\240=\031\000&\275\342R\004\276\301]\246=\262\213\203=?t\272=\224_2\275TI\371=\237\010\356\275ks\331;[\300\002>X\200\235=u\225\033=O\0105<l4\025\274/a4<\'[\256\275\3755n\275/|\367=1f\324=\261~\322\2757q\214<\360\206\254\275[\005O\274\214\206\346=\rj\\=d\203\'=I7\325=y\310\363<\351l\364=uk\311=:\375b\275\350\275\013\275\355c\345\275\312\357)\275\274\323.=\022\354\t\275\247l\035\273\211?\311\2738\003\262\275\345\022\202<7\247\305\274\022m\272=!8S=bs\215\275\366o\360=\274\333\367\275<Pd<\223\352\024\275\345\334\206=\302\244\242=}\374=\274\326\323\243\271\251\364+<\035Y\273\275\030\236/=\237\220[=\327Q\235\272\312\331\247=A\224\372=i\351(\275\2512\222=e\014\374\274\275\375p=\010S*=\037\235\345=\234\213\276<\375\263\327=iv\340<\2478\035\274\215\264\260\275\303\237\220\274\213\3633\275\037\212\241=\316\311\326\275\005\362I\275Yr\211=l\325\242\275\177fi=\345\241\326\275\205\236\001\276\334\242\016\275 a\266\275\025\312}<e\307\315=!\223\212\275\306\353\346\274\n\270\373=\251=\302=\262\304\201\274\244\202W\275\374\034K\274\257\3044=\227}\312\275\232\202}\274|\020\n\275\300\315@;1\334\201=\025=;\275\002\'\022<\202\357{\275kr\210\274S\037\226=<;\270\274\013G\365\275\272\237\343= \320\000>\266\243\237\274\240\327\361\275I\003\277\275\002\303\233<r4\257\272\021I\263<\010\231\366\273\'%\316\275\260\277\250=`\202\336\275\016\264\270;u\217\350=\212a\265=m\353\003\276\325L\365=-6T=j\375\355\275\"n\212=!\246\364\275.\262\210\274\251\305\t=`\323\210<!\360b\275 \236\270=\035\264\352=\210U\242\275\300|\206\274\245\3431\274\357i\331\275\275\322\221=\257\324\232<\247\230\333=:z\272<\264^\321<\270\233*\275\356\t\264\275\226\227D\275\300\226\335\275\376\304\002>{\307\353\275\304!\327\275\322\260\332\275L\263\226<S\212\000\275V\236\302=\252\254\002\276\006\206\343=\237V\211=g\000\004\276E]\252\275\265\005e<\276\350\364\274\264*\246\275\357\305\241=\231\272\n\275\204\257\341<ZN\217=I\301Z<\222h\362=\251\210\022\275\202\317\214=\233\250k\275\027d\253\274\3609\r=A\005\360\274\362sb=B\341N\275CL\223\275\2748\027\275\261\"\211\275\232\022\203=\322\256\217\275I\025\320\275z\367P;\025\236\221\275\370-\274\274tp\337\2733|\304;\"\367\355\275\203=\204\275\033\003\003>\235\267\376\274}\032]=\017;\333\275K-\251=9vr\275*\225\243\275\253\331\222\275\321\033\005>~(\261=\254\271\304\275\370U\323=&\016\231\275K\007\204;Z]\301=\257 \000>\005\314\272\274\304\204\025=\337J\345<\215@\003>-\307\'=q\203\324\274p\001\035<?\212f=No\231\275n`\003\276\337\350\261<\035\3318\275\027\325\326=\001\004\t=\014\212\202\275K\376\300\275t\355\374\275go-\274\314x\376<\306\035\314<jR\304\275\034J\247;\232N\207\270\350k2=\336\222\300\275u\236\312=\035\302\031\275\364\374\332=Fr\261\275$W\321=\372\242\374<\304\001n\275\303h\t\275\346\\G=\332\030\034=\2125\214\275\036\337C\275\262\252C=Aaa=\211R\230=1\020\306=\217\001Y\275\377\317@\275A9&\275\377\212#\275\207\360\344=1aL\275ZV\241=\2130\211=\310\262\316=!\257I\275\014\301\310=\362d\210\275D\265o\275l\024\013=\'\363\201=\024\177\236\275\020;W=\220A\003>a\326b\275\005\037)=^\222\364=\247\222-\275\334\203\207=[}\000\276\212ya=\256\360T\275^\007\r\275m\206\264=\375\006\323<\273Y\372=,\035M=P\336o=\255\2064=\260\006\277;8cm\275\\L0=\360\001\247\275\302\213\375=\255\341\364\273y\331\261\275x\272:=\336\201\300\275\200\250\254=\211\247F=\265\247\233<\022\235\243=\260\327\275\275\361\202\\\275g\232\216\275Hd\337\275b\t\322\275\302,\241=\326\0234=W\230\274\274A!y=\"\217\257=\232,u=\'<\271\275\313\033\373;\234\241\373\275\257L\266=\3541O=\355\002M=\347G\272\275\010\014\005>_k\255\274\004\261\245=\345D\246=\243R\204\274\230\243\307= \246\377<V\212\231=U\215\263<\301\255\325=\006\243\222=\242-\374:Zs\240<\203\312\206\274\231e?\275\353\313\032\275\226:\343=Y\312\257\275\206f\013=B\363\247\275X}\213\274\316g\227\275&\3528<\330*\241=\r\370\236=\013\256\205\275\331\017U<\276!\316\274\014\241!<\216\261\320\275\333F\336<\345A\351;\344[\252=\270\253\270<\004y\001\276\377\336\256\275\275\214\344<\257\220\223=\312SM\275\214;\201\275\014\037\353\275SF\230<\n\214\371=\2470\000\275\317\345\377<~\350\227<\227\214\034\275\300w\325=Hu\330=$\311V;V\021\275=\364\376\307=4/9\275\023\262/\275<\313v=$g\274;\304\265\334\274\370\374\302<\013#\301\275\264\243\204\275\"D\237=\300\313\001>\352_\221=\234\350\214=S\235\336\275\020g\033\275m\205\003\276\262\036\246=\2000\006\275\212\350\342\275\225\350\023<\230\303\244=\227\236\320\275s\031\376=\234\273\261=}\034\330\275jTH\2740\263\235\275\022U\260\275\363\230\332<\026\237\020\275)\025\223\275.\340\373=D\244&\275\245\345\005\273\266\310m<\322+\237=6Wt=e/]=\343+\363=;\005u=X\243\030<\327A\375=\363Y\204=\3259\250=\320\277\334=1\021\200<\003N\272\275&f\343=\350\211\220\275k\220-<\356R\275=kL&=\234\007\344\274*7\335\275%1\274=\002\362\303=Q\2554<]\026\317;\n\333\345<w\302\203\274\014\212\211;|\004\000>Ia\341\275\245\216\377\275g\036\371\274\003x\275=4\236\006=\177\213\364\2758\251y\275\275\n\372\275:?\"=\367\357\236<\351\333\246\275Gu><x\016\233\275\327\231\303\275\340\261i\275\360\214X=|X\271<Y#\237=~E\253\275W\234\036\2754\235\227=A\253[=a\351\275=\335\270O=O\310\301;E\332G=\302\364\276=\241\237\206=\350\367\252\274\007\200\243=\321C\311\275\362\005\267<\351\020\010\275\374\2742<XKm=O\243;\275\007\213\302=\032\000\247=\261J|\275\335\003\017\2749&s\275/\225\222=I\207\004>&7\276\274\363;\255<\334\004\257=/p\366<\276]\352\273f\362!\272\323\302\205=]n\227<q\272\332\275\270\002\001\276<\312W;\300\342\313\275X\256\242=A\260\301=u\n\017=\255z\215=?\214}<\016[\346=\317\266\330;I\r\320=\344\000P=\213\312\307=a\343\273:\300p\273<\210\274\327=\37166\274\263\360\200\275=\023\352\275\217\326\332\275k/\212=c\375^=H\367\263\275\262\312\345\272\226\363\333\275\323\241\026=\020_\343=\360}\010=x\005\005=\005\327\237=\005\303\270=I;A=||\267\275\004\214\300\273\030<\217=\272\222\200=\364-\266<\006\235\376=g\347\320=\236\242\331\275\277l\243\274\002\312\245\275\327G\317\275Pw/\275p[M\273H\306S\275\333\274\322\274?\"\202=-\354\375<\207\364\353=\304\242\334=K:\205\274\025\300\301=c\207\316\275\262\235t=\230\204\314\275\336\343\223<\"\214@\275\033Fz=j\302i<>\030\276\275/\206\004\276\t%D=\227=\353=\035_\351=7\242\314\274!D\243\275\2664\274=\352T\242\275\361\007\205\275\0222\272=\274\234\355<\206\206\356=7\r\333\275$_\022<\341\226\031\275\177$\277\275\203\216\361=S\333\216\274\203\002\234\274\320\002\016\275\266B\214\275\360\340\356\275U\342\220=jp\001>(\r\264\275aFB\273\337|\033<\324\306\263\275\307\262\026\275Ej\027=S@\251;j\300\001\275\010\373{=r\270\304;\013\037\273\275+\234X=\001\242\235\275\201\333\305\274(s\264\275yb\315\275\234\017!=\n\025\010=\310e\330=!\370{\274m\335\264=\2327\277=\366{.=\271\017\260=Y\362;\275q\264\321\273\001\001\276\275Os\324=\030GL:M\273\022\273\234\345[=\r=\333=aQ\276\275\035T\244<b\\\237\272P\020*=]\210\373\274\331\257\t\274\253\014\304\275\3140\343=\265\2268\274\253\036\000\276:\260\275=\375\223\346=i\177;=E\367m:\352\002\002>\341\246\033\274\367\225\003\276\225\270\002\276\235\203\212\275u\304\370=LPq\275f\276\240\275\271\021#\275a\231&<\256\t\250\275\344\243\247<\377\304\310=qv\331\275\363h\325={\223\334=Tw\317\275\345\t\276\275\354/N=7\220\361=\304L\004>\021{\327\275\263\375\000\276\216,\324\275CY\356=_R\242\275\307>\310\275W\260\014=\"\2574\2743\"@\275\n\034b\275\310\372\002=k\005\225\273\027\363\322<dF\341\275\023\035\224=\334P\256\275\324bF=2\001\"=\001 \245\275\256\034\335=\227\014\223=\363\265\341<\234H\356<|9H<\377%\305\275\374\3420<V\323\272\275\314#\253\275\240\222\352\274\027\032\343\275)\332q\273\004\026M=o0x=\013)==\025up<\364\324\325<\033\021\306\275\271\024\020=\331]\275\274\377Q}=\203:\032=o\020\345\275\270\262v=\315Y`\275s\226\237\275\362\030\242;\366Bs\275\037\030U\275)\276\204\275m\302\325=\312\313\000=\021\216\372;?\362\021=WZ\020=\227TU\2752\037\212;`\234\341=\344\254\005\275\203\337!<$\'\264\275\312\200\375\273\210\265|=u\367\372\274pr\210\275\324]\330\275I\177\355\275\371J\315= \310\214=U\315(\274\307\235\302\272\203O\000\276$\225\304=\242K\305=\220`\243\275\213\217H\275\204\177+\275\356\360\303=\202K\336\275\341\200\027;z\273\355=K\333\330=\371\215\014\274\366\247\002>\243m\224\275\016\270\026=\270\2205=\365+\212<>\262\026\275\345N2\275\205#\351<\212\242\334=3\226\256\275\220\362\373<u7\354=\034\223\346=YV\201\274\0039\004=\352\350I\275+s\231\275\361c\361:@\232\036\275\002\217\211\275\371\377\233\275\317\337\000>\371}\034;\035*a=F\204t\273\270\233\305\275\255)\205\273\355\204\340\274x\036\351\275\357\273#=\2469\217=\262\020\005>\0225\320\274\306\342\211=`\010\267\2744\274\334\275\212\023\206=\254\021\345=\340\312m=$\224\321\275\354}\252=\362li<\253\332\365==\360\247\275\037\024\326=\326\257\203=4\227\360\275\360\245\306\275\n\300\227=\305=\362\2758.\244\273X\253L=\014\364\373=\343\373\310=\002\354\342=\026\313\334\274\003A\317<!\345\344\274w1\031=\203Y6<C\035\322\275\007\031\336<\204gj\275r\025\236\273\313c\356\274\223K\251=\342rJ\275\366\323=\273!\250G\275\024G\331<\032\272\356=#\277\200\274\200\347\207\275>\376\335=\350\022\344=\212\230\261\275\267\204\303=\354\233\332=$\272\213<W?\000=\266\347\000\275\310\031$\275\276E\375=\200W \275\316z\271\275\343\234\024;Y[\267\2753\362\265=\260RX\275\024\305\353\273\2313\257<\351\202W\275\246t\372=\270\272\310=\336.\254\275~\230\313\273\367\025\207=\271\251I\274j\361\344;\324\251\274\275\372G\003\276E\212\372=RR\324\275d\221\023\275\314\017e\273\335\372\370\274\327\257\222\273\206\rW\275!\215\035\273\2630\376\275hg\250<\357H\375=\367f\357=LZ\312<\310M\022<x.\021\275\017\032\007\275\353\302\303\275\327\321\242\275\2259\006\275j\332\000\276\211\'{=S\223\223\275\260H\232\275J \266\274\030\021\352\275\212[\352=\305\226\262\275\026e\004\276\267\363\006\275v\234\213\275=\025\270=\326\032\273=F\024c<\363\371\266\274B\242\352\275-o\271\275~2\333=\353p\311\275\246qi=u\363\005=\334\271\373\275`^H<\275\376\242\274(G\312=\257\014%<\037\305\247=\\Y\376\275T\303\020=l\004\307\275e_\246=\222\214\335=\327\031\245\270\004\'t=~\377\324=\327\251\313</B\003\276b\250\002>\341\276\373\275\256\305\200=\376\"\253=\264\013\252=\372\310B\272\311\267\360<s\226\001\276\023\245\r<\327S\202\274^\346\265\275K\367\234=M\325\244:\315\032\300\275A\003u=\201M\364\274\320\300\004\2762!\343=vX\262\275Wr\036=\2423\233:_w\201=6!\265\275\213\305\233<GC\316\275\226\010\245\275;\277\313<\347\325&=\202n\317<\276\223\311\275\246!\324=\335\022\005\275\347\356\325=:\331\001>~P\262\275\331\037\300=V\233E\275\254G\260\274(\274\004\273\206\203\352\274\000K\276\275\261:\244=\235\2334=+\177\000\275\376d\026<@\350Y=\027,V=,\271\332\275.\302I\275Q-\367\275\336Gm\275|E\265=<\362\231=0i\235<\212\371\342<`\025\304\275\023\346\354=/\007\234\274VL\230\275${\276\275\036\005\253=*p\331=\322K\376=\023N\237\274\322=\026\275\342\240n;\301\271m\275e\276\334<J\206\314\273\334\243n=J\310\271<%l\221\275CAM=$\311\374\273\034\240\227\275S\243\243=9\342\004>c)\317\275\t\376\335\273s\034\374=nR\204=\317\270\031<\305\225\212;[\3273\275\\u\342\275\034\037\302<\347\236\306\2751\007Z<#\314\316:\367u\330=\323W\210\275\006\016\341\274L\027\354=\364n\320\274\026\264\371<\014,\n=J\331t=\332\004\215=-0\346\274~\306\320\275F} \275\263\362Z\275\031c\003\276,Z\210=\213\322\301=\302\331\350\275\035\371\250=\004\262\254=\204\'\311\274\260\035\215=i\310\207=v\303\370=iw\237\275\251\244\323\275\251\314\263\275\0160^=\351w\244=\351\214\021\273\354\276\367\275\267\354\002<q\003\203=\360P\333\274sa\355\2752\351G\275\312\252\353=A\231\225\275\220\345\331\275\317\030\376=\242M\347\275\277\202\254\275\353\371\264=\312\317t\275\271\032\200\275P\264,=\3541\246=*\354\373\275\021\330\321=\311\'u\275\314y\264=\322\344w\272\036,\237\275\214$ ;kK\370\275\256\310\313\273\203\371F<&$\216\275\226\030.=-?=\275\200\341M=\253\256\336=\323\324\313<9u\226\275 \224@\275\304\313\005=\256@@=\377\312\003\276#\317\356=kC?\275e8\223\274LM\010=\236\327\020=~U\002\276\300\234\366\275f\337\317<\013\355\256=\274F\005\275\252\006\377=\'q\031\275\3146}=\020]\302<W\217`=\211\206\267\275HE\232=V~\261\275\346?\346\274\305\334i<\254\200\312<\266\322\272=\035_.\275<\246\202=\204\246l=\010\241\244\275K#\373\275\237\006#\275\347\236\374<t\372\223\275O\355\304=A+\321\275\200Vn<\311\347\274=hA\364\275M\311\351=\2101\205;[\347\362=\253\345d=\200\241\000\275\306\002m\275\373\255\351=\347\002\325=\206\022\255=t\216\342\275\202v\307\275^\354\303\275\355\006\373\273\355\037C\275\227\036 \275\333\242E=S\325\314\275\005\227|=}\201w=?w_=\357\2144\2757\006\301<+u\033\275\302\310l\2745\372\021;;u\334=I\201\347\272\230\371\221\275A\272\316\275,E\"\275\3408\257\275\275\"\\\274\355}\221\275;=\375=\023\350\237\275\247{\002\275$\352 =\026\245\215<\324\237\325=\006\n\000>\346i\306=\002P\253=t\n\343\275\322\305G=i4\031=\232\353\245=\302\255\301=\320\367\030\275\274\265\000>pL\261\275\0054\200=]z\305\274\035C =\2310\340=\220\004\212\274\325.\251<\311|\237=\207\303\t\273\242\215H\275\227\203\353\275r1Q\275\276\006G\274$X\215<<\201\034=Uw\235\274\226G\235=m\325\001\275\217\030\316\274\025\365K\275j\232\336:\246\263\264\275\204e\264\274a)\310=\005\271\"=\001\345\321\275\220\267\027=\260\263\360=\262$\357\274l?\315\275\331\377\030\275NJ\221=\344\r\252<\336\346Y=\302\213\273=\361\363\300\275BS\265=\363\\\276\275^`z\2756-\205=\222\353y\275\360\214-\275\260e\342\274&d\227\275\346A\316\275%\210D=~HE\275\340\373w\271\221_}=\3024\024\275o\016U\275i\245\004=G|\324\2756/\231=_#\327=\374\240\306<\001\'E\273\"\005g=\016\225\302=#y\016\275\316\030\362\274\202\230i\274*\234\027=-%\001\276\254\272K\274\246\344H\275\260\356m=\001\021o\275\260\215\026=\007\323N\275Nt\366=Y\275\267\274lZ\364=l5E=\256L\351\275\300r\242\274\220\214\322\273\367k\372\275\004\307\202\275\204\006\227=\273\345H\275d8\370\275\021\252\321\275A\354Y=\032c\255=*@\373;\324\347\250=P\027\346\2755\034\333\2731\306\363\275\035\323\355\2750 2\275\211\026\361\275\002n^<\355M\212\275\304x\002>\027>\345=w\262\207\274Dl\210\275\027\275S=A+:=o\004\336\274\271\\\335\275\363\331\253=\223\314\r\275\200\356\243\274\326\272\020=\302\233X\275\303\n\313\275B\315\344=\227L\224\275u\257V\275+\020\203\274\'L\237=A\315\036=F\275*=\230\302\227\274E\344\244=H+_=*\023\206;\212.\260;LX\340\275r;\236\274\2002\253<\215\320\317\274\213\026\200=\200(s\275\245 \031\274J\262\024=\202N\002>\363\237\240=\212\324:;My\307<HFr\274\330\277|\274\351\2477\273\367a\245=\035 \254=\247\n\353\275\023~\261\275\226\354\002\276\3246\027\275\240\274\301=\262\223\304\275{\371\325\274\3746\220\273\016\203\002>\021\321T=d\310\353=\305\302u=\240B\334=\353\034m\275\256?\235\275r\036\003\276!\202\256\275\014y\204=\370\213v\275\325\020\304\275bi\211\275\312\010n=\277A\230\275R(\233\2751(\240\275\t<K=\221\274\022=\2300\331=>\322\201\2758\364\367\275\026\357\322\275:1\362;\022va\275\023\233\255\275\010\342\344\275&\037\216\275\337D\352\2741\210~\275/\357\226=#\001U\275aH\017<Y\217\317\275\305\001\323=\365\374\250=\361\205:=8M\371\275?\306\312\274\303d\260\275~\004\265=\".\241\274y\017\272=I\234\322\274\261u\316=Rg\235=#\273\331=\341\260\006<\324\213\313\275#\302\330=jP\200\275ZZ7=\351\327\215=\020\357\325=Zw\031=\243\206\226\275x\010\371=\274k\267=\223\243\340\274\\\014\313\275\230\350\214\275.\371\327\275?U\376=\356)}\275\2302\376=sP\225=\227_\364=+!L=\274\251\212\275\244\344B=\274\363\227\275XY\247\275\3669\217\275\r\t\364\275\271_\264\275\351(\212=\324;M\275\252\272\350\274\035W9\275\330\326\203=P/\224\274q\360\333=\226r\253\275\337\364\363<Cs\214=\367\237\264\275>\024\345=o\215\035\275\377~z\275\324P\231=\357\276\270\274\036Y\235\272\3662\322\274\034G\343=b\341\312;\027f\247\271\250\347\360=\212\275\201=Y\263\207\274\007\002\217=\260\354\001>\334\362\216\275\202\216\273=\345\370\301=\n\270r\275lj9\275\254\223\246=>\255\263\273\300y\321<.\334\201=}r\001\276\">\347\275V\333\000=\362\\\263\275\227P\253\275\263\372#:\0061\005\274<\231\001\275\342.\326\274\224\313\007<\"\317\021\275y:\256\275\231\251\236\275?DL=z\314\227=sra\2752\315\033<^\376\330\274%.-\275\262\202\241=\355\313\255\275z\207\274\274\007\370\037\274\233\027\254=\250\245<=l6%=\024+,\275\017t\301<E\2764\273<\252\025=b\347\210\274\300\242\003\276\3529x=\002\371i=\3056\316=\375\213\216=6\352\247\274\375\245\214=g\020\341=\303\355\357=y\240S<?\227\373\275n\025\321\275\216P\267\2740d\003>\003\002\312=h\312\257=\273\023\\\275`\n\"\275\022\256\354\275\244C\347\275\016t\315=\213a\362=#\356\343\275p\307\232\275\265n\366=2r\037\2757\\\000\276\207\366\375=\377\177g8\035\032\244<\000\300\302\273W\221\344\275\307Xp\275\260E#=\371\212\356\275\374\252\305<\255\025\223=v\201\316<\033\336\002>\224!\307\275\224\220\347<\256\376\006\275P\210j\275\371Q\265<a\214\273\274\332-\332<\365\024\220=Z\005\203=\006\026\242=\335S\325=$?\013\275.\265p=\332\304\266\275zRi=>\270\350<(\251\346=Ww\363=\000\210\034\275\"\254\222\275#\365\275\275?\356\366=\361\276\225=\014g\316\275\307\376\274\275\213\022<\275\327\266\340\2754\035\307\273\226n\234=\253L\212=\025\344\306=\034R\231=\272Q\270\274\370\222\007\275\314F\357=\212Y\266=\262{\272\275\2017\302=p6\004\275\234O\353\275\261M\031\274\321\333\314\275\205\025\315=\337\r\331\275k\241K\274:r\375\275\273\310\332=\017\306G=\274N\302=\274B\023\275is\336=\203\033\266<\262\204\372\275\357\342[\275\206BH\274\325\241\223\273\262Cv<\370\002\320\275\025W\250<\371$5=\037\330D=\3046\343\275n#\215\275\252E(=\365\307\375\275\222k\220\275\\[\352=d\001\001\274\272\265\013\275\005\371\001>\271\235\006=\321\344\224\274\003\'Q=\347\273\251\275\213\215\211\275\240vO\274\005\216\352=>a\365\275\326\016Q\275#\030\003>\306vc=\342\274\216=\244\210\217= \204\246=OQ\220\275\327\374\263\275\351\275\263\275\022\266\362<$\200\025=\211\365\257=\223\010\274\275\003\026\377\275\224X\215\275\004a\323={\032\000>c\"\000\276\032\316n=\373\276\r:\311?\017=\303\241\003>\257\021\266=\331\023=\275\341+\310=\272\374\231;\006\036\325\2751\262`=B<\332=\300p\316=\221z\250\274\\\323\205=\332\225r\274b\020K\274\262\257\031\275\001^\263\2745\351\221\275\344\345\254\275\251Me=\275\034\211<\353\035\260\274\331\302\236=+\346\312\275\251\343N\275\335A\002>\253+\276=X\034\002>\227\325\214\274sU\346=\351&\362=\322\211\333\275\372\375\313\275\356\245K=a>R\274\020;)=2\314\000=U\025\206\275h\356\021<k0\345=/\331i\275\244\010\331;\025v\201\274}\247\360<\003\203\361<m\260M\275\204\234\211=<L\204=\0014\355=\261\264\002\276\236\020\355<\214\247\262=O\370\205\275\260\213S\274tG~\275\026\007\t\275\0146?=a>\235\274$&~\275\032\347\205\274\363=\364=\373\356\272<\212=\034\275\r]%=9\277g\273\251\367/\275_1\345=t1N=9\311\031\275!\342\215\275\233\321\256\273o\025\242\274\021\242\201\275\326\000\261=\021\335\222\275\352\t\372=#;!\273\322\177\362\274M5\312\274\242]\345=Qm\260\275\177\301\241\273db\205\274\305cT<s\265*=\337\252q\275s\255\376=\017\236\246=\224\\\177=m\272\304=B\376\037\275\311\310\245=\026i\332=\027\276\231\274\226O\353\275\241?A\275\021 \216\275m\354\216\275<\340\010=\025@\235=:Y\352\274\362\247P\275\237M\272\275@\256\372<\035\t\316\272s\013l=\203/\312<\372\2321=\343q\377\274]E\026\275|Y\244=\335\252\266=\256\375\364\275T\017\261=\353\233\013\275.\306\273\274\022\340Y\274o$!=k@\350<\372\277\245=\032N\310=\215Z\033=1\317\323\275|\220\214\275\342\021\355=K\245\317<\302\222?\275@)\277=m\210\204;\217\376\002>\256\360\346\275\343\017\354;\243\334<\275\027,\241\275\022\335\243\274<\023r=\350\347\241\275\267\2329=u\017\276=\320?\214\275C\232\215\275\350\312\245<?\354\313\275r~R<Nh\353\275jJ_\273rn^=\344\227\014=\251*\212\275D\232{=\377]\321\275_M\254\273\226\361\005=\321\241>=\270s\257=\221x\000>$\201\255<\001}\337<];\261\275\003C:\275\204|\247\275\036~\365\274}\365\210\275$\016\365\275\"\212\306=fI=<\216\356\370\275*\234\205\274\334\336\001>\235\005\337\273\032\245e=\013~\233\275-\335Z<\2454\243\275a3#\275\223\275\220<\360\341\355\274DM\220=\273r\356=\312\255\200=\342S\007\275m!\305<\343\003}<\324n\313\274\206cZ<H\241\004\276Y\364\342=\241\230 <\272\277\000>n\257\273\274u\331p=\024\271\345=\322#\325\275\0075\337<\271\224\207<K)z=\246\363\223\275\201\000$\275\316\326\266<\251\2203=\201\024\250;\376\231\344\275`g|=\245\275\276\275\233\307\\=\203\224\003\276y\t\033\275\014\336\343\274b\226q<\242)H\275_u\215\275\241\"\372\275/!\315\275?\303\324\274\342\322\206\275\003(\264=\r\241\341=\0149\314=\022E\370\275\265\263\353=J\363\224\275\275\032\321=\224We=\331\212\236\274.\330S=&80=L\324\217=`}\261=7|\230\274\006\315\003>H\344\004=:5`=T\301\226<\224p\237\275\316\367\307<V,W\274\re\277\275}\327\217=\240u\232\275\'\242\365<\225\332\360<u\342 \275a\235\211\275\323\251\264\275\013\341\300=\253Q\000=\224\035\314<\302\226\346\275\256\350\310\275\277\234\306\2759\317\206\275Pv\351=E\351\355=\362 \020\274\376\215\375\275~\323\306=@Y\351\274\347U\315\275\376)\251\275n\301\374<\206hJ=\276\377l\275\'H\246\275\202\255\323\275L\006\304\275\241\000t=\207\260\313=\256\264\304\275\n\322P<\317x\370=\177\033Q\275\355]\201=\033\354\'\275\237\302\210\275\372\317\276=\313R\304<\217&\362\275\334T\261\275\315\n\306\275}\310\017\275\240\024s<6\024\370\275=\336\226=H,&=\307=\377=k\327\327\275&A\300\275\305\\\216\273#\272\376=\261\266\344\275\024\313h;t\006\353=if\305\275\301\265x;\216\020\311=\n\264r\274\310_\321=#;\371=9o\255=\225\223\010=\036s\232\272\222\354\240=8\220\325\275\244\231\265\275N\002\307=4~\274<S\354c=\3750{\275\202R\313\275\301\360\340\274\034\202\315\275\250\202?\274\023ta=\324Z\221<\007u\277\274\245\220.\275\010\310\350\275\223e==\237\275\010\275\226\205\013\274\027\251\257=i\035\016=\217\240!\275\257\010\344\275\030\017K=\233,\002>\377q\241=\021\321\001=\017\314K\275\337\256\356\275\265\\\377=?xw\275R\252.\275\306+T\275\2171\317\275nk\367=\010a\256\275~w\304\274\005+F\275\355\027\274\275\263\034\310\275\002j\334=S\354\022=-+\256\275\245\250\273\2755f\246\275\340$w<y\212u\275T\244\352=\321\214\332=\312\243\312=\266\221\214= >j\275\260I\314\275\246\207\216\275zo\253\275\335R\277\275\031\216\314:\301\254\263=\250\335\236=w\222)\275y\311\244=\370\315h\275\257\237\364\274\233\344\000\276 \247\245=\215Q\236\275\266\004\242=\252)\301=|r\265\274k \203<\335\301.=q\202\213=\037Y\374<\031\337\233<\037o\261\275+\006\230=T\001\010\273v\350d=\033\347\311\275\261o\362<\213s\016\275a\213\242<\206)X\275\271:\353\275\264\014\375:\021r\004\2743\375R=\372\325\301\275\214\211\345<\200\244\332\274W_ \275\210#e\2751\210\t=\256GB=\305]\223\275\332\355\307\274\213\334\022\275\321h\240\273\264\013\000>vK\031=\342>\223\275\277,\305=\351\200\310\275\023L\257\275 \340\006=\332\332\303=s\250\221=\373an<\341\250q=tM;\275\205\243\220\275\021\241\275\274jA\013=\267\242\314\275\021m\314<\244\'E=?\322\227=r\244J\275\244\212\221=49B\275/\306\311\275\222\033\001=\030\216\375=(N\245\275\364<f<\202\020\305\275q\267\037\272=?\215=\307\211\333\275\337P\306=\240\010\331\274\306\215\007\273&\036\237\275\375\362\002\276\347\342p=v\033\317\272\261q\003>e6\205\274\201\272|=QTB\275\225\321\207\275\312\200\224=\212\'g\275\245o\306<\323\312\227<\336\347\266\275\231\266\274=\321]\266\275[.\301\275xP$\274f\240\360=@o\001\276V\234\343\275\266\314\343\275\333\232\216=s\221\301<h\326!\274\305\303\357\272~\373d\275J\335s\275\2052\310\275R\300\325\275\256\302p\274\250\203\253=\224\215\252=\221\021\261;\245Am\2758\355\207=W\257\002>\025_\344\275\253/\267\273\361?\335=ptb\275fm\205\27598\341=E\321\230\274\321Oe\275s\022:\275\360\251\344<a\306!\275\307U/\272r\327\332\275y<N=\331\275\302=^V\357=)\215\014\2759 \231\274r\021\246<M/f\275\312\210\001>\243?\\;\330\004\300=\311<_\275,\026\334=\016\200d\275\001\010\240\274p#\222=\247x\377=\241pO=\364\276\234\275D\000\211=?c\203=\177\005\227=\331O\004\276s\245\341=\205\204\234=\010\226v\275\376\251u;\245\3573=\006O\266=\375=\221\275?\354\314\275\250\313\373=\356\336q=\3210\202\275(\267\375\275\021\377\307=J\236X=\354\337h=\nJw<0F\"\275\225\354\003>zo\322=pl\271=\356)\346=\241[b\275\343\245\375=\272\226\245=\234\203L=\013\364L\274\265\241\311\274\213\322\345\2755\326\372;\031\005\r\274\261Q\302=\027\207\326=\375\304\254\275\231\330\370\275Ij\314\275V^\334=S\357\223<\'\032\003\276\240c\002>\2535D;\211\265P=\357\317\346<\013\021\245\275\021]*=A\346\373\274\355\020l=aN\336=\337\206\252=,l\030<J\317\340\275\326\266\330=\022\t\343\273e\316\363\275\251\262\352=\355\341\010\275U\310\313\275\212$\255=Z\325\353=\201\222\013;\321\022\326=\351\356m<\267\367\365;!:\323<\350\377\231=u\267h\275\3406\274=e\301\235\275^^\277\275\312\352\372\275\260\311\300=W\201\215=\303\342\307=6\232\263\273\276\rJ=\311\236\243\275\343\235\327\275\361a\203\275\013\034\342=N\240\212\275B\222\325\275\344h\347\275\340sq=<O\376\275\237\223\206=\216\225@<\221*\337\275\361f\276\274\262\036\274\275Y\276\260<\0335\312\274\332\244\223\275;\320\241=\000\201o=\336\274\330=\023\311(\275\337z\272\275s\027\340=bt\003\276m\337\272=\006I\332\275\021\257\371=p\205;=\342\004i\274\025\372\212=\241\006\225\275\216Au=\027o\333\275_\323\232= \245\323\273\257\341a\275\306=\242<v\210V=\247+\203=\257\024W\275\245}\214\275\'!7=\365\204\207=9\376\001>\006\365.=n\304\354=\340\246]\275\317\340\002\276\371\322\220=0A\370;T\202\024\275*\362\254=\360\377\253\275w;\312\275\014\222\224=\300\240\006=Oi\212\275\020\304\200=5\205\271\275\212>\247\275H\322\376\275M2R=\314&\326\275\310\324\304=\303\221\370=\324\347\265=\365C\002\276\324\336\304=f`\274=x\377\261=a\344o\275yi\207\274\365K.=\207\254L\275\272\350\305\275\034\343E\273j\364{\275\255J\205\274 c\355=\324y\261\272\225\356\253\274\351x\241=nWF=\317\001d\275_D\206=j\2202=\217\305\234<\270\346\367=\250#\267<\304j\226=\357\230h<\036\"\r\275\274z\375\272\242\316\212\275\004\231\177<x\236\314\271\311}B\275$\0306\275\337/l<\241\034\212=\t:\303<\370\252\202=\017\331M\275\347\023\304=\243\027t\275\351\304`=\370\267^=t\302\220=\240\323\241=C\267\000\276q\2259<\224\223\362=D\271\357=\325\364\362=\331\253\200\275o\206\324\275\340\317x=\227\301\200\275\311\261\300<r\252l=C\177\001\276\177\202p==;\246\275\336X\001>\2663\375=\301C\303\275?\033\255=Z\370\255=%\245\270=/\023\265=\n\334\235=\341\312\r\275\341L\323=\030s\t=S\371\027=lq*\275\\84\275&m\365\274Q\260\024\274\030\255\242\275\3553\266=\356\334\357\275\0301\r<\027Z\320\275\325\376j\275aF\327<\014V\260\274!\242\204=\342\256\370<\222\366\254=\3607\347\272sp\357\275\213\246@\275\351<4\274\353\376\201\275\206T\262=\216\'\357=\221\035\365\275\217\026\253\275\217G\357=\306\242\345\275)\306\002>\021&k=\332\001\215\275\313\366\003>\333\357\345\275\251\373\005\275\366y\330\275\213>-\275\301Z\225\275\231\000\233\274\210\241\372\275J\243\026\275\377>\003>\235q\274\275N\210\320<\362\034\363\275Cg\236=k\343\003>\000\372\276\275\010\323\212\275\217\211\300=\300j[;\024C\204\275\211\276\025=\212\313V\275\261^\334\275\221\322\327<\206b\212=\021h\344=\255\200*<f\326V\274\036\233N\275\254\024\222=l\006\\=O\030\"=D\025\303\275\336d\000>\271\1778\275\033\275\353\275!\266\312\275\024\357\336\275J\225A=\225\367\224=\342Zy=3x\223\275\230?\301;\211j\233\275\331K\032\275#\240*=\316K\232<\217i\030=\361\221\371=?\005\003=\362\337\235=jx\243\275rp\016=\215\335Q\274\006?\245=l~\002\276{1\203\275:\333\354\275\365\355\203\274T\265\306=\272J\324<\210\315`\275\354\235\314\275\026\313\210=\037\253\000\276\350\213\232\275w\246N\274\342\275\346;\242\n\344\275qs\206\274T\177\262\275\244\203\211;6S\274\275\031\'3\275O}\007\274[\312\363<l\266\340=\223\315\272\275\316\367\300<\323T\272=n\023\000>\332\313\001=\255\344\036\275y\345\204=\336|\274\275\321\220\270=\3523\340=\270\227\367\274\037\300\317=\000g\320=X\007\361==#\250=\351\237 \275~\334\274\274\036\367\333\274\342\351\217=o \274\275\341P\266=\222L\250\272\277\246s=\353\243]<}\233\331\275\026\271\220\274\200\233\205=\034y\334\275\217AO\275\253\237\030;\251\344\207\273\034\242\252=e\036\224=3\304s\275q\026<=\205\205\362\275I\310S\275\261[\\<\000#\241\275\2322\221\275\346\010\306\275k\353\003\276[\321\020\275\032\"\216\275\030\326_=\035\240&\275\t\363\201=\374\316\317<\307Pq\275\353\232!\275\245\244*\275\216\213(\275\224\367s\273S\243\374=~q\236\273\262N\204=5\245\314=\220\317`\275\035\230k\275\211p\350=\315\013\252\275\307(\033<\027\304_=i\331>={q\224\2758 \300\275\340Y\312=\367\374\203=\2452\313\275\215\303\033=l\356\236\2750\376\037\275AY\240\275\376M\234\274\352\025\247=#_\306\275s}\001>\256\320\001\276\353m#\274i\237\310\275\345Z\260<\261y\325<!\207;\274\222Gr<\202\264\206=\2502\234=6\030P=t\007\005<o\200\211=hJ#<H\273\033=\365\262\306=3\023\271=\242$\225=^h\313\274\307\270 \275\r\216\362=\314U\321=\361l\321\273\252\023i=\206\363k\274\340\245\302\275p\317\021=\362\224\361\275\237\272\325\275U\3167<\264vc\275\321\306\237=\031z\004\276\350i\020=5\250\207<\023\202\366\275\304\2236<\333\322_=\035\211\003>\216\354\207\275y\tH<\361Yy=t\357\224=~\315\306=\020\302Z\275\346F\352\275\240s2\275a\340\362=\215nZ8\306U$\275\271\374\272=W\357!=\262\223\261\275\232H\325\275\320\227\004\276\036 \362=\346\r\003\276\274\003\377=\245\372\206\274\276\270\252\274-Y \274\0070\331\275\036\003\203=\205a\310=\346\350\203\275\177s\250\275\255\017E\274\265\224\303=\036\022\302=\274\264\270\275\257]\267\274\252\326\003\276\004\233r\275\217\357\246=~z3=\272\215\361\275U>T\275nv\321\274\234\023\036\275\276\303\275\275~\252B<\353\375\374=\231z\214\275\255\000\341\275\323{\365=9\367\214\275C6\177<\335Y\222=\027g\377=\313I\214=\025_\374\275\311i\264=;\0266\274\376\004\370\275P_\214=/\026\342=e\024\001\275\241x\345\275\213\230\223\275\200\273l\275\303q\375\275\257\200\023=\244a\267=\245\204\262=\213Zo\275M\003\254<\255\177\253=\370\300\365\275`\271\206:\364\261\210=7\337\307=\347X\033\275\344\033V=\211+\321=r\302\313=\367\023\313\274\331\264H;\t\262(\274\032\033\365\275L\226\004\274\311E\222=\356#\223\275\021U\320\275\235\253\377\275LX\323=9\352\311\275^S\216\275z5\341\275\001\246\331\275\244Q\224=\275\357\026\274\242\336j\275\034w\346=\217&\225\275\330\221\375=lB\022\275\275[\313=\031\221\231=;8\026=\2252\234=Aai;\241L\346\275\010\221j=\265\334Q=\354\267\203=^\357\361<{H#\275\341\341\330\274\264m\310=\366\232\344=Q\217,\275\214\244I;\352\316\334\275k\306\261={>\324=\r\331j=\340\2335\275\372&l=\277\r\333\275\322\006\341=\356\026{\2746\250\247\275\366\245\262<\332\245\220=\027\343\013=}\020\272\275\302\004\231=\264:\341\2754\217\320=k\246\361= \024L=\030i\302\275\222g\261\275P\364>\275\362\375\215\275\312)\251=\002\365\326=\236\ro\274U\241\235=I1-\275G\027\272=\270`\262\273OW*=A\014\203\275\253\363\361\275-\367\205\274\n\n\261\275\006\353(\275\177T\326\275\324~G\275\313J3<!^\022\275I\330\356;\212)\200\275\206\027y=\201\203\202=\250\344 \275\366\322\003<\374\367\003>T\023\363;\212\333-=7\271Q=\372\006\321\2740\245\265<P\215g\275\360^5=\\L\211<\233\"\273=\334\242\000>\010\351\232<\'\245\0019Rb\276\273\016\255W=kg\021\274\177\264\201\273-\213~=\367\317\317=\231\371\277\275\367b\177<\023\221\305\275\031.\347<\227\246\232\2757\277\273=\256h<=\314\376\364=-\205\202\275\232\203\306=T\266\267=\210\366\256<,C\314=*\001P\273\312\356\337=;\216\212<\025\332\363\275q \303\274\274\317H;\020H\361\275\000T\372\275?G\237\275\2247\265\275\203\017\224\273#C\377<V\230\336\275j\000R;\3233\223\275\375Z\361\274~\211\214\275\326\324\350=K\023\240=\\:x\274\274lE\275\"\366\210=\000\356\001>\"M\003\276\367S\314=\\\217\230=5`3=\"\n\313\275\r\373\274\275\214\364\033=\231\027\024\275\010\226\342=\266\224P\275\201\327\213=<\262\245\275\2764\330<\270e\014\275\261\340\250<\332\226\310\275\221 \210\275\330\025\275=&\256\027\272\340\007\252\275\350\251 =\241C\300=9\372\311\275\2539\316<zE\337=\342\211\323\275v\2523\275\360\254\300\273PB\337\274\275\005\237\274kQ\320=\207\230\252=y\262\213\274\225\276\202\274\210%K\275\245\017\355\275\002l\244=\005\323\242=mK\337\275\267\003\272\2734X\271=\210A\251\275d\337,\274J\026\264\2752\340\273\275\274\365\212\275\354@\322=\2437\235\274]\037\276\275\001\242\312=\326\321\350\275{\031:\275\312Lc=*\207a=\350\235\372=;\313l=\020\004\r;\n\235\217<\214\271\006\274\225\030\354=\213N\357\273Z\314\233\275\217N\034=+\367S=\027\010\366\274b\301\037=r\254\371\2753E\233\275\210\345\225\275\203<y=\333-`;\021\035\002\275P\267\303\275\'\360\217\275(\250!\275\370\003\346\275\021\312\332\275\225\320\354=\265\006\225;\366\312\335=1\027\360=\336\242\232<\274]\300\275\273G\271\275\225\233\265=ecN=&f\336\275vG\347:\306\007\242\275,\242\375\275b\216\t\274\220\326\351:\2601\000>\177N\003\275V\273\033=h\324\262=\217\215?\275\001B\235=\300\233F\275a\275\370\275\277*\240<\336we<\017\234\364=\243+\334=\251\'\263=\255\002\211=\304\226\234\275X|b\275h\252\363=\337\325l\275l\026%\273x\344\240<v\217F=\352d\323\275\356\353\266=T\374\"\275\3545\375\274\245)\301=fj\200\275\001\341\252\275\262\272\326<\031\363F<\275Y\222\272N`\247<\005\264\003>\217=G=H\224\334=\010\377\325\275\373\324P\2757\373\231\274\034\021\331\275\264:\375\275\261\022\225\275~\271\253=\230\235\251=;\006\337\275\035L\353\275:\350\362\274\364O\275= \004\247\275/\375?=e\333\314=\370 Z=r\000\000\276G\033\346=\371\213\177\275\237d\177=\375J\275=\231\235\222\274\240\234\201=\247G\213\274L\240\216\273\361\267\370=\340\r\334\275\013\177\237=\220?\211=^Z\327=\331\321\210<9\177$\275\014\377-<\274\nb\275\217o\350\275\264\270\212<$l\323\275\355e\363\275\231\244P<\334\035\217\274\356\220\277\275\035H\350=Q2j\275\000\273\345=J\204\346=\002\255\373=\272T?\275D~\255\275\277 X\2754\214\364=At\001>\330d\271=\305;\366=&\005\275\275\303`H=\302\321\362\275A\037\247=\343`\244\275\177\256\314<A7\243=\025U\233\275\373Ft\275\243\214\002\2756w\216\274\231\325\332\275\316\025\223\275$2O=@#\006=V\311\357=\345D%\275\336\322\262=-\230\331\275\226\026\357\275\275\214\023<\276\256\370=[\322\361=\230\022f=\027\235\333<\367e\001>s\252\230\275;\220\255\275\347\223\335\2748\177\004>h\350W;\314f\331=\23465=\3179\211\275\200\037\205\274B\006\000>\027\270\211<\332\n\344\274|\3755\275\317\'\357\275tf\301\274\320\232\023\275v\231\345=\225$\177\274b\207\356=\r\313-\275\211\210\311=J\024\310=\313)\014=\324\252q=-\"\261=\207\261>\2756\342\315=\005\255\274=z\355\216=S\247\270=p\345\313=n\257\350\275\241\002\205\273(\365\325\274P\250?\274\"\343\002\275\215pa\275!`\366\275/\264\020=,.\334;\206\373*\274\356My<\027\372\363=\223\177\010\275/6\\=*\241\301\275\337\333\033=F\3255<\037\253B\274\307\225\212=*\320M\2758\245\336=)e\210\275\236t\205\274o\335\263=q#\223=\230\220\277\275\210\021\215\274\344z\037<\371\033\254\275\252N\213=\325\356\214=f`\023\275.\306S\275s\317\264\275\211\357\361\275\377\236\321=\326\270\353=8\350\217\275m\233\345<\247\211n\275\307\367\271\275\312_\363\275\254\322\321<Z\251\001>T+\226\275\203\310\177<@d\343=\336\222e\275\366E\226\275R\331\365\275\314\375\302=9C\307<\223\374\204\274I\245K=]E,=Y\005\217\275jF\301\273<\375\206=\206c\320=\\z\003>8\323\303\274\347\374\342<pX\246=\031P\003<T4~=\232\266\355\275\036L\204\275\272\216\271<\000\302\017\275\275\340\251=\353X\017=K\036E=\036B\317\275\332\024\244\275\334\345\356=4\373\237=\203\234o\275!\224\223\275\263\006\257\275/\341S=\255\'5\275I\253\246\275\233\315\'=\0170\267<\002({=k\177\233\275\t2\337=y\265X\275M\303\234\275IV\343\275\200\221;\275(\363\020\273F\0367<\214w\222=I\030\230=\022\"\262\275\272\343\027\275\247\036C\274b\020\250\275\227\202\352\275;\377\376=?\312\311=\301n6=\226\344\014=\325\235\324\275\275mw<\306\225\327\274\037\032\347=\212\302\277<\303\333\310<\017\256\214\275S\014.\273\3112\205<\242oB\2751\356<;P?\313<\273j\254\275\225\206\352\275P\247\310=F\233\310\275^\027\214\275\230:\246=\234\273\273\275\\\361\352=\242\004a\274\026\306\202\275\267\226\004=\225:=\273\372\222\214\275(\335\367<0\327\260=l\272\236\275g\367\236\275\'v\321\275da\000\276\237 \307=;\247\277=Km\022=\270z\340\275s\202\367<\321\217B\275\350\276\020\274\306\316\314=\370\000j\2753\355\344<\343\032\375=\014\202r\274\351\260\275\274\236^\320=mz\001>8\377\016=b\356\246\274\347\231=\275\016\317E\275J?\345<Pr\267=_P\003=\346\r\025\275\274\017\004\276\210|\310<\346.\023\275\303\307\223\274]:\266\274\245\364B\273\365\215\251=\325+\213\274\3270\242\275\323g\367\274\261*\277=\254;\327\274\032\225\231;\031\215\321\275\370\357\000>H\034(=\177?\005=\207\365\253=\374\252\252\274<\231\026=\034\347\004=,\200~;\377\241\236;\2769\355\275-\245\021<\246\243-=\230h\221=T1\271\275\265 \322;R\352\304\275\356\024_\275\336&\271\273[\021\343\2751-n\275\233\"\202=\3053\257=\310\377\301=y\026\362\275)t\302=\336L;\274H\200\226\275\377K\331\275\327\276\351\275\177*F=\277\335\000=\317\323\301\274t\231\\\275\233\315\206\273\030\372\356=^.\354\275j%\232\275K\r\362\275o\010j\274\223\314\177;^\033\266\275e\204\247\275\365\036\030=m\265G\275y\332\016<\332\340\253;\037.\263<\250\221\270=8\210g\275F3\237\275%\332\243\275\331\265\355=\333\335\202=g\345l\275\216=\324\275\014(\214=l4\240\274\241K\322=\023\000\321=\305\214\255\274G\364\360=M\351\275\275\2504\t\275\333\300\251=.\346\234;\310\220L\275\235z-=\020>\367<\034\177\274\275\355O\347\275\371\257F=\177O\275<\"Z\317\275\250\177+\272[C\031<4\254]\275\277\3070\275\n\216\302<\201l\006=\347 A\275B\1770\275\215\016\243\274kk1\274\362[\000\276G\022\303\275`U\374=v4\275=h\247b\275?\347\003>\201\207\317=\024\372+=N}\355\275\\p$8\035\363\257\275T\005\342\275Zr\213\274\023\275\335\275\336ro\275\221}_=\3459D\275=\257\252\274\000p\315\275\217U\331\275\275\\\325=\243\365\354\274\331\002\001=[&\366==\222\032=\nBa=cY\251=\270\220\221\275\214\234n=\340\220\325=\334\300j<\276i\001\276\264\241\234\275\351\341\022=\373k\212\275&\305\242\275\335z\256\275\302\300\245\275(B\241=\\U\371\275o\231\357=\244\206\014=\377\364\202<\214\350#\2715\027\322=\031\n\370<O\036\242=Xze=6\017\005>\320\376\315\275\343\372\347\2757\332\352\275s\205\316\275Ce\323=\221\311;\274\031\306\233=\377A\310<\205U\326\273c\r\237\274C`\340\274\371\266\266\275\356\272-=\031\324\005\275j\231\231;\317{\377\275\362}\310=\036Cc\275\312\262~\275*\322^\275\266x\357=f\256\r;%\321\376\274I\351\366\274\353\211\355=\352\233\361\273\277\242\262<5\014*<\355G\031\274Hl\274=\222\000P\275\220Z\247\274}\314l=*\037\350\275\2600\372:\340\265\226\275L\364u\275\223L\240\275\t\024\276\275\216@\344\275\217\004\257\275\242\353\361<\222/@=\210\020\276=\307x\264\275\3148O\274\200\033\370=v\254\307<\365\223\003>\333\322\204=\240\360\333\275\321\352R\274\334\006\243=\277\375\353\275\261\013\242\275/\334\225\275\023^\314\274[\263\301=\330\353}\275y\377\235\275~\366\267=_\372\306\275Yx\205\275\221\322\341\273\235f\300=S\376\241\275B\016\264\2755\250\302=L\037\312=1\t\274=D\317\267=O\036\377;Q\224\307\275k\324\311=\347P\276\275\267o\360=IJ\006=\250\233\303\275\372\346o\275+\201\355\275E\231\243=\342i\251<h\354W=\233=\302=\031Q7\275\371\235\304\275Gr{\275\314\007\322\275\200u\003=8=\305=\366\376n\273\026\262\365<|\224\326=\202\000\226;\261\037\331\275\313\250\272\274]%\276\275n\261\313=\n\254\231=T\205\360\275Y\233\017=\302\324\255\273c\302\330\275\234L\230\275\266^\347\275v\237\323=\375\265\003\276\0372f<\262\301\322=\350\214\237=\010\351\342=\221\014\346\275\347%\325\274/\311\205\275\025\211\357=\336\365\302=\032\262U\275\273\300\350\275\354\033\002\276)rx=Od\236=\261I\262\275k0\325\274\rg\337<\331Xu=\346\025\345\275\035\032\023\275!p/\275 \242\265\275Qm\215=G\212\037=\337\256\026\274L\025k=y\375\264\275-\014\265\275\302\301\245\2752\270\300=\361(\321\275\237-T=e\206\r=\231\243\207\275\031z\320=U/\212<\222\351R\275r@\275=\317\037\020\275\030\267\366\274c\222\016\275\022_\313=\014\316\322=\271P\255\275\272\374\210=M\0227=\260\362z\275\363Y\366\275\220\270\243\275\004\272\014=\001@\302\2758E\026=\302\356\373=\262\351\213=4\273\343;\246\307\350=\231\230\312\274\004\021\335\275\320\310\216\275P\\\353=z+\312=\007\375\025\273N4\355=+\313\321=OA^=2\201\017\275\257\3064\274\332\261\003\276\"C\226\2747\275\021\275\376\213\232\274:\000~=\347\345\316=\034:y\275\211\212\313<\324\300\241\275:u\262\275\001\345\317\275\315\022\221\275\245\225\321=\342\265\376=\231\374\324\275\352N\324\275\353\210\314\275\344\214\227\275^qw\274\233\272\335< \347\327\275\320\276O=\216\265S: *\344=\256\242\243<\215\204\370<\n\3169\275\201\005\217\275?\245\237=\230\311\203=\205s\002>[\330}\275\313\007\036=\027\245\230;\\m]\275\347x\271\275k\013\222=\251\243\304=r-]=]\237\000\276S`\303\275\025\351\337\274\233Y\276\275(f\252<]\001O=\321\317\313=J-\271<\250.]<\253I\373=\305\340\222\274\315\243e=\305\n\270=\346~\202=\n\315`=\212\206\313\274\324\n,\275g*\215=n\002\322\275Y\331\271=\356\335\270\275^ZM\275w\223v\275L@\317<H\342\037\275\305]\374\275\254[z\275\216x-=Y\340\034\275x\312+\274\375;\002>\271g\240\275\251\027|=\243\226\341\275\322(\221\275\264\033\343=a\230\307=#\361\003\276\t\001\367=\010C\347\274\214\023>=7\321\371<\355M\203\275n{\347\275\356\003\353=\033%\326<9o\342=<\276\214\275Q\213\360<\324\332\034<\322~\371\275t9\244\2751$\024\275F\2367=\257[H=\3021r=\221\313P=\032\226/=\020X\316\2744\030\337\270R\346)=\206\206\235<)\371n\275\'+%=>\304O\275\367D\342=\330?\204=\231\035B\274\257e\005<s\222\356\275dV\000\273N?#=\036\336`\275\244\337\352\275\017?G=\263\230M=\215\266\333=\227^\226=m;\274\274=\023U\275\2547L\275\277\321,=\337Lg\273\264\022\335\274F\241 \275#\024\236\275\013\356\247\275A\001f=\203\246\221\275\023G:\273\204\323\216=\342!\333\275\350\371\'\274\311i:\275\301J\363\275\032\370\253=\3332\220\275\270\257\003\274\013\335\376=\304\000\251=<\275R=\357w\264\275\212\302\330\275\243^%\2742G\215\274\236\362\374=r\202\305\273\224\354\357\275\r\210*<\217P\020=D\204\257\275\342vt<\310\206\272=\342\371\216=\275\242\307=+\200\263\275\274wy=\347G\334=f\302\001\275\211\214\031\274\266\372\234=\032\306E=\353\024\036=!A\347=\365\326_=\362\251\272=\321\210C=\177)\303\275\276\n\343=\310\352\333:Y\274\014=\233\267\031;i\277\225\275D\023:=\3651\304\275\243\341\325\275\024\263\274=\023\276r\275J\0201;\274\266\251<~\254\346=\202\372\256<\3457\204\275}\250\273=\337\267F\275\215\0216=c;\236<[\330\204\275\270\347\334\273D\202L\275n\306\214<\024\021\267\274\351i\255\275\240\204{\275\000\216\367=V\353\270=\250ch\273\342Z.=\214\007\037=\371\005\306\273\256\253\371\272\277\177\220=\3337\314\274\234\371\276=\035\331\265\275T\304\212\272\177\177k\275<f,=\257\257h\274\253\220\305=\031\251\302\274\360\t\255\275\361>\233\275\262\325\021=\274f\313<c\342\266<R\260\375=\225M\226<\260b\264==j\227=\270\204\273=D\022\006\2755^A=Om\216\275\362W\332\275o\r\363=\267\351\371\275\001\005\347\274g\032\317<>=\254\275\233&b\272\227qx\275*^\372\275\005\274\240=u\003K\275J\375\244=H\363\315<\202C\362\275\306\343\357\275\347\2564=\003B\263\275\255\234\303=\257\302\344\274\022Z\365</U\231\275\242\320\337=\235\247\301;\370\024\244\273\034\'\002\276\267\032\377\275K\350\300=\231\373\204<\365]z=\307_>;\300A\027\275\276oE=\177\026U\275\020\371\340<\302J\376=i\371\372=\256\212\222\275\220\347\330\275b\321\335;H \007=L\014\324<\236\311\031\275\264Z\275=/\245\264\275\224L\351\275FS\353\275\342Eq=\314N\212=\226s\362\275\351\372\344\275K@x\275\336\225\034<\347:|=\373\360\250=\217\246;\275\343X\371\274\216\240\277=AD\310\275\305\366z=*\355\251\275z\030\314\275\315\245\255\275\376\246\274=d\3241<Ig\003><\205\252\275\374\212\260\274\267\226\000\276\374\n\002\276/\316A=H\315\001\276{\326\204\275\222\000s\275\300\203D<\031\352\003>\006\372\254=gM\211<\244M\006<m\247\256\275M\231\300=Ff6\275\177\033p<_\324\261\275\305\315\234<\375z\256=\n\244\336=\273\272\320\275\253J\366\274\225\300\245=a\314\263=BL\207\275\360\233W\274}\017\302\275s\317\313\275%\203\301\275qE\244\275\210#\370\275;wz\275\243\266\t\274\376\r\246\275\233\257|;\360\035\256\275\270\342\250=3sn=\226\360J;\321\334\316=k\323\267\274Cl\'=r\217c\275\002!\206=\350\324\363=\233\257[\275\255\310\375<\036\014\227\27527\243\275\263=S=\316C\362\274a\026#=\3351\261=\303\321\226\273\361\034\033\274\365\267\002\274\305\222\202=\366\t\207\275\177\355\210\275\255\350\350\275s\2732\275\312,\330\274\262J\273=?\341\244\275\226\t\334\275z\205p=H\364\203\275\256n\370\275\177\327M=\221Vr\275\027;_=\225\034\002=\346^i\275O\373\265\275~\275>=\216\025\302\275\317\004\303;\373H\214\275\177\004\260\275I\247(\274?\327\212=\303\221\265<e\215l\275vM\366=\307a\272=\334,\247<\335\254\252=n\230\206\275\\\374}=\257,\001\2746\230N\274\320R\301\275\013\033\326=*Z\335<n\026\324<\342\341\273=\214\353?=\244\345\000=!\366\202=\257nO=#\342N\275\241\214\265<\320zB=\035\252 \275s\212f\275\374\326\215\275b\332/\275\351\227F\274 \005\230=\033^0<\230o\367=\035y\344=\310V\266\275\320\221\003\276\221\376\247=W\211\367=/9\216=9\222\341=:\306\274\275\014\261\335\275(h\343=\324\177\215;\254\035\002=&&\247\275\347\321\246\274\277\216\361=H\353\246=n/\304\275\205}r\275\223*\001\275\241\204\230\275\272\264\257\274\372\345\306=\310?\r=\353\014\335\274\333\221\346\275\331\205\215===\242=fx\267\275\253b\024\275\3528\255=\027\026\001>t\336\037<];C=!a\304=\201\270\277=\214\247\303\275pE\221\275\014\344\232=\314\211\224\274\034\266\005=\205p\306=\345\267\324= \320\320\275rA\177=\357\236\225=\"D+=\274\036P\274\241Y\001>\374\235\234=\353\343\315\275M\002\354<#\304\220=\235\305U\271O\007\217\275\331[v=\030\025\013\275r\024\000\276\n\023\247\275Sx\266\275\037\310\346=\272N\251\274\024d\275\275\273\021\213=\352T[\275F\341\375=\324\0006\275\213z8\275#\367\236=\312oG=\026\225\000\276\343q9\275H1\346=\321}\206\275\266CK=\261\203\267\275\227\343\244=\255\322\245\275\362r\276\275\326{\272=\324\265\363<;\327w=\317\005\361\275\222(\206=+\335\255\275\336D\003>m\241d=W\241\213\275\222\361\226\275\312_\006\275\300\207\250\274 al=W\244\240=\017\254\330<\352/}\275EH\301\275\354\017\355\275\002\301\020\275H\333\224\274\260\330\227\275\335\365\322\274\244n\353=:\302\334\274\007[\336=\305\366\225=\256@\242\275\234\"\227\275(\010\337=\rN\240\274\2047\200\273\267\242\310\275\221U\245=WH\337\275\301\360\351=\257\316\322\275\335\230\364\275o\326\207\275\0109\312=\262\235\313=zxb=\020p\200=]\265\244=5\343\310\275\031\304\207=\234\036\237\275\276\244e=\325\201\257=\006SE=~D0=\017A\001>\236~.\275\036\202\310=\375\341\302\275\346\212(\275h\365?\275I]\354<\007K\307<\2178\330=V4\225\274\266\315\354\271\222\201\344\275-Z\301=\225\245\302\272p\216\341=\026\341\310\275\312\212\316=\016#\023=\327\316\273=^A\227=\365\030\376=v-\265=l\2505\275T\r\356=\304\317\323\274D\264\261=\007\355\001\276\326\210\"\275\214\250\263\274/\334\354\275\022\342\270=\020\221\372=\371\021e;wCm\275\3478\177=\200\301\331\274ctH=\270\033\362=\270\363\363\275h\371\261;Nz!\275\327\223\316<\222\346z=<@q=\207\302\334=\217w\000=\211\340\204\275\351\r9=\302\333\305<\001\201\300=\270\333\r=G\271\253\274\250\320&\275\205b\214\275{j\242=\002d\337\275\251Y0;<\310\235\274\244\260\303<8(\343\275\022\315D=\007\374E86\323\335\275\220(\305=\2074x\275\375e\214\275\342\314f=+\362\350=\246\360\257=B8\005=\351^\205=\247U]=\027P\001>\246\177\226\275\364\004\365=\016\356]\275\274\364H=\230\2227<\022\324J=\346\201y\271\023\271x\275G\267\202\274\2513\321\273\220v\306=Zx\303\2759\034\231<\000\316\353=KX\236=\031n\330\271x;\267=\212\241\351=?\007\326\275j\242\214=\201\0162=7\316\256<\321\332\201=\331\371\327=6\001\322\273?dI=R\273\265=\377\210\201\275\3607\250\275\331\333\001\276J\203\334\275\216;\323\275io\200\275\264\353X\275\3343N=\224\222\364=\265\223\341\275,\243\226=\313\245\024\275\274\026\234=\3559X\275\357@\314\275\267\224\250\275\227\202\305=\237;\312=\353\301\241=\231\333~=\271\205G=W\275l=\263\345\276\275m\261\201\275\261\250\364\274\267\023C\275Q\226\245\275\314`\207=\010\247\232=\213\266\374=\214{\341\275\215\222\213\275\341\261H\275\325\200\351\275\035\232\226=\214\017\364\274N&\246\274\352R\211\275\273\t\235=\344\337K=\014\004\261=M\010[\275\006GH\275\356c\022=\032\302\215=\277\262\307=\364\305\351=\204\210\247\2723\215\216\274h5\003>\33177\275;\033\243=q\314\204<J5\375=\024G\031\275G#\217\274\233\007\323\275\371>\016<c\025\224\274Y/\340\275\337*\314<ny\235=\240\000\277<O\235\326=\274\207\213\275x\025\311\274\025w,\275w\236\200\275\'\002\304=^!H=\375\204\024\275\376\320\000\275\367\361*=\330\301\307<\244\016\321\275\377_\210=\230Zz<\244\203\'\275\240\341w\272~K\264\275\231\236\341=\356\367B=\231pP\274\202\237\021=\220\216\221=\342\307\233=\315p\002=<\004l<\'\354\275=J\214o<C\t\261\275\337\237\326\275\330P\222=\247\\\306=\252\342\362=z\205\314\274W\346\002\276\247\357\200=\204\344\n=\276\312\241=\235\207\224=a\nM\275:\371:\275\350Q\033\273*\231\016<\226\375\024=\361\210\206=g\343\000>\230\354E=8I\207\273O9\271\2751\324\264\274\357\202\351=Q\017\375\275\307\273~=\001\223\237\275Q\\\323\274\022\313\021\2750$\244;\217\347\000>\234\n\\\275|\217\205=\254\241\242=!\214\227\275L\306\226\274\275\253\215=)\t\334\275\362T\214=\314\3604<\016f\177<C\020\354\275o\234f\274cN6\275\n\335\322={bH=\255\261\374\274A\252\311\274\220 \322=\177\312\343=J$b\275\321\r\210\275\275\'w=\372\271\251\275l\231X<\345n\244\274T\273d\275\233\260\200\274\235~ \275\017!\244=\342\341\002\276\320\312\243=\364\210\221\275f\017\354=\203b\354=\020\322\334=\260\034\003\2762m\240=Cf\220=\006f\365\275\251b\203\275\251\017\030\2752\257e\275\240)\263\274\013\001\364=a\330\336=^\235Y=\344\241\362\275\225y\001\276h\217\313\275\213\376\300=\3601\242=\370$\302<\337\313d=\365*\216\275|\355\367=\033vk=,T\003>\304\274J<\371m\242=\253\321\363\275W\320\275\275\207\026}=\001S\366\273#\372\024\275z/{=\314\024\243=\200\273Y=\2502\275<\005\276+\275(\243\235=\316e\232=`\252o\275Um\275<\222\263\314\275\343\222\322\275x\304\213\275\255\246\275\275j?\242\275?P\251=z\356\242\274\302\214\340<\344\"l\275\005C\203\275\0165\221\275}\215\351\275\211\305\271\274ydA\275\003\000\204=z\304\276=G\372\n=\335\373\330\275\304\352m=X\342\331=,[\220\274\036\254\000>\243\263\242=\372\203\342\275\243\337\240\275\346<\037=s\354\257\274\224Q\000>M\314\342\275#\016\363=O\351z\275\354W\202<:\245\217\275[\345.=\317\231\230\274&\256\026=8\367J;:\363\251=8\324\001>\312M\231\275\222#\365;\310\346\026=0\002\313\275y\376\321\275\177\237~<uG\206\275<\360\342\275\305B\217\275\014\031\212\275\224\021q=D\255\252\275\235.d=\263\373\216\275\331F \275\022\227\230=\243\007T=w\237]=3\332\t=\253\010\302==\250\342;\327\024x\274\270\240T\270\352:\234=\013l\353\275\207\210\207=\276\273\350=\345<\200\274\314\255\272=\243V\240=\036\021\366=0u\360\275\032\331:=\022@\241<\206P\211=\222 L=L\026\225\275\361ab=\225\266\355\275\023\023\357=$x\244=i)\244<PxM=\317\225\345=\3369\022=\200\317\t=gk\365=T\351\317=\017\231\031;\024c\335\275\177\017p\275s\244\211=\251\302\243\274\340\021&\275\250\310\327\275\022\'\370<\250\3364\2755i\264\275\300/\223\275\236H\321\275\016\350\000=oT\004\276I\001+\275-\003\005\275\263\2140\275+\344\254\275\376KI=\262#\205\274\272\002;\275QV\204=\213\261\222=\010pv\275cgB<}`\315\275\322\305\243<\270\224\204=\253\220H=+\305\245\274Ag\210=\306\215\024<\232 0;!\320\273=\343N\216\274\335\032\001\276=\027\205\275\251l\246\275\014\211\372\275v\202e=i\257\342\275\341E\256\274w\3564=\333\3228\275\301\257\276=~\035J=\340\206\233=Fo*=\347\330\000\276\251_\274<\377\351\206\275\335\263\003>b\t\n\275\344\002\261=\251\320\337\275q\275\277=t\277\251\275\227~\244\275%9!=\222=\214;\227\026\002\276E\315\334=\376\210\203<\223a\204\275~a\300=\0101\376<\314\261\352\274\347\210r=*F\357<\010\347\220=\rM^=\234\037\210=\221\032\373\272\034\232\245;\204k\246\275\n\267\222=\271u\364\275\366\034,\274\002\312\333<Q\357\256\275\227g\177\275\232($\275nK\307\274\277\352\016\275\006\206\014\275\236\340\227=\247\323F=\333m\351\275\324\nu\275<j\340\275\225\360\373\274\367\300O;\314\270;=\337\340\371\275\256`u\275\327\356\374\2750U\233=\372\254\273\275\347\263\327\275\220t=\275\363\315]\275\203}\352=\364v\350\275\n\216\026=G\241\342\275\224\036\215=I\031\236;\013\367\317\274\376\006\005>\204&\000=7\252\350\275\230\300\224\274|R\004\276&\203\264=\212\301\220\275\206\361w\275Eo4\275\230f\234=se;\274(\233\373\275\207R\316\275*\300\316=g\354n\275\002\241\254<\3315\310\275\203\200\311\273#\221\313=\2340O=3\237\317\275t\005B\275}>\001\275\374\tR\274\n\356\325=\345\230\362\275D\241\021=\256\220\327\275\243\005\202<o\242\220;x\266$=\236\000\250=E\314\325=\306-\343\273p_c\275\246\245\225\275\020]\337=\002q\277=\216\036\331=\025\003\207<\212\366\251\275\332\277\305\275\267\3171<\345/\326={\237S=\033/o\273\211\314\013<q\255\234=Ke\252\274{\256\315\275\327\234|\272\371\260O=E@\277=\\}\245\275_p\251\274\tI\355=\014+\242=\005\356\303=\204w*\274\213G\377\275KY\342\275\254\226\357=-E\234<o\246\214\275\230\\\023;\'\'\233<\351oW\275\373\376{\275\276l\257\275\322\260\260\275\333\263/\275\024\256\360=,C\001>\344t\312<\207N*\275\253>\275=\306-\325\275+U\333\275\263\253w\275\2259\340<\372J\234=\217)\240<\002\220\217<\312\357\231\274\307\315\313<\377S\343\274?2\273=\356u\346;\217\370\203\274\304P\300=\223~\375\275\010\2226\275\204\032\036\275\340\003c=%\024\177\271\335\230\266=\014h\206=Y\377W=\362\315D=2\016\327=\021\243\252\275\r\260\250=\224\321\237:\005\362\231=yzP=\010@\334;\214 \211\275\234\326\000>\362\311\265<7?\300= \271\204\274\200\216\367<\333/\343=\252\243\001>\001\251U\275\2636\375\274i4_=\253F\232\275Zr\224\275\037!\351\275\'/\252=5%/=\201u\266\273\322J\030\275Vl\244=\365\310\217<\343v\250\275>6\324\275s!\250\274\3134\322\275u\242\367\275\024\307\340\2757\314I=\302kP\275Rh\333\273\341I\252=\332\324\354\275\337\331\206\275\305=\312\275\340\216\265=o\373@<\257\217\345=\262;\207\275\253]\273<\243\364]<\324\214\201\275\262\235\220=\rR\336\275\313U_<\327\207\277\275\276\213\273\275\205I\321=\207\312(\275\277\265\321=Ri\021\275\373\203\363=fJ\231=\252\307\256=-|\273\275J;\251\274@\273\257\275\215\267\343\274WU8=\366\327q\273\344\022@\274\344\243\214=\252\256C\275\t\020r<H\244\036=\232\256\375=<\004k=1I\261=\300\244\363\275\365\247\307=\254\030C\2754I\373=\2775U\275q\362\266=\334=\364<\321\260\351=\003i\002>,\3421\275\274t\371\275\270\t\032=\344R\003>\023+\377\275\257\273\276=\334\364\260\275\306i\225=\341\241\240\275\233e\315\275mE\207\275\036\247\333=G<\360\272\265Q\237\274)\365\\=\270)\367\274\016x\262\274\364\240\303=#V\276\275a\027N\275\212\206\344\275~\231\030\275\036j\375=\002\212\251\275\326N\253=\226\202d\275E\233\014\275\265\357)\2743\357a\275?\324\267\274\265\024x\274M\030\363\275\\\267\265\274-\233\267=\226\357\372=\222q\332\275n\'\242=\307\276\317=bA\351\275\210\317\364=\013\266\200<P\244J=\364\251K=\207\214\314\275w\370\371=\364\210\331=\273q\357\275#?\335=6d\211:\325\336\032=^\265\325\275c\227\376=2B\226=\227W\232\275\345Z\350=\225H\016=\010\271\204:\241\013\204\275dw\347\275\371\303\226=]*\375\274\003\351\025\275\032/r<\217i\364=\243\224)\275\245\r\341=\031\356;\275#\240*=A\213\325\275\301\304\221\275\305\322\354=)\222\233=R-\222\275\361\177/\275\024\003\364\274\206\366\212\2754\271R=\367\240\020\275O\020\241=\001&\005\274\2730X\275\256\203I=\261\2132=\205\037\240\273\300\236y=\333\343\261\275"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        tensor_content: "\276\230\214\275\231\326K\276\317\311\371=x`\327<\353\374 \276\346\204A>8\264\267=kD\340\275\313IL\275^\203\357=\2054-\27621[>(~\372<\005T\372\274S\3736\275\253\3543>\357\213\027;\305W\025\275\362\206[\276\244Xm=D\275\345\275;\3522\273\332\377\202\273\202\270/\276J\222\372\275Xm7\276\001\365C\276K\024c=\031\242\364=\377\275Y>\037\372I\276\253\347\032\276J\345(\276B\355%>\207<\026<#}\036=\336\330 >\337?R>\013J\313=Y\261\225=\024\362\026<\251\022+\276\221\276W>&]5>\2437\020>\210\317P>l\272u\275\205\'!\275\274\010$\276l\207>\275.\221F\276\357]1\276Wu\237<]\rk\274*\013\021=\002\354\324\273\232\3758>\354\216\202=\315\344\017>a{-\275X\206^<\354\327\007>\262Q8\276\364j0\276\337\261\016\276OQ\010\276\272\362\261= 3m\275\216\005\016>(\355)>\214\035^\275\235\0373>)\2546>_v\316\275\362\333:>\271\225W\276\214\300\035>\255\202>=};\322\275\372);>\232\303Q>q\241\246\275bf8\276\230\201\203=0\262\362=P\232\004>\036S\260=w\256(>\014\346\277=\226I\360=\002{H>\271\274->G\372\273\275k\030U>\352\266\006>\352;\352\275\314\277\020\276\340\n.>8b\254\274uG\">\324\2355>\301\254\330\275\327u\334\274j\005S\276\320\021\237\274\312\250\354\275=\024<=\342|\256=\277y\320;\356}\341=\3736\210<\343\345\315\275\321+o\274;\325\237\275\001\274(\274\0226\n>s\265\343=\027\016\302=\322\353 \276(J\"\276\306L\002\276iZ\314\274\214\273\002\275cP\240=5E:>]\021(\276\272\267\r>\312g\350=\371\242\013\276\372\270)>F3 \276\317\324\016>FYD>$\262?\275}\374Y\274\007/9\2769\244\001\276I\"O\276\233\263\030>cmO\276o\264\324\275?~3>l\026\260\275\233<Z\275|,\030\276\311D\240\275\241@X\2761\336\200\275\022d\375=\010\334@\276K\000\240=\247]\232=m(\235\275\031\031\320=\245x\303\275\303\023H>\336\3226=\367\026T\276yr\020\276\226\034\213<\220$\363\275\265\270U\276\014\270\325\275\331~\272<\212\225\022\276\313\251\344\275&\246\003>\217T\267\275{J\262\275\264\364\273\273\365m\014=\201\341\">\014\0256\276\335\017\014>\364\374\017=\230,\261\275\024\377\314\275\232\022C>\t\0254>,\255\232;\215\2644>\234t\211\275\203\352Y\276\237h?>\030\302\255=\310m&>\2358\321=\240\344->\341\'\256=\351\333-\2762\304u\275\363\206\375\274&\220\317\271\252(9=\310\216\300=\216\327\215=\204\324\201\275w\233\201\273\343\010\253\275\343\327\366<]o>\275\007\221\272\274\377\330t=\210\t\003\2762\245N\276\227\001;=\226\226\365=\261\237\364\275\310{;>2\266\023>{\0026\276`\361=\276\346\000D=\370\232\020\276;\321Q\276\000\2264\276P\225\302=F\035\250<\010\234\020>}H[\276\004\343\225\275a\030\317=\241\275\337=\315\264\203=\032J\244\275V\240\027\2767\033\r>E9\352\273Y\006x=\317\277\340\275`\037\034\273I6\351;\310\305c<\223\211S\276\343\351N\275\261\035\244\275\305,\247<!?\330=+\000D>\305\346\014\276\330\276\331<+\n\247=%\225\227;\373\363\034<\237qM\275f*O>m\3423>\316a\377;\205\005;\276\007$\361\275\344w\263=\30560\276\262\362S\2767F\246\275\221J\223\273\330wx\275\000\027\325\275\204\227\200=\250\335\247=wU\222\275\244\'\276\275_\303\305=a\":>\305\376t=\350,\327=\353&\310=\250[\025\276\351;\377\273\221\341\025\276=/\337<\335\001W\276_9\350\275X\226\006\2764\360B\276\250\177\023>6\223\n>\272\370\214\275\213g\026\276\232W\327\274\031\373s\275\242s\206=\013nS\275\0242T>\355f\'=\356\245\005\276\270\364\024\275\363\274=>\037P\261\274\247T\356\274?\'\016\276\305\314\345\275H:~=.\037P>*\203\r\276\372i\361<\262\227\024\276\315\314d\275@^\n\276\251e\236\275cF#>\336\231\374=\356\0172\276,vR\276\224\235\354\273\351Z<\276\343\271W<P4P\276\032\357\311=\265\321\001\276\250\247\020\275\365\\\331=\r\013W\276\222\357\275=x\2615\276>\247\217\274\256\006\033>;\256\004>S\250\006>\272?\215=\351\250\276=\033\000q<\271\025\234\274D\336<\276\270T\326=\250L\256=\321+(>wh\335=`]\336\275\336\320\007\275a\262\030=cK\030\275A\035\331\275\320\331\016>\035L\224\274\371I\001\276\327\246\345\275\256\231S\276\276\333K=\213q\337=\313Z\305=\177\255\373=1+\222=\262\377)\276\365\203\323\275\220\254A>\363\227\\\275h\000(>?\037\024\276\354\016\272\275X~A\275\304.\310\275\242f#>Q\224w\275\271\354\326=}C\336\274\264\252\033\275\3423\255<\363\372\247\2753t~=R\tH<\212\373\031>}D\247=V\245\320\275&\024.\276}m\325=\tm\261=\271\\\022\275\236\247I>\216\001n\274\235F7=j\3544>\244T\256\275G(0=t4\213<\014\327\001\276\341v\026>\247oP\276;\342\036\276\255i\312\275\353\013D\276#V%>\343\3071\276\273\276\271<>\010&>\216\350f\275=)\335\275\266{3=|j\025>\n\332\003>\243f\205=\236\315\005=\305\\\371<\000\305\371\275\272\372\014\276\243\204\373\275\312)\276=M\027H\276\326\267+\276\353\275V>P\241D=\244i\336=\006\224\031\274\022\317\016>\347%\246\275\241!\333\275{\311Z\276ad\344=}oB\275\022y\353\275\233\035\344=\262\307\335\272l\223_=\233\004\014>\330\231?>\2775?>\027\263;>0\377\212=\021lN>\203\206k=\2010\255=%\327~=\321\377\255\275M\300\204\275\326\224\371\274\321\336\276=\022\234\366\275\227\274\236<:)\362\2742\370P=\006\221\370= \335\n\276\231\303\311\275T:\032>;\0057\276\001\036\033>\347\2558>F\021\261\275\257\214\035\276H\364d\275NE\206=\236\025\017>B;;\276]\033\244\275dF\273=\342o\221\275\222\312\222\274\213\357\027\274\351s;<a\340:\273y\320U<.\323G>\n\254\217=LF\220=\243G\226<N\240\010>)\212\370\275\002\313\010>\t\2615\275\237\037G\276\201\034\374=\373n\356\275%\310\362\275\324\022e\275p\224\305=\016^\216\275\241<X>\237\377\276={ \003\276\255\t7>C\323\312=\021\364\366=\310\0337\276p\363\361\275p\t\246=\222jI>x\3501\276\230\312=\276\303\307C\276\322\233^<s\213\277\275\375\343\'\2759Z \275\364\n\211\275!\365R\276\035i\320=\026\255&>\204\315\222\275\366\241C\276\223\2652\276\013;\221=}z\201\275\322\315\263\275\311RW>\314\373E\275i|K>y\366\004\273\304\213\342\274\314G\031=\006\253\302\275\314\250\272=\330c\345\275*\034\212=\n\036\331=\322\201\263\274\277\272[>\331\3447\276|\264D>\000\361\200=\267x`\275\000\240\363\275\034x\005>\201\003\276=y\014\014\275+T\027\275\277\255\001=\002\324;\276/\202;>\203\274\271<\t*\026\276C >\276\276|w\275\315\215\311<&\300\306\2759\267%=] \307=\245\341\241<&\255H=\233\3601>\035\022\303=$\245Y>\264\376\013>0\3066\276b\340c=\374\221\336=\260P/>\344\232\334=,\377\034>\326\"C>\030\036\037\276\355\273\257=y\264\006\275i\270\270\275\243F\307\275\252R\035>\364\352\335=\230\312\353\275\3647\267\275\327\355W>\364\032\030\276B6(\276c\366\227\275\373!\025\276\324\035\037\276\267\\\346\2753\014;\276s\313\236=+\353\037\274\261\303\241=\263\324\265\275\332\340&>a\244,>\000\361\311\275S(\277=\230\277\027>\34042\276\r\241\262=\303;!>{9\224<\03586\276\347\025Y=D\260\332=\302\333\037;\226k\344\275)=~=\365\354\345\273\206I\'>\"\213\250\275\0242%\276\325\0260>\334 \214\272\235\336J\276\2776\272=\243\266\206=\340\367[>\216\253\256=\304ZO\276\306\345!\275S\025\236\274c\262\016>I\250[\276\232\322H\276\362\257\n>1t\022>.y\021\276\253\307\034\276+z7=Z\002\304<\274\326\023;\rD\035>\252R&\276\273\013\331\275Qd\013>\237n\013\276\312\024 =\243\0215>\211\3417>\204\336;>{S\252\275\000\301E=\263\201\034\275A\225\326\275\310\037X=R1\344\275*7\305\275)\322\002=\352\277\203=\242\300n\275\2120\262\275oX\006>\342\322\030\276_\013\342<\010\243\266=t|\336<\215b\251=\333x\033\276\2673\275=?\313\362\275\347\2541=,x1\276\016IQ\273\313\371\325\273\214,\275\275\220v\340;\312\027C=,aM=8%/\276\032t\t\276X#\271\275\024\0142=~\363\311=\030\267y\275.\022\022>\227\024\004\275\t\".\275m\342\376\2757\230\237=\312<\202<m\207\017\276\212\2278>$Hk\275\222\374\266\273\2707\364\275`\375?\276\001\305Q>^\207#=\000\003\374<\245\003\035<AVY\275\272\302\031>D\241\003\276D\016)\276/\3410\276BW\'>\022%F>&%8>\376\236N=#\035<<\325\250\220=\355*$>\226\354\013\276~\2725>\325;=>\357\2249\276\345\n\036>i\215\036=\214\225\217\275\216p\211=\201i\003>o_\214\273\223\345\307=\272\346\013>\323\024\021>\257\007$\276a\271+\276@T\033\276A\366\237\275u\343\007=\217\341E\276\340\344\363=\326\362(\275j\005w\274\265\3315\276\177\212T=,\371\265\275\304(\216=\256\225\023\276<\337\037\276\264\313\234\275\016U\221=Dl\260<k_\207\2758\253\265\275\034gV=\261\3176\274*\007X>6\215\017\275\252\275v=\326\3737>\223\213Y\275B Z=\360Sx<\277\233?\276\2077,\276\270\240\214\275\307\372\330\275\300\331\324\273\366\241\000\276\355\014\310=\321\215R\275\213\274\274=\303\356\332\275\225\200<>K#;>\365\230/>\263rB>\323\255\016\276v\275\005\276\370\265\277\275\327ch\275do\344\275S\366Y>\360#F=\216\263\"\275c*\234\275\004\332\317\275\205U4>&\352\346\274\276\242:\274\'\263Z>\212\276n=\274\224\352\275\333x\317=\310\303\233=\257N\243=>F\320\275z\2505\276\364\215\032\274&k\361\273^\223\252\275]u\003\276\013W3>~\201\224\275)\343\335=>\355\307\275|\234\334<\311\215\031\276^\r\311=\326}@\276\177\277\374\274\336\'\006>K\311\017>\343\341\343\275,*\002\276B\275]\275\242\263\232\275{\201\326\274\354\336(=f4\374\275\3743\014\272=\322\205=\235\332\311<\220!=\274\370\214\000\276\263<Y>\203\212I\275\317\262\346=G\r\245\275y\014\362=\027\216\356<\377\325\005\276I\3636>\313\373\220\275U\236\301\275\340\2440\276\236_M<f\334}<s\214\246=\236V3\276o\3261>4\331C>\003Z\032>\301\262\313=\334\2450\276\202CD<\022\225.\275Z\036Q>\014\363\031\275\310\341H>\205\355A\276\356\3416>\0306O\276\245\014\034\276\354F\254\274\327b\017=\266\037:>\310\024\001<\214\365\217\275\270\203\217=\223HN>\242`)\276\312p\272\275\247;A>\344\035\340=\001\352\300;e\022\201<FET\275O\345\226=\204\355\024\276\016\3565\276\357^\002=*\324+>v\257\323\275\016\242W\276\271\343U\276r\010X>\004\317\r\276\250J\206=\2639\303=\247`+=X\252\265<\034>\201\274\333\303\255\274\262\277\320\275\210j\223\275H<\021\275\033\330\373=\027\231\245\274\3656=;\332\315\274\273\344~T\275\232\355;>K\020\373:\002\212\231\275\352\270=\276\303|\004>\372\n\'\276\365\207x=G\326\255\2753{V>\327\305\005\276\212\030\t\276\230\357F\275>\367\300=k4\265=\222\337=\276\005?T>\037\254\016\2768\364\340=\2404\301\275?t\367=4>\352\274\216e^=y\005\312=8\206V=\014\312\303\275-:)>\274\221;>?\237\323\275\032\255\016\276\243\3731\276\236\201U>B\276\342=\307\247\036\276!!\314=F\326\023>\375g\016\276r\007~=\350\001=>\350mW\275\314\322G\276\357r=\276o\017:>\014U\020>N\t8=\353\245[>V\276#>u\336S\276\206\232\224=\246\242\340=\014i\303=R4\021>\177\222\035=S\302,=\177\347\014>\233\361\023>\326\314\022>\331\373F\276\361\006:\276\020z\253<\002\336\306\275\276}9\276\225\351\024>(k\032=\3767\347\275I\210\360\275\267\203W>\337\247\270=\313\376\220\275\342\321\033\276Y><\276\301N\003>D4*>\n\300\">w(\n\275Ic$>\305\326\247<\013\0340>\016[\025\276\225o4>\244\033\013>!\275\021\276HY\363\275\237\251\374={Q\003\276\341\277\274\275\357\337\240=&^\016>\r\026\314=\t\246\351\275:N\377\275\330\226\314\274+N\n>\335\335\233;\353GT\276\240U\026\276\0019\274=\r\224Q\276\233a\265=)r;\276\317\323E>$\377\246=\3754Y>!\0038>\230\312I\276\310$H>\034\242\017\276+\331~<\333\213J\276\006\2474>]\236\225=\2239\346\274g{S=yv\325\275c3\021>\270\223n:P\350\207\275\t\347\267=3\334\215=\030\363\217=\304\221F>\270<F>\324\352X<\005\275\202\275=\340\367=\225\213\026><Y9\275?\243\217=\230NL=\031\032\363<Xo\037>\200\334\225\275\264\253\002=\272\246/=\377\344%=\03430\276Y\013I\276\033\341\352=\025R=>C\361\214=.\313\003={U:\276\371\225\300=$\322\355=\226\003T\276S\2433>S\033G=\254\372M\273\263\220\001>U\347\212=_7\t\275\3775\260\273\237\010J>G\2018\275\223\326\266=\'J\251\275}\373\366;\316C\024>1\343\000>(\334\270\275\020\337\036=y\261\033>2U\013=\356\254P:\342\311G\276W\205\244\275I\330\274=\242|\363\274\016S\375\275s\261\003\275\263\272\030>\371\275\366\275\220>C\2751\264\243\275\231\264\005\275\335:\231=\316\016K>\242qy\275\0006G>\250\212\020\275\013G\260\274\322i\343\275\0042s=\r\3242>\365\336 \276d\335\260\275]\315\033>\023.\001\276\340\'\341=\310l\007>\330\251\233=\346c\360=ys\253\275hd\350=S|\030\275;\276\t\276\251\271\265\275y\220\366=;\360\227\275\230\327@>#2?\276\026(y\274\212\'\366<\301tE\275\024\264v\275\236\014\213=\360\2553\272\t}\036>\035\037B=I\\[\275*\373C\276\005\365\035\276(S\205=\225\322 =*\255+\276\'\353\252\275\351\276\000>2\237G\276\315\304g=\224\363\334=g~&\275\234E\215\275\200\330%=\371\271E>\253\025\336\275b\tF=V64>\264S\231\275jIR>\270\004\350\275\212.->D\354\323=\347\206\307\275j\351\037>\007/`\274\212\230,>\354\3638\276H\203\257\275\0021\277\274/\016\201=\322\223h\275\301\333\317\275\371\260\237\275a\253\227=\311\240Y>c\275\223\275\360\315\r\275\220\313\220\275\365G\231\275\t\324]=\\\216\022\276#t\037\276O\312K\276\316\n\024=t)(>\346-\243\275\033\002K\276\201\230\033>\322\333\002\276(\212\224\273Vt\317\275\rh\253\275\242gA>\261\307\023>\244`\274\275\334\312$>\313b\202=\337\374\353<D\261D\276\237q\241\275\345\244\357\275\002\315\347\274\033S]\274\330\241\243=*`\344\275#\276\246=\267\203};z\007\002>\004\335q\275\023be==\262\036\276\367\242o\275\204\336\010>\023\241X>\3176\315<\227\235\271=\325*\013\276\351b\030>\325\037o\275\372\323\372\275u\345==\n\030\307=\017\215\277\274\334oR\276t\224\244=\0275Z>\'\326S\275\026X\223\275v\003\202\273\234\\3\276{81>HrM\275\312\2758> \013(\276f\244>\276<\027\334\275\375Z\322\275\352\361D>\020\316\016\276U\317&\276\313\217J\276\322j\331\274\302w\332=\350\027O\276\367!@>\317\002\262\2759H\211\274<-5\276\223\343=\276\221\266\316=Q\334\255\275\304\250|=S8/\275>\221\307=\365j\007>~\002\035>\312\252\301\2751\2602\276|\322\021=\315\022\362\275$\270H>\252\334\206=\r\025\010=e\331\242\275aH\245=\013\314\315\275^)\007>\335;\023\276\3136\001\276\230@%\276\253H\211=.FU\276\030+K<[3\246\275\026\233\276=\304\243\024>wS>\276\3338=\272K\373\214\275\3403\005\276\255=\036=\274\322\266\275\013\205\234\275\235D\027=\001\252\363\275\253OY>\340u\010>\256X\225\275owV>\257\2472>0\t\027=\3712!\276)\311\374\275\275\177O>G]\224\275\350\2129=eCF\275\014Q#>\024\200\374\275\221o\232=\236\001,>{3!\275\340\034\033:s\016\317\275ggF\276\302^W>0aK\276.\005A\274\304\n\267\275\230\324I\276\322\320\230=D\001\240=1\037F\276\022\221\363=\202\n\007\276\222A\037\275|z\224<[\270\374\275\024\272E\275(\307U\276\t)4>\007P\217<\340\231\224=+5\206=\330\220S\275#H\304\275rL\003\276b\252\r\276h\257\364\275x\347\030\276\325\211B\276\036r\261\273\357\270\300=W\217\231\274\312\322u\275\316vO=\026@R\276\363Z/=i\223\202=Ng\352\275\310\nh\274[\202\322\275\240\n9>\240\007\246=\322\232*>5\352\273=z\324\001\276\006W.\276\277j\375=\223\241q\275\3535\234=\013l\246=\250\267\277\2757\351\235\275\371\322:;\243\360[\276\002\2758\276\232<\025\275^\234\316\275\230\343C\276\000\212\320;|5Y\276\260\304=>hM\340=\036\022Q\276q\330C\276\020ZK\276\235\274\377=:\367\003>*\3723<\210\376@\276?\300*\276\250\243n\275\237\367\241=7\315I\275fQN=\005\306G\276P\"\222=%NL>Q\370\342=\245p\362\275 \243\337\275\020\364+\275J\206\242=s\360\'\276\375\335\266\275\323\3637=\310(,\276C\236\210<~NZ\276\367\001!\275\034h!\276\352\236\031\275\243k\364=%\244\305\275y\304\035>\223\376\003\276\030N\272= \305\241=%\022;\276<.B<\034]\334=\327\'\202\274}V\216\275zy\370\275\224\r\365=\371)\341=Bd9=\265\207n\270\002k\n\276\255[\007\275\013y\341\275\014\350\260\275\371]\206\275\364O\334=<\315\200=\367j%>l\247#\274\376\002\013\276\304\240m\275;\225\027\276\250J\261=A?(\276\315h\027>\260\317C>\363\347C>rMu=\323g\337\275mi\t=\264\2011=\316c\2749\227\251\361\275\214\003,;\022\275\320<:\\O>\355\271A>\372\302\363\275\242*\201<\321\312\t\275\376u\305\274\365gI>\244\316r=N\367\210\275.5\344\275\242\'\243=B\2301\275\375\r?\276\002\r\006\276%\0076>^\354!\275\333\246\013=\330\213%=|\275N>\250\375\035> \261\r>\330\253\032\276\246\317\257<\025\261Z\276\226\363\234\275\037\253\020>x>C>\315\267\034=\304lV=\247]\373\275d\232\002>\355\362\006>\203\010\356<,\345/>_\224\371=\200{\330\275\216\272\317\275\375\364\320=\324l\231\274z0<>xur\273\255|\022\276W\377\031\275\307`\275<A\267R\276\300\ne=&\016\003>\031Y\314<\365\'\205\274\034\362E=\324\2665=\031\244\366=\332\3737>\223\214\315\275\036\312\277\275\344\220S\276\310\363V=\242<3\276\364\021\013>\274\216\275\275(\202V\276? \342<\2610H=\355\330.\275\177\303.>\376\004:>N\315\353;Z\037\274=\252\241\220\273\354\377#>7\0259\276\304\nZ\276\377\244\t\276\270\033\016>\230\275\263\2717\210\'=\313\311b=d/\202\275Es~\275\363\261\023>glN\276\363\277\"\276~*\305\275\332%\355=[\365\t<K\272\313\275\0173\026\276\211\005M\276\025kB>s\363\024>\310\361\302\2742\245)=h\204\r>\000\nD=\201\337Y\276\340\005\377=\303z+\274\313\374\302\273\025A_=\211$\030>\226}\025>}d:>\026\311\310;(\227@\276\240\251\304=\231\377\274=\017\350b=/\311\200\275\033d\022=\211^;>\253\371\310\274\207\031\014=*<\024>\376\363+>\346=\227\275m\263\021<\025\003,>\3678\010>6\003\352\275\006b\000>[\003\004>\032\272H\276\236#}\274\026\332\374\273\232*\357=\034 \037\275\014\310\230=\243\363\335;\241v*\276u\247\250=\227\257\274\275\347\203\014\276\251\316\"\276\274\2369\276\255H\177\275X\n\257=\341\271\211<r\2641=\253\341\362=\364]J\276\327\312<>\014\020\035>,\3718\276\305\323\035>\344\200\240=Q]1=\226\304_\274\023\001\332\275\302,\214\275}\252#>-\025\230={\207/\276\247\254Z\276\010\377M>\331\234\335=\325|M>\373O\217\273\264ky=\032M\210=\210\267T>\355\216\345\274\252t\265=t\335(>\361M\352=\263\235\267=\340\225.\276}\nG>[\275A\276o]\006>\352\245\272<q\260I>\241b(>\024\201\233=3C\355\275\300~\244=\331\354\031>\002\341_\275v\353\034\276\020\177D>\322?^\275\351Q8>\225k\277;L\033\234=n\352\000\276i\353\203\275d\207\034\276\023\216\364=~\026\002\276\022\003\375<\245\\\212=\240#\351=G\324\236\275k\3378>\372\2644\276n\201/\276\325\243\353<\211\355U\274\327\336\035\276x\233\325\275{\305\311=dI7>\026M\332=*H\205=H\331N>\254e\007\276CF\363=e\246\305\275\304\2621\275\277|\332=/I.\276Ky\004\276\204\014\030\276-\000?>5\212l\275:u!>1/\007\276\322\376\372\274\017\373\372\275*i\001\276\247L\017\275A\2111\276\303P!\276\016\304z=\322\241K\276\245A\340\275\227\244\355\274\322\261\250\275D\025\226<t\2237:\312\366\023\276u\010\207\275a\205\t=\251R\205\275Y\035\211\275\316\005\031\276\303m\206=\310\3035>&Lk\275*\316X\275\0233\256=f\220W>%]\224<\000\336\215</8\034\276\256G\266\275\222*$=K\327\r\276W\221\237=\2332\245=\004\027\032<\210\376\031\275\376\274\213=61\022>\237=\"=\271m\204=\n\t\305\275\262\206M\276:aI=\035\343\222=\007B$\276\313\376\204\275`\264\003\276K\273R\276\2355B\276\204\025\330=\253\025\246=\030X\200=t\3503\276T\227\215\2757\002g\275\016)\n\276\326\312O\276\023 \272=\266\213\232=\263y\'=`\225G;\003\031\271=plS\276V\227\267<Mz:>yu\350\273\250\021B\275\312\033V>\326\034B\276Rg\231=\264H\334=\324\034\225\275\221\344\337\275\244H\361\274\356\304^=\026\231&>\365\375H\276\030i\357=\327\005\353\275\220\376\000=\"\245P\276\317\346h;\265\354\032>\235\250\300=\306\2367\276\271\245$\276L>\212\275C\007m\275\205\267\301\274\003\334\355\275\214<\t\276\320\262\264<p\016\216=\314vL\2754M2=\351p\350=V\026%>\314[\224\275\354p\320\275\366\032\003\276\300u\023=\315\030\325=\277\363\343\275\314\251Q\276\026,\222\275E\326\362\275\321\014\255\275\322{b=\355F\342\275C6H\276\034NC\276\007\225W<\231\0361\275\305\3256>Eb\273\275\260\324\240\275\356\342\252=\340\366\032\276I\266\360=\237\">>\333\2622\275g\005\215=\372a\220=L\031P>\026\014B\276\020\235\342=D\371\332\275\272J\233\275\330\234?\276\250\002F=7\372L\275 j\225=z\267\231=Y\271\330<\311vC\276|e\032>\306\335.\2761;\331\275\360\324\220\275Bn\255=\303\344M\276\006\372\267\273\014\322\243;\244\221\230\275\001\361\004\2767\247\265=\3426)=\036\252\346=\273\3606>\254\307\367\275\270\233\240<2\353:\276\274c\260<\335\222?\276La\020\276\216h<=\376\341U\276\327+\032\274\217\242\313\275?\364\354<\272\251\037>\252\245->\3751[\276\361\362\023\276\020\265\245\273?\373\357=\347k\301\274\244\366?\276\232\200F\276\210\233M>\366\333)\276\255\3777>-U\236\275\340B\252=\201{G=\201C\250=\010\247X>\017CM\276\222}L\276\201\263\373\275\276\2413>}\024\224\275\240\023\356<\244\221\232\273\243\000X\275\327W\217=k\360\240\275\034\276^=v\334[>\"\325 \276.\220\235\275\316\322\220\275\375z\270\275\340\024\235=\\\344/>\347)z=\314\177\037\276\3444\032\275\361 :>\232fX>\177\277J>q\207h\275\352\300\022\276\247\024\232\275\362G >\256D\220\275\250\206V=\257\257`\275 \317\355=\260h+<\300\231\304;f\037;\276\347\240\247\274I41<u\234\304=4JY\276\315\333\n\276(\362\264\275\3362\274\275\245\002@\276\356\240\241=0\364\310\275\304\322\364\274\272\332\344\275\237\255P\276\351`Z\276\242\334\210=a,\035>4\000\311\275\202p\274=\314\204\341=\342\326\004\276/\224\213\275{\220Q\274\345\262\237=\023\232-\2767\260\337\275\322\007\316<N\2050\274\226\377\214<\234^\340=e\204\317=\001\213\020>\372iQ\2765b\016\276Y\364\240\275\232\203\341={\t\212=k8\347\275\243\003\272\275t\217Y\2750\323\030\276\030\274 >\372-\024=YEA\275\224\201/\276n\035\302=\013ux=\030\253\207\275|\363\233\275\245\3716=l\324\312=\210\273\001\275$\216\251<\300\037\345\274r\275\017>3\351`<\265%\372=\237\024\255=\016\262z\275\330>P>\273\275C=aE\363=\240gD>|\232\264\2742(\003\276A\215\217<\303\310\364=hH=>\203\235\275=\007\033P>\220I[>j\335\325=^N7=s\005\031\276\235\357\000>\330\234\220=M\200\366=\360\246w=\366\004K>\322\020\303\275\300\267\223\275\357\311+=D\201\026\275\250\333\271\275\026g\376\275\020R\354\275\210(-=\244I\304=\002\271[>\275F\261\275\330\027\t=\327\211\254\275v\007\027\276\306\337\222\275\355#\370;\273z\234\275`\355E\276\217\001>\276X\205\363=D\3352\275sW\317\2743g\376<\230lK>\362\323\214;\3156\324=\302\240 >\364q\004\276pO\223\275(\212@\275\013\365\351\275\002\255\034>\033x\031>\034-D>\025\347\316\275\201p\032\276\016\352D>4\\\222<\275&\243\274\204\333\321=\005[\034<m\t(>\304\016\245\275X\240\004\276Yd$>\211%\262\275\030\251\212\273T=\023\276\340\000\026=c\014\336=\037\346\377\274\211l\260<\277\033\225\275\264~<>}\213\225=n\201\311\275\352\202*\276o\244\346=%\036t=\033\3509>\351\320\335\273\326\351*\276\013\373\312\275\366\373\025>\315\370\333=D\251\300=\357:G>\342o$>,\2233\276D\016\351\275\260\372W<\363\001\270<\261\2231=\340\243+\276\366\215\357\275\376\205U>\262\tm\274\362/\371;W5\314=O\314\324\272\213\367\250=\352\357\017>\236\014H>\323w\377\275\265d\031\274\373\355\007\276:\254\375=I\005f=K\007S=$p\'\275\244\365p=)\210\024>\215\224\203\274\217\277\233=\241\225\252=\232\314\'=\325\306\021>\330 \251\275v\366\333=\025\340\016=m4@\275\361\342L\275\275\210X>D)\014>\231\225Z\276\232\356>\276\254MF\275\004\300=\276oG\212\275\371\370\214\271\037/\034\275\'\016;\276\246\311=>\251D-\276\335jM\276{\356\251=\270\217\242\274\220\271\305\273\362\034\013\275\177|\036>;\333\321<\356\210\023\276c\010&\276\232\314\267\273(\370\003\276\230+\031\276\310YY\276\030$\023\276\343c\350<^\002\247\275\346\314\246\272)\315\034>\224\243H\276\377J6\276oS\306\275\234a\024:\204\201\030>\013\267\">\030yV\273\224d\030>o$\221\275zG\353\275\n\275\311=$Z\333=\355X\233<H\0309\276\351\272\310=\363P\033\276\233\n&\276SQY\276\302l\337=)\3326>\250\352-\275!g\314\275\272N\035=\233\214\351\275i\376\257\274?\231Y>RBF\276|c\342\275\325\020\030>\221\013T\276\307\276\324\275\022i\000\276t\n\337=\203\252 >\304\201W\275\223\016\'>\311\375\033=:\3163>\246}R\276\037\347\001\276\303>Z=\242E\360\2745\0233\276\233\252\352=\251~i=\277\254X>\334\237\250\275\210WO=*\262\277\275T\233\027>\001.\217={i\236=\372-\001>~\234\240\272\017O\247=\352\262\222\2752\264\031>a\224\273\275EKV>\317\260\237<mZA\276AGS=&\306<\273g\253\372=\365\346$\276\340\230T\276\014p\025=\322\377\244\275~\327\311\275IR\304=x\330\265\275\255\230(>\323J\2079\336\010\025>\t\212!>\177\240\002\276\350\246\367\275Ro\337\275\024cW\276,\2270>\206\016R\276N\264\363\275\3118\032\276X\353\254\275\032\2629>\230\352\001\276=\316\375\275\232\300h\275\030\322;<\357CF\276\010\272F>\000\322B>\346\324\300=Y*\020>\217\320=>\341\022L\276W\026\360\274>zs=\315\315\301;\231\351\353=!!\016>\273\231\020=\244!\322\274\331v\317\274aZD\276jw\002\276\004\257/>Db;>6\035\354=\230\263D\276}\3233\274c,\000>\216\354\005\274\207ZH\276w\205\026\276\2348\277=\364\251!>\207p\313\275\270uH>j\241\376<\305\013\036\276G\202\214=\302M\313=\207\223\337=\370o+>\307\240I>\344<#\276\347\325#\275G\234\356\275\215\010\325<\333\305D\276r\221X\276\301\241*>\206\023\364\275\333\320\353\275X\305\323\275\343\235\036>\373\320\251=\010\000\254<\252\276\037>\024JA\276\376\354\003\276\271\177\000>O\005\230\275\324\254\235=\276\265\034\273\036\226 >n\013\001\276@D>\276\204\213:\276\001i\326\275\206\357X\275k_V>\317U\273<\327x\267\273*\214\017>\233\324\006>\307\020\013;\340\033k\275f\231\352=\224\275\366=C\210\036>\315vY\276O.Q\275\002pF\276\215\276\'>\027\333#\276\373\256\021>\247\0238\276\271\274\036\276\t\014\306\275\367\372\013=\246\315==\275~\361=\331\001L>\320\321d;\027^\316=w>b\274N\213=\276p\370\306=\362=H\276\357\371==\207\0369>\017\351Y\276[\241\'\276%i\245=\234\215\360\273\270b!>\006\310\244\275O\263\230=\257@3\275\000\321\200=[@\245\275\214\242\270=K\005\227=\230\372C>SR\317=\267s\023<(\216\303\275RY(>\010\260E>V\221G\276\370\265H<\332W\311<\206b\307\274*\3642>\311:\352<I\263\223=L\321Q>F\303\300=\226[P=U\016\207:Q\315\033>-\226\231\275P]l=5\257>\276Q+_=\264\303 >QE\016=\020\212\'\276\366\312%\276j\323\004>S\266\300=Eg\232\273\225\343=>\200\375\'>G\3269\275\245\377\323=\274NB\276la\033>\350eB>\262\035U\274\237\233\355\275`\017R\276}\357U\274\240_7\276\230Q\357<\235\302\377=/\333\226<\357\323K>|v\320\274M\257A>\315~a\275\314IL\276\227>\020\275H\244\026\276v\313+>3\346\256\275\270\3307>\341RH>\332\271\337<\306\242\034\275fx6\276+\366a=\337\227\320\275\r{\361\275X\321\023\275h\306\353\275\220}\315\275\276:\037>\362\2254\276\217\007[\275`.\030\273\247\265\207\275\372Y\222\275\006\222#\276\243\300\222\274\274\255A\276\254\211\037>\272\317Z>\265A\214=\226\373_=;X\320\275\033j\301\275c\220q\275\352x\016=}\345\217;\177j\226=\250S\014>\3162\302\2754\227\316\272A\007\032>\245M\276=\345F\257\275\343\r\024\276\374v\376=\365\017\r>\036t\357\275\224\025\374\275-\370;\275\200\207\007\276I\223\033>\255\026 \275\3111\370\274\177\213D>\010\014R\274\221\313\">da0=\305?\001\274]\271[=\303Dc=\257\337/<\203O;\276\373l\301;M\261\344\275\315\213\327=\246a*>RqA\276\250\215\006\275\235\353A\276\372\260\355\275P\260\330=\343$&>\004GD\276K\350a\274\"\331\277==\204|\275s\325\305\275\334\324T\276\375\377\t\276VP\r>\230\232U>\375\227h\274v\334\217=hs\242\275\345\'\264\275Jh\026=\232\357\340=\325\237\320=#7\022\276\007\234\315\275o%\340\274\024\336\245<5a\225\275\223\020\022=\000f\216\275\213\304D\276D\217\010>\025\277Y>\344\3715\276!\215e\275r\357\202=\3020\231\274\036KB>\261!Z>R\312 \276\315\234\277\275\205\371T=\336\260F\276\007\252\332=\263\\\010=\345\341\373\275\020\0022=4\337\213=;r\327=9\357\207<6@\007>\225X\006>\367\215\014\276\177\3177>\021K\266\275Q\263\240\275\332\356\032\276\245\207\351=\215!\013\276%\373.>\3066\202<\236\004}=\010q\242=\256\3037\276K\375\277=HrO>Nz\005\274\037,!>\342\030\t>\303\206\031>\204v\342\275,\3658>\017\223\033\276\303\367\262;\r\032\254=\244\306\014>\336&\002\276\237\227\'>\250^\374<\322\237\231=\261\252\324=;P\336\275(\375\331=%\367\034\276\201\363\317=`\327T\274\366\245\252<0P\010>\000\213\354\274\014f\377=0\005\301<\311\202\206\274N\263\355=\0140\362\275\373L\361=\353\2465\2766\232.\276\340;\361\274S\333#\276\002\332P=\212\"\203\2749\274&\276\3773\026\275b\207I>%\204G\275j\217\313\275\321zA>N.\370\275-\223\003\2761\333\267\2736\345\031>\313\327\203\275_\3211\276\rO#\276OP->\230\020\200=B\375V>r\r\363\275?-2>\032hO>\355\nD\275\275H<>\327\335\005\276\355\211x=q\352>>\337\'\026\275\355\350,>\370%\350=\rE\200=Q\215\234=\244\271\215=tA\000>\2673\214=\326l\204\275\007g%\276\027\216\"\275\273>N\276\354\343)>\213\354\315=\302\004!\275\341;>\276G.\331=G\360)\275\311^!==,F>\014(\365\275j\\\340\275\361+\027\275=\353w\274\010\212\356\274\331\336\231=\263\000A>\275\333\216=T+&>\302_\021<\026\2755>\266\271\364=\363\276t=\027\230\366=\031Q(<\201\320\001>\027\301\020\276~p\367=E\321H\276\224\260\027>\313\355\001\276\030\222J\275v\235\t>}\014A>\220\253\211\275\312\331\010\276\240\325\272\273\366\202\316=2\024\350<\342\243\232=g\346\006\276\023!\327:\005:\007>\037\335\350\275\002y\036\276Tm\022>w\226\233==N\024\276\302+\311\275Cm\034\275\250h\005>\367Z\215<\315[\201;p\010\222\275R\354\235=\330B\000>\306>\211<\221\325F>\356\227\036\276\302h\">\233\253\263=u\243/>\374x\017\276E\371\263\274\014*\275\275\203\r\353=\006Y\004\276\331\225\305=\275\215\352\275\262\201F>\373\327$\275\345=\'>\021\230!>\2074[>\244\006G>r\n\336=\007\250\315=\212j\311=\245\223\221\275z\264W\276\301!\354<\"\214\377=\337\311\210<W\030\027\276m\376\242=\315\322\021>fQ\211=\037>\360=\335\345)\276\001\321\001<#\0241>)\006\341\274\211\255\016>3\320\026\276\0254\210=1\233&\276\274\273=>\204\263\310\274yI\373\275\331\241%\276\017\334\231\275\254,\004>_\2019<7\222\242\274\327\327\203=\222=D>j\262\330\275]\356\313\273\315!\262=\333)X>\177,\200\275\344=*\276\314\021\330\274t\201\003>0e\240\275\375\320\267\274\207\320\334\275\032j$=\255\0051=`4\037>[\307.<\355\030+\275p\230\016>\025\300R>\220\224\024\276_\361X>\002Y\275\275\032\254/\275C\300I\276L\307#>\026\3354>\025x\211\275m\243\310\273\350!\320\275\265\253q=\320m\347=\2373\340=.u\024>\'\332\374=\305\375\026\276L\035I\276\003\270\366\273\231~[\275\276M\030<\372)\352\275\305@\344=\203\351\230\275\302\212\223=[\276\246=X7.>\356\325\357\275\345\0232>4\265\311\275\274\307\331\275m*\027>\275\363\252=\371b\351\275\266\256>>q\0302=\211z \276\350\357\353=E\211\025>\034\345\267\275d\234\325;\315\022<>\374q\024\276\314\305?\276\344W\203\275?\266\253\275\026\035\005>\306\247\202\2723\210\363\275X\027\327\275\320~\017\274x\336\000\276\313\272\270<\336\2456\274\203\252\003>\236\350f\274\211O\343\275\211\353\305=+\313Z>^\005\317<\343\rS>\267u\023>+T\240\274\302\2375\275U\005\333=V\031\325=E\340\377=\200\230\027=\334j\326\274\224fs\275\253\357Y\276\"\230U\276\332\214K\276X/\240\275\210\323+>SN\r>\262\256H>\374O-\276\366\327\335\275\374\333Z=\255^E>\307\275\201\274\211\223\221=\217F\301\272Q\2740>\320\014\225=R\353\270\275\362\037\343\274\024X*\276t+,=I\311\207\275X\331\320=2\345\033\276\257%\223=n\356\251<\217\210J\276\227\260\353\275T\274u=\335\337-\276\033\244\316=I\231\244=\212\t\032\276\377\004\334=.u\003\276\335*?\275\'e\017=\016\252\\\2749\0208=\234a\241\275\344\370\245\274(\337\003\276\216d\302\273T\276\214\275\\\314t<\013\206:\276\365\306N=\247\345\005\276\260\237,\274\235y\211=\257\345\220=\177\270>\276\253\001)=|*\211=)\337\360=\255\254D>qX4\276\371\2629\276\304\345\002>\204\275R>\307\263\225\275\203\034K>\316\306\350\275\305\231$>}B\245\275Jh\010\275\245J\016\275\344eI\276O\"\303\271\244\323V>\035\275&<U\253\207\275\371e%>\274\307F>\276\226\234\275\260\255\017\276~\224&>\343U\224\275%D\017\2761\206\005>\231\0178\276\243\225N>\307#*>\2214P>w\232\323\275\320\315J\276b!\214\274\373B\301\275\010d\002>h*\003>h%\343\275\027\356\350\275\014\352b=\306\177\200=h5\320\275\252`U=9\233\344\275\216M:=\240\340=>r\310\374\274#\331\261=\304V\342\275\223\022\242\275\221J/>\030\303C=\226\317\002\275P+\255<\021\264\034>\215v\251\275M\005.>\2101\202<Hyj=\247;L\276\364h-\276\'\253\315<\252\323\013>\2463W=\316G\334=\260U\026\275\340,B\276\253\243\330\2758p\002\276\221[\267=\004\310F>\1778\340\274\251\303\247=\315\021*>\r\325+\276(\372\016>\025\312\361=\214\270\027\276o1\'>\343\241\373\275{\374L\2760\276\"=\343\003\273\274\375\352\345\274\023S;\276\017.:\275\252\356\034>\326\244:<\322\002#\276o\367\264\275\024\'\326=\211eJ>\'\224\n=,\270S>\234L\035\2759\374?<\223\275\233:\317\022+\276\314\033@>\216\007J\276\243\363D>\337a\016>\207\300k;6!\227\275%\006Y\276(U9=\177qW>-d\276=i\'\335=\205\013\237\275\222\3066\276\013U)>WQ\276<\263`7\276\030K\222\275M\366\254\2752\217\271\275\275Q\r>\320\360\376\275OW\335\274\310\267/>\013\322B\274\232\031\370=\300B:>\344\247[>\351<\373\275;R\210\275\217\0310\276%\257\034\276[/9<U\215 >\352Ba<>\312\347;\324\313\330=\234\367\246=N\013\306=\317-\330\274UlA\276w\273\037\276\35307>\332\244\204\275\352\3411>\351\216\234=o\303\233\275\365!G=~\303\003>\273C\273\274\361Y\021>\356H\247:\336\225\351=8\234<=\320\233\r=\351V}=u\212\356=\250]\255\275\365\304D\276\022\033\022\276:\016P=\325\004\n\276\377\027\372\275\010\r\216\275\020\244:\275@\346\005>$\250U>,\207\230<\347\267\005\276kP\037>:\311\307\275\265f2\276V\335\270;\rK;\276\037\251L\276P>\021>2\014N\275/?+\276V\304Q>\256\230\316\275\311x\264\2726t\206=\274\246\305=\360/\335\275,H\'\276\377\350;>N\177\260=\254\337\010\275\364^\000>\010\304\034\2762\272\323=\372l\014\276\356\263&>\275;\317=\252{o<\244x?\276\260\335\335\275\261\\4\276\311`J\2752\226)=X\346\346:\224\377?\276\257|\205\275\260\021\327\2746V\243=T%\005>4\377\231\275\323}\332=\341\323\006\275\227\215\345=kk%>\034\361%=\271\3309\276;*\306\274O\320\007\276T53>x\031H\276\356\330\305<]\0037\276\353\360\364=PwV\276P\034\202=\321{%>\306\031(>6\n\033>\323G\246;\230XM\276\232\2766=\340\367J\276fSx=k\240\207\275?\316\224=;<\251\275\322\260$\276\336\2357>\272\376?\276\313\377<\276L`>\276\234\360\336=\367[\203=\231\246\303<MZ*\276\306\272j\274B\256o\275\350\207\336\275\211\2123>\301\367\277=B?\241=\202\025F\276$<,\275\326\372D>\035\307\240\274~\210Y>c\250\025\275\034\257\237=f\337\026\276\021\250\373\275\000\0245\276&\341\325=\300\013o\275\036\020\244\274}\277\025\276d\027?>4\021r\274\322\014\314\275\222\326,<\377\350\374\274\234\217\374\274\354\367V<\312\355$\274\312\316&\2765\306X\276\272\356+=\254\352\330=iz\216\274\016\327k=\276\t8>\035\026=>\313\236 \2762\014\">@\000\360<\255\025_=\237\277\233\275\270\320\371\275O\253C\275p\021\344\275\311#\316\275\"UC\276\353\201\237=p\370]\275\2528\272=&\013,\276\232\332\275\275A\335\003\276\323\032>\276sF\314\275GA,>\n5>\276\\\213\">Q\217V\276\"Z\344\275\260\373L>E5\036\276\r\237V\276\200\014H>hAH\274A\254F\276\343\020@=?w\301=kP\031>\302P\377\274[\324&>\027F\364\275\255v\024=\315\202$\276k\322J>\276\301\220=\340R\365\275\217B\204=\270\215P>\240\336M>Q\353\250=v&\312=;$\021\275p\265$>\266\311\027\276A\013\224\272\230\262\232=\004\301\202=\223\334\035\2740\251*\276ar\023>\237\022\206=\366\367\034>Y\211w\275V\216\026= \2342\276\361h\327<\330$1\274\240F\347\275\026\341\244=\276\314N>\370\3332\276\354\250o=\335\311\314={}\032\276\230\271\260\274\223\351\257\274\340t\000>\207\315\t\276\305\227\264=\000\331Y>\266\344\331<\035\247L>SnB\276\n\271D>)\223\362\274\327o,\276\231\352\252<\304\342\313=)\340\351\275\260\332\007\276\026\366\331<\033\326\216=\217S:=\"g\342\274\353\223M\276\030\216%>2\374f\275 \225\022\273\3047\264\273\n@\241\274%\356!>\221\212\001>k\340\026=_\033\350\275\360}=\276\3537%=\242\300\371=\304\005>=/R@\276\375\033\025>\033\'\035=c\026\365<\337B\017>%(\264=n\305\274\275\333\330*>\301+\357;0\254P>\363*[>]P\237\275L\363\241\275b\037\230=\3652\002\276\256\206@>\\^0=\207\356\340\275\374\321\357;\261\271\375\275\377\260\263\274\006\013\324=\307qR=\236\313\021>X\312\210=K\010<>\000\036\034>\250^\266=\353\"O>\2317\037\276\275\326+>\310;\000\276\302\222!>5\302\227=z \035<K)\275\275R\033\022\274\253\265\n\276I\364\362\275\253\256\265=4\334(>\275[;\276\242\313\024\276\244\026\243\275\327\310\007<\230)\270=0\343\243=u\344\271\275\001\334\253\275\314\3306>\226\021[=\354\253\005\276Xv\256=\236P\216=\212z!>K\002\245=\261]\207=\221\361Y>S\314P>\223g.=\007\317T\274`\355\200=\355\346!>\333E\243;M\302{;;\230\033=~\\\014=\277\227/\276\247\205;\276\tG\276\275/-\310\274\345N\217<0K\037\276%\001\275\275\"\232\036>\360CW=\377\2371>>\026O\276\320n?\275\364\233K>j5\374=+\007A\276jF.>\206\356\270=\177\244\035\276\300\214\324<\264=\346=\227\214\304=\214\177D>i\332\034=vL@>C\327W\276H\260\037>\364\305\r>\026\374\031\276\256\321\021\276\335C\233\275\336\362!\2765\036\320\275Dt\023=\221\032\227=ky\345\275\363/\321=$N\007>\370\3549>\314\037K:\010\213W> \002\315=\301f\261<Lw\021=\260\204+>\213w\000=\010\321=<\372\302q<\030\276$\275U\256\233\2754[\027\276\337\242,>\276\2036\275\203!!\276c\216\272\275y\250\327=h\363\026\275\272\266\214\274{\366\014> \234\014>\252\277\217=\365\223E>W\323\225\275q\355/>kl\031\276\321\010\014>\315\272\3129\355\242\357\2756S&>\322\2359>\004\302\031\276\036\233\341\275@u\220\275\024\023P\275\317|\240\274=i\026\276R\354\206\274jr\337=\233p\001=\277R\273\275\207\2247\276\261\'\371=;\225\013\272\313\375\374\274#@1>FUO\276\374\017T\276\242ND>\001\226P\276\353\226K>\360J\236\275=\346\371\275\305}\013\276\362\177:\276M\273\265\2740Vg\275+\035!=?9\210=\001\237\363<\013a\032\276\341$M>\353\351\362=\013\305\255=\224\2165<CP\327\275\337~\323<:\302\250=\361\301)\276\373_3\275=\257\333=-\372\255\275\376Z\035\276\211\332M\2759\226\357\275\246FI>l\270\006>G\001\200\275g=!\276\3338\003\276 {\027>\235\253I\273kF-\276C\353a=4\312\027\275\231\321J\275\364\367\333=\254\250T\276Qjl\275\010+\236=ew\273=\234Z\250<Z((=\007\337\302\275\316\317\'\276IM\306=\017\354\204\275|\221\376\274\327\224\256=\030\321T>\266>H\276\271a\026>[\3718=\372\215\326\273\373\224\335\275.\017\317< i\312\275=\275=\276\372GB=\332\214\306\275\343\356*\275\333dF\276C\210\306\275\322\354\217=/t\342=Gt\307=\007;4\273\324\372\224=\326\3649>\327\001O\276\242\206`\275L\023/\276\177lG>^ST>)\220D\276\323A\035>[\365\360\275\313\334\r>\377\023G\276\026l5>\365d\260<\236\377\013\276\233\336V<\255%\014\276o\351\267=\030>\004>4TC\276\'\005\215\275\336\202>>\222\336\">d\275\273=P\352-=Q*\364=\016\231\033>O\362\267\275`{\r\276\321\t\007=I1L\276\2351\352\275\352\3035\276\025`\333\275\017=\314\275\023UB\276\257\2178\276\333\355%<\245*\265\275l\200\001>:J\311=IE\004=\241\271\005\275\273\014\022>\351aT\276\253W-<%t\336\274\003\276\004=a=D\276\020\321\343\275\354\007\303\274\033\203h\275j\t\013\276\016fF>\233\231\035>$\033\010=lwC=\3421\002>!\344\356<\014\222Q=/\257\234=\000=T\274la\237=\032\3761>/T\215<-\353\205=Y\313\211\275\242\305\037\275\216<\265\275\207k\001\275\2633!\275\\\210d=b\314$\275\257\016\317=\220\275\372=5\t\271=\236\014\244=\263\332\324\275.l3>\323\341)\276%\223+\276\310\017\303<\350;\345\275\201h\010>\374\342N\276_kF\275R\302\337<\350e\003>GN\034\276\242wA\276\334\345\036\276\364\276\330<\201\346\335<\033[2\276U\355U\274\007(6\276+U\n>\334\036\332\274b\243\313\273\235\034\337=\310]\033\275\031B\007>\321ZO\275Z\272\363\275\231I0\276\257\371\275\275T6N>\336\0062>.\336T\276\004\r\311\275\217\226\026>\0319!\276\311\004X>\000\247H\276\023\343L=\311\374\242\275I\023.>\333\276\272\275_\234\027>\356\232\201\275\364!\207\275k\032\342\275\317u\221\275\265\020Z>\245\274E\276\204/4\275\036\003\025=:\027@>(\273)>P\257\003=\277IP\276?\273\031=r\036+\276\n1\232=v\367\'\276\035h\037>\271&\001\276\\\037\262\275\370\220\340\273\350\371I>?\242\347=\250\356+\276\007\336\002>\213\247\253<\014\0070\276\251A\237=\275\n\001>(\317(=O\370\023\276\327\001\335=?U\342=\3246:>>\300M>\257\007y\275\315\322\037>\027\017\313\275\375\377\032\276Y\354\342<3jT>\2120J=\231\377\236\274\243\344:\275r\363\302<?!E\276iy\032>\316\250\372\275\343\223\375\275\251\207\n=\263,F\276\311\002\376=\365\014F\276\177\212B>\204\335\300=W\360)\276\207o\310=\262d\200\275b54\276\266x!=\365\231\005\276\210L(>\010\025\2627\372X->\361\320F>I\322\376=A\361=>O\303\265\273\3757d\2751\354\235=t\360u<j\223\026>k\341\370=\266\311\032\276G0;>\360T\227\275\302\365\304\275t\254g\275\216\014\251=\034\262\014\276\242\265!>h-I>\244^T\276\021\177\212\275_V\036\276\301\272J\276\345\037\352:\341[\315:\3314\017>\336\022W>\'\216*>\036-,\276\362\025@\276\203\345\372=\343Sn\275\226\350\301\275\314%Q\276\001\222\252\275|\026\304=\253\006\t\275h2\225=\014\373\022>\356M\205=\350\201\177\275\3070$>2S\222=%V\313=\3456Z>\240i\277=2\'\307\275\332q\001=\3101\214=\017\'\000\275d]\223=\332\030\246\274\211\266\010\276\263&V\276\343\315X\276z\243#\276\225\266\360=a\366\026>\021)D=!U\205\274\344\326\312=\343t`=\300\371\016>Pm\347=U\361\244=\202\211\016\276F\204\312=$@ \276\253\270\357\275~\232\005=\235\217\313;\017\216+\276\354\000\326\275ih\345\275\363\241\263=\203\332\006\276\334\000\330=\235\246*\276i\327X\276\030\275Y\275\273\301A>\n\013+\275\177\324;=B\364U>ZC@\2765X\302=o\002 >\223G\315\275\251\363#\276\221\273\013\276\033\n <Q\212\007=\t\236n=6\254\037>\022\225\202\275\373\374\212\275\204\245\331=[S\221=\003\035\247=\030\205\017>\320\037\360\274\221\366\277\275\224\365\">\340\212\256<3\261\304<;\237d=\340\0314>\313\207\016\276\024* \276\266O\257\275$\0146\2767\233\270=>\246%\2767\325\003\276\031=*>\265+\017>w\n\036\276]\022K\276\347\223\034>}&\243\275\203\244I\275\206\033,>\\4\340<\026\347!\276\202\365\024>\320\320\303\275%\326U>\261[5=\"^\362<\t\327\303=-\304!\276\261-F\275\032,\267=HB\204\275o\026\203=\267\2563>pm\261=\031\223@\275\363\312\357\275[\000\311\275]\"\325=\345l\331\2752\\\234\275\357\025+\276\343\303\367\273M\336F\276\337v7=\235\362A\275n\344\354\275\330\200\217=\r]\260\2755O\364\275; @=N\300*>\005\021\344\275\323\375\207=\345\240*\2759\2102>\006\r\032\276\376\250\347\275\210$\371=\332:A\276\256\306\003\2769y\202\274E\360[>#\301\364\274\2133@\2761)M>\270T\020\276\254\201\013\275t\337\322=n\340\265\275\034{*\276\"\242\357;k|\200\275\243\264\360;\210\026\030>y\351&>\377S3\276+jC>\2251\327\275\342\037\226\275\343G\006>Gp\334\275\034\306\205\275\\\253\342\275}\311\026>\372\014*>~n\001\276\355C6>\223\242\217\275Hi\316\275G\346\333=\352\325\270=\324\331\004\276x\377+\276\007\010\024\275\214aU<8a\215\275\341aV\276t\226\223\275\353\245\354\275-o)>\317\036\025\275\200\333[\275{M\030>xU\376\275\352\364 \275\025\257\222=\'\326=\275U\026B\275\205\317<>L\304\032>\316\355\261<\254\222\235=\356=\234\275\000\271t=\327\276\371\275:\004\310\275W\303\034\276\324\272\272\275\264\242;\276\253\300)\275\322u\220\275\257m\020\275k\204\202=\224\260M\276\247\330\317=A~\357\274]D\211\275_\214/>\002$\002>\242\232R\276D\261\314<\266\002>>\266\2246>&+\265<\317\351Z\276\247-\303\275\0219\003>\202\365\353\274\022\216\322<\3566\026\276e\263\375\274&\351\347=\245\033\355\275iaT>pPX\276\014\256\r\276\'Ib=\372\274\303=\376\342\t\276{\030\'>*\364\361\273\014\247\034>E(\336=\373]\351\275\264\024\034\275\271A\314=\215\275\024\276\202a\016\2761\216\273\275\273\3455\275\016.\356=Os\320\2756\237O>eT@>d\305\362=\304z\341\275\356\ta=\337\341\031\276%\003S>\211\224\323<\341\367*>\202D\032>_\252\275\275\236\202Y\276\223\364.\273I\243,\276\312\236\375<!gM=\232\255\220=\002\\\351\275\032bh\275h\3174=\267\361\027=\221\335\020>\335\364\363=c!.\275\007E\031\276e$4\276i\017\314=7\343z\275\036I\023\276\360)c\275\373\\\374=!\2155>\254V\t>gy\227\275\316h7\276\037\370O\275\026\364K\276\364x\271\273) \341=>@/>\375\356\376\275\240\272\037\275\'\023O\276\224(\313=\2702\355=p\274\241<N\214\241=\0279\037\276$\017\333=\241\303\027>#\240\344\275\201\006\004>EpN\276\034\250C>\314\317\024\273\252\334*\276&\210\036>QQE\276\353\307\351=\027=X>\336|M=/\353\005\276\353,\"\276\304\327\264\275\273CV<\377c\007\276t\315\370=}\274\255=\216\031\314\275\233\r6\276\036\225\r>\361\025\215\275\365R;>\204\010\253\275\337\277\233=\224\256k\275\205\341\017>2\224 \275\300\303T\276\370\\V>\221\374t=\227>\371=<v\031\276\223\263\374\272e\201A>pwF\276?A(>\373?B\276+7\216:\265y8=(kj\275\253\231\255\274\257k\347=^50\276O\215\001>y\230J>\361SJ>?\300\304=qB\333\275X^B\276\276G(;<\031I\27674\215\274<\222\n=\333;\233\275!\327\235\273\334\313\301<\017(W\275\365\250\'\276\350\335Q>\212?\025\276\253\033\377=V\364\366\275wd\202\275\313\021&>q\203\376;\362\331.\276`I\204=\036(\311\275\363_\034\276\351o:\275\014:&=\'\352#\276\233W\256\274\370\"\211;\3718M>\337\2515>w\236\017\276\340K\320\275\337\250\013\276X\273@>Z\2506\275g\365\340=\357 @\276y%Y=\373\343\227\275,\270\013>\343\000O>=f\267=c=\264=En\317\275\357\272\033=\325\362F>v\332A>\231p:\276\247g\227=\004`\373\275Ih\253=g\301%>?R/>\227\033\005\276\254^\252=\222K\200=\367uF\276L\2317>^\372\006>\024\373_=\272A\\\275\274\017\266=\334\373=>U\007L\276\033CU\276\373\022M\276\237\010u\275\331\346\250=ah\016\276{\366\036\276Vw\311=\214\264\212\275\261Z\027>)\206V>\376\3475\276\263\\\360\275\354W.\276\314\265P\276\355\372\312=\364\270\334=\212\247\021>y\230\376\274g\365W<v\031\332\2755\254\326=-\343=>G\354\305=\330MP\276\223\320\304=\377\367\000>\332?\221=\242\252\001>\365\331;>#\200\021\276\330`\005<FiN\276\237jU\276\276\277\010=\227\035O=\263\212\226=\370r7>C\337N>\227\206\233=\276\350\030>R9\000\276(\254y<\351_\317=!\301I>y\203,=\200\256\375\275\010g9>%\022->\314\321\320\273\004\031\033>\234m\'>k3\331=7<\250\2753\337r=\210\271!\276\342)\326\275~\261\230\275\210\327\020>\240}O\274\221v@;\353|%=\022\330Y>\0052\334\275\227\263\235<\306\316J\276|\247D\276\261\332 \2766O\224\275\2275\222<\257\010\362=\'~\313\274\333MA\276\373D\343\275z\367\302\274\336l\273\274Y\371\274\2758k\341=\220?X>\356F.\275R`W\276<\261\020\276\203\014I<\006\2347\275H\243\311=\375\020\025<\356m\246=/\233\006\276\25031\274\2203\324\275\216K)=\276q9>@\377\004>\360O\262\275DS\013\276\261Z\215=\277\341O>\251\270*\276\020\245\033\2763u\254\275\337\260 \276\360\036\305=\350\377\337\275\034\370\004\276\307\256\351=E\277\214<3P\233=\014\3076\276\311\0063\276\206>\237\275\351u\267\274\343@\002>1MW>\033\223&\276];\360\275CuY\275+J\r\276{bN\275u.\020\276\247J4\276\226u\335\275\374q\377\274\3704\344=i\202\303\275w\320\374\275\237\300\004\276\001\305\343=\023f\007\276\337UX\276\003\371\237\275l\336\204<\334\255_\275\2346\302\275?\377\310\275\272\021\225\275\246\234\237\272j\325\261=\0034D>&\313\n\276>\265\344\275\360-5\276\324\376\001<\200=V=\356\3105\276\353\251j\275N\2540\276\302`9>\236z\253\275\322\210\003>\326\217*\2760{\010\276\216m\007\276\017>\242\274z\361Z\2767\344h=\203\r\226\275=\205Y=\301 C\274\037D\'>\317`\340\2747\263f=2\345-\275\270\340\234\275\342o\356\275\033j\027\276\227\177\365\275\322AC=\260\333R\273\357@\314=\320r\000\276\r\307*\275\250v*\275*\2077\276f\212{=\226\323O\276>\033$\275q\202\036\276-v(>\256\"\026=\003j\001=\364\270\031\276Wv8=,\242&>\250\335\314=\017c\247=\211l\377\275+O\237=5?\003\276\226c\322=u/\257\275\203\005%=\330\037C\276\205T\336\275\250O\002\2768\033Q\275n\331V\276\000J\006>\224\231\364\275\034\314\346;\325f0\276\330\347\034\276Z\000\224=\t6\017>\222\000Q>\322\220X\276\375\211Z\275\007e\027<\r\271\205=^]<\275\033\027e=\223\253\341<\336\023\222=\371\271\330\274N\263%\276>\342O\276\371\036[;\311\226O>\305\314\226=+\307\332<\360\\3\2767\360*\276P\227S>\325\224\211=\262YJ\276\376\302\016>\366\241D>\177\314\331\272wN\227=\360\364\321\275\224>F\276>*\321;\360\034\n\274\275\254\230\275\302u,>\267\277\343\274;\233K\276\266\354>>\037\2649\276\225\317\262=D\001\325=G\303C>\361\036\213=\237i\346=]L\361\274\247>\245<\327~\311\275\217\324<=\320\204t\274\217,U>/\236\014>\353G\211\275A\254l=\255!\177\275E\247d\275"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "K\000\000\000K\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20000000298
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 75
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
