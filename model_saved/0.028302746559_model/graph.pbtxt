node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 225
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 225
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\304b\317=K\257\355\275\221\337\016\276\300\356\342=\200\351\334\275(\"\315<\350c\360\275\334Y\260=R\237\004\276\3431!<\317j\257\275\225\300\243\275\005v\265\275%\277\025\276\223\2059=\254A\034\275\2573\224\274q\215\312<\266?\327\274\367\026\305=Z\363\021\276 d\257<\250O\377\275\3358@\275\214\350`=W\235\350\273_\253\366=<x\030<d_\017\276,~H<\256F\221<8\245\354=\277{\364\275\016f\007\274=\204\215\275t\370}\275\304!\212=;\024\353=\245\220\020\276\t\256\213\273\263\365\350\274\326\237\315<b\261I\275>h\353\275)\272\022>\021&\005>N~\225\275\265\255\017\276(\t\004<\256\245\024\276m\276\205\273v\"?<85\007>j\365\255;v\345\332\275\355\211\215\275\2040\303=\0201\366=U\212\250=A\341}=\005\222\r\275<0\306=\026~\023\2761-\214\274\236\241\327\274\247la=\246l3\273\341\037\021\275fO\250\275\247\034A=T\203\214=tP\346=\261\311T\275\230U\236=0\357\356=\210r\022\276\013\315\'=\305\000\355\275\312\200\221=\033\370\317=Bc\234\274\301Y\375<u\267O\275l\322\033<*\310\013>\014\227\312\275+\262\276\275\271W\034<\271\353\327\275\266\327\021\274\222\364\352\2754\322\314\274\364\224\031=\212I[=\005a\211\275\325u\232=\325R!\275a\257b=P\202\037<\231\216\370<T\3015\275\217\233\275=\301\224\260<\362\312R=6q\377\275\253\023e\275\030z|=d\346Q\275\230\234^<\351\320\232=xt\206=\241\003\227=\225\276\001\276\2105\340=\321g@=\363R\304\274Q!\201<%\254\250=\002\371\342=\036\327\377=\336+\003\276\313\237B=&\033_\274U+\034;\350B\230\275\217\307\244\275\370\361\010\276\013\334;<\3146\344=\375aH\275&H\257=\201\303C=\300\003\304=?{\357\2756`\223\274\312j\316=g\031\223=\021dW\274U\263\r\276\225\001?<O\377\334=\024S\374\274\2716\246\275\253\261]<\033\347\004\276\023\025&=~t2\275EY\371\275c\311\313\275\302\233\304\275\312U\016>\242yP=\342P9<\t\252\005<\336\243|\274\362\275\243\275\3603\251\2759\335\270=R\202^\275\n}\274=\315\271%\275eYl<\331f\245=zY\250\275\347}\333\275\016\266.\275\305\'\003:\364\270\326\275`s\004>b\221\006>i\014\204=\262\337\344=\2645\000>\333{\232<d\250\360=j2\336\275\313G\020>\025\326\326\275\027\007\340=\267\335\006\276|\367\036=\247\375\032\275\362\221\271\275\006\302\366=\t\315\002\274h\331_=T\013J<\330/\014>\366\210\273\275\347\315l<\211\257\002\274^!\325\275\027q\236=\177\324\273=\243\257M\275\333\261\311\275\034\307\214\275\225,[\275\341\024\256<\273\000\323\275W\224\305\273\201F\007>\361\305\333=\245\267\257=!\220\344=\205\266\005\276w\361\332\275\361\214\304\274\240\224\216\274\336\235\n=\177\033\265\275\376\275\005>\252\227*<\213\333\217<\250\324\240\275xVt\2758\006\206=\002\265\211=\243\010\256\275\225F\007\276I\321\310=\003I\002>\tA8\2758\237\325\275\372\3449=U\361\014\276\205\227\265=\331L.=\336MO=\031u\220\275]<\002>\331\361\270\275\'\374\306\275\322\261^\275G\030\224;\0029\271=0;\335=_\230\001\276\030k\202\275\n\223\317\273\374S\234\274\244\n\034\275\232\337(\275\207S\223\274\312\321\236=E\316\266\275\275G\314\275%\007\247=0\355\200\274\307\326f\274\373\226>\275@\032\007\272\213\242t=\222\353\003\276\215w?=\244\304\254=)Qu\2751t\005=\301\271\356\275\200L.=|\037\005>\310\307\363\274^\333a=\202\247\257=\' \263=\031Y\014\276\337q\327\274xz\315\275[\316\014=\001\274\350\275\254\253\243<_\001G=\n\224\377=\353:\300=\351\370\336\273\222\"\320;q\347\004>\354\335f=^g\021\276,\307\007<\252\356\343\275\222 =\275yv\320\275\211%\323\275\206>P\275V\310\350<\211w\255<\323\013\340\2758y<=\003\346\371\275\375\222\000>GP\026\275\361\354l\275\314\326\370=\261\301\025>\243\220\237<\001\002\334=\226H\356\275\254\030\026\275\264\277\373;u\241\366\275\251l\324\275o\212\014\2761\323C=\3144\3265\227\034\254\275\360\'\022\276\360\232\212=\321\227\344=\331\356\202=\233\222p=\306%\230\274\255\203\323=\364.\022\276*6\314=\002$ =\351\306\n=8_==\032\241\215\275DV\251\273\252\313\020>\327\246\025=\255\361\330\275\226\250)=\254V\325<@\016\200=\354\261\006\276*\226\024\276\366K\016\276\333\014h\2744=n=\205Y\025\274D\215\022\276u%\316<\272\237\252<r\377\262\274\236\030\203\275\326/\306\274\336\027\203\275\275\260\035=\303\013\206=\340\307\307=X\206\006\276=\370\264=\315U\364=\344v\230\275\253.\216\275N{\033\275\0221\325\275\217Ct\275\025\237\212=x\231\325\275\016\377[\275\315\032\327\274\244\320\273\275\214\315\332\273F\020\340<f\027\325\275\262\315\223=\033e\231\275\2142\325=\251\252V\275\346\210\204\275=;\337=\304\334\014>\362o\234\274r\017\234;\"\253\326<V\227\001=\202G\316\274D\305\314\275\254\377\354\273\\\301*\275\305V\362<5\304\007\274\007\315\370;\031^.\273j\340\333\2752zK\275\271\306\302=\245\373\363<7\366\020;\330\371\374=e\361\345\275iB\364=\246\235\315<M%\002=\374\270\n\276W3\005>6Q\303\275\235#]=\304\367\264\275Q\003\356\275:\243\276=ZSz=Q\352\\=\200\007\013\276\017\310\276<n/\342\275W6\325=\354\025\264=\267\304\223=2\016\304:\231\363q\275%\326~\275\220W*\275\353\037\020>\3141\222\274*H\214\275\2550\026=\240\340r\275L\017\233=\366\354I\275\001\'\215<DO\201=%\036\374=b\362\361\275\036\274\351<po\354\274\2109\213\275\013\353\010>\341\362\'\275\323\301\303=\337\017\365\275\322;`=\275$\226\275\355\264V\275V\334g=\355;\204=g\326\002\276\253\032\006>|\212\240\275\037A\277\275\351E\362=(p~=\027\217\010\273n\200$=\360\026\\\275\225\224e\275\240?\026<7$\223\275R \273<|\254\325\271\313\364\307\275u\273\230\275\222\344c\274\211v\005\276\224\312\354\2751\324\275<\353D;;\251\353\010\276\237\325\327=\005\010\217<\310\345\n>\261\316J=&\270\244=Q\3128\275ij\245\275\2702\212=\300/\304\275\006n\274<\364I\330=\257\2216\274\233\312\r>i\244\336=f\316\024\276yP\004\275\360\350\014\276h\266\322<\226\205\014=6\"\340=gr]\275\326$\374=b1\273=\226V\366<\245P\276\274\221\301\024=\306:\334=\312mc\275\247t\345=\307\324\300=\371b\325\275=\242F\275\270-\203=\013P\232\275tr\261\275\3709\235<\026\200\020>\305\001\251\275\302\355\335=$\215\003>\003\325\362=\252x\237\273\204\020\335=\355o\215=\224\366\253=\363\265@\275f\254\320\274\364\372\007>?A\007>\350z\271<\202\027\237=\005\215\326\274\354\027\322=\272[\301\274\t8\020>;\030\220\275\264\0303\275\222\305\275\272l\323\253=vtl\275\307\345\327\274\251\307\017>\207h3\275X\251\244\275\007\356\226\275\321]K=6\3254\275t\216\275\273\314\020\346\275fY\330=k4\250\275\036H\025>\374k\226\275<\236B<\240\002\"=\3245\235\275\337\233\253\275,s\315\275/\274R\275\266\360p\275\340a\332\275\373\325\257\275)@\306=\221F\206\275Q\301\313=\234>\211\275\227/\306=\3204\317\274~j\252\275\013uF=\313\027\250=0:y=:\014\300=\313l\253=\351Hy<\244d\r>F\032\337=\275\356\'\2751[\305\275r\275\004>\200C&\275k\341c=\203\021d=\211x\355=\261\270\2628\210S~;\305\227\307\275\223%\240\274A\3031\274FJ\255\275*\346\016>\036\344\002\275\344-\025\276\030\315\2749SZ\317\275\374(\002\275S-8\275\3376A=\245v\025\276D\333\252=$\026I\275\3132\261\275:-\212=\032\236\346=1\244\244\2747&\017>I\357%=\263\350\206=l\3253\275\311\373\273\275:\311\316;\372V\003\276\033?\t\276\356{\240=\235\273\030\275\352\031\372<\344\330\251\274\336\256\206=\014\017\231=\275kK<\204?\244\275\326u\214=\310\235\320=\017\255\244=\034\016\207=G\245\205=g\344\005>bE\335\275\341\'\315\275\377\233l\275\256+\210\274\206\262B=?\242*;V!\231=\301=.\275%\217\200\275\365\"\332=\214\362\246;\007K\010>\213\224\310\275\333);\275\030\336\311=\240\221\255\275\311j\355\275\257\021\245=\251\264\214\275\235\257\014>\327\367\372=5\273<\275=3~\275\360\024~\274\343\006.\275\352\337\253=\365\"\332\275\005 \341<\377@\242=\tv\234\275c\304\267\275\354\254\250<\r\005\264=\306\037\026\275 \311\372\274\267\276\005>\231\332\302\275\'\031\226<\035\252\244=\3349\334\274u\002\243=R\202s\275V\021\224\275\344\341\274\275\254J\270\275b\2117\275p\212\355=G\356\"\275\3005\033=\032\353\020\275u\006\022\276\261\331\275<][\257<\177r\353\2754\205L<\355\261\036\275CU\200\275q\003N<\251;\251=\245\335O;\331\352\361=\252\377\354\275\272\212\346=\307\022\360<\347\232\000>\324\241\210=\216\343b=\235s\250=!?\312\275\265\337\317=Z25\275V\375\347\274\261\345\265=] d\275\277\270u=\372\202\022>W\217|;8\003\256=\315t\336\274\260c\355=\024\001\275\275\227\274\250=1Y\036=\365\211\347\275\240\326k;\007)\315<8\313,<\344\037\252=\236#\352\273R\002>\275\346\026W\275P\246\255\275\014\223\004\275\005\032\025>\351\3029\274\352\366i\275/\203\244=\355\266X\275\234\301\221\275\270\211\316\275Z\031m<\220Yg<\003}\303\27535\030\274\324N\243=-\007\020\273\246.\261=\333c\017>V\336\206<%\376d<8Z\360=\225\032\312\275\361O\256\275<N\021=\270\025\237\275\033a\246=\307\310\355\275\353\002@=\340=Q;\234\3304=b/\321\275I\366\316\275yW\230\275\016j&\273\243\216w=\272\362\231=\221=\200\275\253\010d\2747bc=\331\\\206=\r\304\216\275C\366\252\274\377=\374\275m\261\r\276\217\023\324\275%\242a\275\271\177\23084\250m:pe7\275\014\373\034=:\311\342=4\3705=o#6=\254\326\354<\363\031n<\323\274\000>\362\250\r>F\340\034=\317\274\215\275\376\016\374<\026\250\240\274&\247\257=U\006\326=\311\346\237\275&\304\342=^\244\331\275P:\271\275AS\351\274a\261\034:\332\330\031\275\215=\001>,St\274LQ\234\275W\3367\275u\007\n>\014f\202\275\271\350-\275P\\\276\275<\020-=\003,\231=\347\211\021\27680\212\275\230\236\353\274\0223u=@\007\210;f\313\352\275\215VP\275I\365\007\276p\217\016>#T\342=,\214\223\275\266\306\034= l\'\275^\365f\275\204\2152\274\277U\325\275\013\357\2749\t\372B\274\370\360o\275[2\024=T\nh\274\262\323\004>\177\377j\275\341\375\232=\230N\223\2740Fg<\035\265\260\275%T\014\276m\365\222:v\032\355\275\203\340\027<\034\253\240<?\263\355\275\331\245\307=\213\356E=\224\r9<\237\264\000=\275\026F=\033\017w=\373\376\237<4\347\375\275x\351\201<F8\277<\220p\266=6\347K=L\272\323\275Kv\226=\256n5\275^\323\331\275\215\201\334<\367&\233\275F\274\276\275\177\353\237=!\310\201\275\336\367\225\275\335l\"\275\327E\235\274\212\273#<\326&\225=z;\307\275\363$h</@\021>F\231\001\275A\217\377\274\307\330\265=\202\312\340<\250k\320=\363\0254\275e\013a=?S\026\275\312+\246<\376m\345\274!\266\004\276\023\030r\275\013\360\004\275\237\364\334=\213\217\235\275\206J\250=\025\246\002\276\021H\210=3.\357=~\230\'=\016\014R=\250\331\005>M\032,=\252\210\376\275\215\317\272\275\323\232\317=\335-\003\27451t\275\245\033\333<\032:m<GG1\275h\r\316=\006Y\251=\257\375\261\274\271U\364\275\236\373\363\274\361\224\335\2757\324\267\275\343,\006>\022@\270\273\370\313\260=z\314\024>\203\300\242=\003\324k<*\253\351=$6\354\275}\205\216\275\211m\305\275\2326\341\275T\304a=\027?L=\003y\244<v\231\354\272xx\003>\017\211\007>\326*\273\275!D`\275\2131\226=\362v\033\275\345y\264\275\320d\355=\226\006\255\275{\220\000=0\324L<c\363F\275\307\262\t\276\361\303\352\275\354{\343=C\\L<\316\311\211=\302\026\257=|\366\374<{\234\346=\024\201:\275\372j\257\275\325\256\025\276\271QZ\275Z\033B=\365\375\345=\006\364q=\034\241\207\275\364\251\277=\264k\264=\253\331\245\275P\310v=\326q\376\275\007Gf\275,\374m\275w#\272=\220\323}<\353\206\033=\376\267/<\230,\006\276>\376-=UB\024\276\276\260\333\275}\336\253\275#\235\352<\231\034\301\274%?\366=\237Y\304<\035\364Z\275Nc\366<\363\270\265\274\0026\323\275p\275@\275\037\367\036=\335H\320\275\362O\273\275\276c4=\376So\275\367\260\017\276\246 \222\272\274Y\013\276\305\230\370<CJ\265\275\332\030~<d!\360=\t\202\251\275\255\"\316=\263q\\=-\002\307;\274\037\003\276\023\033\366\274\256\002f\275k\304\372=\251>K\275\240\021\002>\026\021\010\276I\366\307<\3046\345\275V\234]\2756\370\\=\013n\341\274\313\005\213\275\304>\361\274\300\201Z=P\276\002\276\243\214\247=\347\316\346\275\003\320\224\275S\356\214<-\025\226=\363\347\313=\003\301\304\274\320\234\365\275\026\276\014\276\371\014\243\274\331\376\230\275\363\350\026\275|}\277=@\213s\275M\212\317=\312\240\016=#\305\356\275\2318\024>3\337\r\275\232\036\246=\276>a=\346N\355\275\214\002\216\273\347b\353<\233\003\305\275\021>S=?\214\362<\357\005\233=\303Y\311\274L\344\016\274\372{\013>|\327\325\275\232M\006>`\347\010>\032H\275\2750\202\210;)R\210=\355\224\254=\333(\024\276J-\353\275&\010\210=\222\007\255=\240\322\327<\310[\202\275\277\336\005=\214\330\355\275\234n\010>\341\230\023\276/\326\023\276\224v\314\274\217\265\244\274<\313\267\275\306\342\030\275\031\327\027=\021\177\222<\245\344+\275\205y4=\363\352M\275F(\356\275\357\230\004>.\346\345\274\222\373\361<Q?]=\352#o\275\210\206\t>\017\226V\273\254\013c\275\205E\251<\200\364\310\275\235B\250\274\036@+\275\022\311q\275\277\334\245\2743\320\355\275&\305\013\273\001\377\307=\264?\254\274|}\212<\302\036\212=\360\226\300\275Y\215V=\247\252_\275\374\237\t=\020v\004=\202\253\256<\370\205\204=\002\032\251\275\213X\212\275bN\254=H|x\275Q{\307\275EJ\213\275\307\n\024\276\356\360\323=\341\200\027\275\323\361\217\275\306\016\t=\360\234\332\275\353j\003\276\272\027\244\275\202\250\207\275XFY\2758\350\t=\020d~\275f}\025\276\336\345\325\275\230\325\014\276\013\001\303<a\236\305\275O\354\260\275\366\210\255<\361\311_\275KB\305\2743\335\233\273|\224\006>\256w =q\000\337=v\340\366=\257\231\345\275\340 \022>\362u\321<\206\354\303\275\355\335=\275y\237\343=-qQ<\245\263\334\275\373\241\310\275\207<\022>\204\346t\275\361\326\370=\020\216\034=\242\210\227\275\027\257V\275[)`=\022\030\210\275\216\256\024>\263\275\036\273\306\n\323\275x\224\237\275ex\257\275\033\002\023<D\231\004\276\002f\010>\367\362\351=\300\335\310\274P\203\313=\275\'\215=7\\\310\275\023\030\006=|\320W\275P\261\n\276\221\342\274\275\020@\001\275N\264\332\275\223\241\315=p[\241<\307\370\006\276\036[\002\275\345\345\222=f\373\001\276\272T\021<*S\247\275\231\366\306=\335\345\025>(a\356=\017\244\325\275\262\332&\273\031\300\374<N%\333=\337J\277\275]\366?\275\333\336\301=\037x\262\275\333\007\366\275\321\214q<\242v\272=l\277\242=\271\177\300=\276L\261<S\330\351\273\304\300\251;\262\257\237\275\024\226\001>Y\210\312\275h\237\250={\261\000>L\214\235\275@\207\204=\021\331\364\275H\035\357=,\032\202\275\007\214\224=xD\216=R\245*\2753\\\246\274)\021S\273\366\325\227=.\177\022;m^/\275Q\022\317=B2\022>C_\336\275F\371B<`\262\204\274>\000\315\275\021\003\340\274\212\340\247\275\307\006\016\276zf\344=^\216\372\275\030\3270\275<\'\262\275n:\304=I\024\256=\231ao=8\341\220=\370y\n\276\265^|=SU\004\275\376B\250;{g\005\275\002X\215=\315D\246\274\327d\243<\344!T=4?\022\276b\215\303\274\322\350\204<\337H\005>I\253\002>\265<\211=\344\005\217\275Q\230\024>3\253\375\275t\335\376=\270+\240\275=\031\344=>\006\250\275[\330n\275\236\202\366=l\321\245<P#\215<A!\220\275\376\361?<\3425z\274\010\r\300=\\;\207\274\037\213\027<\234B\221\2749\334<<a\234\201=\375\027\016>\343\022\223:j\014\301\275\355\350\254\275A\226\r\276\320\257I\274E\241\312\274\037.\354\275\373\177\313==_\315\275\325\257\010\276+\334b=OO\017\274|<>=\361\342\025\276\366l\373\274Y2+\275\332\255\005\276\377\311\212<\226R\372<7x\221\275\240\276\001\276\342\204\256\275\rfH=\276\252\301\2757-\304=\276\341e=\0130Z\275\270\214!\275\321;\305\273\001{\336\274\347^\272\275\006jf\274\363X\364=)x\201=U\364\275\275\212\027\211\273I\233\326;G\305\234\274\2217\362\275\231\000\014\276Jv\t\276\316\216\221\274%\021q=\010\316\333\275&j\214=q\033\226\27555\376\275\206\366\004\276\314Z\270\275\247\277\021\276\261?\035\2752\t\314<\001F\001>\3679j=\247\233\024>F\331\320=7\000\257=\274H\002>\201\005\356=\356f\236=\034\n\254=\351W\336\274\023\036\024<C/\r>~\262\302=\320\2723\275\357\334\212\275\305m\253\274R\362\361=\211\377\325\275\357\363\212=\336\321\221=\030\002\275=\204\364\306\274aq\333=(\036\363\2754\313?=40v=\243\006\024\274\313H\024\276\216r\271\273\372\372H\274\254]\017\276V\324 <\264B\367\274\264m\317\275\325\241\017\276L\274\340\275}X\345\2752\270-\275\303S\203=}\t\367<\315*\322=\363+\210\275\201\230\316\275n4\311=l\356\023>\254\216\241\275\203\362\361\274\212w\006>\331\347=\275Q\227d=h\000\325=\277E\254\275\340J\013\276\322/\247\275D\344\006>%I\313\275\027\262N\275\353h\362\274\334{\375\275c\303\026\275B\026\014<\311\233C=G\226\345<\315Q\301\275SMd\275\302\344\016>\256\353\236\275\335K\307\275\273b\350\275\'q\324=\0337\003=Bj\356=<q\367\275\274\006S\275\206\374\211\273\\\216\007\276Ts\020\276\305_ \275\2508\300\274\372\033\024\276/\014q\275\230\241\264\275#\273!=\375\351U\275t@\322\2756f\245=\027E\313=\242\273\255<\331\233\205=\254\352#\274\333g\361\275J\215\250;,T\023=\261\0352=Q\216\001\276\036\247\242<\330\324\222\275\374\302h;\203\262\246=\315g\270\275\227l8=o\022\022>\257\377\002>y\346\207\275W}E=\023\334\256\2738\362-=+\221V=\350U\233=\366\231\360\275\035\205\203\274E6\005>\324\223\223=1\333\031\275\206_ <\017\t\222=N\251\007>\242\372%;\023\021\362\275\361\306\237\275\242v\321=\263\006\373\275\312\254\002>Q\331\355\275\220F\005>\316\005\201\275IA\217=\026$\017=\212`\301=C\367\270=\334:\372=~\251\022>^1\340\275\343\017I\275\365\327\022\274\231\346\222\275\266\200;<\267\'\023=/u\265=d\324\321\275\026Pb\275v9\274\274\366\230\000\276\261\302\220=\307\261\214=\0337\204=Zy\r>)\326v\275\260?\r\275\031\306\n\275^\200\030<\223_\006\276\312\314\264=\010\257\264\275;\316\331\275\355A\020\276\340\257\006\276\333\313u\275\215Tm=\354\207\326\274\326\234\255=S\332 \275\261\205\r\276\267g\342= \253\377<Ym\335=\360\014\021\276\204Q\336\275\314z\257\274\177^\263<\323\305N=\367P\360=\220\300\014>SS\331;\240\275\000=\366h\371\275!\243\201<\021\203\361\275\201\203?:m\357\231\275\352\037\246:s\371\272=\370(\022>\300\330\223=\265\217\203<\233Gq\275\3507!=\010\205\200=L\321j\275\021\217$=\r\322&\275n\252\t>\034\266\346=\022X\362\275\277\356\234\275J\302\304=hn\277\275\'\255\313=9\273\006\275\261F\212\275\253\222\302\274^O4=$\372\337<\224tw\275#\271\350\275>n\001\276\013\370\245=0\260\333=\010\236\204\275\365\255\345\275\272\324L\275H\344\220:G7\250\273\323C\365=M\344\305\274\312]\276=\345\225\215\275A4\317\275]}\007\276U\342\000>\362\211\207\275\276\331N\274~\007\014>N$\333=\323XF=qq\372:_]\206=9V\374\274Gy\023\276sZ\002>\310x\373<$\357\363\275\261\322\346\274\242p7\275[~%\275A\315\241\275\3644\353\275Z-\203\273\365j\306=|?\014\276\021?\311\275\235\360m\275A\020\020\276.\372\214\275\315\371)\275\330\310\240\275\001\\\225\275\243De\275\257)\333\275\316Vf\275\177\231c=\360p\302\275U\244\263=[I\021\276\267\276V\2753<\223=\025\274\235\272\362\210V\275%p\354\275\307\357\200=Yg\266<]\003\375=I\033\003>\016\263\265=\240\367\367<\223\345\305\275M\343M\274NM\323\275\367\002\224<\245\327\023>>\375\325=@JY\275\003\357\017>\330n\347\2757\004\'=j\362\227=\234\026\022\272\362\323\307=%\312N=s\234\224=\024\343\'=r\211\016>S%\035=k_\257=\222`\235=\242\263>\274\370\241|\275J\276`\274\332\260\252\273!\016\334=\354\245\275\275\233\317\332=&\234f=\214\262p\275\376\236\363\274\254|\345\2754%\301\274\2073\332=x\000\030=\033\310\t\276q\2637\274\001\025\003>H~ \275\353\335\303<\317\255\003\275\235\013\001>\253\216\250\275\303t\036=~\270\032<G\320\307=\213B\020>\303K|\275\317\035\317=\351\267\374\275\326\323\215=\211\r\311=4Yh=f\200T\275SP\302\2757\302\033\275F\311\346\27590K\2752p\332\275\024\214\355\274\353s\020<ZSD=7\310\203<p#\005\276\321\211}\275\332\254\304\275a\213\354\275(A\327\275\301P\337=\304\375\256=\307\353\221\275J\274\014\276\325\221\222=\217\367\342<\255f\037\272\013\200\225=\337[\220=]\354\213=\025\'\317=\316:\r\276C\235\325=\026N4=\210\204\342=;\363l;\205o\307=\362\255\324=\000&\n\276\200u\206=\"\355:\275\n\313\004=\013\351\001>.\302\272\274\332\267\334\275\211\236\274<\177M\337=\240$\t=K\362\245\275\226\272a<\205\2228\275\362\372\271\275 \363.\275,j\237\275\nU\230=qP\275=\212\300\351=\346\263\342=;\341\225\275\364>\367\275 \256n=\332\243\020=Okp=V1\360\275\016\032\355\275\005\025n\275\222\034\373=\347\256^\275\315\257\000>\276p\347=\226\362\324\275\332\250\211=D\312\035\275\234\307\343\275\326\320\000\2768\215\346<\343y\300\274\356\376\007\276\3702\206\274\005m\236<;\354\341\275<\023W=\336o\372=-M\371=\002\270\311\2756&\253\275\346\334\320:C\322\020>Kw\247\275\271m\243\275Z;\245\275K\177\344=\313C>=l\222\021\276\003k\357\275\353c\020\276\002\n\020>\236`\263=\223\271\010\276T\006{\275^\331\220\275`\342\304<\270\203\373\275\300\007\313=\220\016/\275\352j\200\275\252<\210=\275D\255=m+#\275\023\302l=6\214\313\275\276\222\223\275\007\251\222=\347\205\303\275\335O\377\275/\210\t\276\202u\325<*\347\364=B\250\362=^\227\346\274{H\005>\344}.=\360\244\306\275\326o\203=rK\220\275\244\020\021=W\"\276\275\206\310\327\275!\344\243=&\204%=\232\307\"=~\202\333\275\247\267\266:(mj\275\343\231U\275Q\007\024=\276\023z=\005\032\023>\005\317\337\275\244\205\224\274\332\331\235\274)\242|=\3146\362\275)\330\316=Q\222\332=\273\323\312\275\030\332{\275[Os=\265\303\301<\205\202\023>\202\366\274<\020\024L;.\243\334=\3341\375\275\223\267\343<\rj\024<\213\207\275\275E\346\202;\252\245\245=|\242\350=\236o%\275\377\352\334<4\326\364=v@\247\275\031\200\206\275\337T\215=_\0149=\027|q=\203\255\241=7\013\274\275l\201\301\275\234\316\342\275\334O/=h\313\004>\r\177F\275%V\255\275\214<\036\275U9/=\331\322\266\274\263)\326<p\365\274\271\3659\003\274\312\274\266<\357\220\205\275\231\250\003\274\351\257\013\276\334!\204<\3769h=\275Y\231=\372\262\255=!%\017<\362\036\247\274\306\375:\275.\327\236:\234\347\032\275\206\265Q=\314\025\177\275MH\301=A\276\\=\372\263O=\005\3100\275\334.\321=\215\345\362=\264\002\337\275b0\016=/\203\020>S7\343<\266_\273\275G\207`\275\376\232\346=\t2\205<o\321\223=Yp\014\276qDl<\206\177\236=\026\277\324=\356\321\266\275\332\222\\=Y\367\022\274Z\250v\275\371\033\331<\033\275\342\275Q8t=\021\322\246;\t\260:=\036\324\343\275P\270\257=O4\252:T\211\021\275\232G\010\275V*\323\275,K\257=Nk\020\275\311\232\303=\276\327\023\276r\267\247=#]\274\275\262H3\275\014\376\232=\005\032U<t\345\207<\345\314\205\273\022Y\270\273\237\035\342\275\252\341\226=q{\330=\tx\000\276T\256\351=\316\230Q=\352\225\000\276\256\337\022\276Wv\276\275.\203\001\276\235\375c<\375G\030=,r\227=\232xk<\306S\320<\022\302*=N\022\n>K\260\375\275\302C\335\275Da\252=\342w\306\275\210\220\016\276<\277\t=\205\357\307<\203`\260=j\244\261\275\225\263\375<\2175\213=\273\004h\274\346\017\r\276\270\2356\275M0\326<\026\260\220\275\016\302\013>+a\022\274\030!\022>3\373\233=r6\243\274x:\266\275!(Y\275i\213\023\2757(\004>H\014\204\272<XT\275b\334\315=\265`\366=z\237\365<\373\247\242\275\312\262\270=\r\002\275:\373v\306\275\033\034\014>\007\"\010=\223\345\313=\357\245\346\275\207\365\204=\335\320W=\262\037;=K\247\021\276\265\010\207\275\352\235\317\275P>\363\275\303\221`\274\256\310\370==r4\275zqI\275\220\243c<\270\217\372\275\274J\311= U\024>\373K\002\276\306\356\273\275\322\246\332=\366r\306=\353\031\346<\330\3242\275\234\342\270\275)i\202=\252\032\t>\202\"\007>\251\n\000=\243|\366=R\274\007\276\3161G;\366\023\365\275\n\024\204=\313o\362\275\355\177\024>\326\177\016\276XD\337=\032\254\025>\272d\021\274\240C\255\275\034!\355=\223a\007>\233\\O\275\327\325\362\274\363lu\275\210\367\255\275A\222b=\334=\244\275\320\007\002\276\000uE\275\t\343\223\275q\265L\275\351\254\245<\303\035\255\275\220\177\322=\246\300\363\275?\'\010>\242\000\001>\322m\206\275sN\021\276\034A\013\276\277d\273=\377\355O=:Jv\274\251Df\2746\026\376\274\212\270\"\275\3344\343\275Khe=\260\342t=i\n\245\272w\200\237\2752\035\001\276D\346\345\275\316\017\215=\222\265\016>\224L\330=|\375\353=\215\264\312\274\225\036\346\275\346\245j\275\375\244\251=\242\211\271\275\021\323\014=\240\366V<\2530G=\251!\230\275?\252V\274K6\016\274\322a\034=,\333\n\276t\200\347\275\034\036\t>\262\202\321=\223\\\266=<\371\302=\331\t_<C/\357\275\350^\336=\243\354\256\275@\307l=\206\356\316\274\177\251\326=`\262\242=\301\331\010>\177\250\266\275\303\347\323\274\207;\352\275\275\227\002\276M\216\006=NU\351<\3670\006\276.i\263<\2329>\275Mz\253=.\214\021\276\307?J=!\360\260=\000\275x\275\226M\021>s\246\r>\352\320n\275\351\203\350\275\264\321V=\356f\256=C\206\246\274\330\247\347\275\325S\347\273\341^\333<6\243\301\275\304\202\270\275\311\214\223\275\236\'\304\275\362\275\024>\372\r\311\275\255\260\214=\2468\275\274\277\261\024>\031\362\336=\204\352\210\275\0371\342=\021\323\014\276\244=\355\275\353_\246=U\314\247\275=)\375<=^\372\275\002\302\032\275\270\305\245\275\354\363\330<\214aG=\317\312\240=\033\355\002\275g\3372\275uD\013>\320\025\357=\013\211?=\321u\313=\006\240\203\274\0216\363\275\317\341\342\275\254\240\230=\217\250\217\275H(\024\276\262\227\205=\324\275\376< \377\274=\314\240h\275\224F\376<\350\352\006>\347\004>\275\207\313\340\272\335\300y\275n\325\371\275[|\266\2756\311\267\273t\215\001\276\355\312\216=F7\376\275]\274\340=,\245\262=E\337\n\276+\267\254=\177Q\223\275\276\222\356\275\035\303\303\275{V\314=\261\n\025\276h^\273<\261\313n\275\307f\224\275/\321\004>\t0\302\275\254\243\203;\334\014\370\274\342Sx=\002)Q=\342\250\256\275\277\001\363=\331\240\263\275\262m\254=\r t;\315\006\301\275w\327\374<6\tR=D\003S\275!3\366=\334M6\275\206\353\212\275M\230\031=v\341\347\273W\020\267\275\371?o\275\231\364\021=\271?B=\325\000e=\305C\340=%\377\013\276\311P\224\275\000\307\347\274\256\236\024\275\260\"\242\273\353^j=\366N\315=lQ\265=\267.\037\274\320v\n\276\224\241\205=\373\277\231=\271\211\370=\204\262A=}\222\232\275\034\036\322\275\227\320\006= 4\253=\360f\350=%\334k\275\355\332\305\275L\365\315\275\000\376~<P\325\024=\232\247\236=7\340Z\275v>\210\2742\240\327\275\222\321\020\274\247\"\234=w\237\316\2751\341\324=\020\001\352=\022\267\235=\007\301!=`f\016\2769x\346\274\177\tF\274\263\263\003\276W\262\366<lV\022>\246hp=\024\304\310\275X\004\t\2755\032\323\275V\213\003>\025\001^\275z\250\324=\217\276{\275\023I\353\275\337\016S=\335\300\323\275>\357\323\274v\353\215=\337c\235\273\250\266\033=U\305\245<\336\306\277\275\2757\\<\367\225`=e\267\246=\260f\016\276Sg\016\276\3066\204=\2134\224=\367c \275\264\r>=G\007l\275\2064f<8X\266=t\177\206=>\277\240=\356\257*<\373\t\n\276\251i\300=\347|\003>\211wU=\327\365\301\275\207\223g\274\253\244\235<!{\273=\370qO\275\013\200\222=\025(\272\274\200Ii\274$\302\013\276E\354/\274\220]\026\272:j!=\310C\323=\270f\331=\267P\202\273\330\246\304=\320\2265\275E\021q\275$\240\355=\263\025\203\274\362\337\335<Cm\013>oi\226\275\271\021\304\275}\217\270=<\220\024<Y\231\251\275(\333\t=,P\330\275m\\\324=\205\256\372\275\221\361o\275;>\331<Q\356\247<5S\205\275A\177\317=\3476\n=k8\"\275\272\006|=i\364\224=\371.\277\274\212\006]\275\357y\221=r\\\230<\372\001\010\276\006G\261\275\2011\316=\362`\314=\2648\237<d(\376\275\244N^=\034/\n\276\362\303\371\275O\337\335\275\237\271\363\275r\361\325\275\232\034\351\275\364\240_<\247~\010\276\031\222\253=\352A\327=9\\\302\275Yf\376<\215!\276;\246\354T\275<\354\024>\331>\372=\020\030\212=\344\352\232=\036\204)\275\364\335\343\275\006\371G=J\255\020\276!n\357\274\361\362\265=]\"\265\273\3455\261\275\001\r\346\275\177\212\243\275\211l\345\275e\241\320=\217\r\251=\306\310\010\276\244\027\305\275\200S\373=I\347\321\275\267F\351\275/\215\247\275F\034\313\275\326Vw\275,\212\271=\330\252\211\275\221\022\271\275F\005\313=\2457\333=^U\343\274\367\343\023\276T\024d\275\033\313\360\275\343\033\372<8Bq=\330\273\336\274\342\317\362=\273\276\024\275\234\007\235\275V\034\267\275x\360\226=\201O8=B\311>\275[\027p\275\235J\266=dq\201=\366d\310\275\371\331\366=\245\367G=\224h\377<E\346\276\275\333\014\010>\267?\005>Y\210p=\263^\237=l$\312\275K \223\275))\264=tO\365\274z\240{\275\0030\366\275\253\000\266\275D\330\257<\256@\363\274m\310~\275\345\350\010>\230\327\010<$\037\241\275\006k\334<\241\350\257\275\335\215\017>0(\017>,\243\341\275@\241i=\032l1=\3154\364\274c\260I=\270\032 \275\214#\303=\r\347\277\275\341+\263\275\353V%=8\321\001>7\243\304\275\356a\352=\334sS\2734-\266\275\014Z\245=\001\356\n\276AD\231\275z\004\217=\356\366\010\2761\036\016>\013^\261\275\335\241U\275\265\020O\275ZZ\317=\250-\367=\233\016\213\275\210e\376=\321#\237\275\301K\210=},\024>~\220\323\275\007\224\016\276\037\223(;\037R\006\276T\313\240=}E\014=Y\037};\370\333\004>\1776\325<[\361\272=\037\025V\275\007+\233\275\3149\241=\305C7\275\345~\316=\204\261\303=1\263L=\245<,\2752\307\344\275\272\221\236\275\207\373\357\275S\332\311=\213\344\'\275\202\255\325\275\004\\\204\274\370#\327<\372lt=\353\251\320\274\\$\220\272>\311\013\275\010\005\021\276\177L\205<\271_\355=\365\232\257=1\037\023\276\224aG<\305\350\020\276e\374\231<\007\001\332\274i\370\n>6\274\340=\213\343\022\276\037.\371=\356\256E=[\263\350\275|\207\002>o\376\301=VI\304=\006\332\310<\231@\232\275\034i\353=@=3=\035>\226\273\215.m=\272\233^=\357\305\333;\245\312P=\216\007N=\270\217\337\274\202UK=\267\201\035<&O\030;4\361;=\313(\007>\304\330G\275\265P&\275\256b\303=\364N\254\275\t\"N\273\231\253!\275b\330\333\275\035\357\231=\375+\257=\036\304\377\275\357\353j=B~\346<z\302\020<\025\213\025>6\t\335\275^\212\r>-O\367\275\016d\250=S\374\225\275\267C\277=\203\377\343=\371\313\204\274(q\353\274*&\301=\274JE=\034\366U=J)N\274\014\341\316=)&\021>1\274\"\275\331\250\237\275\2405\261<\006j\244=\177\033\322=\333\231U\275\344\nP=\016\315\021\276^v\024=\t\202X\275?\2342\275\271\214\354=#\020\344\275\303\333\315\275\272\226\t>U-\314=\302\277\324<\0268X<_\210@<.\345\275\274\3060\331<\324I\367=*\371,\274IC\211\275\017N\275=\376\277\267\2754r\330=\225\255\354\274\274\374\022\275\263~\312=\324I\271=\344\035\246=^\204\234=\241\347?=\304Y\367=h\020\312\275\224\357\356=&\334\344=\t\023\262=\377-\277=\275\367s=\001zQ\275\362..\275:o\374\275^U\007\276C\351\254=\0317\010>\230\253\017>yB8=z!\322\275\306\306\027;&\356\364=y\215\353=\364j\010>\327\010\331=kZ\204\274\326k\020\276\261\035,<\023=\022=\367\2112\275\241\322\322=W2a\273\273\241\324\275:Ap\275\222\317\320\275:\223\324=\232Mi=\260\242\r\276\247\270\244<\315\\\275\274\257\203\n>\255\020\005>\030\216I=\202\027\006\276e|\215\275\273a\006\275\212lf\275\005\212\334=p-\325\275\361@\025\275?Y\305<\2674\216=~FQ;\263\023\240=\347\3618\275JD\237\275\274\266\244\273\010S\277\275\034%\261=U}\363=\032\371\202\275\341\233)=\2643\007\276\354O\005\276\247y\234\275V\205X<\203b\250\275\205\370\330\274\340$\201\275\274\267\211=\3371\270<X _<\002x\344\275Hv\016=\003\235v\275#\035\177\275F\263\310=P\\\205=\234:y\275\207\246\024\276\022\243\221\274^x\256\273 \374\031=0\033\020\276\237\312m\273M\034,=\220\205\033\275\033\221:=\312\206\314\274/\327\005>\363K\213\275\241\034\006=\200\244\262=\351\234\300\275\206\264|=4*\300\273\370,o\275_\275\014\276\026\312\355\272\354I\031=\332\350\207\275}\031\263\275S\345\023\276\3446\366<~\227\350\275\334\206\334\275\227\r\217\275;:\005>y\300\367=\001\215H=\365 h\275\030M\235=Z\310\261=\255\313\343\274\353\204\337\275\030\240\003\275\013J\n\276A\334\207=\302\372\032=A;=\275\005\222\244\2759\2201=\007@\020>6\346\330\275\253\330\017\276\206\361S<\363t\236\275-~~<te\317=`\002*=Y\024\027=\262\270\006>\257\267\014>8O\343=\333\304\344\275\203\354j\275T$\362\275\224\217\207;\260a\005>\307\336\201=\340\215d= p\235=+\224\302\275\261\221\223\273,R\003\276\177\331Y<\373?\273;\366,\302\275\312\323\262<\010\370\022>)9\366=\267\224X=\350\216\374;\254\325\010\275-\227\017>\027\322\223\275\302@c<\240\202\334\275v\370b\275\020\013\014=\177y!\275\027(\007=g\026\314=\261x\364\275\275\247\227=\207D\211\275\327u\313<W\237\013>v\343;\274\260*\023>\344\326\245<4\022,\275\'Tl\275IXe=\234w\213=o\275\210=j\\h=J \242\275\354\017\330<\310\344\332\275\353\363\300\274N\210\270=\352\366\256\275EP\022<\033\267\241=Z\350_=b\243\224\275\352\211\003>f\205\020>\206\323\230=\025\201`\275\304\005\270=99\356=T\327\321=\320\310\230=b\247\010>\026\r\274\275\375\370\271=G\306\247\275\254\275\021=\250G\362=(>\205\275F\262\353\275\033\010\023\276f\331D\275N\022\361=\2643k=\256\000\n\275M\345\002\275\204\372\200<b\316\311\275L\004*\275q\000)\275u\242;\275\272\366\022\276\270 ^=\'R\007\276S\344\274\275\3531\255=\377\365|\275V\335\220\275\204\246\353\275S\014\225\275\231\010\311\275 \261&\275\264`\027=\326{\020\276\377w\370\275\255V\271=]\311\324=\025_\363=\206\3001\275\356\240\027\275f\232\234=/\373\327\275.\246\206\275\341\t\203=+T\014>o\324t=T\314\342\275Jv\352=q\017k\275\306\253\336\275\240\3115;,\362\211=\024\027\352\275\223>\000\276\257\'M=\235\374\262\275\275\240\013\276\025\316\023\275l\r@\275\270+\007>\222#\212\275\\\325\014>\322k\243\275f\235\237<\r\214\207=\010\367\277=\016JP<\213\016\215\275K\371\277\275\265\\\352\275\200_\001\276\303\001\276=h-\023\276\030iQ\275\352\200\300\275\264\210\020\276}\200\002=\307\037\336=C\035\304\275\273\210?=\340\223W\274\214\216\230=\257\356\021>}l\002=^\257\317\275\3667V=\212\324\327<\331\230\023\274T\031\n>\340g\023>\307\353\233\274\027\377\307\2725\366\007>\323\221\204\275r\2719\275\n8\006<_w\374=\355\331t\274B\\\204\275hU\255\275\\\225D\275\377\"\255\275\230\277\335=;\177\347\274\026E\022>\320x\233=\tz\252=wA\376=\001\363\014\276\236H\207=\001\371U\274\035{\005>S\363O<z\376\221<\273\242\276\275\272U\225=c\232\230=Kh\372=XA\265\275Yp\367\275\341\371\374;\3479\367;L\355G=$\264\303\275]X\271=\336|\001\276\221\177\316=$g\325=\232\305C\275G\206\r>^\227n\275\210\371\367=\232:\222=\227\t\324\275V\253;<\215\013\237=v*\340\275\372\356\240\274\361\225\205\275R_\202=\324\220\255\274\335\217d\275x\265\264=\354\"\020<:]5\2751\350\337;\007\270\260\274\303N\024\275\357\377\241=W\341\253\274a\353\347\274\2046\002==\261\351\275\210`\024\275\001F\237=PmT\274h\235\266\275\006H\250\275\336\367\014\273\016{\335\275\301\331\256\2754lv\275g\025\035\274\361\261\365<1}\000\275\3106\220=\345\031\356=\204\313\221\275\211\n\361=\357%\240\275U\325\204=\200C-=\300\204\255\275\001C\235\273\006Ib=\275\003\002\276\215,\263=\247P\316=\000\215t=\231\017\024>\344\315\007\275\035T\222\275\t\234\225=\271~@\273z\036\323=Ou\331\275k\243\365\275\204\326\010<a\025\335\275\035O\037\275\274\207+<\021\204\362\275\274\014\267\275:\033\260\275\217\336\031\2755\324\311=\262D\333\2751\276\371=\006\034\032=\276\353\013\276\001U\322=O\202\252=\327\026\272\274\"\263\224\2752=\001>\002\274\333\275\320\273\322\274\270e\374=\240\326\210\275\302\313<<x\232\352\2744\352\021\276D\300\245\275,\356\026=3\227\021\276\336\004\215<zS\205=\026\347\323\2755L\255=U\326\262<\001\025\002\276\312\026\230=\307\213\236<<\\\247=\267\260\033\275\256\260\333\275`\306\021>\005\346\372\275\321\242\"=e\026&=\240?\250=e\302\230=\3631w\275\330\252%;\301\301\343=D\222\227=\377Fe<\000N\300=j\344\010>\230\240\240\275\245\014\\=x\232\360\275\232 N\274\241\017\243\274\227U\010\275\210\275\352=\356\367\013\275d9\037\275\342_\005=p\264z\275\313\372\363=\312\003\216\275\267\004\r\276\333\225\215\275\237\254d=\306\322\025\275={\234=\013\215\335=\321\027\257=>\233\302\274f\277\325\275A\243\224=\376\021o\275\373\364\002>LKV\275\273j\020\276\367\206\300=\242g\331\275\246fx\275R\032F=\014\362\240=`\301\366\275\033\037\314<U\016\275\274\032.K<5\212\364\275}A\255=\033&\220=\300\247\005\2764\025\256=\212\274\216=!\373\345\275o\314\007\276\031i\273\275a\344\250\274n\237\223\275\205\343\314=\016j\001>e\310\r\276yc\007\276\200\357\020>\254\253\351=f\321\205<\375]\355=\215D\346=j\276n\275\026{\252\275\017B\237\275\350G\020<\345\261\225\275\014~\031\2756\203\353=\031\025\257=\2642\347<\177*\037=f\211\350=J>\270\274h\356\251<5\024\024\276oI\274\275\347\212\017\276b+q\275s*\223<\006*\223\275\323\225\367<\326|\265=man\275\324`\215=\033\253\200=\000\326\202\275\374\036\362\275G\216\215\275\357\215w;\014\265\376\275\227`\356=`Gk=\033\374\275\274\266j\325=\365\306\020\2761\226\t>\254\022\037\273\314\033\017>\222\361\000>\256\324\230\275\376\357 <NE\217=e]\332=\244\177\022\275\354\222\224\272\221)\352\275\330\017k=\201\325\341=.\360\314=:\224.\275\364\2352\274\377\272\234\272p\310g\274\304$S\275\257\314\024\276\272\264\217\275\275\'\244=\205\275\271\275\365&\335\275\016\354\255=\275\316\273\275\016q\261\275l\244f\275\205\331\t\276\034:\230=8\232\221\270e\205\214\275m\221\321\275S\257\303\275\320m\266\275\222\246\277\274\314\246\325\275A\000\202\274\000\026\222<\341:\330\275X(\355<\004\3454\273S_K\275\2208\224\275@\312\006>\260\311\347\274K\313\344<\344\372\r\275\371\244\325=\315\223\032=\262\n\021\276\335\213@<\323\")<\252\302\360\275\242\216\215=c\320\001\276\254\364\356\272\215\272,=\243\006\265;\276\217\371\275\273-V=\201\360\373=P\243\254=e\215b=\256\344\331\275\3315\277<\375\354\262<\346S\246:\317\234\016\276\300j\000>\000(\023\276\020\225\253<\334|\020\276\014\\U=\300\317O<^\230\354\275Q\000\t\276\261\216\025>\221\360\014\276\030\314\201=\301\337\002\276\205\226\022\276\275\353\237\275\270A\307\274]\255\265<\354~B\274\034\236\037=\023\202\362=\022U\350\274\257`T<\316\253\356\274\311g\322\275\266\006#\2751p\335=\211\005\301=\261\346\324=\210>\356=\337W\366=\254\301\t\276\177|\370\275\373\323\331=+|\003>[\272\273<\340=V\275U\255\230=j\356\241\274i\"\007>J\037\216\275\306\235*\275\217Q:<\234t\334\275\227\316\022\275R\272\232\275\245c\375=\027i\372\2752\034\212\275{\004\000\276T)\243==\000\240\274R\014\214\275,\232\221={f\010>\034sX\275SF\017\276\270-\375<\365\350\266=K\341\020>?\306x\274Tc\340=/\364\362<=\177\r\276\240A\263=i\036\324\274&\223`\275\222u\366\275\213\267\362\275\345\263\344\275\326\t\273\275OAL=&\203\342<\027\031\013>\362S\214=\322J\366<\0177i\275\264\230g\2751f\301\275\216W\341\275):\260=\002L\n\276=\363\336=\222\206\313;\263\245E=hV\273\275U\367\357<\0335\004=\343[\363\275T\210N=\264|\356=\021w\322\275\364\343\270\275l\023\353=/UW<Mfv\275\3232\003\2769\372;=1\322\237\275\202%$\275\220\377\016>^\333\301\275\271\\\235\275f?\336=v\224\014\274\206S\330\275=\311\254<\343}\201=f\203\203\275\305\250\001>y\371{=cO\370=3\027\257<\241\340\305\275\001u\001>\216r\257=Z\240\\=\002R\250\275\307\203\375\275f\233;=5\275\330=j\300\214=Z\340\013\276]Y\t\276\010+\257\274\214r\016\276\210*\357\275\037-\215\274~\r1<\330&A=\273x\364=v\241\266=\025\274\014\276Z\257\341;\376}\215=Q\341;\275\270\276E=\034\311\r>\245K\204=\033\357\366=^Q\361=\014\231t\274!\345\372=\210t\024>\265\225\337=\230\335\r\276\373\333\005\276!\002\322\275\360\227;\275\263\305\217\275z,\270=\315\020\006\276\356\342\322\275\373&v\275\251\022\235=\016$\351\273q;\260<\266\302&<\001P7=x\330\325\275O\002\243\274\003\004\303\274p\326\233=u}L<<\246?\275\035j\311=\335H\237\273]\363\255=t\027\026<O\276\257=\274\277\352\275\356x\212=\3220\212=0\362\303=\2528\336=A*\005\275\240q\337;}D\007\275g;\345<\373\375\020>\231\336\357=C\234\326<)\177-\273\277/\224<\037\331l\275\214\345\017>\0220\305=\335Ri<T\332\017\276}u\375<\2735\343\275l\275\230=\035\010H\275\n\271\270\275\227b@\274~\000>\274\177\340\325=\003?\270\275\231^\227\275\t\346\221;\330V\t\276e\262,:2\261B\275\034\243\364\275\202\201\272=xf\246=uP*=:\223\244=\243k\000\276\023\266\020>S\341\024>\372\342\251\274\333|]=\307\025\271\275\007\271\333\273~\022\256\275\354\335\206= \006\355=\252\337\375\275\363\334\007\276)s\007\276\214\355\302=\304\351\262\275\257B\267\2720\275\250\275\265\302\263\275\005\261L=\357\333d=\240\033t\275\370\\\023\276M\ns\275\227\"\210\274#y\010<c\242c\274b\n\317\275\231\217\274=~\235\265\275\354\325\001>\351 \246=\ry\017>-5\305\273G6\331<\305\026\331\275\031\002\332\275p,\345\275$\216\304<M\240\207=\n\251|\275\306\252\021>-\213)\274d\276\272<\010\005\333\275\224n\010>B\272\324<\3105\204=\355\354D\275u\245\205\273\212\263l\273\3012\233\272\274\375\267\275j\260\013\273J\267$\275\010\005\330\274\245\036i=\304X\321=\367\t\305<\3011\317\275\305\254\025>\361\201\254\275\221\371\217<\325\354\301\274\010\275\374=x\020$\274\277\205\200=\345-\362=\r\243\270=\263\312\345=\350_\270=\033@\314\274\205L\243\275\225\232\362=\372G7=<\225T=j\230R\275P\003d\275X\334\017>E\243\353=6\023\002<\203\250\200\274G\245\351\275\310\273`=\316\251\224=\305o\336\275\275\245\301<h\006R=\254\364\311\275b\201\304=l\nF<T\372\373\275\221[U\274\267\335\000<\211\241\014<gQ.\275>\032\021=\331\270\000\276\331\226\301\274\274\301\355=\206\264\357=m)\t\276\227\244\277=?A\352=\247b\013\275t\026\362=\024$\250=+0\376\275\310Bd\274\255R\n\276s\n\371;\321\365\343;\303#\004\276\232\266\322\273\240X\254\275\005\311\301\275pm\333=%\"\007>#\212\327\275.:\270=\271\266K<\205\374\272\274U\021\222=\350d\254\275\212l\204=\366h\021<\014J\232\275\232\234\007<\312\346\344\275\240\351\r>G\2543\275\007\322/=L\004\225\274\023X\375=\375\311\217<L\324\216=\276\375\017\275u\025\373\275O6\024\276\375\346\035=am\315;\342\2037=\247\005\255\275Q\037\225=T|\305\274&V\236\275\326D\217<\310\242\217\274\2756\022=)\350\000\275\2111\210=$BG\275\225\032\323<\352\'\277=\214U6\272\346\035`\275\216\234\023\276zR\233=\024\034T\274\216R\323=\345\227\231;\225\330\246=\014\313\007=Q\237\017=X\240\021>\3516\200\275\320\364U\275]r^<8\026\211=E\021\244<\036,l=#\227\302=\rS =Od\361\275\370k\372\275\224~\313\275_O\014\276\257=\316<(\325\316\274T\261\237\27579\312=-\367\275;\302\n\365\274\010(\226\275\203\302\272=?I\033\275\307\342-\274\350Y\225=6t\033=[w7\275\366\211\313=xyO=\330\336\340\275\321\\\020>\302%\346\275\0107\025\276C`\367<U\345\336=\321\253\343=\311\374_=\014\322\307\274C,\352\274A\337\343=\005\300\301\275,\312\t>\253\260\375<:\3562\275\357\367\270\275\365\001\262\275\000pD=\343v\201=^h\260\274\341\'_<~\300#\275\240\314[\275\275\344\001>A\"\335\274s>\240\275\204\r\236=Y\260\276\275\217\231\367:K\354\346=(\256\333\274K\263\013\276\273<\023\276\265\345\035\274q\215J=\270\274\306\275Y\336\272<L\226\372\275\221F\343=\206\245\224<\303\331?\275/\224\n=\353=\246=V\250\201\274B\302\024\276TV\334\275\324\351\262\275\233\324\025=\356\177\225\2753\373\206\275\330\256\323==\016\350=\037\375\361:\016H\212=\251\277\223\274\245l\321=\255V\177=\2313$<\321\2423\274\231}\235;;\375\251<\272\251\036=+D\016\276\262\240r\275\2040\303=\201\274\236\275r\204\007>\232\221\013\276\370\303\210\275B\334\240\275\007T\022\276c\021\324=\251\314\260\275\031\226Y\275\200\372\254=\220\367\217=^(\014<\225\t\023>}\227v<\275\1779<\330g\307=K\370\247=\276j$=\365*p=~e\035=b\236\357\275?\211\306\275g#\\=\337|\331\273\337k\262\275\214\216\352\275\213\215\033=\346\270\037<G\177\215\274K\244\315\275U9\331\273\311\212O=P(\211=\376\020m=\314$\215=\235E\353\275\035\3303\275pz\231=P\177\\=\000\247\220=\237\034\224\274\212\007N=\027\267\316\275\351\270\276\2753\304\003\276\001\017\243\275}\273\003\276\203\2620=\260\264\017>f3\363=i\264\334=V9\374\275\027J\357\275\036+\315=\240!\222\275\204S\220=\217\206]=\333i\377=\271(\357=\000\235\275=\0170\003\275\037\344\006\276C\305\034=\235Z\337\275\003\004\006\276\303\374\311=\006\030\270=~\336\013>5\010\317\275\004\243j=\026\326\252<\262C\347=$\317\273<F1\265=\000\276\246=\251\351\006>jW[=\333X\031\275\226w\016>\240-\274<\345\360\363=\212;\252\274p,\226=\030\253\350=\\\375\336\275o\275\376\275\240j\242\275\2513\224=\367,\032\274\344$\006\276\020I\361\2756\262\220\275\357\312\263\275i\367R=\331\264\346\275\024\304\251\274g\013\213\274m\345\272\274}\022\356\275~#\315\275m!y=\330\373\377=\356M\020\274/{\201\275\014\304\r>CE\240\275`\221\300\2742\203\206\275\322\250A\274\230\373\r>d\331\351=\274>\233=\022v\t\275\214\202\020\274\274k\030;zD\014=\235\351\351;Jd\257\275\334 \264=\305l\330<\361\254\242\274i\220\010>K\311-:\302\'}\274\226\035/\275Sq\210\275\001\366d;\242w\372\275\344R\223\275\025\'\352\275?@\026\275q\322\211\274\210b\345=/\356\306\275Y1\336\275\035)3\275\213\227\222=q`\242\275P<\212=z\271\315\275f\356\337=\325\001\337\275\357\036^\272M\254\367<ZEH=\321\364T\275m\247\035:D_)\275\347(K\275\334M\002>\017}\364\275\330j\221\274p~\n\276P=\204=\254S\323=V\246\013>\325\030\232=7q\327<\267\2378=\337f\002\2764\316\322\274*\240\022\276}\277\217\275cvq;\214G\226\275V\245\376\275\364\343\r=PU\007\276q\025\037\275\372\3524<\302&\022\276\307\311\213=0|\360=:\r\267\275\371i\377=_C\371=av\232;\360\343\377=\375\364\346;`\006(<;\204\020>\007|\n\271/[^<\007\027\270=k\202Y\2750\200\017\276z#\000>)\035\322\275=\270\360\275\002M\353=]Lx=\332\340\331=M\376\226=\311B\021>\236\023\332=\021p\202\271\235\345I\275\204v8\275\026\344\235=\300\3626=\001\261\210\273\273\221\206<\235e\306\275\336\207\212=\364\244\232\275\263w\006\276V\233\001=\340\315Y\275\202\317\332\275\216\226a\275OH\210=\264\370\000>\262+\214=\334W\224\275\354\277h\273\2018\201\273\317\341\327\275\247\002?\275\234\002\346<? \223\274\263\214\274\274\277Z\025>\362t\206\274\276,\303=$i\341\275\263c\016\276\346X\017\276\322\310\304=\342\351\004>+\036\022\276\027g\234=\312\"\256=r\233\267<Y9\205<\006\362\014>mc\274=\315:\375\275\214\'\217\274R\364\335=\"\177\310=v8\025\276\246\237\363=>\303\251=D\t\325\275O\246\r\276W\263\026=\224X\362=\217B\200\274p\310\264\275OgN<\272bV=U\233\274=\214\372\345=\362\013F\275\335\344W<\\\201\006=\331\346\272=\035\220\245=e\017\013\2768\243\023\276M6\002\276\275uD\275\247no=\371\243\005\276m\245\240=\023\306\377=\232\375\225;n\323\234\275!A\363=\003\217\367\275\236s\276\275x\240\022\276k|\353=\250\277\341=\263\035\317=\322\037\254<\213\256\r\276\223\"\317\275n\255\321=B\240\230=\312vD\275\236\373\372=\214\313l\275?L\013\275O8\305=bR\025\276\036\030\r\276\273/\247\274\223t\"<\226N\237\275\306\212\345=\311\005\033\275\223\254\262<\342\230t<\301\355\356\275/\253\201<\336eW\275D[\361=\177X\276\275\370\240^\274\242 \213\273;M\"=\213\274\016;\020\264\205=[\226\016>Y\347$\275J\202\360;p\234\306\274\264 \016\276g{2<\010A\221<\315\346\350\275\366\335\t>y\230\003\276\035;\321=\254\216\326=\243\201=\275\222\270<=?2>\275\302\202\364\274\335\372\016>\365v\370\275|`\375=R\323\002\276\231\355\256=\225\246\330=\307\230T\275\252\250\316=\000\346\317\2743^9=\272 \335=\014\003\310\275i\017a\275t\344\244=\311\236\332\275\231\231\206\274\035\345\001\2765~%\275\334\205\203\275\226\3476<\242\253\036\275v\r\013\276/F\323=\245zc<w\020\315\274\252\0357<\030\005T=,V+=\260\315\025>9|\217\275\314(\361\275\274\020\002>\315 \340\275l\242\022=\'\266&\275\003\317\361\275\310\270D\275Y\374\221\274\317B\025>\251:\027=\207e\342\275+\264\305\275,\231\334\2756\262\013\276\206|\313<)&I\275\277\301\005\275\\\007\271=\004\257\006=\304\246\232;\342\370\325=\237\310#;\253W\203\274\275<\371\275\255\360\242=\n\251\346\275\371\316c=(\003\223=\236\231\014=&Z\244\274i\255\016>c\301\354=\n\343`\275\352\342\323<`!\224\275U\030\223\275\t#\022>\202\034\344=\320<\362\275\017\"\025>0\222E;\004c\336\275\231\243\265=3\253\003\276]\031\022\276\264:B=\230\263(=\243\274\232\275\264\364\010\274l\3721\275\342\310\260\273A\333`\275\371\372\267<r\344\263=\320\265\217\273\201}\016=\302\242\317;\017\313\017\275h9\265\275R\347\337=\233Q\300=\244\327\251<\t\303\005\276\010\020>=K\034\332\275\032Q\360\275lA<=Q\036\267\275\347\235X\275\020@\211\275#wV=\367k\004<T\365\310\275\'\371\376\275\244\264\325=\0135=\275^\\\330=Q\332\314<W\"\324=\200\246\266=CQ\010\276\321\210\227=\326\310\342;\220E\007>B1\376\273>\010\267<\211\030\227<*\232}\275H\273\301;!1\210\275\346\263\200=\360\320\013\276\\\353\'=pf\022>\232R\244\275@B\362\275L\211\002\276j \005=d`\010>\020T5=\314 \217=^UW\274\240{\220=;\370\177=\372n\002>7p\366\274\204f\211<\307\036\260=\230\304\252=\211\205x<\006\nG\275i#\207=\020\306\370=7ot=q\356\321\274\250\366\023>\244\335\250<\030\024\025>Y\204\277\274U\365\255<P\371\236<GOh=keW\275\243x\001\276\373B\371=\350^\020\2767\307\230=t$\t\276g\272N\273\217\302\210\274\212\013R=6\367\022>\256\350\247\271P\371k=dW\010>\334\221)\274\371g\272=\020\311\017\276\\;\177=\205o\364=\331\010r=2\030\000>\333\250\235<q\020\213=g\264q\275\350\022\257\275\016!>=\301\206\311=\335h\r>\021\355\224<\013\002\241<\204\213T=\214\251+\275\270P\264\275\234[\250\275<\277\\\275 \226\220=\337\234\231=:K\261\275\246\320\232=\342\346\350\275=\340\354=\027\367\343\275\3702\347\275\007l\377=\026\023\005>\326\372\333\274\356\300\207\275\255\213l\275\001#*=$\353\303=\007\026\013>\007\017k=\365\263\221\2754\305\235\275\342\266\342=\202\213f;7U\307=\026#\236=<\231\007\275}\205\376\275*\326C=\357\300=\275|\224\332=\010\331>\275\3510\346\275a\210R\275\n\355\332\274\034\270\224=\273\205\310=$\307\316=@(\033=U*w=\013\327\242\274\261\231\367\275+\343\251\275\260\266\256<\226t\362=\250\341\314\275\034\002\235\275\r>\262=\354\026\020\276c\301Q\274\352\002d\275\024\217\300=7t\271=wx\241\275pF\311\275\314\000U\275\020\212\276\275\026\240\247\274:\357P\2750\344\222=S\346\253\274(\260\005>\003\001\021\276\276]\227\274\227\221\244\2752Sm\275GO\223\275l\205\037=S\3352;6#\200=w\325\024>\331\036\320\275\322R\307<24\t>.\274\025>_!\345<\347\241\364=6\337\002>s*\020>o\303\324=\\c\265<W\014\010>\306\221+\274\275\221e\275V\244\235<\353\371\252\274\351\323\177=\030\220\216\275\250\353\264\274]\277\361\274k\372\212=\225S\230<\202i\311\274\345\252\377\274e\371\276<+t\333=Fa\253\275\007n\232\274\010e\332\275T\207\000>\364\354\362=\357\r\266=\321\002\025=\027\337\337\275\033\"\007\276\022\375\361\275h\261[\275&%\222\275\244 \275=\255\004\246=[7\241\2754N\003\276<*\320\273x>\014\2744A\206=\235\255w<\2215\246\273\020\021$\275\004\376\330=o\250\200=Y\024\317\275\025,\262\275\364)\t\276\321\342\217\275i\374c=\216\322\201\275\375\010\354=J\217\235\272\335\027V\2742#t<[\022T\275?Z\376\275\263]a\275\342\233_\275/q~=Lw\034\275\001Y\336=\276\357\245\274\007\271|=Q\023\310=_b\230=z\024\221<P\3612\275\006d\245=\203\275|\274PV\374;\327\376\310\275(\241\335\274\233\210\254\275[\371\335\273\316\365\234\274\302R\374=p\247\304=E\337\n\276Y7\336\275:k\022\276\304\273\312=\352/\244\273\251\237\201\275\257\337\337:\360i\252\275\024w\343\274\026\365(\275\240\260w=A\375\350=M\256\010\276%\331\207=\2347\007=B\3315\275}\371\010\2760K3\275lA\356=\253\203\344\274V\363\363\275<\'-\274\2708\215=\225\312_=\034\025\223=\017%\010\276D\312\307\273\223\207p<\035C\262\275\245\266\253=-A/\2752T\254\275\0132t=rq~\274\021s\326\275y\310\270=7\000\024\276Cc|\275\240\364\322=\214\003\373\275\235g\204\275\036t\345\275\340\n\230=\334{b\275\205\354\366\275\"\224\375\274\217wo\275\231$$\275\265_\227\275\206B\002\276\243\010\340=_v\361=:\003\003\276\257&\n\276*\324\221=\0044\252=\007\010\247=\311\344\203=\317\321\360=\243>\253\275\301\033\020>\307\350\356=\322\245\254\274/\004\\;\265\240\260\275\001\273h<8h\264\275\321\005\004>T\020\360\272)X\342\275\3271\330\275\366m\303=\207gK\275jr\202\274\004\305\314=\270\0206=2bR=l\332.=\365\200\367<#\"\240=!\371\227=ZV\333=\376uG=\230\376\363\274\030\300\007>K\376\231\275\257\213\367\275\025{\313=\354\335\t\275\362\226\234=\205\013\t>^\177\336\275\202\031\344<\311\271\006\276\007\231\020\276-S\001>{\300\010\276FF\256\275\014\017z\275\260\273\t>\204Q\025\276r\221\262\275\3471:=\220U\276\275\232\331\271\274\000\277\271;$y\016\276\377\374\r\276\362S\202\275/C\373=\"9\202=\245L\343\275{\215\236;\353\200\211\275\000\231\007\276\377O\206\275\254y\255=\267\212\367=\3767;=Z\254\021>\217T\006>\002\375\337\274\000F\372=_s\245=R\370\241\275>%\222<\357\207\215=~r\006>\231\225\310\275#\320\023>% \310=\235\332\245<\254N\027\275\333\276(=\313\342\305<\253{\207\275De\254=\\\362\232\275J\323\221=\215\'-\275\364{r=\210\375\355\275\312\337\016>\203\200\246\275X\224^\274\327\032\363=\022p\363\275\335C\336=\343b\025<f\210_\275\304\245\010>\301\353\321=7I\266\275\240\356s\275\267\001\211\275\223\267\322\275W\232\345\273h\316\021>:,\323\275\020V\350=\321\346<=EwM=vP\023\2764\2620=\260\271p\275\347\340T<I\3720=\265\374\237\275\335\316\343\274\260D\302\275\224\265\002\276^\332\363=\243q\214\274\376KO=\377\327\010>\216\260\253=r\206\254=t:\265= \032\204={H\010=\300?\217\275f\252\367\275&\314\227=\312&\336<\242>&=\313\033\252\275B\"0<\300\245\334=\274\260\021>\030\332\346\275\030\240u=9\333\311\274\361(\347={\177.\275\313\262\235=\216\277\002\276 4z\275l\237\341\275=\037z=\003\226\017\276\261\376\020>\005\037\t>C\255\363\275\247\036W\275\226\371\316=\253\014\007\275\033\0373\274h\246\325=\217X\271<z\3737=\037\217\225\275NP\214=E\321\211=\333\334\243=`U\366\275\242\305\215=\006\321\006\276\276\217\310=\324\3241<m\242\206\275\322\t\245=\32675=\270\341\363\275\235Z^\275nJ\303=\210\332\264\275\025/\374\275\224\207\254=\034\276\242\275\336/\372=R\261\256\275\341!\n=?\363\016>q\326&\275l\274S=\307\373\006\275dN\205\275\245\376\003> \017O\274\027\255\024\276\362`\252\274\240|\340=H\361\261<n\016\016>C\360\020\276\225\212\020>\272\242\205\275\317\314\305\274\315vV=\206\325\354\275\016\321\317\275!\026\365\275\220\213Y=\3300\337\275\t\211\337<04I\275\353\240\221\275f\032\372\275\236\304>=2G\343\275f)R=\223li=\322\033n\275q\204\220<5\201L=\201\244\236=\247C\357\275\325\007e\275\037\220\242\275\251\264\305\275\024\017;=\306\206\024\276\r\005\242<\251\357\'=\215\244S\275\352\024o\275\261\2668\275|\031\022\276_M+\275\025\244\013>F\336\336=\007\343\336\275\313(\271=^W\240\275p\201\007>i\250\313\275\225\356\245<d\353\004\276\352\251/\275\'\331_\275\216\207\313\275\007$\021>\3303\374\275[\374\367=\351\313\350\273\n\254\013\275!\230\026\274\336w\271\275\207\351W\275\003Y\211\275\t\357\250\275N\227\022=\033i\221\275\260m\003>\277\321\210\275\353\022\014\275\005YR=\013\322\377\2759\304\242\275\025J\207\274\224\376\306=*\004\272\275\306]\346=+Z\031\275\245\2036=9\224\222\275\347\202\007\275\000\213i<A\2427=`\n\236\275\242l\307=sqW\2755^9\2753~\307\275\0067\335=\234\221;\275\020\201\355\274\237\3522\275y\354\350=b\223\361\275\272n\276=]\312\005=\255\226\275=\232a\002\276\307\316]\275/\315~=\020E\327=l\367\331;\027\013\030;\032\253\t\276\2322\001\276]\271\253=\223\345\000\276\226\311\200\275=\361\365<\214\364_=\265\276\243=\264\260\265=c\014\226=\340\006\020=\201\206\275=\337P&=y\206y\275!\210\264=\030l\021>i\233\247\275\220\326\366=\222\233\363\275\354\250H<\376\350\332\275\341\336\033=\277\005\243=\241\273\371=p\303W\275\301\277Q\275S\277\231=\225\313X\275\007\323\025>\261\001i<\362\303\371\275\t\333\262\274,\321\016\276\326\361[=\276\315\362\275\236\260\254=\247\314\216\275\202\233\204\275}\203\262=\033\017\236=\250\324\231\2752$\025\276|\375\021\275.\303t=G\273\222\274\313\300\307\275\337\326\354=6M\264\274\263\342A={P\376=\367J\027\275\214B\270=\257\365I=\355:(\275\360=\2319\203S\315=\303\031\334=\362\366\366;)q\370\275p\027\306;ke_=\006\004\347=\244\246\263\275, \374\275O\354\335\274\344c\035\274\357U\257<W\021=\275s\034\004>\365\023\t\276\252\007\245\275\362\211:\274(K\343\275\036g\022>\255\270\242\275Y\266\024>\345\253N\275H\364\3377Vn\t:\242c\013=#\222\000\275\205\035\277=4\211\274;\336\332\251<\230k\254<\206Fr\275F\340u<i\027\215=\006\037\006>\300\305\214\275%C\215=\371\217\247=wk\313=\032;\006>\026N\255<\372\300\034\275\335>A\275\360\330\376\273\024\245E=\201\357\325=\007\242\r>\322n\230\275\325\327\266=\310p(=\0030\335\275Q\341\313\275+\273\377=\251\276\220=\265\270\'\275\376\010\366=\364\332\253=\362\361\363=\"\260\021>\235\357\302=\211\302\t=\265\336\010\276\251?\002>\215\244\271=\177\345\001>\264\210,\275\026:\013>st\262=KM\010\276\023\261W=\256\271y=.\341\212;\230n\272\275\254\353t<\017M\315=\330\203\270\275\225\236\265\275A\261\241\275y\256\001>\020_\273<p\001\202=/\347\334\274M\210\346=\274d\226=\363:\317=\244\247\234\275\317a\274\273:\373\014>\270\225\315\275\332\024\245=\327\\\315=k8\233\274.\000\303=\333s\335\275g6\005\276\234d\373=c_J=9\340\201\275\311\353\212=\323z\210\274\350\001\277\275\357\314\355=Y\252\215=4`\220\275\024s\300\275\326\361\357\275\372\n\t>\300M\366=<\022\331=\360:3=_\177\255=\010\274\234=o\263\256\275\335\017\327;\250\003?=A,\375=\273U\003<\205\215\242\275_\261\222\274\372|U=bCC\274\277\003\317=-\355\243\275\211s\373=\245\201\346\274\201\031\241<\3741\214\275 \252t=\\\221j=\331\272\025><\266\342=\212\024\017\274:\203D=\027\322.\274}(i\275\022\014J\275\363\244\242\275\247\013\213\275\3735c\275\231v\305\274\014\323\002>Q8\237\275>\355\005\276w\213\037\275\244\352\330\275@\235\363<_B\377<\237P\203=\227\253\222= !~\275\225?b=\200\243\372=w\233\016\276\230\351\226=\350\373\204\275&`\221<%\004\001\276\205Yx=\315\255\300<\300\2144=~\325\235\275\345a =\256\252\003\276(EC<\005D\367=\320\363t\275\355w\215;?\013\321\273\331X\353\274v\306\321\273\016\324\024>L\374\007\276\321\031\261\275\006\001\014=\004\300d\275:\272<\275\300\335\235;5}\021>\033\271\337=\351\322A={e\022=S\260\273=H\005W\275\234=\016>\202{\240=\352\212i<\265>c\275\')\t\274\3440Q\275\222p\001\276>S\210=e?I\275\216R\264=:y\235\275\354\002\034=\217\346G\275\311\347\306\275\005\226?\2748G\006\276&j\014>\022\361\311=\304U\237\275\340\213\312\275OH\200\275\032\254\025\275%t\303\275\331\373\001\276F\336?=\272\007s=#)\241=\244 \\;\231\213\201\273&m\021\276\214\372\023\276C\311o=1\331z\275\3764`=)`\246\273\304D\244<\211\3579<\255.\210=\312\245\266=\215u\265=5\206\363\275\224\265O\275{\317@;\264\301x\275\270\215\353=\301x\235=yh\201\275R\341\203\275\222\3534=\3533:=L5\236\274\271\245\026<u=\240\273b\360\021\2753\311\336\274z\222*=\005i\333\273\315n\n\275\310\215\242\272?\340\360<{e\303\272@t\204:\373i\227=\226\300\352<=\336\366\273\020X\274<\377E\234=\033\323\236=\224\246X<\177B\243<\345W\375=\314\020\276\275\240\261$=E\025x=._\367\275B\005\270\275\326\350\033\275\t \272\275jtS\274\316\001\351\275\302\227\344\275|\272\262=\264\021\362=\3665\016\274\275\202\017\276-\365\346\275h\336\203\275{\217\341<N\321\236\275\303\373Z=\353\202\357=\307\225\370=\227)\202=\337\241\223=6\032\010=\252.\275\274\367\366\017>\025%\202=\006\020\013><\237\025>t\001`\275\374YZ\275\njR=\372\316\345\275\313\354\013=\300>\032=\025\227\004>\004aF\275\220\033\006>\0165\240\275\312\253\024=\302u\313\275\346\263\365<\377<\253\275\357\237J=\342d\320\275\\\340\240=\310\023\036\275/\342\352=,Y\260<n\351\203\275ze\004>\274k\025=6\260\000\275Z\007\003>\210h\357<\246S\177\273\363\317\373\274\215J\323\274l;\270=\263p\303\275\260\236\010\276\235\227\320\275S]\260=\243\351\235=\255\017\310=\003c\025\276XC\301\274\371%\206\275$\233\367\275N\353\357=x\336\217=l\350\334:\323\364\371==\033\310\274\356_\256\275\277\275\343\275\\]|=}u\213=\206\206\333\275\2248\203=\236tQ=\277\010p<1\025\274\275\352\010\334\275\010\276\320\275VK\004\2760r\240\275\340,\356<\315\223k=\022\336\304\275\330\205\t>\342)\323\275\3242\224\274\267\0104<\0215\345\274\373\026\230\275A\024\350\275\224\275\261=\255X\273=H\003\365\275\346\0242\275V\244\242=\337\032\240<\017\376\010>\245\030\t\276i(\242=\377\366\322\275\367\320i<,Y\203\274\242`\206\274x\243\241<0\305\340=\302\243\357=.\346\214=\231~\251\275u\2153\275\210%\255=\'\256\017>\225L\277\275\253r;=\265Y\245=T[U=\262\372\002\276V)\300:\014\3652=\331\371\326=\271\234\361\274\033\233J=m\370\023>Sz\230\275m\222\020>\343\227\n\275&y\261\275\201\177\250\274\364\030\252\275Jb\365\275\347Y\333<R\326\260=\343\315\211=\207\027\305:\262\026\341\275\204\312V=P6\350=\203\210\351\275M\352\371\2753\266\021>6}\305\275\345\221\007\276\271J-<BJ\264\275v\225%\275\375\010\370=pE\276\275:\306\241\275\345\201\373\275\244\232\002\276\251\216\325<,\003\313=\211\243\201\274b/\345\274\257\320\032\275,pd=\343X\017>\350\365\351<\200\020\201=\033aP<^\017\212\274\364\025\346\275z\\\272<\214\264[\274\351\223\301=_\t\242=\255\2479=\246\206\305\275\367\277\224\275\266h\274\275\\\227\324=\320\317\206\2744\244\204=\203%\007\276I\232\277\275Z\346\023>a\031\346=o\212=\275E*\254=5\205\352=\032\262\360\275\343\237\007>\352-\266\2750\340\376\275\225V+\275sl\354\275\234\350\333\275f\221\016\275\021\013\337<6S\202=|%\225=\r(\204=\367c\313\275\354~\373\275\367\232\300\275\033\354\241==\264r\275+\201_<[\251\300=\275\004\346\275\217\221\026\274\304z\014\276\004\373R\2758\333-=\020k\315=\204\\\350=\337p\247\275/\361\217=\243\273\020\276\346\374\210\275\340\375\004>\301I\205\274\2359\240=\331\353\252\275\202\305F=m~\346\275\301\313\347\275}\377\021>\234x\235\275W\022s<\2332\313\275\200\366\376\275h(\207<\362#\331=\224\\\364=;y\022>\212~\225<\236p\355\274\350\251e\275\310\326\272:\240\300\241=#\354\316\275\224\357\220=\362$j=y\014_\275\321\231\212=z\264\311\275V!\322\275r\331\022>\372\356\r=\037\026\017>\230\251\020>\2141\365=y\354\315=\240j\352\274\177\352\231\275O\037\274\275\271\270<=\300\203E=@\005\354=LG\215<\344\262\014\276B\374\266=\024\357\r\276\374\350\363\275f\350\222\274[\237\025\276s\245D\275\266\327r\274Z\235O;wp\357<K\217\220\275iq:\275\371#\213\275\3106\331=nV\346\275-\371f\273\300BI=\371\374\344<\357f\204=\325+\013>\253u\005=E\\\326=x\321\234\274\363\007\002>\250\203\321\275;\335#=\250\226\r\276\007R\351\275\262W\273=\021\365\r\275\025\244\007>/\344p\275\010\340\n=d\005\370={\032\327=[\303\006\276\036s\334\275\023,\010><&\277=\322-\344<\206\014W=C\343\001\276\211\371h\275\327\305\262<H\205\006=\262\360\010=\317\327\r\275\2753\277\275\352OM\275\270\356\004=\007\344\225=b\020\327\274\265\332\252\275\353\344\357\274\230\333\272\275\225\n\333\275#\343w\274\356\326R\275\031_\230:\235<\235\274\0244\220=a\024\242\275\016{\232\272\026\375\234=\234#\310\2731S\363\275\233\035\321\275\355\336\300\274\353}\236\275$\342\026;\317\027\330=6\013\260=F\345\275\275\262\320\213\275\323\0311\275\034\230\237=yv\000\276\275p\245\274>\007a\2759\376\226<\215b\250\275\333`\243\274\017\361\333\275\232kD\275\354G\321=G\343\\=\213)\272=\264\215\355<)_w\275\373\005\270\275XB\001>d\303}\275>\250\t\276z\257\356\274\223QK=\3627\300\275\254\262\005\275\223d\007\276\333\030M\273\022\215\367<\001\225\221\274\305\313\300\274\007\221\002\276mJ\213\275\2553;\275\253\247\000\276\223!\225=\312\355\232\275\3653\216=\203<\320=\214{\350\275k\3232\275\375\312\005;\371\305\356=\227\250\316\275\tg\020>\301\352\373\274\275\320\022=\204[\370=\000\243\257<\243 ~=\237\234\305\275\3629\316<B\201\343\275!\325\342\275\313w(=\376\362\307=s\311\360<N;\273<$o\310=\341\230>\273N\252\213\275\323\220g\275\324\221s\275[\035\335<\274\303!=E\311\314=\245CG<%\343\273=9\340\230=X\374\302=\341\202\201=\240\360\301=\262\025f<\374\272\345\275\215\227\365<\210\001\'=\306\271\350\275\250\205\204=\201\371\016\276\010\375@=]y\214=.h\271\275Xa\322\275\224W\333=j\275\222\275-M\005\276\001z=\273\311\321\014>\212\213\251=\356\260\350=\026\031\312;\037\225\325=\220\030\301\273\221\332==\r\374\331\273g)\312=S\271\016\275\205\213\316=\035T\236\272\006x\305=\021\260(\275Z\343\204;5\014\343=P\321\206=\366\360\377=\014\257\356\275\270F|\275\256gn=d\177\276=\230?\212=|\331\313\274\2449\260=A\234\367=\224&\347\274!%5\2759\374\306\274_>\347\275\'\337\254=\235[\355=\370S\326<\213U%=\301\005\271=Cb\004\276\022\362H<\331\256\274\275y#\224=\372\t\177\275\rk\254=\356\330\356\275w\355\373=\004\204\343=\203\325\256\274\271Z\004\275\351\271h\275\255\200\207=oZ\r\276\\W|=\207\330\211=\3052\210=\371@\347\275N\007\352\275\302?\023>\256\350\377\275\002d\016\276\035\207)\275\202\005\007>\376<\313<F\272\340\275Cz\005>\372\246\025>\302g\006\276\375\262f\274^\020\204=\215\271\243\275\014u=\275\016\343\r\276>\236\347=f\340\005\276\363\233\204<\254\"\207\275\266&\262\275q\341\323\275z\023\344=\323\026\334\273@\335f\273)\324\375=\375\334\263\273\213\264]\275\037_\224=\322\002\r\276k\\\177=\352?\234<\344)\006>51\007>\366\271\224=W\355\005\276\251\005\t\276\230\330\370:\272\220\023>}\226\351=\261\237\243\273m\2609\275{+w\275K\300{<\354\031\236=\017\026\r>k\013\350\275\266:\013>\323\232\021>\336J\277=\020\025e\274\220H\274=\327\320\265\275\036\200\207\274\007\023\014>\231\320\264\275ClE\274\232\006\216\275{\2505\275\030Z]\275\023\250^\274 g\257=\355\022\016\275v\003\270;% \020\276\000\362\030=\271s\034=4\321\216\272\336\230\265\275\345\275\352\275\355h\252\273\225\004\034\275\324\327\330\273[-\010\276\256\303\272\275\375\231\025>\271jJ=\234\237\006\276\215z\014\276\306\357\374=\277L\277\274J\243\261\275\016\352R<P\370\242\275\275\206\007>w\257\373\275\214\322\360\275\317 0<\227\300\304\275\007\232\255\275\216\266\312\275\243\355E=x\325\216=H\357\030\275\300\230\373=.\365\001\276\356\261\241\274\335`\203=,\030Y\274\311\346\350\275\024\344\223\274b\2623=\337\335\314=W\333l\274$:\253\274\373\303^=\267\236\352\2757/`=\231\276\325\275f\031\022\276Q\304\306<\277\233\243\275*P<\275\336f\010>\206\307\354=\037\267>\275h\025\014>\203\300w=\342\250n=\350\371\336=M)\033<\344\205\007\276j\233\265\275@\275\263\274@\201\004\276\343A\227\275\305:\241;\177\255\310=K\t$<gv\215\275\205P\013\275\376\344\005>\374\325\255=r\014\335\275\332\305\233=\316\027_\275a\356&\274/m\263\275Xr\005\276\353,\014\276\354\214\323\275~\330\206\275\024\314\022>\224\214\025>O\212\357<\017\031#\275\327i_=9O\322\275\223\033|=a\247\262\275 o\003\276\263!\021\275\002%\016\275\023\241\013\276\225\225\006\276\364\205\234\274\002\025\2129\246#{\275\330\030\361\274\357\255\273=\234m\304<\263 \255\275_\244\007>\t\022\225=q:L\275[\035y\275\013J\t>\213\272\313\274\'\224\305\274HQf=\021\241\326\275\304\212\325=\337\023\310\275>@\356=\335\213\342\275\366\320\005=T\256\217\2752\247\240\275\322i\014=\031\250\020>\346\023\016\276t11<\323\374\265\275B]\352<\177W\344\275?\343\225\274\235A\002=\342C?=\027\227Q\275\n\274,\274\003\3139\275\217\331U=\227\334\275=kD\230\275M\253s;\367\257\351=YS\250=\n\217\033=\301\245g=\266\245\243\275\350\241\341\275\242+\t\276\224\237\026;\366\025\007>\244Y\n\275r\276\256<F\251\252=av\320\275\025]\025\276\254\235\332\275\367\326e=%\246\247=\276k\216\275\301\0234\275s\342\355=4V\016=\224\363\217=S\350(=Wr\212=\305{5<g\031\314\275\341\226\240=RT\t\275\030\263-\27572\313\274x\021\212\275]\301\371\275\370\362\r\275\323\264\266=\321V\202=\204\365\274\275\233\250\016\276\370*Q\275\324AM\275\364<\t=\355\316:<f)\255\275\"\341\221\275\330v\366=\000\262\316<8\345J<\010\257\323=\242\251\262<\311Y&<\272\201\310\274\270\200\r=\276%.<\372\307T\275+\237\332\275w\364\304\275\246\\\325\275\250\005\003\276/\235\352=Y\251\203\275\361\344\316=\2063(\275\312z\257=S\t\321\274}\372\346\275Q\016\322=\221\010\023\276xU5=\037\311\316=~\006\013>\215!\250\274\340\t\247=\213\365\002<D\\\244=\205\270\222=\224d\022\276\230u\345\275^\363r\274P\260\243<\377\037\377<V&\277\275I\351\230\275qf\335\275\030\325\223\275\206\000\325\275C\'\320=!\223=\275R\310\331=\357\236K;p\232\374\275\031j\243=\322z\226=\374H\024\276(\226[\274\032Y\002\275\002\246\037<Q\325\323=ib\013\276\231{\030\273\006d\331<\376i\306=\301\321\300=t\354\003\276\225\354\020\276\035\374\371\275\332\360\010=\226A\t>\372\315\344\274\331\371\013\276AE\025\276\255d?\275\324P\333\275\230\214m\275A\311\002>\347y\320=\203i\312\274<%|\275\301a\240\275~\374\r\2766\3770\275[<c\275.\321\r\276Tm\257\275\211-\303=\265a\206=F\225\223\274\177\026\356\275H\030y=\361\250\320\274I$\217=\003\331\302=\225BZ\275\3721&\275\205U\357\275MS\345<7\265\367\275\'\357\244\275\346\360\230\275C\345\005\275\004%\016\276\306\376\360=\270\347\222\275\302:\204=F\373\005>\2221\t<\357\236|\275ZG3<\007^\007\276q>\237;\251\373\232:\t\234\376\275\371!-\275\004\247\367=\365\375\213\274\305\373\303=\005u\n\2760\356\340\274\003>v=I\223\327\2740k/\275\323\217\335\275\327\340\335=\325^$=m\347\342=\346v\226=\031\204\324=\205\005\314=\322\340$\275\207\340\325\274\373a\211\275\371s\257\275\232H\346\275\211r\021\276\337\241\020\276O(\325=L\350\321\275\002Z\005\275)\032\"=P:\370\275#\214\377\275\253\211\226=\335\267\256<$\210\014\276(`\374\273<\265\230\275\203\177\303= \265\200\275\352\317\356\275\3319\025>\324&\220\275\255\230\033=\227M\004\276\303\334\243\275\352\026\225=l\030\300\275\000\n\207=\200A\371\275x\331)=\\\234\"=e\237U=BXZ=\373;r\275\336\277\344\273=\320\362=\026:\000=\031\2578;\375,\035<w\217\034=\036d\007<\352H\214;\240\204\373\275d\242W\275\347\353\370<\017J\300\275e\274&\273d\036\r\275?\032\016>\321\320\010\276l\014\325=L*\343\275{6\023\276\324I\257\275\270=\360\274\217\264\251=\003\010{=\255\252z\275\200\211r<\274O\334\275:/\314=d#\206\275\363\252\354\274\205O\211\274\225,:=\345\376\217=\036\250f\274\332\023\303\275\007g\030\275\361\227\024\275\243\301\350\274\030\001\303\275d\344\372\275e\033F<I\254\267=^\240\374=\361oO\275\207&\002\276U\277\005\276D\371\023\276\251\220\306=Q\224\242=`s\327=\004/\210\275\014\377\266=\234\t\334=}\265\351\274\3121^=Z8\010>\205\245m=.K\341\275Efs\275\353\376*\274\226\317k=\361\230\266=q\310%=\376\r\242\275\303\342\235\275i\235\271\275Vv\022=\210\314\246\275\025E\357=\205\354\225<QT9<\033\313\261=\3730\347=\307\371\332\275\263\013\036\275\353n\'=[.*\275?le\275`t\023=G\255\r\276I\245\n>\342\3764\275]u\214\275\306\361\310=\374\007\002\276\330w\226=\220\335\240\275N\350\007\276?p\266<)k\323\275\237\232\260\274\317g\202\273\221\377\004\276\234\371/\274\352%\320=\272\345e\275Ug\330=\241G\352\275Pm\370=j\031\357\274b\251\262\275/\261\365=\210\370\224=zS\037=\361\263G\275\265b\303\275\002n\016\276>\021\372=7\n\260= \227\274=l\340\205\274\261\022\302\275\\\272-<3P\350\275\354{\263\275\363\333g\275\014x\020=\240,\010>x4\320\274/\250\215\275\264\374\334=\361\336\022>H\372\217\275\215Uo\274\203\322\003\276\0244S\2759i\004>\370\324\241=\304\223\332\275\202\320\347=2\371\245\275\251\034\020\272)o\354\274x~\003=\214\225\356\274\315\334\t><f\006\275\205R\306\274\324i\016\276\251\213\022\276`zi\2755\371\343=\271\373\247<<\331\276\275C\332\252\275xV\213=\310;\023>L\373\223=I\026\350\275\221XA\275\366K`\275\324%W=\306\351\363=}\307w=49e=\262\374\024>\257\315\002<\250u\375\275#P\226\275\221\305\016\275\312\036\251\275\252\217\014>\032\320\330=\310\220\246=\240\336\355=?B\037<u\177*=qy\374\275p\300\004\276\274\237\350\275\316\277\020\276\253\014\233<1\264[<\330}\242\274\363X`<K\307k\275r\367G\275c/\017=\337\262\214=F\356\354\275\343#\374<\344\032\224\275#\021\r\276\271E\227\275r\272\213\275\240\226T\275DV\013\276zB\271=\020\217\321\274._8\274\254?\224\274\0323\271\272\260\213\210;\245\327\355<\230\231\302=7*B\275\221\372\010\276\314\342p=0l\'<\\\275\002>Hz\001\276\200@H\274\316:\023\276\301\013\206\275\3108\363\274\\\264\024>U\241\250=4\340\350=\346\264\020\276\271\301\025>\tn\200\275\257Ze\275\217\2014\275\362#\274\273\244\357\247=\345\344\023>\354\300\247\275\266w0\275\'\255y\275h\003\254=\370\317\021\276\234^\201=\311\\J=1\031\214<@\212\024>j\014\265\275\370\357\337\273\224U\024\276N\337\235\274\255\037\361:\316\266\260\272\030\357\006\276Kp\204=F\243P=\335\362\317=\007l\014=HG<\275\311C\006\276\231\021\013>0vt\273\240\014\301=kb\320=\256\262\023>\216\311\270\275:\321\356={8\234\275\035\331\225=\313|\243=\036e\251=\341\250\375=\374Y\222\274ae\233\275`\241~=c\217\251\275\317\337\000>\032\240\277=\214s\355\274%\215\265\273\203\202\022\276T\272\353=q\353/\275b\t\265=\000\354\020\276F}\n>\321\024\004\276\205\346r<D\227\361;\201\254\231\275`\330\323=9S\010\274o\307\230\275h\037\001>\373\316=<\017\272)=\351\264\006\276E\351\025\274\315\226\375=\021\267W\274w\274\350\272\212\357X\274q\005\207=|\230\235\275\261\010n<r\016o\275\361\365)\275\262\216\010\275\313\331\254<W\344\241=\341\016\355\275{v\201\275\270$\346=Ev\023=k\026\017\273f?\002\276\255O\243\274\215\275\022\276vT`\275\031n\321\275\006\326\"\274\362\211\227\275S\030\333=\264\346\212=E\377\r\275\277q\307\275\204\340[\275E\2448\275YL\224=\350`\302\274\3456u=?q\325=\210\270\256<\326\336\024>\213\000\020>\324\014\332=\277\336\301=\221\007\322=f\275\020\2760\333,\275\232\325\322<\304\370\307=x\236\313\275\010\007\273\275\222\230\301\273I\307\241\275&\327\366=\241\322\347\275\272\212\324=\020~\332\275\307\216\211\275\007&\r\276\353\177\021\276\241\357\r\276\336\014\017>is\232\275]\013i;R\267\327\275\372w\361<\027\r\017>\000\315\344\275(\\\t>\333\261\330=\235X\274=\252|\373\275jZ\254\275\347\001\272\275R\360<=_s\351<\360e\342=%\250\247\2759\030\364\2759B\275\275\376\322\357\275\271R\301<Xw\342\273vJ\236\275\016\220\r\275\364a\027\275\335\351\341\275\234\345\242\275\345Vy\274)\337<=*\367k\2755\023\265<w\265\325\275\t~\234=\371\"\211=\242\245[\275\004\205\364\275\225\316\335\275?<\273=\254\001m\272.\033\007\276/\222\306=~\265\245=du\236\274\020i\336;T\345\204\275\244}Q\275\267\204\305<\377\"\024=z\254\277<\241\246\003\276\005j\272=\275\205E;\351\032\241=\366\361\021\276\003$\202\275\270c\245<\027\310\367=7B\n\275L\367\022\275\321%\023\276\330?\324\275\367T\244<\372\222\367=\356\022\363=\260.\236=No\335=\034\273\266=\243\201\262\275\336\010u\274:[\243\275\300\256\205<\352H\357\275E]\334\275U\273z<\025\236\356=\204\026K=P\314\033\275\016d\001\276\352F\025\275\203\202\376=\231!\310\275a\343P=\004e\016>\251\242K=\263\341\304=\n\240\262=\357?\021>1\017\311=\273\334\331=\261w\007\276\366\250\t>\324\035\243\275\342\026\366=\375Rj\275\004\006\374\275\227\334\307=b\274Q=#\364f=\254\202\002>y\235\005\276\016\3318\275\007O\251=\322[\233\273b\234(\273\017\'\213\275Z\364\000\276w\231\326=\245r\336=\300\336;\2757\034\177\275dj\251=\367\'\337=\232\024\324=Y\027@=Z\303\200\275g\321\277\274a\305O\2756\t\263=\237\345\n\276q\273\007\276a\241\025=\2616\205\275\000\337\246\275\035\030\376\275]\237\245=\231\312\377<\306\007\352<\204l\341\275Fk\206\275{\352\360=Q\333\316\275\007],\274\340\301\274=b>\361=!~\323\275\022#\236=\034O-\274g\3056=\210A\270=\333j\330\275\002\234\274\274\252\354\367<\376J\021\276\252\330\374=\034\030\253\274\317w\026=\204\024v=\204\311\020>\2751\013\274\010\333\336\275u\374\t>\266\207Y=\216\021\366\275\007\201P\275\226\323O=pc\363=\344<\310;\321\220\013\276XO\204=\247\346\002\276\306\235\265=CF\360\275R.\023>\225\356\356=\236\013\343=k\261\036;w\200\241=t\035\014\276\370\216\217=\220\016\351=\26179\275\226[\022>\000\025\t>j/\317\275\007\226\014>\254J\250\275\225b\274=\030\263\232=\277\372\217\275\334\214\255\275d\350U\275\3320\242=u\0242<\320\322\273<\014\276\306\275\333\327\245\275\024\333\027\275o\222\020>\324i\337\275\316\316v\273[@\221\275\220\264y:1\004]\273\332\237\374\275d<\300=\305\013\335<\321S\232\275\333\241\247=\317\317\273=/\274g<%\\S=\307\357N\275\214+\025>\'\177\236\275\216\032\341\275\005\264\264=\257N\230=r\202\263\275\035\321\245;:\357W=\024kA=\344\242\222\275\353\032\207<\242i\302<\0203o=Qy\203\275\277\273\331=nh\215=\'\307\317\275nJ\234;j7\006\276F\340\204=A\036\355\275\316\345\313\274p\016\357=\321\224|=\t\337\031\275\203@\231\275D\r\004>\364\335\236\275\030\004\n>T;\332\275HK\017=\346\245D\275\332n\231\275\000\025\246\274\240\321\016\276\242`\303=B\251\252\275\236\n\277=\263\311\344:Se\362\275NR\016\275\031\021\363\275\353\277`=\007\226\254\274\323\226\333\275+r&\274\022\243\360=\240\235\322\274g5\203\275\334/\366<\270\025\360=\271\"\357=3\342\n=.\342\332\275\266\221\223\275\314\217\021\273\222\335\307=\025k\312\274\025\310R=f\356\260=\303?Q=\200\376@=f6\311\275\033\271\352\2742Rj=\027G\r>\336\233\215=\345\354\224\275\237R\252\275c\253\014\276\\\271\370=\240q\201=\007\007\355\275\006\347\341\275$\261\010\274\330\227\323=\212\377\254<\343U\364;\270\352\271\275:\342\355\275\331\003\362\275-\261\031\274\254\351\022>l\200\036\273\331\234\327\272X3r\275\263Q\304\273\205R\002>\252]\220=\232p&\275)\370\023\276\241\254\002\276\212\235X=\210\033\006>=[l=\225\333\357\275\200\022\022\276\234\243\332=\337\024\271\275)\347\370<\321\303\301<I)\277=R1\365=u\007\316\275\250\327\004\276\245S\236=\0163\000\276\212I\376=\360\263\002\276|\340\320\275\353\253r\274\001\020<=\020\316\306=\340R`\275;\245\\\275&\373\352={\361\252=\031\277w\275b\222\004>3Wd\275~\375\013>d`\n\276\347M\n>4\244U<\000\022\247=:\211T<\223K\"=/\236\233\275\326\026\340=\272\273Q=OJ\255=\362\026W\275\206\370\002\276P\304\247\275\247\007\243=\254\203\236\274\330\177m\275\233T\253=,[\366\275\261\216\267<k\303\276\275X\225\317\274l\323\261\274d\320\340=\224^\375=\0267\017\276\022\374\341\275\n\234\262=\311Z\307\275\335D\203\273S\206\025\276\262\276\024\276M\244K<\305X\254\275\376z\336=\376\236\357=\027\227\363=.G\326\275\315{8\275o\201\263\275\273*\340<\372\205\307\275:\010\310\273\257>\376=\276\253\200=-\325\341=o.K<\311\021\312=\326\336:=;\235\305=_o\274=gS\003>%\260\032<\022\331\323\275\276q\233<\177\t\354\273\255\247\336=g\035\352=3\275\227\275R\251\234\274P\313\300\275\347\206\345=\344\245\201:~gZ=\373\374\216\275-^\340\275&\372\024\274\022\365u=\252\216%\275D\211\016>\320!\275\275\031\300\377\275\332\310\264\275\347\355d=\205\247\024\273\206\256\376\273j\2079\275X,s\275U\342\376=\331^!\274\335d\215\274N\225\326\275lj\363<V\346\r\276\016\257\270\275Oq\343\274\320\337\237=+\213\204\273\264\340\357;\227\332D=\316\355\007>\034?\001\276m\304\343\275\320\201\310=CAb\275\013\n\332\275\235\373\242\275\350\360\206=\003\227z\273b=O\275W\234\244\275\305\n\316\275EQ\275\275T8\300\275\320O\014\276\000\032\345=\2153\231=\322\323\267<\372\373\225=\267\033\355\274\214q)=\342s\262\275\260\341\013\275\273\371\377=\374v\213\275\364\021\r\276\024@R\275[\016\016>W\364\005\276\224\'\226=\025\275\340\275\274\300T\275\3219\357\275\326\315\'=}^\032\275\013\005\031\274\001.\000>\007w\231\275a&\315\275\023}\233=\320\373\267\275\313`\212<\343\020\204;\221\031\273\275:\246\346\275\362\\/=\360\035L;U\332\363;\354\251\315=\247M)\275\274xv=\004V\254\274.V\204\275fC\370=$^\007\276\255\307e\275\2679\314=\205\364\212\275qo\021\276\236\201\254\2748\211\006\276&Vf\273AK\007\276\306>j\274b\223L\275USs=W?A=gK\375\275\331+\331\275N:e\274t\376\311=I\333\002\275Yi\211\275Y\324\245\274\322\204\"\274\n=\211=\\U\353<6\302\277\275\262\370+\274%\206\362\275\336;\345<j\356\203\275\020\265\r\276|\315\367\275\221\312\310=\252\213\374\275\276\211\243;\363\236k\275\224\307\306=\370\200\322=\000m\315\275.\336\006>\030\376\363\274&\320\303=\213\320\261=\"\360\206=\321\264G\275\021\354\013\276D\337\027\275\022^\002>\3160\345<v\350\354\275>\304\306<\2026\231=\371\006\254=Q\320\3439O\230\345=U\343\212=\005\326P=\226\272\303=\\$.\275\377\016\276\275\021\366\307\275n\343\006\276+\256b\275\266aO\275\245\374\322\275\006t\002\276\277\252\347<.\307\347=,\230\016>d\372>=\333\354\001>}H\305\275\345\231e\274\252/\024>|\274\222\275\032a[<\223\'\022\275\223-G\275}w\245\274\323\260\311\275k3t\275\221c\346\275a\304\366=\211\355x=j\333\036=J\370?=^5\351=\262\034\253\273\245\353\331=\207O\333\275\254L\315;qz\201\274\267\344\302=\251\3461\273hM\220=dvz<\335a\022>(\016\263<t\323\361\275\230\242,\275\333\327\256\275\352\313\025\276\336!\260=e\324p\275m\306\311<\307\177\023=C\314\303=H\356\003\276\333\205\200\275\217\277\257\275v\225\360=\0022&=\350\357\322<-G\342\2759\233\254\275\364\276\361=F\237\001\276b\223\267\27598\275\275P>_\275\330\230\020\276\253\310`=\252\243\342\275\356)\001=\212\242==V:\200=hp\253\275YU$=\032\246\004\276!kz\275\371\372\346\275DJ\303=\\\277\275\275|\333.\275y\377F\275\367\251U\275c$\204<^\335\260=\276`p\275\210(\265\275\321\344\242=\r\t\020\276\250r\354\275\341t\311\274\276\361\031=\t\014\344;^\3220=d\356\334\275\373\213\250=z\376\"\275\366p\362=\217\\\373\275p\244\357\274\nB\307=\263\373\022\276\244\365\202=y\005k\275\322\257\020\276j\317\177=Jm\360=X\207\331=l8\334\275\273w\261\275-\276]\275\250\301\274\275\312\272\210\274\005\003^\275\227\201|=q-\315\275&\223\341\275\200\372\214\275\024P\265=\354\303<\275 \261\342<\363a\347\275xU\000>\300\210\005\274\374]Z=\"G\234\2755S\330\275\212|\217=N\212\364;B\355\300\275\0354\254;2@\231\275G\264F\27587\333\274\277\274B\275\304p\326\275\022`b\275\2133\224\274\235\310\023>\376\220\005>^\200\010>\020m\226\275Jh5\275H:\207=H\212\270=\374^\352\275\202(\r\276\033\003\220=\241rU\275[+X\275o*$\275\033\311\327=\374\205j;\240\250\371\274\367\340\010>\361\306\367\275\356\261\253<\255Jj<W[\203\275.\332\007>\316x\330<&\020\235=\274\227\277=\232M\271\274h\027\007\276\200\372\355=\320t8\275\016\362\352\275}\310\023>l\221\t<\251\211\222\275\004\025\342\275\255\371;\274\362h\213=\\\010\362<\035\350\267\275\213O\n>\240`,=lU\022>*\277\006>\245\360\300<1q\332\275\266R\325\275\004=-=KZ\331=l\230\213=t]\004\276\231\203\231\275\033\024p=t\210*\274\365TM=?\264\261\275\252?c=CQ\362\275r\345\016\276\026\301\024\275\010\366g\275\035\276\321\275I\305\'\275?M\254\273Fy\202\274\332\265\334=\361l\343=\254H\263=\035\350\261=N\"\374\275<\212\007\276\034\034\016=$\303\305=F\202\327=\314 \021\276F\177\014\276\n\235\023\276\226\306}\275+\267\240\275\306&\000\276\236*\037=\267\340C\275\326\032\343\275a\244\304\272\002\355\014\276\033\223\312\274\244\350\203\275\207\247\256\275\357S\351<\007\334<=*c\367=]\030\240\273C}\006>\r\300\205\2744\030\373=k\234i\275k\242\316=\025,\363<\266T\327\275\244#\226=\3478\345=\300\214\267;\274\373\"\275C\315\322;\027\034\007>F\270t9\022H\357;\265\315\003>\341N\000>\251\237\312\275\343\250\244=\312\356\\\275&\247\177\275\277\370\374=^`\360\274\031X\306\275\376\022\245<&\354\303\274\305\032&\275P\310\243\275\376\013\025\276\314\215\312\274\333-\221=\340F\357=\307\276\007>\300\227\'\275\230g\020\276\262I\317\275\333\253\255:\343\016\221<\315\333\n=\004$\312\274K\324\244\274\263\316\222\275\257(\002=\225s\350=\003\214\224=\244\257\223=\324\030\276=\034\275\243\275\tD\377\275\360p\005>\360\301\244<\373\234\275=\306\037\265=DB\225:\207\347\272;:\250\t\274^\257\214<P%\270\275t\272\346\275\312<\243=N\313\311=W\373\022=\361y\353=\222\ri=.%\322=\254V^=\320\232\001>8\2540\275vx\360\275\246j\250\275{\003\336=\331\013\033<\264 \325=et\200=\021\241?=\332\010\033\275\334\236\3409\325e4=J\301\346\274[\264\262\274\022\002\231\275\267d\003\276\256\322\320<\367\001b\275\036\266q<mP\317=v\320(\275\226\032\225=MZ\257\275\261`\202=M\t\272\275\033e\326=\356\237b\275\320\022\031\275\010\301\276==\031\t>\253hz=\260\272\241\275\223]\016\276\215\301\311\275\016\232\314\2755\314\362<\nO\006\275\256\222r\275\357\t\013>\260E\373=a\311b\275\362C\345\275\302\037\320=2\265G\275x\361$=\005\341\010>a\212\213\275\235k\277\275\311,\237\275\000\217\222=\031M\003\276\266\013k<\034\225\324\275\355\312\r\276\225\276\352=\246\025\237\275\254@\010>%\261\235=\257\030L\275\377\242^=\362\251\237\274\020U\343<\346\243\267:N~\253;\024\n\326\275LU\343\275g\005\224\275l\3274=\316S\272=a\341\210=\001\027*\275\323R\024\276\225?\314=\217\000\226\274B\360\031\273BK\232\275\034F&\275\005$\336\275M\375\202=\273\320\216=j\013\277=izX\275\021%\236\275\342-e=e\220/\274\272vt=\000tR\275\273>\277<\027\304P=\217k\202\274\363&\201<\374W\337=\353\354\333\2758e\361=r2\360=<9\031\275\231?\035\275\333\023\035\275\240\023\364=v\031\250\275\252W>=\270D\312=\335l\232\275V\315\212<}U\014=j\334\216:\n\035\\\274M\023\317=\222\214\220\275\327z\305\275\010\017\323=\203t\305=\033\213\314=<W\211\275\'\224T\275G\237\276\275`\251\236<\237\322\232;\330\216\002>\331M\271\275\006\343\017>\"W\016\276~Bi=\347oI\275\030\243\236\275\302yv9\2312c\274S\330\344=:\367\201\275\340S\333=\233\325\210\275\312\350\213\274\211M\n<\201E\300\275f$\201\274\257\221\021>\360a\354<_\362\342\275,\361\3179\020!\020=\025\005\253\275m\203\212\274e\'\224=\027\270L=7}\213<\306\270\316=\247\316Q\274\353\t\'\275\357>\273\274;S\010\276\373^u\275}\236\005>wJ\332\274a\215U=\245\374\351<\n\321T=\037\242\341\275\344W\223=\342\232\214=3\333\211==\310\336=\324.7\275\025\251\203=_8\236\273Lo\255=\236\377\364=\303^\227\275Q?\014=\317\243\233\275\3517\372\275\361g\025\275\027\024\204=&.\252\274jmq\275!\243\344\275\246\242\337\2741-\026<\266!\235\275Z\332[\275\311\276\233\274h\355\002\276\323\376\317=d}#<\374\331R\274\251\322\001>0;\023>\236\267\202\275\232\177\233\275\322\252\230\275\250?B\275Z\226\002\276\367\341\263=\331\267\001\276|f\351\273\204\364>\275^\326\014\275\366$\t>\235\366\302\275\263\323\201=\030&\340=\330\256\332=JJ\020\276}\230\262\275\256\037\373=\3740\360\275\374\346\245=\210\026\216\273\345\355\345\274\226\241\017\276vW\304;^\003C\2759\333\260=\271\375(;\034\272\023\276\\5v=\025}\206\274\007\205\025\275\274\\\007\2760\337\356\275\r\022\262\275!\354\017>\276\036\030=\373\335\371\275\031uz=\207jB\275\352\252\316=\253\300\356=\324!\255\275 \246\242=\315C\266\274\215H\000\276S\366\014\276\337\304\355=\027\337\240<\020\033l<\010Z\234\273\037\036\3659\211\2529\2701\030\024>\357\374J\2747\002\236\275bg\303<h\252\010>r\307\270=\203\253\005>\265\235\312\275\306b\376=\025R\016\276\342\250\021\276T0\204\275a\007\351\274)\032\206<\236gS\275\342]\000\276\303\021_:\201\356\230\274\032\201\014>(\325f\275\376JC=\';\023<\313\000\377=N\315Q<&\177\023\276\213\252\030\275\373\261\300<\302\215\000\276\355R\236;\247I5\272\365\247\257\275\244Z\025\276\333\277\363\274\177\224\003\276*\243\373\275\270\302\214\267)N\316\274\305\242J<\270\374\023>\333\325\357\273\245\236\324=\217\320\222\274D}\001\276 \342\212\275\201V\003\276\014\010\020\276K\207~=V\"\316\275\304\356\341\275@\n\321\275\000\210\t\276\363\370\273\275\2577\005\276Y\205\210\275\210;\325=1r!=\375\312<=c\316\372=]\234\236\274R@\246<\361?\244\275j\\\232=hC\365\275(\245\226=\221O\005\271u\227\221\275l\361\314<D\363\312<>\030*<+\\2=\265o/\274\212\320I\275\261\334/=\277\245\257=\305N\016>\245\265\213\275\364U\341\275=\231\022>\254\020\023>\250\000\346=\205\235\345=F\"6\274\315\262\216\275\214@\274=HD\r\276\265\304\240\275\272\263\021<m\222\325<\033\257\272\275\007vh<@\227c=L\020\263\275\342Or=beK=\346\026\270\274\022\'\214\275\236\327}=D\242\024>\3311\372\273\355Cl\275\322\006\020>\033\213\t>\033\305e\2758\242\353\275\303\026\337\274jR\034\275\201\2050\274O\n\261\273\346\306\277<\365\257\346\275-\265\276=\007\364\007>n\224\305\275\362\252B=W\221\336<\006B\006\275\016\310\021>\030\242\334\274~\037~=\337\334\336=\206@t=|\007\333\273\212 \017\276-2\324<\211e\263\274(c\271=U\340\367\275Gd\355\274\345\017\214=$\333\337=y\\]=\022\032\354\275\216Y\014>S0\213=\245,\353=|%\346\275\007\365T\275(\246\226\274Q\027\034=(\232\263<\341z\220\275\177\320\225\274\363\315\001=ep\270\274\211\025\201=l~(=\251\375\020\276\220F\257=`_e\275\223Q\326=P\006\223\275r\272\007\276i\330\232:\211[\273=\353\241\203=<\216x\272\346\364\311=\346\224\005>\320P\222\275\023\250\315=i\013\346\275\301\224\244;\r\017\242=HB\013>P\322\200\275\325\000U\275\375\301\325=\312\202\007>\230\200+<\274\034\345;\t\305\000>k\031\272\275\020C\217=\300\236\375\274`\243\213\275\365\320\004>s\331^=8l\266\274\342\222g=6\264\250=I\034\033\273\371\225\000=\034\235h\275\000\227\342=\2200\020>\354\017\314\275\210X\253\275\262\364\316=p4\305=\313\205\005>\333\207\354=\330\230\221<\263\251\303\275\264}\356\273Ca\333\275b\337(=\215\335\216=\252\315\005\276\n\374\204=t~\2419\036\306\313\275\361\340\306=\255\377\251\275E=\263\275\221jd<\304-\211=\320q\366=q\331\371=\020\006\014\276\317\226z\275\321\206;<\201\255\021>\241O\032=>\303\010<\t\014\357=\313Pb\275,\026\001>\266\000n<\234\237\342=\005H\r\275\326\344\354<\216\260\227\2757\344\000\276G%Z\275\207\226\241\274\014A\231=\243n\316\275\327\365\243\275)_U=J\347\237\275Fa\251=|/\362=\234$\241=\246\304!\275KE\321\2742\330\220=\326\255\345<n\303u\2758\306%;\220\275\205=\343\027\351\275@\rj=>\037\236=@\345-\275F\224\020\276\200P\024<d\027\254\275\274\024\206=\2539\266<\2308\025\276\310\371}\275\223jW=\265\367\003>JP\304\275\247o\325<\'\0069\275;\371|\275\026\366\336\275\n\351\024\275\325\030\023>\252\006\005>/\253\325\275g\025\267\274\250\363\\\273\240\235\221\275\010\367\370\273O\311\301=\274\241\010\276\t\036\017\276(I\177\275\305\235\024=\024cn=\355+\337=\211#\270<\004\204\304\275\206T\313=C5\000=\023\203j=\220\344\014>\264\313-=J\022p=\201\271\362=\271\354\203\275\241\327p<\025\362P\275\342\313\346\275.\335\277=\375\347&=\250x\276\275\023k\214\274\253\373\234<C7\377\275[\006\346<\265-\332;0t&=\031\022k=WE\321\273h\224\230=\014\314\350\275\257\0076\2740[\250\275\005\223\253;\367(\005<\\\211\t\276\002P\300=\346\276\374\275\260\313\314=\372[\211<\3418\224\274\033\273\233\275ai\374=\325?\310\271\026\326\321;\301\251\364\274M\250\022\275\205\031\214<m\307\204;\331$\270\275\314\241Z\275\351\335\326<\225\016\347\275e\241P=\365|J==\"\273\273\334]\340=j\340K\275\013\2555\274\361\201\032=\260\035\203\275\001\177\372=d\200\303\275>cL<Ua\235\275\373T\032=\357\022\000>\356\377\324=\177R\001=\025\036\261\275\230\366\373\274\2070\014=(q\017\276k\311\367\2750k\347\274XZ\r>\n3\312\275\330\001f=\333\014(\275\t>:\275g\376q=A}\025>\273\300\024\274\267\201\371\274\221\372\250\275\327?\323\275\372\373\216\274\377^N=[\220\017>u4\327=B=\310=\020\013\021\276\307n\350\275\375\324\023\276\203\247\022<\237)n\275V\r\021\276z\225\t\276\241M>=\2405\316=\3757\300=\352\354\241\275f\240\303\275\220\265\253\275?\211\007>\302\265n\275\364P\013\276\246B\325=\313\250Y<\371:\320\274\311\032\246\275\177\336\271\2756\335\204=V\344\016>\215\271\024\276d\037\316=\375\355\210\275\314[\020>\321I\332<\217\321U\2754\373\204\275%\317\305\275la\345=\347B\375;\277\355\215\274\275F\332\275P\302\335\272!\013\250=>\025\002>\300up\275\211\t\214\275NK\330\275\225\007\007\275\200\346\270;\217&\017>\236K\242=F]\340<\360\234\244\275c\203\177=\253\277\301<\026C\276=\013\223\010>E\364\343=\3761D\275S6\231=;Y\341=\006\026u=|\r\257<\016\035\200\275\212\373\254\274\'`\t>=\301\203\275!Q\001>-p\223\275\240\020\021\276N\306\210\275\334zv=\002\356\265=\205\272\007>z\021o=h\256\353=N\241\353\274\375K2\275\000\364\005\276.\367\223\275\337\310\024>H\353\252=_\t\372=\345-<=\035\013\000>A\322\262<\375 \336\275`\210\265=<\022\305=\310\0349\274\263Q\204=\265xj\274\366D\202\274\002\004\272\273\274\226\001>u\376M\275\003\343I\275\037\206\260\275\375\264\r\276\2203\315\273}[\331=\2469\250\275\351\322.\275\211\343\357\275\2015(=\025:5\274\003B\325\275\326\225\263=\242\r\207<\276\014\003>\013\247\014>\316\213\223<`\0166\275d\352\263=\306u\367\274M\366\r\276\325\351\336;Z\366c=\301\3664\273\013W\325\275\2307\373\275c\364^\274\204L\240=,\023\326=k\033\024>\314\026\235=qx\"\272\246\251\022\275\331\\\224\275\361,\257\275!K\n\276\202\037\206;%\321\250\275\003&/=\327B\025>OB\255\275f<\024>\034\340\206;b\321\036\274\331a\006>\227\017\335\275\264x\013>\243|\220=\325<\305\275e\036\314<\216;m;\025K\360\275J\024\017\276\302G<=N\352\300\275\216+\230<\003*\311=\335\372\371=\016T\214\275\376\350\205\275\341\230\303\275~I\n\276\325\272\327\275{\311\306=q\304\330\275\017\037\344\275\220\314\023>\370V\260\275\375}\312\275\034\215\315=c]2=o\024\315=\026\260\322\275c\352\242=\272z\302\275\243B\024=\325\010\215\275\212\316\301=y\344\005\276\336Z\265=_>f=[4-=^\321\234<\t`g=}\311\342=\263\373\214\273\260\317\265=h\202\343\275\264\305\272<2\203\r\276\024\275.\275Ob8\273\204\035\t\276\'\013\240=\002q\007\275\237\220\325=\322\026\277=@D\340=\030\340\014\275\314\300\365=\351\352\343\274\\\312`\275v\020\001>\323\300!\275\"\220\324=-O\030<\305\366\\\275@T\021>L\363\r=\364\361\367=H\017N;\022\351\341\275f7\304\275\266\351t=5v>=\351\212d=@\202~=\257\r\255\275\3463\212=\372\276\336\275HM\202==A\353=\216\377\003>\036\2114\274\325r\325:\216q\332\274\264<\r>\214{\370\2758Q\302\275\265\337c\274\371\217\311\275\266\253\007\276\225\324\241=\364\\/\275\335\305g\274\206^H=\037Y\322=\304\245\361\273\202\336\355=\342\215U\275\315\205\227=\306~\024>\215\301\200\275/\373\241;\312\275S\275\321\377]=\016\0106\275\320\337\005\276Od\344=\333B\222=v\277\022>\366\216\010<t\177\344\275\322\206k=\2741\002\276(\036\346;A$\232\275x\364\331\275\3505\334=\367\2712\275\360\237\254\275h\205X=\322B\371=\313\021\251\275\311\312\333=u\r\016\275\357\356\230=\255V\211\275\004\020\251\275M \010>L \267\274\346\335[\275\350[*=&\345\332;Kb_\2758\362\201\275\306\227\301=:\265\254=\224\014\212=\033\'J\275\217\236\003\276,\212\353</\270)=\313\"(=\341\2512;\002\320\236=\301S\305=\033F\233\275\237\345\254<\341\305\034\275\275\247{\274\000\241\327=\270\2511=)\r\253\274,\020\256\275\274\344\226=\375\365\315<12C=Z\2463\275\265\234\221\275\377\034\016>\235s\033=n\210\316\275\352\005\024\276\306e\320\275\\\016r\273\002\217\002>\177\272\016>c\r-\275\014\027\246=W/\371=\016\366`=8\306)=9M\262\275\223\234\035=J\030#\275O2\212=\036p\323<|a\261<\320\315_\275o\234\374=\310\026`=\331\305\270\275*d\201;\034\304<\274\233\346\024>p\\\221\275k\244\272\275\364R\235=\306 \342=\210\003G=kc\335\274\275\201\365\275\267P\t\276\016\277?\275\345\315\376\275\315\300\355\2750.\005>_\336\205=\331\031[<\312\0130\274\302t\023\276O7\251=;\253\007=\002|\205=L\256<\275\360\226\375=o\360N==\022\317\274\202\3170\275\376q\006=;\027\344=\204\357w\275_\223\321=\025\231\361\275\224>\013\276/z\017\276\321\225\370=f)%=\t\235\367\274\271\327\n\275\332,_\274x\254\242\275\2018\177<6\252\224\274\005\262_\275\212\245\"=\206\245\217;\354]V\275\277\264=\274\256,\341=qP\006\275\360>\025=\253\2243<(\247\345\275\372\301\000\276\333e\337\275\221\360\010>\336\340\n\276|1\271=\372\267\013\276w\341\021>\343\321\333\275!\371%<\270y\322=\261\034\t\276\223\307\370=\340\240\033\275\210\313\343=o\024\r\276\241c\353=Ze\017\276r\303*=T\240\372=\245\256\311=\244b\335\273t\365\204=0~\022\274l\272\032=f\244\037<\213\265\221=\2669\354<j\310\341=v\035\263<\316\224\251\275\013\3550=V(\022\276\307\357\005>\364\274\027<2\330\337\275{mc\275\340\376\306=\223U\331\275\313\013\244\275\0221\333=Ic\270;v\314\323=/\223U\275\244\351J=\321L\310\275[\330\233=6\330\362<ES5\275\345W\005\276\344vm\275\255\353\210<M\311\017>\\\377\276=\317\263Z=x\353\306\274)\3771\275\213\343\370=^\346\257=[\234\025>\344\262\232\275D~\005\276\'\257\237\2756Z\024\276\334\237R=)\215\304=\235\3701<\201\305\252=\253\246g=\322#\316=\246CA=t\223\255\275\024\314\234\2743\363\257;0\352\275\274x\225\366=\265\352M\275\365\203\325=\330\271\013\275aO\\\275\227\004\233\275\320\346\0319K9\251\274>\275w<w\344\017\276\311=F\274u\226\023;\310\243\362=\243`\225=\270\364\177<<\177\001\276\314B\004>\267\342\316;\026`w=U\001;\2755\234\312\273\204\362\303\275\267\271\325=:\353s<S\302\365;\226{\370\274a\351\032\275.\217\235=\370\232U\271L\021\003>u\330\301\275\367\235\004\276\n\211\024>\007\233\024>\376Jj\275B\214\321<\231\205\252\275)\377\216=+Ph=\025\335\204\275\361\253n<\323>\373\2753\204\001=oQ\332\275\253\225g\275#\252\r\276\300\320\037=J\002\365=\345\232\274=@r\024>&\000\021>u\005\307\275\\b\000\276\356a\314=\226\236\277\275\260D\035=\264A\004\274B3\017=\013;\331=\272D.\274\314v\314=\211\027\206\275\001\242P;\355\000\220=\016{\007;\016\234\267=&?\364\275\257\316\004\276\231>R\275\333\374\276\274\341\034w\274X,\251\275\2609\256=\010-\n<\267\017\260=\335@r<\337\307\252\275\344\344\316=\017\324\353=\234\270\204=Z\037\364\274\353.\220\2749\213\006\276\373\2017\275m\022\333=Th\023\276\037\027.=8B\234=\204\031\276=Y\312\354=\346\215\314\275\320\307\210\274\310\037\342\275\311}\005\276\n\021.<\367\364\333\275\366u \273p\233\204=\233\027\202=\035\t\254=\370\372\006\276w/\235\275\320\263\217<\323\356\000\276\244\236\370=\254\275q\275\302V\307=h\336\t>\223\325\357\275}\240\225\274d\226\264\275\312\302/\275\271\220\253=$\264\373<\213\213\241\274\311r\025\276@\353E\275F\355\347=`\275\357=\033\022\346\274)\2444=\234P\205=\264E\224;\004\211\246= wf=\376\024\234;\374\255s=\211\214\000>yX\017=\224\271\232\275%\035\027\275y^\303=\271El\274I\365\t> \010\210\275E\220d\275/\215\235;\247\372\004\276F|\021=\356j\307\275\211H\333=|\213\024\276\326\235z=\314\357\305\274\214=.<\272X\026\275H\325o\274\010N\016>\"\002\314\275td\356=\240\311\253=\201\036\014\276p\312\306=c(\357<\221\005\370\275\234\225\366\275v\365\3419\215(\025\276\227\025~\274*\372\201\275I\321\307=T\".=1\375\224=\324b\013\276\366\013\025<}\225\327\275A\336\225\275\":\n\276\333\341\267=D\360\313=\201s\274\273\277\031\n\275\355[d=\325\337\003\273m\355\241=\320\340\326<\n\026^=\347\177\000>M#\252\275\033Z\223\275O\330\324\274\374\211\016>_\020\270\275lc\363=i\216)=\261\007w\274XY\252\275\217\0018<\017\354\r\276\332\265\274\275q&\321\274ab\364=\242\226\037=o\234\271=\306\352\016>\350l\354\275\246\207j\275\317\207\014\276C\241/\275\244\250M=Z;\270=wy\005>u\375A=`+\365\275\0362\375\275\216\220\210\275\330\321\037=bW\t>M\002\005\276\271\252W\275:\010\007\276v\315f\275j\355\210=\360u\252\275\3431`=\235\226\365<\001A\020>\316 \020>\271\331\010\276\363\r\235=\017\363\205=\204\237\353\275\312\254\022\276\371\343\006\276\177\357\260=\357d#\275\242\256\311=S\006\365\274zA\376\274J\253\006\276\202\234*=\344\314V\275e\271\2769P\220\013\276\242p~={\325\014>\253\215~\275\032&\355\275\006\334*=?\365\022>f\\\325\275J\240\001\275uQ\337\275\372\001\377<vT\020=\035:(=\306|\270=`\265\300\275T\364H<\352\373\377\275\304\254\010<6G\316=M\335\213\275\034\035\003>\303\366\277=\331*\354=Kn\343=\24373\274\306\310G\275\354R\023\273h\342\377\275\306\263\"\275\023\366\274<\247\344w=!=\263=\252j\005>\202\215\337\275w\014\237\275\375\253\336\275_\347\004=\246\177\364\275\274\350\233\274=\022\021\276\024;\016\276\177\312\231\275\257\251\014\276\3664\302=YC\310=\026\246\022>]pD=\235\007\n\276\375\274\t>\362\022\203;\205o\010=/]\377<\276%\310=C:\017\276^K3=G\251\276\275#6\274\275\346\265\024=r\346\240\274/]\032=\224y\240=\314$\355=x\222\250<\3635\332=[;\366<a\260\270:\320\253L<\335\201\352\273\030\206w={\251\233\275N&\221=z\305\004\276N\\\001\276\017n=\275U\327\202;\310s\356\275Vl\236\275\024\203\'=\233{\n=X\263\315=~\234\266<}`\351=d\334\n\276\263\227\016>W\210\352\273Q\367\021=\356\316\331<\347\363\303=\204\310\274\274\256\220\367=JS\365\273\250I6<#\306i\275P\262\017\276\256\241{\275\200/\227\275\276\336\250\275\020-\265=\031S\010\276\355\253\321\275\265\224\233<3\026\r>\3518\362\274\266\225]=\213X\263\275\220\262\033=\227l\233=@g\341=$e\217=\016\242\023=\227\242\006>\367\233\222<h\210\210=\330\300\205=o<\017\276\367Y{\275\345\206j\275\214.\335=\275\251\306<\376\002\003>\253|\223=~\255\312<\"9\364\275\367\026\305=\301\367\021>=o\002>\236\360\216\275>\227v=\260$\376;u\303.\275~\003\267\275\255\216A\275/\026\t>\337\332\016>\333\345\341\273\306\351\251=\2679\247\275\022S~\274\301\312\222\275Vb\263=\266\261A\275\364\033\232=\324I\317\275\336\264\301=R\267`=\366\2040=\327dv=\374\224\205=F\221\341<\365\340\212\275\031\004E\275\323y\263\274#K\334=?\t\336;;V\020\2755\006\314=\334\371\231\275\353\254Q\275f\206\003\276\360\277R\2752\304\254=.d\311\275\036#\267\274\315\316%\275\351\323\314\275.?\024\276\030\343\276=G\357\326\275\031\363\r>\036\336}\275\353\231\330=\356\324\366\275\316\216\234\275\201\003T=\301\031\036\273\300\"k=\215\243\235\274\232\003\337\275\345\271\034\2741j\006\275U\333\372\275\003\275\334=\267\265\306\275&\305\002\276^\315\272\275z\375u\275w\032\325=\r=\301=\211\275\023\275\325\364\345=\013\016v\275\035\303R;p\304\354=\355m\321\274\234\234O\275\277\247\307\275\317 \316\275\260\007\276\275@\347\006\275\374\035\017=\212\262G=)\230\333\274mX\224=\301\337b\275P\273\357=s\020\022>\037\226M\275\304\223\265=|\273\276\275rM\002;<^\016\276\273V\247\273g\220\273=\375S\307\275\003E\020\276\301\023\255\275Q\314?=\323E\326=F=\020>\336=\366=\212z\\;\\\363]=\220[\335\275u\354\365\274\331,\277=\270\276\223\275\234a\304\275\310\265\265\275\023J\206\274Z\3164=\376\314\327=iP\014\276u\263\216\275x\235\r\276\270QV=&\343\321\274\361\241\266=\225\267\017\276Np\327=\311#p=\337i$\273G;a\275\021\344\333=\363k\024\276N\371~=*\000t=\257\'\367<`\267\177=E\202.=c\306\343=2\325\210\275Hj\216=w\024\324\273\010\361\016\274\n\324m<\275\277\311\275\252MF=\021J\024>)A\305=\226\312\022\275\203\036B=\350S\234=\t\r\231\275D\332\261\275\330C\270=2\0273\275\321\2501\275\261\235\025\275\223\202B\275\n\022\r\276\345).\274UO\263=\001|\257=\030K\037<p\017\201=:q!=Z\360\017>\365\031\231\2755\257`<H\324\033=\ty\264=\3043C\275\337\363\266\275G\363\306=\312\331\311<\262[><\225)n=\347\367\352=\365~:=\017\354\276=\327\272\355\274\017P\220<\345\207\256<I\253[\275\303\344\271\275\366{\332\275\276\377$<\376)\375=b\313\034\275\200$@\2758r+\275+g\312\2750\374p=\366\314\307;\311@\337\275\344\356\253<{$\350=\305\014\222<\322h\331=\225n\262=\214\271\217=\342\327\272\275y\033\276\274\270\013\226\275\007\301\201\275^\272\234\275\1778\365\275\340n\257\275\374]\235=;\330\252=\277\311f\275$\265\222\275M\207\356\275\360\274G=\276,\020>\336\'\007>\tU\304<\351_\2529f\'\241\273\024\340\227\275\324\314\244\275.m\t>Q\027\355=\020\r\352\275\222=\326=\2121\022>\365\"\375\275\347\251\206\275&\247\n\276\375\276\232\273\372\2424\275)\303\245\275!\342\323=\007\370\016>!\024\025\276\301\314\022=\013r\337=\312\261\376=\236\347p\273I\003\322=\023\212\312\275\210\221\344\275Z\300\237=2\305\231\275\211\033\315=\336e\r>\273,/={\024W\275\201\330~\275\"\311\345\275[\332\013<\367?\204\275\352\204\273\275\351x\000>\224\343\017\276\364\207\027\275\267U\020\276\331\345\017\276&\234\352=\303\301\362=\371\225\017\276C\014v\275\225\007\236\274\272\310\026=\372\374\023\275 \244\001=\277`\014>\025\305\313<\326\000\261=c&\226<&&\342\275\246\004\204=#&\023>\214y\214=\303\345\211=\020<\320=\262\003\023\276\2413\331=l\253\305\272\246\310\037=\021/\006\276\023\314\313\273\203x[\275\035,\014>\277y\221<\033k\021>{\337\t\276x~\322\274\271\200\016>\243\377\315=\2415/=Tb\242\273|\002\210\275\360\212\333\274\205\026\347=\201\346g\275\252\2149=%\374\225<%R\005\276\307W\002>\206n\253=\346!\307=j\364\263=\240\324\257\275r\013!\275\250m\305\275\247\r\256=#\177\322=\221[\017>s\373\336=s:\334\274j\031\263\275\307q\"\275\230\026\013>\351\001\021\276\373U\324\275\220m\005\276U!9\275P\310~=\021\303\272=\010o\356\275\237\377\220\2756\214\326=\037\360\033=+]\207\275\031b\021\274\205/\377\275\2709\014>\347\240\313\275\222\'\206\274\276\210\016\276\t\340\317\275\334^5\275=\017\'\275\370\347\236=e\301\347\274\tF\261\275\022\000\272\275\377\035\226=Ns\314\2754\331\204=w\223\257<\036e&\275\264\236D=e\203h\275;l\302=\025\t(\275\\\201\363;\271\250\357\275\320\213\257\275\216w\346=\304\021\270\275\246/T<\307I\332\274\377r\017\276\002\026\016\276Cw\246\275\230\3342<\324\224\204\273\254\030\r=\245\275\205<R\211\243\275\323\027F\275\324o\313=0\335K\275\375\036\246=5\321\363=\317\3742\275\254\202\367=\221\206\344<^Jd=,\203\337\275\206\276\217<\307\316\264\275\037\363\262=\366.\260\275\305V\017>-\r\275=%\\m\275\326\367%;Q%\254<\200\n\006=$\264\235\275v\230(<q+\023>\247>\215\275v\375\203=\347c\230<\325H]<G\233\000\276\026\021\315=\312t\222\275\3630\231\274\251\354\013\276m\274(\275\003>\201=\2339\330\275\023\013\327=@I\274\275\377\210\\\274\355\033\366\275\277H9\273\340\275a<\3247\367\275]\316f\275\010n\337<\\\207\215\272Kq\365<\251\300\246\275/Q\346\275\210\301\312\275\024\232s\275aL>\275]r\267\275\217\001\255\275\220\221\234<2\216\212=\372[\233<\013\304\372=\330\321\002>e\371\313\275\321\321\022>.q\236\275\265\020\210\273\256\334\200=\030\233\376=*\255h=\356\261X\275\030T\220=S\036G=\335\017\366\275#\307\313=\243\324\n>wM\034<\025i\301\275l#\277\275-\223\310=\241\316~\275\342ic\275\022\376\003>\325\001c\275lh\220\272\026\236j\275\316\356\353\275\336i\224\275\302-_\275H\246\014=\230\273\361\275u\'\306\275\243f\346=\220\252\343=\332\341\334=\345:\017>p\273\206;Q\246\352=n\204\277=\225g\213=\004\272\271=0\344\263\2757\027\215=z\320\336\275\236\313\245=\367\376\032\275n\"i=\374\277\271=\005\256D=M\257U\275A.\371=r0\r\275\321\235H=5\016\350\275\232f\001\276\030I\242\274K\217\352\275d\317\250\275;\331\321=\311\317\035\275^\335=\275\234\212\230<\206F\211=\244_\244=&\000\251=\374\324\023\276\031p\333={\222\371<h\000\021\276\266\271\021\276\327\351\r>l5\021>\360,k<\343Gm\274\223 e\275\025\\\314\275\356\003\255\275\211\275r\275;1\253=\206\202\361=N\330\244<\271\316\222\273=\231\253\275\202\256\321\275\343/\215=\236\3034\275\375I|=g^\000\276*[\207=\372.\310\275e)\276<\016K\226\275\017\375\006=X\027\345=\026\023\020\276\340K\265\274\330\013\350\275\233\244\217=Y\325p=\236\352\r\276n\317\255\275\224\262\342=s\335\370=FE\254\275!\362\352:\330h\264=\254\\*\275\241\002\006=.\225\220\275\r\252\330=\353\330x\275\202\257\336\274\206%f\275\246W\010\275\236\340\357;\356k\005\276U/\202=\275\366\016>IW\235=X8S\2734\025\262=/s\234\275\316\212\354\275@\006y=7\205\311\2753l\211\275\227>y\275x\327\350=S\"\355\275\200\336\373\275\317\360\362\275`\r\320;Hj\305\275\006\202\267=\341\224\365\274~\t\213\275\3660\222\274\3528\013>\\\250\250\275\240\362)=\217)\275=\025X\364\275\202\247.\275\340o\256=\226\241\246\2751\301\233\275\221\261\364\275j#n=\006\354\234=\\2\332<HT\317=\307\205\260=v\260\010>Qx\273\275\337\312\311:9\257\324=\364M\004\276\320\240?<\004\257\304\274`\245\014\276\315\344\330= \331\024>]\372\364\275\365\375r=`wP\274\r\\\352\274\341\244\224\275\333\002\332:\366\"\035\275\034Yq\275\313Z_\274\3458\342\275\375h\t=q\023F\274e\214\351=!*\013=\345\267\004\275\235E\002>\247\351>\275\230\0374\274\335\260U\275\3510C\275i?\226\275rI\005\273l\036\377\273|\353\350\273\363o\335\274\\\326\003>\330@\022\275y\240\362=\303\211:=\2739\356\275PT\361\275\27791\274Pr\254\275y\366g=\240\016\325\275h\352\r>P)\377\275+\'\210<\271,%;\021\267\013>\354\320.=\211\364\025\275cT\311\275\037*6\275r*y\274Wa\375\273\205\356\016\276\311`\323=\331>\301=_\222\t\276\026\213\202\275\272\271\271\275\262\203h\2753\263\302\275\320\317\034<\367\361\206=\277qw=\223C\360\275\302=#\274\027S\017\276\376Q\003>S\n?\275\030H[;\3711\305\275\207\366M=\200\010\362=\331\"\272\274fy\315:\010\007\213\274\006\343\257<\021\334\351\275\025]\025=6\256\237;\336\325>\275\207\244R\274\260\361\317\275\033\362\236\275r\240\314<;\304\341=\003\014\321=\037\266\302\273\353\007\201\275$(P\275E\262n=Dh\300=,\307\246\275\351\"\324=\262\206\276\274~\344\177\275ia\323<\207\370w=\344\3576\274\212\340y\274*\360\344=\232\'\350=u\222`<Hq\230\274\301\016P\275\352fm=\022\364\024<*\177\005\276\351\006\267\274\023\3327\274`\271\347\275\031g\t>I\264\277<{7\302=\266O\241\275\271E\025\276\311\373\255\275\202o\364;\300\315\031\275u\276\375;\035\010\227\275\010\320\246\274\271\036\253=\350\274n\273\021f:\275\306\374u=\024\344F\274\226\375\240=\360K\353\274\034\242\007\276\363L;\275,]\357=\230\331\003>\334R \275.\007\250\275\235~\300=\350;\t\276\370p\016\274\3228\366\275aZ\224=7*(\275=\206\247<\355{\022\276\251\244\236=\306\021\316=>\n\263=<v\036=\rLC\275\214m\024\276x4t\275\342\244\004\276F\375\370=\222\353\241=,;]=\310\374u=\"FQ=\337S\252=\320X\217=r<\371=3x\357\275\255\206\205\272\240\357\322=\342\251\262=\r\334\357:\270g\377\275o%\332\274\373\270\000\276[\207x\275\311\370\n>f\236\023>\027\306==|\305\222:\202\2308\2744\030\261\275\222\230]=\305\000\244\275\327\252\321:\222\177H=c\215\275<\302\\\022\276Q\303\202=i3\340\274\267f==K\254\375<\n\230D\275\2128\035\275\033\231\315\274;\255\375\274\0240$=\213>\331\274\252\233\302\275\311A\021\276\322a\335\274\010\346\333=S\036a\275\352\230\374=7\330\375=2\363\n>\340\005\270=wX\001=\001\204\271<\377X\371\275;m\350\275\206\177\252\275\244,d\275\004\210\216=B\255\374\2743\345\021\276\262\352\234\275\264N\242=4|\337=\364\352\326=M.\234\275\332{\220\275\216i\365<\"\017\263<\372j\t>]c\357=\305y9<\203\207\242<<f\177=\037)\017\276\006\311@=\351\200\305=B\004\"\274\';>\275\346P\205\275\307,\213\274\031\323%=\310\004\022>*.\376\275\372\373\330\275\r)B\275\004jk\275\311\027\351=H=9=\260\311\311;\232\333_=\253e+\275\334\306\264=\n\371\241=%O:=\315\256\n\276\323?F\275\243\304\010>y,\321\274\274\2719;>\032(\273\222\230\232=ka\216\273S\341\024\275h\335\260=\325\221q=\270F\215=/\273\215\275Tq\273\275\212U\352\274`\217P=\237\367\013=\215>\003=\252J\330\275\217\253~=\252\037\262=\300\004\t\275\245\'\034;t\347\024\276Q}\350\275\321\211\321=\3139\013=\0062\336=\027\333J=5\363\320\275\331\227\354=\336\021\035\274\244\241\305<\036RL\275\303\241\244=\346\262\320\275V\000\022>\ns\025\276/\222\317=M\010\t>\375H\251\275\247T2<L\322\365\275\0013\020>i\t\222\275\034\200\317=C\357h=\366%\225\275\2713\347=\247\262\n\276\253\030\215\273\250v\323<u\310\203\275\371\271\367=<\221\212\275_\207\313=\0010\324\275\336c\304=\342B\264\274.\307}<\037%\035\275\223J\001>\274\307\000>{v\371\275\222\210d\275\375\t\303=o\342\332=\016\203\r>\265\241\023\276\253\244\010\275&\tA=\357\024\035\275A\223\000\275\247\325F=%|\357\275\322\027\373\275\331\033\003\276\34064\275\275\314\207\275\264\252\330=\332\304D\275S\251\336=\t\200\300=\326\233\360;9\303s\275bj\302\273b%\277=U)\332\275\341\264X=U\260*\275\236#\256\274\036\371\337=\232\035\324=\257\3043={T\316=\013\350\217=e\302\233\274\002N\273=\231U\264=>\277\020\276\327\025\343\275\315\004\201\273L\314\266=\000\352\244=]q\353=\305i\256\275K\010\277\275\032\235\n>\251\305\006\276\230X\371=&\270\223\275\321\273\327\275\027\250\266=)\340m=B\000\372=\222\3508\275\320\030)\275\365T\010\276\212)\276;<\302t\273\203t\032=\257\325\374\275e\263\024>\264l\234\274\210\017\275=?\312\273=~\202\262<\013\360\324=L\2671=\375\245\013>\267|\262\275\031\000,\272\333h\225\275\177\337\262=\267\347\207=\246\250\250\274\206V\355<\350t\023\276*S\307=\\-~\275\376]\020=\2440\306\273\"\257\031\272>\\\341\275@E^\275\241R\377\275Al\014\276{\036T\275|\332\020>?\256U\275\272\310]=\253\375\337=\211\363\021>*\341C\275H\301\265\273\230\261\227\274\357R\377\273\341\034\363\274\337l\235=SK\017>\373t\374\275\343\264$\275\367\026\312\275L\350\331=\301\316\004>;\375J\275\332W\275\273\035EW= \2469=4\342\303\275\240\233\021\276\366x\353<\243<\201=hw\221\275Zr\022>\274\026\344=C\202\007>\315R\006\276\246\376\021\276@\354$=j\346\330:\347\305\206\275V\276\201;\303@\254<\222\204\205\275\264XG\274\302\330\341=\013v-\273mg\306\275\260\352\373\275\301\307\000>\246\246\367<\231\026\344\2751\310\275\2754\243\230\275\240\325\231=\201/\177=2\332^\275h\370\341\273G\232>= \346b\275QO\306\274Z\013\003\276f\257\343=\324\335\317\275\374\364\333=y^\000>\354\251\317\273Ic\363=k\377\372\275\317\217?\275?v\270\275\367\274\001<\314\255\224\275\216\351\317\275v\325\017\276\324\227\227=@\210\221:\213\243\332=d}\301\275:\367\314=7\276\243\275\224\317z\275%\'\260<\364-\"<\304\357\013\276\t\225\354\275\356|\363=47\320\275\010\354\345<\225\005\213\275\n\324\250=\233M\014>\234+7<1\027\000>\003|\333<\214\346\263\274\217\302\336<\356\002\360\275 \022\313=F\304\360=7\332\215=\254N\t>\222\177\225\274\\\315\352\275v!\227\275\273\323\024=8\216\376\275(\374\236\275\000\323\371\275DZ\351\275a\331w=\275\t\035=\t-\000>\344\234\237\274|\224\013\274\372\274\321<\025s\354==\332\377\275/N\352\275\214}n=\252\213\222<\210\221\200\275.\177\t\276\271m\224\274\215,\335\274Zg\005>\253\356\177\275\221\365\022=Gq\003\275\262k\332\275\200\324\211=\376{\305<\264\314\316=EQC\275\222\247\377=\330\264\361\274\001\271r\275S\262\237<6\355\307\275\254k\022>\240*\324=\262|\363\274\375yL\275\377\311\241\275\025\254\333\275\204(\001>\237\204\003>\020\t\367<2\021\315\275\334\215\257<\001m\336\275\221\353\224\275\272WB=]\212D\271\377\001\203\274\274\341x=\323\315\310\275|\231\361=\214\207P=a\n8=\003\024\013=\035\010\227\275\256.p\274\225}\230\2758\207\367=\261z\376=\305\221\013>\266(\277\275\320\227\035\275uj\244=!\305\236\275\275[\367\275\017\347\305=P\350\225\275\235b\307=\363\267\313\274/\024b<\377\210\021>,g\314\274\330n?\275C\271\215=\325\304I=\316<\003\276\265\232\n>d\251\014>\340O\005\276\240C\323=\233\373\327=yI\271=\314s\212=#\360\023>\375\353\301=\237\370`\275\\#\004>em\t\276\277\341\313\275\024\006\205\275\315\354\330=\312\210\251\275\352\376\342\275\344\030\\\275\316J\337\275K?\316\274\345E\006>\316q\203\275\215J\215\275\253pe;\002F\017\275I\017\316\275O\216\025\276\371U\006\276AZ\234=7K=\275k\030M=\010\305J;;\232\342\275\007\371\202\2743D\242\275U&\301={\001C\275\3357\273=\203=\303=b\237M\275\241\n@\275\201\017\237=\266)\250= \333Z=\013\336r<\315e\017>\242\n\242\2753;\300\275\212\227b=^\374\361\275\356\365A=Q\242#\275\353-\256=\005{\273\275D\332\310\275W\202\213=\t\336\200=\264uv=\241\032\315=m?\265<\340\000\355\275\302)\016>]\354\022>\335X\312=y\230\263<\201\201z\275\342\313\000>F\310\376\275\205&\342\275\355{\374\274<R\365\275\341\340\206=\345\211G<\334\314\233;`x\320=\342\256\204\275\007\036\037\275\343\267\216=\3217y<\307s\227\275@*{\273\td\014\276\"\203\332<T_\225\275e\010\226=\027\206\023>\"\327\347=u\022\237\275\031\327\242=3]\216=K\375\004>\314Ap=\235\200-=\0359\214\275\3476\322<\304\235\372=\265\014O<\227GA=l\203\361\275\373\244\365<\232\270y\275\033\026D\275o%p\272\243\206\365=1I\234\275\321\352\024\275Vl\202=*\202\016>\205\357\224=\223\017\025\276\244Q\306=\'\357\232\272\343\207\312<Z\312C\2752\004\'\2749\261\222=\323\230\202<{\303\232\273i\306\373<R\350\306\275\261\2010\275L9\362\275Q\313\340=<\230\276\275\242[\271=]\3028\274:\343\347=\366\207Y<\221\322\022\275\223G\347\275SR\010>s9\017>\274J\347=\215\275\305=\020*\260<\237\207\346<\r\343Y<\325\263\357=ith\275\223\353\357\275\257M\035\275c\224b\275\213\270\002>\367\355\022>\213\030\247\275\204$\006\275\301\002\321\275G\365\007>8\255\032=\372\206\350\275\272\272\240=\202\227\314\275\261\r0=\030cF\275-z-<G#\354=I\222\346=\252\003&=A\210\317\275\204\273|\274\035\344\302\274IH?\273<\316\340\274\3423\227=Hm\262=?\n\t\275u\260\222=kV\r>\337\033\344=\216\214\213=\301[\332=j.\206\275\316wL=\301 \\\275xI\316\275\257v\023\274\316\001\n\276\2014\266\272\236\225\374\274t.\354\275 \216\253=|E\020\276\370\223\230\275l_\214\274\361\3745\274\232\362\311\275Bw\330=W<\010>\352\330\274\275\272\"\002\276\370\302\020>2n\005<\212\311\226\275 E\373\275\221\223\223\275O\223\307<\224c\265\274\213\363\270=\245\233\372\275iS\302;\312\343\245=7\370\316\275\020<\250=\020\330\342=%S\306\275\3028\014\275\031\341V\274\253\237\037=\266\352\266\275X\343\013\276\263\377\253=\266$\n=1\365\231=\250\325\312=Z2\224\275\373Q\000;\312\317#=\306cp=\025X\206=\355\305\276\275\216\2371=\034\371\345\275p\255\347\275\0332\005;\t\344\002>\330Bg= \036\344<\025#.=\206=\211\275\2550w\275A9\276=\372\366\263<JB=\275}\363\017\274\2314\241\275\3612H=\217\215\247\275;\312\t>\340g^<,#\337\275\276\200\200=\301)\260=\352b]=\221\310\023\275^\327\362\274d@\272\275-\302W\275\200\331\003\276\\\236\010>\227\216\352<w\271\256\274\033\330\'\274\226;x\273\202.\014\276<w\034=>\004\262\274\332\205\246\275K\205\202\275\274A\236\275{\326\003>\'\340\013\276\222\271\025\276b\263\025\276ka\300\274\216\364\275\275\021<b\275l\013\033=\377u\244\274[\356I=?;\014\276\3113\255\275ff\001\275\344\275\205\275\342\313\356\275i\007.=\254\206\373\275\005\026F\275\203\317\024>\377\373\273\275\316\014\016>\003\277\336=\360\317\354\27515\262<*\356\241\275\362\260\353\275l^\217=\017b\006>\257u\343\275K\351\361\275y0\201\275\255\214\255\275@\200\254=<\362\001\2763\360\023\276\220\274\"\273\247\264\245<\026\235\010>:\216\021<\311\232\364=\207\353\\\275{\331\311\273\\\376\371\275K\362\320\275\214q\016\275\325\362\227=\030\304 \275C\226\203\275hd\203\275~\311Q\2744\340\025\276\327\202\003=\301\305z=V\210\246=MW\276=\2350\213\273\332\242\003\276\262f\036\275\264E7=$6\025>l:\346=\231F\r>\322\"_=@\010\201\274\332\007\307\275\273\026\t\275\000\366\006>\340W\232\275\207\233w=\006\247\255\275v\225\243\274\237\204\014\276\361\261\211=\356\233\355\275\377\326\267=\201\024\020\275\215\252\331=\010\267\274\275G\263\024=\"\243\344\273f\253\367=\360\245\022\274\316\017\207=\017\347\215=\t\314\227\275G\265\232;K\333\006\275\327w1<\2147d<\362\374\302=\217\353\326\275\254\031\000=?mL\275V\336\320=;\260\237<\346\215\206\275\030\301\220\275\355D\362=\002Mk\275\274\215\003>\265\254\006\2764\007B;\277M\330<3\250\342<\301dv=\300\3108\275\337\233j=O\373*\274\262~\256=\032\010\224=\211>\257\274\353\310w\275\004\204\324\275\206\352*<\250\210\t=a\333\241\2723\377\373\275\222\223\327\274\236\331x;o\007{<\002\364a=\223\\\276\275\\\t\372=\327\023\347\274(:\270\275\2137\334\273\031\244\337\275\365\031A<o\350U\275\361\261\227\275r\261,<\327\300e\275==u\275L>\227\274\n\243\025>Rx\006>\023o\357\275D\360\330\274\215E\230\275=\340\377\274\026\346b=K\314\323\275|\327\365=\022\037\263\272\313y\331=\021\202\331=\370\262\250\275~\267`\275\241\224\211\275\027@G<-\237\334\275g\203\250=E>\001\274\004\244\341\2738y\326\275x\360\250=\200\034\276\275\212W\217=\257\321>\275^\305\376\274\355\270\370<\211\271\206\274cE\221;\370{\257=I\273\324<\256\243\001\276\337\277\340\275\030\302\214=&\376\353=\311\211\320\275R|\307=\207\336\233\274\362dP=\223\t\236\275\014\271\307<o\363\010=4\365W\275\232J\n\276^t\310\275\342^\000\276\270\022\020\276\030:/\275\271\372\214=\252\335\351\275\346\327Y\275\030\221\345<7\027\344\275{\222\033=\332\313\315\275&\223\000>\325\303{;\364/q\274Sz\000>\357\0076=0\213\"=\177>\256\275\025\226\313<c\247\007>\201\217\361\274\373\336\006\276\261\357\016>\235rn\275\311\211\225<\276a,=\347g\010>\352\340\226\275v-\327<\031\312\240=\n0\021=\311\246\211=^\264\023\276R\377#<\265\367\001=\370\010H\274\230k\277<T\014\224\275\337\215\273\275B\222\273\275oc\227\275\240fD\275\031h\236=\255:\212<\274\021\203\2748>\005\276\255C\307=:\203\317=>F\006\276_\326\324\275|\261\232=\254\031\363=\235\252\375\275\2711\226\275\300ip=:\206\325=\207_\310\274\272\234\r\273\363\330\201\275\006\235\262\275ta\201=\247e\213=&Ug=\337f\342=)\213\231<\234\200\000>*\267s=\205\347\021>\036\204\212=0\031\332<\363^\331=!\263\270\274\306\306W\275+\010\351=\362\207\211=l\257\307=\334N\240=\356\373\271\275\023\270\366=f\014\266\275\345\263B=R2\000>]\300\021\275\026\356\355\275a\032]=\010G!=J\002\233=\267-l=\036-\257=\326\267\272<\267\324y=#L\365=b\371\001=u\344\231\275]\310\234<P5;=\272r\262\274^\273\036=\204\345\327=\275\265\371\275U\237\017;6(9=\235\366\010\275\226\302\323=\337\203s\272\330\351\034=\316\246\313=\223\004n<9\306\014=\010g\312\275\3654\267=\030v\024>\201\234\025\276\212\205J=PUL=\325\377\024>o\273t=\r\275\223\275\376\273\261\275Y@\204\2751^\315\273\302\356\017>g\032\341\273\346\221y=\347\035\303<\314\326\226<\003\232\031\275!c\234\274\353\306\357\274\357\036E\275\241g\010>y^\000\276d\035\355=\314\205\232=\344\272\243\275\225\373\220\271\233e\360=>\217\233\275<V\247\275\273\305\325\275\037\274;\275\375[\317<:A\200=\244\323r\274\255\324\261;O\021\211==\204.=9\3101\274\353\354~=\231)g\275\rn\t\276C\343\211;>o\014\276\275\017;<p\n\007>\371l\024\276\013\256\003=x\276%=\375\016\320<l\tY=\240\007:=\000S\001\276H\030\330=\241Tw=\315\033\014\276\363b\341=Du/=$\241\252\275\026\030\354=f\324\201\275\220`\014\276\0360\371=\254\242<\275(l\025>7H\213\275\264\363u=X\263w\274\307\024,<?F[\275Yx\245\275l\216\261=\271\325\214\273\216\302>\273\020\351t\2755\224\347<\335\326\n\275\225\035\275=\223\235\336=tX\341\275~\033\216<\374ui=\366\207\006>2\276\240\275|\rS\275 K\257\275\303D\362\275\240\3769<\336\322\240=\361\247\227=:\223A=\243%\202=\177*\023\276\\\270\241\275\361\206\333<\241\021\n\276\323\215\331=\362\253@<\236\207r<l\314\266;\303^\213\275\370\"\236\275\373<\325=\n5\325\275t\366\345\274\336<{=\363F\337\275\375+Z\274\337p\344\275\237\301\016<\220_>=\306\250\302=\277\242\016\275[K;=\336d!\275}\211\023>XA\014=\253\025J<\031x\235\275\177Z\037\273\247\264\025>\261\3723\275v{l\275]\001\330\275\265r\344\275\365\352\010\276\326h\243\275D\027\251\275@c\206\2756\313\367\275\347S\000\276f\264\033=\374d\233=\361~\307\275!\341\303=nP\016\276\362\351\r\275\201I\205=\202\374]<^.\361:\336\010\271=\251\267\024\276\227\366\347\275\303J\243;\365{\356=\234\025\243\275\264\210\244\2744\260\354\275v0\n=\356\223\331=\306\023\353\275\3071G\275\205\257\006\276d\360\375=\355M\202\274i\327\001\275@\024_=\317q\262\275LfT=~r\372=\343\020K\274\230\376\321\275\013\003\304=s\352\314\275w\345\352=>\267\364\275&\003\221=v|\347\275\372\253\354\273\275\323\261\274\034L\t<>\320\214=\017\300\344=\203\177\035\275\211\241\363\274\301\016\202\275\326\251\026\274\"\256g=*\224\224=\2453s=N\254\220\275\325\331\256=\373t\312=\021p\013\276\337\326\307\275\243\252,\275\017\257P<]\020\274\275\022\363\300;u\020\365=\205.\225\275\243:\002>\232~\246=\334\001\226=\225\037\007\276\033\237\314\275\317\255\275=4\245|=*WF\275H\030\351=\036p\213=1l\021\276\301d<\2749~\276\275}X\001\275\362\274X\275\354\333\322=\340Vf\274\232\324\002>\343H\t\276m\266\312\275\'-\246=\207\226\205;q\232\331:g\241\007\276\313\341\330<\007C\010\276\244\301w\275\241\3770\274\322\237\344=_\376/<\3101b=\246T\013>\352\"N\273\270Z\364=\n\365\303\273\246]\211=\377.\345<\363\340\005\276\2512\023>\t\211(\275\006_\024\276\347\020\320<\227\224\342<\245\245\367\275\355\3602\272\230\336\007>\307\027\223\275\025i\342\275(\010\025\275F\314\000=\255\224a=\226-\304\275!\334t=f\344k\275z\337\215\275\226\r\277\275\361g\334=\2278\374\274t \240=\027?\304\274\334\372Q<\031\272\245\274\210\n\202<\034\246\216\275f\375v\275\314\241\250=yO\360\275\246f\300=[\177\025>\334\200\342\275\037\322\364\275\341\341~\275\346R\331<\312\377\014>\366\257\247\275\002\034\237=*^\037\275VS\331\274N\305\034\275\212\240\316\275\233\020\234={f\t\2767J\225\274\025#\300\273\246\365\202\275\374\020\341\275Ag\373=X\316Z\275\021+\320\275\004\022\310=\254U#\275:\303\200\275e<T<\177\036\024\276\002\353\256=\324\241\316\274\307\216 =\0174\237\275\026\314\342\275\374\231\016\2769\032\016\276\tk\366\2759*\014>\014\243\261\273\376\020)\273KB%=\336M\305=\373e;=\313\337\335\275\301\327\374\274\024\215\201=\303\365\240\275\3561\361\275\007\"f=\327\214\232\275~&J=+J\216=V\231\214\275/L7=\272T8=)p\"=\350\347\317\275\237p\007>\205H3<K\215\343=\270\324\373<\205j\305\274\017\353>=\225\365\227\275}\233c\275\333\246[=\253e\247<\232\222\232=:\273\350\275`\330\334\275s\214\201\275\202\240`=\221\346\004>\254\372\017\275\376\244\343\275gP\210=\002x\024\276 \252\374=\315\244\302\273\205\013t\274L\007\315=!\217\276\275-9\210=\305\367\367=0\316\321\275x\362\354\275E+\236=%>k\274\347\332\357=\230\317\"\275\226\242\023>\027\250\220=\216\'\002>\342\242\020>M\021\310\275\356\025\262=\277\223\377=\303\036a=j\312\315\275\212\353\332\275\364\007\276\275|\'\222\274f\273\033=\034\224\336\275k\2109=T\024\366=[\302\276:\031\tb=\316\320\356=f\301F\274Xy\361=w$(=\263\376\263=&\241\246\274\031\372\275\2757\257L=gq\335<\203z\367\275\334\262\360\275\004\253p=:;\224\275\250\002\323<\321\006\233\275a\232\263\275t\374k<\210]\343\274\310M\354=iG\362<\211\321Y\275\347E;\275\207\346\222:IM\025>i]t=\252\236><j\221\016=3f]\275 \216\301=9\322h\274\220\360\203\274\307\305\200\274T\320\022\276\352\250\222\275^W\002\276\027\r\356<\375b\246=Ej\245\274a6.\275\002\241\241\275#\200\340=\025\257\004\276u\2249=C\3335\275c\r\337=z@\265=f\023\365\275\024\256\303\275\302\n0=\226\251\243=\302\325\315\275mI\022>b\\j==\340\002\276/\270\326=Gg\365\273b\221\r>\3529\001\276R\371\237=\214\206\361<\245\374\375\274\344\024\371\274~R\375\272\2472\354\275\313\220\n>\003\014\311\2742\2129\274|\331\030\275\223\177\006>\262\032\035=w\220\254=\002\267\314;\3240\315=\213\272\375=/`\355\275LK\n\276G\233\035\275\212zE\275\017Q\001\276\022r\223=\310cm\275\271T\300\275\\\317\005=8L\342=\332P\341\275\026\204\354\275\361\335t\275\316\014\365\274\345\340H=\222K\036\2755\262K\275\332t\022=\355*\313\275\006\322\016>5\253\037\275Q\034\241\275\206\260\002>%\200f=E<\372\275\267 U\275L}\351\274\364\271?\275\245{\344\275\312\202\357<M\032O=\321\303\357=\010$\240=\315\231\021\276\342H)=r\027\005\276\002\274\001>\324\374]<i\013\206\275\270}\020=Y6\233<\304m\364=\253\200\361=\333i\245\275u\017\234\275\324H\205=9\016\002<\317\007\334\275\025\217\211\275\337\221\263\270v\265\006>c\021x\2756_\203\275\365\233\002>\2215\353<\035\004\022>)\354\005\275\244\332{==\374\340\274\217\230\320\275\335O\010\276\235\266\022>\271p\222\275\352\310\240=Xw\320\275\204D\307\274\200x\242\274\223Ue\275\347U\034=\251:\363\275\276\270\302=\242\026\360\275\0012\n\276^\243A\274`\031\216=t\310\250\274\312RH\275\260\365\006>\261[G=\251\217\366=\255\267\310=\0266\236<:\205\344\275\260\004C\275\355R\301<Z\255\330\275\2350o=\313\314\014>?o\025>\224\271\306\275|\324c\275\\\024\345=*Bb=\276\221\254=\035\005\013>\326#\322<\203\304\256\275O\366s<H\276\r>\0219\202\275s\235\356=\000\216\301=\020\304\371=<\343\246;\265j\246\275mv\023>\2112\0209b\356J\275S\261\017\276\347\306\266\275w4\237\275UF\013>\230\006\023>\030a\377=9K\005\273S_\020>X\215\235\274\274\363\022\274\344\013\010\276x\373\206=\373\271\313<\261\334\035=\255\035q=\204A]\273h\301\204=B\232\342<\333f-\274\320\032\213<j\3316\275\370g\242=\221\004\374<$2\377=\277j\014\276E\202\257<\006c)\275U\270t<\346\262\016=b\211\247=#\177\n\274\354\227\245=G\240\256\275Sg\021>wG@\275T{\225\275\242\375B=\271k\223\275\311\370\006>\224\361X=\025\224\315<\213>\005\275n\270\004\276aA\247\275\177\250\327=\224\200\304=\313\345\221\275%[t\275\327\032\204=\231\003\022\273\036\264\222=\352\303\343=\007\241\363\275\017\327\006\275&+\342=\274I1=h\273\303\274\307-\\\275\331\027\335\275\267\240\261=\305mp=a\267\215=\235\315\236\2746\264\262=\331\321\021\276\016x\307\273vD\007=6)\204=\344Qn=f[\322<c\023\371\275S\276t\275\037T\352\275\017K\272=,\241\227=5[\305\275\345\033\001<\204^_\275\266\244\n\275d.\010>\007%U\275\346r\002>\207\362\226=\356\n\242\274,\226\243\274}m\344=\353\271U=\271\333A\275p$\331=\013\366\302=\352\033\342=91\224\2743\035\363\275\216\260\220=\017T\022>\302\241\304=A\270\227\275@\275v\275\221\267\232\275g\342Q=\227\032\304\275Y\367e\273\214P\303<5\005j=\023g\202\275K\267x\275\037\364\010>\334\022M<\034\264\204\2752=\332=\327\266\004\275+\353F\275B\266/\275\257\327\301=\356n\001\276\331$\272\275\204\244\246\274\247\273\352\274\360\334\310=\360\267\001>\021\240\013\274\017D\344\274\312\360\250\2742\205\007\276\242\226\303\275\2058\272=d\375\003>\255\343+=J\320\n\276#)*=\376\357\005>\354\007i=\244\304~:X\265\355<1\344\002\276\257\013\355=\366\245\t\276tk\010>8\377\270\275\033$\362=\023O/\275\370\320\371<\033\276\374=\354\333\212=\032\372\t\276u\204\327=\302\217\346=\223\304\364=\306n\275=\253\262|\275v\376\320\275\246\235\r>Z\003\220\274O8\356=\274\331\370=\342X\355\275S<\321:\307UL\275\025\370\335\274<\310\336\275;;\233\2746d\225\273_\273\356=\037\371\312\275\r\277\246;.\025\353\275UY\235\274\032a\223=\017#\242<S\262\371=sD\253\274[\305\253=\300\224\330<\022I\257=\323rb\275\360\217\020\2764\016u<^X(\275|\313w\275B\315P=\341\034\307\267@h\236\275\330\317\334\275\274\346\352\273OT\355=\314\261\"=\366\343\356=#\250\256=\220\312\261=\210=\003>\365d9\275\260\034\005>\204\240\261<]|\365=hG\020\276\337\365\022\276\313\317\313=>u\375=\245\025|=3\007\2119\325=\241\274Z\\!\275\313\217I=S\225\214:n\2254\275)\330\023>\267\256\255\274\031\336\271=K\277\007>%\237\245\274\2771\323=\016\246\337\275\225o\000>o\217\024=\2513\250=\005\241\363\272P\211\342\2758\227\016>rwv\275\r\030\003=wQ(=\002\277\302=<y*=Zw\334\275l\\\253\275#\226\014=\227v\311\275[\325\313<p\321\017>\325\356\375=v+\206=\361\273V=<\037\024\276)\317\274\275\270j\005>b\266\240\273\330:\277<\352\006\221\275$\034\362<\232\321\325=\005\"9\275\007t\000>[\nS\275\361\310\246\274\232\224\254\275|\370%<\235\250\354<D\230\006>.\206\363<\232\264\212\275d\206\255;\240;\202\275\373\225\240=\013\241\253=6\244\235\275\177B\375\275\303\211\303\275A\206\226\275[\314\352\275\311\303\340\274\246$\265<\300\345\325=\260\364\202=-:\327\275\311\262\337\275\233\361X<\220q\315=\245k`=\307\344\r\275\036\337\217=\250\267\346\275\303\214@=>N\016>W\316\007\276-\032\223=\232>[\275\344\223*\275CV\003>8H\363=\235!\013\275\214\255H\275\263A^=F\005S=\366\353\033=q\250\312\275\214\323\013\276\343\261\013\276\347\245\235=M\252\260\275\323\335\353=p\002\231=\313\344\002\276?\372\345<o\320\206<\237\215\275\274\347\201/;xV\272\274nr==\241d\327=\3233T=\022j\205=\177z\353\275\327D\351=\317j\301=\242\255\374\275N\007D\275\364\025u\275\221\334\010\276\217Ig\275\320\371\325;\221S\246=\336\311\215\274\375\354\265;\004\\\013\276\334\336\031\275\346\301\021>*\373\023>\"\237d\275-\340\014\276\032S\n>\206\237\211<<\363C=\325\007\341\275\030Q\224\273\221\3527\274d\245\177=\010\343\n>\377\017\007\275\002\311\\=p\236\334\273\327K\016=\330q\014\275J\003\n\276\336<[\275PXT\275\345C\322\275\205\302w=\225\341\021>U\337W=?2A\275\n\264+\275\250\360\371\275\032\034C=\323\225\021\276\272J\r\276\2251<\275b*\023\276O\377\016>{\207\254<s\346\252\275\206\306\324\275\362U\335=\376W\346=D\3341\275{\264\340=M;\264\275\243\020\305\275y\202:\275\234\217\342=\\\016\355\272p\317\004>[\274==-\320\351=\244\356\211=\327F\215=\334+\017>Q\250J\274\343H\014>\010\306x=w0\030=H\210\324\274\371\215\374\274\302\270\017\276\213_w\275`\007f\275\260B\260=\272\263i\274\3539\222\275\224\267\325=\241\331\360\275\253\367\024\2757u\215=]s|\275\253\322\347\275\334\003\001>y-\226\275\322\377\301\275\361\217\217\274[+\331\275\322\206\027=,{\363=\340\"f\274\002|x\275Q\241H\275\263^\333<\224\375e=\370\201\300\275!2Z\275\330i\001\276\257\346\036\273\261\330!\275\267+\264=\2317\335<\n\024\323\275J-R\275U\327\021>[\363\271=\032\331\023>\202)\256\274\230a\350\275\220\212\344\2750\001\374\275\315T,==\237\307=\3446\312\274&e\013>W\347E\275$\364\n>*n\007>\237\312\241\275\0205E\275\330jW;\325\370\n>*\326\t=\212\344=\275\317x\"\275WK\006\276\020\305$=\270A\304<\347\361\244\275w,!\275\2700\325=p\260:=\214\274\016>\220]\355\275G~(\275hlV=\347\2369\275\350\326\232=I\364\357\275\3632\024>\207\301/\275\320\244\247=a\301\262\275\036\013\244<\336\324J=\317\201\010=\265\277\270=\237\346\360=\255\323\n>@\263\3029a\340\214=\200\364\t\276\320\235\255<h\360\225=|z\t>\332R\347=U\265@\275\307y\024\276z[\341\275\325ol=\202fs\274`\363\270=V\207\267\275\232\227\007\2763\006\377\275\255k\333\275\030\305\003>c\317\311=Z\033\321\275\026\347*=\274\344\371=\312\237\267<-?N=\244c\374\274h\321\201\274\361\332\016>78m=E\026\261<\377+\277\275\016q\351=\236\265\231\275F\270\367\275Z\312\255=,+l\275\302\013\024\276\222\277\204\274\014\211P=\266\260\350=\234c\323=\311K\346=\266\277\312<\307F\336\275\354\\\203\275\277\035f\275\207\333\036;\365\313g<~8\270\275\027:\377=\020\n\245\275p7\246=r\351\357\275\257\214\245<`\273\247=E\321\245\275\262P\332=\354N\374\274A\253\236=\265\233\014<\022\341[\275\240\327\t\276K\346\226=7W\272<\024\224\377\275<\220\202=#\325\026\275\314P\001\276\374(i;\307\357\336\275\'\'\235=\001\351\203<\276|(=\206!\021=\245\332\031<\272\276\250\275\033\3767\274\351\035\362\275\372\234\204\275\032\311\303=D\n\367=\320e\324\275\321\373\022\276\330\337V=\345\311\336=\372\321t\275\026-\025\276\276\035\267<E\216\014>t+%\275\350\200\005\275\356\205\377\275\351\004\232\275\227\226\003=\332\373\016\274?5\335\275\324\246\014>?]\013>\302b\030= \211\324=\357R\362\274\330\364\272<\254\016\243=\240\372\275\275(\254F\275\273\272\265=\020Yl\275\304a\231=\222>\233\275\\\261&=3gx=\212\031\232\275\265y\233\275\314B\013\276j\"\013\275\tq\023\276\233pp\275\004q\317<F\215\016\276Tp\005\276\363\013\372=S[|=N\336\200=m\322k<\315\304\266\274S\033\255<\237\3202=\245\323\003\275\254\335\261\275\'\001\275\275\246\035D=k_\022\276\205\342k\275\307\323\275=*[\262\275\327d\253\275|T\025\276\233s\013>\375\3400\275\307\271]\275\243\336\261=\203f\023\275\242\251\254=\267\326\267\275\rD\000\276HV\220=y\225\234=\216%\r\275\004\326\345=\377D\337\275\222\221,<\262\010I\275\267\354\312=4\262\376=?\274)=\271{A<\016=\323=+\367[=\322\354\037\275O=\234=Z^\004=\277Q\251\275\207%v\275AI==\235\027K\275\0329I=\227x\257\275,\002\227<\302\335\037=O;\246\275y\302\006>\367\032\311=\232\310\225\275I\331\203\275\235\330\356=\343\210\360=\306h\010\275\016\225\261=\326\255!<\306@\252\275\004\223\032\274)\355\214=1\357Y\275s\370_\275\275\202\323=7j\333=?\033\366\274H;\352\275$\244.\275\257\365\341=\0256\337\275+\340\373;.\344}\273\310O\225=\372\217\207\274o4S\275\002\001\222=@\362\212\275\266\311\n\276u.\017\276\241\345\202\275y[\271=sP\336<\035\256\373=\226>\014\274\310\035}\2757\215\016>\333\022\331\275r\013\215=\256v\235=]\001\226<RL\341=\010\005`<6\005\372=\324\350\002\276\264Xo=\346\235\346\275\0303^<C\305\023>\375F\331\273\327\n\003>\3129\364;\022m\354=\275\014\252\2751bw\275\t\232\213=8\300\306\275*\365\313=\r\224\336\274\260\025\361=8\307\260;l\305\300=\000|\312\274\271\006g\274\013\343\355\275K\376c=U\031\371={\234T\273\272\n\201\275_v\372=o<\277\275\003/\316\275\\Y\343=IQ\240\275\340\301\376=\273=\036=\245\232V\275\234\210\021\276\217\225\245=\3433L;q\216\312\274\201\031\233\275wjK\275.\262\265:\2619\372\275+C<<\2423\366=>O\303\275\356\211\020>\rV\243=|\313\262;&\177\n\276\3476\220\275\245\202\017\276y\374<\275\0079(\275\006\017\020\274c\220\341=\353\322\024>\244\307Z\275\226\374\006\276\327\230i\272\013\342\211=\326\377\207\275D?\003>\317h\201=L\251\316<r\262\272\275$C\250\275\3647\204\274\025-\254\275.W`\275\016!\323\274\372\324\306\275!\256\373\275\\\205S=c.\010\275\312\234\n\275=!\235\275D\034T\275\020\314\334\275\223\307\264\275\261\335\010>\256\244\327\275\302\036Z=\2752e=i,\234;\370\214\000>5\266\204<\217\375\310=D\2332\274Xw\323\27558\210<\312\207\\;|\201\240\275oC\234==z\204\274\341\307\233\275\334>\334=\353m\311<\317]\312\275\335\002\236=<9\360=\\\343\225\274\345\177\344=\023\233\024>\357\367\021\276\354T\252<\322\037\364=\007!\361<\213\232\227\275\241&\274\275)\231K=\223\373\016\276\"[\253\275li\353\274f\035;=\220YU=\251\234\301\2754b\344;8\236\250\275\337\313U=Q\201\374\275\341\254\000=\\\240\020\276\306*\254=\354\013\367=\321\232\214\275\270\271\014\2733\030\373={\270{<,+\266=B\336\236=\016\366\256=\363\220s\2757\343\211=\342\373\245\275\035+\200<\314\351\017>=Q\t=\376\305\216\275\265\023\210=\027\003\002\276\214\371\307<\260\343\303=\3414\261=\341\236\347;\037.\352\275e\302\320\275f\274\355\275X\013\002>\361\242\005>}l\251\274jg%<\244\232\236=\252\"u=\330\343c=\337\247\231=\275;\264\2757\321?<{d\n\276$r\275\275L\264;=\301S.=-\373@=\037\327\207=W2\024\276\231,\207\275\310\231\010\275\007\2626:5F\023>N~\016\276F\'\325\275\004\221\033\275\330{\371;x\307\215<o+\017=\253\\\372=b\242\377\275\2708\023=r\372\326=/\214\312<X\305\251=$\203\323=\237\324Z=\022\205\r>\275O%\2758\340\020\276\221g\342\275^\316\214=;\367\016\276\357\237\234=\342n\025>\217\341\000\276\031\357\250=\306\201\243\275N\245\023\276\021\250\225\275VN\007>\205\307\001>!p\333=B\264\355=\341/k\274G.\r>\231eD\2727\234\005>\006X\267=\234h\340\275$S\202\275\244Z\352\275\006T\364\275BL\034\275B\321:\275(+\000>\265\244R=\263\003\006>wi;\275\235\227\007>\223\266\256\275\222\246\231=\217\216b\275\375y\030\275\005\214\025>e\030\340\275gp\033\274\247\267\263\275<\273\371\275\324\253z;>\035\322\274#\221l\275\221X\022>\243\222\007\276\255B\216\275g\022\r>\365\222\355\275\r\242\315=z\347|\275\346|}=\352\366\020>\005\246\240=Vq\305\275[\243\013>\000\260\267=\\g4=\333\237\275=\245\256^\274\214\037\244\275\227T\010\276r\217\010\276\214;\002=\220;\r\276\207G1\275\244q\315\275m\335\t>\265\271\321\2750\351\006\2763W\272\275_w\360\275\324\271\246\274\257\334\260=\351^\254\275\206Z\212=\372j\356=\225\037\033;K\302\014\276\366\217\003>\310Wm\275\263Cz;\020P+\274\234\037T=\310\315\205<T\035\276\275\265\002\251\275x/\234\275A@\326\275\3568\247=]k\000=$F\215\273n\002\242<`\000\344=\t\025\261=\266\3617=\000\235\357=\0108\251=\324\020\001\276\326\321X=\034o\302=\310\377E\275\355\345\331=\177\315s\274\323^~\272\274\373Q=\210\273\323=\376\200\022\275]\r*\274\246\006\323=\204%\245\274\216u\222\275\254\222\003>\327\030?\275_i\215\275b\251\214=\333\321%\275<)\275=\314Y\244;\221xL=%\267\032\275x\242t=\271$\274\274\210\025\242=\321\251\317<$r\270<f\024.\275Fk\023\276\337\220U=\335P\342<I\036=<\257\300@=^\353\206\274\200\265\202\275\":\326\275\262Z\032\274\355Z\364=\271L\242\275\211\277\020\275\205E3<\017\340\004>9uP<8\221\246<\265\t\312=\332\322\314;\005\"==\3428\343\275\211\226\224\274d0\023\275L\205\221=\277\001\352=k\251\006>n\035\244\275\344^\203=\336\020:\275\206\331\340\274\312-;\275\177\203\322\274\355\273\236\275+\257\333=\016\224\342\275\366K`=\217J\233\275\377\264\007>\365\'\t\276\270q\t>\204&\007\276\237\302#\275\212\376\002>$x\274\275\321]d\275\327d\244\275\330{\356\275\351\306\010>\303-\005\276\367\342\363\275C\320\247\275\226FW\275\330(\367=*S\n\276\245\222\025\276\024\351#=^\006\361=\324{\377\275\272\254\315\275\221|w\275\327\224\'=\375MS\275\307\203\303\273\217\220I\274\223\265\014>|8{\274n0\247\2758\311\273=\007\226\377=\021\215$=\tz\302=\317\357\334:K\332\221\275\017\353\010>\276\325\344\275\367F\013\276m\'\217=\351\260w=;\"\304\275\254p\007\275\344\030\006>\354\010D\274\'\271f=\022,\321\275\213\271\231=o5\226=\335\347\034=55\007\276\373\2038\275%\003\352=\335g\333=\316\230\224\274\237\255\256\275\\p\277\275R\000\005\276(^/\275]\215\020>\374\230\203=$V\020>K\201<\275F\326\237=a\252\313\274\017\347\n<i!Q=\324\321\r>\351w\t\276Lt\266\275\260\332\001>\340\320\262\275\221\203\256=\247\034!\275\235G\266=X\300\010>D\232\263\275\332%\020\276\233\242\256=\303*\274\275\376\257c\275\244\273\026=\366R\366=E[\216\275n\267\371\275\303l\350\275\202\307C=\337]\020=\361\357U=\332\355\232< \251\233\275u&\244\275\327\007m<\223\202\265=\\\332\257=\352\300\206<L\263\343\275v\351\354\274F(\203\273\246Y\376=\203\306t\274\031}\262=\006:B=R\234\013>\236\n\010\276\234\332\316=\204\227 =\020[5\275Q\251+=\205\022\367\275\237\202\r\276~Mc=\033\372\302\275B\366\263<\212\310\n\276\207\247\361\274\031\253\017>M\316\324\2745\327s=\026j\014\276\355\003\303\273\375M\317=%$\r=\tz\301\275S\227\240\275X\330w\275\314\323\252\275\301/\016>\362\016\322\274\200\223\257\275hQ`=G^\204\275>P\223\275\034\200G=\345o\002\2769\367\n\276a\371\021\276-\0340\275\305\316\374\275i\360\275\275sp\000\276Ue\231=\333\203C\275\361\370\223=(J\024\275\377x\020>\266oX<\371\333\007\276\313l\336\272j\321\223\275#ZA\275\2018\377\275#\246\013>\265/\377=\366\364X\275c0\211\275\200Ad=\275\305\367=\336l\242=?\244\313=\221\236\344\275Z\345:;R\361\275;\226\351\270<)\207\001=\303v\220=\022ps\275\027\274\346=\302\177\310\275\320Q\347;\037\237W\275t\203\371=\342\311\'\275X\302\217\275qD\334=X\030v=\235\272\314=\307P\302\275\215\214\001>\220$\225=\252\240\240<\325\014\215=\344bc\275\002\325\371<\321\216\252<\272\320\374\275\r\263\303\275\344 \337\275e\211N\274!j\355=\340Y\357\275I\362-=\2071\361\275Lc\276=\355\367\017>\233\265\341=\251\250\302\275Y\337\210\275\267__<Y.\273\275\230\350\017=\230sl=Y\226\356=i]\212\275G\204h;\021\260a=\356Xg\275\236\r\017>G\273\322<\243\321\335\275\003$\252<O\357\024>@\016\320=\202/\317=\254\215\017>[pj<\262O\203<R\235\317\275\010\345\007\276\034\361\245=U\377\261<.\300\021>\214\247\356<\301v\312\275[\3752=\345V6=\3379\375\2752\226C=\003\006\024>\206L\020>\211Y\014>~\213\331\272\262\360\260\275vj\272=\230\215!\275\031\212z\275X\333\020\274\237\210\304=N\345\376<\275\373\300=\324\006\006>1\014\232=p\363\333=\010\232\350=\031\304\001>\017\250b=\363\032\035\275Z*f\275\236!\254\273WP\221=\226\t\326=a~\210\274\251v\235=\331q \274n\331\336\274\210K\245\275\301\273P=\035\266\276;O\'\215\275\325\252g\274V\260\033\275\206\0350={J\026\275\006\351\263\275\351\305\252=\352\010\312=+\372\r\276q\305\335=\363f\r\276Q\014\024\276\254\314\362\274\312\336\'\2753\026\350=\273I_\275]}\324\275d\375\365\275\202\004C=\rU\246\275\235B0=6F\324\275]\217\327\2754\217\233\275Z\241\346\275\026\030\347\27544\021>\355\007\024\274\376\364@\275\001A\025>\345\307&\274N\311@=\263\215\245\274\221Q\317\275>\314==\367\030\004>$\254\376=\247\235\235=\302\220\366\274\221\362;\275\230Xf\275$Sh\272\340\362\211\275\374\340$\275\226\376\031\274\266\303\216<\327\373\367\275\314\312c\275\346\244.=\225p\322=\311\3167\274*`7\275\376\270\220=\217\006 \275\342\363\307\275\300\302\006>G\211\000\276@\200^=\374\365\314=\216?-\275\211\314\023\275\227\300/<\266\255\242=\253B\367<\001\354\334\275h\277\323=\366\223\r>)\357\214\275\366\363\351\275k\334\247=vM\371\273P\032\004>K\311\205\275\324n\325\275\260IJ\274\t\235\265<%W\326=\225U\025\275J\235\304=R\361\301\275uq\004=n?i=\360\356==n\036\357=5\327\007\275\232\307\021>\005\312\010\274\365V\352\275z\310\017\276\233\230\376\275\203\t\277=>\300\273\275zt\315\274V\003\271=\005X\307=D\212\274=\217\301\007>`^\014>\014\336\021>Y2\255\275W\316\275\275\246;\214=\247d[\275\302\361\r>hq<\275\331\317\376=\035\261\245\274Yi!\275\323j\225=\030!\217<\352b\205\275LA\245\275\335\007\310=\034\035\251:\230Z\001\276\351\330\013\271\314\000\022\276\271t\r>\003\322\210\275\336e\217=\306\027\330<cig=\ta\371<\275z\265=4\343\224\274\306\235t\275\247\031\320= \211\242=\030\336\255\275\356W\025>\035\022\002\276\371\223\237\274I\361\334=\271l&\2756r\201=]\317\202=\025NR\275\327\023\254\275HW\217=_\270\306\275\203\254\377\274kO\355\275\tE\005>\314<7=\362\366\350=\252\036\n>\t}\315;\314U\202=\230\373\213\275\252\316\253=\245\332\337\275\"M\344=H\202\227<\265.x\275\272\334\275\275\243\202W\273\016\365\371\274\201\261\332=\312\000w=\203=\237=\343\374J\274\\\223\344\275o\3309=\021\347\005>,\310\223=s\026:=\022,\000\274\000(S\275!~\022>~5\n<\220X\350=:\331\223\275z\217\004\275\251`\255=#\227\227\275e\202\353=\rRE\274n\242\371\271Z=O<\376\332\223\275\221\272\232=\271V\340\275[/\341\275\231\263\256=\321\307\322=\370\010\336\2756\210\373\274-9\305\274q\343\254=\321\314r=\224\343\276\275p\207\317\274:\365\330=\203/\001\276y\030\303=\006\316\000>Ok\326\275\214\007:=(\277\356\275^q\225=\255\261\215=\320\355\327\2750\273\356\275Bsl=&\354\321=(\220\372\275\361s\006>\021\346\326\272\342a>\275\271#\345\275\255\215J\275\245\n\001>\231\372\r\276\206\r\247\275\326\266X=AV\017\276{*\272\275\247\330I=\230\323\311=\275\251\366=\236\266\200=\032g\322=%\256K=\305(\352=\225[\207\275\t\261\010\275p7\237=j\265\230\275\002\200\345\274\r\323\273<\233\336\025>rP\303\275\273\022\315<\214\301!=\232\343\022\276Wk\210\275\367a\017\276\\\364\305\274 :\016>\237\347\370\274\344^\002\276>0\313\275\267\252\226\275\026\025\277\274%T\310\275%-\241=B\311)\275E\341~\275\201e\311=\020\"\022\2741\373\017=tu\001>@\202\355=\266\302\005=\374w\277=o\253\001>a\320\300=\326\312\221=\224\311\212\275\270J\334\275\334\007\365<S\220\213\275\313|\257\275\3637,=q\311\360; a\003>\376h\014\276\224\375\360\2753\"\321<\333\010\022>5bc\275\374\021}=\002^\016=\343\351\000\275\261\253S\274\346\337\010>\354\323\022\276\'\375\360\275\371_p\275\351k\222<j\2746\275\202\'\010>\346B\256=\330\373x<\252\036\277\275\321\201\276\275\337\020\247<\277@\321=\356\374\342\274\2679\340\274>\022\022>\2107\013\275\332\332\212\2757\353\023\275H\204Z<=\320\314\275z\220\025\276\213\306\264=\370\345\024=\244/\317=\335\216\354\275\262O\314\274\363\210\023\276\312\324\261<2\247\020>\261&\262\275\265l\237\275\275^\336\275pH\274\275\307\013\031=Pm\273\272\273=\002\276\365\265\003\276\231p\014>\023w\006\2762S\231\274M\240\354=^X\206\275\272\r\214<dK\315=\341C\002\276x\222\352\275\347\267\037<\"\231J=\200\371:\275\207%\271\275\360\363\334\275\314=\214\2703Dk\273&|\201=\313\027Z\275\360\375F\275w\003\365<kU\006>\264\004+\275\0311\354=\207\322\363\275\332\024q\275iw\265<\205\337#\275/6\203=\037\304\253=\360\204\372\274>\346\004\276\321K\356\274H\374\212\273\353\030\344\274\244\303K=\035\266\013>\313\237\346\275\321P\366=)\313!\275B\311\317=\200\2654\275\233\367c<\214nZ=\242\211\007\276\336\021B\273\3008\005>D\360\020\276OLa<^\202\037=2\373\003\276\361\220\200=\3218`;\302\335 \275!d\337=2\236\020\275\331|\305={\307\241<\335\020\007\275pSW\274[\254\304\275pRP=]\316\377=\223\230\345=\335\004_=\274\255\307\2756\327\244=P\260\272<\213\252\022>\000\234\355\275\200k\002=o\364\315\275Y\217\263\275\370\202\376\275\025\310\022\276\306\233\204\275\367\004\215=\032\005\222=\257\270\013\276\206\342\305<k\320\r>\344\267\305=\317\262\266\275\253\026\002\276-<\003\276<\347\231<D,\020\276\257\264\262=\242|\263\275Im\001<&\331B=\0258\202\275\375\027\247=\241\014N=\350\267\346=Q`a\275BH\222=\301\3435\275\322f\003\276#\267\340<\207\265\343=\327\353\371\275\000_\242=\375c\232=\354\345\031=?\323\316\275_@\302=vB\222\275\373>r=\314\234\001>\237\336\267<\305\251\264\275\235*!\275\025\330\010>\231\326\262\275\023Q\010\275\226\207\355\275\030iX<\321\335\022>\026[\213\275Hq\323=D\224\034<\024\2337=E\365\224\275\026\251\261\275\3110\372:F\014\310=K\364T=x\334\330\274\261\237\334=\370\201h\273\252\246k=E\375/\275d\265\347\275A\377H=\321\303\245=\347\\\266=,e\210\273;\034\245\274[\020\377\274\254\354>=\326.\351\275\320\224\371=\252`\024=\010\033W=r\264\214=\006\353\354=X\315\n>qW\334=\333\301\340;\341\333\021\276\317A\337\275\261\351\351=\277\361\007>\331y\207\274\026;Q\275\332\026\315\275f\351\227=N\340\255=\333J\t\276\022\224L\275\374\307\236\2759/\247\275\234y\342\274\224\220\004\276\365\250d=\266=g\275\213\362\224=\260z\331\275aD\274=\357N\330<\202s|\275\030\320\245\275\221\370\251=\360\033\323=8\032\020>\331U`=\206\225\367=5\004\247\275\327\276\335\275\216r\275<\017_\256\274J-7=36\214\275\027\034\303\275hE\267=Lu\350\275 O\260=<\203}\275\023\216\364\275\020\025\t>?n\333=4\336\000>S\'\304\275\263Z\007>\344t\240\275\204\r\207=\313X\373<w\300\216\273\356y\025>\003}h\274f\373\366\275\234\230\215=\007\177\224\274R\334\266=J\215\014\276D\342\360=\22021\2753\217\235=\234\335\266=\002J\021\276W\375t=/^\'<H\326Y\275\2730\255\275\276\237&=q1K\274m`\360\275.\332\036\275\021\003I=\253o\002>\314\262v=\324\023`=D\356\t=\317\300h\275/\024\315\274@\036\232\275HD\324\275\352\177\334=\346\212j=\313\243,<\247\346\013\276E]\257<\024\317\232<\017\351l\275\202\312\027=[\301i\275\264\227\320\275\230\034\225\275\201\021@=\306\024\252<\310Ue\275}\230\014=\265\322\311=)hS<\307~\006>:#\205=\007\211\002>\323w\340=\264\226\373\275\247\364Y=\350\346\242\274({\272=,/\224=\rS\266=#\002\367=\327ld\275K:\002>\350\241~\2734\344\364\275\374,\261\274\0131\271=\2418\247\274\355\312\201=4!\013>\032\320\243\275\260C\016\276\311@\336=\305\002\023\276B\013\311\275\372\263\025\276_+\375<|A\305=\303\300\212=i\034\331<l\'\325\275SU*\275Q\313\001>\333\221!\275\373gz=\330\235\366<Ng\305\275\301?\206\273\3013\313\273\363.U<UM\260=\363\264\234\275\370cA=\324\2779=&\317\212\275X\201\006\275\340^\237=&\340\225\275,\267\021\276\263\362\314\275\027\377\265<M\276\351\274h:\177=j\"\003<(\262\270\274\t\251\023:\'\317\266=U\370\\\275\320\014\356\275\016\r\002>\323\014\327\275\306J-<\371\014\333\275\301\377l\275\312\273\322=\242\371\221\275V\177B\275p\006\324=h=~\275\031\203C\275$H\276=\246#\000>\235\2276\273\254P\243=*\0320=\254\361\240\274S\251\241=b\221\314=0\337\331\275%(\001\276s\342\233\275D\375\326<Ft\243=\320u\006=\002\354%=*\023n=z\t\250\2749\0215\275\356iy=\232Z\370\275\2076 \274a\363\320;A\007T\275\211\201\t\276P\303\362\275DB\231\275\267.\374\274\371\313\345<P\342\014\276\240\3700=T\301\225=,\274f\2733<\024>\264\222\261\275\2555\023>\362\032#;\322\270i<\242\006\225\275U\363\234\274\t\265\254=\311n\361=+\312\335=\236?r\275oC\222=\026\252\344\275\303t\331="
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        tensor_content: "\372\301R\275\373s\246\273\354\217\r\276\231\325\213\275{mH\276\271\241\336\274\331SL\276\231\302j=\246~\370\275\024]\354=\036\346\204\275\356U)>/\3674\276\326\363<>e\301\357=\027\232\331\275(\323\\=~l\344\275\002\360y=\331\360M<\027\365Q=\030\2514>\324.E\276~k\'\276\222\211\034\2765a\331\275\225\304C\276]\\7>\332\272Q>\310\206\021=.\327\331=\202\224\340=\000\215@>.\002\036\276<\014+\276\375\355\224\275%\243X\276j%\314=M\256\256\275\022\016\324=h\301\247\275\346\224\343=\230G\265\275z\243\357\275X=\230\272J|\032>\260\210d\275=/c\275\'\230\214\275\356\001\200\27485B\275\355\375\366=\255&\000>-k\251=\221\006U>\346Q\231\275\257\3459>\203\032,>\271\213\346\275\212\005\366=j3:\276\201\304\356\274\337\332\232=\023\276=\276\005\363\033\276\177\201\274=\342\263\000\276\321\363\252<;cK>Q\016:\275Z\352\331\275\253\030\227=\200\204\334\275\033\353\037\276n\026`<\321\322\234<m[\321\275\310v\370=\377\235\301\274\341\231_\275@\246\237\275\317K}=\234\235\240\275\344\272\t\276QA\212=\274\3206\275\304\276\312=\272+\360\275h3->h;\245=\356E\013\276Z\235\026\276\233nZ>%r\344\274\362N\343\275a^\017>\r\301c=\347\207<>8\264\327<\177\003\017\276\366\3554>\321vb=QSS=(C\031>\315\240\265=O\203\022>\247\307\035\276\005\'L\276\236\374\227=\270\037\016\276\304\234F>\330\0171>\375X\300\275\321t\307\274b\001\246=\023\025$\276\200M\n>\325\332<\276{\201>>Pb\227=m\177\025\276\232\341\375=\205#\000>0\2729\276D\026\352=c\000\036\276\371\305@\276\321Mf\275\213\352J>\326\365R\276\266\344#=\245\013\322\273\010\264o\275\270\273\032\276a-\315=\276c;\276n\307\320=S\262\025>\246@J\276\352\2656>\360\200 \275\037b)>\254\313\373\274\341od\275\217fU\2767\364\314\275F\201P>c\3142\276\260j\001\276Oi%\275\200\3659>d\214X\2764A\022>\026\307\232\275\202\"\025\276\273d\306\275\204\210\223\273+\331<<\216\343\301;Av\007<0\353\016\276\216\354b=>W\277\273\256\251\006\276\\q\375\275\031\216\035>\225\302\217\274\032\001\'\276\357c\243\275g\314F\275\337\273\214\275Va\r=\373\276Q\276mUG\276\034\325\376\274H\210\371\274\026\222\034=j\310\016>\307\304==*\\f\274\211\224\340\275\273\023T>\376j\320\275\'L\027\275\277\244\301<6\216!\276\320C\233=\t9\023>\331\3316\276\357HP>\315A\264\274b\311M>\363\235\034>.s\245=\241\035\373;}J\223\275\375\373\002>Q\317\037\276\256I=>\257\331\021\276\322\332I\2753O.\276\216n2>;\006X\275\326w\246=\233\274\034\272\237\213U\276\317\341/\275fV4\276\210\221\037\276\273W6\276\013\301,>\324<\226=i@\017\276\312=\246\274\272&\037>\333\333F>\332P\037\274\370x\r>\236P@<UD\013\276\007\253\273=f\311\302\275e\302\202\275t\253Q\274\230\010\355\275\347\351\214=\313\316\336=\244\202n=\277\377<>?\254\345=\345\207\255\274\375\213\204=2\220C\276C\322\264=\315\364\025>\346\030\357;\205\004H\275\200!@>\224@)>\244\252\206\275\"\353\365\275+\365)\276n\371\317\275\342\335G\275\177\3077\276\000\003E>\317e\333\275\3531\301\275\003\201U>\322\237u\274\177\275\244\275e\014A>g\325K>*\240E>-\007$>\303 &>\204\322\">\226o\214\275 \177B=-ex\275D\200\216<\324\271\026\275!\346\027\276\"\216\302\275g\247\327=o\360\367\2725\312\037\275qw\224<:\026e\275\256c\333=\225\212/\276\023\361\314<\235/\037\276:\3539>\213\335\343=\247\241\235=.\003Y=5\335%\276\211\005\025\276J\017\007\276\254\010?\276\313\325\311=/\201\250=\312z5>\222\331\212=\246h->\350\260\026\276\303K\376\275\340u\205\275Bl\360\275gJb=!\372\264\274\265H\027\275\nj:=\321\306.\275\275\310\030\276d\233C\275\326&\212=\321\350E\274\277\032\353\275]\353\240=\027\327\372\275n1b<\r\327\271\272\007\3268\275(\212H\276\211u,\276x\370<=\223\037\007>J|q\275\361\377P>\325\301A\276$\212\"\275\375\2174\275sw#\275\252{\">\035\250U>:\224\330\275\331\272\333<{\005\034\276\377\252E\276\261]y\275%\300\322\275\363\245+>\334F\034\276{+F>>\033\264=\361\350h\275\360\250\215\275\234\304\037\276\273\n9\275\305\354(=\344-2>9\013A\276\264\325\021\276\345\224\355\275\267H\305\275\351\313V<\007\224U=}\201\021\276\376\341M\276\3249\331\274\364\326k\275w;\321\275L8\024=\201\273\223\275\376\340Q\276\021\306D\276\"Q\255\275\321J\200\275\246\365f<-\376\205=\017R%\271e\363\r>\031\025\320=^\3629=h\3413\276\360\335\352\275hL\007\276R<7\276h\032\025=\2463$\2768\330@\276\343\267O\274B\343\271=\355t\376=\277\252\363=\335\0108=Y\205\235\275\353\233%\275\276\346\n;\237\210S\276\332pN\275\3203&;\376\026\212\274\216P@\275\354\027\017>p\2139>\233j;\276\ns\017>c\036\324\274\333\017)\275\177\377\277=\261:)\276\013\r\333;\336,\337=o\310\n\276\337\260\n\276r\361\371=\351K(\276\226\337\200\275\002=M\276F\2528=[IV=\354\201g=\3751E\276\243\334\276=\000\023g={\313\t\276\32311\276\222\316P\276@\rN>\321\002+>\002`\025\276e\021\\=6\212\337=\317F\247<\203\255R=\304\025\032>?\215\222=g\304\306=B1\235\274\022y2>{//\275=\215\225\275\345\376\003=c!\037>\013\260\375=cR]\275UV\331\275F\266W\276!\006!\275\024\025H>Z?\306:\"\"\354\275\355\367\346=3\021\367=\334\t\340=8j\236=\335\0218>\361\357\001\276#y9>\266\336\212=\241\223\347=\357(h=)r\031\276\306D*\276\314\347\275\2754\365?\275\221N\351=\227HL>\2726\206=qq\256\275t>\272\275\243.\024>\013\266\201=\233\032[>\200\t\202\274r\271D>\250\246\227=\343i\234\275\317D\034>:\372\221\272\227\352\353=\341\316\343\275\324,\210\274\371\273L\2755\226\375\275\277\021Y\275\374-\'> 5\347=F\322\357\275\351q\320=\346\0351\275wSm\274\317\322[>\354N\030>21\t>K\312;>O\204\301\275\376l\235<\347\342\371:.)\244\275\242\331\335\274\034\225\014\275`\037\260=\356\367\261\275#<2=\'\214\260\275\244\275D>E\312\325<\250oU>\377\016;\276c\260\260=\324<\261\275B\350\371=\026\254\257\275\242_\231=\257\232A\275\n*1\2764\333\236=\307\241>\276D\250 >^\255\023>-\017X=F\361\310\275\300b\245=\235\3324>\037N2\276\244\374?\27565\342=X:\230=3\306J>\257\036\027>\3166\004>\233Wg\275\2041N>\304\217I\275\0176\230\273f\206W>\363\240X\276\214.\266\275\330UY\276\317s\257;\232\212\263=J\3267\276\227\0371>\305\032<;\267\367\304=1\003E\276jFX>\340?6>\237\000G\276\276>D\276D&\r=.\022*\276\002\207=\275e\357 \276Z\212I\276\302+l=V\215\005>(OL>,\361E\276L\355<>2\221\035\276\\m\223\275\376Q,\276\237\373\364=x\r\236=o\335g=\351\3509\276\024<H>FZ\034\275\000\317\006>\r\273/\276\032\354B\276|\r\031\276%\355\002>3\252k=\305(\226<\332\313\262\275T\017\326\2750\362\275\273\347\321\267<\274\320-=. R>\271U)\275\233\377\004>\000\204*>\031\305\337=\357F\020\2762tW\276o\013$\276\003)\023>\332\357>>\202@;\275i\217\222\275\256\210\277\274e\360$\276\313\252/\276<\306\312\274WLm=\246U\005>\335\263D\276E\361\035\276z\300\263=\3033\n>X|-=\270d\317\274\361X\275\275n/\337=d\210\357\275W\034\341\275\367,\027=#\263\253=\2547\021\276\2041L=\270\010\241\275B\325\023\276\311/N=\342\251\360=\224\311\336\275\200\225\033\276h\246}=g\350\242\274\201\333>>M\007\332\2751\004\222<\014\301\323\275\354\236!\276\222\362\302=4\314\253\275\270V\004>\207\344\211=\345\316@\274\234GT\276\270\243\301=\346\371W\276\344\272P>uYQ>;\211r=\314e\347\272\367z\255=\354\220\377<\201\274\213=W\347\232\275\3716\355\274t\271d=o(\033>\r.$\276;\307\242=#\"?=\345\037\024\274Udj\275\343\232\315=*@\304\275\003\034d<\275\374`=I\242W\276\221\000\266\275\036a\345\275\215\224?\276\037B\006>?+T>5\025\326=\226\001\222=%w\376\275T\017@>X\362\316=\240\311\326=\370\027q=\225\312\030>\rp\235\275.\r\252=a\373l\275?}\010>\002\\\030>\007,+\276\037\3257\276\211\245\356\273\371R\362\2755\202.\275\334w\035>\361\277\033>\300\332\252\275\262=\351\275\204\202r\275\366\336\016>\033\3305>\226LE\276\224\246:=\344O\267\275+^\021>\'`\232\275\251\241\266\274\020\226\370=(\374\272=\312{D\276\2747.\275e\362T>C\344\316\2757!]=\270\305\246=X3\267=\355\021\272=v\352M>\303R\204=\221\351G\276l=M=\245`\200\275\373V:\276\033z\013\276\025\330\021\276\337sK\276\276\246\360=\rw=\276\360\005E=P\311Z>\025\031T\276\021\022\335\274\345 \305\274\2111\010>\326\367\354=-\360l=\335![>\245\211\364<\014&\035>\217\353\253=d\377\017>\rB\235\274\326N\035>#\203[\275W\226\002=g\206\250<\211\333\"\276J`\017\276k\221\027\276\222\315Q\276@\007\311=\014\332V\275\277\321R\275\240\t\261\274\374\004N\276\276\220\272\274\332AT=\r\344.>\203@\207\274\300\032\024>\226\257!>1Y\345=U{U>\227\372\005\276\237P\031\274\3318\243\275P\001\271\274\202\335F>\031fQ\276\361-\000\276\252\254e=k\372\350\274\256)N\276\235!Y=#\325\231\275\177\032)=dh\277\275\250\355T>\303O\333<\245\233S\276/\244\362\274\2559\313=k\246\271\275\231\212\221=\"[\337=\257\211\207\274g\204T\275\276\003&>A\374I\276\252\220t=\000\300G>gD\'=uAS>\210\240\353=G%\027\276\366mv\275\"\350\277=1\342\363<\373\356\375=\0050@\276\266\026\202\275\263K(\276\252.8>\266\245\234=\373\021\347<\232\036\242\275)\037;\276V\240\350\275(\263I>\030b\203\274O@\037>I]#\276\003B!>\370\177!>xo/\276[t\031\275\265\313g=\305\377\034>\375\203\343<\tg\354=6\223\310<\210Z\302<\023H5>\203S\204=\274\035\000<\001\362S>\035F\265\273\003\213\021>\000\n\365\275U\220;\274~2\242\275\003(\337=\361\342t\275\373@P\274x\204\305\275\307Z+\276r\337\366=\245\356\302=\202\216\267<\307k\252<zP\312\275NY\230\275U\341t=\177\223\027\276\371\363\233:\017\346\202\274R\314\025>\rO\335<\027\367\000\276\306\325\307=\336X0>j\364\032\276\321\316#\276H\310\265<\305\254\267\275\205J\026\276k\246\234=<\237Y=\245\246`=\024\"\261=\256\223H>\276\346%>\030\021W\276\244\311r=<\215\t\276C\265Z\276Y\034\242\275\275 \251\27409\032>\016\217 \276sK\016:\246\342>>\266\024C>\031\200N\276B\245g\275\236zu=R\005K\276\302\303\356=\356\241\247\275\244\247X<\255\372\354=\365IH>\037\303\221\275A\362+\275tB\203\274\226\037->\323z\262\275v~\020>\252\352\335:\006\356`\274\241\226\345\275\373\373B=\346h\177=\n\220\003\276\364*9;\265#I\276u\250*=7\024\250=\233\016\357\275]\337\361=\366\205K\275h[\364\275bO\231<S\325]\275\313\344\023>\244M\036\275xz\257\275\201zR\276v}\005>\330F\233=\317?\247=\241Cj=\326{P>\264\370?>\275\004Z>\035\016\310\274}\234\305=\354i\253\275\266\336\210\274\364l\016\276\203W#\275_\303\246=\340\033\275\275\314Y\232=\256\002~\275\273J\033>\300g\332=\363K\375=\237\275V\276\t\325+\275O\004\221\275\256\332\035\276\335ni\275\235\223\347=k{\024\275\351?\262<%\331\272=\225\017\177\275\341\246\255=r\004\216\274\246\346L=\000.\211\275\036\204\213\275y\355$\275/\357\215=\0171r=\206LV>\232\264\203\272\276N8\276\256\222V\276\010y\034<H\317\037\276\t\266Z>\254V\223=-SN\276\007\231\002>T9E\276\3557\237\275\244\004\022=\315\033:\276\306\225\241=C\364K\276\254(\020\276\220\346\372\275\033\233\225\275\002\352\\\275\323a\321\275\354\222/>U<#>:\243*>\264Se=7\022:\276T\353T>M9|<\371\213\037\276\330\330\330<1\367\005>I I\275#\026:\275=\334\n>\007\212%>z\304<\276mI\021>\252\247\306=\327jn<\352\271\317<j)D\274;\370+\274\261\264}\275\305\025W\276_\360\336\275\027\256\035\276\007V\305\274\322\246\034\275:\221\342=,\034\027\275\377\310H=4`5\276\362\217\003\273\304jT\276\304\333>\276\200FJ\275\364>\021=Kd\027\276\276~\303\275\201\2766>\'\211\322<\267g\r;\013\273\037\276\010^\202=\253\035P\276\321i\307=\0202\"\276U\245P>\232\323\014>`\275\030>~\215\361\275\321\277\317\275\003\221\313\275\224\220N>\355\324\217=Q\"/\274],\213\275 \366\217\274\264\340\007\276\344\353\302\2751\225\225=\372\376 \276\205^\017<\246c0>VvQ\276\311\220x\275\006@\005>\311\335\024>\025\036\215\273T\377C=\033\243\'\274\312\021\275=\260\316\235\275\304\263\">\302\336@>\024\217\254=\316\033\246\274\351\036\336\275\353\213\260\274\253\302L\274\303\353G>d\013V=P5\025\276y\301\001\276(tV\276\231\005\376\273\367n\221\275\233s3\275\030\275+>iJ~\274\tB\n\276#k>\276v\2412>8i2>Z\355\326\275\342\343\005>HB\275=N*j\275@\321\340\275\320Q-=~\263\026\276\024+1\276cY$>\031)\'>Z\363\014\276\3013\262=[B\020=\301NR\2765\016\257=\220\242\205\275H\247\260\275\345=\352\274\306P\303=$\351\377<\217\347\271\273_\2222=\315O\367=\334\004T>W\255\207\275h\342%\276\223\347S>MQ\315\275\2160->|\240\374={j\227=\027\207C>`\212\351\275\341\352\306=\302\246T>4\272\005\276\243d\025\276\232{=\276\351\037\216=\216.\201\275N/\267\274P\341\235\275\221O\010\276\317+\363=%\177\352\275\325\376\263\275\335\323\250\275\276\331.=\023`N>\356B\325\275\034\254l=[\276E>\252\356\236=y}\032<\t\257\026\276\374\021\227\275o\027?=\0374!\276F=\016\276_\274\317\275E-\005\276Vt\300=\"\032\352\275\344\340#\275s\360\347=_v\001>\306\022\253<\361\362}\275R\006\016>\n\334%\276\033J7>q\343$\276\323\224\302;\014-\234=\305=K\274\252\357\300\274\307\274\027\276\326b\020<qV\335=-\320*>\361\330@\276\356\355[\276\177\023Z>H\255\r>\372\2111>@\'\006=\254a\017>\334\276\022>\244\002?\276\313l0>\037!\016>\242\273Z\276E\000<<U\322\340=X\223D>\317\345K\275.t\014=\253F8>\246S\346\275w\017\031>\260\375(\276\030\230<>\\UZ>\376F#\276\265\317,>\372r\020>v+\035\275\234\017~\274\200\203\216\274Q:T>\0278W=\207\016\302=\025\021\032=\036bj\275\363\237\334\27570\"\276&\240\026>\004\354\367=\362\343\'>\004\026\241\275\003\2464>8\332\020\276\"-M\276\1772;\276\263\364\031\276\201o\n\275\370\202\245=\267\007\034>\262\356>\276\036\365Y>\347\362\006\275\310(\264=r\200x<\036\3650\276\200\303\320<=\340b\275g\351\'>\346\010n=.\304\314=E\242\262<\223\257\037>\274\352\"<\347\017->\003\022\t=\377\224\t\276\341\313\000>w\246@\276\242\034\377\275\"\001:>1\272\227\273\245\336\330<\213\310\014>\212(j\275i\254c=\231\214\">\217v\006\276\027\321\305\274\222\007Z\276D\262\024>\277\025C\276\362\014\306\274\001Y\006\276\230a\021\276?\262V>\213-O>2-\235\275%\346o\274c\230e\2754\271!\273:\203\020>\250\246\340\274<\244\321=\222{ >u\030\214<\300\277\001\276k.P\276\333\223\020\276M\235 >OSR\276\024ND=\315\223>\275\001=L>\376\017:\275\207\277O\276\334a\303\274\221{\276\275\202\371\210=K\217 \275&\2777\276\363O\265=w\245\356\273\037\036\366\275YL\343=\263\033T=\372Y\t>:\t\364=X\277\032>\335\210o=\252\254/>b\377\264=3\365\036\276\023\024\234\275\226\"\315\275\366\252\001=\260s\231\275\010.\022=\364$\205=7\235\330;\014\032H\276\027}\000\276f\0137\276\340\225a\275\2011P\276\244\3455\276\223\321\360\275W\231\035\276xm\337\275\202\261\r\2744r\324\275\327\037\264=\037\0333>d\330)>\267$\007>Jx&\276\032k\333=.\261Y\276\262\200\033\276\370\237\255\275\340\032q=\025\017\223=\343\377\216\275/)\230<\315/[\275QFH>C\252@>\257m\000=\352\310\017\275\225t\r\276\233\t\024\276%i\246\274B\376D>\033\201A\275\034\2378>\014\020e\275\362y\322;6Z\340<7O#>\206\036\227\275_\025\032>\037\232\233\275\221h\020>\354\222\273\275\230\376\025>;\005\252\275\303\222\234\275\360\003\321=\242\232X\276MD\351\275r\326\023\276\341\323C>K\1770\276B\266P\276\3723\236\275\235\221\354<\200\215\221=\377\302k=\001\242\222\275_Ju\275\213\274\256\275n\313/>\014\274@\275\305V\376=\251x\037>\243AQ=&\321\303\275\024a\005>\201\365\002>\354\344\336\275\312\350\334<\033\335\232\275\223<K\275\027M\n=]\0353\276\'f\323=\245\030\235\274\032=\332\275A\242\321=9\327\213\274\252\236\270=\000\330\345\275M\321\027=\n\352N\276\213Q\351\273\3712f\2743\000\254\275\324\313r\275\257\242Q>\314PN>_\271c\275\340\221\033\276>\300\353\275\321t\021\275\207\300k\274\005\255m\274,fP\276l\352\313=\267\277%>\306\n\025>\331\2133\276\347\007A\275\213v\360\274\203\371\266=\345\267O>\204W\n>\361\352\n\2766=5>\271\301\232<q>0\275\205\224\370\275?e\223\275\346\353I\276\212O\010\276|-\t=\342\352\016\275\216x+\276\207>\305\2753\224?\276\253\300/>&\036\356\275V`\326=\372\354\333=H\306S>v\336\361=3\213\245\275\207=\306\275\336X/\276\264\"\200\275\347&[\275\316\023\217\275A\342\n\276\023\206\256\274\237\026!>\212\3655>\221\343n=\227\334\000\276\265\340M\276\365\335\024>\0141\025>)\3416>~U`\274I\370\247\274\225\014\023\276\207\246[\276\371\225\036>\341Y\224\275\322@\004=\025\326\003>\314\000\355=\372\360%\276\352\227/>\207$\251\275=q[>1\020O>\r\207\007;*\"\007\276Nz\336\275+q\005\276r\021\223=\3409\016>a\316+>NnG\276\230\204\323\274H60\273\027\256\354\275\217\247S\276\034+(\275\373\3749</\0220\276]j8>!w4>\226F\245\275\236\246\240\275\371\325\026\276~\326l\275\n\255(\276e\202Q\276\277\014\032>\037\214]\275\340$\010\276G\300\301=\361I*\276\221r\362\275YgP\276\310=\370\274O\226\t>\316\222\340=\250\267\002\275}\024g<\322A\013\276\022\274u\275\007\030\000\276\232\217v:\377?\005\276,e\r=\025\350\003>\005\342\337=\216qe<\362\003\370;D0<\275\222~\270=\216{\r\2768\013\014> \217\032>\211c-\276\353V>\276\311\241%\275\244\3238>W\202#<\r\371*=%\270 >K\253B\276\3131A\273`\007D>\203\256\020\274N\304\025>\324\200\374<\327\325\017\276\275\215n<\307\177W>t\330%\276\353,\031>\205l\360=\036H\345=\200Y\016>i\022B>w\025\252\275\250\307\032>\223V\235=fj\n>^\204#>\3021|\275\346\373\250\275\003\245\013\276\371\222$\276?\r\027\275&\2002\276kBO\275\363?l\275\235EA=7\3473\2765_!\276\323\224J\275\201\344\r>W\304 <9\317\360\275\225{\036\274\032\346\035>\022\rN\276C\342O\276\326!\266=\245\210#>\232\253W\276\010\037\312\2741\214T\276\007_\002\275\321\274\223\275Z\325*\276\005F\372\275\357\354E\276\270\371\032\276\021\327X=Qw\n>\253\341\024>\256\223Y>n\343\">\352\333\006\276\253\246#\276\332\210\032>\325^?>\306\354\344\275\215\177\263\275\201\2407\276_\t$\276\200v\004>\274S\271\275l\036\273=\211W\346\275\361N*\2761\1775>\357\224P>l\213R\276\357}U\276\177\353&\276\376\023T>\244X;\276\202B\203<;\370\335<\264v\224=\357L\037=I\003Z\276\223\300\022>\036\352\017>\010\360\331\273P\343\n\276aT\273\275\271\265J>\t\010H>\202f&\276\023,\034>\234W!>\370W)\276\300v]\274\263a\257\275T7\344\275\312\246\035\276\231b\256\273\235\240\206=\212\326Y\275\342\264\037=C\206Q\276\000=@\276\345m@>\331\200\000>\355\272Z>z\032:>\2400\260\274\244\026\322=C\207Q\276\n\261w\275\310\327q=\327\2551\276\006|\355\275\240D\305=\3152\264\275a\235\270\2757@\316<|9\022=\321\036\257;\216*\340\275y<\361\275x\267X\276w\313I>\263\245\353=\024\354\006=l\nr\275\234\267J=\330\343R>\302\327\030\276\341\367\000>\306c:\276\267\356\223\275\201\342\360\274\327\271\257\275qE3\276\\\025\034==4\276=80\230\275\352~1\2767\215\307=\272\201I>Ul\346=\306L\024\276\264\271\033>F\214!\276\332\314\331=<\241\245\275\340\367Q>\325?\001>\367\306\016>\006E\314\274\367\347\223=<\010\301=\372\224\033>hj\247\275u\216-\276hsD\275#A\260=d\304:<\200\001\347<\226-\302=\210O4\276\234x\005>\220:\344\275\331\'\233\275\226\202\026\275<\200>>VC\025\276\375\005\337=\327\304Y;\3429<>d\323Q\276\226\325\224\275\034\215!>\355.\333==\007\312\275\337\020\013>{<&>t\032\214\275\360q\022\274\365?,<\025\006.\276\002\3747\276\260P\223\275^ML\276B\324r<\376`S\276\205\013\340=\030&\300=\027\332\304=g\377\311\275,$\030><\203\251\275Y\r\024\276\'\314~=FI3\276\355\305\331=\277+\030\276`\226%=\256(\313\273\324(A\276-\363B\2769j\242=\222\021\257=\363\261&;E\333?>\336\340<\276o\2616>\342\347\360\274\255\312P\276\224F\215\275\307\000$>\265$6=\033\006\245\274\274\311\246\271\314\241C>R\247\221\273p\317\331=w\226)\274H\277C<\254\361\005\276HT8\276\033\244\211\275\372\2153\276\365E\255=\303\347\035>+\342Q>\326\026\303;\306\002\250\275[\360\001>>\315\247\275}5\370=8\371\316\274\3058\262\275i\316\226=0\201a\275\230\r!>\213\375D\274n\220\262\275K\026\377\275%*?>\316\374\347\275RdU\275?}\025>!\031f\274R1\207=MUU=\230q\024\276m\013\234\275`\t#>m\2233=\024;1\274TU\336\275\330Y[=\313\377\272=\255K\226\275H\335b=G\2114>!\324^\275\263\2733>\223\327\204\275\010q}\274\311*>\273t\026O\276\304\207\343=\0208/\276?\0252=/\222\336\275{\326\213\275\355\324\244\275\016\026\236=Wd\337\275\010n\350\275#\227\264;r\031\020>\270\363\244\275\3057;\275.\344\256\275-\002E>\231\3229>\027\240F=\006\036\213=-\251>\276~R\240=\240\245\032>Wl\217\274\026\004\304\274\202l;>a\3475>.\340\r\275b\0050=Zo\006\276\273\322\257\275\321b1=\371\207\016;\203y\237=\267\263\004=\266s\033>\272\352\332\275\205`\275\274\214\372\003\2756\312\230=\322Ji<\236y!\273\375M\002\276\037\021Q>r\372\177< n\007\276\243\242/>\362m\014\276\263g\212\274\305\"\366=\260t\033\276G`\">4f\006>\310xZ\276:\372\017\276-\325>\276\362\026\315=\240\342\300\275z\233=>9\317\244<\2264!\276\022\233\336=\355\021Q\276)\335\346\274\025\367\223\275\244=\017\276\220\341\270:\256?\360\2738#o\274\344\031\335<\375\273\233=3U\t\276\224U\036\276!|\264=\210|\326<\350\210\036>\033`\271\275\227>)>Jf9\276/\342\">\331\226\374=\254I2=\261\267\303\275\233eF\276\263\260\007\276\353\312I\275\324M\330\275\276\374\005>\031\373\201\274\244\033B>W\212\337=K\244\013>\307\256\027\274\264\021\014\276\371\233%>E%G>\272\236u\275$\t6>8\n:\276\241\220\323\275m\234X\276\376O\261\275\021\030b\275E\216\222\275,\2117=\200\232\267\275\350bp=i\010H\276\253\245\025>/V<\276(\002/>\240\010(>+\246\013\2761\376\257\273\010\027a\275\260 ^\271\275k\346\275\237\241\007\275m\2327\276\014H9>\367\341\034>\304[\357=\034;\207\275\345\306:\276\334(\362<\005\3476=8\261\016\276#\310\377<\307.Q\275\275\227\002>[\001A\276i\\\345\275\205Z\345;\301\372O=\253\316+>\324&e=\213Q\371<6D\314=\006@\370\275\010,2\276\361>\312=\225x\017\275ia\246<\222oB=A\271\325<\022S9>\356,\304=vH\347\273\335,\362=\202w\370<\211\266>\275b\225\325\275\006\'\203\275\201\224C\276\225\206N\276,L/>*\370X\276Rv\007\276,\214R>\2129 \276\261\352#>V|\231=\345\241Q>\335\321B\276\346aH>\027\333\n>&\323.\276\310\005\344\274\362\203\307=\272tA<`\003Z\276RTF\276\323\333\227\275\021\220\343\274W\330#=]\025Q>\250\365\013\276v\302P>A\266.>\253\337\026>\307\\\376\275\210\330\202=Zy\177\274\004\020,\276\241q+>\014\342\202\275\260\312$\276\003-\241=\326\352+\276R\023\327\275\326X\233;\037\026\016>x\304\017>r\277$>\214x\020=0J=>v\376Y\276\321&Q\276\035\035\306=\300\322E>\220`\224\275B\"\215\274{\234Q\276\352\244\201<k\352 \275\365\344#\2768^Q\275\317\1778\2768\2315\276\021\354\206= 59\276\341\256-\276\266\250^\275\215\306\032\276\213\020\326<\210\270\030>\361\266\220<\257\024\006=\331\335\036=\265{\300\275\223\037\307\274\013\273\257\275\221.\010>\256\236\000>\203\331G>g\332,>\226\230\205:\206\005\324\275\021\272\027>\350\345\321=\023\260l\275\226\262\262<\302|8>\373\rT\276e\226\311\274\301N#\2764j\202\273\224\321\227=K\365\257=\031i\333<\2472o\275Mk\221\2751\243\033>\005\2237\276^H\300=\357\211\243\275br\303=\035\224\034>\331\225\"\275\227O.\276\224\267\177=1\240\226=\376\3668\276v/\001\276\024\204\n\276\312\261x\275H)f=5\215\325\275\303\003P\276fe\364\275P\327\343=A\033\025>K\266\210\275\032\264 \276\2244\207\275o\226\245=\333\275\022>\303H\267\274t\3731\2756l\210=\261uX>\320\260:>y?s\275\363k\222=\210\352\307\274Q\211)>\261\0051\276\324\371K>\233\2279=\234\335\004>\253\020\346\275a\331\033>`\313<=\341\022=>\326\371\366\275\371\026m=\210h\016\276\232;\226;,\355$\276,>\033\275\215C2=\035\027<>\034\n\227=\231l\317;|J#>3\317\034\276I\\\003\276=\370N\276\206\362\340\275\370\265\333=\377\345\233\274x\265\211\275\352\300\352=\252\300B\2749\254\350\272*\264^<Ju\023>\341\364W>\222:\202=O\332\323=G>/=y\245V\276\005\236\315=\221\277$\276\021\340\226=k\272\257=\240\372\225\275\025_0\276\346\314\030\276\n\n\024\276\231!,\276dC\257<5a\353\275s\256\034\276\214i\333\275J\035^\275\370\3778>\'\210\020>\362(\023>K\212\251\272\316<\033>\320} =\272a\031>[\022\332=\256]\027\274\335>+\276yQ\247\275\350\267\032> \307\032\276\367\026l\274\253\266\220=\241\221\030>=\275(=\216\321\240<\243\302\004\276\367\350\303=\230_\227\275py\277;*\351[>\242\'H>Y@\300=\306\242z<I(\254={*J\276\241Q4\276&`Z=\215\300(\276\2060\324\274\272\"\016\274\255z\262<\027\335W\275\225C\267=\000\232\244=b\014\344\275S@\000\275Jl\300\275\256\224/>,\215\334\274V%\207\2743\211\245=\315\350J\276H\2259\274^\235\232\274\017v\003\276\320\230\276=\327\205\031=-\240)<J\323\022>\321\301W>\255\311[>{\377=\274\2552`=\353\231\271\275R\232S>\020\"\274=G\347\016>k\211\370=\333P\030\276\213@\252=\017\211\007\276P\004S\276\250\321\021\276\235w\206\275\355y\357\275\342\001\"\273\317%\024\276\n\341\200=\245\302\357<8\252D>\337\273:>\302\031\324\275J\016\353=M\327\336\275\225:\363\275\034\223\016\276^\000O\276\362%\037\271$AX\275\243\245\366\274\20032\276\242jH\276\256<\314=\020[\342=\215\275\356\275\343\244)\275\n4\314\275\032k\003\276V\220\245=\005\227\024>Q9*\273`\337\027\275\343\322\300<S^\247=\016}\224\275E\242.\274\205\246 <~\000\277=J\223\324\275\356\265[>lM/=V8E\276m\317c<\342<\315=x(\020\276(\0058>\240\t\036>\260 3\276\350\003,>x=\371\274\217\237z\275\211Q\266\274\017\302\n\275\353\010\023\275HE9\276V\320#\275\373o\251=\033\2400\273\321DW\2761u\007>e\356%\276\037\233\003\276\005\2410>\266|\247<a\320\033\2758FA>{\275\331\275\304\340[>\246\353\373\275\370\3613=\211F\374\275\2302%>\260\375\000>.\032\n\276?nO>)\313\203=\227=\'=\213\r\210\275\300qb\275p\316\002\276\205\244\217=\362\312\004\276B\202F>%\336\020\274\237EP\276\033\r7>!\0070>W\016\364\275\312\327$\276jg0<\216\212\361=J\233m\275[U9\276\310H\001\275+-\313\275\\\024|\274\227\251F\276\277\374T\276,\307\021\274\207\272K\275\n\037\352=Jn/\273\023\214\035\276X\014\007\275\320\254\031=\017\273H\276\316D\032\276!\356\207\273}\251\005>\354\316\"\276P\303X>\000\3209=nt:>,\332o<-f\021\275\353_\274=\"x\037\275:\332s\271\230\235\264\273\217\035\031\276\204HU>S#\301\274L-0\276\304I\207\274\267b\014>\010\236(>Qx8\276\250\275\371=\212\335\214\275r\257\\\275Hv\222\275vg\212\272\252g\237=#\206%\276\\\311R\276\324_?\276\361\370\351\275\37304=\'.\017\274\267NE=\235s\235<`\2513\276PFX<\313Z\255=\375o*><\"\346\275F1$>\2046,=\377\010\204=\366\302\003<\375\034*=@O\000\276\3428|\275)\2607\276\035\r\017>\245E\265=#\216\320\275@w\303\275\'\251A>\21233=AL.\276\277\323I\276GcL\275@\231\221\274%\005\243\273\026\306S>\254\211\007>\343\261\\\273\227\335\315=h\201\377;P\350;\275q^H\276\201\337J\276\347\002+\276\271>7\275L\214\374=\004:\333\275\210\272\275\275\212vK\276\017\177\372=\375\233w\275\240G\240\273V\335N\2758\025\013>\325\247\031\276\322_\035=c@\014\274\032\247\345=\037\004\001\274\007\202\242=e\001q\275\200\200(>\307&3\276<~\026\276O\276o<\234\326\225<\256\037\270=^\022\222=g\231\344=\231\241P>\033Sw\275\327&\360\2748&\'>k\357\003\276\330#\003>\266\210!>$m\205\275\237\2525>\2238\350==\206\264=p\201!>.\201I\276\324f \276\'\236^=W\331\242=\362wT\276\316<\004>\23044\276\202\367\021\276G\233\247<[\335s=\250\331\n\276\251\361\375\275\010\321t\275\340Z\310\272\007\363\021\276#g\227=p\035?\276MR+>,\014O\276\351\276Z\276\342a%\276\302\2765=\257\223\027\274\014y+>\347\021\034\276\353\2745>evc\275K#\036\275*\221\362\275%:i;\267W\005\276\201\234f\275\'n==\021\350O\275\366Q\251=\3257\022>49\316\275\337\352\342<\370\211\336\275y\322\r\2755U\306=\035\364\266\275\332V6\276\333\230\272<\3669^\275\317K\332=u\261/\276\247\363d=\360d\t\276\266\206,\275J\177\032>\037~9\276\226\343!\276\227\000y\275\252S\014>\004aF>n\345A>\033\000\340\275\311i\373=\"^\303=\306\363p<$\353\271\275M`\003=7}\353\275\2030\340\274\264\307\r\276&\264\256<\014M\026>\217\nA\276\335\274=>\005c\027>^b`\275,\010\032\276\207\205,\276\206yC\271\250\364\221\275U\321V>\365\361\026\271MO\014\276\026\253\024\276h\005\371=2\210\250\275\005\264+\276\246\242\337\275,o\220=n\027\326=\362\266\300=6\014\027\275w<\363=\213\315(>9\256\227\275\243O\312\275\030\240M>\335\2628\276w\230\252\275I\243\023=\330\300\017\275\273[\327\275|\235\356=\014s\270\275d\351%>\376UT>\220\366H>l\302\301=\265\212\265\275E\350\310=\2563\232\273\027=\222<uV\210\274H]3\276I~\271<\0102\345=\245\3531\276n\222\266<\320<%>r\005\333\275j\232\025\276\253\212P>\t\314\317\275\351\327\262\275S\035$\276\212\343\261\275\342\333F\276\004\237M=\371\357%=\274&\334\275U0/\276\301\241i\275\021)\245=):V\276\344\327*>\373(<\275\322\016)>\225\301\'> H\006\276v\021\322<.\333\014<v\255\351=\004\334\021\276\337\307\003>Y\317\364\275(\3572=Ws?>\356\314+\276f\013\244=\345\266\200=lW\346\275\344[\306=\221\3320>\210\250Y\275p\334\321=P\231\210\275\214\374\217=\003\354\354\275\344\236\240\275\207Q;\276\tN5>(={\275\247\273\002\276\237\304L\276\252\356\">\332}\302\275\215\316\313\275\255\033v=:\251<\276\256b\035>\301<\004>\304I\002>\336\361Y\274\215\213\267<\353]\\=\212f\337\275\377\311\306\273%w\"\276\356\006R>\365\'\261=\233\006Q>\014U\r=\342F\"=\247P#\275\367\267\212=F\306\023=\327\3527\276\216\350\026>\324G(=\013\316\016>\323%4\276\262\260\307\275R\321\010\276\3445\374\275\233\373b\275\314m<;\336\337\256\275v1\335\275\264\034\201=\220\324\242\275z\001\320=v\337\340\275\274\3748\276p\224\023=\r\355\217<\017\302h=\306\223%>\335\210\211\275 |#\276I\014\316\275\272\r\310=\342\217\354<1\202\"\275\335x\324=+\353\034>\337}Q\276\277\"0\276r\344\201=\307\205\336\274\345\352\032\2764\013)\276!\245<>\034\303\r\276}\201\026>N\377!\276\355\312-\276v#,\276\373\364@\276\3344\273=\177\306\022>\200\302\"\276YvD=\225@L\276\030\314\021\275c\334\001\276k\276\315\274\312;I>\255\031S\276\035e\271\275T!\267=*K6>K~\002\272\345A\342\275K\372N\276\373\261\007\276\312#\374\275`(\026\273\'\350\264<F\313\231=\327\356\362\275\001\252C>W>8>J\253\352\275\273\013\314\275\001{\265\275<?\313=f\0354>\224\345\005\276\337\213I\276>\010I\275\036\337!>\310\354\352\275\024w\037>\232\005\213=\255Op=\r\240\007>\222[\r>\033\231\367<\231\270\334<(\260\343=v)\005\276j\376\027>\203\231\354=\210co\275\3108\r>\036/\371\275\026\365#\276m\0047>\032\005\331\275\314`?\276\300\233\354\275\020\245\255\275)^\327=36!\276*\201\020\276S\355 \275\367\307\037=\364\215j<\261\235Z\276\377q\247\275<\216\312\275\017\030\214=\311Y\031\276\227q\024\275\017\246\005=:\264)\276\242\"\000=\302\"\323=\256\005\204\275a]C\275(0)\275\022\243/\276\374\266\275\275\302h\335;\357\235\006=F\373;>\232\227\005>\270\037Q\276\354\\\024=\362\216\240=\213\366%>\022qI<\270\300\227=[\200B=\236\035\365=\324A%>5:\274\275\r\360\016\276\230A\376=\006q\336=,\225$>x\300\246\274l\270\n>/|6=~\\~;.(\035=!wL\275\334r\252<\307\322w<\244\322\330=j\272Z\276\016n\342\275\333!\177\275^\263\226=\347\323\016>\234\244\250=\t\254C\276(\303X>\345\217\032\276)\017\033>\335\2428>L\342\201\273#S\n>\334M\252\275\351XJ\276\233b;>\261\262\272\275\024\204\353<\374\321\231\275\003\331\264=\234\220~\274\267\265\271\275\227\232\232\275\013=a\275^\016\274\275\242M->\007K->V(/>\374\2325\276z\240\020=M\032\262<\200\373B\276\233OL\276\022%g\275\222\017\242=\222\220\265\273\200\242\327\275\212\3619\276\254\225\021\276\te\247=\367>S>\225\235,\276\244y/<\200\214\354=\205\251\305\275$t}\275>\027\030\276\266\340\213\274\311\037\022>\317^\334=\346\032\357;\226\252\334\275\013\210\352\275\272\301\005\2733\017\037>\230\236\023\275\341\260\027<\336\033*\276\232\230t\275c\300*\276_O\265\275\271\0303>\205\022U\275\236\315\312<4M\250\275\276c@\276\200\'\353<\377v\342=\202\243\266\275\226\350<\274\010$:\276\'\312%>te\365\274\365a\320<\217K\357\275\327i>>m\216\304\274\2230\001\276E\210A>\206\305n<dR@>\236Pe\275k\2425\274\236XZ\276p\366\305<GK\020\276\237;\274\274\"\271\021>\027\027\235;]z\216=\206\332\342=\030~=>\322\313&>\315\254\030\276\277\252\236\275\257\203M\276\314\334\022<\353\244\245\275\370\200P>\031\320\217=\242)\374=~\\\211\275L\325\221=\331N;\276\353\246B\276{\312Z\276\274K\373=\214\t\003\276L[N\276\333\3641>g\362Q>\306\211\034>\276,\027>\217\363v=P\262\'\276\226J\312\275\376\005\037=\331@\307\275V\213\035>v\014\r\275\025\247\213=\200F\033\276\372\002C\276\'\215G>K,6\276T\000\217\275\031\274\271=q\303\004\276<&\203\275G\027\034\276\346\207C\276R\271\034>9T/\2766ik=\265\027=\276*\260L\276]9\352=\335\374\375\275\225\026\t\276}\256\214<2\375\264\274\267\0310>M@\037>\t\250\331<\3605*=\250\3606\276\035h\311=$\231\342=\352-\330\275\256{\357=\237\352\'<U\305:\276\027\266C\274U\205\016>\277w\224=|Xh\275\352*1\276\223U\346\275\304\033\017\275\302\321\202=\277m\\=\271g\357\275.gP>\2378&\276\271\215\010>c\r\002>\365\274!>vY\275=\304\254\033>M\003D\276\327\251\366<;\254\325\275\350\372\001>\211\340\033\276`\3161\276\244\314!>Cm#\276e\216O>\301\347\302\275\275\367\016>\233\035T\276]\357\t>\364R[\276Q\211*\276\034O\004\276\271\363f\275\233\303\032>\330\275\274=\277\215\022>\033A~=\247%\203<\341\253\225=\267\274\370=*\333\240=N\000\310\275\237d7\275\267_\355=\357\373>>Sm\003\2764w\203\275\220\021\326=\371\266\304\275\241\352h\275\237\374G\276\272\237\347\275\014\n\261=\247\240p\274\267\330o\275\307@\n>\353\253\373\275\312EI>\270\036\351=J\207P>\320<\301\275=\243W>\235\257T>\331\375:>\245\344\006\276_\n\000\276N=L\276\240\177\335=!\024U\276\307\237\322\274F\177U\276\316;\301\275\2513y\275#\r\303\275\224r\376\275\227+\036>\211\314A>\314iR>\240\026\350<c\334(\276\t;\377=\014\022\372=1\363`\275?HS\2752\354%\276\331\r1\275P\016*>\211eY\276P\336#\276<\360\363\275\313\031\271\275\234\026\005>\221\340\351;\366\262Q\275+Y\035>++\325\275\245w\223=\354Z\316=\024\270\240\274\357\237.;\256\307\247=\360A\004=\206y|\274\034\001I\276\316\234Q>7\374\202=J-\257\2739\205.\272w\362A\276\253\316\210\275\302\367\324=\001\254U\276\362\265*<\353\220(=\376\345(<\017c\221=\032\371\205\274+U\366=\235N\253=~\226@\276\355\036\342=S=\274=OD\335\275\266Y\036\276H-\022>\257\251\005\276:L,>}\007\211\275\211\224\340\275p\211\223<\226}\006\276i<.\274\014\200\001>\032y)>|\271\272\274\242ZX\276\254\276*>\216f\251<\023H\224<\252\356\334\275E\007/\275\242?\214\274\036\275\241;\273\366Z\276/\177\275<\251fN\276>\376V\276\346\024\332\275\2419\253\275\347\266\207=\272;\">\307\353K>Z\001\220=\314\220\217\274\000\002\034<\027\342\254=\037\031\262=\n\220\356=ql\340\275)oP=\243O\373<\232MM\276Z\201T>>\315T>\340\332\227=\324s1\276d\373\343\275#\321\240=\000\3672<\\W\007=.Q\321\275yR\014>\354\'1\275\215\001\255\274\030\274M\276n\217\260\275\205\322\036>Ou{\275\263W\261=\346\335><W\026f<e(\211=E\225\316:k\354l={\320\246=(L\331=\364\247\374\275i\234\035\276\346][\276\030\273\020\276\317.\220\275N\244(\275\213Q\251\275\331@N>\3746+\275\226\325V\276\312>\221<\301\355\000>_\030\313\275\330.W;X\242s;q\3700\276\313\354\305\275u\234\233=[\207\300\273g7\220\275\036\010.>\372\341 \276\304\336s\274\332\251\227\275T\014\013\276b\310\307\274O\217@\275l\216\000\276\304\264\374\275#\203\363<\364\316Y\276\344\\\220\274z\212.\276$\002M>U\"\021\276h\3546>\305t\254\275\214\336X=\016\223>\276\200\030\020>\343-\241=\213\006\006=\037\257\316\2741\270Z>\372Y\271\274\220B\225\275j\323E>y\"K>\351\303\013\276\026-\211\275\217\274C\276\000\263\005>\303sD\274\022\202\301=\270\264\t\276&\346\202=!>S<\020y\016<\215\001\321\274\372\352\213\275\"\274\306=]f\224\275\355\245\016\276\364\010\256=h\3433=\232\376 \274\354=L\276\027\320w=\227\005\203<\r\257\035\275\337\017;>4\031\366=\"\237\251\275\346\236\372=\212=N\275V!W>\0339@\276\010\312x\275\304\230*\275P\177t=\267\311\222;\205\245?>K\215N\276F\275I>M\326\r=\263VM\275j3S\276\010\377\340=M\326=\275\375\357\036=\324\024\017\274P\317\273\275qAj=\214\271U\276=\262\262\275\225xE\275\244%S\275*\035\024>\353\025!\275b\030\225=\321~\312=\242\371\217<\321FA\276\t\222S=x\340\305=)\243V\276\211\370\205\275\241\277\322<\010\001\356<F\035&>\252\241\230\275\277B\335\275d\\\215\275o\273M>\276\0270\276\250 \023>\0304|\275\007\030\345=\013M\216\275\177\263h\274\002 (=\275\'\216\275\3364\311\275N\007\263\275\312\224\022\276\313\377\372\272\035z\377\275O\305\371=\353\220\271\275<m\216\275\214\325L>\342\320\231=\373\n\033\275\250}N=\330\266\210\275\243.D\275&\203t<\216!Y\275\177\236\003\276T\237\267<\310e\260\275?\307\312\275\0032\021=\343\221\021>I\354\006\276\276\004\375\275-\006\261=\221/K=\037WK>\321\251\037>?\346\256\275\005\255?\276h^\335\274\321\002\264=#.Q>\217p\014>\234i\200=o\340\025=7\313\344\274\037\322\300=\325\375\273=\241\3420>\017c\341\275\377\2572\276\201\272\223<\020\245U=\n\334\311=?Y\327\275\007\367\r\276\'V\337\275D9\360=K\227\322<\360\250C=h\273C\274\374F7>=\345\010>\336\306Y\276AEd\275T$->\362\376U>RJ.\276\316$R\275\010T#>H\3050>\036\354\273=}\215\352=\221\311,>\025\340\323=\037\333\337=KK3>08\300\275\355=\010>\341\242\262<\373]\346\275}\330\022=\352 \030>^\243Q9\\\205\372=3\r\177\275\327\202\271\275yE7>\371\361\356<Jj\303\275\2619\337;\263\021\312=\304\370&\276iC\033\276{\034\020>\2671\226<\022\234\021>\005\372\006>\307\376\232\275\322\030\337\275\245qV\274\261\0018\276,\376\250=\232\254\356<\033\305/=\231\271\024\275&\021->\\,\277=\342\3365=o\354;\276#\272/>\010\010\246\274K\001O>\273>\026>\207\'\215<\3441\207\274\311eA>\302\022c=c\270\231\274\311\267\374\275\034m\244\275\277LG\275\367\243|\275\0171!>G\3757>\0070#\276\247z\211=\245V\027>\317\3506\276\223\236\367=\357\355\311=k\377\322=<\326\345\275\314\273L>\272\r\366\275\210_\265=\202\303>\276\024^\035\275/f\216;\020\235\210\275t5\305\274\317\240E\274O\364}=\307\022\277<\257\235\373\275\327Fb\274\"\205\252=\373\2541=:&\036>\207}\010\276+\016\266\275r\252\271\275,&\355\275\n<:\276\253<?;\306\2461\276?\214s=\316S\026\276\374M\354=*m\361\275\215\220\374\274\033\206M>\220\3571>zxJ\2769l\305<)BI\275\013T\202<\300\365n\273ok\010=\032\312\332=\262\021@\276A|\337<\233?L\276\253\244\266=\206:\302\275p\351\206=\226\027~\273\336P\017>GLE\276\211\222\017\276\276\025Y\276\226\330\324=\251\007\r>U\316\326=\372P\001\275J>+=\272F\341=\005\177T\276|\3365>\356S0>\347&\233\275\251\363\203=\375/\373=\352A\356=\260h,=\207\304\271<\250\006\222=\372\210\214\275\312\210\020\276\0375\352=\233\243K\276\314\276\332\274\300W\205=P\034W\275\260\014Y\276\351\314K\276-A\367=\256yX\276\377\034\251=|RT\276x\213\023\275v\006\037\276\214[\314=8\343\215\275\025\355\036=6\023S>d\333X>\032n\375<\331w\">\200|n=>\250\265=\365\236\220=\223\215A\276\014:\306\274\321\320\n\2762\033\341\274\272\322\004\275@7\005\276\006d\364\272\311\213B=[\264\271\275B\252\313<\330\203\037>k\275\325=\220m\241\275\342\017%>*\201Q\276\335M\363\274\240\260\235<\016\377,\276\303\246\"\276{\370\026\276\366\200\362\273\360\212w=I\247\353=\025:\322\275\276\021\324\2738\220!=\202\031\006\273\243\347U\275\334\354\370=\240\245\217=\277\326\000>\022FJ>\372}F\276v\336\r>ID\320\275\237\271\306=t\r\366=\253\316\240<\233u\010\274#u*\275\017\227\306\275qq\204=\357(d\275\255V\356\275K\244X>\251\207U=^\033\253\274\220W8\2754\027.\275(\026\201\275\234q\306\275}\3029\275;n\275=h\370\022=\211\371\021=\232I\035>\002k\017\276\245\373\306<V\007~\275\242u\021\276|%\035>\231\2579>\264|\\<E\021\340<\303\332M\276\240]\256=K\257Q\276\272\316m\275A\004<>\301g:\276\325w\264\275\372\244P\276\3654/\276#\270\021\276\366\0368>\007\312\340\275\tJ,\276\n\262\374\275\023s\007\276\237\224M\276\236-J=d\321\n\276\3330\014>\313 \013\276H\352K>=@\000\275\372%/>+\373\306\274+\021\307=/\t\264=Ei\320\273\355P >\205:\025>:CY=\356\206!>y\321\033\276\317\274\377\275z\224P\276\367\200\t\276\231\274G>\373\017\271=J_Y>\231av=cE7=\005V\004>\000!\007>\033\023\013\275\014D\r\276\352\365\325=\306\363q\2752\320\243=\n\240D=\020\265\177<1\006Z\276\305\033\337=\240\356S<()+\276\014\200$>\206\346\267\275\273\316@\275m\240\213\275\233b\225=NYR\276\262\263\332=\316\324>>\371\024Q\275&\376\306\275\274\2355\276\332\017/\2760\366\254\275\242Z\000<\325\201N\275\023`\007\276\224\227\022>,\375O=5?\352\274\3408J\276\225\017\331=\266\215\342=\232\243\325<cz\037>\372^Y\275\346\266\346=\016\237;\275+\000\250\273\257L>>\262\006\">\270\206\333\274\0008\021;%OW>\350.T>\344\207Q>\004\214\235=\262\220\275=\200\335\357\275\337\275\025>\367\304\">\206\227\007\276RHk\274\373\202!\276Ds}=\243\241Y\276\373\317c\274\\\325\032\276G\013\222\273\213\'\305\274b`w\272\035a <`\254X>`\365\013\276Q\261I>\254\216\315=\220\266(>\312\262D\276A=\n\275+l\377\275\213b\001\276\305LL\276\217<\244=\032\341\204\275\'\372\201\275\267\312\251\275\251V\330<\005\030B\276\261\373\213=H\301]=\216\207\300=\324\267\020\276\231x\243\273\306\230\350<?[\303\275\270\274\023=\312\371#>\2242\271=\313\351<\276\212\375@>35\003>\225c\322\275k[\335=\306G\377\275[\260H\276\036\363\001\276S\032\"\276\217\3022\276\375\037r\275\223|\347\275\371M\007\276\313_%\276K\305\265\274\273\236s=zip=/\315\237\275\231\262\330\275&\377.\276\026\017F\276\004h\232\275\374\204\306;(\316\227\275\274:\255\273\243\301Z>\2616\010>\314\214\227<C&L>M\262U\276@\256\024\276s\365+>\2151\267\275(,F>q4\371=\234J\274=\376^\201\275(M\235=\262?G>\013g*\276\243\352\370=\310\254\027\276\313\002\"\276\360\373\365=\366GY=\375e2\276\315\330k\275\250\203\013>-``\275\020i\203\2752\306b;\266\2355\275e\220\217=7\342\317\2751t\337=\034\3276\275`XA>\274qA>?r\023\276\203\370<\276;\033#>\256\335\314\275\021\212#\276./+>\242.v=0\014P\276\274\246\037\275\332\350\217<}\203\362=G8\037\276\234\277\030=+\205.\276%e\362\275\213\315\275\274\000GL>\352\":\275\034\3135\276\221;)\276\340E\357\275R\230F\276\26342>m\264\014\274\203\r\254\275\3658*>\021\361q=\030(\340\275\306\017\355\274c\3272=}\231\271\275\020z1\276%\r\253<\304\325\235\274A\022\022\276Sq\035=1c.\275j\237\243\275\222\366\031\276^W\036\276\003no=\007\324\245\273\227\221\264<^\2341=\220a+= \244\002\275GCM<j\241\246=\366\3551>I\233P<\343A.\276\367\2378>\027\244\251\275+9Y\275\021K\355=\244\247-\274\220\202\023\275\002\212H>o\367\335<O\360*=\211 Q\276EB\351=\335\235\214=j\305\306=<\234o\275\016\003\030>\256J\023>\343z\242<\016\013\345<\010\216=>\210w?\275,\245 \276w\205_\275\037]\n>\302\026*>$w\007\275\331\373#>A\247\201\275\245,\313\275|\001\">u8\362\275\276\262\002>W\355/\275:\237\001\276I\240C=\237P!\275I\'6\275\311\nV\276p}\365\274\372\262\357\275\242`\'\276=)\344\275\344\351\033\276\206?-=\351\301U=3\207C>\263S\267\275\253\023#\275Q\024B\275\270\267\014\276\246\3406>s\023\274\273]\332\024\276|\035v=\242c;=cyI\276L\371\200\275\265[\221=\357\265\355\275\300\304\316\27502<\276\223z\037\27678N\276\245\032L\276\344\234W\276\217\"~;D\235A>\242w\224\275\261\021\323=\275z<\276\374L=\274\244\210\034\275\350kN>\324\236B>\t;A\276\027%\240=T\254\205=]\\\322\275\212y\240=\357\332\330=\237?8\273\r\263:\276\003\326;=?\212\\\2750h\341=\006\210?\276\355\236\263<\225\214d=\3154\206=\274\006(>\304\363Z\276\355\3376\274\277\207p=\262\020\276\274\340\346\007\276\323\213\310\275*{/\276\261\206N\276\247\201M>\335C\344=d\3311\276\"I\222\275\262\0267\275\326f\347=\346q0\276!\245\360=.\030\375\272\\\204\253\275P\365\265\275\326\234w\275=k\033\275\214%\n>\273!\013;\274\2459>\274\013\224\272\377\364d\275$]\242\275\303%\014=\213\270\006>\027Y==pZ\326;\025\245@\276H\032<>\3215X\274\030\366\320<\215p\317\274Ll\343\275\324\353\317=\010`\004\276\034\023\260<\363q\345\273LkU=d\272\301<\240Q\234\274\337\246\022=S58\274\213)\272=\371}\025>e\026]\2759\252\020\276e\277\014>q\312\027=J\254\033<\264\350B=\240\251\364=2,Z>\247$\357\274\335\365\036;\342\3419\275\016\322\306=\236T;>\351pJ>\210A\232\275l\006\216\275mv\022\276\363\324\021\275Q\025A\276\034>7>\001\262\300\273\3319\006\276\335\363\203\275;n\242=7\203F\2763]\264<O\t\031<\375=\213=\225\207x=\360\213\307\275\230p1=\243\223\365=\344\272\255\275\313nL\276!)\224\274\010\345\266\275+\002\207=i\201\217=Z\225\321\275\227\264\036\274_&<>\304\337H>E\261\332=\237\357L\276\005\034-\276\033\234\247\275CA\317=\003\262\n>y\2022\276-I\234=\325~P>\256#\021\276\344c(\276\007\316\027\276\350\326*=P\344\010\276\336\337+\276x \'>P\277,=\356\251\211=\214!\335\275\024\261\363\275\243b\315=-\247\"\276\326\037K>\001\223\333\275>\r\232=\2369\372;\2569A\276\324=\002>\005\351n\275zo\014\274y\217\001\276\262\207\30660Lb=\036\031L\276<\324E>\213\260\353\275\034\262\036\276\265z\330\275\023\000\007>\343\177\202\275\234\224\033>e\272\264\275|P\312\274\313\0045>\263O\266=\n\2255>\233\260\311\2742\020\345\275\252\223W\276j\035\321\275\241\250/\275\nE\321\275|u%\276\335\021B\276\300\371Z>\324pB>\330U\n\276K\2579\275\301\320\013\276\033\327O\275\257\013\271\275\307N\031\276+\353+>\327\266\376\275x$\254=\3124\354=j#\034\275\374\223\025\276\323\013\301<\307\r\362\275\217\006\213\275\223N.\276\310\233|=\032\350\017>\311\036\201\274\021W\204<\347\334\233=\324\352q\275\205*\014\2763\222\331=\344E\001>%\350#=#Cl=D\331\317\275\356l\370\272+ \'\276\004\323:\2748CQ\275\n\334X\275z\001(>1\275I\276$\2404\2766\343L\276\220eU\276\222\030\240=\270\314f<v\327\024\274n&\205\272\207\016\031\276\035F\213=\363\377\317=%\222!>dR\017>\273\335\315=[\267\020\276R\374\276\275\007q\005>5o,=i\206E\276\323\375\006>N\2576>&\201\354=\020\2367>\006\177\316=U\251 >\374\343C=\017\206\307\275nI\240\275\370\217\374=\2733@\275\214\027(\276\262\201!=\306#:\276\326\rp=\211\300(>9+\201=\r\276\315==e\232=\002\247\330\275Q`\302=\323\006\302==,/>\213Q\205\275\371\236\232=\0363\353\275\351\212:\276\222f\327\273E\307\001>\261\263\006\276\301>\366\275\001\036\311=d\311D=g\306G\276\203\244\272\275Y.W>{\t\003\276y\361\326=F\032\350=\223\243\325=\356K\200\275HZK>,a\273=\241\207#;\335\371\213=f\355\207;!^\255\275\271V->\210\250i\275d\311\210=\272\247\'\275\274R\237\274\250\242\372<\241\217\027\276\373\365n\274|L)>-\215\n\274\364\366%>\2006<\276\020\227\"<#\000\003\276]\346\345=\241\013\003=\t\325x=\256\234/\274jM\021\276\325\204\214=S\"\377\275s7\331=7\314\334=r\377\006>\255\361t<\327\014W>\nAB>\303\023\016\276.\336\250=\255t,\276\365$4\276(\272\262=-x+\276*\253\005\276`\205\275\275v\353\010=\212.\266<\340\251\\\275\215\215\326\275\361\364\331=\276,\243=s\321\004>\004\3541>G\004\026<\361-\273\275\000\304\365\275D#\321<\312fS\276G\2608\275J\307I>\236R\276\275\237t\007\276\332G\201\274A\024 \276\246`\333\275\233:\t=\345\276#\2764\270B>\000\0107>5\tD\276\302\0361>\326\212y=\'\254;\276\334\345\320\274\227\372\237=\237\225\327\275\231\n\274=\252A9=V@\256=\014\326$>,|\016=\327K\037>\311\021\033\274J\006\257=:\243\306\275\340\263_=\227\023J\275\210\340s=\260\344\013>\005\215 \274\213\246\345\275\316\317\025>|\033P>\354;\302=\315c\002>\2206P>\273\2211=CR&\276/EF<\211\307\027\276\235\254&=e\230\032\276KB>\276Y\315L\275\211`[\275FH\025>\357W\216\274\324rR\276\336\354\'\276\243\251 \276\035\036\013\276WU\374=\342\235\323=\230\217N;\243\3537\276\203\370\217\275\311) \276\267T\213;Z\375\305<#\234\356=\226\226\022>\245x\271\275-\030\261<|\246\177\275\211\014\267\275\013\375\245=\266\334\003>}~\241=)ZL\276\310\\J><\306\033>\307\010\022>\022\0255\275\363\261\205\275)\236\264\275w3,\276Ly\374;\341\300\253\275\2738D>g\216\024>i\317(\276\256\265\272\275\300E\207=Y\002\221\271/\211\247=\340P\352\274d\362\001=:\314\202=s\341\n\275\307\036\014\276`0*>P\346\251\275\325\352W>)\355I=\247\356\375\275\337\237\n\276\345p+\274\204O\262=\327\266\202\275\254>\233=\340\337\362\275L\264\221=\010~\017=\274\264>\276\016\334&\276}\007\272\275#\316\322\274\010\373\211\275JIB>\307\330\276\275\262)\362\274\211Kr\275M\366\"\276`4\215=\324\327B>\306\345+>RE\377\275\271\370*=$\263\257=\253;\000\276\305\302\271\275x\342\032=\272\301<\276\267\035\254=-\372(>7\311?\274.M.\276\177\307Z\276\274=\367<J\217\005>0\370&\276\215\3607\275\334\021\276\275\256\'\034\276\241%=\276\352SV>\006\2251>"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "K\000\000\000K\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20000000298
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 75
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 225
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 225
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 225
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 225
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 75
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 75
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
