node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\3053A\2752)\250\274\'F\376=\334c\306\275\346M\362;!\207o\275\006$\026=\221\315\242\275\333\203\217;5\376N\275\006\254\030<\207D\351<\005\025\004\274\254D\340<\316\265\202< 1\226=\237`^=\001\313l\275<(\250=\336\001\261\275\213\352\310=>\035\302<01\275\275\000\261\240=\227M\222=\262\241]<\014W\254=\312\364\\<m\342\355=\005\'\345=t_-\275\3537\332\273\250\222\227=\215\244h=M\335\033=\247\312m\275qI\222\275\247\177\361=K\347\354=\212\335\272\275\'\220\245<\017:\344<\023d\007\2759\377 <\016n\326\274\244\031\363\275\340j\334\275xr\317=y\206j\274\307\355\302=R\007\001\276uS\013=/\010\202\275\377}\035\2752,\311=\243\305\237=\254\036\322=.\266E=\261)\320\274Ih==@\362\300=\371\305\177=\360\233\367\274\214\210\343=\233\262\366\274+\346\345\275+\262\353\275\r\244\323=\317\307Y;\241\331\014\275\252\003q=Fh\313\275 \361\026\275\343vH\275\257\256\322=\237\202\375\275-\241\\=u\321\225=\213\365\334\275\372\332\032=\316p\177=8G\001=\232\"\363\273Xn\307=\226\265\231=*\003\035\274\003\010\\=D~\n:\245\207\246\275C\372\352;\223\227W=\tCm\275b\001\243=\312BR=\362\350\213\275]\014\361\275y\275\204<\273\366r=\257\327\367;h\326\244\275D\013\265\275o\005\327=\325}\204\275!\202\236=fJ\335<\3757<=\3452\"\2752=\325=+#{\275\363o\234\275C\352W\274\224\364\004\274g\305\335\275RU\007<\n\205\242\275\265G\237:G>\230=%l\366\275\361\367Z\275\344\376\225\275\370\014\316\275M\326\236\275\333\312\372\275+h\r\275\364\0061<H\306\303\275\315\246\000\276\2033\274\275\n=\367\274\362\037\261=\271\301\"=\201\205\264\273\212\344\224\275N\263\220\275\276\306\365=\257\324\330\275\306\260\261\275\036]\245;\036\336w=~:\261=\'\355\264=\215\340\341=\360\334\312=\320*f\274e\304\325\274r\265\341\275\006\265\001\275\242[h\275](\302\275e\020\036=\000\017\247=\241\276\363=j\247\234\275\322\210\260\275\n\333==\3242\312\274N<Z\2740\202\001=\206\220\257<\342\342\313\275\267\376\354=\377\266\372<\377\225R\272\373V!\275i\364\322=\257`\314\275\351\322\245=\224\350H<r\377\212\275\271\'\307=\266\234\241\275\333\031\025\275\216\344K<\232k\346\275\344\315m\275\204:\342=HY\274=/\300\376;\275\304\320=\232\200\301\274 y\223<\300\363\332=\033\234\355\275Us\356\275[)\307\275\345\007\365\275<\342\\=\261\266\037=\267\007x\275p\212?\274 \324\261=a\336\351\274\242\267\225\275i7\030\275\021\243T=\017\300\210<\306\003\246=\226{\231=\234\260\330\275\323\331\367;\211\364\342\275h\252\320=\227*\371=9\357\237=a\220\312\275\2300\352\275\240p\251=Jv\335\274gz\215=\264fo<\317\250\203=\374\333L=\237\n\330\275\355\275\014=\033\222g<7\005\243\274\210 )=\350&\340\275E\003\206\275.\377\023=e\204\236\274\034\350g\274\200Y\r<}\347\016\274\260\211\323=\224\243\361\274X1\034\275\3311\251\274\316\305\311=\203O\257=\240[\324\2754\351\205\275$u\350=\210s\302=q{\236=\331\330\201\275\212e\301\275\360X\251\275K\216\023\273\214T\340=rG\372<^\356\303=X\235\306=i7w=\003:\344\275\273\033\014\275V\n\263\275\267)\336\275-\242\016=\344\361\323\275y\031\000=:t\261\275\360f\260<\000T\022\275\2277\272\275\320N\252=\214\362D\275\202i\212<\313\361\022\273C\273\245\273\257h\224=\244T|=?\001\357\275\244T\377=\311k\273\27544\254=po\360\275\234;\344<\246g\017\275\312v5\275\347\020\r=y\3350\274f\335\250\275C\243\3349M\353\"\275\345\013f\274\315\365\023<\271\221\303\2731\203\372\275j1M;\355\021\347\274\201F\306=T\351\352<\255h\337=W\027\216=\177\340\304=\361\210\343<\"E\241<\026\341\360=\301\302\217=\255\010\356\273T4\342=\005.\374\275O\204\343=f`L\2758\377\333=K\253\204\275Y\373\322<O\364\273=N4\374=\221\330\342\275\345$\345\275\214\372 ;.O\206=#\210\261=\025%\\\275\362\235\363\275\356\342h=\0258\245\275!AM=\323}\025=S\205\321\275\215\022\350=\262\375o\275\373.\334\275\305\264\207\275\377^\337=\316\357\256=\2345\232\275!c\036=\022\'\274\275\371\240\252<\207\321\342\274\356\273\221=\037O\276\274\366\372\356=\336\016\310=\276\031\246=\263j.\275\352\030`=T\270\306\275\332`\022=\2529\n=g\335\352\275\370\230\355\275\336\302V\275\177\200(\274\277~\277\274\023\032\366\2758\226\341=\025\030\222=\321p\334\275\370{\273\275\206]\270=\0240\307=pV\261=\005\247\004=n\325\326;\036\300\331<\276\263@:\231\376\304\275\214P>=*R\234\272\312h\234\2756\247\250=bF\315<\356,3=\375J\207=[\310W=\334\272\262\275\245\265\340\274\007\336N\274I\330\003\275\210\340\247\2754\007\232=\277(\325\275\205\260\244<\301w\000\276<I\376\275\312\305\373=X\024\354\275{\211&\274\356\377H\275\'S\335=\212\366z=\002\370~\275\020^\344<8c\022=\312@e<\222-L\275\336Y\300\275\032`\234\275\002\255{\275\222\312[\2759\314\321\273\tB\336=\232\302\326=N\220\360\275$\2347<\017\245\332=\260F\232=\371k`\273\3221\252=4\210\331\275\264\273u=\021\257v\275\204\255\300<p\204\207\274\213\306\360\275\210\010\200=8\344>\275.;S;A4\247=a\303N=\317\362\r=\244\017q=|\303V=\265\252A;>P\022=\326\272\340=\203\376v=\244\343\000\275\353U\026=\301\r#=\004\245\014\275\266\\k<\r\271\302\275\030\177Y<\200r\256\274\2642\\=.\371\223;\337|\251=\022\354\304\274!5\222\275\342\t\334\275uJ\212\275,\335\210=\256\327\203;\343\306\000\276*\207\320=\356m\212=Y\271U=\300}\200=u\203z\275\337\261\360\275\217A\335=.\223\230=\364\321\315=\027\372\335\275pR\222\275Ij\232=\220\222\267\275E\374X=5\260U=\245N\313\275KdF\275\214\323\232=\206G\212=\032\256\337=\"\215#\275H\353\223\274\376Y\256=\227\262\212\275*\322\233\275\325\241\307\275\354\331f\275\255\026\250=\341\330\0339\222\333\304\275{\367\350<\375c\244=\227\037\265\274v\312\247=\252{\366\275P\366;=\252W\313\275\375!\310\275\233\343\013\2753\3774\275\365p\361\275\204\020T\275fC\207\275)\352\337\275lx\221=>a\363\275y\304\\\275=\324\213\2752\312\246\275\312\247\217=\001\t\240\274\374\026\241\275-\207\374\275\007\275\357\274\240\345\326\274\007P\306<\266\356\030\275Fc\300=5\202<=\277%X=\364e&=\355~\364\275&\277\245=\372\316\271=J\304\351\275jP\001>\202\271\250\274\024\250\022\275\3610d\275@z\313\275\2204\000\275:P(\275#\014\333\275\2374\360\274\024\275\n=\3535,\274\344\303{\275-k\220\275/\340\233\27551\267;\"+S\275]\371\233\274r\253\240=p-\250=v\253\324=\014g\354\274\343\340\021=\322\307~\274N\331\357=\t\"y=/\305\205</%\374=\305\237\204\275ZJ\017\275\251L\2039]w\232=V\000\267\274\006$<=m\035\234=o\037\225=i\nV\275\202\302\215=\231\246_\274\215\316\307\274g\335\254=\333v\242<!\267%\275\351\345\341\275\n0\361\275Z\230\252\275\203\211\245=\322\327\240=\231ss\275\236L2=\020\312\250\275`\214\276<\203\031\275;8\243\344=\000\027\223\275\207 \350=|\200\350\275\027\245\305=\365*\000\276|\007\342=\366\r\373=e\205y\275\031\332G=,\227{=\343\366\251\275\2651\335\275\333\245\372=\271h\211=\326a\256=\364\2301\275\276\262R<F\215\351\275\241_\240\275n1}=C\t\032=\374\363$\275\310)|=f\330.\2752\336\377\275\372~\371\2752\324\271\275XVp=\270r\000\276\240\273\223\275)#C=?\244N=\375qN\274\273UI=`F\327=\316\270\001\274\202D\272\274\256\347\205\275+\355\003=\002\214\325=\314!\336\275\322\205\367\275$\225\375\274\346#\312\275\252\021\373<\273r\207\275v\3703\275d\242:<\200)\353\275N\207h\275\353\345\241=I\2579\275\033\341\251=\201\330n\275TkM=\242\330\034\275\245\322\022\274jU\375\2752\260\221\275=\361\334=<Z\354\275\235\006\317=\t\276a\273\251\024I=\216\321\317\275\350L\323\275\364\215\261=W\303\360\275g\311\345\275#\327\314\275\215Jg=\374\021\355=\013\003,\275T\344h<g\217\316=4\306\275\275\361\277X=\3113\231\274\365y\321=\027r\221=\205\021\r\2754\013\252=z\330\257\275\230;\337\274\330qT\275\3119\204=\357\037d\275#\236\215=\233\246}=3H\374=\214\210\361\275\177Q\250=;\313\227\275\2228\221<M\361S\275\242\233\274=wXz=<O\242\275]\324\275=\237\246==\231\216a\273\341|\202\274\315\343\356=\374\265x=y\014\177\275\373\361\205<c\t\241= K\245=n*\221\275I@\274\275\035\365\356\275x\032]\273\200..=\321T\262<\326o\241\275\0040w\274}\213\224\274\261a\346\275(n\265;9+\217\275\331d#=\205\257\224=\352;\006;\204Yi=\347\260\302\273\'\353\363\275\332\030[\274\353\\\275=\340\177\235\275\233\341\377\275Q\273\347=\021r\354;\n\225/=$h\216=\rG\361=\201\322\335\275\346b\t<\026\347\347=V\346\343=\227;\233\2748N\231=:}\303=\236{\320\275Qt\276\275\367\374w=y\016\212=\261a\317:c\343\201=\022@\323;\311\"Z=H\3121=\020;K\274\345\006@\275(3\213=\205\266\203=E\020\005\275C\033\353\275\337\302\264=}\000\233=X\230\223\274X\320\235=j\241\210\275\3263\322\275\237\006|=w\303I=\366\032\355=\342\334%\275\262\361\315<&\303\025;\341\377\206=\'\331\321\275\342^\323=\324\222s\275/u\364\275\225l\243=Q<\231=\224\222\204\275e\253\206\274U\037\227=\3740\240=U\334\202<\305\256\232=}H\371=\010B\375\274\01312=\362\260\267\275\002\326\350=l\234\001\275\347\364\253\273\177\372\000\275VID\275v\231\317\275\177\025\023=WD\345\275\035\241q=\2440\014<\254\3500=\215Q \274y~\312<\004y\301\275\333v\225\275\244\030e=\030B\004\275\034\346\315\275i\003\255=\340\272\312<@\365>\275u\206\037\275\333[\210\275\321e\231\275\322\221\260\2753\302\343\273\023\365\223\275\223\007%\2748z\242=\353\233\266=\307\222d\275\3367\305=%\270J\275:\262\247\275 \304\306\275\222=\355\275#\256\331=s&\332\274\333x\360=+\033H\275F\255\352\2758\240\007=\355\350\016=\303i(\274\2022\304=r\376\324=\332$\211=&\214\214=\306\330o=\315\362\254\275\204\247\366=\231\347p\275\033Y\322=\n\360\036=\313\t\324=y\026\354=\014\244c\274\243\003\366=\203\354\233\275\026\253@\274H\301z=\361\223j=\002-\374<\343\177\273\27514\376\275\002e\277\275my\237=\301A\363\275\330-\313=\2154w=\336*\252\2732-\307=\326\323\333\275\315\372\221\275E\373\364\275\353\\\237=\375\233\366=C\224\331=\234\n\246=\236\036\265=\346\346\t\275H\246\270\272\322\345\266=\016b\245\274\300\377X=\213\333q\275\214\275\331\275II\331=\302\207\235\274n\311D=\310\243\341\275\246I.\275\246Lj\275\025\010\000\275\276\351\263=\356\212[\274\200u\357\275\2011\237\275\377l<\275\n\265y;\322\213\205;5\236D\275\304\214\342\275\2020\360\275#\220\034\275\355\243\016=\000{\313\275\207k\030\274{\210D=\014\216\321\274\371X!\274Qp8=\2167\374=\234\032$\274\350\0107\275\244\300\216\275y\321\314=\2304L\275\001\221\215=<\347\016<Qm\261\273\235BZ\275\255\334\315\274k\303G=\377\253\357\2751w\224\275 \t^\274N\206\272=\006C\272\274U\221\267\2745J\001\276\356\322\347=\220\223+=!h\274\275;\355f=B\221\224<I~\254=\313B\341<\267\025\235\275\314J\325\275M\262m=\347\263\376=A\026\227\275u\006h\274\353L\301=cJ\374<-\357\227\275fIo=HA\306=\nS\335\275E\334\224\275\307\366\377<\037\272\226\275L\264\330\275\332\262\254\274\220\211\245\274\360c\363=v\3247=\225\210\027\273\233\366\264<S\272\233\275A\202\222\275\202\322P;\267\323\317\275\214\310\240;\227\302\304<>9a\274\021\326\372\275\345H\262=\305e\271<\037y\220\275\260\177~=>R\341=\021\302\350=\t\301\270=\213K\351\274\251G\236\274\265\273\232\275D\315s\275\312\"\234=\272\026]=\035\274\221=\376\234\254<\245\252\344\275\346\214\317=\375\024F\275\221\000\343=Q\242\240\274b\323\r\275\351c\236=\246\256\222;\tUl=\230\000\356\274\355\271\301\275N\343I=\013\330\377\275\236\261u<7AS\275\345Y\210=i\250\320<\276/\307;\026\023\363=\261\272\366=^\250\001\274\376\365p\275)@#=\3525\366\275rV\341=\330#\251\275C\034\345=\003r\205=\352K\364\275\377+-=\267C\377\275\377x\210=\rwG\275\006\216\204=|\177\025\275\311+\204\2753\363\374=rl\373<\002\023\014\274\304N+=\340\320D\275q[\220<\000\350\316\2753\201\243\275\347\257\331\275\244Q\345\275t.\241=\351\250\373\274#W\232=G\371\230=\2131\321=7Q\002\275\236\264\374\275\035\327\265=6;\345=\022\213\261=9.\240=\340\373\375=u5]<\335\241\325=\311\013u\275\210\210\225\275\317\270\'\275\353=\334=V\3244=Y9\306=\301\316T\275\371\232:=\027\000\201\275\255\\\331<5 \355\274\320\006:<\273\323\240=K\033\022\273\036\205\025\273Un\237\2757\225Y=\246\257\344=%\223\343\274\340\035q<\270,\246<+\265^<_n\000\276Z\031\265=\266\267u\2750\314\315\275J\035\367=\263g\301=\351F\334\275n\327%<\303#\277\275\220\352{\275\227M\254=$P\270=\276\321\303\275kn\225\274d\214\306\275\243\034\327\274r\030[\275\302\340\374\275\032\246\314=.\030\351=&|\322\275\265\244\351\2758\335\345=\263\177\336\274K\324*=\273\311\310=\270{\212\275\006\273=\275mR\350\274L/+\275dK\213\275\3364\251\275!x\246=\331\207\211=\262\324\000>`-\302=\377\037`<\256V\035=\271/\204=\"\366\357<\252\013\342\275\253a\305\275\253\330:<9\320\375=\230)b=!C\037\274V\361\340\275\333\200\312\275p\376\306=\266?\320;!\356\200=\266G\221\2749(\210\275(e\231=\377\005\'<p\234_:h\007\357;\223\242\323\275\004\225\362=\"\265\031\275l\210\347<\350m\366\275X\242p\275\033\343\243\275\247\225%\275\033p\031\275\325\274\362;&W\030=$G\323\275\326\351\270\274\341\331g<\231\240m\274\337\355\230=\236\313\260<_B\232=\002Dz\275\013\247\372\274\376O\260;0d/\275\354\344\317=\267h\247\275\304\375\033=\342\006\356;\004\004\226\275\317\374\254\275I=\336=\ne\262\275\240Y\337=\007a\337\275\211\360\302\274r\225\271\274)\007:<\211\246\232=\232\344\024\275\244\301q\274\264\300\347\275\027\261#\272s\031\367<\200\377\355\275\224\277`\275\364kF\275\335\205\364=\222\246\301\275\240\021\254\275\363\374\376=tN>\275+\324n=\317\361\357\275\210\242\335\275\267v+=\322SV=\342\255\010=\335>\376\275\334\303\204\2751\366\264=\356\305\'\274u\t\256=\357e\n=}\n\361=.B\345=\347\\\263\273\322\201\206=\242^\366\275\033\253F=<\302V\275\020\214\307=\372\367\367=\220\232\342=\010d\377=!{\310<(\330\363<c\315\371\275m)\031\275$\304\335=\350-k=\027t\236<,\221\304\274\\\263\312\275\247\3200<\323\033J;\244\312\276\275c\027\005=\222\374\301\275\262\014\217=\304+\220\275\276\0242\275\243|&=|)\356\275<\264\323=X\222 <v;f=\031\233P=\313O\243\274\214\257\370=\260\273}=\375i3=\275\226\264\273\376\225\221=\233-/\275\341g\246\275\311la=Y\350\232\275\246\366\225\275z\032\347=(@\177\275|f\303<&\000\340=\000\014\325\275\244\211\337=d\241\204=\331b\367<\247$\375\275.\224\315<\327\n\177\275\301 \335\275\013>\253<\014\353\367\275\006B\323\275\005\223\356=H\225U=f% =\255b\236\275\270\337\264\275\364\321\304=\206\036\345=\031\274\317\274;)\266=1\202W\274\221\337u\275\350[\355\272\354M\205\275\265\313\"=\221\245\245\274\240`\377=s\304N=-\301T\274\202Vc<g\0138\275\353\003m=:@\375\275\332 \233=\310\010\037=\020\317\214\275\342l\374\275\333\365/=\230\252d=\260\021z<k \217\274K\244\352=U\227\263\275kT\017=Hj\354\274\036J\t\275VS~;\213\211\252<\242r\361;y\301\251\275\333\260\035\275l;*\273\375An=\021\344\252:=\272\342\275\000\256\351\275K\201\273\273\337\213\211=\325\222\262<\367\357\275\275QU\201\275\211\263\265\275\313\362\305\274\354\324U\275\273w\260=\351I\266=L\327\212=\022\233\225=\\\260\202\275\006\007A\275\245\353\361\275T\034\351\275\335>\306\274L\177l\275\r\362v;\337\262\335\275\263ZI\275\240&\363\2733K\323\275\373\346\337=\345;\235\275\032/\206\275]\030\367\275\216\250\264\274\213:\320\275E[\200\275\340\316\316=ZT\201\272\264o_\275V\201\002\275Y\314L\275<l\333=\374Q-=\354\231x<\253\365\223\274Lk\270\275\326;\212=B\326\234\275{\256\231;0\377\222\275b\215\260\274\031\341\301<c\273\313\275\237\346\330=\244Mu;l\221\323\275PQ\255=\030\251\232<o\020\351=L\033\207=7{\213\275\366\250\247<\330\007\246=\031\206\270\274W\337\276\275\006tU\275\357\177\341=\363\350\345\274\252\254\265\275\237g\305=\213ma\275\037\034e=\325\026\313<\2634\365;\323\272\331=\036\372\014=\002i\223\274\3072\332=\353,\225\275;wK=@g\352<9\330B\275\033\332\370\275\327\025\202=\036\r\252<\014\222\251<5\213\244\275\263\002\223<\333`\317<\317\022\334=\301\3054\275\346n\310\275\373\272\215\274\277/\016\274\024\300\216=\235e\000>\246\300\020\275\350>@=2=\361<\003SO\275e\\(\275\352`3\274\236\355\003\275\354y)\275\204\373\333=\"*\230=\201\312K\275\310\301\241\272\026\001\345<@D\263\275b\234\370\275\177-\256\275\362Y\343\275\275\340\260\275%v\305=\330\3168\275v-\356=1\201\373\274\005\225\271=\005\313!\275 \330\024=\321&\366\275\316\277\314=0Yi=\323\376s=)_\000=S!\336\274\305\004\223=\270|\210;\030\367\212\275\200\200L\275t|\235\275\036\220\230=6n\203=U\023\241\274P!\251\275F\035\212\275\232\335\356\274\223\032\273\274\365\272\351<\336\304\035\275\307\211\317\275\205\026\017\275\013\254\363\275\004\007\214\275\330X\225\275\357M\274=\317v&\275\247\036\035\275\342\237]=\317\201\324=\006\320:\275\362h\264\275\373\345\377\2757\340\207\275h]\226\275)\001H<m\314\352\275MMs\275\356=\274\275\334{\363\275|\206U;\377\3161\274\212\035?=\215\342\025\275\354\'\274\274\230\267\342\2752k\350\275\247c9\2717\353\346=\366\000\252=\323\353\250=#\210m=q\020\214\275\372\243x<_\247\247\274\235\315\260=&\t\232\2758\213\206\275\002\177\336\273\005aM=NA\302\275~;\332\274\3443\230=\000\363\225=\304\354\351=\361\024\224=\301\270\353\275\357\372\232\275\220\214\306\275\310\304t<j\230\272<&P\333\274\260\300\343\275R\256\376=\314M\355=\244\352\361\275\355\256\023<.d!\275\247\344\277=H\311\357\2735\377\336=\223\252\365<7\325c\275{\323\333;\016q\370\275\360h\255=b\361\227\275\010*\032\275%\270\220=@\314\302=`O\206=\300\361\024=|.d=?\373`=\177\225\376\274P\236\362\275\351\375]\275\317\243\363\273\251w,=\236,\r<y\346\217\274\253\306R<8\354\377\275\020X\243:\337\314\265=\177\214\343\275\330\022\243\275\247\330\264\274\343\340\301\275\370D\327=d\224\203=\201\270L=\033\3655\275\255\371Q\275T\321\215<\310\267\337=T\\q=?\233\201\275\347\321\000\275\022K\000>\201#\230=Hi \275\240es\274\211\273\350=\225r\204=\314\272*=\335El=\262rV\275\360\251\220\275\242\253\257\275:\033\275\275\377\001I=\343\352\373\275\2658\336\275\247h\\=\341\205\331=\214\255)\275o\264\216\275\215\366\275=\023\343\270\274\244\211\241<\314i_=i\036q<*\343q<B\253\030\274\326\003\232\275\301hz=k\235\225=\375\033\205\273\266\373\303\275\266\252\002\274\3207\036=\243\340R=\\u\262=\321\013F\274SD\300=z \320;\014\177t=\311\360\266\275d\205\020\273\266\242\235;\034d\356\275i\223\323<\201\017\317<\363a\355<\030\034\201<!\324\243=\202`\304\275\271\357t\275\365\243\037<R\322\247=\343\2548<\206\321p\274\312\327\215=\235\261\327=\353\210\005=\2556\244\274Y\r\n\275\222\236\326\275.\022\312\275uY6=\226\255\215<\244\337\013<\234\023\005=^]\355=\275\333\000>\321\233\325\275c\370b=^\246\006\275\225E\020=\343\356\014=\254\245\211\275\340\\\230=\370X\231\275\370M\023=\002\320\230=Yp{=K\3173=5O\351=\202\233\260<\320\321\257=\r:\205\275Gk\300\275>j\367\275H\276\014=\352\240\027\275\275\237\245\275\014(\342<I\343l\275A[\207=\203Dl=jE\214\275_B\246=9Ps=\271a\260\275\313\240\247;l\243\311=7\\\362\275\257\323\360\275o\177h=\n\235\341\273\375U\266\274\364\205p=o!x\275\036\034\370=\315@D<Q_\252=\242\372\257<*\224\325\274\374\375\232=\255\210\010\275\211j\223\275\027\230\314<\370\322\312<\322\354\255\274\250\004\033=\202\231\027<3O\250=@\036\006\275\263\'9=e\032\366\275Y\335\360\275_\004\215\275\301\351Q=\235\252\000>\235?\345\275\256z\263\273O\t\246\275\026d\220=\226\352M=l{\303\272$\315\036=\356\365A=\033i\325\275\265\221\026=\254G\202\273\336\255\235\273\310\371\217\274\302\202\231\274\305\007\337\275\335d\242\275y\326g=q\360\240=\035\022\221<\321\373\267\275\2033\270\273\t\300\333\275\276[8;q\251\'\275?\n<\273\254\213\014=\323M\000\276(*\t\275YL\343=\246B\351\275\260\250\240\275v\'h\274\273_\271=\352z2=\3732\215=\266\310\254\275!\214\217\275\312\033\335=\261\242\005=\350u\366\275Tp\252\275\204\027\376=\322\024\340=\370\2118\275\tK\272\275\254\266\343\275\374\364P=\210\030\346=\346\3332=\270<\247=|v\303=\225<\367;\203\364\216\275\271\206\271\275\212\306O\274\200\000\333<\221\240K=\210\265f=\251\214\205=:\331\347=([\257\275\202\333\261\275\2239\002\2757\261(\275\370t\\\274a\206\r=\276\364\310\275v\303a\275\351\263\245\275nF\201=\004\214\275:\257\027\262=\033\356\\<\234\251\004=H\242\253<(rY=Q\010\322\274\366\272\034\275\212L_<\"y\245=\205\272\323\275\232[\372\275e\366\210\275\260\201\242\275\006\365\252=!\244L\274\326\331\031\275\307\037T=?\r1=\363\t\001<\317\016\336\275\363\271\254\275\036\307k\274Y\256\022\275\373\2005=\305\267\372<\222Vx\275\031\341\010\275\\q\325\274\242\274T\275.%f\275\323\037\324=K\376\256\275\270\222\000>~\026\310=\010G\206=\356\367\257\275XN\370\275\304\356\224\275A+\002=l\371\357=\315\372\260<\245`%\274cC\262=\257\323\340=\306\327\245=.\013\035=<\014\252=U\357A\275\263j\331=\267\226u=*eX<\341\274\205=\017\342\311\275-(>=\\\216\214\274\247\324\302=\225\n\314\275\333\212C\275\365r\200<\376d\324\275/\265\340<\274\330\025=2\037\201=\352\206d\275[<\361=4\023a=_\251|\275\306N\255=ch\243=\305L\307=&]}\275\351-\330\275\3014\266\275V\243\253\275Q\031d\275\277\335M=\207\357\030=\031\337\324\275\227\023\345=C\232\306\275\363\232u=@(\367=\365\023Y=A\276k=\034\237\310\275*\332\252=\215\317o=n\344\320=W/\242<\374\035f=\3317\303\275\300ji=\327\227,<aG ;\256\261\257<J\273\273=\357]\201\275\261\250R=\252~D=\001J\240\274\227z#\274mY\310\275\336\255*=b\206\027\274\240o\253\275QH\201\275\004\020\332\274\032\375\223=\373\325\243\275\307\321\243\275\031e\016=\357\017?\275JZ\274;1\006u=\016;\\=\243z\305=\'{\212\274\021\335%\274\300\277\237=\220\030\270=\032!\300\274\371h\234<\335\245\214\275\217LA=\321\352\316\275\373\225\326\2756\363<;=}E\274Aq\236<\273\373\244<k-\262=3\332\234\274\350\260\267=?\363\346=\327h\364\275\001\204~=\342L\231<\306\n\357\275\276\246\220=+\316\253\271\245\271\330=\256\356\236\275&b\001\276\302U\216\275h\342\217;\"=9=\373\227\270<\"/\363\274\303\001\303=T\020\366;\235\231\n=&\025\324=?T\230=\234sy\272\351\321\344=\221,\265\275\021\327\242=m\023\200\274f\364\256\275{DX\275<3A\275\256\360\334=g\322~=\316\036\223=v\210{\275.\001\006==\205\233=\264\0255\275\370_\376=\216H_\274Q\314\324\275\016\021\203=F\3313\275\253l\325\275\334\031\272<c3\203=\352\342\336\273)\003\262<4\240\201<\253&\356\275\343E(<\'\353\254\2741v\031:E\275\344=j\002<=gO\327=\032\205\016=\331e\2549\320z\267\275uu\313\2754\245\366\274`Z\226=\266\246.;a\226\013\275\353\301\230\275\261\274\315\275\177\331\213=\224u\373\275\253\214\213=\236\240Q\274\244\242u\275\242l\201\274\014B\352\275\260\033\032\2744\301H\275e\014\252\274\010\233\226=\342\340E=\354cV\275g\342\251;t@\245\275\232\014\313=\370Y\264\275j\303\322=Jd\343\275\317\010\300=\314\202\341\2755@\210\275V\227\341=\374X\365\275\222\233\306=Px\235=l\326\342=\345lD\274\313\235\026\275\247\265\227\274\376\323E=\314\034\'\274\243\356\271\275\2413\226\275\262\263\014\275\200\250\202\274\2534C\2732\321\025=\322\331\353\274\033\026a=\205#\r=[\026\206\275pO\322=6]\316=S\002\003\275\260\227\213<G%\375=\211tN\275\375\030C\275\377 \263=\366\302\322=fH\267\275\263\365[\275\264\023\246=\354\022\262=\300n\314\275\376\246!\273`\004\327=Q\357\270=iz\"\275N\013\253\275\344:\347\275\347\370\266\274\177z\321\274[D\226=\314\224m=\257\240W=\000\340\233\273\314w\365={8\354=Q\336\311=9\177\361\275\334n\270:@\224c\275O\330\022=\370\347\257\272\302U\301\275M\2030\275Ch\221=\254\352L\275,\202v=\310P\246\275\244\241\271=_\025\265;z\310\237\275\260\267\325=\010\177C\273D\026Y=*\004\205\274_F\r=_m\313\275\024\254\\\275k\201\257\274\355d\013\275\254(\331\275\247 \305;T~\304\273\210D\247\275\3072\222\273\236\314\023\275\377\037\215=\331n\360:0\327\255\275\177\tg=;3\336;.\026\206=\321M\231\275\350\316\313\275f\206\225=:\324\275<p\363\304=\330~\204<\205MU\274\\}\372\275>d\213\275E\017\234=\372BI=uS\370=rq\365\275\377W\026\274\326\340\000>\220\303\345=\373\334h<\227\366<=\362k\226\275\325T\363=\231\036U=\035\236j\275(q\335=\360\264\\=\214\303\333=8a\023\275\005\352t\275b/\271\275\370~\251=}\336\264\2756\351\351\275\023\236\346=\250\034\240=\010\320\351=?\262w=\204@&\275\236&\025\275\246*\251\275\276\333\252=\000\263\033\275z\252\233\275~j]\274B\373)=\372\234\306=\330_f\274\325[4\275\250\350\303\275J\320\322;\232\263\202\275l;\312=7\340Z<\022\201\377;4>\373\275\005*\255\275Tj\261<\222b\305\274VE\354=\213\326\341\275\014\251\265\275\'\226\221\275?\005\200\275r\036\230=71\362=\203;\314={\262\213=\311\344L=\004\224\203=}\276\214=\351k\003\275~\342\265=~\304\032\275\305V\341=m\264\330=\332\253?\273\272s\363=mK\360=\275fa=\372w\365\275P\016\363=\265!0=G(\350=\013\357\"\275\263\356\215\275(\254\320\274\375\250\252\275<2\346==\315\271\275\204\242\266=H\206>=\010\370%\275\226\363\r\2758K\357=\004\220\036\275\212\310\361\274\2550\200\275\337\322\360=$\023C\275\005c)\275\026&\215=\364\361s\274\320\341\343=\252\207\016:\3312_=\345,8<\246\336\255=\224\322\215;\003\036\014=c\225\032=h\350\257=\022\361\314<-M3\275\213 =\275\277>l:o\201\026\275\354\315\276<\324\252\373\275\217\036\001\276<\006\001>\3449\206\275.\351\277=\363\366\002\275]\254\271<p\300\367=\201\226\235\275\203\276\373\275\236\034\231=\347~\301\275\3778\377\275mn\037\275n\321\372=\252T\375=\214\232p=\300\377\233=z!\215\274\304\223\333\275\326DO\273\222v\360\274w\204<\275\337E\303\275\267\320\370=\331.\323=\324J*<t\261l=\330n\311=5\016\363<\237(\210=rN\267=\302)\334=\240S\324\275QR\345\274#\206Q\2752\007\364\275\354\014d=\023\016\336;\357\310\251=~\230_=h\313E=\026m\322=\337V\262\275\377\022\337=\300<\257=\0107\037\275\\f\214=\300\232\325=m9\344=\007`[\275k\263\324<\230d$=\363m\360\2759\236\311=d0\001\276\217\201\211\275\222\331\270\274\tX\244\275\017(p\275@t\371=\2741\311=\022\240\354\275\254]\342\275\245\nZ\274-f\303=\337\362X\275\271\330\357\2758\037y\273N\227\315\275\266z\\\275\360b\366={D\002\275\222A\251\275\303^\261\275\353\017\237\273\010\311\005<\303\317\352=Uy\225\275\332R\244=\215\022\231\275jnM\275Z\021\216\275\371Y\233=i\333\254\275\210\306\247=\343\nG\275\253\260\232\275%\310]9\322\"\344\275\363MF;\206fl\275\274\315\334\274\027T\303=\332\371\n\275\322\332\371\274\3676\251=\311\303\346\275;^\263\274\343L\271\275qp\233;\252\256\275\275\266\207e\274\r\305\203=w%\250\2756\"\213\273\323o\273\275\323\274\304;\221\310\365\275\017\007\024\275S\352\202<\266P\227\274\035\251\246\2756&\001\274\306_\323\274\216@\340==\263J=^\312\035\275\027\332\341\275n&4\274\226;\314\272\265@\261\275A\207n=V\013\334=\204z\033\275N\020<=\261L\247=?M\334=1\236\314\275Q\232\352<\007A\322\274\022V,\275\032\356\245<:S\317=\227n\325=|\335\250\275\010c\336=\374\330\254\274\"7\025\275)\014\245<\n>o\275\205\272u\274f\\\210\275\026\020\200=I\254\265<e20\273\337\246\351=U:\026=\003S\371\275\300\020\'=A_==qZ\370=\245&\221\275\231O\304\275\007\224\273\275\364\014\213=\214\307\264=\311\013\260\275\222&\275=\231\363\250=(l\375=hD\262<\357\314\021\274#;\256\275TcK=\200\"\363\275\264\335\356\274\227s\256=o\037s=\252\210\257\274\216\013\335\275\356\244$=?\303\315\275\231*\223\274\260\214\367\275_\310L=\235Jk\275\222f\203\275\262\373\303\274\220\375.<pG\375\275j\331\344=\370\035\210\275E\"\035=\300\251\374\273\345\253\360<\225=\351\273\314\300\377=\340\000\352=\325m\315\275.\003\330;\265T\333\275\335\273\223\275&\221\312<\017\016x\275\010\203\000=\212-\373=c!\216\275\212\020\020\275\232\"4\275\232\203l\275\331\033\377\274\240\224\240\274\3743\325=\371\027\276\275\'\332\262=\027\317_<\3743\355=\016\236\222=\361\013\231=V\244\365=\334\0071<M\277=\275\260\2374=\273\305\013\273b\003\356=\232\nv\273yl\002=\350\213\216=\223\356s\275,r\001>\216\002\227=^\364&=\337<\341=\300\020\356\275\347\203\244=1h\314;\254\262\221\275<\342\221=J\014\245= q\"=\201\211\335\275;\321\260\275^\345?\275\354\276\201=^P\023\275\035\277z\275\335\260\372\275>>\370=\317%I<6\306\217\275\335af<\003q\247\275?R\360=\374`\234=\252\311\303<\265B\215=\017\252\370=V\270\356\274|\363o\275\210\241\264\275\322\311L\275\274\"\373=\227\177\241\275\265\213&\275#<\321;p\3165\275=;X<;\355\202<\220\276\321=\\\221d\275\364`\315\275\357J\340\275\331$_=\365\236K\274\253EU=\342P\340\275\302\370\333=\301\327-\275\330\033\350<\217\373\017=\343\321i\275.bf=\351\326e=\r\212}\275\231\371)=\310\305\345=\270\247\331=\367B\343=\300\024\240\273\334\'8\2756\032\335\275h\005S=\377:\365=\322\275%=\204TW<%Ti\275\'\327\365\275\027\246\313=\353%\327\275\307\372\030=\2215Q\275DU\274\275\371-\010=@\351{\275]9t\275\375\003\017;\375}\376=\376mt<\177\316\177\275\226\r\244<\247d\022\275\201\310\232\275\301\313\233\275\221\337\243\275\225\266\350=\261\345\206\273\004\327\222\275)\271\351=\014\tL=a\321\341=\371\377G\274\350\216\240\273\330\337\370<@i\260=\230B\264\274P5o=\323\346\004<\010|\204=\353\177\326\275\016\346N\275\340\372O\275>P<=)\177\367\272\037\256\275\275\276:\003;\237\227\270\275\007\255\206\274n\251w\275]l\200=*=\200;t37=\037_\373\275\254\211\225\274\225\343M=7|\242=\222\352k\2754\246\343\275\371\272\255=\325\273\221<\306Y\375=k\301\375\275\300\025\331\275\355\374@=\3622\263=\373\231\210\275\223\035h=\001\340C\275X\251\241=\013\3778\275\264M\270=`+\334=\356\331\304=q?\352<N\325\321<\013A.\275.\226\244\275:\"e<\001e\273\275\324\332\t\275\022 \275=H\010\270=\346X\257\275\331\252O==\001\312=\245^\316=\327X\247\275icL\275\034\\\023=\033\333\225;.]\216<w\r\317=\275!/=\251X\316=t\232W\275\313\307\351;F\304\302=\203\354\216\275\334\360\227=\367Y\245=\366\247\201=p\363\366<\036\221\354=\266f\272;\005\300F\271\274\316\336\275B\235\200<4i\334\275\362\003\214\275\326\350a\275\t\256Q\275A\030\363=\265\270\353;F\247\201\2752q\357\274\236\025U=U\376j=\006(\334<lUo\275HP\275<\223\275\367=\035\000.\275c\235\225</\234\325=&p\343\274\201k\203<\216\370\270\275\307\240\270=g\372Y=VS\362=\034\010\330\274\351\200b\275\221\322\317=\316\204\320\275\325\361\331\275$\n\373\275e\204\203\274\333\303\362=2\361\340\275\341\211\204\275\2631\334\275\325*\331=I\237\364\274\272\226D=\304\n\332=Q\332\227\275\302\244o\275\303\276\371=\343kK=\256\"\364;j\247\377;\330\021\247=jy\241=\020Fl\271l\366q\274\010\027\243\275\352\313p<\010vu\275r\007\307\274\200&\005=\230\364\340=F\343\245\275-\2252\275dF\371=\005\\\310\274\304\321\314=\377\021\310\27560\000>\234\214\372;\027\335\202=\017\324\230=\267\340\360=\207\246\032\275\246\017\307\275N\023^\275\321\"\373\275\220\"5\275\240\204\010\275\023\240\334;\365x\257\274\275!\302\275\3602\265\275\205\276\260\274V\241\203<:\314.<3\303u\2750\202\366=\244\rw<.\266\321\275\346{\266;\334\207\201=\306S&\275\251\203\366<\303\200\340\273!\010\346\275\342\262\013\275.oD\275\374\016\335=\224.\275=i\221\354=\354~Z\275M)\340=P\357b=\032\236\266\275\031\340\275\275>#\231\2749\336\037=\307hT=\322\024\335=\211W\320=cb\234=&[\331\275\206+\336=\275\364\376\275\334\267@:B/\211\275\230\240\036\275\312\242\264=\336g\337<\236\315\321=\005\262\244=,\310@\274\372\326\247;qk\274=$\311r\275\211k\267=b\347\265\275\035\204\027=%.\351=\316\255\304=\207{S=6\000\247=\375\246\376\275\r\301\316<\207\304\302=X\004\323=a\236\270\2750\201\300\275p\215%=\215\357\375\274`\303\314\275\247=_\274H\252\000\276\270\210\031<\300\210\345<(\227\326\275\014\366\350=M\340\220=\033j\230=.\275\223\275\355\"\330\275\"\204S=l\355\326\275po\243\275\276u\206\274\361\372\324=)O\241\275\267\345\242\275\001[\263=-g\270<\037\333\";\301\326==\277\375\272=t\256c\275\021\325\"=\326\337\017\275\213a\001>4R\311=<n\243<\372\371\266\272\346<a<\324\026\323=$\212\310=\017n\030\275P\257\351\274\326\021\225\275\203\342\002=\264\336\201=+KV\275\300e\256=:\324\235\274\200~\007<k\273\276\275H\t\363\275A>\213\275_\232C=\353 \367\274k\325\253=\203\354\333=\316\020\326=V\260\277\275\324\035\223\275a\341\002\275\345W;\275@\353\312=\202\230\345=\336\374\246=\253o\246\274!2\236=\350\305\341;\002\262\325=\016\244\257=\252\226j=<\216\220\275\200\006\316<\244\241\323\275\'-\331=\237\200\255\275\364\371\277\275\2354\243\274\214d>=\346B\212=E\303\345\275\\\307\232\274\374\373\210=U\347I\274\rX\201\275\244F,=T|\327\275!\244\272\275\333~\261=\311\036\312\273\336\002\374\275r/\324\275\264\\\213=+\377\231;\253\350\343=\024]\260\275o*\206\275\350p\360\275\263\307\177\274\364o\247=p\236\251\275\206\014\301\275\224[\035\275_\254,\275\200V\264=.\272\313\275\335CB=\353f\274=I\214\213\275\224\221%<9\213\336\275\032\361\356\275:\257\322\275b\212\361<\001\335\276\274\000\211\243\274X\371\323\275\354\313\300\274\233\365\215=\364\231\211<\370*\032=F\027G\274\234\267\027\275\366\2758=\256[R\275,\226>\275\250,_\275E\214\314\275\005/\r<\002\307\311\275\2455\206=*>\277=\231\260\226=ez\350\275\033\371\346\274n\2317<^\213\347\275I\010\263\275\215\"\230\274F:\031=\t\202j\275\354\3434=\031\313\273=\367\212\177=o\177\001>V\233\233\275du\316\275\214\022\026\275p\"\210=\372K\340=t!\316=\030G\354=-A\000\276\023!\013=\212\231i\274\227\0210\274\026\264\362;F\366\315<G=h=\233\251\314<\313M\351=^\331e\275\022I\010<\342\360w<\030\rc=\0106\311\274{z\276<\212\2447=\027S\304\275(\202\231=\017\354\326\275\325\357\035:\246\235\271\274\3442\251=3\346\373\275\027v\275=y\300-\273\305\034\322\275)s\336\274\251F\023=\373\221\252=\241_\213\275\016&\267=\3339\370\275\203\177\235<\270K\317\272\343\247~\2752\331\264\275\311\277\253=\027\212\322=\001\313\356\274\016p4\274;xX<3C\371\275g#\373=:c{=\'\n\356\275\\\340B\275\377\353T\275w\266\273\275am\253<\254\377\002\275`\'\234=;\000\323=\272\326\265=+\347\242\274\223T\340\273t\002\003=j\026\354\275P-\'\274\257\323\362\275\322\206P\274\013O\350\275w\354Q;\340\243\360={\361\266<w\245\377\274\211Z\325\275\024\312\204<s@\200=\251J\210=\004\025\275<U\214\243\274\251r\001\275\007\205\207\275\001v\363\274\302\330!\272\277\223\255\274\013\211#=\257\356\203=\320\"\224=\256\010\010\275\366\226\031\275\335\017\251=\300\007w=\245\253\270<\270v\030=y$\252=\314[\310\275\242.\223\275Y\272\267=\263\317\263=T\033\215=\356y\003=\306;K=aP\241=\311\301>\274\203\272\326\274e\377\361\2759L\020<\354\241\365\275\321\035\211=Q.\200\274\314\033\024\275\362\022]=\350T\302\275`c\224=H\226f=\370\033H\275Z\362\210=F4*=\263y=\275\253\236\010=\234?x\275)\360\215\275K\257\304=6\'\353=/\322\311=\271-\363\275W\263p=OJ\216\274f\223F\275@e\200\275\232G\013\274\320\023\314=kb\314\274\203`7\274\333\300\357\275\241\213\237\275\267\026\364<T9\247\274Y\\\221=&C\253=\273s\257:\021\0020\274\"\312`=c\016\230\275\365+\342=\"\354\n<\236\276\372\275]*\254\275\337M\351<\317\\s\274\235\276_=\001\342\204=\006\341\311\274\352\326\224<W\205\000>W\020\230=\177D\376=\303o\007<\351\257\256\275N#\300=\2765\272\275\024\254A=v\313\335\274y_\335\275o\206\200\275\346\024\246<:*\204=_4\325\275\344\006\214=Uv\267\274&\377\010\275\210C\204\275\223\014\327<\220\207\261\275\n\225]\275@\\\213\275\025\323\226\275 L\245\275\353{\301=\363:s\275\267\r\240\275\035\204\374\2754\315\231\2752!\202=|\212z\275\2079\201=mJ\242\274f\275 =\270\033\201=\202E\327\275\303\251b;p\320\277\275\342\037\220=w\251Y=\346<\005\275*\250==z\220O\275\200\230\205\274[L\335\275V[f=\205\'\000\276\005e\245;\340\323\371=\301\353\364=\342\213w\2753\033\226=z\220\350\275\377\014\271\275k\272\227\275\216\210\314=\215DG=\273\262Y\2744\212\233\275\314\233\200\2751\377#\275/\347\315<\234v\245<\247^Q=\271\377\231=\367\357\205\275O\257\220\275pL\225\275\223\254\301=r\035o<\307L;=I2\327=\314\203\300:\022C\272<t\004\216=f\377\271=O:w\275\370e\222\275D\235\276\275r79\275\033u\234=\377\330\276;\237\273\n\275\256^\202<\327\375N\275\324\330\262\275\347D\304\274p\344\315\275\355\257\332<\304\320\331\275$\276\255;Ph\225\275\3261\373\275P%\240\275>\265[=\001i\201\275\036\032a\275\271\230\023=J\325\237<\234\036\353\275\221Tr=\t|\370=\340\347\345\275%y\253=2F\000\276\221{\327\275}\233\334<\2528\327\273$\216\267\275\306\315}\275\001y\376=)\277`\275\030\237\254\275\243\027\333\2755\374\002=\325I\214=g\356\310\275W\315\000\276\3779\213=G\022%<\342\337\327=)\326\374<d\214\226=u\2713<\201\240?;\332\022q=\032\342\204\275\0278]=\024s\331\273\371P\325\275t\334\025\2734\231\276\275\030\243\335=aR\232\2754v\272;4\027\266\274\'c\363\275bU\0229\215\022\364\274\375\254\303\2756\0223;\227\245\257=\346\033\\\274\216\003g=\377=\300=\335\0208=L\350/\2759j\356\274\345\213\336\272\216\315\217\275H\2662=]\"&=QL\356\275\177a\256\275\326\001\251\275VP\256\275`\367\271\275\322\311\374\274j\005\021=\017\204\332\275\"\335\346\275\253\336m\275\371\367l=\230\270\013=\367C\223<\247is\275\013x\010=\347\267\204\275#\321\266\274\347c\323=S8\326=V\005I=/\313\342=c\354\357<\363\023\330=\377Xb\274>V\007\275\333CZ=-\206\320\275@\256+;\230\006w\275\302\303\003\275\304\333\225\275\007\375g;u\233\016<\224\026A<\326h\245\275\032W1;\206\341\320=Z<\211==^\205\275U\275\314=B\207==\'\310\314\275\351Q\276\274\272\n\331=\270\355\306=drf\275\033A\261\274<\235\361\274\177v\335\275Js7=]P\212\275\367c\370\273>\363\262=`\304\323=w\320\017=/\233\222;\232#\351=\274\277Y=\324\275\306\275\304x\367\275h\021\324\275\307\234\344=g\000\'=\314_\204=V|\351\275\010_\202\275z$\366;B\304\366\275\375\244\277\275\270s\330\275k:~\274\277D\266=}\005\255\274\310\230\231;\243\263\364\275\032\347\252\2749\210w=\027y_<F\275G\275\255\2275\275j$\034\275\262\\\264\275bd\001>w\033\362\275v\337\252=\347\221\333;\305~\370=G\032\022\275_\267\306=\2674\311\275\301\322\327\275lk\264\275\352<\236\275,\202B=yY><\030\031\342\275\367\262y=b\346\310\275\211\213\247\275\362\202(9T!\274\274\016\372\306\275\264\010\267=Ao\337\275\335!\375\275\230\250h\275\357QW=\033.\267\275\'l\211\274\267N\r\275\214#U=\030q\001\276\237\342Z=|\204L=\225\n\252=\'i\356\275\260\277\244=\332\362\216\275*\"\367=\277\3736=1\265\371\275=&\355\275\321\004P=.\022\302=\177T\342=\252TG=\236\004\354=\267\331\016\275G\3618=\301h6=\001\244\225\275pMP\273A\307\226\274\306\260\002=\t\242\301\2752\006\334=\273\360\346<\273\222\327\274\227s<\275\026\370\252=\177A\263=\364=\002\275\023\250\333\274\336fq=\345\234\251=\320\3657=\236\007&<\253\352\301\275\341)\375<Gq<\274E\005\231\275\326i\244\275\362b\000\276\"\201\342=\017]&\275!d_=~\304\300<\001\354\245;\320rr\273\362\237\270\275r+`\275\317\025\343\274\200\325\222\275\311\016<;\021T`\275\277]4\275\246\030\322\275`N\354<\375\361\324=\263\311?\275\247\005a\274\372\260\344;\354]\270\275\343&\364\274q\312k\274<7\245=\1772\327=\350Dr=Z\260\273\273\260m\305=\302ZR=I,\217\274\026\356\020=\312T\316=\3337\300\275i<\230\271\342B\001>\227\007>\275a\334x\275r\353\345=e\274\321<\022\037\r=-\026\r=3\\\320\275Fz\210=\324\300\236\273pW\217\275\251\232\354\274XZ\027;K\037\025\274Ej\267\275Mc\035=\207l7\275J\255\347\274]\016\351<\023A\274=d\254k\275\275\321?\275@\227\202=\232\247\000>&F\241=l\315\333=\351\\\375=\340\256#<\204\320\261=\344:\264\274\037\'\245=f\023\201\275\343\362\347\275^\244x\274\253\254\204\275~\240Z=p\275\315<Wk\330=7\356{\274\302\340\347\274\307\215\317\275\255[\346\274>4\262\275\325\375\345=\270\r\324\275\251a\274=P\212O\273\017yd=\340O^\274~\3236\275K=\225\275v\204\352\275\255\217\256=d)|<<\354\177;\030\374\326<\356\265\232\275/\257G\275\322\203\225=l\264\252=\001\377\215\275\313E\243=W\026\321\275d\003\247=\214(1=\216n\345=\212\365\261\274X\304\025\275\244^\254=\345\366\300=\025t\260\275\272/u\275],L=-\370\361\275t\222@\274Z\312*\275\276\230\301\275x\306\345\275\031u\036=c>\"=\326B\320=\263)k=.\014\\=\271<\353\274Cr\372<\245\2050\275\013\356\313\274\370iC=\202\336\005\274\004\333x=\212\303\266\273\206\240\234=\372\365/\275\305\245\316<\331\276\231=Z3\344\274\3047\370\274\220#A\273\352\204\335\275@l\005\275Cht\275q%\347= \035\\=\3073\362=\256\230\373=dn\366<\005\322\364\274<\003\346\274+\020\247<\020\300\255=\264\025\257=\271#\251\275\204\n\372\274\266\013,\275\013/\337\275\206\356f=(JH=C\247\3539}\211\323\274_\227\212\275\323\361\027=W\327\362=\2649\236=\360_\256=]\313\"\275GB\321\273\355\371\247\275\016\234d=\264:\213\274\274~\205=)\231\273=\353\217k=n\237\371=\374\247\023</\367\274\275\023\332\213=!\016X\275\212\230\242=\201\270\203\275\273\236\312\274W|;;\370\236\002= g\270\275\235j\343=\'\317\346<\376&\333<tp\340=\377\026\301=a\004\202\274\\>\241\275\350\351G=\244a\276\275\341g\023\275\344t\331\275mO\331=\204\317R\2750\273\321=\030\221m\275,\227\260=\2062\312=_\034.=\213!\347<X\002\335\275\263\t\252\275l\010\320<\221\372\343=7f,=^\223K=\177\\\270\275\244@T=(\363\377\275\217\372\313<J\257\037=c\346n={\236\310=,%\377\275 \034\326<\355\274\332=gs\222=\215\034\005\274\270\260\331\274\354\233\236=\254\253\344\275\206\327\260\275\257\224\332=e\353\037\275\tp\301<\277\014F\274Y\nL= \276\261=\225\320\036=\231\232\030\275sE\030\275\316\010\367=\325:\003\274\025\303\372\271\233\323\327\275\3772\340=\t\322\000>\266\315\013=\320\245\254=\252\025\356\275\032\301\336=\\\336\326=\240#H=\024\035\365=\263\206\241=\275C\376=\031\333\202\275;P\272\274\nE\245=\312\340\340=&N5=\354:2=O+\263\2744\334\325\275M\035\367<z\227\251=\341\027\251\275p}\371\274\226\3443\275\324J\360=c\350\273\274\275\273\210=n\251\304\275\013\340$=\244\225:=\271\032E=\261>\307<N\267\004=\246s\340\275\374\257\247\272\006w\315\275\374%\263=UH\366=\335\347M\275\335m\013<\352\276X\274F\004\201=/\253\351\275\023;\367\275:<\205\274\205\346\216\275\326\351\301=\245\215\333<\215\014?\275:\365q=\227\225\372\274;\235\272\275qzT;\035\327>9v\204\222\275\022\273P=\332L\035=\324o\262\275>A\235\275\305\373\224\275!\360\221=\027l\207=T2\264=O\034\212\274{\222\322\275\203\335\323=\314\320\334\2755\330\365\275}\t\000\276\307\271\266;\264\271\374=U\241\345\275\237!/\275\371\230\206\275\341K\210;\302\002\326\274\3710\211\275@\202\212=k\3209\275\227\266\234=v\266\373\275\307\253+=\334\274\035<\3120\255=\310\323\210:\267\265\354=}\261\366\275\275\331\216\2756\303\325\275\224\024\262\275\256\024\231\275Y\023\340\275\002\215\305\274(\020\032\275t#q=\356\333\205=bPb=\311\214\251\275\335?b\275V\235\340\275\034\272]=\374\300\250\275\307\013\371\275\274\266b\275\223\205\261\275\351\013\361<\3078\336\275W\322\273\275v\036\340\275\232J\222\274D\235\336\272\034{\021\275!p\013=\240!\234\275l\311\344\275O\210\317\275\345\310\274=` \330\274:VO\275\370A4=\226:\337\275\246\303\345=\025Nm\275\365\214O9\262S\252\275\240\351\227\275t\225\212=\227X\254=\3174\334;\346?W\275\212q\224\274\325d\245<\032\005\244<\332\250\334=u\n@\275\207\347\034<\264\010\307=\200 8=\206\371\317=\'\253\215\275\263\374\320\275\271\304\354\273`\n\353=\340\353\312\275\336\007c\275\nGY\275\037\312\264\275^b\326=\346\352\345\275\024\374!=\022\240Z\2757\032\356\2757O\030\273@\231\210= >S=\032d\365\275Cy\260=\006j^<\257\345\255=D\2013=\037\354-=\325 \362\2750*\201=\276i\321<\230\254~<\022\360H\275;\216\356=Bs\013=\251\236\247\275\202\306\302=\300\277\226\2750XR<\326\312[\275\303\341\322\273\224Zb\2752Y\351=\000\311F\275\271\200\322\275zp\013\274\324\237\223=V{\221\275\222\034\245=\377?\340=G\254\270=\301\\D=\005d\260\274\350\332\306\275\342\233\000\276\224\345r\275\031\214\000>R\"\263=\022\026&\275\357\216\350\275\361B\324\2742-\013\275\217\274\274=\330\335\333<\276\227\262\274\336\021\327\275\347\327A=g\267\355=\225\306\007=K\324\256\275\'\335\242\275\235\350\341\275A>\370;\363a\014\275\035\034\001\276\013\374\347\275rA\363=,7\023\275 \371\032=\334\244:\274\250\334\327=\277\354I\275X0\367\275\001Tn=\325\313v\274]\320\323=\235\322\351=\267L\355=\230\207\262=\256\023\261\275\254-\313<\206T\363=\237\243\007\274/\014\314\274\357\246\020\275\374\253u\274\342\256N=\233\313\327<~V\343=\317\333\307\275\004\213U\275\361f\315=\314e\250\275\003\367\344=\026b\001\276\314v\347=\351l\264\275y4q=x\223\316\275>\371\345\275\334\360\260\275\'m\221=\225\276w=\372\264\314=kpC\275B\271m\275\'\265\315=\212\013\222\2755L\246\2759%\230=\242\230\235=h\3718\274\232\373\001\275Rs%\275\313.\261<\252\262I\273B\351\366=\177t\022=\017\323%=\212~\341=\212~\351\274\2213\256;`*\274=\021\360z\275\237\3155\275\377\177Z<\261W8\275\273L\332\275\001.\335\275\365$\206<\242\317\264=\035\230\332\275\256\361\205\275\255\033\210\275Rh\326<\370\237\212\275\327b\335\275\014\347\234\275\361\212\000\276rY\340\275\023\023\255=v\260\273=\212\003\235=\327j\230\275\001y<<~\220\234\2756\276\013=y\325\200=\357v6=\226i\242=\307\232\211\275\262\277\257:w\373j=b\033\025=o\211\375\273\307\276`\2725D\024\274%\311\225<\343\356\257;\331I\240\274\371u\233\275(\037\300\274(\201*=\243\377\264=\262\251\360=\305 d=\"k4=$D\352\275y4\311\274\371\021\252\275\365\246\025=\007\026\230=o\007\026\275z\037\256\275\034\215u<h`\323\275PnS\275\260v\300\275S\255!=\025\235\214=o\'\376=U\246\207\275\225\010\265=r\353\335<nj\312\275\225:\034<M\342\t=\320\315\245\274\370\265\023\274\214{\035=\331\212D=\260\360`=\277y\301=\357\216\337\275V9\351=\032\356\314=\014\214q\274*\244S\275#\255\013\275{\337\234\274\326+\300<\270V\020\275\2512{\275^\277s\275]\210/=Nr\253=k \327=\277\236R\275\266\2316=Bq\305\275+!7=\006b?<\331)\214=\304\324\220\275\375\312\232;\350i\230<\013\274\340\275\373j\335=Cm\274=\367l\365\275\0179\302\274\215\341\227=\240\274\310\274\340z\233=\233O\271\274\324\037\313=9\000\366\275>\020o\275\221K\024<t\211\212\275\321\367\251=\r\304\\=\211\2531\272\304\221z\275\231\273\225\273\035\025K\275+\356\353=\232\370F<<M\256\275\207\016\r\275\276\376\333\275I=?\275\nl==\355\312\252;\304\310\350;\344N\354=\024~\364=\355/D\275\231*\373\274\356\002\347=\004\327\273=P\310\205=#\313\334\275\'t\340\275U5\222\275\354;\236=\021\212)=e\310\222<\317*\331\275\001y4<;\240\"<-\003\276\274\021\303\350\275\230=\317\275\024\263\210\275\357bI\275U\241\177\275BK\215\2759\217\346\275\347\373\361<\3651\342=\222\000\210;\234SW=`\207\270\274\371Ia=\357?u=\356\177i<\007\007s=>\204y=\000I\366\2756\221\340\275\253Z\212=\004\2124=\301x\353<\002\250\215\275\0206\340\273\261\321K= \\\376\275\242(z=\024\026s\275\032\r\237\275\262n\207=\305S\233\275\37546=\226\352{\275P~\313\275\3256\243<\355\333}\2750*{=\236\301J\275U\226\337=\300D\235\275\344\354\326\274\\U\351\2756\340_<\316\341\252\27527\240<\245l\213=n\243\364=Tg\202=\261\350\207\275\030\217\304=\200\353\261\275\321i\274\2751]\\=\334j?\275n\241\033=\211\372\302=\307\'X=$\034\377<\013\272\264=\0260\332=\364\004r\274>\2749=8\307\374\2751\0259\275<\367r\274\306C<\273\241\200\211=\354\000\367=\345C@;\320\263\221\275U\237Y<\021\214\226\275\026 x\275\333\202\343\2752?.\275\0074\237\274\361\230\221<\325\272\245=W\343\234=z@\251\275\037.\354=\034\226\346\27533\214=\233\233\373\275P\262\332=\\\312>\275\177\275\271\275e\222\253\274\203_\356=\'\375\205=\254+\370=/|\347\275)E\302\275\207$\205=b\277\336=\305\037\r\275X\025\261=\016s\r=S\377\214=\250lq=\013b\274=\361\347\033\2756\336C=\252Z\017=\246f\220=\352\345\010\274(\336\024\275\240\037\232\275\215\3536=\to\333<NNK<\347\237\300=\'\007s\275\331\232\374\275[\252\000>N\302\273\275\274\353\245:\310\266\222\273\251\356\242\275>\206\n=Z\246H=\207+\024\275\305\017.\275\261l\002\275\003\331\207\275\000\346\231\275\253\320\314=\311\200\304=\255\210\347\275_\245O=\272\2367=$3\326=\177v\206\275p\211\305=|3\300=\274\373\265\275rM\350<\231x\344\274gs\306=0\337\224\274#\271\241\275\362\250\005=\246{\236=l\376\272=p\256\337\275\206\307\216\274\006V\333\272\351\246/\275}+\356\2758\206\235\274L\253\345\275/\200\276=x\000\217\275\315\374\031<\2410\325\275\014\310\305\275\307\211\325=\277\304\246\275E\005\264\275\027\030\247\275\317,\001\276\211\377\266=wy\252\275\020\320\221\275G\032\002\274+I\310\275\300\032\237\275\351\221V=A\217\354\274\004\035,\275\303,\003=\232\332+\275\226\261\304\275\223\024\253=\277\240\264\275\301\353[\275D\331\231\273M\216(=h<\242=c\003\242\275\036j\223=\207p\000<Q\r\277=\232\001\214\275\"\323\345=AQT=\376\226\352\275=L\267\275\234*\331\275\367vS\275.\"o\275\242\205\204\275x+\320\275;@\013\275\243-\200\275\035K\022\273Z\343\353\275\022\2479=(y\212=\342\330\216:\035\255\331=@\337\202\274\350d\233\275ko\247=`\211\233\275R(\266\275\226\324\346=\330\200s=\235(\244\275j\313\000=MX\264<\330\204Q\275\250\347\341\274!\351@<\334\375\204\275\034\177\255\275e\036\373\275\215\260\361=?\253\327\275;\363j\275\302\322\257\275Q\337\214\275\204\355\373=\334Z2=(\277\216=I\321a<\021\334\360\275\340\360\222\2755\331\346\274N]\330\275\247l\317\275r\223(\274\374`\025\273\020\263C\275\344\204\375\274\373\n\241\275\314\017 \274\232\272\362;5\207\372<\332~\272=\366{\252\275Z\303\302\275\340\230K=\257d\260\275\333\010\346\275h\337\310\275\234\336\375\275\203ML=\352\2451\275\356\227E=\226\021\343=\242\223\231\275?Q\020=-\320\375=X:\370<4\240\313<\030\375\226\275\353 \253=6\212\234=\025\225]\275\355+\311=\277\252V\275\350\204\324\275T\357\210=\264\256,=\234\247\267=\332\014\336\275Z\250\302\275\242\363\351<pX\345==\0106\275;?\344\275}\340\007\273\233\304\226\275 \333\352<\343\370\335\275\203#W=\236n\367=\356Jy\275\"\377\275<\000\344\371\273}\266\001=\307\363\271\275\371%,\275V\247\340\274\037\304\365\273Z\321e\275\254\021\226\274@\227\335\275[\r\312=\317}\263\275\330\"\203=\3748%=\211\366\211<$\252\023\273\317\036\217\275\025\016\026<\202Ao=\317\307\000\276\262\345\207=\320l\230\275\200\210\001<\006\361\243\275\265\357\230\275\362\340\371\274L@w=s\340a=WV\204\275\t\237_\274Bb\370\275|uV=\264\324\330=x\310\"=y\332\362=O\325\345=f\243\235\275&\033\312=y\"\262;\342\343U=g\214\242\275s%>\275\332X\311\275\347\355\230\275\337L\373=\223\333\313\275?[\222<+\017\227=R\333\276=\226R\211\275\371#\261\275\341\316\262\274\210\020\353=\016\373\223\275\311\306\301=[|\207=\250B\210\275KR\254=\3714\223=\31608\275\340\316\203\274\255P#=\377\263\356=\265\312\'\275\271<+=p\201\371\274\367%8\274l\310\260\275\343\003[=0.\326\275\306H\377\2749{\237\274\"\320\014=\2778\034\275\375K\036\272\031s\033=j\n\370\274`h\351\275\2526\347\275\334.\275\275~~R=\220:\325\275\335\242\212=\260\246\322<\223\0076=\301\326\036=\333\013\200=\031*M\275:?\314=\3324T=j18\275\240\262\342\275T\305\276=h\2367\2732\214q;\024\255y=h\367\203\274\326\020\313\275%\275\224\275\325\000\314=\272\202\214\275F\270\300<\227m\355\274\217\207\341\275\272(\376\273xu\216\274\2262)\275\202\260%=4Y\364\275\345\r\353=\\\367\367\274\265\225\030=xDK\273\023\343^\275&9\217\274Rc\343\274eM~=\265X\360=\227\271\246\275+N\310\275\242\353\321;\001\242&=Z,\326=W5r=N\310\267\275h\003\274\274\375g\374;\307>\000\276\361\244\304\274LE$=H\255\352=Y\0232<\001\344B<\005/\234\275\311\225\237=\3416\323\275\302Tt\275\017x\231\274y\357@\275\034\3616\275Y\334\364\275\340\312\306\275\005`\345\275\217\374\234\275\034\034\004\275b\314\347=xd-=S\321\257=\312\220\236\275CEm\275\304/u=5\247\211\275\305\206q\274*\253c<)\'\n=\245\371\313\275\270\3013\274\212\311h\275\321\224\"=\227\241\224<\010pZ\275\216}\233=\251*\351=TF\272<\255-\031\275\322\373\272\275\353\261\214=\"\235\274<\363\004\207=\262\2623\272x&\232=\224J\262\275p$\230\272\370\305\304\275t\225\227=\021\"\267<\223\311\224\275\231W\354;/\270\001=Sp\377=\275\306~<6\251\314\275\001X\030<-\277\226=\304\'\300\275g\257\230=\331@\312\275\253\362\016=\227\2653<\"\370\322\275\367\301\274\275\332SH\274\310b\360\275\316\305?=\206\010\212\274ol\335\275.\243\235=\356S\277<\362\214\250\275v\020\202\275:g&\274K=x\274\263\250k=\247]\234<\354\034\360=/>\344\274\023\207\264\274[~\306\275\340\246\004\275S\265\027<b\255\300;\241\023r\274\245\317\214=\310\235]<\360\370\357\275w\251\331=\374\316\260=?\025\000\276\261\315A<:\242\n\275\241\347q\275@!s=\340\265\337\274\320U4\2749d\247<\032*\210\275\351e\203=\317CR<\372\312\240=jK\010<\343C\240\275V:\366<t\343\302=s\260\323<\026\351\256\275\037g\240\275\333c\325\275<V\372=\252=\203<\214\331\340\275\203\350\205=\256-\372\274\277\221\300=n\212\002=F\034\352=\257\351\026\274i\352\240<\003e\226\275\346\010\374</%~\275\333\272\204=\013\353\234=cTZ=g\027\225<\223\272\374=\215\r\326\275\262\324\277<\361|\034=\363\336\275<\335]\370=L\'{\274\"\306\355=\323U\227\275U\036\t=\254\n\010;\002\301V=\335\210\355=k\211\377\275\200\347\252\275\244\rR\275s`\005\275w\317\202=\275j\310\2756?\001>\222\273\364\275\006\324\214\275J\267q=Y\033\004\274t8\317\275\274G\254<9s\312=\324\014\214\275\227\376n<n\315j\275W\275\346=\257\323\337=\211\r\267\275\275\335\357\275Ck\234\275o&\035\275?]\010\275\003\000\333<\307\346\013<.\007\321\275\237\023\031\275{\321\266\275\350\033\364=Jd\236=\335\'\"=\3179L\275 \275w\274\330\363^=o:\207\275\2355\034\275\006\023\345\267\331\216\375=\223OK=\267(}<@\260\315\275h\205\247=\007\224\214\275r+\322\275\272\367\017\275\377\235J\275=\003\272<=ga=_\277/\275t\255\365\273\374\302\203\275\232\347\327<\303\322\220=$u\333\275\340\025;\274T\245j\275~\032\350=\310\210\330=\255\002\213\275K\333\035\275~\355\343=\341\r\366\275\213\274\245\275\305\030\353=l)\353\275\3058|\275\226\\2<\317\265M\274ij\373<\272\244\246=\226\245\230\272\034\337\206\2754\344\375:\222\350\331=P\033\266\275&\327\232=d\313\334=\372\022\256=\200B\000\2769\355\334\275L\240\312=v.\244=0\221\276<\003\323\375=\313\347-\274\361\224\367=\244\216\327=uvO\275\255\356\n=#\006^;!\025\347=\274\203\327=\330\007\237<sv\246;b\307\234\275\306!\210=V<\301=\2765\n\274\270\375\343\274N\367\323<v\372*\275I\236\034<Jx\004\275mt\225\275\332z\304\275yG\351\275\304\004O=\020I\313\275j:\216=\036f\001\276k>\300=\n\320\227\275\371\341\311<YL\030=\304\232\317\275\366\347\320\273\230H\234<\355\205\273\275\326(\233\275A\007 =\351g\207\275dJ\310\275\"w_=\362\321\261=@\346\361=;\362Z=\312\277\341\275\022\205+<\211\224\221=F\303\253\274\231\356\017;\341\234\2108\332\020g\275\242\021S<\367`\217\275K;\'\275\272{\030\274\025\024\315=\365\221\201;\350\177\000\276\\-\272=z}\215=\2227\242\274\224\n\352<[o\271\275&\252\335\275\007\346\300\275\020\355\367=\331Y#=\225\332\332\275y\212S<]\177\022<\300\3102\275\227\3560=&!\340\272\362B`<\230\215\310\275\335\036\275=u\271\207=\036OH=\361\374\005<\301V\336=\271$\332<\375j\001>C5\316\2734w\000>\\\300\010\275\014\303,;\331P\225\275\365\2621\275\341\343\244=\026\347\343\274XE\201\275@\222\351=\231\034\022\275T\233\024\273?\2404\275\201M%\275-\376\226=\014O&=\262*\271=m;\003\275q\261y=\200\223{\275\352\235,=\003\320\370<n\274\277\275V*A\275_\316\377\275#\245p=\332\014\036=1c\374\274\352\325h\275\333c\335\2750\342\254=\310C\214\275Y\370\254=\022\260\217\274xb\376\275\365#\235\274\030\244\223\275\257O\255\275A\371Y\275\230!\315\275@\376\241<C\227\322\274\027\225\201\275\226\311\341\275\2624\273;z\231k=r\023\364<\306\002^<Q\255\367<+\226\245=*5=\275\031\036U\275(R\323\275\035\350\311\275\225\225\371\274[\205\267\275~\231\020<\re\346<\250\004\324\275B\221%=k\273\230=}\001\035<\253\372\014=\243\037\340\274b}!\273`D\204=\210 O=\007\001;\275\203\006p=z8\000>\213\210\253=\267\021\001\276C\272 <@\364Q\274|\t\006=PD\203\275@}\334\275[m\347\275\263\357E\275\006\003\261\275\242\002v=\235\217\247\275\377\t\256=s\035O<7\030\377\275\n\335\212=\315\266\317\275\026c\245\275\372M\274\275\232i\222=\210\"\362=\021\201\230\273\350\240&\275\327\007\256\275\223\316\223=\340\201\350\275\023n\000\275\272\213\233\275\263\227\326=0\356\203;gD\305\275\"I\300\275\"J\274\275\377\370\251\275\013\264\377\275\2759\274\275n\264\202\275\030H\002=\353k\206=JL\266=V\337\371\275\315\215\245<AJ\230\275\375a\351<&\270Q\275)\031\005\275\3141\362=Tz\220=i<\362\274_!\263=\371Vp=E.\277=\343.\340=\217D\202\275\357\243)\275\004{\324=s\345\226\2750\301\220=+\376\257=\354\024@<\263\376\000\276\223?\211<\3241`=\270 A<\347\365D<\321]\022=\362\300P\275\227\324\266=nX\333=\037\247\346=\177B\211=p\025\350=H^7=\207\024W\275E\035\361\275\266\253\322=\227\303\350=\357+\365\275\"\313\302\275\260M\204=\\\206\221=.\002\306\275\226\004\223\275B\027\251\275\033\340<\275H\021\300\275[\313\262=ax\377=\237\252;=\004A\217<\341]n\275\355\353\257=\325\354\225=l\257\356\2739\347\206=+\357\376\275\016\010\250<)\021\217=\322m\233=\207\025\254\275\256hN=\371Y\304=\376oc<\324\344J\275\313$\033=>s\026=;\031v\2756@\367\275y\260\255\275\331\014\244=\2362G=\271\247\211\274\210:\232\27301\276\275+\307\021\275\361q\325=@D?=\202\277\330:D\021\354=X7h\275\331o\023=\243G\345\275b\320\354=!?(\275\305\247\271=6\370\333=\026\312\204<\270N\244=\365\204\217=}\222\271\275C\206\241=\346J(\273n\321:\275\256=\021<J\037\025=v\300m\275!\272Z\273\202Y\005\275\336\211\254\274\206\014\316=\250\272\003\274\326c2=\376\372\230\275\351\247\323\275S\177\333\275\2046\324\273\351s\357\275l\267\220=B\302\276\275\322\243\365\275c\277f\275\212\2335\275\332\0274\274A/A\275>jn\275\030\350\250=j\026\005;\270\3053\274\374Z\301\275\330\354\212<pqU\275`*\204=0e\304\273\370q\373\274z\221\232=\333p\252\275\253F;\273\276I\255\275\362w\247\274w\tH=\333I\372\275k\224\210\275\345\217\230\275M|&;:\330\200\274\350\261\336=\336\254\250=\003\252\313\275\tU\322=\354\014l\275}\"\271\275\217\266\010<CW\310\275\300\372\t=N\262\354\275>\004\323\274\303\3576\275\266\240#\275\255\366\001=b\357\304=\rG\373=},\250\275U\020\216=P\007\000>\316\363\222\275\216%\260\275cU\354\275\270\027\213=\235xU\275\2710\016\2751\305G=\367D\026\275k\036\274\275\200PH\273\016m\031\275xt\336\275A\326E\274dO\000\276\272-\243=%\320Z=h6\364=\264\231\346<\263\301\253=a\347\243\275\237\302\223;\370\016\323\275e:\310\275\252|t\275Ox\200\274\275D\244<va\323=_\000J\2752\014\204=,\350\\\275\007\245\311=\027y\253<\307\241\230=\003\322\344\275\000\314X\275\017\203\211=\220\215\215=\362\244\344<\237]\303=\373\202\205<94W<Q&\332\275\037\347\302\275\006\1775\275V>\305=\232\275\324\275\322\010j\273\027\374\256\275\025\346\224\275\332\335\242\275\373x\347<\302\032k\275\340\037\377\275M\223\234=N2 \275u\363\260\275\212\300[=\333\320\220\274\007\032\273\275&[\236=?\350X\275\200\025\272\273\000\325m=\213\373\017\275\002\324\247\275s\n\000=\006P\273\275;\253\001\275\025\005\254=\265\352\346\275\344\305E=\023\033q\275n\265\001<Z\234\236<\200\331 \274}\220`=d\022X=\3012H=\327\024\302\275m#\230=y\247\205<\276\014.\275\212\200_\275\326\276z=1\217\336\274\224\224\301<\031\035\214=\3723u\274&M\337\275\274\000\237\275\025H\227=%&w=}\240\r=\257\004\333\275\306Fw;Y|\312=\352L\365\275j\331\226=\227s\303=L\223\201\275{\240n\275\0255\262\275\267\023\327\275\250\374\244<\223\247@\275\343G\r\275\002<\272\275wV\007=l%\225<\000\301\246\275k1\270\275\267\326\n=\r\234\311\274~\310\232\275\230\221\277\273i\211\304=\331\212\231=!Gy\275\233!\371\275\233\340\000>3\"\020=)o\321\275`\017\242\275x\375\204=\303\374g<A\006^\275\3000\277=\372\207\374\275\312s;=\211\262\333\275\203K\206=\031W\271\275\227\330\325\275\207)\225=\236\010N=P\303\375=\003\037\220\274\364\332\310;\027\\\177<mU\212\274\262\t\206\275\347U\325\275\017;\337=\2608.=;\021\363\275\360h\314\275\204Y\237=9\206\315=\2549\204\275\367\250\312\275\r\302\311\275\177L\330\275\267\205\322\275f\332\355=5\231\267\274\301\353\371<\034\253\277=\365\311\267<\3028\233\275,\004\310\275\037\351\r=\200\237b\275\231\306\271=\301~\023=\265\243V=\366-9;\252\225\203\2753\213\215;\275\346]\275\023\306\035\274\247Z\241\275\274\354\207=\274\245\365=\324A\203<_\017.=J\306W\274_\302\343\275|\211g\275K\310\263\2752,\207=\n\033g\275\212\231\367\275\265\0023=\2238\206\275!,\333=J\253p\2740_I\275K\255d\275\274\014j\274\031_\213=d6\267\275@\306 \274E!\312=\304\265\277\275\302\226\263=\355\032Z=\264O\212\275\222+\312\275\350)/\275\004\373Y\274T\213\365\275\371V\334\275\211u\264=Z\326\225<\315\240\267\274eS\313\275\t*\344\275\214\372\216\274\277c\277=\311\331\340\273\251\025\013<X\340\377=\314\232\345\275\266\231\246\275\"&\307=K\031\360\275\222Mc\275\247G7\275J+_=K\265>={\245@;[\003\303\275\334J\371\274\027\030\367\275\355\257,<\021\313\237\275Gv\262\275\354\326\330\275\010\204\202=\207\346l=\327\023\324\275\262\\\357=\371na\273\250\362\223\272\304\032\220=N)V=r\306\223\275lA\223=\341\026\210\275\360h\211=wQM\275C\326\367=GH\323=\304\217\374=\2419\322\275\362f\361\275/\003A<\2249A;\3722O\275r\261\340<!&\026\275j\246\265\275\177FC=\346\030}=\360D\023=\312\031\035\275a\327\244<\332\3472\274\004\013\262\275B\026_=/\330\235=\352kp\274\371\357\376=\225\362\223;8\250\370=\332\261\220\275\007n^\274\367\340f=fZ\250\275?\3302=O\036:\275J\214\320=\2660=\275\177\022\331=[\246\253\275\251\0138\273\2754\352=?&\337<-\343\317=^\027\350:\217\t\206\275\321\331|<\006\272?\275O\275\352\275H\205\215=p\0079<\331rr\275o\006q=\226\232\307<X\nK=V\361o\275z\275s\2758S\n=\224\356\216<-<\t\275\370\216\n=\300\202\022\275\216^\226\275$z0\274\321\211P\273>a\233\275\274\211\253=\214\232\300\275\327Cv\275\251\314\264<\377\263\237=~e\202=\256\024=\275?\321\377=\213P\314\275&.D=`iK=\243B\376=\214\210C=J\2613\273\332\346\262=\024.\314=\344\231\344\275\314fX\275\033m\323\275\261v\305;\334^J=\230\002e=}\227\364=\263\326\253;Z85\275.\2147=hl\267\273u\246\264=\246<\315<k\272]<U3\340=P\004b=\017\266/\275\201\014\037\275\345\277\311\275\236\302j<8\032\267\273\260B\221=1-V=\032@+;\021A\362\275,V\010=\275\007\275\275:t\274\275X$\355=\342\334\373=M\370\341\275\024_\364=\272Z\203\275\300;;=\222\004\317=!\366\200<\274\030\273\275E\262X\275\313\347\351=\202$\256=\243ee=\235\013\"=\366\206\347=J\366\362=\357\014b<\313\322\275=\361\337\300\275\310Q\213<\336I\270\275]\377\217=O\212T<R\316\226\274\034h=\275\376GZ=\253\270\325=\202\226\257=q\345\377=\367\022\"=\371\307\226=\312Q\245\275\322\203\243=Q\210\360<\367\"c=\n\216=\275\305\005\357\275\276wl;\242\324\205=\356\271\r\275N\240\000=\026\021g\275\"\211\277<\251\320\341<\270\213v=\000K_=\013h\370=Np/\274^e\275=\215%\323=\"\265\225=\032*\360\274\223\272\350\274\021\347\353\273\237O\036;j\205\233=0Zd\273\022\0378\2756\226\341=|\200\366\275\177\210e\273\017 \356=\343Q\254=\300g\312\275M\007\263={\314\031=\002\346O={\375}\275\375\375\243=\240\334\351\273\336\351\261\275\317\357\322<8\303\234\274\tMA\274\314\357\000\276\025 \310=_\257\306<}\315O\275\222N\336=\024\275\224\275\036\237\373=\323\376;\274\351\257\355\275\234\315\366\273\324\262\335\274\213\225W=\001S|\274\377K\262\274u6\253<I\242\364=\367\032\251<Jk\005\275\303A\201=E \207\275\013\214\341<\007\304\214\274K\347\373\275x\321}\275-\366\355=\205`\221\273\362\242\224\275\354\275-=\361\001\231\275\005B\035\275\265*\224<x\202\341\275+\221\307\275\3064\346=\233\305 \275]^==U T\274 \242\002;\017\"\355=G2k=H\000`=J\016Z\275~\004\242\274\207\031\234\275\362\006\331<\346\244\357=\372\033\257=\337P\034\275\343\216\027\275\232E`=\352\334\342\274\227\001\311;\210\262\016\275\005\277\300\275 -\376<\003\310;=1x\200\275X\316\"<l\327\334=n\327!=\301a\307\275\240(4\275\327o\350=\243\2046;\207\014\215\275\331\357\037=\010v+=\034\206v=*w\024=N\260\007\275\341\352\r\275\347\237\312=\tOe<\nF\254;\005\327\000\276\331|;\275q\\}\275\r\365\355=\203(}=\220\230\222\274\300\306\020=\300\260\216=b\004\245=S\351\336\275\217\234\231=\"u\340\275\310\262\315\275\322x\001\276\003\212\237<\\\013B=0c\312\275E\233\323=\330\273q\274Bt\022;\371\237\377=\211,\272=g\221\205\275\"X!\275\007\317v\275w\r\363=\2333x\274&\237Z\275\004\'\305=A\025g\275\027\321\231\275\311\360\250\275\332\320\215=\031*\320=n*\211\273\211.\264\275\274\006\316\2751}y\275\345]\325\275\215\202\220;r\311\360\275\002\344\256\274QU\255;-)\215=\\\000\312\272\276\370\226=]\315q\275\213\255\320=\226G5\275\232\255W\275\010\033\335=\264\"\222<\'N.\275F)\255=O\312\234\275s\263\260\274\003\003\342=\374\253\037<y)(\275LB\212=\374\016\244=\346mp\275\"\222\027\275\323\314\336\275\311\347\357\275\365\3742=<\265\333\275\364V\367\275\371\221h=\210\341\266=\332\362r=\002\177\034;\376ig\275\036X\270=\253\224\255<u\210\333=\373G\205\275!\273\217\275\274\020\244\275\201\255\327=Pv\216\273\243f\261\274\"\224h\275TW\273<\371N\250\275\373\344\307=in\343\270\226x)=0\361\000\276l\370@=cg\362=%\t\205\275\320\227\227\275L\301\031\275ph\213\273\364\224\320=2[\377\275\004\255\036\275\031\347\254\275y\302\277=F)\324\275\303q\305=M\245B\274\233\200\242\275\2610\337\275\214\025\314=\216\024\333=@\346\314\275\211^D\275\215p\234\275`\204\206\274x\026\312=)]\350;\313g\324=7\3273=\247e\304\274\335\353h=m\250v=\252\201>\275\351\370\000>\003\rH\274;\001\365<\036\211\215\274-\273\251=\352\372\347\275\025\\\036=\316m\322\275\375\204\202=\026\370\314=9\t\313=X\n\277;\247\020(=\342\373N\2751\007\274=d\320,\275\203\214\014:[G\225=\214/e\275\200\343\024\274\233&\244=\353d\212\275?\324\333=\221\320\340;D^\240\275\005\216\004\275\240\005\334=\265\372Z<E(\215\274A\306\221=\341VB<iu\004=A\317\372\275z\207k\275\362\207\372\275T\215\365\271\022\211\177\274\311\010\244\274\215\241b\274\332\216\231\275a\035\000>_\376\370=5G\272=K\000\255\275\301\211\362\275\252\273\022<\262\2259\274\222\017@\275\210@\000\276\370\242\241=\371\247\212=\270\354\235\275\265DB\2755B\235\275+\031\373=4s\347=W@{\275\202*F\275<}T\274\005\317,\275\006\036\257\272\243\376\302\275\343\355\323\275\2111\245\275]\221\021\274\222y(\273\r\266\344\275\320\264\261=\276\242\355<\272\256\211\274\004\371\230\274\3550@=\324\351\334=z\243\333=]\021\227\275z6\006\275*\031\255\275\n\004!=\023\323\300=\342KH<`b\273<cV\001\276\365\237\325\2759\307\262\275\240\306Q\275\034\270\215\275\343\233\032\275\016\370t\274\"\334\222\275\305\302\244\275\006\333\250=8\305\225\275\323\301%=\006h\235=\022t\205\275\325c?\274\254\300=\275^o\265\275:\235\240=ak\307=\315\026\244=Q\336\300=o\301\337=.\004\273\275\031\241\357\275X+\250=W\341\305\275\025\331\274=\314\221\224\272\233\307\000>W\362\204\275\247q\353\275]v\306\275\330\370\350<\036J\000=n\255\202\2731\202\342<\3606q=5\2202\275\340\233\016\275\\!\364\274\023\363f\275\2259t=\275&\266= \236\245\275\215Eb<\'\016j\275\216\223\202\275\211\376\372\275g\002\233=#\263Y\275\ra\240<\327Y\027\275\033\205\313<\367j\270=\360\263\231\275}\274\324\275\356\330\213\274\rF\326\273\234\254\206\275\"\246\240=\203\365\264=\265N\240=\024\244F=\313\247M=\202\323C=\335\220R\275\271 @\275\363\362\341=\347\013b=\002\014\246\273\304\277\245\275\357\215\355=\r~\021=\227X\374=\036\020\372\275\214\232\022=\310\310\376<\216\323W\275Dwy\275\"\342\241=+\236\360\275&B\201=?,i\273\237\3720\275p\305\362\275v\353\364\275\242\350O=\337\031\246\274\352\353\276\275\344\021\001=i\331::\344\016\304\274\331\233\363\275\013\317\254=\207x\235\275\032\2477\275\246=\351\275hR\317\275w@\332<#\357\020=w\013\276=.\260b\274\217\341\314\275\226\323\037=\223\347\261\274 \363\223=[C\035\274\363\367P\275G1\371=m\177\243=S\276\211\275H\221\256=\\\325\001\275)l\033=^\215\312=\325\352\224<\000\037\374\274\033\234\250\275\253\026\265=\307e\317\275\335@\340<\036\331\210;\215\354\230=3\321\253=l\335\313\275\275\322\375\275\3626o<\3238X=\241\014>\275\227\t\367\275+ \\\275\207\352d<\t\320\210=C4\\=|\347\276=a\361\234<\'G\370=\000\211\244\2751u\270\275t\357\264=\375\367\230=\034\346\355=J\312\204\275L\304\336\275\371\335\251\274\2204\277\275\2244!\274\341\360*=\n\215T\275(\216\320\275EK><\250\271\207\275\207\033\367=\367\215\360=\326\264N=\334\352\266\275\235\340F\275t\\\303\273\231#\351\274\013\336\214=\267\246N\274\222\344^\275\031\331\214=\240\205\216=\033$\004=\342\204\353=1\273o=\365\262\006<\023\324\210\275\360\021\257:\006[\023=}[\372\275\177N\205\275#t\212=DC\302\275\031\035\220\275\354\362\270\275\337a\313=dj\350\275\236\374\227=\230G\326;\325\301\263\275\200\233\256=\302)\001\276\002RX\275\"v\275\275f\230\266<i*\314\275\215\314*\275\177q\030=\225\345\363=Y\274\267=\267\010y=M\332\254=\2348\255\272\306\250\323\274\334N\204\275\222z\212;2a\221=\331\2713\275f\245\366\275\251\311\353\275\"\007\232=n0\275=\305\321\222=\025\350F<P\322)\275g4\241;\327Q\037=r\013\304\275L\374\335\275\240\322\312=\274LX=\243\224\004=X\247\310\275\275\024==\235\261#=\357\310\301=-\360\353=\201\013\317=t\352\200:\201\273\377\275\245<\353\275\313>|=\370\3416=~\034\024\275\326`\005\274D\235\227<\344\354\370\275K\002\212\275\2310\027\274\031\017\245=\177\005\244\275\335\316\213\275\326\341\r\275\240\270\300=\027\250\275=\250\201\206\275Va\221=\340\246\263\275\375\000\244=\335P\272\275\'\356\371\274=T-<:\327X\275\217\277^\275Lal<b#\010<0\353\253\275\261\223\327\274X/\"\275\016\247\226=\022\311h\275_\331\372=\0160\321<]^\345=hh\272=\265\3724\275!\004\252=h\022\024\275?\334\306\275W\315\227=\260Vj\275\026\035\306\275[Z\363=\204\3028=\244]\224=\272#\224=\013x\320\275\034t\332=\267\302\360==\322\363=\230\254\000\276\374\244\337=\204^\001=nJ\211\275z<\356={\274\346\275\007*\233\275\222k\024\275h\227\343\275\031\276\371\275G\2531\274\324X>\273\025\3332=8{\305\275\376)\316\275\031\323_=\345\307H<<%\375\275\270\035\242=\320_\032\275r\243\357\275\340l\231\275>\017\361=OZ\276<f\326/=\341\261o\275C\325\310\275R\\\014\274\211.>\274|\224\221\275\301\300\322=k\333\312=x\276\227\275\270\346\363\275\362\316\034=\361\207\236=#\343\276=\tOx=6*\333;\000\004\211=\000\177\365\275\262\210\234<\204s\355<\354\005\332=\034\345\326\275j\025\031=\017\315\007\275ul\240\275\346\'\236=F\225\254=\356\214\t=D6\340\275\335\213\241\275c\315M;\373(\'=+\366\000>s@\345\275$tw\275\213}%=\305\330\221\275V\226(\272X\222\324\275\000\342\211=\216$!\275\3562\030\274\326Pv\275\301h\270=4YZ\275`F\370\275L\214U=\340[.=\340\320\034=\317Wc\275\216X\224=\236\374R=\216`\377\275ByD\275n\224\n\275\232BE=\033\010C\274+E\305\275\223\346\307=\r\036\336:\357\212e\274\005Ig\274\247\260?=\240\020\236=4\267Y\275\345`\263\275\322\212\300\275\270\t\211\275\307\353d\275\3510\253\275w\375\256\274$N\315\275Y,\031=\322n\000\276\375\333\227\275$\022\376\275;.\001\276\022\306\365\274\250T\226\275\323\312\335<\374\364\322\274Fj;\275\264\216\361\2747\036\315=\223;\377=\361\254\255<\244\216\252\274\251\324\357=\302\324\234=\262Zs\274fD\226=\342+\345=\306\316\251\275P>\326\275b%\323\275\232\347\367\274uCg\275\314!\306=V3R\275\354\344\275\274\025\356?=\256\222\216\275\304\256\021<|\242\345=\271(\324\275\t}\221\275\277(U=U3\342<.\241\264=\220U\247\275\320\366h\275\226i}=\271\331\347\275\272R\353:q\272\272;2\363\003\275yc\225=]*\003=\344\374J\274F\005\373\274?\222\306=)\331U\275\373e\001\276\340\325\344=\232\246\345=`H\214=\355\004\254\275\266\314\277\275\260\357\247\275[\334C<:\032\345\275o\273\311=\017\252\000>\225\350U\275P+\253\275\370F.:\235:l\271\361\300\306=_\216\270=\007\373{=\235Q\357=\326+\231\275 S@\275\232\336E=FR\256=\\\3004\275/\377\304=o\356-=\364Gg\275\207\003\266=\351\227\372\274\177\211#\274\247N\231\275c\357\237\275\207k\332\274^w\333<\322\265\311=\367W\216\275+\244\217=\203$\207=\307o\313\2734l\200\275\027\243\332=x\013\315=c\231\035\275\235\207\277=\230/\257=&\177\217\275jc\335<\230z;<X\351\000>aoA\2752\213\322\275\037\344\314=C\323\'=zT\216=\\\355\335=|\277\343\275\r\361!=\212Q\221;.\251\351=D3\364\275\332\216\205<\241\342\250\275#X0=\262\363\324=5\351\341=\210\310\324=r\001h\275f\'\207\275\005\177O=\335\022\375=\023\356\272;\257\210\341=uz\241=PS\331<S\271\206\275\264q\355=U\014<\275\264\267\226=\006\252\312\275\177\362-<\305\023~=\305\266\246=^\317\214\274\266~\221=\245\216\275\275\026\2268\275\216\375G\274)f\234\275\322\222\210\273)(R\275\316\027\303=\"\200)\274G\256\264\275\237H\273\2749\031\376=\3025\311=\210V\202={4.=4D\252=n\323\t\275e\265\312=\361_6<w\2359=\323J-=\233\212\332\274\340\034p\275Rj\255=M\3539=\304\014\337\275Eo\260\275\315\017\217<\275X\327\275\322i\027\275>\372\"=\225\035\002=\371\022\327\274:N\333=m\t\364<bUw\275\2539\322;\376\245\234==Ms=\233P\251=\207k$\275\232\372\223=\307>\273:\266k\227\275{4)=]V\326\275=}\275=\274\014\361\274s\233\346\275\237\243\323<\261E\276\275\375\222\261;^&\373<?]9\2756qO\273$\370\221\275$\253\263\275\036\'x\275T\210\333\275\312\230\370\273?\331\314<\363v\014\275\260j\021\275\267\027H\275k\0322=\243\265\220\274\003!\241=\255S\360=\301\"\327\275\272\007V=DO\367\275\375\214\213=\341\251F\275#\234\203=\264XM\275]\377O\2757}b:\364\302\330=\203DD\274\303\243\360\275>\t\254;\345\302\330=\371\216K\274\372\332\347=\003\345\027\275B\237\024=\200\252U<>\001\262;\345O\241\275\320P\315=\357\316\346\274i\360\332\275\376\030u=o\010\331=\'n\001\276\265\243\276=H\371\222\274l?\317=\250\017\342<\331\313\347=\302S\306\274$\307\243<\03587<\276F\356=,\203\000><$\311=\025\313\360\275\2525\373=j\321\314=\254\017\264\275\250T\252\275@\370\374\274\301\254\354\275\227b\253=F\273M=B\2278\274\366\337X=hc\261<\2322F<Vd/;\034\010\366=\242?\261\275\304\304b<L\016\216\275u\345\374\275\261\026\001>\327\234\022;MU\223=/\377\330\275\223C\273\275\261U\203=\030\315\314\275\317\240\017=-R\231=k\\\226=\300\014\361\274\206\365\301\273:\250\304\275\254F_=\005\010\n\274\255\355@\275\261\274\n\272\227\314\325\275\336\307\355=\275j,\274\342\217\333\275[+\234\275\250|\221<\214~\341\275\371\225\225\275\037\273m=\226\303D\275\230/\307=\372\033\254\275%\205\000>\027\323@\2742\272F\275\245KS<&\264\000>B\014h\275I+\227\275I5\001\275\321P]\273\334]>=E{\213=D.\317\274\374\245\231=8\361\005\275\217+\216=\025?\214\274@\032\317=\320\200\321<\325\305_<#\260`=\027WG\2756\210\200\275\321\036\357= j\231=\301J\347=H\t\250=\364\310\360<W\210\205\275h\027\353=\234%\324\274\006\247\344\275iJ\264\274!\021\206=\222\0038\275\213m(=\375\360\372\274?/\206\274}\330S=\357!\367\275\310\036[\275\340\307n=\307\353\276=\026\312\302\274\302\306@=\315\363\360\275\211\375\031\275\353\206\304=\204<\351=\253a\320\275\317]\217\275+f(=\372\'\263\274_\334\253=R\206\232=\234\351|=\010,P\275/\350\201\275\231{\213<\344u\216\275\211\303\314\274\030c\244=\327\205\251\275-7\253=]\007\303=\321\332\376=\260.\373<Y3\226=\312\223\342=\023\231\316<\177\217\025\273\242\317\202=\004<1=\2247\366\275dj\\=G\377=\272\303\210\211=\327\357\372=4\214\352=rzo=\332}t\275\366\242\277\275\300s\300=\217\265\343\2759\200\205\275\236W\201\275\353\364\236\275\343-\036\274\322\361\n=yC%\275lb\324=\345\030\\=w\177\351\275f\366\206\275S\'\r\2751$\002=\324\376B\275\353W\376\275\362^\201\275\254\332\273=\204\354\210\274q<{\275\367\010\273=aD\204=\374l\315\274\017\314\343\275WG\274=\301\333\300=S3\206=\314\021\222\273\177x<=\357\366\376<U\274\336\275(\271\375\275\0335\336\275\347\031\002\274u\016\264\272\326Q\375=c\233\322\275\341\017\001>6\"\313\275\236\2111\271K\203\000\276\303\334#\275Q9N;\210\367\240<\376\210\207=p\373C=\352\310\262\275\262\r\240\275\200\222\233=\224*\025\275\017\221\303\275\324Ap=\3214\330=/Au=+\202l\275\262\210\217=\325;\005=\"\003\346\275\274\013~\275\205\031\013\275\003+\227=\207h\201=h.F\271KA\037<\026\211\301\274\005A\372<s^\224\275\245\227\266=SJ2\275\306_}\274\367)\273\275\370[\271<h\"*\275\010\307\226=O$\013=\025^_=\314\221\330\272\360-\375\275\2666|\275>?\205< \237\216\275\t@e\274;\370\022=[\302\262\275\366^\242<X\300\251=\201\237\247\275mF\"\275\331u\320=5\232\204=\220\321\315\273D3\007=K4\303\274\210\255\254=\3178\210=S\257\355\275\365\302\251\274\265V/\274\352Af=4\307\257=\306r\246\274\363\371\351=\244y\320=\232\200t\275\340\014\363\275r\374H\275\201J\000=\354A\326<\2727\022<\363\340\203<\367!\352\275\200^\363<\"\377\360\275\365Uj=<\030\371=\303\321\261\275\277\340\223\275\321\273\201\275\3377\366\274o=\256=\035\311M=\324\271==\374\357\373=\211\237\330\275\272%|=\261x\246\275Q\344\005=\301\251<=\323\230\224=Z\326\355<\t\036\246\275T;\335\275\3039\354=2k\273={\375\341=\300\272\365=\205R\366\275\"\330\375=,tY\274\300\244\331=qk\262\275\'m\367<\003\0262=\214!>=\'`\030=\356>s=\254L\276=\230\002\273\275H\202U\275\315\260\302=\274\273\350=\016\037\211=\246\222\217=\227\227%;\230\003\231=\301\346\230;/\265\216=\374aY\275\023\242\276=\311\024\237=\227\254H\275\021+`\275\367V\227=m\330\370\275\307P\314=+\3175;8B\225<\3359\177\275\256\242\374\275\352\372\261\275\245\030\226\275\307\r\261=\323\031\321\275\014\"a<\321\250\310=\266\331\220\275R}z=95\217=\302\370U=\322\206\234=\347\006\240\275\377\036\235=\\\374}=\267\304\267=\234\250+=\201\206V\274\256\013\251=\353\317\314=\017\320\235=0d\363;\273(\322\275o\341:=u\265\311\275\"\024\314=\356%_\275V\221\231\275\276\225\272=\272\005\275\275H.]=wc\372=\375\304\213<\363\2159\275;\363\333\275Sb\360=\255\236\360=\025w\344=<\316\351\274-\016\360=\"\255*\274\003\2432\275\004\267\000>\"\177\374\275\203\247\317=Os\310=S\315\343;fN\203<d\334\360=\276\214\007\2754\357\372\275+c\373\273\372\301\346\275H1\365\274\205\002\321\274D\310\351\275\355k\336<\n>\336\27534\t\275=\256q\275\2308\323<V\316y\275\343M\001=[8\242=\t\306g=\n\223\330\275\007\204\t=\243{\275\275W^\371\272\317\252\336=\322\350\353=\306\216 \275\021\332\203=\371\277\276=\341\200Y\275Q\002\235\275\r\226\376=\301\2617=\257iI=I\222\005\275\370\250\356\275\032Y\352=\270_L\275\366\276\021\274in\257=7\031\213=t\267\013=\2032\244\274IL\366=\"\350\322;~\356\274\275a\3215=\327?\347\275\3649\337\275T\261-\275\016\031l\274\354\356\252\275\007{.=w]\217=)6\367=\364\241\362=\227i\326\273\220EQ<\217\244\335\275\311\246\263\275\222\265E:\311]\224\275X\333\375=\253\231X<\254\215\032\270\201\265\233\275u)\201=\371P\225=\251\2074<\237%(\275\300\322\344\275\315\251 \275\376\021\006\275\260\0221=B\035\033\274\033&\'=+\324\201=\032\231\254\275\277\201>\275Z\311W=Q\225E=^eg=\306zv=\311\033\315\275\277\371\024\275\257n\307=\345\366\257=@R\031\275\225\033\344\275\002A\355\275(\276\375\275v\r\365\275xn\016<\022%\371=\243\237\204=\272\246k\274\321\304q\273\361\010\214=\3355\357\274\025\353\276=[\252\366\275\307\202\017=Z\r\214\275\300/\236\274\232\213V\275Gg\212=)&F\275\035\025\357=\223L(=\272\233I\274Bc\324=\360C\370\275\264k\333\275Z\246t\275vT\244<\331\301\224=e\227\345=M~\330\2754~\027=\"\357\206\275\344\004_\275\372\301\241=\215%\033<\332\250*\275W\376\322={k\223\275\373\016M\275TF\247=T[_\275dz\2759\000\033\234\273\317\267\372;t\361\230=\307\221\253\275\2251\253\275f\230\353\275\027v\346<K\376\230<\350n\230\274d}\267:\206\031k\275:\257\225=\tp\000\276x\202;\275\325t\344;\006\257\333=\353\2007=]\262\211=r\272\004=\2716A<\212\347\351=dh?=\330j\261\272\200\003\237\275\336$\303\275\271\320\262<\010\332c\275\201\035\014\275}\314{\275}<d\275\022\307\326\275\326^\302=X\2361\275\322\322y=\2437\025=\002\036\265\275:~\226\275[O\313=k\335\000>\256Qn=\222.\257=\335\232}=\030\021r\275\332Cq=\323\321\027\275\374\375\035=\227\372\022\275\332\373E=\354\313Z=&\257L\275\252\341\345=\253<\205=@\036\326\275w\362\211\275\361.i\275Qj\276\27565\320\275Iu:\275\235b\204=nue=\232\221\010\273d\227\363\274\243f\371=\303\262+\274\025\003\254=\227}\335\275\203\030\010=\320\373J<\315d_==\311\245<T\350\016\275\230!i=\304&C;x\022\220\275\343x\213\274\022\323\321=\376_\363=\246@A\275O\313\005\274\357\322\213\275a\353\256\275bP\277=i\224\337\275\230z\350\275\216n\310\275\321\374\244\275%\301g=Y\273\233=R\226\213\274\251c\245=\322K\216\2746\320\371=\031D\216=\300\031\302=\342{\313=\353z\277\275\370F\212\275\311Y\310<\240\227\264\275\370\006\234\275\333\361\370=\'\223\204=\2629r<\005\354\325=n|w\275\372\346\217\27500\361\275\335J\354=\351c~\275\256\252S\274\336\233C=x\007@=k=M<Y^\355=\203\007\257<!\312\343\275\232@I\275\330E3\275\266\327\246=\244\354[<T\025\303=\330\225\374=\020\345\312=0G\276\275t0\r=\243\256\351\275\005]\271=\204oq=S7!\274\035D\250;\025<\350=BA\276=\272H\250<\310\273\201\2754\230\240\275\334\235e\275\016\232\303=\347\2234\275&\221\231\275q\335\263=x\254\272=w\317\275<cQy<\207\343\225\275P=\267\275\276\027\373\275\t\242\245<\023\273\242\275h,\305\275\240\213\210=\204w\222\275FK\315:\334\016\351;\0278z\275M\345\365\275\235O\233\275\322F\247\275\351\344\031=\213\344\220=\002\356\315=\356\374\211\275P}\320\274\341\231u=7D\221=\225\375a\275\220\215~<Ig\271\275XJ\224\275\232\214\263=\217a\334\275[\224\217\2754V|=|t\357\275\003\327\201\275kp\217\274QVD;\231%J\272k\355\260=-\200\354=\264\206H\273\314I\346=\325\202\320\274\\\240\272=\274\243\372\275\207\275\270\275\257\2567\273 \323\237\275K\207\355=\033K\272=\020\377E=\020\3671=,=\357:\031,\253=\007:\356\2757\007\242\275E\000\215\275\020\320\343\273\232\002\227=5f\374=g\301\244=\354\0373\275\351\302]<1J\005=\020<\033<\2402\354;h\211\206\274\322\003o=dTU\275c1n\275\234\273\240\275!\231\317\275\277\356\275=\366\231\317\272\343\220\301\275\251\262\355=y\300\242\274\365\r\241\275i\362\256=\326\374\233=\372\211\256\274O\371\201=?<\315\275\2445\201\274@\001\301<\305\230\204\275|\203\272<%\245\363\272\346\005\215=N\220j\275M<\213;\002z\322\275\302\364\017\274\220\'Z=\311\231\322\275P\350\317=_\310\232\275\276\371\337\275zi\211\275T\014A=\313\325\'\275\022m\360=zU\300\275v\211\234=\002\240\007\275\351\177\234\275\270\203`=C\367\217=\355\032\230=)\262%\274O!\375\275tT!=\334\266\226\275\314\230\"\275m6\027\274mUK\275\021\200\305=P\267\031\275\024\374\362\275\272\223\326=\335\267\363\275)\355j\275/$}<#\007\201\275\335L>\275\224\220\210=\025\216m=\357N\274\274\275F\252=\233 j=\330\036\020=!\302\371=\333\245\266=\313\274\000\274\036\333A=k(\223=\254\177\205=\277Z\013=\205\343\201=\214\302\304\275\302\271\313\275\366J\235< \251\325\275\365\225.=E\342\266=\253\322\227=z\014\206\275\r\302\357\275\200|o\275S\240\317=\375\203\024\275p\273\225\272\356\201\351<m@\226=\014X\235\275\330\200\374=\022`>;r\361\"=\272e\021=\031\246^;AS\317<\350\321\235=\310\342\332\275L\027\001\272\272]\232\275A\035p=\204\307\200;\301\273\254:Y|\241=\313\215\203\275\206\017\341=@\217\324\275\231\213+<\346\005T=\322\273\217=\234\222\301\275-I\342<\221[e\275\246\034\362\275!:E<[\177\275=S\237\232\2753]\240< \272\231=\307\037i;\233z\033=\027~\366=\332\333\321\274\010\215!\275\370\363 \274\356K\335=Rx\320\275\343\216\241\275\221\027c\275\224\317\355\274\375H\300\274\315\224\254\275g\035\230\275y\014\243\275Uc\302\273\340!*\275\265\200\226\275+\2051=J\200\224=\366J\374\275\320\007\251=\207/\357<\334\327\300=@\217W<\224oQ=\270\235\031=H\342\356\275\276\201\277\275:C5\275\233>\260<\223\021\334\275U\225\373=l\003\301=\352]\233=2\236\214=q\364\226=\316\244\005\275-L\370<0~i\275\365\317\337<\211\363\377\275M*\347\274m\374\206\275k\355\036=\003S\367;\221\310\237:\030\203\231=\337Z\r\275\030\343Y=\224\017$=\256:\243=\262<\242\275\317\207\241\275\247B\211=\005\3631\275\t\220\275\275~&a\274\216\351^=\252\351k={V\n\275\007M\337\275}\0313<\340\267S\273\232\315#\275\320\314K=\027\331\037\275\000\227\372\275z\316\257<\333@\345\275&\222\274=V\335*=d\022\327=Z\255\\;N\247<\275f\354>\275\346\006\372<\233{\302\275\212\271\214=K\275\360\275o\247\207<3\232\034\275\273\235R\275Ag\261\275s\254\343\275\225{\270=\330\345)=\202\326\276=\352k\250=7&\255\275\355,\272=\314\266\000>\344\030\005=\364\353\332;:\027\021\275\341\261\214=8/\361\275\356\315\233=\346\327\357=S\214[\275\220\372X\275\207i/\273\317\241(<\212\242\207=\340\2316=9\002\307<\314\376\360\275\346\242\240<\220\034\360\275j4C\275\254\230\321\275\217k\234=\201\360\301=\274j\202\275JA\310\275\n\324\340=\334r\341\275\037\315\376=c$\214\275\n\362\356=\020F\326=\360`\240=\200\260I<\216\354F\275\"\376\000\274]\230J\273\247\3466=\232\262:=\250w\245=\322}\031=\240f\212=\247\357\000>\232\320\315=Ps\357=\341d\346\275d\254\204\275\262\"\005\273\312\016\t<\317\355\336\274%v$\275\302\225\214<\2317\334=\312Nj\2754\025\346=5\316g\275W\366\277\274u\0261\274\313\324+=fL\300\275\372yb=\"\325\260<F\230\177;\276\366\360<\337\350\271\275\277\262\215<\271Jf\275\022\210!\275\365t\344=\221\236\250=!\271\336\274sf?\274\346\220\233\275\231%\273=I\003\316<\362\023\355\275\332\267\021=qF\354\275\354\2014=\tH7=\203\312V\275tJ\304=\376\035\252\275\033A\235\275\014\014\322<\252u\007=\026\234\253=\"H\246\275\220\224\232\275=ta<g\244\342\274n\275\355\274w\"f;m\231\330=\201\t\372:Y\227\321\275#dy=\314p\247=\n\013\202=\357\370==\370\274\224=\010\333>=+4\235<\273,\277\275\020\276\266\273\'\253\316\275h!k<\002.\225=/\254\"\275\2221|=\252\361\331\274\336d\311\275o\323\206=\216f\211\275\251]\341;\007)\205=\270\232\375\275\\~\214\275\360\004\377\275\267A\362=\212\002\275\275\215\247\330=\317q\300\275:\305F=\360\3264\274y)\254\275B\017\006=\375\341\233=D\357i\274U\022S<\231\322B=\314|D=m-\317=ej\200\275^\334\321\274\246\211`<g{\227<f\230\256<\017\372\364\275.\341\211=\245\026\370\275\017[Q=2\021\360\275d^\345=\034m\375\275\276\241\314=\376\340\335\275\243\343\314=X^\212\275\3425n\275s\016\210\274d\203\323=\310\207$\275L\177\250=\347\2055\275\r^\300\275:\224\005\274\t\254\201\275Q\307\251=G\"\333<\254\324\303=\323\346\020=\204\241a=\310\306\332\275B\243\344\275|].=\032\007e<u,\336\275\027T\246=]+\213=V\346<\275\252\346\211\275\373\330d\275\301({\275\3243\340\275hP\342\275\261\022\272\275\004\217\252\275\220\034\376\275\025/\221=\032\327\332\275t{\303\275\364O\222\275\241hY=\210vb\274\002e\257\275\2437\013=\017  \274\220\006\264=\212gW\275jKh\275\323$\243\275\234\275\263=\373\366\212\275H\372\351=\251\240\221=\324+\354\274!6\315\275k}\366:\365\250\024\275\362b\r<\256\243\302\275\265\030\336\275\327\373n\275o\212\224<+\274\367=\362\254\360\275\311\206\240=\264\344\215=\ngG=4\305\202=\247\374\356=#\236\366=\316\000\253=\222\2013=\341\334\366\275L\223\340\273\247\243*<t[\'=\266\024\013<\231\357\210=\262B\331\275\264f\006\273\257v\350=\231\037M\275.\021\"\275_\025\230\274\235\032\023\275\324\343\373\275\027\226D\274s\320\356<8s\001>\300\\\266=6H\207\275OL\311=\233K\022=\306\222I\274\020\200\240:Y/\244\275\303\322\265<a\240\332=\312\300\350=\244\224\217\274\035{(=\205\343\266\275\r\243\372=\337\030\222=Z\216\334;ru\t<O\234\340\275#\305\366\275\323\222\362\275\206\325\000\276\214gK\274@\311\363\274,2\341\275\013_\375\275\256\322\343<\256X\230\274\204\205\204\275\362R\222\273\315b7;~:\020\273\324\316{=P\355\271=F\207:\275\345T\314\275\336{d\275\300a%=\307)\356\274\222\313\264\275VV\001=\301\305\"\275m\203\307<\303\303\275\275\200\313\014\275\013\251B\275^{M;\020}S<T\037\326<n\343\230\275\314\277\332\275\177F\007=\037%\244=2m\372\273O\226\313\275bUC\2744\016\364\275@8\335\275\330\026Z\275\201]\346\274\372\177Y=]\331\260\275\303\346\352<vd\276\275\325#\031\274:\227\000>~\246=\275\007\370/\275\375I\214\275\007\325`\275\036> \275\013\241\234=g\264\324=\356y\310<,\331\312\274\372P\252;(G#=M\351U\275#\014\262\275(\014\326;\262\341\\\275\376\261\343<\000\214#\274\241W\231\275\367\303i\275\223K\317\275\263\322z=\351\017\374=\214\211\303\273x\2057=L\032u\275g\377&\275p\010M\275\022X\261=\325\033\255=f\355\330\274\005QB\275E+\321\273\341}H\275\357\255+<S\302\223=\007+\270\275\214\357z\274\025\033\231\275+\315\205\275:\347\263=\377\307;\275\341r\237<\013<\016\275A<\310;\350\004N\275\207\027\364\275n\353\004\275Z\330R\274\346\264\374=n\3251=([\266\275\031h\352\275\036\207\004\275\032\311\354\275\"\376\244;~\336]=\236\037G=m\266\216\275E\037\315\275\350\206*=\263\352\371=S\254\250;\345\245\241\274Y&,\272\006D\243=\256\305\377<\210;\361\275\370\255\234=]\240\223\270\311\200u\275\001z\370=\305\216S<\364\037c\274QE*=\273-\217=?<\344\275\251\203\350=\254\031)=1\3012\275\2039\220\275y37=\265d\353\275\"\"\321\275\354\301p\275\026E\020;\013V\251\275\024\031x\275\317\357\022\275s\246\217\275\2108\324\273\036$\215\275\352$\300=\310\222v\273\314O\273=\206/\316=\252\316c\275\227`\335=+\235s\275I\322\274\275\222\027\234=K\007\235=t|\2429E\312L=\234E\214=\320z\220\275\271\256\212=\355\263\243\275\300\022\356\275,\256\204=T4L<\026^\352\275 =\273=\270\031\253\275\356\252Z\274\022\302\326\2755=\213=q\350\353\275\035O\212=I\"\304=Y\246\312\275\022\304]=\373\002\013=d\320\231\275}\261\220\273\360\355<\275\256\217q=)\334\226<\360\255\270\275To\366\275\306{\233=\002\345\356<\027u\244\275v\270\300\275Y\221H\275}\235\224=\225\321J\275\211\230\377=\343P\254=\312J\237=\201\204\234\275\234\343\367\275\310\362\246\275\302\265\376=)\375\254\275\272\027\355\275\022j\014\275\347}\305\274j\262\303=^\005|:\021\245\024\275\230\234\365\275;D\212\275$\245\312=\3758\263\2751\374\305\275\230,\330=\360S\221\275\037\007\014=X*\354=\337\326\007\275\255\332K:\254\264\234\274VXU=H!\301=\260\304\243\275\224R\324=8\271\223=YWD\275c\306;\275\222\342\215<\232x\350=\267\215\237\275\357\002\343\275\023E\\\275\361\331\030\275\342\004\214=)\325\362=\021\246d:\003\223\211:\333\303\026\275\212\024\305\274\230\345\004=\367\362e=Y\250\035\275\273\n\224\275\027\312\376\275\214\371\356\275P\264\374=\252\016,=;l\r\275\365\020\302\274\035\334\334=8Z\325=\026\330\3409\256d*\2753\200R=\034\227\234\275M\364\247;9z*=X\261\215\274\265\303&\275\032d`=\232\036\231=/\342\320=\010:\225=\246\247T=\\KT\275R\200\340\2758k\340<^W\263\275\311d\253=\232\036\004<\364\237R=:\026b\275\327\240+\275y1\036\275\375\220\300\275\2338\364\275$\262\243=d\211\235=\325\246\266\275\365\\R=\216Hg\275\240qM\275L\340\241\275Xg\210\275\325\017u\275\223:\312<t\372\345<Kg:=XJ\251\275\314\025\331\275\313\333,\274\275?\314=\014_\373=h\225\324=\315]\357\275\242\225\336=V\001=\275\326\324|\2750\223\265\275\221OX\275C\273\217=\274\023\025\275T%2=\212\275\331=\374\236\027\274\203di;5\020@<P\"?\274g\006\260=0\222=\275\232@\326\275?,\227<MN\001>\277l\271\273a\300\322<\261\274\347=\341\"\364\275.\020\236\275\031YE\274D\223J<\277\032\346=\265a\210<\325=\253\275\033\273\224\275\253\033\326\275\267\265\367=>s\243\274\376\232\321\275\200u\323\275\030|\035\275\031\315\026\275\230\303\361\275\263y\360\275,\314}=\335Ec\275\263\017\370=\000\034\023\275gD\237\274\252\030[=\220\233\271\275\027\303\244<@s\203<\024\366B=cr\000>\323\303\213\274\205\013)=9\030\343=\024{<\275q\036\345<\r\207\366<k\202e\275efT<\373\010x<\222\344\305\275\222\301\375\274b\205\210<=\215\365=\230\305\254<\375*\232\275\245\'\2649\223q\303\275\336\271\257\273*\326\276=\036@\222=!9\264\274\304\320\000>1N\276=\274\277\312=\306\230\272=M\226\331\273\264\211\377;5\300\265\274\373.\371\275\343J2=\343$\255\275e\261F\275\271$\007=@\247O\275\204\334\013;]\327`\275\270\302 \274\024\020\036=\313\366\246=\220*\237\275\234\253\300\275\303\000\224<\'\303\237\275\345\373\313=\253?W=%\211D=\r\360D\275K\331/=\241\022\204=\224\345\270;\r/\240\27448\\\275S+\205=T\002\270\272<\300\371=\351\323\242\275Eu\022\275\231\254\326<\300\375\365\275K\343\215\274r\311p=\261\321\222<\210\201\265=\203\037\331=\201sD=*+\001>\202\324\203\275\334\325\025\275\346\214\355<\017d\374;\200\330Z\275\206\341\372=\030\254\037\274~\014\265\275\247\026\254=S6\"=\266J\217=\265\025\307\273\211>\352=\251\337=\273F7\271=\366\032\334\274\356\037m=]\222\273=\212\217\266\275\002\272\222=\245\242\210=V/\n\2755(\001>\027\271\274\275p\230\031=\206[u=FNr=\340\023\004=\251\264\212<M\255\252=1\010\372<q\331S\275\021\220\363\275\030\020\334\273a5;\275\000+f=\rJ(;\301\301f\274\364?\231<p\032\253\275md\365\274\307\2105\274~\307P\275&\351\005=y\017v\275\222J\313<\246uW\275\371\311\321\275\222\372\321=$L#=3_<=J}\367=\353\232\005\274\357r\002\275\252\307\213\275\356\310\032=.\224\364\275hZ\372=\177.\206<#\200\226\275\314d\002=$g\203=I\037&=\002[7\275\331\346\021;v\025\204\275\000\272\037\275\271H}=\350\036l\275\322\361\342\275\362?/=\'\373D\275.I\334;z\254\265=\020\235\241=6\027\343=\375\265%\275#j\276=\304\373\327=@\021\246=Nk\023\275\255\230\023=\256\245\316\2751\374\203=\301\253\265\275`\203\016:\231\321\323=\224\316W=\373W\276\275\342\376\335\274\350\206l\275\002r\344=l\240w=\024-|\275RZ\035=\216\013\020=\300\300o=\025\371\234\274{Ih\275L\220\322\275\301\327;=My*<\320\255\253\272\221\023a\275\020\235\305\275\353\357\346<\202S\271\275\033\304I=\335K\326\275\033\244\351<\376\233\232=A\225\346=\022=+\274\356\232\340=\205\t\032\275~I\213\274\327\251K=m\304\241=r\255\235=\242\272\n=_<\331=\374\030\276=\207>n\275)\324\007\275\261\213\003\274\321\221\317=U\n\314<y\271a\275?\344\305\275uB\331\274\335%\206\275\266\2172=\205\224\371\274\367\220\326=A\370\253\2752\354\317\275\247\334\366\274\220HC=\223$\345\275\231\225\207;\177!\266\275\244\252\271\273\3231,=2\230\242=\254p\351=\004&\243\275T\371]<*|H=\211]?\275t}\"\274YH2\275}\341\240\275\247\032\261=\224\177\245<x)\324=eJ\001=\023\204\320\274`0\205={\273n=\204@\361=\030\217\033\275v\373\370\275\314 \221=\022\037\020=\020n\245\274Hb\374\275\'9\233=V\013\000\275s\025\'\275\376W\342\275\\\300\304=zO\335\275\003\224\207=\t\313\332\2756\256F\275\327\321\313\275\240r\236\275*\271\340=\243s\\<K\2100\275\265\323Y=\334w\314=\345\276\221=[Z\001>]GW=s\004g\2742*o=\222)\025\274C\337\210=C\336*=\343\365\331=\205\001\030\27577\220=\200\234\\\275\205\302\237=)\2025=\315t\233=\302\210\232\275\321}P=\315Q\222\275`\273\000\276\030\014X\275`:|\275\207\262\307\274\001j\257\275`&6\275\313\215\245\275\366\200\304=\276\213\016=\351\214\374=\376\364\376=V*\215=\266.\321=\200\246\211=3\3242=a?\025<a\200\217=\226\366\205=\345\220c= \346\304\275\303i\374\275\254y\231\275p\252\210\275\317\306P\274\t\343\274;\2313S\275T\007\312=/\365\201=\270\017q\274\254\335\267=\330C\000\275\216\031\226=\266q\214\274\216U\"<\230\255e\274\361\370o<K\377\266\275H\n\002<\"\353\374=g\254\346=\266<\317\275\310X\325\275\021\377\223=\002\265\003<fL5\273\333=\315<Z\337\230\274\243jz=\243d\201=\035+%\275\357\022\035=Q\342\363=\316\213h<\365\003\326\275\353\206\316<&\223\366\275q\344\361\275B\272\032\275\033\363\307\275\351(d=\361\215\227\2755\274K=I\0236\275\341\233\377\275N\256\356=\3733\302\273\030\327\271<Bt\250=\202\306U=\364z\001>\037\243\255\275t\234\313<\227,f<$z\331=\013\"\271\275\271:\313\275It\326=\210\221\333=4s\352=\222$\314;R\206\024\275\370\231h\275\353FU\274\352Q\002\275`\2106=y\375X\27578\225=VL\322\275\024\265\254\274\251\274\261\275\226\324\344\275\006\201\260\275\321[\221=\233\002\034\275\205\204\255=\362\221=\274My(=\317\270\356\275\177\007\220\275\256\216;=7\270R\2756\227\347=_\027\264\275\316\340\373;/R\257=\235xC\274\221T\376\275kA\340\275E3\314\275\213\365\261=co;=\264\317\326\275N\t\215=z;\217<\274\364\332<\336\251\027\275\225%\357<\225\303\256<\210DN\275\205\201J=_<H<\211B\235\275\017\256\241=\267\024@\275C\314\231=\177-S<4\n\315<~\330\201\273q\002\203\274T\263\271\275s\337\r\275\177\250\237=\336\332\247\274<\244\352\275\323\353\302\273\033#(=\360\033\212<h\034\200=\360\352#<\215\243\033\275Im\340<\325H1\275s2\342=r\324,\275\333\020\235=\250\236b=\236\336\356=h\236\331=\033=\331\275z\272\224=\265\274\306\275\266H\204=\373\033\207\275o\202|\274\375\242\205\275\352\314y\275\365to\275(\377\336;\212\257\271\275\362\231\343\275r&\356=\'\243\311\2752\016\366\274\210\332h=Tx\241;o\022\240\275\234a\310=\221\t\261=4k\350\275JX\270\275E\031\271<!J\000>\255\366\353\275B\250\201=6\237\273\275\224\010J<I6\270\275Zi\316<<t\177\275\235S\237\275g\301\243<\350J\344=\033\373P=F\370\225=\273\244\332\274\254\005\365=\352\341\320\275\221\227\270=\243\335\232\275%p \275\241\352\257\274F\267\366\273\036\317\310\274\na\345\27575\005<\203\004\206\275\016t\006=]\t\204=UO@=\336\302\034=}\031\233;\303t\265\2754S\262=\357r\242=\230\024\227=\255\234+<w\212\275<\312\212\272\274\002Xw\275\252\234\222<\242\303\\<\tS\257\275A\013\342=m\370\305\275h\236(=v\263\215<\r\231\334=\3452\205=\322\246\034\275Z\016\254=\211s\036=\\\315v\275\244\031\214=\037\220\262\275\262\313\261\275\254\303\237\275\356P\334\275\365\035\200=w\374\335\275|\331\325;\026\345\325\275\356=c:\313\220L=\252\310\000\276\311|\374=\301\000\317=H\343\310\275\023u\033\275\230c\301<\351\377\210=\223\256\322=\225k\000=X\250\336\275\027\025n\275\003k\341=\005\243\003\275[\311\251=\353\314l\275\304[\312<\\#d<v\220\274=D\033\222=@x6\274\003\330`\275\312\234\272:\213T\013\275\205\225\275\274F\366\330=\023\2318=\2270S=\001[\300\275\250C\226\275x\227\\=\324,e=\231\\\334=\223\320\357;l\031\003=\035\025\326=h\257\346\275\376uh\274n\271\276=9\306\221<G\377\273<Qc\201<\020\234\255\274MD\030\275\366\233\264=\255\024\035\275\231\031\262=ED\234=\232?O<\305\026\243\275\357\210\261\274\220u\203\275\330\375\227\273\177/\227=\257\207\234=1a\300\274\316\277\250\274W6i\275\223\201\001\274\200\205\300\275\322\353C\275)w\006=\3013\341\275\323\222x\274At\244\274\324\233\341\275\377+2<\025k\376\275r\305K\275RP\310\275\335#i=r\347\321=\232H\342=~\030\235<I\314\224=u\n\203=q\n\374<\270\023\326\273>\377\265<\023\264\346=\364\364\016\275\334L{=\363St\274\231\362\312=\2321\314=\266\375\277\275H\334A\275\206\347\301=\227\310\305\275\273\214\371=l\312\243=1/\374=\204\220\324\275\365\376\275<U\232\216=\350\337\361=1;\270=\225)\210\275\307K\206\275\244h\315=\354\270\231=\326\223\342=\266Y\276=#\235\231=\301\221\007\275\362\372\221\275\000a\310\275Y\370g=:n\363\275\014\331\226\275\226\274\030=\002\304\201=r\240\254<\331\316(<\241\335\223\275\252\241\277\274\250K\222\275\257\247\200<\273p\245=P\326i\275\033\370\376\2747\031\371\275\367U\252=S\363\025\273xKr=\264\r\000>+t\220=\346\245\373<\001\257\234\275 \n\266\275\3763\202\275\030:r=\357\265\035=\265\363\305=\335D4\275&\002\200<\250-\321\273\256nz=\364\201\326=\356e\261\273!\000\203=.;\321\275\'\022\340=\3658\307=U\227A=9c\366=\344Z\267=\037r\210=\214\205{\275%\222\374;\21578\275|\362\337<XR\212\274\353\t\313<\347 \231<T\027\242\275\313q\374=\215\303\325\275\013w\372=\343\000\367=\223s\216=\375\373\347=W\267\353<\017\367\235=Ra\336=\"\312\226\274\277\225w=\3473j<-\003?=\001\334\225\275\311o\302<\324\334\265;A\376\275\275\324\372\023\275\317\201A\274\255I\321=\026\367\234<\247\240\351:U\230\310\274\025\277@\275\365\262\241=\214\247\250=\357\316\353\275\254i\246=\325\270\272\275W\270\210\275\313+\353\274e\244\326\2750Q\301<\302B\375\274\243\257\215\275,r\207=\353\362\236=\316\217\007\275\025\210\236\274\025\246J;\245X\205=\023\235\321\274\035\013\315=\365\362\262\275\354\030O<.\214\342\275\031L\203=\237p\030<\307\203-=\010t\243<\212\024\201=L1\352<\005e\247\275K\215\357\274\342d\r=/I\243\275\230\216\225</T\256=\317GT\275\027v\347=T\274\342<<7q\275\352\335\334\275\205\212\361=\"\214\366=\332\030\352=\313\177\241\275\374\226\375\273#\027\205\275\020\202\236\274\007\320\262<\337A\215\275R.`\274=\305!\273w^\213\274h\333<\275\\aT\275\252%p\274O|\334=\354K\246\275\255\226\363;\352\311N=_\221\001\275\265b\307\275\022\356_=\234~\222=\277\312#<YY\314=\232\365\312\275\336\305Y\275\241\234\247\275t\200\t\275!)4\275?\202T\274%\013\212=\026\321\214=\000f\032\275\"\202\023=\376\270\343\275\353\203A\2751\251z\275\303\206|\275RF\222<T\214\304=\212k$\275z\252\236=\264\321F\275\343G<\275+<\272\274\3735\225=*OL=|\330\332\275\362\254\312=\2422o\275\271\212\310\274\010^\373=\377\220\'\275\221\233\233<\t0\\\275ko\360=\026\206\271;\302\350\356<H\341\303<bq\330=\340\272\263=\372\311\253=\271o;\275Q\203\355<\231\037\025\274\337q\215\275\323\266J\272\276\347\320\275\320I\264\275v\3425\275\240\343\000>\214\361\275=\305O\247\2753^\001\276\353\026k=\266\365\n\275 \260\235<l\243\035\275\341\314\265\275&\"\031\275\301v`<=r\345;E\300\232=\236\014E=O\241\206;\3473\030\275\261\241\302:p\215\344=`w%\2741\035\273\275\346\374>=\"\304/\275\367\367P=\303\345{\274cn\016\275\013\034\242\274\3725\343=\360o\306=\350|\001>@c\377\274\250\217H=\361\275\333=\240\346\252\275gaz=\037th=\305\242S=.\021%\275qg7\275\317\271\332\274\337\254%=\304,\267\27512\313\275b0\207=}MG\275\203\277\371\275@&\324=M\335\237\275\221\346\010\275\353\230\366=\314\021\214=\321t\312\275\243\032\022=\365\357\232\275\310\245$<\007~\303\275\355y\234\275*@\354<&\272\024\275r\264\275\274\302\331o;\261\"\373=\344\336\212\274\203+\353\275\272\rF\275-\023\207=]\322S\274Y\3741=\345\357\364\275\271MX\275Kcd\275\221\227?\275\201\024{\273\365)L\275=\3158=\311\257\311\275\306\320\354=\271W\310\275X\003,=\013\360\321\275\334P\364=\356\255=;\203\216\242\275lK\376=z\300$;\2419\202=\264\005\353=\370\244z=\344-\300=\"\313\364\275A\333\245\275f\251\321=\034\213\022\274Fa\334=\036\350\206\275\311\230\355=/\260\221\275\213\337C\275b&u\275H\201H\275\014$\000=\233\325\246\275\026\317\215\275M\331\262=8\375k=\231\007\210=\242@\364=O\023\211=\357\370\375=\221\032A\275\006\227\363<\272f\334=\322V\301\275\331\367~=\376\030\316\275/\234\264\275e\035\375=\022Jy\275_\023\277=d^\224=\325\243\366;\005z\356\275\230\320/\275\370\031]\275\226\016\337=W\243W\275\264\322x=$|\241<\220-\351=\t\361\323\275?\323\355\275\010\337\244\275\336L{=\323\3049<ni\266\275\212\274G\275\'\240\355<\250\250\';d\365\323\273\037}\260\274\026r\215=]\232\033\274Ll\206\275\320\300\344\273\021\344\362=$\262\237<Jd\324=\226J\315=_U\311\275\232Ob\2732\210\321=f6\321\274.\021V\275\365\270\206;\226\014\014\275\320h\261\275K2~\275\366R\372\275\221;\225\2745\"\224\274\231\320\335<8z\205\272\236M\213\275\2059\311\275\267\332\242\275\364\001\247\275\020\034\216=R\001\351\275\030\215\326=/l\343=\346\0205=\340\251\363\275\013\320\330\274\362o\275=\274w\211=Xj\375\275\270I\370<\006\304G<g\022\364\275GZ\242\274\032r\001>7~\267=0\273\r\275F\355b= \313\262=`k\336\275Y\235\361=\306\351]=\330\307\313\275t^\313\275\246^\350=\212\006=\275\000\034N=Ji\274\274\370xy=\364`:=n\263\347=\342\215\355=\2445!=g\201q\2755\206\250=/Q\006=\371\326\031\275\351\376\264=\262\263E\274S0\345=El\213\275<\3108=-\365t=f6r::My\274&\272W;a\0370\275U\327\240=h\035\211=\347\310\200=_>\225\275\231\300w\275\010\235\204\273\274\036\305=\363\216\230<\231I-\275\240\210\335\275\271\205\375\273iF\276\274Z\225p=\356\307A=\227\003\354\275g\361\330\272$\262\321=x0\303\275\236\233\224\274\313\204\036\275\317(\267=k\314\005\275\006r\005\275\312\316\361=1\362\212=\"\273\276=\351\303\345=i\005.<\263\243\254\275\2323\313<\205\031\317= \244\030=\255\234\007=Q\264\225=>\327\332=\354\007<<\314Z\354\275\260f\333<T\251\254\275\236 \302\274K\370\245\275x,\200;\r\236\263\275OS\276=6t\202\275\300i\303=/`\372\275\352\352\354\275D\235N=^\275\377=\377<u\275\210\016\350=gN(\275\305H\204=\006\357B=\210\t\316=\315\340\310\274c*a=\253\313\315\275V\007\203=\026\362\236\275\360\356\342\275\226Z\275=k\307\372=\331\036z=\304\257M=\244\204\227<B\177s\275:Qs\275|:\264==\305\304=O\340_=\332v\020\275=\001\347\274\323t\275\275\371zK\275;\370\324\271\014)\213=\221\245\307=\307\032\372=\361\361\240\275A6\363\275Y\346\234=\016m\\\275\337\036\354\275\330\375&=\233N\333=ds\274\274\252\226\364;\tW\370\275|\240\311<\213\004[=\3431i\275\r\330\350<ID\234\2759\203\232\275C\247\t\275V\000\r\275\267\035\307=\256\n\022\275\300\211\007=.\242\017\274\260\017\366\275\017\311\325\275/\270\263\275\271F+\275\243\354A=\031\226\215;>\001\204<\206i\244=\021e\232\274]=\005=\225&\001\275\372\255E\275\010\357\375\275sF\257\274nNZ\274G\316\253\275:Z\226\275MX2=\214\270\252\275\304@\350\275e+\300\275.\024\361\273\271\362\336=\362\221\223\275\374\234\021=-\225f\275\322j\252\275\341M\212\275;\213<=+\365\316\275 \222\243=u^\000\276\n\005\313=\312\026\311=\372\354\350\275\306Lj=\232\230S\274\357M\332\275\351\332\204\275\274*w=\2074H\275yp\345<\230\033\340\271\254W\016\275\362-\340=\256\333I\275\352\365\214=\332c\260\275\036\251\242\275\302\034\251=\201G\031=\205\341,<\303\310\014<RT\201\275\21778=\342\030\262\274\014\230Y=\346\221s=\374\262\260\275\205\024J=;\225t\275\357\261k\275\310x.\275\247Y\236=\2374\243= R\236\274\344\315\034=#\226\005\275\267\343\367<\036M\333\275\013\005\213=\347\031\201\275\335L\371\275\250x\030\275F\223\002=\334\026\177=u\301\344\274?\2536<tF\326\275`\006\332=\374\035j=\272\250\250==\004~\275\305\310\301=}0}<Lk}=%\337\212;\224K\026\275_<\337=L\256\352;\316\rw=\277\232&=#,{\275\235H\227\275k\022\236=\000\221\344=5y\250\275\205N\000\276\020\302\302=k\332k=\270\212\344\275\3520?=\010j$\275W\316\303\275\227\365\236=\224o\307=\262 (<\305\203\270=\341k\033\275\352\003\333\275d\n\346\275\026R;\275<\'\323=\203\256\325\275\017/\233=\'\330\232\275\312\376\351\275\014P\352=3\256\231<\250{\342=\322\323\r\275\024\0173\275q5Y:\016\266\265=:\203L\275\177D\345=\355\212\265\275Q:g\275\277)\246\275\227\347\354\274\362\317\346\274X \360=\353<\307=b\005\335\275\307\324\354;E^u\275\"\364\222=o\227-=\257\274\310\275\242wC\275\234\006<\275\036\204k\275A:\267<\000U|\275\356\224\212\275\251#\352=o=\322\274h\264\242=\001?\200\274xl\016<\232\227\301\275~\302X;Y]Z\275\227\023\340=\234\\\027\275\347h\313\275\204p\024=\3417\257=\240\000\353\275=o\345=3X\370=\tx\355\275\241Id=\006\301s\275\037&\210=\375\032H\275\014\315G\2753\247\230=\376A\260\275\366\332\003<Y[\367\275:\026\220\275\375\303\301\275\036\334\222\275 \224\277\275\207\0360\275\372I\240=O\335\276\275\231\334{=\\ \274=o\270\351=\333]\275\274\362\2357\275\016\227\315\275\274\023\270=\251[z\2758\267\377=\324_X\274\356\024\337=\243\021\354<\271\004\205=\220;A\275\224S\324\275Op==Kc)=[\377\350\274\213\314\255=\037cN\273\200q\267\275\325\r\246\275\207\245\223\275\231\322L\273}\224\351<\034\221)\275\2017\354\275}\236\222=\0261\236\275\341u\216<H\343-<\335\023\216=\342\201\361\273\223\203\334\275V\232\304\275\255&\035\275\001\245\031\274\331<,\275\222\032\003<\342|\212<\r\'q\275\205\204\235=\233\037:\274\252MH\274\375\265e\275(Q\230\275\\\024\310=\253\317\364\274t,\247\274\2450\342=\036\353E\273\366ZR<\310\013r=\235\337\332\275\256\333Z\275\251|\353<\312\345\253=\226\367a\275\345\265t=\201\243\315=\207D\365=\241\235~\275^\325\220=@\256\253\275l\025(\274\177\247\374\274/*P=]\344\336=zt\204;\225\311\372=\203\301=\274q\005\317\275\311\301\235\274\272\263\302=gG\031;\006*8\275\367\372\226\275\rS\271\275q\367f=z\\\\\275\'\242\257=\364#\275\275\005\202\205<\376\005\340\274\343\331\365<\314\345{=\256\360\343=\255\025\274<#u\315= \214\242<,R==XS\026=\3105\311\275\031L\223=\013W\257=\265\366\000>9\271a=7\032\001\275\004\224h\275Z\330\233=Q\034\275\275H\211c\275\362?\354=oT)\273\236.|\275\022\035\243=\276\320\313\275\347F\362\275t\355\215=\304\231\004=\332\333\252=c\255\262=\375\226\312\275\330\002\326=K~\217=8\221\007;\315\311\307\275\005\330\336=)\202\250=\264C\323=\341\243\223=\222\177\373=\312\231\036\275\316.V=gk:\275\332\026\352=\360\252\365\274\201\302S=V[\260<g#\016=4CK=\264D\365=\032\023\335=\304\020\345\275vj\356\2756n\217\275\362;\321=\243\026\357\274\337\326\244\270\215c7\274P\256\330\273\037\365!<Yn\223<\330\241\201<\370\377\355\275F\330\311;\374\224z\275\"\360\350\275\216e(\275\364~\377\274\177\216\000\276~\001\250\273/\304B\275\241j\340\273j\371\372\275\212\261\326<\262\342_\275f\336\211=\025\207\361\275B\007(\274;Bq=\360\314\377=B\027\370\274\242\335\373<\231[\254\274\210|\320=\336\364h=\026I\225=\302v\204\274\2133\213\274X\333b=\200\275\324\275p\344\200\275\352m\370<+\216\355=i\341\266=\203\2155=.\250\304\27598\255\275\3345\243=#\325\030=\023c\263\275\227\000\302\274\222\360\366\273\'\323\202=\242\267\307\275\034\030\250=\224\024\235=\302\312\265\275m*\232\275+>\353<\354\375\222\275\240\211\361=\203\233\221=Ow\371\275ove\275\241s\342=\214bf=(g_<\343A\371=;\017\300=\301\217m<\014_\377<\374<Y\275N`\234\275\335\025\264\275\\\274\247\275,\302J\274#\246p=\260\340\323\275T(\260=\032<\264\275\001J\204;\305\005\204=\260\376\311=\315\257\256=\235@\363=cf\373\275\351\254\343\275\330]\334\274\202\004\365\2755\315\350\274\233~\210=\275\005\322\274\031|.\275#\022\201=\256O\006=\202C\r\274\345T\033=\344\3518=\210\243\000>*\n\206=\264\202\312=\260\360\342\275i\366w\275{\234\267=\301\215]=\337\236<\275\312\360\317;\002g7=yM\030=_\305\301=i;\245\275\377KI\275\256\327\243\275\276\314\000\276\223a\376<\03763=P\241\323\2750\364\373<=o\207\275;6\341\274l\375j=j\356\005=\2279\335\275n*\250=\360\230\257\275y!_=\000\301\332=\344\300H\275\272#\337\274#\343\n\275I\\~\275l\037\274\275\352\366\216=+\016\364\275\344E\341\275\005\215\366\275V\366\364=.\025\274<<\315\363\275\262\'W\2757\341\204\275\272\017\344=\245\242$=\360\000\025;\250S]=!\356:\274\3319\213=\336O\356=\001\"\354=\034@\323<\246\016\217\274\255\221\332==;\275\275\312\003\254\274E\021\361=\324\241\302\275)\347\037\275\340\277\244\275\352\030\364\274\354i\034\275\355vZ\275\231\242\002\275\022[\363=L\272\313=\024\250\270;\367\272\023\273o\343\315\273\277:[=\356\227\236\275)\366\266\275\250\212\237<]\364\311=\232x\317\275\372\240(\275).\232\275\r\205O\275\235Zx\274t\315\365\275Z\352\231\274\"Vw=\267\353\214\275\"W2=&\307\367\275sS\220\275\217)2\273\\\306\n\275\374\335\352\275D\313\370\272SW\236\275\310\232\360<\226\212a=\"\352\340<\007\317\202\275\244\273\250\2732B\325=w\023\261\275\354\267O=\241\214Y\275\240\243\326<jt\000\276\020\267d\275~\034\216=a$\223=\207\032\266\274$ /\275\214\360i\275\177,\326\275\033G\n<\'\246\033\272\216T\013\275\222\204,\274g\247v\275\025\022\333=\024`\027\273{\n\223\274\377]\364\275\327a\266<t3\241\275g\006\307\271:o\222<\355zB\275\007\231\217=\002\374\024\274b\342;\275\305a\256\274\003\351\301=u\007\273=\322\345\275\274\325s\250<\356\177\241=\257\217\005\275{\356\310\275r\'\240\275Y\032(=\365\263E=7u\202=\277\245)\275\224\363\031=f\204h=`.\301\275\260*\347\275\222\234\000>\325\335\207\275\366\202u<L\243\216\275\301E\235\275.\371\204\275\277x\351;\352\344z=R\016A=\353\033\\\275\322\373\204\275\323Kf\275/>\224\275\2639G\275Q\362\247\275\025\026\247\273\235\013\332<8\211\037\275L\241\246\275t\003\362=\026\240\224\275\314\372\231<\246\250\320=\005\350\262\275\002\246\010\272\334\020\300=\351\265\216=\231\223\311=\247O\265\274\337\316\345\275]* \275;\253\212=\301\312\323\275\225\313\227\275\212\344b\275e\230\336\271JG\377=\327\013%<\367[*=%\023\213\274\343\211+\275\243: \275\360P\310<\264\277\326;\230\027\322\275S@-=c)\304\274\366la\275\r\351\313\275\336\374\005=\362\345I=\326\314\343\274\213\316 =\346v\032<SD\342\275\257\222\263\275\265\023\205\275\217\263\347\275A\034\244=\202J\353=\\\264\315\275S\217>=\332w~=\357\343\275=\301\3738\273\372c\307\275\230J\225<\277\235\224\275\321.\034\275\266\262\347\2752\241\000=\242)\272<\374\025R;C\007\203\273~nX\275^\271\336\274\351\373\217=sE\330\2756\2722;m\357\364\273\353\264\336:\034\014\310=\235\344l=w\317\376=c\304\366\274\255\350u;\244W\374\275Y\261\324<\247}\244\275\212\270\350=\301\035\356=\232\262\251:\340r\354=\254W\353=\021\273\201=`\247\031\2755R\000>9%x\275\037\014/\275eA\233\275\006\255\323=\326\326\275=\372s\261<HV\311<D\206A\275\314P\206\275\003K\225\275\377\300s\2752V\241\275\216>\310\275\002z\n\275\270\225\322=2Cm\275\255\313\354\274Q\312I=\276FK=6`\034\274\276\020\002=\306x\037=x\270\261=e\333\252\275\305\366\301=R/\003\275\\\316\303=o\007\322=\370,\224=\337\213\303=Xpi\275W\310\235=k*|=\375\305e\2757Z\017<\320A%=\370T=<$\277\216=\245\203\262\275\352q\215=\033J!\275\017\353\311\275\257\004w\275\213\2628<O\344\323\273^^\200\274\022\276j=\362.\367=\352\036];7w\255< \341\327=\306\306\200\275\003\177\334\274g\252\237:\363\000\371\274\227\024\322\275\032\313^\275\222\351w=O\206\362=\244\277E\275e\221\225\275b\036\215<3\371m=r\217\241\275\310\273\366<ci\\=\235\026\275\275M\013\317=Z\253\331\274d\321\271\275\260H\322<\326}\336<\207M\020=\315\302\036\274h$\240\275C\'\256\275\313\013\001\2767\333\347=\377\003\336\275\337H\361\275\362\357\315\274Wt\224\275A\3117=fv\245=\010\336\375\275fV\307=\007~\223=\031_\353=\267P\n=~\376\322=85\325=\213A\010=Q\341\256=\264\315\250<X\211\240\275\206\325)\275S\3347=\342H\222\275\034\343\037=|\330\226=\264N{\275\345K\224;\005\306\324\275E\265q<#\310J\275\2340\320\275\276(\376\275\201\036\013=<\231`\275\262\026\356\275\214\220,=\\d\357\275\252\376\333\275\013p\313\275\234,\343\275\263\345\321\274\354\333\212\275\274B\223;,\273\207\275zC\003=\032\3012\275\236^_\275\027\254\235==#\273\275x.\217=\257s\022\275\023\310o\275\233\006\265=I\211t=\316\373\350=nW\342=\213A4\275\220{\304<\023\020.\275\227\254\245\2755\244\373\275\341\014\r=\223\350\336\275\342\0236\275\004\360\224\275!\347;\275\222Wc\275M\3370=\021M\265\275\201\253\247==\254\305=S\326#\275*\245\237\275+\370/=\351\246X=\310xn=[\t2<\242\025@\275G\240\357\275\373#~<\254\252\274=DW\374\275+d\375;\214+\356\275\372\244\267\275\346\363\266<\326\3156\275I\3732;g=\262=\031\223\213=7\203\250\275Z\033\301\2754d\003<\316x\017\275~q\242<\223&\205=\205~\251=\'X\352\271\216i\343=\013\222\030\275\311\335\224<;\010\262\275\233\253\216\274\225\017\027\274\327\316j=`\343\371=\217d\020\275\224\345_\275\375\242\252\275\361\004\271\275\026\000\276<\207\212\377\274\321cM\275\250\372H96Jc\275\351\263\327\275\377a$\275\222\020\216\274\321-\242\275u3\346<M~\253=\347Z\337\275\007\010|=]\301\372\274\013i\364\274\206[\327\273\340\265f<n\252\212<\014\226R\274i\030\034\275\337\220\344\274\355\260\301\275\210V\266=\r\337\265=\264\207\335;\310\311\323\275\372X\274=\316fJ\275\326\002\031\275<+\304\275\263\303\225=\246\036>\275\327\330\236=MQ\355\273;\223\332=\317\226u=y\357\324=\030\031\t<\215Kv\271\323\311\227<}\366\326=\307o\027=\232\276\303=\356/\214=A(\337=\257\324\217\27581\327:B!\354=\371.\025\274\225cb=\242\330\276\275J\355\212\275\375\254\200=w;\202=R\215\363=\031\347\346\275\302,\371=S\353\302=\024\021\203\2758_\270<?\252\220\274\217T\036\275\336\022\213\274\2050\320=v\266\000>\013\361\251=\256\261\227=T}\313=*\017e=2\014\341=\350\311\344<\204:\326=\275/\346\275c\220F=\204c\320=\213-4\275\033\271\374\275\320\025\244=Ko\373=\264I\217\275\007\274\211\275C\342\263\275\266\362#\275\000\000\313\274\251\276\025=:\312]=\313#]=\022[\201=\275L\364=p\220\245\275J8\2079\315Z\330=\233\216\215=\034*\310<\324\241/\275\335\003\246\275M\274\033\275\242\203\007\275\235\310\203=\254$\276<\220\364\375<\264K\207=0\366\204=I\215\256\275\002\331\371\275y\313>\275P1\000=K\"S=s\006\227\274\252\013\314\271I\361\232\275-\236\256=\327<\306\274\302,\372=!`\224=I\245\026=g\354\202=\217e\311<Mu@\274\247\336F<\234c{=N\226\350\275\353\342\204\275\000\260p\275\271}\222\274\013,\275\275\333\031Y:\355\360\260=g\364\026<5h\315\275\207x\322\275nc\320\275\305iD\274M\336\321\275$\032\t=\217\313\375\275\"\221\304=\214\357\321\274E\326\365\275\n\351\201\275sK\315<2\"\236\275\356*~=.\235\200=7\316\202<\022\204\360\275o\027i\275\036\275\035\275\230\265\025=sX\027\275$\006p\274\246F\306=\237\374\272\275K\301\236\275\2771\326<\"\350\253\273\035\214\347<\276}\334\274|\032Q<2 \200\275>^\261\274\311V\031\275\032\232.=\005F\351\274O\234\264=0~\351=\270\325@\275\332\336\350=\220\004\233\2758\016\265=\302\341?\275\202\3438\275\310\352\327\275\n\226\347\275\334*\206\275\2762\006\275\373\202\225\275\377\252\227=\367\025.\274f\237\202\275ZbC\275w\327\302\275\247\252[\275\351\336\235\275\002\311\256\274\306L\253;\364\372]\275\234=P\275\350\313\353\275\245\343\207\274P1\227=+\367\002=\016\311\275\275kc\316\275\343\246\177=\277f9\275]6\230\273\321\347\335\275\0210[\275H\340m=\233\205\235;\277)\306<g\332\255<\035\310\256=\316\370\346<\364\317\354\275\313HS:\206\255\327<\266\301\002=\005NC=\317\303|=K\362h\275\007\266\255<\371\253+\275\265\275\311\274Q\032\240<\271\031\027;\206H\310\272\227\031\260\275\326m\323=\362\321\000\276\247\337)\274\335\003\251=\243u\032=\004\377\204<\264\362\227=\203\022\223\274\021\225\226\275Q0\031\275\306{\322\275\372\357\333\274\207\363\231\273\333\307\250=\224Ub\275\317\337\337\275\035\347\204\274|L-=)\013^=\003d\276<\006\333\300=\\\340\330<\nhu=8\276\204\275\355O\353=Q\302S\275\250\334\360\275\344\206\304<\037\307\302=K\256\343=\034\237\363\275NQ\330\275.\024F\275\246\327\204=\374\026\225=D>d=\302\\$\275\231\245[\273\030P<\274\2359M\275\2253\274=K\034\230=XjD\273N\337\202=\004\311\265\274\202\330\357\275a,\257\275\354\323\257\275\211I\000>\215\336\212=\236c\354=\345(\371=\221<\206\273\3469\373<\'\300\346\275%wh\275N\272\342=\320rh\275Q\243\230\275\376R\000>\202\322\322=\354\030<\275\330\230\304\273\365(6<TN\375=\3379\207=\324J\335=\303\330\221\273\030O\347:7\367\343\275\246\221!=eL\334=\034\306\234\275\336R$=iS\214=\235D,<i\010\342\275q\005\323\275>R5\275\215\363\211\275z\331@\275:~\000>n\262\241\275\332\352\006\275\251\304\240;\330v\363=<7?\275\340+t=\261\265\311\275\373\001=\275\361\267\256\275o\260\247\275\252\334\301<c\022\325=\013\341\342\275\027\257\330\275\250\225\264=\364z\311\275\261\377!=\350\332\202=\325\225\212\275\006{\311\2750\320\250;\';\261\275^o\221\2743\375\376\275\202O\207\275\362^\245\275\005;\304\275\321\236\245\275\005\372\265\275N\230\\\275S5\232\2742c\023=\376\377\201\272\177\276\272=K0W\275\330\035 =\177\301\t\275hpo\275\356\325\330\275\376\234\353=t(\370\274\272\257\273=\344\343e\275$\030G\275\207\020\320\275W7\250\274{\016\267\275\303h\247=\347\324\326=HV\235<\325g~\275\306\'\374\273Z\'_\275I\360\300\275\217\265\263=\243\220\353<$\n\001\276\236\234g\274\343`\210\275U\271\352<aL\334=\375\215\"\275\t\245\224=\034\305\213=\313h\000\276F3\352\275\376{c=\004\301\262=4r6\275\201j\343\275D\253\013=\254[;=\214[\'\275\031R\277\274\345\204\206\275\230\321\224=K\302\371=\275\326 =\270\267U=\006\214\245<\2432\213\275\355\267y=f\220\302\272~\234Z=\025A\376=6\241\202<\030\2550=\343\343\210=Fe\024\274\002D\310=+\035\333=\224<\341<\013\333\023\275\003H\300\275\361A\243\275[\212\313\275\027\013G\275\257$\231=\2517\352=\217E?=\352\022\232\2744v\221<\231j\000\276\317\026\321\275e\032\230\274\021\276\370\274\371s\324=\367R\261=\344Fn\275\335o\267\275\314\345\262\275\021\363\315=\273\r\001>!\"\354\275B\020R\275\373\273\347\274\202\320\000=\356\375\357\275\277\025\020=\336d\270=D\327\226\275\327\361\202\274c\025\251=\210\213\337<\334\233\227\274u\246,\275Iu`=\253:\325=E\215C\272u\313\252=\237\032\357=)\304\337=\240\241S\274\341\023\035\275s\021\366\275\356\002+=\020V\230\275?1\322;H\233\265;~\250\304\275ZP\274\274R\264\346\274\343\233\232\275\024\225\013\274Pr\032=\251\337\230\275\'\325\333\275\222\\\372\275\214j\365=\362\324\356\275\250\305\347\275F\263`<\206\300\315\275s\203\350\275\202b\000\276\001f\271\275\n\254\213\275\245\021\277\275\031g;\275!C\213\275\326\356\336=\322\'\374=\000g\277\274\"\322\201\275\316\222\325<\004\210\341\275e\312\247\275\336\334\315\275\360\253\031=\337|\233\274\213\231\210=\225\376\311=T\211<\275S\357\336\275ev\357\275\371W\210=E\321\373=\364\214\351<\311\225g\275.o\013\275^f\224<qY\311;\247\362u=\223\306\233=\000\356\311=re\375\275\3328\342\273\202\352\264=\373\364\344\275\022\326\240=wu3\274\375\251\315=\003\212\267\275\036cf=pB$\275:\020`\275t\367\324\275c\374h=Z\250\365=/\351\330\275\207;\245={\034\371\275\272&x<\320\344\212\275\227\347\024\274\227$\332<B\206\223<\316\365\201=_\304J=m\250\n<\201-\274=\344\022c<\206\300\352=\255\205\220\275\035\236.=b\031\236=\217\360\326\275s\307\201=\355\223\241<\035F\221\275\025@\306\275U\213\272\275\307\373\311\275\260\252\340\275\260\274\210\275\371\372\220\275\360\363\246<\370P\363=\"K\316\275\262\263\256\274\205w\306<M\276\257=\325\027\265=\310\265\237\275v\200@\275\025_\302=E\374\252<\270\272\241\275\323\327\375\2756\374z=v5\326\274v\273\332\275\314\351\374\275\361\016\331<\335\337M=\376\324k=P\022\033\275\273\232\003\273e\021~=t \346<\251a\353=`Q\001>\035\302j=\304\203\342<]\256(\273\306\246e\275~\202\363=\374\274\216\275\363\236n\275qa\371\275\363pD=\243,B=\226tz\274\351\241S=-\376\203=Y\246\303\275\021(+\275\271\331B\275\027V\366\275\033|:<\243\204\215\275\256\230\241<+\022\356=^I\224=\372\260\025\275\030\205A=@s\356=\226p\030\275\264\336\304\2744\333\225=\324 \366\273\237G\275;\376\r\312\275\247g\214<\212p\311=\353y\354=q\007\260<\006\371\"=\225\346L\274\210F\317=\311=\014=\2774\001>T\250\344=\260\254\206\274\337l\357<d@\250\2755\245\272=\230\353\375=Q\000\271=\231YF=\177\211\245=\373\361\346=x\262\314=\2451\260\275v\325\361=\244@+\273nN\215=\212\267\225\275\223<\244\275\336Y\345=\307\350\375;1*}=\202\377\230\275\211\231?=1\2646=s\337\305=\277\243\303\275\242J\321=\366\326\336;\037\020\334=;\014\353\275\273\263\250\274r\306\370=z\235\t=\025\317\301\275A\212\206\274r\215\213\275\373\000\232\275\365\223\260\275@u#<$\014\242=\305\342\307=-\333\202=|\231\360;?\010\340=\376W\215\275l\235\355=\312\023\035=\372\035[\275|\333\376\275{\346\343\275\217y\200\275G\235\363\275\013^\212<\317=\371\275\tL4=.\030\025<\016L\375\274.\246\033\273)\374\225\275!\367\027\275\257l\033:[\007{=\356\334\200<)\207R\275w\020\323\275\360@\365=\177X\232=\200V\301\273\216\213K\275z\0347\274\226\0213=\014\334W\272\364\310p\275\305z\324=e\205b=\313\034\230\275\376\300\034=\036\353\226=\030\277\333=\273\233\224<\322\277\373\275\244\336\367=<]\200=\225\245y=t\t\367\2752\253,=\3249\227=k\304\336=m\231\232\275\027e\313\275\214\252\277=\354\226\306\275\307\320\346\275\237s,=J\324\335=HV\375\274>.|\275\025Q\367\275\005\000a=J\212H\274\377\212\261\274\235\357\257<\033\273\235=\367\306\311\274(k\361=$\355\213=\335\253`<k\001\312\275.\313\266\275\263\001\306<x\310\250=RH\251\275\376`\371\275\010\213\241\275r#\235\275\325\243\376\275d\266\377\275b9\017=\231\034\357\275\202\277\343\274\014,\027=\354w\001\276\205s\315\275,\347\216\275\253\025O=\321\013\003;\367\336\327\275\014z\020<\367/a=(\032\366<\334\231\202\275\313Je\274\221y\301=\356\002\315\273\256\351)\275\212\366\001\275\347\361D=]\032\255\275\211\263\370=l\342\321\275\237~\020=?\344\327\275\274m\202=\320\302y=\261\365\343\275\036M*\275\202uo=MH\210<$\326\265\274h\254\302\275\327n\215\274\335\235\323\274\365\2032=\230b\303\275\322\006\262\274\324\344u<\001M\203=\314c\t\275\357Z\033\275M\340\226=\ro\241=\001\323\022=%z\272=;\345\314\274O\t\333\275\217\205\235\275\232\374\001\275\356W\266\275\232\026\020\275\2029\256=\323\372\327\275\213\311\225\274\215hJ\275\274g\261\275?\317?<\330bU\275>j\024\275\262X\261=\331z\334\274<\274\223\275\336\270 \275\342\215\363=\2125\322\275\305\370>\275\010S\250=\345\267\224<h.E\275qDy<c\331\213=u\004\316=r\021Z=\242H[\274P \305=\302\323\257<,\025+\275e4\217\275\233\352\244\275\240\037\362\275\235\024\320\275\311\346:\275\205|\371\275,*R=Dx\203\275\242\256\360\275\350EX<\334y\277=]\021\354\2754\375\231=\304\023\036\275`\027\265\275&\202\333\275\317\026\027\275I\022&\275\222\347\305\275lS\374=\354g\257\275z\336\234\275\342@\370\275B|\302\275\016\372V<\017\004\222\275\204\353,<eL\216=O:\325\275\363\207x=\257\004\360=\244h\021\275q9\362\275\350\345\263=\225\273\222<\303\371\235\272V\356\211\275\343^\305=\227\274\225\275\244\372\262=\375\221\241=\220\3471\275\305k`=\325\1775=ZxR\275\'\265\362\275W\270\240=)\376\205\275\300\017\340\275\373\234\256\275\364\\\265\275\206\033\233=\223\001\253\275Y\226\024\275\000\014S<\326\002\316=K\337\332;\266\311\213=\270+\014\275\357>-\275\3417\227;\277\256-\274>6\000\276\027\244\204=\327\302\201=\332\007(\275.\035\221\274\347\257\276<\"\nJ<\354e<\274\316]\254\275\370\007\352=\032\032\313\275\016ek\275b\261\301=\376j\326\275B/\355\275\030\234\315\275\345v\251\275\220.\340=\tal\275\033Ld\275\353\271\006\275d\360Y\275\244\035\200<i\345\352<\022\"\234;\006f5<\037Q:\275\313\220\235\275\240\257\327<\314\335*=_%k\275\301\340\373\275\010u\254=\231\256?=\203\322\226\275z\351~=\203\251\234=\336FA=\005\262\224=\344\334\366<\014\020\200=\265\032\205\275\341\252s\273\234@K=\371c\375=\245\001\232=\031\257\316\274\352\316q=Q\002\205\274\270t\277\275\022\013\214\275Grl\275\265Z\n\275a\250\323=5Z\016<\374\323\276;\351\204\243=O\\\227<6\026\324=#\346\360=\0279\270;\330\256\177=\017\301\217\275R=\360=\225\216\240<^\361\224=\274d(\275\rw\275\275\243\334\006\275\037\307\302\275\262(\222\275\301\302\310\274\222\371\213=\232m\310\274.%\230\275t\031\'=.\025\317=\230N\270:\300\273\272=d(~<\373\000\377;9\010\341\275\t\235\202\275\357lT=\226\270\201<\257\366\000\276R\372p\274\310\214\316=2\215\326\272\207\357\301\274\204\260\320\275(\307\271=\023`|\273\260\311_<K\346\211\275\251o\353\274~\266==Q4\262\274^\216K\2754\332\307\272\224\316\215=C\341\346\275\236kl=\027\270?\275\366\326\250\275tZF\275\"aZ\275\207pm=Ky\262=\223\304\314<\212w!\275\246\326\324\273\307\250\320\274!\006\340\273\342\271\255=Xb\332=}\227\315\275\307\202\017=L\007\003\275\230\233s=\257\236\t<\226F\232\275\\\326\305<.\307\367\275z\212\324<l]\205<\366\361\354\2746\025.=\365\t\305=\022\257\236=\264D\377\275\034\004:\2740\373\014\274\013\032\221<\253#\257\275\256\250#=q,M=\250\315\220\275\264\002\225\275\217\363\370\275X\023\353\275>\220\311;8R*\275x\001\225\275\242\274\220\275Z\316|\274!\352\320<g\312\242=WeQ<\025\340\233\273/{_=dk\t=F\346\340=dg6=\021\200>=\337&\370\275\t\214\031=G\200\377=\265@o\275T\\\246=\317\021\350\274\354+\201\275H\315^=\313)`\275Q\351\306\275\325\370\346\274\354n\251\275\207v\254\274v\255\356=\254t\247<w\311I\275U9_\275nt\246=\334\301\361\275zQ;=\343\207\273=\375@Z\275\033oB=(\362\214\275\230\375`\275~2\354\275\225RA<\302\264\350\275r\311\321=\037\263\324=\323\305\362\275k_\315<\022A\231=-\245|=\260\310\332\274\t\037\031\274^\373j\274\362\232\261=\237\272\361\275Kk\317\275\362\227\337=\327\215~=\006\253\206</Q1=\370KG=\341\243\225\2737\024\375\275\354\374\363=}J\226\275\201.\010;\334\002\257=y\213\253\274\250\007\220\275\005\330\020\2751L\201=EY\331=\262>[\275\305!&\274S3\000>]\204\263\275e\203l=\367\201\312=7K\230\275\316\261\360\275\357)\373=\226\3256\275\253\355\327=!aj=G\001\254<\205A\370\275i\325\234=\316_\002\273\262b\212=Y0\276\275ohM\275//o=\263\347\326\275\247\037\217\275Zr\313=\2214\255\274O\227x=}(\025=\177\315\251=\267h\323\274\002\235 \275\353W\201<?A\244=\237\245\346\275\036\274\206<\031/\332<\031\357\320\275\366\216\250=\332\303\312\275)\350\326\275\325c\275=\253@\300<\322\227\362\274F\373\000\276\266\377\265=\255[\267=\237O\367\274\214v\326<\226\336\327\274\300\377\226\275[\036K=\0340\261\274\004\336`\275\315c\340=\254\316M\275~z6==\203\253\275<\014\027\275\311\201\236\275\335\317{\274\205\274\212<-\350\241<\336bG=T\003\325\275Hq\330=\276\373\275\275\271\005\244\275\343\'\276\275\034\203\306\274{)\355\275\032\357\236=\035\000\247=\\ \375<*Y\034=\251\223e\274\276\322\35795\"\346< s\323\275\341q\222=\271\207%\274\341jR=\272V\233\275\266Yk\275w%\333\273\250\356\327\275\303}\232\274_,\212\274rp\213=\006\225\246=\017\211X=y\205\307<\2608\256\273\3559\027=\320\275\203<a\337U\275\220\333N=]\014\376\275\350\254\226\273\362\204\353\275\277\270\334\275|\333\302\274o\331\377\273\304Y/=\376z\357\272\305\215\223\275\207\266\352\275~\272\350=N\256\216=~\264\221\273\005v\357=\336\206z\275\342.Y<\236\025\270=\007\367\367\275\234\007\n\275\315~d=_\206A;\377\001\342=\225\201\017\274\352j\013=>\022\342=^k\242=\264\276\330<\203M\364\274\333\247\353\275\003\226\215\275O8\001\276Ca}\275?Q\207\275\305\241\365=\010\204`\275\216\261\357=\214\014\243=\257\361v=\006\373\261\275r\026\307\275\357\177\376=\255+\332;\256O\377\272\255\313M\274[8\302\275\241\340\256=@p\354\27494\321\275\027\215\264=\240\217(=\272\\\273=\346\232\331\275}\315\343<S\334\253\275\276\277\246<^\311\373\275@\336\236\275 \001.:~\302\251\275\025\037\212=3}\234\275\027\312\203<\352Y\213\275\277\253l=\3617\315\274\301m\270;F\217\240\275\242\210\301=\231\331d=\240\375\365=U\373\254\275\371\206\252=\026\342|\275\312\356\374<\202\322\226=\335F\001>\204\345\366=\276\023\274\275Y\245\332=\346\350\004=\213n\374\275\273a/\270\032k\212=\265\"\034=\037\327!=\3255\254=\310\232U\275\240\031\256=\341\211\203= D\222<x\317\344\275\265u\017=)\232\265\275T\222D\274\325v\217\275\224\226\036\275\230\010\341=\005|\243\275\214\221\312=S\371\026\274\264`\253\275\212\031\333\274F\326P\275\316\356,\275+\347\"=\205\231:\2749=\371=9\355\325\275\271l\327=\233\030\306\275<\371\234=cQ\202\274\327\327\177\275\021\350\007<\244\252f\275k\rP\275\336\322\211\275\267\0362=\245w\270\274\2125\315\272\373\341N=\267\344\235\275/xH\275\206\013Z;(\301\240\275\247\274\374\275\215\366\376\275\201h[\275}\313\243\275\266s=\274@{\353=1\250\347<\244q\274\274\213\251n=\2276\004\275fI\001\276\370~q=M\r\250=\220\270\226\275\350\304-\275\301\227>=\210l,=\271q\214\275\023_\213=/\340\267=\336\276\003<\023c\326<LW\237\273\355\232\214\275{M\315=\251O\334\2755\200\360=\2676\375\275m6d\275x<\242\275\256\270\177=\r\3154=X\246G\275\242\230\216\2751\271\026=4W\375=q\\\335\27546o\275\237\023!\275P$\272\275E\010\370=Lc\341\275\373#\242=O\211\244\275vg\242=\211\320\311\274\022\032\222=h\246?<\007.\372=\344\016\257\2759\303\226=\023R\363=\220g\363=B>\256\275\352[\330\275\245Mw\272\230#\333=0\266\206=\352\032\250\275\327\253`\274\317\224\004\275_\320\255\275\346r&\274-\003)=7V\003=%\365\233\275>\375\251\275\351\247Q=-#\271=8k\306\275+\367\210=3\014\252<3(\365;\032~\006=\247\220\247\275\250\031\n\273\303\350a\275+\035\364\2755\000\306\275\306,\350\275!\217\222\275\030vh;.\217\233\275\347\261\331\275\345\232\375=\365\023\000\276\036\304\212<\365a\205\275\001\033B\274\001\2517<\002\237\327<\256x\263\275\360Dj=E\355\371\274\352\314\317\275\315u[\275E\342\005\275\340\330K=Bw\271=+\034\211\275~}\204\275<\334\261\275a\235\026\274`D\241;\031\266\367\275:\211\260\275\270\201\300=\232*\273\274\373\373\211=\325\346\270=\231\235\314\275}\035\032<4I\361\275\262\224/\275\325\357\372\275K\366\323=iC\032\275\007J~\275X\237\273=\356\362\277\274S\203\214\274z\230J\272\r\004\254=\306\204\223<\242\361\327=Ge\332<I\')=\006\275\210=Y\354\260\275Y\3330\274\r\345\242=\374R\266=\377\026\330\275(\332q<#\006*=\232>\230\275\207\336\235=R~\205\275\267\223\367\274*\216\327<\230\005\275\275_\377\353\275\247v\306=\034D\222\275\2765\254\275\254}\260=V\227\000\276V\0244=\234/\325=; \321=\026\016\364\274R\2134\275w\376\252\275\243\347\232=57\206\275\273D\024\273\211d\242<\020\334\252<\346\316Y=\260\247L\275\2543\346\274\234\343\255=6l\362=\276\347\317\273\350\352\220=Ji\200\275j<\240\275f\314\346\275o*\345=P0\326\274J\346\253\274\346\220\255<\334n\344\275\221x]=0\303\225\274<W\373=.\210\247\274e\243\314;X}\206=\364\333T<]\277\320=\036C\373;X\375\000>\270\343K=\366\273\004=\020Hf\275Lf\276=\0165:=\226\361\274\275\t\301\330\275\325\342\213\275\356e\250\275\261B\202=k\303\277<.\022\264\275aDQ\275\255Mw=\3211\023=\332=\320=i\247\226=\215\376\212=o\247\244\275\325\356\255\275{\323\247=\014\354\232=\364j1=\357\3727\275 =\303\275\231\000w=\202V\275=uZ\232=8\026\346\275\025\225[\275\207\267\270\274g\203\344=^3\025=A\301\313\275.\021\250=\257\202@\275\016J\256\275\311\rW<^\232\314\275\201$\375\275\210\026\223\275d\343\037=sW\210=\332\006\322\275\374\007\236<\022 \302\275\027\250*=`h\315\275\':\323=\317cw<\'\017\360=U\271\254=\242\313\276\2756$\220\275\303\260\315=3\301E\275%2\365=T\354\302=%\300\317=>V[\275P\006\000=,\221\276<\031\350\351\275\002\027\334\274\037\372\267\275\360N\346=x<\343=Ug\253\275\030e\257\274\341V\274\275\340.\027=V\315e\275\355\006\343\275\263l\r=BN\177<\000u\263\275w\003\270\275\274V\203={4\340\275Q\266\013<<,\231<j\334K=9\271#=|\nY=\306Vv\275\245\026\231\275\032H\264\275\006\225S\275\367\366J<\377er\275\031++<\034\231\350\275v\250\215=\220};\275\344\360\223=O\330\373\273\301\350\257\275[\361\"\274\201\230\304=\260\224\337=\213\006\336\272qH*:*\004\363\274\325v\240\275L\010(\275\263\313\000\276)\272\242=\314\325\201\274\013\256\217\274\377q\036\275\266\227\222=\340t`\274/R\310=\362B\250=\255\203A\275t\242\324=\213m\332=\025\302\246\275\220P-=\271\311\251=\241{\026=\317\352n=\2207u=u\222V=\310.\354=\000\374\325=\225T\351<i\026\337\272!\022\200\275\2259\370=\233N\r<T4\034\275\220\332\205=\257\207E\275\034\331\215\275N\220\301;\206\375\233=,\206x=\314\263N=BXo\275\237\264\341=\306\005\323\273!:\262\275\227\256\302=\363@\033\274\227\361B\274\315\212A\274\273F\231\275nS-=\017\214\233\274\265zA<\306\371\341=\323\311\341\275B5&\275U\t\216=\351Us=\r\253\021=|\022\272<\370m\357\275*\320\274\275h\272\302\273\372\220\324\275\n\237z=\022\234\273<\213b-<\325S\353\275\344\014V=\233\026\225\274\026\351I=\004-\362=\342w\0049\034z\371=\302\311S=\300D\373\275\351\265d<\360\223\276=\3126\023\273\032\260N\275\344r\224\2753\214\332\275$E\277=\036$\237\275pAd;\334\311\360\275d5\317\274\350\320\227\273\261-\302\275\365\240\367\275C\rV\274\307\262\246=\032U\221=\216\251\370\275\232\033\353\275\275[\334;\315#\261=W\0226\274\255\267\245<\334\235%\275\307\032\250<u\352\251\275Z\307c=\364\363\227<wT\027=zS\334\275\264\215\362=\025\372_=_\177\271\275$S\370=\365Dl\275\237R\375\274\330\236\356<fm\371\275\265W\276<ut\255=Qn\000>\266w\206=\367~K=KXs\270k\177\337=\032[\316\275;\217\321\275o}\010=S\031\260\275n*S\275\233\265\321=\303\343\235\2756\230\274\275\330\330\217<\334}\263\275q\\\263<*u\t\270\026F\266\275>\304\307\275\236\266\320\275$1\255;\036<*=F)]=\261\273,<h\370s\275\3031&=T\024J;\203\246#=\364\323z\273B\275\357\275\340\251\253\274\230\210\273\274\2131]=\301\027\253\275\201>\302\275\351\376\347;\345H\000\275\361\035\220=\314\016\013\275\374\037\226=_\006z\275u\250\205\275\314\362\236=\370\323\273=T7W=\373M\372\275m/\014=\261\031\200\275}\002\274=\261\352\232\275\327m<=_(\372\275}\005\301\275\004Z\307=\213J\261=\330O\254=a\n\271<\374\367\200=\213\277\370<\366\344\345\274\025\243\212\274\026\257\240\275\203^\344=Sy\000\2769\265\010\275\226\\\224=l}\277:\236\312\305=\003v\240=\206\275\347\275M\035\005\275]\341\246<\366\274\333\275\365\243\370;\253\314\231\275\025\002\311=~r&<{\220\222=\020d\246=\002\007\325=mK\331;\241\312#\273\376V\362=V2L\275g\310\205\274\2260E\274n\276\333\2754\302\352=J\327\357\275yw\303\275\355r\252=P9\243\275\0023\351=\200.t=\367\026 =\353\177-\275dT\333=\346\\\234\275\346W\315\275\002\354\370\275\311\322\315=\346\337\326\2750\276\247=>_#\275\277\320\206\274y\262\223\2733\006\366\275\332\215\200\275\350\366j\275~\276\352=[:\334\275R\035\201\275\216\327\237\275\303#\271\275iR\214=\031xB\274]\363\321\275\2727\206\275\214\200\222=\0318\323\275\202\3220\275a\321\311=\017\335P\273\361\323\367\275\256n\353\275\317\022\304=:\270\004=\317\376\371=\320\031^\275Q~Y<\004q\346;\200$\237<Oz\224\275d\001\354\275W[d<\231I\334\275\023\263-=T\037\334\275E\344\220=\373\"\213=I\235\n=\200K\235\275\206\275\270=\250\247\236<R+\373=\307&\327=n(\305\275\252\334\374\275\262\024\374\275;\314,\275qq2=\224\337\215\275\270\023s=\263\236\023=\331\021\374=\330\013\231\274k\013\374<\242\311F\275\360f\336\275\\\307\275\274\261\235\273=\343j\322\275Qg\236=#\356\334<o\362N\275\210\202p;<\310\372\275\303\332q\275\220u\257;\253]\323<(\372\310\274\177_\376<N\352\\=\222n\304=8\347\264<7tv=\024.\000=*\223V<*U\216<\224\256z\275\224/\233=\320b\253=\241\233\311=\337\373\332=>\311\253\275@\023H=\227\210s\275-\235\375=g\356\201\275\250\200\233\275\311\361\234\275\251\367\307\274\006\203\273=\017I\"\275\221\320\344\275\002\231\252\274\312\363P\275o\213\203=\361\215\220\275\212\322I=_}#=8\362\344\275\020\224\274\274\\\363F=W\201f=-V\243=\242\241$\275\275a\310<M\nP=\366u\200\275p\240\023\275\265\330\000\276\036\204\357<\331!\377<\216Z\271\275c.Y=\325\237\257\275\251!\241\275\\\002:\275\204\233\370\273\351\312\304=k\007\304=n\232\350=\010O\340=1\005\235\275\\\303\027\275\345\277\257=\206?\252=8\377j\274=\237\300\275\362\247\345=4\341\024\275\321\211\304=\240\221\242=y0\215\275\251\010\244\274Z \224\275W\253\210=\200i2<X\025\240=f\022o\275\324 (<\n\352\365\275\r7\335\275\2412\273\275\243\343\200=x6^=\013\220\000>\004\277\005=K\201\234<\024k\314\275UPK<\250\205\031\275\324\230\222\275=i\250\275\236\000\001>\2437j\2750\035H\274 \335\241\275\2205\342=?\036\320=\262{4\274\371\006\037\274\357\236\251\275F\333\361\274w\257A\2754yK\2750Z><Z\362S\273\262\227\340\275\242\203\273=C\022E\2747(\240\275\326\364\024={\253m;\216\027\002\275\304\332\344=\343.\n=\333\301\373\275d\007\256=i\212\354=E\346(=\371\222,<\304k\333=\265k\315\275d}?\275\250\3067\275.\316\310<|\205\364\275\375y\034\275vs\304\275L\272\255\274\340\366\277\275\304\304\244=\363\252B\275\2436\304\2756\376\300=\\h\177\275\374k]\274\177u\242<\2378_\273a\304\276=\223W\264;\316\364\335=jOT=c6D=,{\210=?]\325=Z\224\315=\340\023#=\225d\222\275\251I\237=!\010\343\274\033m\305\274<Ex<\333\203j\275%\227\332=o\305\336=\235\346\315=\3565%\275f\315q=\267\315\377\274\r\241\204\274\242\365\251=9\373R=\'\365B\275\316\343\227=q\222\306\273\222P\251=q\367\206<\364\210Q\275RT\200\275j\374\031\275\272\014U\275\233\257\177=\377\362\204=\022`\246\275\330N7\274[\223_<\334\207\345\275+\343\256\275t\343\340=\022w\234\275\224\372\';)\002m\275\334Q\r<\267\310\373=\206\3726=2p\345=\243\032\247\275\345\267\334<\2646\251\2757\361N\274\352\t\243\275\"C\350:A\267\344\275\033\266\305<\212\t\204\275P\026\270=\244\261\277=wG\215\275p\337\277=lI\317=\277[\363\275@\327\014;\206\017\257={\n\266:3\342\344\275\257\332T\275@\223\321\275d\345\204=d\357\214\275>\307\361=\244\251\315\275\322X\320=\264\325&\275\274]\263\275\275<\001>\240[\362<X\215\305\275wE\262=\322\030\322=z%\356=y^\224=\333\002\344=\2542\235=\263\225 =\233\352\360=\347\273\232=\324o\225\275\373\242\022=\337\300\316\275\272t\323\274\320\r\352<\351\t\315\274\325\334j<\337\177y\273w\374\331\2755\253\270;J\314\335\275\377\243\315=\330\037\253=\213w\253\274\241tg<\226\336\232=\235\203\273=R<\200<\035\205\271=\2711.\275\033N\221=_n\001\274L\362\327\275$&\317\274Z\037\274=\346\016\241\275g!\033\275\264{\312<\030\276\007=:\362\242\275\261G\200\275u\364$\275\320\177\277=\010\245\324=\224\230>=\364\323\357=`\2234\275\270\'\337\275\'@_\275\340\213@\275\311\253\274\275\260\261\222\275\0046\322\275\017\377\325\274\311\177\211\275\032\257\271\275\334n\224=62\"=NN2\272\223WK;\311bj=\222\274\330\275\003\336\240<\310\236W\275\261\004\003<U\316\240\275\325\034\311\275\226Kl\274\231Me=B\307\266\275\230N\307\275\277bf\275Db\277\274B\000\254=\220\216\017=Z\264\214\275\013\370\274=\323]\343=n\260/<(C\004\275\332)\261\275?\032\327\275\037@Q\275\356$\'=\033\025\243\2754\242\323=\2124m\275%\340\212\275[p\204\274\275\345e=\013zr\275\230\356\247\275\307\312\335\275\370\001\231\275\334-\206\274M\331\212;&d[\275\273\247\302=9\003\004\275\343eC\275\214y>\275\254\213\310\275\265\351\331<}\324\326\274\004\265\274\275\221\032+\275\277\372_=g\230\226\274i\301\207=V\372\257\2754\310W\275\351\211\260\275\332\236{\273\322\355Y\275e\201\262\274\233\342C=\310r\255\275\347B\271\274LK\212<Z\272\207=\177\330k=\246\300\377\274\203y\201\275C.d=MF\206=\326\327\361\275\273\275\207\272\262\232\336\275#\200\265=\365(\244\275%\325\232<\311\257\353\275e&\226\275+\272\334\275j\257\030=\373J5=\210\316\317\275\220\272\232\274+ \324\275:\022\273\275\371V\352=\0034\262=\365\356\204\274\010\350\n\275\325e-\275\201\302\364\275\262\247l=\236\236\271<\235\270\007=:\027\313=S\271\316=\333\206\335\275\223,\376\275w[\240<*\310\305\274\201\363\360=\337\223\307\275\177\257\213=R\211V\275k\201q\275\272\230~\2759\275\241\275Q\242\273\275\200\221\347<j\024\334\275\375N\253=\215&\221\275\367p\r=\327\356\250\274\212\017f\274\023H[<\342\215\267<P\336\351\275(\020}\275T\222\347\275\227TP=\247\323@\275@[4\275\253\336\265\274%\207\217\275\261Y\366=Pe\253\275\221\261&=;\206\200\275\206\007\"\274\331\232\345\275\367x\265<\272\253\214\275\333\236i\275\340\020\342\274\345\205\001=`\362$=\310^C=\353^\037\274\237\006&\275\206\243\003\275\246\364\307\275\010\034[\275|7\236\274.U\247=l\372\264\275\371\005\002\274\"\327\341;7\372\207=\374\351\332\275\002)\330\275{V\213\275\271\n\317=\3269\354\275\205|\204\275C\313}\275\344\275\207\275\364\312\365<l\316\034=\007{\340\275\365\307\216=2\261\275\275\030\370\243=\363\213\224=\267\324~\275r\370\341\275\341\307\357=\241\267\334<I\007\346\2750~\222\275/\034a\275\233\"i\275\007\021\222=h\210\344=\003?\206=\313\266\370\275\254\327\261\274\002\t\227\275\207\256\337\275\367\330);g\245\255\274Bh\264\275\336\237\212=\363\246\333<\221\276\036\275\021\234?=\215a9\2750\301m=S\n\201=\271 \272\275l\002\221=\277\317\303=<(~=\036&\270=\323\333\222=R\020\202\2750\321\236=\324q4\275i\032\316\275\037\000\007\275>%\221<\367\263V\275 \305\221<X\305\025=\233\315\233={\374\272=\224\363\327\2745\023<\275\211\306*<\n\312\302=\030p\275\273\372\202\376=\327\\\232=\033\367Z\275\300\031\226\275~\016X\275\240\306\353=\236\264\353=\252\244\301\274ok\303\275\325u\244\274LS\311=\233ns\275\016\276\271\275w\352\315=\274q\331=\361\007\022=8\313\037<\246Q\235=\362!W\275\005`\372\275=\036\254\275\375\307\013\2745\205q=\n\020#\2751\020\026\275~\227\002\274\237\342\223\275\243\3523=)f\214=\264\352\250=e\025\263\275\367\324\227<\245\375\352\275\374\201\214\275\334\336\214=Zu\207\275\363\241\342=\332I\311=\032Y\352\275\251!\343=\203\267\200<E\321\356\275\316\034\343\274\242K4\275\267zU\274\222E\357;\330j\200<\321-\341<\372\241(\275n\251b\275\032\242\231\275~\324n\274)5t;\375\211\323\275\306\202Q=b\230{\275\026\242h=\346\324\263=\212Kz<\200\341\020=\260J\214=\007D?=I6\231\275\332\004\232<\307\326X=\356\021\273=\032!?;\366\035\036=\367{X\275\'\320\r\272?\254\"=\206\355\341=\303\250f\275\334\204\027\275g\365B=0\340\301\275w\027l=\327A\224\274U,\316=\273~o=\326\231\300=\231R\314\275\326\350\350=\324v\271;\000\252\223\275%v\r\275\014M\220<%>\312\273\003\034\356=+\241}\275\"0\340\273D\242w=hi\245=\234E\205\275\2533X=tz\215\275G\322\217=\214\']\275\244.\341:e\331\240;\006U\364\275CJ\006=\326k\263=\334k\341=\001N(=\321\364\245<\300\322\331\2756\367\344:\0372S\275@\272\226\275\236\375\242=\327%\322\274+\327\255\275\252\373\244=\210]\331\275V)\246=&\013\364\275\230\r\364<f#\027=\251}\306=\357\024=<\260mj\275\356\336;\274\246\245\363\275\257j\227=\200\254\374=\214x\343\275\005,\367=\325(\242<\260kE=\004J\326=-^y\275\351em\275\305\266\334\275\344\333e=\t\244\373=\210\335\226\275\261\tk:\200A\204\273\331i\352=\2209\302\275i\177A<|W\213=\274\207\247<\000\307\314;\273[\243=\373\007\215;\\w\323\275\027n\001\276\346\302\244\275\353\236\352\275\202t\353=\351\325k\275\021\036\226=\354\177\336=l\213~=\201\300\n=\214\2446\275\342!\367\275\215\010\035\275\256\207\270=\352\032\255=Ax\220\275\210\203F\275\222\300\224=\032\272\205\274\212\341/==\322\336==l\202\275\027F\010\275K\376\370=\021\314\026<F\366h\275\n\347\327=q\330\220=\221\337\301<\246\240\343=\033\024\352\273\336\035\275\273\032\207w\275t!7\274\016ER\274\347\332\364=\337\300\206\275\272\017\322\275\367\007\255\275\227\301\263\275r\rO\275\202\363\n=Z\375\200=\020\211\026\275\023\260B\275\232l\357\275V\007\005:|.T=\277\017\355\2757\036\021=\tC\313=,@\244=\321\261\322\275\324\013\333\275\007\n\313=%\267\332=D\017\243\2734\005\341=\306\206\334\275\352\213\271\275\303\206\200\275\211\204\335\275+A\270<\260\302\324=J\373\231\274\236ic=G\016\262=^\017\367=\001\361\321\275\316S\262\273\265\034\002=\253\267\211=\355>\250\275\214~d=\236\324\000\276xv\325\275\251\215\261=\257\356\325=\312\224\250=7\351\277=@>\264\275s[I\275h\014\000>|\355\267=3]\347\275\037D\222\273\233\022\252=\351\376\346=\321\276\031\275\265\361\324=\025Rt;\3305\275=[\026\310\273\345\333\307\275h\215\215=\213\3525\275\376\034\307=!5\224:\343\014H=-o\333\275\326]\360=\010\227\226=\275\"\262\273\363\361\301=3$Y=c\350\210\275Q~\376=\356\267\302=\242\371\276=\332\335S=6\312\336=\034(\221\275\257R#\275@\017!=Y*k\275v\274\207\274]\232\373\275\247\215\017\275\261B\\\275\240*\367=\247\321\037=\221\347-\274\244\372\327=\274\204\242=ge\263=\\\361\373\275\204\203h\274\311\036I\275\255\372\356\275\252\016\363\275\2221\004<\t(\21193\001\033\275\230O\362\275\365\315\332<\344*\"\275\351\230\317\275$7\320=*\247\331=*z\361\275\210\003\315<\307\\\306\275\363\325/\274\2155\020\274\216I\332=,b)\273W\216+\275\201\247s=\376)\271=.\261\333\275\025\321\337\275Z\363\226\275\021c\371<\233T\005=\254&\226=\253\305\333\275\260s\001=3\007\271\2759\230\326\271\261\332\244\275\232\177\307\275\267\230\251<G\325\027\274[\210\325=xG\340\275\202r+=\2430\035=7\305y==\023\014<\261\227/\275B\262\374\275&\304n\274\375\323T\273\212\322\204\275\234(\361=X\344|\275\340\306\223\275\362\255\000\276\200-\312=\355,\211=\027\035\245=\252\3563=\230\031\255=\373\220\371<1\333\220\275\300a\225=\253\206n=\263J\230\275\351\344r\275\331\013\270=zoh\274\371\314\357\275\271\227\272\275RW7\275\347$\327=b\263\035\275\310\337\021\275\237\334\355\274\013\304>\274\276\273J\275\323\332Z=s\033\247=\341\030/=\253.\305=\317-S=\367\271\361\275\3072\344\275\213\324t=r\216\253<G\302\001=\244\022@\273\251\300[\275\335\027\000>Q\335\t\275I\275Q=)$\226\275I!\220\275A\254\263\275<\357\372\274\031\243\221\274\363\t\337\274\352!%\275\351\222]=U\022\257\275\003\334\261\274\177z\343\2753\264\337\275\376\341\333=\317 ,=\314\035O=\r\233\253\275\024\347\225\275\006]\247=\230\217\344\274\007\357+=\003\3326<\367\300\217\275\013\\\204\275\234\037\267=\263\242\360<\211\317\216\275;z\206\275(\210\366\275V6\373<\265\001c=\354\207\013\275qb\267\275:\303\301\275\320\330)=\231*\217=5\363\203\275\312k\330\274\352\2340=\337\223e=3\211\033=d\216\352<BB\270=\211\016\206\275;15=7\331\341\272\234\343*=\336\333W\275\327\242\353\274\353\n\201\274 \262`\274p\035\340\275\213\332\304\274gzA\275\370\367\232\273-\022\304\275\260\0247=\344\334\220\275y\023\322=bk =%C\246=3\305\377=\260B\352\275N\253\031\275\023.\234:\253\032\032\275\267i\377=}\277\274=\032kc\275\344E}\275_p\373=\t\206\304\273\241\\\246\2751\245_=\331\323D=0\215\235=\177W{\275\321\016\256=.H\342\275\356a\'\275\357\337\362\274\220\375\327\275\237\024S=h\207\226\275\362\227u\275o?\270=\021*\326=\003\270\021=\200#\373;\264\007i=B*\'=\317\245\277=\327\346\304\275\367Z$=\371\341\262\275\215~\236<\027\321p\273\250\021\360=\'\222\271\275\220\255\263\27475\262\275\231hR\275b\345U\275\307\025$=O\330u=F,\375\274\227\241\352=\0219#\275\217\366\264\275j\241\353=\nG\272=\023\366\017\275M\230U\274\317$\320\275\3701\266\275\265\375\377=\373\317\215=\225\241\331\275\033\031\371\275\351\206\306=\223s\347=\310}5=\3307\000>\211\026\252\275\177\360x=K\235><\034\335\366=1\275\235=\320\275\307\275O\253\360;\265\1775\275=\344\003\275j&\377<\006 \342=\257Z\371\275lX\376\275\360\322\357\275z\034\270<\"\307\027\275cI\232\274 \354\037=t\204\371=\0239\266=\224 1\275O?\361\275wr\313\274~\340H\275\032\267\021=%\364\325\275]0\351=\363y\002=O\215g\275\317\375\002=*\360\014<J%\370\275\357o\324<\3726\300\274\304\214\320\274\205-\312\275Un\366=\375\331\026\275\241\201\250=\264\323\016=t\270\341\274}\257\270\275\352\312E\273z\205\362\275\021\334\336=z\247\273=#G\236=\332\244&=\356\261\336=!d\233<\030\301\323\275Z\202\247\275\217\342\032\275\3412@\275\005\250E\275\257\300\303\275r\210 \274\356\022\2549*\267G\275zm\343\275\273\246\263=o\360{\275\010\036\302=z\033\000\276\364\220\022\275\271\366\351=<\265\323\275\311%\016;\347&\257\275\247\200\316\275\324\366g\275+;G\2747\025\364\275@\035\230\275\n\214:\275\256^\221\275HC\372\275x\036]\275\216\302\241<\010x&=\227\374\306\275)\357\265\275.A\261\275\301\225\223\275\006G~\275\271\206\027\273N\221\315\275\321`\214\275$Y\201\275\234{d\2753V\001>4rN\27439\274=\014\315\263=@h\233\275\007\356\220=Q\233\205\275\335\025|\275\007I\274\275:^\336<\373N\313=\231\033\372;\226\241^\275\253?\250=}``=\343\226p\274\275\304\341=|2\030=\264m>=\275@\377=\032\0371;=E\220<\361NN\275\020$\373\274T\004\366=\273\374j\274@\376\267;\224\245\354=~R2=\n6L\275}]i=0\261\310=+\221\306<\232\203\271\275\346\032\232\274\267P \274\360\306\323\273s\016H\275it\373=F\234I\275e\3532<\305\305\262\275#7\035;\243W\207\275\t\\d= j\250\275S\016\227<\274\351\002\275\373\3117=50\372\275\305\024]=\367\211\274\274\005c\274=\204}\000>L\340\002\275\362Q\377<pN*=\2704\352=\006j{=\203\266\003\273\205\237\350<\264\342\304=\3753\271\2757\004Z\275\005\020e=\275\317\303\275\300>^\275\342\233\021=\315b\255\275`\365\270\275\267&\360<\271\235Y=mO\336=\335\205Q\274jy\350=bX\235=%E\331=\356U\224=S\034\311\273\242\350\036\275\264d\020=~\247\327\275)\306\230:;\350,=\330\273\361=\3315\002=\322\223\035\274\016\032\264=]\316\376\275\357+=\275\007l\274=M\344\037;\001\017\304=\355\211`\275\025\351\345<\013\210\217=v\340\035\275<\366S\275\341\361\365;\254`4\275\247\351\010\275\247\010\365=K\374I=U\317\277\275\\v[=\231\'\203\274*Q\272<\020yk;\352-\002\275\366\340\331<\212F\263\273~\207\201=*\255m\275Ue\202\2754<\351\274oJ\370=\365\271\332=W\204\276=\010\312\'\273n?c;\327\215\230=]\377\242=\005(\370\274\307\036\316\272\006\330\215\274\345\372\243\275\260& \275\353g\310\275\"\307\215=\256<\326=\366\336\001=\021^\r\275\224\205\005\274\354\002O\275\304\343\342=\222Z\335\275\373\2642=\335\002&\275\016k>\275D\3617=2\226\014=\345\'\204=\313\343%=X\254\266\275{\263\245\275\003P\034\275|\213\301\275\272^\020=\035\030\274=\363e\201\275m\242\367=2T\311=\210$\260\275\243\"\313=5?\332=\027^\005=z\326\261=C\261\271\275S;]=&9\035\275\223\361\246\2759\005\306\274>e\001\276\351\336\313\275nq\317=r\262\323=\351\003\345<\252<\265\275e\033q\274-D\215=K\030M<[O\271\274\305b\017\275\225\303\203=\211\313\213=R\361\032=GJ\261\275$>\323\275\325$\230\274\272\346n=)\020\312\273\364~H=\255A\332\274\352\355`\275(C;<\306\225n\274r\225\257<b\026\341\275\213\006\310\275\254\031+=\234\306\326\273\360\355\366\275\305\246\263=\235WG=\330L\271=\311^\330=\216}\310\275>\204\356\275OW\232=\021\335\230=F06\275\326\027\201=\225\216\\=\005\2474=\3142S\275e \313=\243\020\\<\271\322k\275\201\332\322\274\366v\023<\275J\006<PT\211<i\2541=\356\337\330\275)\005S\274\357/\301\275\321\340\305=\216n\211=\374\351\337<\034S\354=\227\256\317\274:\245\207\275\223[\364\275O\266&=\251eW=b\356\304\275\261\303\266=\277\312\230\275\322\216\224=\316[\035<\312A\221\274\214g\324\274X\t\333\275h \342\275\372\003T<\026\203\233=~\331\356\273\366\324\257\275+\332\230\274\210s\244\275\030\270c8\270\316\372<F\003\307;<\325\013=j@ =\034\026O\2753f\230;\220\315\226\275\337\t\361\275\333M\313\275B\273\324\275Cj\016=G,\010=\311\326\310<y\227Q=\267\251<=\205m\\=(\002\274\275\377@\240\274q\260\222=\216o%=7\217\274\275\255~\260=\367\"\250=\325\206>=t.\302<\211e\301\275\257>\255\275\245\333R\274\006w\270\275\305\235\252\274\351\003\274\275\225G\305=\000(\345\275\352\022#=\367\0047\274U5\273=\002 \024=8<\342\275[\267#=;\366\213=9\253\274\274t\303,=\215\300;\275\346h\330=\031Y\310\275G\334\225\274V\334\364\275\017\310\376=\214\300\177\275*R\212=\233\021\216<=\274\265=\206\000\314\275\3425]\275\243Em\275\315\337\221\275\314Y\243\275p\001=<\177|\267\274\204\351\006= \003\236=~\t[\275\034\177\231\274\251\210\205\275n\0041=,\351\300\274\217f\265\275\333\257\363=X\263\365=\017\344\221=\300\221\334=S\315\220=\216\223\246\275\373a\270\274OP\332\274\025\202\256=\271\355p=!\201L\273\362)F=-\214\373=\372\304\032\275\353\002\362=\277\261\371<\306\310\223\275\321\372\273=\370\365\327\275S\221\032\274\236d\326\274\272\'\377\275\313\206\207=\311\221B\275c\025\"\275.\332\341<a\322X\274C\352\325=\226s\001\276\372(\261\275\324bZ\275Lj\333=\311@*=dDu\275\032/\265=4\307\305\275=\313\031\275g\201X\273-a\273\275R\017\306\274(Z\272\275\231\343\021=E\324\276\274\3661f=4U\246=\3558\330\273\306\211\267=\310\262J<\0060p=\220\325\264\273\247\207\375\273\266\247\214\275\021\213\030\275\036P_\275\322{\306=O+\342\274\241\355S=\271\305\350\274\355\220\317=.?t=I@1;\301\r\333\274\256\003j=\200\271\236=\000\235\237=\242\240\300=\314\270,\274P\023A\275\201rF\273\275\276\266\274\270m\236\274[\367\242\275\034\312)=Et\332\275\014vI\275\203\266\216\275\3637\031=\032\n\265=\003.\252<\372\330P=\336\324\361\275\216\355\222\275\201\236\207\274-u\001\276\325ql<Y\010\227;u\375 =o\360j\274\216\271\266\275\243\336:=~\311\352<z\037w\275\334\204\240\275\241\033\302\275\342\314`\275\204D\332=\242\233\250<T\357\331\275\343\203d\275_\007&=bX\221\275\241\274\200=\250\357\037=\230M!\275AU\210<\244$\304\274>\312\230\274\033dz\275\361k\272=\240l\025=\3006\344=\272\307\340=\027\202\317=]r\000>\302\241\277\275ep\277=\024U\235\275\025\211\327\274\215\353\376=\223b\372=\221\347\000>\353\303\351=\324@\233=\277\270x\275\251\344\246;yv\264=\017\302\223=T\246c\274\\l\312\274t+p\274w\214\357\275\252\335\214=/C\215=\017q\016=\027\267\344\273\265\035\214=\353hS\274\256\364\274\274+\201\002\274p\363\316=\313\017\312\275\r|\266\275\325\302\347\275\232\332l\275K\244\267\275G\323\253\275\363\220\240;e*\305=,\306\204\275\307\007\303\275C\226\220=4x\252=\315\325\322=~{\031=\206\277\266\275A\010\243\2749\301\354\275<\214\237\275\361r <\321\010\256\275\004\003\211\275)\242\032=\370\372\313=~n\273\274<\223<\275\271\256\030\273\372p\375\274\316\005o\275EQ\246<r6y\275\305_\352\275\225h7<c*9=\2510s<\333\261\246\275\262u\216=\302\376s<\236\333[\273ck\257==e\261\275\257\236\315=\027\310j\275)\032\003==\224J=\213.\375\275\222\347\010\274c\305\256\275\255\247\340=&\233\261=E6\005=\261sY=\275\203\347:i6\246=2\250\266\274K\311f=\244M\253=\340r+=\264K5\275\237a\363=\257\205\241\274\346b\350=\276\376\311\275\231<\327<\371\265\266=\026\031\245\275)\263\354=\233\300\342<\035\rl\2751\240\222\275\302t\223<2l\262\275H;Z\2753\361\216\275]\324}=h\232\330\275\2324\376\275\302\024\233;\235\006k=\214U\261\274\031o]\275\255\346\223\275\326\343E\275\302W%<\217\322\201\275\367\365\355\275Zx.\2756<\244=\215y\'=L\211i\275N~\340\273\341\265\345\275\273\231\365\275\232\317\010=\252f-<P\233f=\244\\\240=\227\325\274=\311\345\357\275[\032\345=\203j\254\275\260X\214\275\004a\241=\314\232\322=\300\367K\274\202\013\356\274\034w\376=\013U\336\272\"I\272\275g\201\226=\001\235\373\275\340\367\014\275\233\214-<?nM;\025\230\315\275\307\361\004=y\373\363\274\202\333\367=\242\337\276=S\215e=\372@\262\273\237\216\333=d#\307\271\311\250\242\275\362H\261=\014\025Q\275\200\244\363\275\014\024\325\275\333\232c<&\257O<u\274\247\275\021\"\266\275\001\354\215\274\356\020\276=\216F\024=\256\337Q=E,\332\2749\2775\274\272\375f<\020\216\325=\023f)=vr\244=\254W\255=\203\213\232=\207\302\303=\345\220\206\275\333G\232<\241\333g<\243\020\000\276I\275\236\275\204\342E<[\366\331\275\024\325\237=?F<\275e8w\275\367z\220\275\374\r\354<\016\345\354\275\373\240\247\275\230\276\206\275\344O\013\275\242T\005\2755\335\202=P\325\371\275)\204\023\275\010F\360\275)\344\310=(\375c=\"N\367\275\274\246\340=\2219\245=#\351\025\275\356U\252=\273\317\266<L\346\267\273\330B?={\341\000\275\230\026\270\275\234=\371\2755\024p=\014:\222=\243g\336\275\272\334\320\275\301\000\216=\335\216\334\275v\340\243=\333\227\254<\373\000\240=K\320\225\275\374Jo\275\323\346\331\274\001\024\264=\246Z\374=\331\n\331<\320\235\336\275&$x=\240\271\316=pi\020=H1\272=xMN=\310Q\225=Q\255\226\275\336\311\325=\366\\\243=\001\'\314\275\232\317B=y\364\267=v\2541=\345\257C\275H\221\325=\001R\374=0\261\220<\321!\331\275N\021v\275g\030\203\275\367\016\"=:\356\t<\231\237B=\001c\205\273\\z\201\275\3615\357\274\344U\301<\246\234\316=\244gi<\236~\333\275}\2745=,\344\355=\031E\200=\300\022\325=\005\027\305=|\376\362=\255F\202\275\022$J=\323H\205\273\023A\310<\223\033\325=_B\271=\312\373O=/!\t8\233}R<`\215\221\275%<\311=G\016p=\022\006\026\274T\300\376=\233\315\"\274\206\0353\275\312\277\244\275\014z\334;\262\314\010\275\351\236\216\275\"CW\275vEg\275\302> =\252\241=\274_\314\307=\216\032D\275\256\306\024\275P\335\374\275+\222\231\274\324\374\371=\r\256\305=\225\274v<\332\306\\=\320\340\240=\031\317\320\275\026\277\244=`\036\202\273\322\025T=o~m\274\201y\315=Zg\021\275\346\357_\274\355\332\255=\310\007(=\356dj={\303\013\275\247g\314\2757/a=o\235w<\203S\313=\237\236!\2752\210\210\275T\310\003=x\212\331=\314\0230\274r\244Z\275\2644\252\275k\266P\273m|\305<\004\374\266=\030\207L=\257\242\343\273\300\330\233:\027\230\202=$\221x<\310\320\007=\340l\345;\313o\272\275\":\216<\226\325K=\004C\360=Ys\205=6\353\307\275\352\0034=\231\371\240;\'\001\356=?n\263=\320\232\275=\324\243\305=_\254\364=\267\336\304=\207\241\362=\202\332F=\022z\276\275\316V\302=\033Q\224<T\272\325=\000l\365\275\343\354\246\275GW\264;4\357\230=m\002\301\2733\247\326<O<\305=\361k\347<\232\t==6\362\230=\316G\322\274\275A\353\275\376\024\347=O>\270\275\314S\024\274r7\205=\262p0=\321\304\356=\024H\225\275\200\250\327=\270o\234=\025V\265\274\024\244\317<\273.\362=+\026\204<\343\264\023\274\265\353p=U\242\327<,\245\031<\224\352\353=\265Z\355\274[\322z\274\363\352V=\322\334\376<\375\356\363<\2311\263\275>\302)\275\216p\274\275L\222V<\216\327\224=4\020\377=\300\331\334=\360t\017\275S8\272=)\306,\274\322tC\274\032N\346\275\275\361\324=\362\311\365\275\360n\306\275\032\265\017=\345Ig\275\226j\032\275i\027g\275\356\350\240\273h\244\223=\n\274{\270\020\327\263\274_4\020\274`\334\231\275\232\334\326\274p\003k\275\253l\245\275\233K\371\275\377\021\025<\220>\342=\373o\005=`t\352\275\324AE\275\n0\235<\004\366U\274\320\305\220=\377\027*\275\0001\323\275R\230\240=\331|5\275:\265\325\275\264\220\331=\213\\w\275\337\017\263\274\267N\324<;\035\201=\244N\331\275%\013\232=\316\336&\274|\003~\275\330L[= \027\376=\3573\"\275\353\201\037=B\037|=I\0311\273C]\253;\222B\313\275I\237\362\275\313\244\203=}Ya\275}:\323=\260\2339=\255\007\323\275| \366=>q\376\274t\213\332\274\364\032\355\275\250\341\254\274\334\232\376\275^\211J=\377\246X\275\251\032D\275>\350\275\275d*\322\273\010_\233=\211\215\365\275\0308\216=\302\220\211\274 `\210\275\027!\005=\221\304\211=\026\222\256\275\230\342\224=T\004a<\321\035\213=LC\325=\244M\006=\206\242\353\275\347\353\'\275O\225\272<\212\234\355\275\353\300 \275\010\032\312:\334Z\313\275\035\316\323\275M\221?=\341\t&\274\226\376\006=\024|\376;\336\346\270\2748:\212=\257\3674=P\352\315\275\\)?9\232\332;\275R\305Y<\307$U\275\206\0210\275-\342\261<\016\215{\275\275\0029\275\021\032\244\275j\365\000>\334]\255=\003\200\273\275\275\350\262\274\314n\227=4p2\275\025\016\236=R\364\274\275w\344\013<\270\237\001<\336\235\232:\262I\317\275v\1770=\"Q\306<\"\271\262\275$\317\352\275~\336\304\275\230\323\314=\351\216\020=`\241\220\275\272\343\263\273\275\202\366\272\351\010\356=\252mV=Es?=G\343u\275)cU\275\375h\373\274Ug\340=\307\312\335=4\374+\2752\353R=\205\257v\275\216=\037=\032\251\220\275Q\335\376\275F\345X<\267-\271\275\037\r\350=b0\356=8\241~=\200\241\373\275\016\344\314=U\376\035\273\020>H\275\017\272\022\275\205\013o=\362>\022\274\366\347\256\275\247?\233\2747k\321\275\340\r3\275\356\035W=\005\216\000>Si\014\275)\277\337<\365\021\337\274\001\327\364=\030\221\372=\243\277\374<\220\244T=Aw\310\274`xG<s\270\350\274\335\252V\275\337*\211\275\016)\272=1\223\237=B%\312==R\334\275q\272x;,\323O;S\017\301;\234@\303=\325\341\314\274\372\351A=\310;\"\275\213\264r=\347\360\310=9\'\307<\026\365\272\275\332\233l=I?\255\275i\003\335=\350\220\362=\274\234s\274\362\303\244\273\375\312\237\274Z\322\031<mZ\367\275P\3455\275r\235\324<J\253\306=]\014\333\273d\252\213=\237\335:<G\206\235=\371\351\262\274\322,\273\275^\334\224\275L*\230\275\254 g\275$\327\034\275H>\362=\002\275h\275\27331\274\253\220\213= \363\271\275w\342\337\275}\223\253\274R@\247=2]\350\275\005\351\210\275\002\203\202=\251\354\032\273\004v\026==v\356<\207D\242\275\220\000\234\275C\310\222\275\366{B<2\272\306=M\321\202=\355\275\360=\265\307\346\275c\300}\275,L\227\275\r\271\264=\253\352<=\356S\202\275\262\246w=\2266\200\273\360\266{=\311z\257\275\242[\332\275\227\213D=2#\355=C\277;\273\213\003\330=^G\203\275\337\"\221\275b\262\336\275z\324\214\274Y\371\347<\273\312\233\273\241Wz\275\335\016L=\330\225\347\275\302\254s\275\023\263>=\033\311\230\27566\347\275\313h\205=\266Y\224=\375\372,\274\262J\333=v7\350\275\225.*=\220*\250={K\001>.\004C=4%~=q\332\237;\234\371\334\272\255]\234\275\260\335\201=\225{\220\275\335\340\374=B\225\375=\027\004-=\274%\366<\364\352Z\274\"2\351<\256q\327\274&\234\010\274\357\030\204\275\224\007\306\275\320\014\316=RY\224<q\322\217<\017\"D=\270\017\231\274\342\355.=p\305\215\275\272\345\354\275\210\310M:\260\370\303\275\236\031\337=\356\226\242=\350rH=\233r\316=\242\223\330\275\363\352\330\27499\310=,{\363\275[\035\300\274\210\"\364\275\347\241\220=!\233\210<\006O+8\252\326\035\275\033\330\360=\325]>\274S\365\003\275\224\312A\275\311S\247<\274\241\371\275\0045\265=\026\2726\275\277\230\211<}\342\245\273?\357/\275Q?\367=\027xf=s8f=\021\325T=m\355\361<o/@\275\260\267\217=\356\227\216<\202\255\327\275\271\321\313=\266M<=\305\332H<\0227\240\275\341\177\355=\356\201\366\275\320\317\336<\346\224A=\264[\334\274V_\013<\301\251\306\275[)\301\275\335\322\333\273\203s\341\275g\263\372\275\017\'x\275\017\215\326; \006\363=\033J5\274\032\372s\275@\341\230=\207\256\376\275X]\365\275U0R<[7\354=\035\353F\275M\216\221=\235\375\204<\232\266\374<\376\310\206\275\257F\005\275z\336\261\275b\251\330<\226?\177=\000\377\243=Nd\244=\267\345\331\275\212\177\n\275\322\335\200\275\334\243h=O\312\326\273\223\013\250=F\004\340\275\315x\273={a\270\275\224\275\353\275\212ru=\237)\315<\374\340\352\274\366\026z=\301\325\235\275P3\324\275\245\246\206\275\006\244u<\307\270\370\275\220\236\311\275\016*\306\275\366\021\030\275\210\337\311\275\335\356\005\274\347\207\207=\317\227\223=,\213\213=Z\325\341=|\375\207=\217\354\244=}^\005=\311A\024\275\221\270\242=.T\206\275Cu_=s\"\023=\311\031]<\'\030K;\026\225.\274}\006\274=\037\316\356\275:#\004\2745\001z\275Y\307\177\275&\367\223\275M\321\334<$\244\271:\236\036\001>%.\023\275\230^\261\275\024\203\340\275\342\300\236\275R_\200=\2552\222\274\375\330\306<\243\367\235=\372M\312\275\324z\262=\024\274I<\005a\370=g\222\341\275G\203a=\207\250;\275\341\327~\275XDn=\373\235\353=\025\362\000>\254\342\327=\355\004\300=\304\363\356=\277gM\275I\007\\\274\222\352d=\317\277\363\274&\002\274=\237\271\273\274\216\337*\275F\271\352\275\353\310\306=\022\202)\275\342d\273\274\003\324\201\275\025\216\256<\232C\355=sA\250=[\263h\274\315\260A=)w\305=uW\322=u\003\220\275\020\345\234\275\365\261\227\275\375\276\263=\316\265\371\275?pJ<7U\311=\242\224\233\275d\031\233=\212\263\327\275\021\023\252\275\356*\222\275*\236\354\274\221\256\217\275\300\262\267\275\206|\321=\'\007\353\275?\3428\275\221\337\035\275\266\362\317=\226 l<\255!\361;\202\2500\275\0247\000\276\340g\305=\013KE\275\221\206f\275\177\341J\275\236E\211=\265\362\323=\333+\343\275\350[\267\272\236\260\n=\323?a\275(\320\357=U5\342\274\272\215\204<\255\346\267\275\0225\315\275\212\266\233=\300\244i\275Od\234=\320i\323\275\264\274\271=\004Z\234\273y\271\361=\344\353\307\274\217\317\210=#\370b\275}\261\245=\326\354\336=\2325\207\275\270\034\372\275\301\267\362\275~LE=\356?\316\275O\2067\275\202\323a=\037 \210=\234\330\231=\236\322\277\274\263\027\002\274\200~\320=\317|\357\275b\274:=\030l\r=\020[\016=\334\005\007=3\025\210\274%\212{\273\366\271!=J=I\275\260\332\244\275\231&\307\275\340z\333\274\270\365\265<\007\370W=\234w\331=F\036\372\275\253M\235=\221\002\270\2754\345\204\273\260\272\262=c\r\005\275d\257\275<t\372\232\275i\357\375\274\314\332\255=q\377\246<.\261\264\274\014\206\234=v\317\377=X\302D=]_\031\275\027\361g;\0248\031\274\346n\211\274\'x\274=V\270u<^\366\024=\217\353\316\275j0\320=\374M\203=\377\313\323\274\212\271\372=\013\333k\275\302\304W=\0258M\275W\020?\275!\262\243\275\366\345\245\275k\272y\274\r\021<<\364\022\271=\343\360\214\272\202d\344\275\240~k\2758`\331=\'\337\353=\006\t\303=\311\253\327<\277\257d=\300\207\300\274K\254\313\272\233_\226\275{\265\366=J&\001\276\224\023$<O\322\377<B\335r=1\236\362\275V),=#D\260=T\001\300=fo\326<\022\t@\273\324\356\266=J ~\275B\321u\275\275lP\275\306\212\346=R\222\241<\n\347W\273Ko\271\275\022\375\337\275\216\264a=K\001\223\275\317\360\216\275V\211\017=ZYK\275\344\330\354<N\241 \275}\233\341=\014%\020=\231s\240\275.\362{\274\367\222\224<o\273\227=\346\025\365<\315]\315\274\336\252T=\347\205\274=\367%o;\376\315\016\271p\324\221\275hi\000\276\272\337\350\275VY\213=\215\024W\275.n\337=9&\273\275\020\325Z\275\317:\233=\251\031 \275\246^\317\275-\001p\275\007\220&<jP\213\275_\370d=\007\374<\274\201a\004\275\306\311\230\275|B\031\275\030{\014\275\351\036\026\275\217#\217=\3148\215\275\241\007\272<\\\262\343\275F\311\345\275BU\202=\225\331\006<J\004\221=\024\034\244\274\\B\363\275\342p\315\2759\371\034;\022\004K\275\326\224\315=\321\037#\275\215\264\360=\247\315\334=\002>s=kF\013\275\305hg=&0\330\275g\273\266=)\372\320<\033\000\341\275q?\340=T.\266=\237\035U\275\213\301%=\r/\335\273\266@\265=\334\275\316\275v\037\345\275\362g\362=\333(\321\275\307\270\203=\022\200.\275R\317\035\275\320e\334<\366\244\310=\206\360\206=\360.\376=7b\351=\313a\000>\014;\311=\264\364!\2758\307\355=!\330>=g\t<\274,\r\357<7>\310=\307\215$\275\275\265\212\275Nt\336\275ly\354=\305\306\002=\274\252\255\274}\320g=\375\250\336\275{\245\214=J\274\317\275!U\367\275\312\332\306\275\274\333\215<\274d\221\275C\232\217=`\203z\275\306\200\252\275\312\026\217=\300\217\241\275_z\032<\274\265\235\275\200\363=\273\243\230\333\274d\010\243=\377\232\237=\322\317\340\274\021\242\260\275\231\004\22788I.=\277\334\327=T\236\007\275\240Q\217=\321\022\257\274\3456\247=LS\367=\334\254\321=\2065\371\275\205n\210\275\204h\355=\216P\330=@\212L\275i\275\345\275\032a\366\275\004Q\004:D\366\352=\376\024\302\275K\277<\275\345f\241=\216L\333\275\205?\361\274\235\203\247=\353A\223\275\340AL\275;\273\205\275%9\356\275\305\362!=\024V\353\275\320\352\351=\251\214\232=\016\351\305=1\362\006=`\332g=\256h\205\275f\244\007=%;\277\275\362\211w<@\265\271<7}\302\275E\316\361\275\272\346\327=\344c\246=W3\234\273lf\262\275\306]\341=P\267$<\267\265\312=d9\367\275q?\345=\007H\r\275\214\204m\275\350\250\335=\270\274\300=\305{\257=\276\016\276=`0s\275q\177v=\2769\270\275\024\306\n=\230\352\210=\223\364\t<\026\014\233\274\203w\252=sjT\275g:\335=x\304\034\275\215\346\201\275\321N\204=\t\216\314=\375VO\274\212\272\377=q\256\302\275\317\205;=\301\271\332=\t(V\2757{\245=>\302\275\275\233\0260=\n%\254=\371P\204;\017I\356\275\302C\212\275\214\206\254;\006b\264=\203&\375\275\220\224\267=\307y\330;\037_-=W\235\265\274\034\243\335\274\351\327\366\274\346OX\275GH\224\275\316\334\242\275\246\036\207\275\352\\\000\275\3028\353=\002\245\301\275\030\024\235=\236\022V=\231\211\220\275)\316\207<\332\027a=\022|\233=\221\202\244<\'\\\022=\3250(=\334\323\327\275\356\250\027\274\275\242\315\275\301\215\314\275\224\273\224=?\240\272<\245\314\263=\211\334\372\275\352\350\361\275\312]\355=7\232\224=\351\241\273\275PAg\274\257\031\331=\002\363\323<M\035\276\275ZU\260\274\350\222\255\274K\316\266\275p+\004=\362\362\211<\251\315\337\273\002\370\365=\323\272\242=,A:=\347T\323\274\367T\344<\037\355\220\274^\351\026\275\206\333\321\275\226!9<n\002\r=Xi\206=\277\250\324<\265\223\016==\364\207\275Xz\247=\204\207\361=\r\260\355\274\0046\362\275\234\260\235\275Vh\001=\300He\275\332\205\001\276\354U\301\275Y\017\360\275x\224\376=Qq\301\275)\314\251<\035\362\300\275\331\215\r\275xn\213\275E\320\316\275\021>\311=w\022\311=\350\377\317=LPH=\313\276|\275H\005\337\275\026.>=\327g+=\216:\350=\262\343\301\275\211\277\201\275>\216\226=X{\027=\316 \376=\365\322\032<\321\225\255\275\033\212\333\275\210)`==\346~\275\263\243\260\275\244U\373\275\310\204\335\275\031!\357\275=\333\273=\377+\310<\213y\n;\221\221\215;w7(\275&0\367=|\3069\275\352\214\"=L\022\267\275\237wp\275\254\231\'<\226R\353\275\330~\317<\267\246\303:\220\326G\275\'F\361=\000\344\006<\200O\271\275\352\000\254\275\371J\372=\317\211\241\275m%\002\274\222q\231\275\354\237\271=c\326I<\000\034\"=\354J\302\275\205\003\234\275\356\'\'\275\343a\214\275\003\340\326\275\346c.\275\2279\224=\363k\350<\354\000q\275(;\031=s\342\204\275\372\335\362\274\341\253\255\275G#\253=\274@\335=a\n\332\275f3\230\275aL\337=K\320\217=(\033\377\2747v\003=\021\000\000<\t\303\304\275T]\337=\257\222\227\275R\254\210=\271tP\275\312\325\201\275\036\005\345\275\001x\013\275\023Q\237\275\314$\276\275\r5\366=[^\324\274\231\201\207=\365FL=\322\036\244\275\005g\237=\277\271\267\275\021]\257=\016\343e\275r_\347=\226\376\377;p\3443=\037J\271=\370\322\334\275\021d\214=\366\275\344=C\315\247=\213eJ\275Xa\006\273`\037\307\275\027\017\254=l.\227\275\327\344\375=&]\200\275\2243\226=Z[\230\275v>T\274\272!\364\275q\025\222\2759\017\311=U\242\222\275\244\275+\275\226\374\353=&_\237\275j\210@\275\010\211:=\022r\355=Zx\337\274\r\\\n;.~C<\242\233\210=\030\255\027\275\236\322\264\275\314\014\321=\277\372\243\274\371\306\210=VG\001>\364v\271\274f\377\254<p\305\270\274\2768\354\275m\316\377=63\354\2749\202\353\275\347\253\234\275\316\n\200\273\251\024b=D\317\326\275\223%t=$\266\260\273?Wl;b\023\347\275\304\032\351\275\204\2053=>s=\275\233wn\275\014Jc\275UZ|=3}\020=\2733c\275\361m\367=\353\025\304\275v\007\242\275s\350\002=$\016\312\274-\005\007=X4\202\275\3100\362\274\007\2147<$\273+\275\251yy=\304t^=\236\243\306=\022\213\271=u=>=\342Ly=\261\004\363\275\032\014\214<\226\275\'\275\005-\314=I\006\204\274\351\353\300\275e6\375\274\373\340+\275\245O\361\275\327 \337\275&`\370\275\377$\360\275aiA\275eG\330\275\356k\240\274\014\245\215\275\207GM<\247\347?\275\2631\363=\216\206\t=\002\236\020=HR\235\275\2105\360\275K\353\254=r\257\002<\n\220R=\013I\205<]Z\360\273/\006\006=\341%<\275\327\323J=l\322\204=}\004\250\273\277\316\031\275\022\027\316=]\313m\275_hq<\033\264\333=TN\307\274t\307\306=0\'\241\275\304\302\257=\370\022e<\301!\375<\034\\b=!\336\321\275\022Q\273=\244\014\235\2751\375=\274\240&\236\272\263f\356<~\205\333\275r\337\257\274\200n\"\275`\304\365\274 n\n\275\264Q\001\276\271f\316=?\023\311<\032T2=.\013\343=\243\324\364\275C\245\216;\333\217\036\275!1)\275\357\'\270=5x\004\275\251\240^<\2128\370\275\031M\344\274\\?\031\275\354\307\360=V\347\275\275:x\001\275\221\277\367\271\\\224\350\275\357\305\346<N\301\264<@\024\001\275\320\305\330\275\276\2670\275\032\311\016\275R\037/\275u\206\255=\2759\227<\240\371\312\275\374m\244<\214\374\334<\361\001\364<`\217\217\275\240*\320=\034/X\275\305\274\027\274I\0360<H\325\343=\333\326\252\274\267]\212:\223}\335=\206^?\274\221%\235\275*b \275I\007\202<@\006\350\275\261\217+<\236\006\250\275\023\355\302<\001.\366\275|\003\230\275\320-\275=\224\3221=\030\211\201\274\210s\252\275=\341\303\275\357t8\275<\2123=v\306\237=<\235\003=l-h\274\354\334\257\275m\030\204\2754\304\203=4O\366;\364\317\201\275`\211\374\275\234\356\261\274\200\0146\274G=\347\275\300\334w\272]\230\363=\322H\226\275\256\331\252=\365\t\346\275\201s\273=\2459\346=+2\305=\023\255==\002vW<\301\275\360\274\266\204d\275\333\275\213\274\234}C=\341\261p=\257\247\242\275\017J\216\275jun=\370\210\271\275\252g^;\346,\016=4\267\016=f\013\353=\350N\265=\364\260\251\273D\215\237\275C\235\373\275\245F\205=\001\006\311<\352\000\203=\330\311\223\275\236\261P=\353\371\330\274\234\004\236=\214\373\357=%\211V=\017(}<@\230&=\017o\031=!N\375\275\345${<m?\204\275\375\261\302\275O\213\325\275\021\t\216\275&=\220=\265&\234\275\016\316\314=1\203\306=\210\367\222<j\317\306\273\004\314,<\240\272\250=\3032\335=\333\310\310=\245\020o<\022(8\274\236\246)=\305~\311<L\316\263=\221\324\347=\317\357\377<\317\270\340\275\220i2\274\177\224\356\275v\373\320=s2\033=\276Q\316\275\262Y\204\275\314_#<\250\226\315\275\347\366i\275oc{\275\376\206\\=Qc\350=\325du<\331\260p=\035\224!=\035\331\357\274\361\264\357\2758\274\251\275\'\362\261=\340\016\351\275\303\305&\275\223\t\202=I\334\305=\336\263\255\275\253&\253=\275t\223\275\322\364\240=T\260\247\274\027O\303=\270\324%=m\316\312=\335\271\235=\025\232\025=mo\343\275\356\331><\353F\303=\200^\343\273\325\256\261=\233\246\353=\202\356\222\275\211R\034\275\034!\001>\007\371\367\2750\235\275=\3174O\274\323\021i<\014\354l=s\262\222\275\201\0204<\026\200\351\275\277\225U;\'V}=vmX\273\022u\352\275\236\3125<a\263\300<\256\251\220\275\374\364\263=\370[\256;\2379U;X\202\304=\371R\354=\215\357\031=\275\341\331\275\217\313\376<*\233\257=\032\025\367=\024\373P=\222\355\363=\263f\323=\236\205\330=\220\374\271;6v\255=\336\010\243\275H]\241=\033\240\261=L]\360<\376`\204\273\275h\037=\313\377\355=*\353\360\275d-\350<N\236U=Y\345\360=\243M\252=\231F\263=\\\007\257=;\013\367\275\"c\\;\002~\252=\254\205\364\273bV\343;\323{\003\275\244\266f\275}\256w\274\027\362\261\274\003p\255:\325\312\355\275\244\010\037\273:>\210\273\224\227\264=\005l\313<)\364\n\275;Q\353\275^M\361<\330\303\004\275&\205\324\274\252\256\245\275Ne\301=h\217\210\275\236k\215\275\212\217\334=\\\\\327\275\233\312\276=\364\030\336\275\276\324\234\275~\316\224\275\010X\315\275\2520\327\275y3\252\2750\361\351=\001\354R\275\275m\332=\2632\310=\212\201\352\271\035<\275\275\367-c=k\020\024=S\263E\275k\322\236\275(\312\240\275b\025]\274\240F\n\275\370\310\260=R\305\270\275L\305^\275\3720\007\274\034%\275=F\206\366=\r\252\353\275\334\242\215\275y\220\213<\'\370\325=\335\017\244\275\316\2439=3<\327=r\313\251=\310\240\307\275\202^\274=P&\221\275\366\361m\275<\334\303=\2235\352\274]\000\310\2740\025\302\275_\312(=cU\311\274g{\346=\213\274\314\274,\243\254\275n\247X\274\277\003\200\275Wh\220\2754tq\275\314\266\307=\341\306\365\274GV\274=\211\032\245\275\305\244h\275\270C\242\275 \346\347=\200&\273=DU\034=\005MS\275\351\025\243\275\232q<=g\2460\275\273\365\204<\371f\231\275\340C\252=\251\345\224=\242n\270=\265\347\357\273\352\340\230=,\351\365=$\007k=)r\201=\030\373\353\274\261e\315=\014C\217=p\231\254= M\306\273\270Uf<\261\376\307\274\347e\304=\335R\243=X+X<\243\204\250\275\210\\\323\274\260\177\017\275\262\312\330=\360X\274=J\2351=\243\351\303=\000\323\216\275\244o\020=Vd\354=\234^\003\275\026\n\275\273us\224\275\316\312A\275\027\031@\275\264r\'=\362\034\351=M\330\331=\tq\272\271^\023\224=\256\347\327=K\026\361\2756K\273=\205|\331=\367K\371=\271\222\251\275\346S\346\275\317M)\273\033\260\244\275i\272\374=\252F\204=\314\226\'=\255\217$\275\253\020\247\275U,\315\2743\215#=\306$\313\273Z\\\261<\026\307\347=m\260l\275s\247\223\275\346^\360=\026\347\327\275yL\375\275oi\342=c\234\213\275\330\246F\275@S\272\275]\361\360=\374Qz=p\022\344=6\237\227\275\270\334\203<1\325\251\275G\370\034\275\034\261\275<\177j\367\275\033-\202<\267\213\320=H\310\364\275pN\355<\334Y\002=\274\007\330=w\356\346\275p\231\310\275\301L\322\274q\315\240\275\217_\320\275F\344\221<X\335\340<\241\224N=\013\224\306=\370\264\371<*\345\360=\231ng\274\007h\327;A\365\242\274R\353Q=1\2616=\240\220h=\'\334\221=+6\251=\351\344\372=G\"\250\275\265\204\204=\272I\t\272&\027 ==\331\326<p\022\222=c)\002\273\025\261\020=-\n\354=BE\365\275\362\3427\272+{\025\275\335?\301=g\331\223\274\230Vh\275\232\372x\275\330>=\275\266>\357<\371q\271=\344\244\214\275\221\243?<\222e\344<\0264\332\274{f\342\275*W\335=\231\366\224=\256\276\000>\242\252\345=G\317\253\275\2219\262=\322\342\t\275\347Yw<\245\377\330\275#\020z=m\023\200=/2\257;$u09c6\256\274\'r\213\274\357\354_\275\357\231\235=\364\227\007;\243\336\330;:\022\236\272=$\312\275\326@\226\274I\313\'=\034\'\210<\344\031\001\275\305b\211=\030\316\333\275\254D\341\274\366\334\321\275{\246\250\2749)\225</\2312=\353m\006\275\367\311\360\274\032\320\214\275\241_\260\275\361\"\246\275\'$P=N\'/\275\242\215\261=\007\205[=\272[\247=;\037\331<\352\316\244=@\357\'=\213h\216\274>\005\202\275\305\222\204=\341\340\244\274O\226\335=\233^\203<\370\027\217=\357H[\274L\353\300\275\275]\267\275\353\376\177=\311J\006\273\214\356\325\273\205%e<\037\265\017\275`\224\365=\273\267\027\274,\253\215\275\366s8:}e1=\314\361\250=\206B\374\274\344\335\365=8\"\232=\177u\347=\213\005\242=\360S\216=\320\220j\275\274\210\227=4}\371\2742S\340\275\371\023\302\275O\340N=\031\313\301\273\0200\371=%\246\323<<\264=:\216k\307=K[\210=\017W\220=-\357\304=\211\025U\275m\247\221\275\007Wu=+\n\232= \304\343=\345\361\'\275\260\224\254:\003|\257=\241\343\334=>n\226=~d\313\275I\007\240=\036\017\366=\307\354\206\273Mu\330\273\342\333%\2757\206\261=\307\335\355=\226M!\275A:\004\275\035o\n\273\223*\035\275\240b\314\274E\320\247=\024\252\273\273W\355#=\336\357\216\275?\002\202\275\203\273\357=\2550\023=\220b\252=3+\021=\003\212B=5\310j=\252\021+=\326g\352<\234\026\262\275\022\253\230\275:\3274\275\207!\340=P\277\217\275@%\224\275\304\232\326<WF\200<\3006=<\320U\277\275l\336\340<\223\333\363\274S\214\261=\215\217\243=\277S\371\275\375\241u=6\033\031=\017\233\333\275\263\315\304\2751\323\274\275\300\321\224=\252C\266\275Or\200\275\272w8\275\036\366\036=\360w\274=\033e\225=.o\266\275\376m\330=X\271\365\275\347\246\000\275h\363\272=\221\341\274\274\337T\261\275]s\366=J\351\351=\\+\360=\013\244m<\212\014\202\275\273\226\001\274\256n\214<\210\366O=.\321\241\275\344\031\346\275\0301U\275\222\371@<\317\336U\275\034\020\272\275\207\325\211=\303\207\020<\326l\303;\251\205\303\275T\243==G\357{=\336\370\365\275\256\311\254=%\353\247=~\274@=V\237A\275\363v\216=\207\207\240\275\257X\207=~\003\224=\300$\242\274aE\361\275\352wS\275\203BN\275v\274^=\202\036\340\273L+E\2752u~=\313X\352\275c\246\231\275\273\317\347\275\232\220#<\325f\315\275\350\003f=K\004\306\274Yq\304\273\264\021\346\275g\221\307\275!\020S\275\214J\214=\214\000\335=\367\225\364\274\213Fr\275GD\204\275Us/<y#\031=\321 \307\275!U\237<\027A\303=\022E\306\274\301\250\276=^\263p\275\347\322\243<\360%\311\275Od\241\275\207\300\354=\2129\307:\255\021\242\275\177\016\301=*\250\365\275\201\246\307;\323()\275\362\tQ\273\224qn\275\037p\307\275\001k\367=vt\277=\204\376\332<N5\201=p\254\305\274\316\222\356=\033%3\273\330\302\261\275\362ZP=\230w\360\275\0266\357=\374\344^<\353\236w\274:\2537=\000\351\240=\251C~\274]\327\201\275GC6;M\332\354<\216~\221=\261\264\261<Ez5=\263k\274\2752\332U\275\250u\301\273\347\330\330\275e\311\r\275U\002\312\2758o\306\274#<+=#;%=\367\2525=\007S]<\006\265\217=\013\270\272<u\016(\275Qa\355\275\230F-=\006\200\355<X\246H= \316\200\275\335?\270\275CH\250\275\271\210\353=\240\267*=gG\325=\312\227\303<\372\346M<\026.\n=(\342\245=c\341\314=t\350\363\275.\323\250=\270\363\263=L\210\000\276\007\241\333=>\232a\273E\235,=\033@\221<%<\351=\0357\014\275.o\352\275j\221\307\275\233zF\275f\206\341:vH\374\275\321`\327\275\372\022\277\275;\272L\275\360^\355=x\031\346\275 \240*;\024\326\2639\235\232\255=\345\023e\275\330m\207\274\3011\327\274\020v\223<\253~\304\275\034\315\324=>?\317=\205\007m\275\304]\230=\273Q!\2757/5=)\227\241=b\347\236\275\273\240\357<\344M\350=\362\034?\275\304\272\307=\265\010\215\275\261\020o\275\224el\275#C\356\2752\263X=\322u&=2E|=-P\266=\244\312\366=\320\321\221\275\321%w\274sd\003\275\2619+\275\262\261\306;\022\236\272\275\376\307\204\275\244\264U=\nZ(=\272\233\264=H}\250;\247\344\000>\306\035\275=\247\273\027=\005\244\270<\340z\351<o\204\343=g\311C\274&\252\257<\320\307(=\244\277\262\274\346h+\275\212\032\254=\322\t\317\274k\014\275=\325\305#<\375,\373\275L\020Q\275\321\346\357=\002\353\362=me\322\275\257)\203<z\002\377=\304\262\303\275\345\241\351\275K\242\224=\033\311\332=>\363T\2754;\251\275\023\320\002=\3019\'=_\247\332\275!\343\201=}\345\225=Q\270v=X\336b=\324\320L\2754L\250=\022(\001\2769@\322\275\370\243\200\273\345V\351=-\247\321\275\032q\347\275\361\371\275\274|\312\325<\225x\333\275(\"\210\274\200\326\313;[.\362=f\371\345=\036a/<\235\247\312\275\017H\006\275\264[\234\275a\257\320<$\317\347\275H\364\306\275O\241\365<\302\0220\275\376R\326=\304\216\'=\224\357\203=DK\016;wXX\274z\033\337<\243\235p=\362\016D\275\336\363\030\274Ws\347=\356\202X<\304\210\356\2759\330,=\017b\360\274\225\221 \275\220\310\321\274\233\000\221=\212\311\267<\233\222\365<\333\303\001\275\204\353\276\275y\014\r=\017\006\233<u\231\000>q\251\351\275\214\016\324=K\334\260\273qW\300\275q\014\311;\266\345\371\274\350\324\333<\215;\204\275\304\035l=\036\033\000>.\301\321\272\3339\307<\320C\263\275\026$w\275\023\327\317=\234\245\262\275H\245\200<\254\016\371\275\357\313W\275\325^h=4\353\200\275\235\023\215\275\354\"\016\275?cK=v3\202\275\377\226\234=\273\026\256=\362\255(\274\275\246S<\256\236\017<\253l\233<#\216\257<\203O\351=\376\270\376\275\272Z\207\275t\276j\274*$\370\275\322\325\253=\206O\373\275)\332\210=\356\265\277\275\002\306\324\275\344|\313<\325J\357\275\240\232\347:\3464\370\275\375\332r=nz\350\274b\026\221=2\315\257\275\255-j\275$9\360\273\314Y\210<\331\260\203<P\032\327\275\030\013\177=\372\373?\275\376\324\357\275\"h\233\275\\\352\351\275\323\241\000>\014\017\001\275\224\365\241=[\035k\275O\274\217=\376\350}\275\320\031\367\275k\277\213=\263e\306\274\364\301B<\257\035\305\275\322\374\031\275\327@\373=V\265\214=\030\004\273\274e1n=\024`\376=\227\232\306\275\'\342\336=\342\216j=.\324\223\275\344-~\275\205\241\266=\234xL\275k\275\312\274o\\\357=nW\202=\335\266\346\275\216q\366\274~b\277=\357\003u=0r\006=\277\ti=c\247\350\275\006\331?=\2735f=\267W#\275\360\027\000>7\006\207\274\225$<\275\t\266\324=\233\037j\275\021\372\332=~\314z\275x\240\363\275\245\233\247=5\\\363=\303\304\311=\373\225^;\217\225\305\273?\333\r\275\343\300\370=\372\354\241\275\250&\203\273\325\025\276\272\177>\237<\273\362\273;)Lv=V\315\223<\023_\017=\241\243i<M\300\205\275{N*\273\2668\330\275\276\337\304=c[\307=\206\032\224\274\304\236:=~\260\317\275\251\261O\275\224\355\352\274\320e\351\274\254Zi<Q\036\355=\263\276\031=\210\311\244\274\017\360\034<\225\341\273\274\311\362\213=\212\271\303;\210\320y<\272\347!=\326\342\221\270\324a\337\275p\257\362=5\243H=\377\230~=\245\320w=\315$\272\275\357\006\321\275\267_\262=0i\240=\213\237\274\274r\302)=?\205\222=\025\255\306\275\237\244\224\275\347Q\267\274Eu\203=\342w\245=#\363\342=\206\256I\274c/\212\275\356\024\203=\273@\275\270\243\252\324=\230\207\261\274\337W\232=\216\277\312\274\265\257\305\274-\265\004=R\"Z=\023N9\275\360+\312=\353\036\357\275\3655\023\275\341\177\350=J\025\317\275%\250\370=\301\273\251\274R0\240\274\007\237\256\275\255SK=fr\244\275\333P\262=\020Cz\274\035|\275=\214\035\247\275\ts\325\274V\0063=e\252\243\275\341\300\363=$\034\245\274\014b\341=u\306\037=]c\'=?R\341<\342`\032=\310L\377=\033p\316<q\340\035=AcY\275\255\233]=0*e\275aG\355\274\273p\347\2752\237,\275\312&k=>H\335<\374\351\334\273\006H+\275\206\222\034=\022.<\275\200\224\017\275\311n;\275D \t<\017\362\221<\0143\224=\344\017\255\275\206\324v=A\312\251=\"\222\225\2753\371}=AT\313=\014\037\324\2757\271\315=\201\306\224=\237{w=\247z\363<\247\263z=W\325\262=%\234]=\253\340U\275\301Z)\275\226/?=|7\033\275\360\262G=I%\017\275\351\336\224\274\007\214\204\275\337NN\275\351\246\237<+\330\036\274\254/k=\013C\326\275}u\307=\3315\272\275X\247\321\275\010.\362\275\224\010\227=\225\217R<\256(\267=\260\325\227\275I\302\373=V.\330\275\355\342\215=\230\270\253\275\375\322P=\221\252\276\275\301P\225\274\257&G=\252eT\275U\"T\274\325\025\020=/\260\214\275E\315\"\275$\215O\274+\213\340\275\230)\276\275\363\261M\275\371[\327\275\233\275q\275\235\320\257\275it\272\275OL\233\273\010\177\324=\020\230\206\275tQ\360\274\025l\211\274\376N\361=3\241\211\275b\240\310\275\302\t\370\274\2465\366\275\245\205\204=\311\336\220=\253$\211\275\261R\223\275~\036\277=\020\217\223=\326_\"\275\216k1\275\345\221\267=\006\377\333<\354j\267\272N\016\272=\252/\205\274k\005\341=\315\235|=\346\271a\275\313iz\275J\033\344\275+\213\346;]K\341=\001\021\270\275\315Z\273=;\371\211=Y\024\214\274\207\002A\275\353uV\275\333\255K=\345\225\251=)\371\350\274\nA\356=\350Y\257=b)\r;\245\346\343\275;\226c;H\201+=\275\3042=\007\231\220<9\031\315<#\335\232=\326o\275\275\010\345^=U\006\330\274 \261\017=\0232\361=:\023\205\275\355\343\370\275\374,\237=\013}\367\275P\247\354=K\345\213\274\2713k\274 ]\251=\313a\223\275\"+\336=\357\207\207=\264\271\307;I\2473=\010\006\255\275Q\333\334=+\213\253=s\034h\275,M\035\275\'\361\017=(\016q\275Wc\000\276\202x\202\275\021\306\230\275\\ \361<\374\206\330\275\017\007\255;\300\226\n=\020\007.\275$\240\215\275\206\0239\2753\227Z=-\314\357<\223Q\306=)\204\305=\372#^\275\353.\202\275$58\275y\303+\274\327\363\301\275Vza<lr\360=Ok\344=\016w\262\274\303tO=\375\026`\275\326\366C=Zv\203=\360\365|\274\210\222\220=r\224,=\277\260\276\274/\034\363=\317\261\331\275N\352\305=\247\303\320\275\265\255\222=Qn\345\275\302K\202<\305Dt\275\360\253\200=\\\353\253\275\261/\354\275\255fB=\207\241\357\273\332z\267\274[\002\344<\240\340\217\275\322\336\035<G\326\342=\347.\370\275\347\243\016\274\377(\032\273\331[\250\2757\374\000=G\003\212\275\337@\201=\357%\367\2759\363\320\275\263\317G\275\021\'\333\275\341\236\302=\032\035\002=\356\243Y\275\256b\323=(f\365\275K\322#\275{\252~\275id\356\275\320E\321=\337\226\032<\371}\265=\242\221\314\275\352\213\263=\221\222\201<\205\305.\272}\221\202=90m\275 \014\202<\023\214\344\274&\377];\310\210\243\274\013\240\010\275\331\"\257\275P\2724=q\203\316\275\253\216P=\356\322k\275\013I\206\275\016\223\007<)\260\267\275\013\025\350\275\231U\305<Hv\020=-\206\270<\300p\341\2754\027\000\274I\223q\275jk\217\275w)\312=R\275\242=\013\223/\275\332ZG\275-\220\032=\2104\373=\244\371\310\275;\024\000>\231\267\032\274r\243\n\275\013!)\275\265|\271\275\326\210\367\274\026}\277\275\235\223\231\274\347Z,=Y\343\341\274\230y\261\271\321s\032<!E\262\275\010w\273<h\342\351\275\035\361\211=M\237\277=\243c\205\274I&\264=z\333\215=\013\031\243\273;\253\322\275}\025c=\275S\216\275\200;S\275\356\237Y\275e\237j\275@\377\271=\234\372\345\275\360\276\326<\221\304\332<\036\3666=(\247\215=\320~\232=c\005\014=\260\3715\275 \312\366=\257\361\332\274\026\353q<\000\266a\2751\323]\274+gG<\210\332\242\2731\025;=\203%\234\275\277\253\352=u\310\276=-,\251=\034=\317\275<$\213=\247\267a\275NJ\363=\215\273\322\275\360\215\006\275\250\271\317\2736\244\3529\254\226\034\2755\366\352\274\264\323>=c\2361=\320\'{\275\037X\234=\205F\006\275A\312G\275\246|\231\2737\027\305=\207#\330=\2534m;\364\332\360\275\317\254\264=\321\213\304=\026\204\313\275\232\"\355=\3571\262\275.Q\t\275To\371\275\"\235\000\276\037\t\363\274T#\207;@R\321\275\357\362\256\273\243+\341=\3462\222;\221\001\001\276\212\215\202\275\021W\306=Z\367x=\201\026I=\335\200\336=\222{\354=&\206\306\275\034\300v=AFi=G{\256<\304\364\270=\256\226.\275H\000\300\275\033\017\234<n\267M\275\275}9\275\031_\216\274\000\362\315\274\247\007L\275\024\204\234\275~\'\275=\"v\276=X9\312\274\264\317\366\274\323h\177=\002x\223=\017\254\377=,\031/=\331V\305\275\210J\252=\021\332\252\275\001:==T*k=\323\217\275</\216i\275\375\300\337<\357\240\021=d\227\354\274\305\343y=\324\376\364=s\025\265=0?\366\2759Q\217\275\330\032\253\275\255s`\275R\215\336\275f\373\325=\374.\016\275\342d\213=\025\267\200<\376\200\274=(j\224=\000nm\275k9\035\275\302\254\367\275\363\310\336=\251\373\017\275\310\256\353\275\t`\337=Gr\005\275\367~\227=\316s\177=fK\'<\377=\353<\265O\037\275I6\230\275d0\353=\336uS<\307\372\255\275\254\026\206\275\347\373\266\275\275a\330\275\372\222\352\275a\2014\2755\306\314\275\236o-=\243\311t;\372\314=\275\274+y<r\203\271=\337\232f=\347^\024\275C\006\362\275\320\327\335\275P|\003\275c\335\240\275_\016\200\275q\331\257=E\327.\2755X7=8j.=\005\214\226\275\211 \371\274p[8=4\271F==\251\211\275\235\307\016\275\261\371w=\036\241F=\205\027\252\275<|W=\356?\204<\227\302c\275\252\025F=G\364$=\000\312\226\275,&#<\016\215\333\274\\\r\375=\322\372\313=\351\247-\275\201\237\364\275.\213\241\275\212&\246\275Q\032\333\274J\251\037\275\025M\311\274@\230\317;\372\260Q<\221]/\275v\200T\275\373\333\336\275\265F\365\275\242\264_\275\262\002\372<\"\251\226\274\357\253\352=\211b \275\271g\311=U\016\323\275\234\031\030=\373\302j\274u\024\340\275\334\211[=\320\304:=\033\200S=*\275K\274F\240\350\275\232\210\313=\305s\342<\035\005\227\275q\352\366=\206\352\212=eD\033<l\220\003=\026v\272\274Ky\276\274\307\265\005=\376\037\265\275\206E\230\275\266af\275\n6Q\275\245\2722\275\037\333\242=Y\277\245=\266\243\003=\256\306\351\275\271\\S=\256\224\245=Bor;\301\312y\275s\236\363=\001\020\226<:\272\346=\367\215\325=\200k\365;\300\315\022=(\n\245=\022\331\335=\004\204\257<\017|\311\275\240^e=\036g\234=\005t\270;\253\310\313=\226N\305=\344\014\214=\220%\320<u\314s\274F\243\371\275U\243\204<\260\326I\275\271\033P\274\034M\213\274U\310\031=\225P\252\274\363\310\272=F:\370\275\377\345\013\275}3M\275\240E\361=2s\215=\224\2423=\262\275\261\275M\231\354<\030\013\312\275\275\314\275=\240\355\245\275\3222]\275\363\225\377=\373\242\360=\335{l=\377\232\334\2756\000\326=\302\275\203\275m\223\305<\271\211Z=\365\360\312=\307\364\025\274<\302\241=@\006\\=\216\305\373=\356m\325\275[I\217=\331\314\017=6\001\230\275\037u\206\275\202\337\313\272\312^$=\253\271\271\273\251Z\370=A\003\263<\372\005\266\275\345V\215;\264\025\323=\275C\035<07\220={\326\213=k\260\323<\327k\366=\320z\315<\336\212\227\274\347\236\353\275\316=\333\275S\032\326\275z\342d\274\274W\252\274\204>\211=\244d\303\275\223\356\344\275\355\264\274=\247\351\244\275-_\322\272\216\240\254=\351\350\n\273Vd\003\274\320\022\330\275<\362\202\275JC\303=\332\216\253\275\300\333\005\275$\265\230\274\212Z,<\'N\240=\333-\330;\021\320\214\275\322K\370\275\037\212\227\275\222s\275=\016\306\275\273\035\254\364<!\271\'<\215\375\036=\324\327\213\275\002\032\377\2754\346\333=\206\216\303\275m\223\373\275\271\251\301=\035\210\032=\233j\214=1\034\257=\003\277\204\274eO\227\274\246P!\275z\366\324\274\331(\244\274NWt\275D#\036=\177\303{\275\230\330\262\275L\366\327=\340@^\275\205f\307\275^\214\254=\207a\303=\316]\254</\323\371\275\255\334J\274\373\206\253\275\033\313\233=T\301\275\275\251\333\353\275pg\256=j\"\237=\217\317\355=\362\021\353=\377\020k=\276\023.=\0206H\274\277\347\370\275O{\347;#\245\343\274\202\206\315=o\237\010\275w\234\210<\265A<=k\3428\275\032\023\276=9(\272=?\343|\275Rh\323\275wv\214\275\332v5\274\315\322\240\275M\030\212=&/\370\275\276\354\267=)\212\367\275\311\276\305\275\325M\247\275\2032\320=&FC=\356\227P=\341\316t<v\010f\275\326w\211\275\210-\035\275P1\317=\n\036\t=_\222h<\363#\307=\002\203\343\275\030\242\354\275\310b\372\275l\316\310\274-\270\223\275\222\324\210=<\372\366\275\032\250\344=\234\263c\275\321P\371\275\262rJ=\266I\213\275\346\2651;U\363\365\275\nF\305=\324\354\232=a9F\275~\034\232=3\314\243<\031H\270\275\r\324\246\275\236\274\202=\325\206\001>\235\347\272=\033&w\275\262\027\227\275\205$\035\275^\345\216\275\366@V\275y\'j=\235\306\000\276*\036\364<c\205\242=\214a\224=\364\354v:C\000\037<\026M\206\2739\202\000=^c\376=\200n\274=2\014\376\275?\235\033\275\236\273\223=C\346\300=\254%\367\2753\037\353\2742\267\332=\205\212*=\233\342\355=u\341\260\275\230=\361\275f\307\276=\347\004\253<\371\317\307<\021\001\350<\330q\242\275pL\340\275*3H=\3631\254\275\014u\216<x\267\025\275\274\205\200<\255\312x\275\360\215\231\275k\212\206\275\007;q\275P\336\'\275\377@\321\275@\001\272\275\246P\000\276\271\301\373=pe\327=N\247\026\273\352M\240\275\304^\341\274u\326\0219l\231\376\275\270n\234\275\362f\255=0\260\007=\265\t\324=8Z\272\274\325\035\210=o\322\266=\332\220\222=\215z\314\274\261<\202\275\215/\207=AK\243=WSy\2754n\312=\335\302\361\274\352\234\326\274\367\022i=\373V]\275\036~k<\001\207\363=i1/;,\345\307\275\244\2679\275R\374\224\275\033\273\355\275\244\267\243=N6\362=H\377b\275\330)&\273\316\005*=\303g\326=\325ze<\371\322\215<]\362\337=`5L:\006\333\201\275\316\244\365\274?\301\227=i\037\343=\246\022\274\275\037I\303=\361\003\353=\215R.\275\261wH\274\004,\223\274s\2160\275\322\025\205\275\247\212\363=\232\343-=Xr\250;L\340\"<\'\026\222\274\037\006\247\275\256\234\300=\214:\267\2758\276W=\274\177\302\275qJ\256\275\033}\303\275\343f\322=\2315\020\274\303K\317\274\331O\344<k\357\375<\026\216A=\356\257I<\336\362\237\272\311\200\222=vd\261=\235n\207\2756\310\254\275mK\201\275\002\365\311=\251G\001\275\303\266\371\275\215\002\243\275\221\003\374\275\264\276]<\371\376a\274\024\237\217=o\310\354\275C8\371=(,\232\275\343\247\244=\251\3444=}\'\002\275\253\253\336\274\\\315*=\224r\333=N3\315=3\312\265=,\272\264=*\220\361=\032\037\272\275\256)\371=9$\205\2758\032\244\275V\350\361=\326o\323=\201v\034\272\376qj\274\220h\200=?Z\373=I\177\n\275\325\341!\274Wa\343=\327\370\264\274>$\352=i\213\315\273\342\254b\275\217+\316\275!\223\260<\244 \376=$`\271=vJD=\0263\006=\013\362Q\275\362\363\r\275\334\025\306=\211\337\367\274$\2735=EC\023\275\037\362\250\275\312_\321\275\313\244\332\275\353\027\334<H\304\314\274\353V\213\275\363n\322;\303\211\234=\007U\343\275\006\231\221=z\376\333\275\203\t\275=\326\204\337\275y*\370=\013\201\234=\336\037\t\275\261\273\366=Q\262\231\275\\\331/\275f\273\226=M\013]=\241\252\307\275v\263\261\275j\0209<\216x\361\274\327d\236\275SrT<\232\014\'\274\2303\363\275\030\246k=\205\215\277\272w\372\321=\211h\302=w\210\000>u\375\263\275}\276\261;\2739\266=\365\341\255\275K.\304\275\200/?=z\241\300=\321\310\355=\222*\362=\002\250\215\275\213\217\250=\375\023l<M\240D=F\005\354=\276\351\320<\350\276\331\274)1\335\275\n\251\216=\332m)=7X\357=)6\342=\301\t\\=\237\211\033=\004\223Q=rps=\010\014\350=\364V\255\275y\302\r\275n9m\275Ss\260\275\333\334\020=\20611=\n{`\275\376\245\245=M\311\334\274\\\256\216\275\376\034\370\275\353X\357\275\263\001{\274\270\324\234=\330\342J=\270NQ\275H\215\350\275}^\267<\360\002\264\275\340\\\324\275\276^\246=\n7Z=\361\313\005\274@\367\377\275-\345\203<\345V\371\275Et\003\275\251Y\245\275 \233V=o\254U=\"\022A\275>8\316\275\235\2048\275\375\004\274\275\246\036\301=\337\375\254\275\'\031\347\275\273\355\325=\203\232\332=*\177\217\275\250\346\232\274y\266r<\364\r\354\275\274\023\272\275\027\250\t\275\300\263\023\275w\234\010<\252\321%=\005\274S=C\341!\275E\275\325=S\341A=\026\021\242=\020\301v:\010\207\377;\014Z\324=<M\001\276^%\020:\337!\263=~v\271\275X\212\367=\200\006\250<\255\256\241=jo;\274\tU\233\272\032\257\202\275\037\334|=\016|\312\272\262\210\211=\376r\254<*L\335;\304\n\376=\374\207\235=\236\350\344\275\250j\277\275\340\177\257\275\206\022\017\275|\327\203:@ \004=\203>\232<S\014\221\275\307\375\243=)\320Y\274\"\007\301\275NW\214\274s\256\216\275\223*\344=U\021\206\275\247\030b\275\205b%\272\002\322\326=\224g\'=iO[\275\373\350\345\274\355\222\232=\360B\207\274Q\363[\274\024Z\377<\314}\243=\033\273D\275\353E\205\275\350\320\n\274\314r\222\275\241dU=\035S\327=\362`\232\275\231\026\240\275\375\033\302\275B\246\311\275\205\325\r\275.\257\357\273\323X@\274\003\261\311=&\245\343<\304s\027\275\376\365#\275\360\003\"\275\333F\325\275\237N\235\275\275\201\337\275/\302\321\275Ke\270\275N\260~=\026\320\373\275\031\270\000\276\305D\266\274\262I\237<d\341\205=7\344r=xj\235\275\263\312\343<I\255T=\360l\317\275\306\351\252=E\373\317=\365P\230\275\201`#=\247\372\243=\001\211\232\275/\356\344\275\301\343\217=\351\027\341=\272\025\001>\364X\250=\007\324\341\275*:\305\275\223W\245\275\242y\215\275\207\246h<\007t\320<\247\033\221\273\320\212t\275\025\315\225=\021\316\005\273\021v>\275\377r\256=,\205\001\276\326\346\321\274T\ri<\265\222\326\275S\256\237=\024\270\233<:\311\210\274\225\344U=\327\300\215\275>\351\360=[\337\242=\226YT\273m\326\365=\232\014\366<a\361\226<2s\231<\373\320\320=\321b)=\251\010\202\275\247[\215\275\\/n\275\376\026\300=j\217\257\274\227\376x\2755\321<=[\377\333\2741\036V=J\"\205\274\323\004\234=B\300\016\275\314\233\351\275\236\\\350=V\024\342\275\263\345\264\275\024\034\226=\236\277U\275Ob\337\275\255\n\312=\357X\270=\361\007g\275\264\350\230\273^\337\217\275\242\033\227=\307\"\256=\024\355\232<\003\315\017\274\000\372\306=\210\327\234=\303c\201<\032\265\260\275\301\031a\275\247d\316\274dG;\275\234\365\322\275\242H\310<D5R\275\363\260\004\275\363\034\014=\242\221e=]\355\212=\207\262\375\275w\263\324=\033k\240\275\217\262\316\275d\221\321\275\276f\263=\333l\212=\031r\307=\010\374\250\273h\347\'=\372\205\346\274\247\014\254=\333\002\307;Q\347\215\275d\362\221=\270K\002\275\304u\313=\002\207e\275\355\261\232=a\334\237=\261\003\350\275:\212\264=\344O\001>\272L\010\275\211\360\353\275@\360\235:\030Y\354=@\r\242\2755[\017\275\360\037f=\030\241\204\275\323\277z<*\350\354<\030\314\346=\273\202(=\002\000\363<\254,\337:OP\365\274\307I\341=\337\001\033\275\270QV\275\331\215D=.d\274\275\373\273\000\276\013\222\301\273\323\310+<\342\376\364=_[\362\275^\366\200\275|\330\233\275\252E*=j\025\362\275o\024v=\356\231\253\275\033\010\315=\035\331\265=\367G\201\275\003R\034=c\020b\275\340?\006\275\355\2056\275\256$\247=z\272\361=\0177\361=|i\361<0j\013\275Z2\205<#\252n\275 \0013\275\314V\361\271%*+=\221\251t\274#\022\271=\013\232\257=\234\000+\275U\224\351\275T\036\024=pH\351=\re\375=_O=;a]\361\275\006\224\377\273\023\247\207\2735[\202\275Z`\212<vK\203\275e\217\210=\362s\372=\016\032 \273\006\352\246=\376\240\023;\016\036\335\275@\204y\273\203\317,=\374#\266=oz\351\275\213\177M=\203\247\373\275\033\267F=\035\315\356=g\317\372<\216zK=:|\212=\321\016\234\274o\234\036\275H\016\240=.\247\351\275\301\002\377\275\261i\367\274\350N\237=\317\377|\275\337\237l=Z\000\223=\314\244\024<Y\004\346=\312\n\353\275\013F\000\276\005.W=`/u\275\303\307\260\274\340\357\027=N\000\315=\234\221H=),?=\364\006\244=\240\274\2339\306\347\320\275\2230\001\276el\225\2753Z_<\247\201\346\275F\260\277=\211w\344\274\027\n\027=\263\016\205\275\355\257\010=H\236\014\275\233\341.<\233\034\023=\rI\313<\023;\273=\355\224x\275\357\270\303\275L\023\000=\366\332\016\275\341&\353\275V\310\000\276\327\217\223\275\312O\354\275\213\250\210=\355\236\325=)\262\206<\333\256\247=\304q\275<\\=\346=\257\020(\275\327\246\317\275\017\017\215=\024\274\255=\202\005\271=\226]\275=\212\004\024\275\346\317\360<\315\214\324=\276\334\332\275\255[\006\274q\306\311<v\t\326=\025\021\354=\301\302\032\274D\304\227=&I\311\275\023\270\253<\233*\255\275\010}\222\274{\271H=\372+\272=\203h\213\275\3567\270<\001~\363<\263\221a\274 \027\364=\234TA=\355\366\224\275\355\334\310=\020\320\362<\237*\203\275\317B\336\2745~\205=\325)\311=\362\020\330=M)\321\275\351+\346<D\310\254;=2a=\005\205\355\275\330\377\265\275\004~T=\024\205\033\275\210@\273<\246\225\243=\257~\273\275Z8\315=q\234\365=6WM<\351\036`=\245\252\253<\271\215\227=E<\303\275{\300\256\275\007a\371\275\363&\250\275/{\225=\024T\214=\354\260\325\275o#\334<\004D\356;\246\331\234\275\303\376v=\207 \274=\360\373w\275}\366>\274\260\246\336\275\350\306\320\275\253\245\227\275M\340\214=\264\210\264=\027\002\274<\261r\345\275\0228\r\275t\223m\275\006\210\033\275\000\025\214=*\247\247<\271\2646\275\00326=P6\233=\216\203\325\275\301/\336\275\036Ra\274\3277\312=\242\n\213\275\202\321\311=\232\243\277=\350\314\310<\303\032\346\275\031\300Z=/\217\333\275\025\025\021=S\275\256\275S\337\267\275\220\370P\2751i\350=\311\307N=\356\035\254=\\\024\200=\213\357\225=\234s\230\275?V8=Cx\006\275\037)4\275\017\013\265\275*\360\333\275_\240\371=\210v(\275\332\374w\275U\352t=4\201\224\275\3271E\274(]Y\275\335\307\250=F6^<\210\"r;\001\372\361\275\003z\241\275d\023v<&3\332=\374_@\275\234\354S\275\341Cv=\377w\256\275\277!:\275\177\343\315\275\323\376\306=\322:\325=\n\350\357\273\0066\202=\201\275\215=\311\276P\275\277s\007\274\007h\377==\306k<\253v\267=\013\377\350<\322\006\370\275d\310\373\275\275\211\274\275\236\314\255=C\226u\274mb\260\275\006\006\213\275cR\177=\220\206\272<\220\n\350=F\235\355=n\261G\274\0274)\275\336\201\360\275\220\351\355\275\t{<\275\226q\206\275\031\312\370\274\020k\023\2753\206b<Av\224=Z\274\023\275\'\231\210=\245\343A=\340y\337<\371\357\241\2744\t\235\273#\312\222\275/\241\372\275g\311\354=xz\220<9e\021\275\206\356\224\275w+\001>`\014W\275\367 \231=>\364\236=\342\007\375=\323\272\271;\3603\225=\347d\222<\3278\205\275P&\256\275\216]\260\275d\252\203\2748\303n=\375\227\204\274\315\340\276\275j\004G=\232\024\005\275\364GQ=K!\300\274\000\357\343=\3400\367=\002\343\272\275^\355%;\373\361\371\274\316\246\325\273\375\230F\274ID\241=\244\271\355\275\010\322\213\274\t\021\343\275\317\331x<Y^)=\301}\335\275\206R`=8z\206<\231\301#=\300d\204=\221\215\275<\022\344\342=\307\250\204=\234\220\353\275\245\340\332=\006\315\027=N[\242=T\225\312:\025\2447\275\003:\027=iV\010=\363\227f\275\250\343b=\330K\337=\331\264d<\241\211\332=v\336\211\275\253I\355\274\010\273\327<\312\"\034<W\257\200=\347\333l<\322\206\334=!X\265\274^\315\241=\331X\003=\334\252X=\202\324\230=}\353\262=\\K\366\275\177\370\027\275\207=\000>g\330e\274\375\343\373\275Vc\313\275\343\213\227:\240\272\016\274\0037\210\275g\r\374\273S\350\334\275\203tF<\353\330\220\275\226\272D\274QK+=/\361\361=\317\324\242\275\352\325\316=\240\210\331=\002*\371\274\303\270\217\275Q\331\r\275\361\327\255\275+A\310=]x#\275\323\337\251<6\333\205\275?k\367\275|\223\232\275\367\365S\275|\310\311\275z\336\225=\266\320\362=\004O\254=]\373\272\274\255\342C=\372~v=\367\243\3419m\267 \275>\013 \274\265\261\335\275V\352\204=\346\254g=\251\377\032\274\361\307\237\275\024UR=\251\026f=\232g\245\274\340\312\342\275\310\312\375\275p\365\255\275&\277\277\275)\356E<U\210\023=\355\325\007\275\261\245\177\275\325\365f\275\246\244~=\265X\233=\007\275\267\275\314)\004=\360\252A=\304\t\354\275\206\345\222=K\'\202\274\357\306!\275,\365\302=\365#\375<\372.\317\275\326\335\205\275\321\341\222=\002\t\365=F\232\344\275\354\033\374\27537\022=1\330\242\2740\357\344\275\032H\275=\001J\020\275\327l/=\307\311\306=\250\374\277<t\t\376\275a~\253\275y\316\026=\321P\312=\330\022Q<\014\023s\275\260:\361=m\327\264\275\340M]\275\245@\344\275\014\372\314=\236\203\261\275\246V%\275\325\022==\351\265\361\275\3036\267=\234h]<\004P\'=\270H\331\275\177\333\335=w\024\000=C`\227\273\222\326\350\274Pe\244=\t\276\230<\232tR\275\353\020\315\275?\352\227=4T\312\275&\005{\275W\035\'\275\230\322\333=\337D\232\275\227\307\305\275\217\211\267<\365l#\274\226\224}\275\214\254F=D\317\235=%\246\314\275\027\205\'=\312\036k=\254\031\014=1\325\337\275\211\222\351=)\302\224\275\322\331M=\316w6;\330\310\234;B9\004\275\'\222\263=\332\366\326\275J\235\311=\\\321\326=\302\341\217=T(==\030\017\255\274\343}g\274#`^\2757RJ\275-\321\206=u\263\357=M\r\317\275Q\312\340;|O\271=g@-\273\014\311\030=ji6\275\235\231T=\220\217\227=\002jQ\275_Q|=(\256\252=\274\377\212<\220\213\212=\246\316\273=\367[o\275\302G&\275\334@\352\2747N\266\275\253\352\374=y\365\372=\266>\262\275O\316>=\217\252\215\274b\244\334\275\253\247\024<\315\253\336\275x\377Y<G\315j\275&8\232=) U\275\304\363\374\275\344f\366=F\243\245=\316\315\362\275\013\351.\275=8\267;\321\237\317=\302\027\323<\321\023\374\275\213\246\204\275Ce\333<o^\211=\277\204\r<\322#\010\275{8\246=\257\226\333=|\257\263\275\360Kl\273\315\306/=2\317\333\275ze\343\275\215\311\370\274\007\333\327=\214OQ=p\024X\274\256\236\261\274\217z\263<\352\314\036=\347Ci<\3578:=\350\023\022\275Z\026|\275\205B\216\275\361\311\230\275\002:u=\314\331\211;\362\271\366\274\311\031\177=\241\017\301\275\355.\374\275\310\n8;\'6\230=\327\336\230<\372\226\243=i\034\000>?{\314\275\361\303\264=\313@\365=\302\304\230=\305J\307\275\003!\204\275\245\327\330=i\310\357\275\266\353\254=b2\202\275\005\236\340=\202P\202=\321\321\324\275\333\332\340\275SH\257;\353h\213=X^\321\274S\0076=\007\232\360;\027O\300\274\221Z\271<pjG<\345\0162=\031\256\327=y\242\266\275\327fh\275r\345\233\274\024X\350\275\307q\277\275V\361\'\275}\022\255<\326f\330=\177E\370\275\226\340\272\275hkR<\267\214t\275\202I\372=p\240I\275\356L+<~\220\031=\024\n\317=HU\215=\247\263\244\274\301T\253\275\3527t=\264\232\321<`\023\333<:\215\212\275\na~\275\377=\030\275uL\263=\007\271\275=Y\001M<\254\366B=\030\266k\275_\321\301=v\372\024=\340\366\377\273\274\317\253\274\336|\214\275OD\256\275\301\336?\274\030\206\363<\r\313\216\275$4\302=U\214\036=\253\232\247\275\377k\316=(#\321=\354\r\255\275\217e\256=F\352\203=\021\264\264=6\"\370=\373\343\361\275)\341\332\275a\237\330<\376q\273;\353\272\327\275\346\310\021=\342r\365\274\177\244\177=\316\026\341=\331\354\321\275J\350\231=\036\366\253\275\022\374\320=\221p\335\275\370\350\204=\206\275\t\275\000\027\333\275\253\215\204\275\325u\320\274\300c\376=\026c\210=\346\360\244\275&\200\251\275\272\332\361=EWU=\211\227\242=q\332`\2750\360\000\276>\276\"\275XS\033\275\240\021\362\275o\330h\275\223RS<N\363j<\0055V\275\313\274\374=\341p\035\275\335\341\000\276^\3320=\360N\204\275\311\0031\275\336\2640\275\361\353\365=\364\022\007\275\274\021\275=\324g\325\275.\263\364\275\267\244\\\273\246|\267\275\245o\000>\013D\276<P\317i\275\364\001\356\275//\265=N\257\266<\007\t\017=\001F\316\275\325\325\314;m\367\235<\336\372\272\275Lf\363=\222D,=\037_\214=\244\374\361<\243(x=dG\206<\226=\243=\004\241\003\275\355!\244\275\306\335\302\275u\277\200\275\355\200\203\275;\214$\275\305\255\317\275\214\010\273\2750~\331\274+\r\310\275\261\223\362=\233\253\360\274\023\335\220=\277\326\016=\240\214\321=xP\366\274\002Z\254<\247L3=$\373\341\2746\330H\275|O\224\275\251\226\r\275\330`\353<#%\001=\221\036\010=\275\367\256=\314\364\201<lb\264\275\301\2061\274\335\325\355=_\360\362=\025\032H\275\325\3204=\327\354b\275\257\316@=\261\"\337;\314`\250\275Z\024D\275P\246L\275\315\271D\275L\177\332=\022a\255=\r\310\232=\003\325\013\275\246\324\202\275=\3211=\027\336\341=C\322,=\215\244\350<\313\252\341=\027[L\275\353\246\337=\236_\254=cF\366=M\301\353\275:\237\306=\366\336\024=4\n\221=\035w\275<\273\273x<I\233}=\366\254\344\275\n\205O=\234\025\263\274\221U\333\275\203\361b=\256 O=\347\212$=\032\234\220\273\344\301\323\275\203\273\255\275\0016y=\210G\336<\027\017\210=P\236\241=In\244=\277\272~<\027\243=\275\021\310\261<H\235\237\275\263R\262=%%\276\275803\274[\243S\275t\220\260=\214\355\310=\'u\226\273\326:6<\314\031\246\2742\257\\=\r\301\275=\014\223\222=\245\274\235<lu\366\275\312,\326\274\332m\251=K\366K=\014\036\337\275\330\213\004<\255\202\333\274\211|\224=\264\257\206=\255\327\340\275D\317\205\274ab\277=\325\307C=\230\004\365\275\207\214\233\275\203\307\331=\221V\276=\223\237\234\2740\267f=\242\243\022=\305VE\275\322\033\223\274\317\331\355=/M\305\275{}Y=\213\007\230\275\312\333\324;\307\006\000\276gB\377<\303\223\353;\341YA=\325\213\230\275\225\320\354=\362`\353\274\270G\004\275\005(=\275\010\253\210=\002)\004\275\377\321\321=\345\231\362\275\311W\303=.\"\323\275\364j\252\275\314\366\352\275%\033\276\275\352\270i\275|\370b\275\265\331B=@c\232\2759t\252\274\234\211\232=\335j\375=gd\312=\271[\365=Tv\222=6-\373\275W\354\245=8\nY\275T\250l=\371\327\325=\252\035\372:\274<\225\275$\021\031=P\243\037<B\231\000\276\026\270\242\274\332\"\345=\n\020\215=`\276\237=C\031\033\275U\243\'<\032y\220=BH\242=\213O\260\275}\353\026\273F\002\304=\344\036\340=# \306=\371N\344=\357\243\341=a\326-=C\325m\275\003\373\342<\033Y\247\275h\351\262\275~=\265=z\373 <\034\217#\275\261\206?=r\250\300=\030\t\334\275\371\231\307=\334\277\352=R\333$\275\320\337\264\275\006\312\353\275\3729\276\275rV\351\275\211v~=\031\007\014\275\260r\320<\022\306\350\275\277\202[=\301\010\206=\345\021\260\274\201\351\341\275\\\326P=\263*\210=\212E\246<\307-\300<\244\302\207\275i\344*<\026\310\310\275\352\030\323<\324\263\000>\201kB\275\352\273R\275\335\310\250<\274\343\366\274\'M\367=\344\253\254==\305\233\275\336\316\244\275-O\000\276>sC=\277>\002<R\024\016=5^\317\273D\\\246<\333Ky\275S_s\275\202\271\353=\257\225Y\275h\013\237=f\177I\275b\\\374=D\222\342\275?\320\342\274\032\227\344\275 8\243\275W\267\022=-\024\017\275\207S\374\275\250\026\021\275F\241\333\274\323 \357<&xF\275\261i\205=#\2039\275\314\237\331\275\3456\235\275A\030\204\275\303\022\t\275ia\304\275b\2243\275\372\277>\274!\305E=\027#\241=\000\037\022<k\367\271\274?\260\330=)<\277\275v\371\220\275\221m\364=\031G\252\275\254\315D;T\347a<\3313\254=\345q\206<\326\216n\274\372\245B\275\205\005b\275\313\002\261=D\332\032\275I\257\277\275\017\234\270=\253+\240<7\207\000\276\264\000\366=\035\332\353=\001\325\027\275\207/\r=\377\271\263=\223\014\036=L#\375\275\333\347\311\275\"Z\\\271\305\227\000>KJ\344=\271\023\273=\302\027\375=Y\305@\275\253~s\275{]e=\2015k\274\247<\004<|\322w:\002\014\272<W\236\242\275\377\241\261\275\223\246\322\275e0\354\275h\203\363\275\034\r^\275\013\265\275=\001\271\221\275\277\313\370\2757\021\262=\224\r\270\275k\247?\275h\024\215<\030\342a\274J\273\005=\310\2755\275\261A\203\275\316\254\345\275\023\021{<\205!\234\275\370\2640\275\256K\332=\201\024\265<Z\363\023\275\265\224\257=\000y\342;\333\216g\274L\303\026<E\2600<|\343\360\275\271f\256=\244I*\275[g2\2744\367\272=*JS=./\215\275|y7\273\324>\302\275PH?\275p\350\233\274\034f\210\275\316\243\365\275\313\260\312\275\300\002Z\275\330=\343=-\326\310\275a\306\363=b.\337=\010\233\246\275qf\325\274\376`\253=A!\301\275\274,\311\275\025\320E="
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\335\263P\2768q\273=\031Q\225<\345\303O>\251\343\320=\341\320\372\275^\262*\276J\304\215=\254\304)\276\007\026P\276\347r=<\241G<>\271\230\345<\316\274a\275\240\326\003<u\2547=j\240\326\275=@\361=%\376/>l\n[=\3575\003\276\\\356Y\276$K\020>\020=\265=\022\272V\275\317\222`\273O\304\374= \340\t\276\215 \r\276\2453|\2741\300\024\276gX\362\275\244\261\215\275\211\031\236<\005\227\232=\r!e>E\302\354\274\362\262\035\276_%\313=\271\373\037=\274\221#>\36250>\006P\247=\n\230?=\226\211`>>B\221\275\003=\032\276\352]\333\273:N?\276_\241\353\2753\2230>\343\353#>\273\026\236=\362\177\213\2751\375\371\2741\356e\276Fz\016>\364`;>h\322\002\276j\021>>\025x,=S\266=>\375\200\265=\032=I>\266\310!\276l\003/:(\016\"=\236e#>\304<@\276\374\372U>\346\250#\275\303\216\017\276S\373k\274\225>\310=\226\336\275=\321\241%\276\026&\305\274\245\346;<\361\326;\276\311\013\253=\224_\227=\316\356\336\275\364\331\264\274p\274W>\305)&=i:\006>L\373\270\275N\r\021\276\2707\306\275\322@\312:\230*\350=f\313\210<\n\024\237\275~Y$\276sg\016\276\270\\\";\2070\'<&\330\002\276\302%\220=t\230\237=\313\277\373=n\247y=I\231d=\277\227\207=\306\270\307=\256!1\276\007\300->\212\274\002>\222\242\037=\006Ca>\364\r,\276:\207\271=}l\250=\\lJ\276\240\305\220\275W\273\026<\304\255\036\276\211\226\226\275\366;\300=T\233<>\247\204\005\274i\217\270\275\375}B\276\013\222\200\274.\241\013\274 \3343>A\310`>\240EB>\213\307\366\275[\315\341\274\222\000\\\276[\242%\276\024I\022>\220\325\031>\024\306\230=\321\307\000\276D\214\230\275J\325\321\274Q\361;>\031\276&\276bV\022\2762\206\342\272jG\344=\327?e\275\232\3201>\243.\351=\367tG\276\250\267\364<\022\321\200\274\371fP><\262\035>4<\313\275u\242C\274\303\355\201=\317\005+=m\256\300=HL\307=\373\316\203<\264\2707>\0145\036>h\225\030=\202\310\356=b\325[\276\277\364\242=\277\212C\276\320W\023>\016\210\350\274\332\300\375\275\017\212)>\357\205;>\362\324\350\275\353;^>\230\343]\275Rf\244=\346RN>\242\030\024>\315\033\337=\241tR>R\322O\275(\320\331=\n\300\346=\320\341\330=\235\r\261\2759\360d>\336\301=\276\330\321\317\275\r\025\">$\316\355\275s\207X=\"G\034\276\333VG>^\350f<\242\231{\275\375{\337\275)/\\\2758\276\236\275;XS=b\005)>[\2306\276\235\273\016>AU\361=\243\267\345\275\277\003\354\275\021\347\002>\204\021;\276\246\"\351<\351\020\007\276%\327^;\006\356\314\273\3652\004>\335\240\324\274\037u\363=\214:S\276\037\207\224=\031R\017>\270\254$\276\245Kh\274*5\025\276<\277\215=\016\250g=\005\323X>8\356-\276\201\237 =\322L\226=\367F\026>\371\207\252=Mj\241\2750\373\250=\371\221\234=m\262U=\240\007\022>\031*N>W\223\367<\370\247\'\276\345[\237<\373\376\246<?\036\373=\271\264\n\276\311\257\251:\353Hd\275lW\n\276\034Z]\276\254\233\262\274\324\025\366<\2549\260\275\377\207\017=6\020\213\274K:Z\276HI\027\276s\230\275\2753.\226\275/\245/\276\212\263\032\276E#\352;\377i\036\275\216\322\'=\364\216K>!vk\275\317\311\035\275/\225\365\275\215\235g\275\312\235b\276\356tc>/\020]\276\335\232\013\276\220\334\224\275dsb>ZH\205\275\314\034\363\275\341\217_>\262K?\276f\006?\276Q\022\270<\366`9=.m\235=\255\366a:\376.@>\220\301\005=k\366?>\215 c>+\003\031>A[d\276}8\376=N/->\273&a\276\301\257\r=\010L\357\275lql\275\3567\327=\367\363\316\2752+[\276\270_\310\275\234`\017\276\301\376\370\275\322\227f=y\324s=\365\264K>\255\352\204\274\226\211\226=\216\341\245=\324\022\223\275\252{.\274>\342\024\276}.~<a\217\">\214\022n=6\200\205\274\257\245\020\276\306\'\030>\222`\320\274\262\324I\275\016\243\246;\'\237\332\274\224\230\003>\020\276\013\274\252\340;\276\376\317\233\275\234S\206\275\003m\304<\273FN\276\213\254\237=\2441\350\275M\277\037=K\357\240\275\225Mb>\027\356\n\2766|^>\324\337\224=\354\264\370\275\21060\276\333\266\304<\2635\\\276\211\201\036>\301\361\027=m@\377=T\030I>\321r\377=\263\0378\275;I\315\275\025\242\277=\245\215~=\316\204\033>\341S\366\275\303\331\310\274\337\2638>o\210\271\272%\346I>t\317\220<\274\227\340=\341\030\337\275\350\326\362\275\365Z+\276p\336\267=\337\253>>\002\336\272\275\307-\021\2767_\213<\314\346\257=\021*Y=\'\306C\276\302A\032\276\007\253\260=\254\323\001\275S#\273=\346xJ>{a>\2750i+\275f3\037\276\355\n\376=i\314\223=\364A\023>\245\303\004\275V\317?\276\031\247\321=\361r\"\276\235&\027\275G\334\255\275\264\'0>.\\\201\275\2557\r\276\3136\372\272\336\334\364\273u9\333\274\'q\010\276\025\013\325\275\352\345\021\274g\376\000>q\010+\275\243F\372\2754\302\363\275\213\365\r\276\010\274\230<\300R#>i\033\006\275N*A\276\352f\">f\354\304=\367A\240=\025\031k\275\246\235\037>\206\246\315=n\nU>x&\261\275\332\275[\276\034OJ\274\254\000\000\276-z\217\275\364\277q\275\016\334<\276\021\273\004\275\242\276\032>\016&\300=\237$\346=<Z\226\275_6\037\275\203`\013\274\340\213D\276\377\030\035\276\221X\377=\036U\305;){\234<\337\321I\276MQ\320<\255n;\276\027\360\227\275>7c\276\027m\204=ELJ>\014\267\337\275\324\327\000>C\373\210\275=\324L=\375\371(\276\361!\204<\007\032V\275\367:\207=#80=\207\350\346=\353!,>\324T\332<\374\224\n\275\241\2448<\027\323\035\276\2535E>\211E\273=\372\331\021\276#\255}\274t\232\"=\251\241F>%\344\321\275\370\307\317<u\0069>\n,\226\275\235\230\337\275\377q\225=\262\233v\275\2040/\276Q\201E\276h\303\367\275\271.\360\275\004`\000\276\203X\233\275#\027\037<\270\353_>\337;\020\275f\363\030>\327\t\235<hcC>nF\327<\231\335\237\273tx\275=aA\216\275\362w\315<\016\2378\2766\274\247;\377j,\276\216k\002\274\035\313\r\2760-\333\274\276\026\006>\370\320S>w\201\243\275\376\237\010\276F\256\272=!Bd>\241(\252=\234\177\n\276\372\267N\276\265\035\t\275yQ\376\274\332W\254\275&\233\263\275\224\370 >Zj4\276c^\315\275y\323\327=\274\357%\276\347r\034>I\247v\274Z$\002\275\rN\000>\003Id\276\346v\"\276a\333\010\276\366\022\206=\353j\360=\010\210X>L\264\344\273\366\217F\276\327\366%\276\272$\315=\n8\374\275\361h\246<\371\002\273\275\3439\253=\375U\'>\244\0176\276\007\362\340\275\235\355~\275o\267\035\276n\331\231\273\304\325A=\026\\\207\275\331\313E=3\276\273\275\2351\204\274\223\362Q>\353\306,\275\260\266=\275I\334\010\276\210\346\241\274\315\024b>\325s\337=x\031:\276R\366\026>\322\304\376</\351\217=\370\310\220\275\002g\215=O\331\004\276\231^\254\275\004\324*\276\026$\025\276\177\016\257<\304\0067\275\364\246\000\276\230uO\276$e\020\276\216p%>1[D\274\315\215\203=P\372\211\275c\347\027\276|8Q=\027\226\034\276_\032W\276\355\350&>\377\243\020>\036\366\244\275\253\0242\276\330=\035>\204s,=\312\357@\276&\353+\276\314})\2762\273\244=\236K$>]\240\\\276\223Zc>\301\0178=\207\014\236\275\366\026\204\275U\252Q\276\250\004d\276\241\000X>\n#=\273m\333\216\274\255\\\206\275\267\016\'>\231\273\375\275\356\322I>j\347O>X\356\205=\332\366\333\274\335\360\\\276B\360l<@!\367=\"\367\024=\326\263\006\274\356\022)>\313\337\253=\007\312<\276\370\203/\274\0038>>\262!0\276[\010;>\324\014\033\275\232\025\344=Ty\014>\266\007\"\276\021\262\220\275\0310\205=\301\2719>\304\002\006>6fo=\265\346\205\274\r\244\017>\225\326\034\275\241\254\272=\3160\245\274\216\"\377<\326\010\334\275,a\030>\330\272b;i\244O>\t[`\276\013\315\025>\177\265&\276\253\021\"\275\216\217\202={C*>*\262=>[\rW\2764S\213\275#+\362<\215\277\023>I\226.>\037\211b=_\335\267\275g\013\002>\243\214\006=|\r\001\276\202\351\357\275\021\305\001>\310\254a\275\006X\\>4\211#\275\2054\257=I\035\341=\301!\'=\323\3640>\031\343\365<\025Su<\022U\221=\336dg\275P6\016\276ct\260=\364\273[=\216\226\307=\272\306Y>\204\022\300\275X\255\024>\311)C\276\377\034\216\275Z\346=\276f\376/>\204\220A>\354\350<\275\202\265\301\2754\330E\276\223%K>8\3238\275\354\267b\276i\006$>\223M\025\276\276\230F\275\207\222\210=L\362j=J4\315=\355\305\017\276\336v\256=\375\377G\276\367\351\220\274\030\252&=\020\315\003>\376d=>\303\024\321<\336\220->Hk\232\274\202`\230\275\303\233W\275F<\016\276\251a\272=`h\037>\036\222g=\275{\217<\245a\274=\354\337D\276\003F\270=\230/\251\275VIe>h\250.>{\341l=\262\324Q>\320\311E\276(\205\371=\376/\262\275\246\024\305\2745\316\346<\'\302\000\276\255@\035\276fN\336\274\213\220\361=3FP\272\252\217`\276\230.\211=\363\376d\2762\303\334=\257R\357\275\033\024\002\276\301\231&>c@\222\275<\362!\274+\236L>\314A\031\276\325\330=>\330p\360=\235+\375\275\273\240\360=\277M9>^J%>S;\270<y\032,\276\266\202\010>\036\354V\276\205_\313\275i_\032\276\220\277M\275\312\237L\276<\n#>\373\277J>\022Yc\276\261\201\304\274\357\034a>?\312e=\017\376\034\276\'\317\004>\\\361\254\275\366\237\307=D\014\n\275;\223\264=\\\276\303<\345\267\003\276\365\020\316\275\264\2324>\237\027\022>\r\2472\276\r\330\342\274Z\337\342;1\007\t\276\006\235\211\275D.W<\241\254\014\276\200%\323\275\221\336K=\022\223\253\275\r\362\017\276.v\026>\263%J=R.\001\276\t\033\003\276\200\020\027\276v/#\274\305&\325\275\217|%>FS\203=\236u6\276n\367\327\274\366N\221\274\361#\003\275\275\275\260<\301\273&\275\236I\016=%\335\021>AG\354\275\356\025\332<\347@\"\276L\264\021>\002\010\222=\3141`\276\026\356\347=\245\201\240\275)\322\026>\025\026\031\276\033\314$\276\r\r\025>wb\331<\255\226\t\275\023\320\013=6\\\217\275\001\272\034>\212Y\007\276[\204*=\2558]\275m\247C\276f\252\231=s\315f=\200\032%\276)$\272=^\245D\276\252\030*>\375\026@>\363\317\334;\221\217*\276?<\354;\301\360\001\276\202\277$\275&\314=>\306\024\330\275\327\014\027=\330\252\373\275CtH>\231!^\276V\324?>\t\003$\276\203\217\005\276(\2139>RRW>H\031\007>>3\253\274L\356\244=\274\315c\276\344\3038=5\325\\>\332|\303<\245E,\276\312C\014\276z\342U\275\024\236o=\304>W>\024\004\315=\377\034\363\275\010IF=\034\032t=\265\2241>\211,\354\275\214\264\344=\033w\261\275\372\223\024\276\242c\231;\220\223}<n\356\252\275\376\0130\276_\370\360\275\330:&>\237\363\n>\313\362`\276\257\001\207=\316\231\342\274\366i\205<\333p\240\274\014\354R\276l\246_>\025!\252\273\354*c\276>\324G>gq2=.hQ>@\241C\276>\2069>\223\177\016=\223\t\001>w\267\005>y\243q\274\253\024\n\276\264p\n=t\346r\275\3077\017>\324\317\264\275\031f(>}N\n\276kF\037\275`\'\364=\222\337\217\274\320\203\036>\314\362S>O\245@>Z\327\020\276\232\254\353\274\344/\265\275\\\227L=Nz\300\275\276\363Q>8\311\035=\337BW\276:3+>\367\353N\275NK\335\275h\367\343=\210\255C\276i&\304\274\233+\233=w-!>\342(\325=\035\260v\275\246\311J\276\265\t\035>\306t(>m\235\260\275\346%\201=a\264\241\275!\236\035>\300|\236\273\207\200F\276\004[\031=F\3007=V\340\031>\330\322\363=-\037A>\373<h=\334\017\014>&\t\316<d@\\\276\353\024\312\273\207\223\325\274!\007$\276\'\033\270=\355>n\275\231\252\032=^\3009>\025\211\027>\272[%\276QaG>\212\300D>\240\303\205=\376>\t\276\342\317>>\261B3\276\275\262\r\276B=\324=\302\003\006=\352\245\256\275[@\200=\023x\342\275G\001h=\300\2278>\310\272\246\275\275\365\000;\244\253\230<\262{\307=l\303g=$\014\256\275\027\317 >\0019\254=\207\347r=\233bc;\351\004F>\265r3>\313\002\021\276|\211\000\276\224]\016\275\005\346\343=f\022\265\275\034\212\327=RD\001\275\330\003\026>\225\256\307\275\265a[\276%\226O\276eH\332=\323S^\276x\364\001>\217\010\004\276\003z\360;P\374.\276qM\024;\354\010\353=\201\005[>7.\312\275\037\016\342\275?\231\032\275\234R\363=v\277_\276?\022i<\033\266\301\275Gy\232\2733\333\010=\256J\361=\351\035\216\275\303\231\022\276+Q\"\276)|\353\274\301\340\003=\344\226z=x\204\r>;\247\027\276\005\240M>\221\377\372\2741\025S\276(\215+<\317\002\032>\216oW\276\3131 \276Kk$\276\347\340\353\275?\272\270=\3251\335\274v\353\020>J[\003\276\261l=>\377\324\323\275\212HI\276r7L\276\357\235\213\275I\212\231\275\'\333\202\275\356ml\274\260\243\013\276\260\245\035\276\307B\237:Q\3204>\212L\377;\303O\034>\301\225\220=Dm8>\332\303\254\275\3032\000\275q\006\301=\251\"\013>a\372\356\274\355\365\225\275H\2061\276\325:6\276t\370d\276\002\375\216\275\325wC>#\224\210\275\313+^>\350\337\300\275p\244\034\2763\024\256:\032\205\004\276X^\010>\357\374\005>)\377+\275`\313*\273*\310j=1? <b\034N\276\271\220\227\275!\237\336\274\003\'j\275m\027a\275\306\026`>[\014:=W;\257=\274\220\300\275g\"^\276\030\2322\276XPp=)L\'\275\236\252\364<\356\005\253\274$\211\332\275\224\270\205;\311\3130>Z\025b\274JJ\261\275\022+B\275\346\214\014>\\\302\033\276\203&\313=\356V\020\275Y\3326\276t\332\232\275F\336E<\000-\201\275~\305\223\275\036u\301=\355\'\010\275\245@2>\275\211\034>\253\306b>\3225\275=\202:X=\007\0367>\345\'3\276b\023\026>\365\365\321=\246eV>t\214\323\275?\262\236\275\251\263\267\274AC\364\275\357\347@\276f\037\022>N\214o;\262\034\272\275D\344\026<\014\014\205\275\013l~\2753\r\003>\n\360\256\275\343ED\276A]\221=\276\\\357\275\341\256\202\274r\345\031\276\202E\370=\261\005`>\204\257\207=\204\267\241\275Y\256\377:\020\226V\276\212\032\r\275\246\376\251;q\0278>\234\266->\267P7\276\363\233\024>\004\006q\274\254\342%\276\251\026\241\275\222\270\337=\374\025\370=>n\007\273\375\366\034=\354\241\370=\003P!>\327\010\245=\265\340D\276\320\026\2149\033\272\027\275\354\241\372=pC\004\276[\326\261\275ude>_\220V=`A\007<\363O\241=H\330\262=\313\334C\276\276\207\004\276\\ZA=\"\311\030>;\3043>\232\230A\276~\'b>\013)\372=\n\025\003\276\222\246\320\275\251\276G\276\202T6>&=\331=\3711N\275\223\010n\275\227M\024\276\202\325\'\276\ne\202=Nz\002>u\371\255=O\274\005\276!\277\010\274\004\265\374=\273\305\302\275!9\036<2\321>>\177\274\030\276\245\341 >\253\206\025=\370\322m=\241\345\371;\230-\013\275-S\326\275\212\265\000\276\223\203\023\276\312s\003=\254\022\300=:\340?>\034\031\006>\353\267M\273\274\2715>\252]0>\227ua=\220\347\\\274\365\252\317\274\244\367,=\021R\350\275\222,\020=\"\336\004\276\346\363\224=\304\252\217;@\304\215\274x\342$>0\351\257\275%\363\326\275\321\2157\276\014\026\223=;\357]>cLU\276\254l\337\275-\300\275=zVE>\230\353\220\275\026\\\"\276\203\216B\276\336\372\362;\255Y\335\271l\022\374=\3322Z\276\030\234Z\276R\371I>\007\013\325\275\027\026\341\275\271\241\371\274qu\376\275\366\256\036\276H\304\267=6\215Y\276\367\n\341\275\352\232H\276:1\361\275F\341\226\274#\264^\276\224\031\\>\221!\317=G\343\334\275\261\250\276\275\246\0053\275\305\300\332<\013b\026=\344\225\307=~L\031>\330\207\014;2\202\210\275o\350\230\275]\037\346\275diV>\264\211P>#\264\022\276\010w\036\276\312\325d\276\252\246\304\275\343\313:=S\311\326\274\373\315L>\\\341\'=\306\037\035>\206\244\347=\246\331\266=\243\023m\275\210\226\216=\207\375\004\275|\247d>\315\314\323\274\373k\'>\3710W>EzZ\276\334\007!\276\276\t^\276\226\317(\276\347\2278\276\203\307G>\277,a>=f@\276\340\303\333=189>\301ZH\275\334\007\307=\2068\027\276\243?\266\275j\317`\275\346\3013\276a\203(\276\244\232R\275\033Kc\276)\235\002>`\235\200\274K\t\352=b\246\311=\037\236/\2762\340\333=:\204\335=\326\213\213=H\332\022=\237\250\274\275\320\341\261\273\324^J>\3679\216\275\364\251k;\377~.\275\3035\030>\206P\034>j\3176\275z#\034\276\240\024=\276\236H5>\363A\365\275w\317\242<\0309#\276\270\2738>\3059\276\275\020\366\275\275\267\206\311=\263C\017\276\277\362H\276:$\006>\207\027^>\303\363;\276\323;n\275\215\2405>\215\225\375={\223\201=\225(y\275\235\020\362;\251\233=>L\315\352\275\002\205\001>\312\320Z\276\277\223C=\260,^>\356\351\n>\360\202*>I)@\276\375\nB\273\310s\022=\374\217\242<s\305e=\277A)\276\350>@\276\007\244\t>\177M\030>\030\r\037;\2339\217\275\343\r\210=89j=\373\322\'\276\372\201\204=\270\347A>\366mA\2764T\335=M\221=\275[\365\010=v\3579<4O\376\274\276\'p;\033\030S>\357Mb>\200#M\276\326g\014\275(o7\274\203\031\'\275RG\017>\263\357\327<\234\364a\276P\2635\276\002\335\302=\027\364\376;\217\221\363\275\027\323\031\276\004\277c>4\367J>\222k`;\rl?\276\207\027S>\374#0>\206\223\003>D\367b=\036\251\'\276\211\237I\275\214\373\037>\201@G>m\276)>\036\345\024>8\332\320=\214+K\276wP$>0\335\023>\016\000.\273R\241\020=\350\374L>d\030\370\274\003\367\232\275~\004\276=9\204\262=:iO\276\261E&\276_X\005=?14>\037\256\037\276\224\207\'\275\025\274\320\274Z\177\031=\241\")\276!l$>\232\324/>F\217a>\025\366\223=\233\177%\275\263\231\371=/\215\245\275 ]|=g\263\024\276\334A\207=\374\310Z\275\227\275G>\371\270\031\276\243\336\200\275\017\353\026\276P\317\034=\361\327\270\275\212\346(\276\027\377\325=\203\202\231\275Y\333c\276m~\223=\355\033/\276\034\2225\276J\r\033\276\231d!\276\360o >\211\303\313\274\377V\273=\365\225\230\274\032Yq\275x\350\365=\010U\023=ZWW>\230\006\360\275\t\020r\275\277\033\262\275\375 \311<b\342<>0=\247=\025-\314\275\020!`=\r\364\207\275q\342\312=oT\036\276\206\376\306=:aP\274\344Gc\27622\341=\315\242\206\275w\001\003\275\010\226\357=\004\231Q\276\312\350b=\006\010<>X\013I>\311\325\363\275\004\362\247\274\253\323\300={^\233\274\02374>\032\270\026\275\016\224\375\275k\206\242=D\206\253<\003\231\337\275\252\364+>T>\n>~\037\325\275IJ\306\275\343\005S=\310\212\036>\227\2517>\201\251,\276\204\206\200=&\300 >\222\212M>h\306\370:\377\336F<\214tA=\215\216\354\275o\324\014>\274$\217=\331\232,\276\013d\'\276\343\225>\276\275\231\t>\232\006U\276\324\276e=2ZK>\005x\230\275\230+\006=J\224;>\371\225N\276\201\223V\276\2160\223\275\317\316\022>X\313\355\2742\225]>|\217R>\277\321^\276\202\315c>\250\357\002=\240P\r\275\021\317D>\272#\016>\227\363F\276&AW>C+?\276:\210J>\006y^\274\274Q\310\275t\313O\276\327\360\030\276\357\372\313=\031U\016\276Kk\346=,@\n\276\246+\272<M8\316\273J\316\334=e%\352=w\2443\276\212\031u\275\003;\357=\317\351&>\344\322\206\275#&A>cN\022\276\220\311\216\274@5\265=\3777\354\274\017B\037\2767\345\366\275\\\304-\276\330K\364=~\301!;\221\027\240=\013d\336\275vi\367=\307(\317\275\374\\N\276\347\347\322\275\311\246&\276\350\337\356<\355k>\276\347:\235<h\216G>\302J.\2769r\321=1$(>l\347\361\274f\256\246\275Q\346\000\276\256[\337=VG\022>B\222\344\275\222\017B\276\316\207@\275\327M\327;\354\030\320;(h\021>VJM>\375\221\'>1\002\356\275\205uY\276\025\354|<\264\n\311\2747\261C\276I|/=\327\241\234= \235`>,\256a==.\255\274S\355H\275\'w\272\275\323H\211\274\300\014_\276\367\256M>\353\200\274=\224[\370\275\265\206\033\276d\225M\276\251\367\002>\354\246%\276\221\317\370=\301q\027>Z.\320\275GB#\275\205Z\274\275\215A4>s\267S\2754\004\341\275-\032X=\356\2331\276d\030\227\274\240OF;\232o\226=\0271Q>\0202\207\275\316\312\357;7\215?\275G,Y>\024\344\014>\347\200\017\276\247u7\276\317\224\342<\341U\351\275\365r\005\276\000ir=h\330\251=B\247^>\215\322\034>\037$S\275\177[\377=\016\321\026=\027l\213=\366\200N>\327\221<\276\017\350\033\276\255\202\r>I\252\002>\261ZC\274R\317t=M4\325=_\003\"\276P\372\230\275\2375Y>\245^\002>\221\3230>\204m\212:\233\224\364=\201\t-\274I*\316\275\017\252\000\276#\265\005\276\'\233\022=\361[\021\275\360\365\301=U\277\265\274\366\3254=\2552\265\275p\326\223=\313h\244\2756\362\317=\231\304\'>\254OJ\276\346\350\016>\252\356\013=\325\243D>\264\036U=7bE>\013q>>\363\332:>6\013P\276C\267\021>\272\202\350\275\325\003*\276n[B\276\221\317\321<\223\356h=\340~\t=?Ws\275}h\351<n\204\004\276Q\340==\201<\341\275\253##\276\315p\336\275\377\t\226\275\001\355\245=\204#;>\\QM>Z\221\244=\310-*\276\203>:\276L\236E\276\352\374\376=f\035\251\275\r\3359<\023)\302\275\272\341\010\276v_U>!\346Q>\204\274\243\275B_\361\275y\250J\276[A\007>\331\244\006\276f\355\022\276\322U@>\035\031\030\276\340?b\276X\032Q>\363\023->6k!\275f\034K=\275 );6\245\277=x\345\026>\321\035\"\276\312\352\003>\330l-\276CU\310\274\016\254\363=\3250\356\275A\311\020>0U\324\275\363\330\020\276\237;\025\275\tJ.=\032<X<pd\365<\246\2367\274\240\364\024\274\226\tM>\240o<\276\234\371X>\020\t\207\275\222\341M>X\352\332\274-^\026=\021:Z\274\227-M\276\232\2060>\306B \276Y\020_>\220\334\333<\306\322\225\275\222\232\347\2750\030\336=\203\255\303=\300\365Z\274\330\0346\275T\340D>\242c\253\275\237\244/\276\034\247\350\274RI@>\307\006u=\3679\017>\027\3623=\225\275\320=\371\023\334\275\276\354\273<\035\243\312=\032\224\210\275o\303\274\275`\202\316\275 \210/9\346\232\314;\242\315\313<VD~=3r\330=\227\206)>eO/\274K\275R;\021\227\201<+N\357\275\342\270\214<[\257\007>\213\332R=\362P\271\275\205\366a\276\274Dc>\004\2162\276\270\252\005\276\\\035\t\275\264[|\274s%`>\307h7=|\223d\276\334\330E\275&\237-\276\242\215\223;/Q\265\274\342\360\247=\371\177b>|\346\001>\013=\222<S\005\022>\340\265\240=\221\363C\274`\203\361\275\317\321G=?\342\321;]u^>\224\266\315\274f\234\247<n\313\301=\251K\264=\273\004!=\224\247[>N-L\275\256\301\034>\216 +>\255\356$>|w\253=[\361\000<O1\251=\262X9\275\270F\007\276\306\224\276=\367\303\335\275\327lF>\302\311J\276\025\023w\275\374d?>\273\223\237\275G\321*\276\367^\350<H\206\217=G\252B\276\241\327I\276 \342C\2764^\240\274MS\n>h,+>\031\370#\276\317\355\006>-\006K\273\346j\374\275\352M\'>\031R\025\276O\356\'\276\212G\027\276G\356]\276K\317\276\275\366\260<=\305u9\276o\335;>\276-\352\275\266\245\001\274\377\016\230\275\216\332==\3119|=uN`>\267sd>\313\222\351\274\034\260\356=\253\253?\276\315\022\035=n\237G>\030\261Q\275\rd2\276\240\310H>\346\006\377=\223\227T>/\301b\274\322\234\270\275\262\017\353=_\347\003>\255\215\023\276\344\234\316\275\234\247I>\225\025\211=H.:>\006\255\342=\310\2078>*\232U\276\233 \002\276q\364H>\033\267\252\275\254\337\334\275{t\245=v{\205\275\256\245\031>-\371\256\273\274wJ>#\236\251=i\226e>\214\314\336\275\206\005\245\275\373\306\371=P\256\222\275\274\372\013=\001\302\267\275\037I\'>s\207M=\235b\032>\034\201\202\273>T5=\317\016\003\276?e?\274\242U=\276\024\376P\276\022\355\266=\320x@\275\212\222\337=BKM>\010\270\333=8\372\204\275@\014\033\276r\"\303<g\2734\276\223U\343\274\304\025>>u\221\374\275\371?\355=S\347\027\2761\213\037>\263v\024>@\233Y>\331pW\276TOF>\362\n*\275\221+D\276\303Q\000\276\347RD\276\020lJ\276\373\246\200\274<0\370=u\355*>.eE>\236\032\202=\t\3001>\363\252\357\275\365\357\020\276-\006\"\276\000\273\356\275\355K\326:x\360\324=\311;\257\274]\376Y\275\035\206\r>\362\305\237=\336_\325;\r\3039\276\347\332c\275?\021\177\2753\331U\276\221D\r>\214\033L>\333\260Z\276?\377\023\2764\035\003\276\245\241E\276\206\230\340<xd\255\275NX\350\275A\214\021>\351\031D>\243\313\317=\256\037\237=\341(`=+;\026>\002\311N>O\255\266<\327W\350\275\233\307\253\275\204U/>\276\035\245\275\026\342\031\276\264\355C>\304\0241\276\213\177\025\275\2224\332<\313`\007=\261\214H>Y@&\276\t=`\276o\301\341\275\260\016\n\2764\037\273=\276\025i<&\362\330\273}y\035>H\214\370;\223-\255=\0042\324;\375\341^\276\363\002\035\276\004\226\335\275>\201D\276J\304W>\215\246\217\2734-/>\0305\226<\371\265\362\275;\325\276\275\215v>>\'\266)\276)\350U\276\031\231a<?\352\372\275\354\207`\276e\027\375\272\270\320\242<+\177B\276\324g=\276\034\333(\276\305\247]\276\343R\346\274-\341;>\302\203\021>\255T\020>\250\327\004\275l\223c<\004\276\217\275\341G\010\275i\tB\276\303z[\2752\267\257=u\213\216<\251\272\206\275\210\213G\276\245FS\274\026{\244\275\214H >u\357\224\275t\334@\276eo\003>\211\023\377\275\257_\\=j\210Q>\274\344\004>63\232\275p\2016\276\203\277 \275I!\027\275\363\341^>\314\213\277<\221h3=J\362\363=\031\376\354=Q\351B<\364\237p=\020\270\376=\354Y\n>\300}\204;\252<[>\256%m\274f\022\356\274\037t\311\274\r\366\211<\005\300\007>\334\310\005>\365\273.<Wx\313\275\277U\257=I\205\001\2762[]>K\023\226=\003\334\343=m\253\001\274b\370B>\357\272\005\276\032\231\263\275\3409C=$w\227\274i\221\301\275/\035T\276n{\\>\212\021\233<9\262\375\275L-\300\275f\344\206=b\2111\276u\331\037\276\t\010P>\351\377\374=D\033\351\275\323l#\274\371e=\275\200\344O\276:\302\250\275\r>\\\2753z\037\276\241\004\026\276.b\277=\013\324\302=R\355\354=E%\347\275i\220S\276\023\n\342=\364\231\227=\3421\t\274\320\3434\276\3742\306=zv\270\275a\324\005\275\255L\002\276\333\356\037>\013\226\341\275\326\216`\276 t\200=\254\322X\275\205?\177\275\255,\304;-?\005>\316w=\276d\255\201=\260+D>\235Q\007\276\226s8>a\254\035>\321\264\024\2766U3\275, \363\273\005\235\361\275u\361\307=7G\223=\211 |\275L\301\333\275\314IU\276\264\243\364=[NX>\355\356M\275\022\002A>\203sT<\325\241z\274s9a\276\235sc>\021\"\356\275\313\263\343\275\317\232$\276\257P\026\276\273R\346=L\370\351<*U(=o\000\311\275}\345\310\275\321.9=\\\233\017>bV\215=\353\227_\276\314\346\214<\035\321\177\275p\213\336<^`\000=\r\033\335\274\340\253@\276M\270B\276Ut(>\331\3627\275\214`\331\274\366M,\276\031D\003<\313\376\370=\364\0142>\223\312\366\274\002\227\016>\2648+>S\002^>\331\232\302=\201P\325<\036\203f<\2068i\274\231r\025\276H\025M>0\2569>(,\007>6\023\001\275N\312\"\276\356S+>\206*\316=<\027\204=\242*\027=[iT\276<\273]>\332^\205\275\320GI\276})?\275\347;+\274:%e=\226\312\206=\347\234\242\275\262\277O>/\262\375=\303\2346>j\260,>#\365K\276\213!9\275W\354\342=-.\216:\003&\241=V\242\261=\346\270\006>F\335\360\275\213\373\346\275\325\270\221\273\243\021\010>*%\005>\337\335\265\275\233\337\245=\214\230t=\333L\035>nF\031\276\274\ty=\255\373\362=(X\310\275\367\245X>\231\322I=\334&\023\275\253\244\\>\223\032\013\276\r\216\377\275[\362\020\276;/ =-t4=\035\276 \272\017\274\200=\3308e\276\250\361\001\275\365\213)\276\330)c>[\035%<4\226\r\276mrR>o\001\021\276\000\201L\276!\247R\276?,(\276\347\2239>tt\005\276u\363\341\275o\273\250={\272\366=\n?\305=\3619\017\276P\275\326=#\322\343\2754\034\002\276\034!\255=\370M\033\276\373\331Z><\2036>\370\006\316=B\357@>{G\314=?/I>\252\035\\\276\210\261Y\275\013n!>\2043\355\2754&\007>(K\n=\325\'\037>K\t\321=\313\330\t\276\307\217t\275\273\'/;n\210L>\315\014\330=\361P\036>\227\032\366=-\033\314=\034vR<`\361\361;\243\253L\276\317*\022\276p\3332>`\316\n\276\206rb>\177$X\2764\233\023\2760\207I>E)\025\275\031\"!;\327\257_\275k\211:\275\275$L=Vd\332=zn\345\275\0270\235=\353t8>\367\324\317=yU8\276\307\272\313\275\221\314q<\276\\\363=\367\000\024>dq\\\276\\\'\270=\242a\317=^\021\200=\2720\214=\304\201M\276\373\334\254\274\236\021\'\276a#\204=\254\0343>\322\334\005\276\343\251>\276\342\241\005\276f\004\'\276\327\257\202;\370\004O=rR\030\274\355d8>\263\005&\276\321\320\013=\357m\027>\321!\212\274?\033b=\361\000J>\313\264\014=\\\'\021\276\326\352\n\275%mA\276\354\302\026\276\226a\224\275\272\345A>\357\006\352\275B\2169>\356\234n=\232\326\313=\351\r\005>\303w\014>\340\247O\276!\320\363<\342\301G\276\276\312\245=[\327e\276\357KH\276h\036\032\276\022\325r\275\225\221==\335\360\332=\\5\306=\'\256\020>y!\243\275\323\030@\273\335M\'\276\'\2366>Vi]>\254\226\247\275\260\241\207=\367PZ>\235fE>\311\377#\276y-8\276\346)2\2762\016_>\362R\004>\336,\246<\370>\032\276\022<2\274i\030\320<r\262\010=\035\315\024\2765t(\275\376T2>\200pJ>Q!:\276\326\231\242=\337\010.=\001_\376\275\251\rB\276\240; >\214\t\347\275\357\005\250\275a\323\275\275,\310\202\275\301p,>\212\204\331\275zd\261\2752G\226=\263=]\2766A>>\270@\210=\272\237H\275\315\330\t=MA\344<\300\030\006\276\212\270\315\275\022\231\243=\027\221L>\027\221\314\275\214-%\276\tD\372=v5w=5U\320<6\204Z\275\206\301M\276\037\340\333=\300NB=\'\224\327=\205\001\324\274\024\203!>\301G\324\275(\\(>\311\322\257=\360\035`\275.G\254\275\215\007\373\275\251\361\257\275=\221Q\276\246\215\355\274\352!\335\274L\357\007\2753\0245\276\247\3177>\347\3329>\'\312y\275\231s\r\276\351%\023>\270\025Q\276\302m\335\275 M4=\324\207[\276\335\005\341\275&\202b\276\235\010\002=\243c\035>R\001$<\354\002\313\275\003\202\177=\027\303[>c\224\201\274\252L\310=\245\316 >l\353&\276[U<=\237-\273=\0232\216=\'\276\215\275wmT\2766\303\301\275M8\027=\252=\033\276f\270S=\207\274|\275)\255\254<\201A\304\275\342\2271>\311\010\303=\034\207\265=\211\251\232\273\022\212\367=VE\372=\272\314a=\342\306\254=\203M9\275\224\201\274\275F\305C\276\250\343~=\361\314n=\236\327\301=\005\240N>\216\035\036\274\300\000\253\275x~\376=\210\007\007\276~#\263=\310\025M\274\316EL\276s\264\270\274\363n\310=\360\312\357\275\302C\235;X\207D>\325c\034>~\365^\274\331\271x<#O\014\276V\351\346\275\017\234&\276X\335\220=k\322A=\335\304F>\225\"T>\037\331\000\275\375\342\023>]\020\"<\267\203\003>T\307\205\275\3051\227\275I\256.\276R\357Q>c^\354=\353q^>\255\022(>\356\025!\276\200*A>\276\347\035\276\336~\242\275\272\2359\275(\024\242=\350*p\275\304\301\375=\236\305\370=\346\272C\276\005\3414>\350\037\317=^h\371\275l\225\017\275\201.[>s0]\276m\345|=\022\366\r>\322\nY\276\t\305\206<u\013\331\275GU\027>E\226\215=\313\357\362\275\250\013\342=V</\276\221O\262=7\\\360=\217!\301=\204(\355\274\337T\n\276\245p\371\275\352\020)>\324\364 >\200\325\272=9\217I\276\320\272\010\274\315?I\274\243\343\036>\377\215a<\"\247\212=!Y\010>iE\344<jj\004\276\252x\005\276\035a#>\220\006\355\274D\204>\276\346\212>>\201\320\323=q\370a>n\277\373<\001\310O>\035\230Y\276\211\315M\276\326$(=\035\373\332=Ete\275zDO;&\036\244\275\014\342\014\275\305\227t\275)gL\276\016\303\360=\210\005\302\275s3\225\274d>-=\300\275\370\275\277\233\220<\001{X>\006|K\275\335\273\021=\0046\376\274\332\360\250<$c:>\323\316B\275\337\360?\276?g\331<\371\244\n>\t\033F>\216K@\275\025\023+>d\034\021>\335(\263\275\326-#>\021\357D\276\211\253\036\276:\201\006\276\210B\316\275\365\201h=\315\307P>\006\264%\275\245\3600\276\216\363\234=\210d\024\276%H,\276\\\312?>\333\311\251\275\270\370,\275\333\014\002\276WV\264\275\314\340\231=\212\263I>\371\352\316<qg\202\275\366\252\'>C\263\013>\366\023\231=\014*R\276|Q\346<\320\330x\275\022\265Q\274\353[\002=\021\224\255<\034\250\331=\007\003\020>\211\212.>\001Ge=\256\361\352=\r\367\025>\030\372\206\273X]\337=eC;\276\017\251\336\275E\020\r>1:;\275T8f<Ph\n>\032\321\003\276\320A\030>\253\304_\276`\010\247=\261\\\016\275\367\367D\276\004\010\t>\216u\r>8s\201=\266\317\201\275\352\364\001\276\206\314\326\2755\301\016:\027BK\276\352\332\014\2760~\035=\365s\357\275r)\r\276\030m\277\274\225\205!\276$\330e\276\242-U=\242\364\005>i\005\233=\263\377\311\275\273;\226\275z\356\322\275*:\272\275\300\355\300=o\007\314=\0106.\276\024\002>>\267\rP\2764\362c\274\375\343:\275\321c\256\274T\217\315\274ZC\322\275\223K\357=KK\007>\002\365K>\337\350-\275f\014\206=%F\030>#d\301<\242\254\026\276\335\033Q\276\037.*\276B\375\317\275\201^M>\022\302K>}F#=\310\021\025\276]o4>\207\242\274\275m\250+\276Bw\274\274\230\325\247<\016\177\355=e\006|\273\300c3\276)\343V>GT&>\003\327)\275R\225*>kP%\276\r\244\007\276\324\2058\276\\3@\274\004\347\210=\320\177\r\275J\367\354=\367`\020\276\370HG>\310US=\023\254Q\276K\320S\276\267\246_\276\257\305\261\275\254v+>L\362\343<(\365\317\273v\251\257\275D\230\255\275\007\3177>\313\032\335=\226\222,\276\034}/\276\3512\310=\342\261\367\273\024\024\221=\273a\'>m\364\346=\037x\277\275\326v\035\276\026e\021\276\372\205\023\276I\227?\276\377kQ>\325C2=\324\367,>\261\242\260=\263\314V>\\\313\314\275uxt\275\274\264?>\272y\247\275b\371\"\276\255\014\317\275\016\317\036=s\361P>(\016\357=\336-s=\311\300U=\203w\364\275\370I\257\273\345.\177\2759H^>\374\2710\276\210\250\024>\2710\356\275\267H1\276\003v\031>\226\333\326\274\031-\\>N\334\037>\332\254\376=|\006\363\275_&5\276\210i\006>S\235@<(\260\033>x\035\010>\355\315\025\276\026SE\2767\332M\276\322|I>\340]\272\275#%>\276\033\256\277=%@\005>\304\270D=\022\307\037>u\027\270\275u\224S\276\002Y`\276\325\354\000\276\003\315\277=JcU\276l\246\003>VW\014\275u\023\210=\331\375Q>b\301R\276$_\225=C\344?\276\227\303&>\206\242\345;Ma(\276\221D]>!\354Z\276\215\375?>`G\021\275(&\031\276\341+5\276%\332\307</\371\356\273[rN\275\022\234\375\275\323a\227=3\240\242=\035\201 \276\266\t\\\275\271\013\357=Oz\355=\267\370_\276o\254\304\275\004\2165\272,\251\375\274{vn;\270=\270=\032\2758>\023Pn\274S\363\022\276\215\211A\276\260\023\243=B\304\316\274 \370O>\230\235A\276\301\367\323\274\334\034.>\302}/;@\262`\276\364>4\276\325\353\321<b\371\200=\r\311`>\36050>\366\232\031\275\353\3038>\005i >J\016\244=L*\232<\320Q\003>\031\361\020>\\\262\201\275\2352\022\274\253\025\241=\365\364?>L\020\001\275u\270N>\016\210\000\275\331r\326=\37724\276\221\345\\>\261\232b>\275\016\242\275\177\227\255\275\364<\026\275\203\327\263\273\377\234\221\275\027\276\017\276Dw$>\244\360+>v\215c>\215sR>_\027`\276v\2034=u_:\276L|\017>\365\200<>\216\242\377\274\364\201\251\274#\240\001\276>C\374=\2758\312=\365\224\026\276K \215=\245\343\267\275\301\270\371\275\371\216\350\275\221\035\036\274\373\222N\276Nx\261\275q\301\r\276qj\251\275\033s;\276\000NL\276\213\212\030>D\2618\276$sH>\\\310/>\303\'\334\275\031\375K\276\264\205\021>cu\007\275\346s\243=\334H\374=>\306B>\240\273f=\004uU\276k#\211;<hE\276\177\366\324=\370\342\\\276\370\3607=\004\272\202=\314\206\230=\236\276\023\2767*(>\200\237_=Y\035\213;\232j\252\275SG\001\276*\201W\276\322\230\t\276\217\360B\2765\233\236=,\205\201\275\215\033\352=\247M\371<\267\013L\276p\007F\276-3(\275\006;\267=\025q\233=\035\201Y\276^\3221=\212\000%>/\350\036\276\352\006\311<\372\2059>\016\276\276\275k\nL>\030\304\'>?\014\317<\005\263\300\275\330 `=tF\263\275)!)>\2023\242\275\201\0008>^\2707<\030\025\006>\276\220_\276Cq@\276\370\223O=3\0273\276}\021:>?t\014\2767\r\323\275=\236h\272q)\023>\271\231\323=\334c\214\275\220\237\200\275\223J\005>\004a]\276\310\'9\276\257\333\326=\241\314\000>\301\303\n\276\271\014\323\275n%\022\276\226\256\007=\000f\354\275m\r\030>Wg\262\2743\221R>\353=\205\275\321`\342=\"\337*\276\321\026<\276\200IE\276\276n\014\276\347;C>\222F\343=\377 \215=\326\266q\275\242P\245\275\271\255\364=y\375R>\337#G>\254zU\275|\277\224\275\311[\024>\240\326\200\275\377\315P>\320)\300\275\243\007\r>Q$d\276f\250<>F\025;\276\301P;=\347\253e>B2\210=\017\302W\276N\246\006=\307\257C\276\353\225\013\276&\231\325=\n\':>)\r5=\001\300P\276-j\\>SC\354<\301CS>\236{B=T\273\236\275\007\234T>\035L]\275\221\277\005>\254\"?=A{Z>\3123,\276\217J\024\276\332\335\200\275d\032q\275\317\2361>8L\225=U\235\365\275\005x)\275$\027\375\275\010\021\207\275@\217\336;\355\310]\276+\343\033>opI>\255\224\t\275\245=5\276\3419\325=c\366\363=\252M\020>\317\223?\276\371\373\332\274n:\251\275H\371\001\275\332\252\320\275+1G\274\001{\203=\001\005^\275\323\223\257=\037\310!\276N\242\232\275.B\255=\225\316K>\033\004\275=\004\331^\275\264\230\273\274MU\333\275\360\205>\276\213\t]\275k\024<\274d\210X>\230y\241\272\247\016o=\247\225Q>\2019\307=\372+\r>\277O$\276o\370K=\371Kb\275\311\335o\275\014:\370=\026N@\275c\337y\2731\326O>\310\240\232=\366\313\314=\247\252!\275\202>\215=\003\211\213\275I\005\230\275~\241\006\275\372\242K>|)2>%\326\t\276PzO=\230(:\276*\367\017>+HG\276w\346i\275*T\014>\017\376\004\275\376\014Q>\235!\362=\002\340\024;\303a]>l\022\247=\360\200\327=\016Dc\276\014\272\t\276\007rD>fT\313\275NS\001\275\337\365:=\032\252\213\275f\3079<r;M\276aR\263=\217\261\320\275\002\241_>E\345\316:\340\376\240=\033\226c\276\363H\025\276\320\264\230=%\360\326=\006\343\220=\200B\010>\231B\205\275|\330\246\275\'\0007>\226H1\276\241\351\032\276\304\270#\276;\367\020\276\017U5>\373\003\356<\277)\017>\263\340b\276Z%*>\265\211\303=O\313A>\225\204k=\310\346q;Yxa\274\035f\026>\224\242\314\275\322n\001\276\240\323\200\275\005\244\227<\263\363h\275%\"\236=\203\016!\275\222\342F>\002e\031\275\360P=\276W\370@\275\222-\\\276\0005y\275\207n\320=H\307\274\275\205L:\276\3162A>dD\352\275?3\032=\365\t\220=\201iH\276{\322\357\274\034\354\303\275cE\246=\342l\210\275\204\361\253=n\273\313=\232\0005\276\265\ta\275~\010x<3\231\025\275\325\035\013>\3321\021>\350\000\r\276 \030\263\275\332g]>)\304\'=\235\235Y>\362t\357=\221\206H\276\017\226\367\275\372m\331=n\023\035=\004\204\347\275hq\330\275\016\'\002\275&PW>k\001\247\275L\037W>,\024\267\274\210\000C>b\200 \275\325~\021\276\257\262\260=Tg=>\3059\304=\204\273\374=<\245\332\275(\221\310=\232\323\\=C\233\374;\277\035\010;\371!\360=J{\360\274-\002\032\276\n)\005=\252\227\335=\212\3334\276\375\317\016\276x\3016\276\220\377 >\275\375\346=3\357\025\275%*\216=rx\356\272\305#+\275*\201\004>[\005\264=\t\240\333\274`\377_>\372\353\245\275\345a\317<\301\265\177\275\352\2422>\034\022\214\275\344:\025\276\341@\022>\251\304\365=\307a\235;\304\030\032\274\335\347B>\374\270g<\324^\025\275\370{\362=\360\255\312\275\004\211\204<\260\262\264\275\335h;\275B\301F\276\206.\003;\376\274j\274\016\372\371=g\261\000\275M\016;>\334\002\334\274\005\270\274\275lV\366\275qs\257\275\274\367\000>\014\375\272=\021j\303<p,_>P\\\255=\333\013M\276\240mq\274\311\254\225\275\026\310.\276\nr=\276\263yR>\362\025,>\030@\353\275\346\300]\276\021\017\341<\241a\023>\315T\003=\226\2473\276vm\013\276\274\\\276=\244+\350=\340\216\261<\372\255\343\275\0051(\276\247\214\211\275E^\370\275\006I3>O+\342\275\273s\346=\227\270\331\275\213\362\217\275\330\336\031>\336\006\355=V\216\212<\327\200%\276HZ\203=cEW\274Yv\323=\275U\000>\3363j=-\010\214=\324M\261<\370\351$>cx\322<r\002\360=\301\035\001>M\331\355\275\372\037a>#\303e>\253\010\201<\365)e\274z\002\023>\334\227\264\275\342wR>\350;\337\275F&R\275\330\270\217<\314\230\237\275\261OO\276\010a\240\275\352\013R>\343<f\275\252Q\256=\305,\312=\333;E\276\307\333.\276\321\2653\276q|/\276\371\321\033>x\270\r\276\233\2114>\246\343\204=\206TR\276f\376\373=m,\242=\262\006->\366wY=l\360\300=T\320\027>\000\210\357\274\213\000,>\352\004\305\2754\003Q<0U?>3\273b\2769\376\262\275\277\323\031>\202\256\216\275\3341:\276d\360\267\275\004\326\355\275\200\222B\276\375\325C=\016\372\033>\316\023]=\256\205c\276cS\217\275\020\244\r>V\356\024<\320EX\276\343\274\034\275\267\2526>\370\346Z\275\2225\007\276\347s6\274\032L\373<\374\350O=\221\304\033>\201\376U>#SK\276hN2>\201\311M\276\300\201\027\276$\265K>\350\017\017>p+ \276\350\306\001>y~\013\275\032\253\201=\220\222\366\275\366*R\276\026\307\274=\347\233D\276/y->Z8:\275~\243\266\275\326\362\260=\005*S>\224\366<\273\305\326a\275\300\2232>\014M9\276)\324\323\274\363v3\276\264,2>\0331\000>\023\n\r\276k^\237\275\246\334\023>?5\265\275\210lS=\301\317\236\274c\213A>_L#\276\221\226\247=DT\014>\">\214=fZ\231=\226\023:>bg\235\275+\357\321=\2050\352</\255T\276[\237\021\276\177bB>#\362Z\276k%3>\304S\025=<\t\263\275$\277V\276\241\027\030\276\3324\323=\360I\021\275\233\210\004\276X\020\347\275\031\372L\276O\325A\276\324\355/\276-\214\014=@\017:\275\010#?>\271;$\276\017\213\252\275\213r0\275+\275\320=+l\200<h*\006>\323\244B>I\216\266\275\314vY\2768\226G>;\246\002\276\317\246\027=:)f<\277\370V\276\206\207Q\276\227s\214\275%\225\261;\004\316*\276\374b)\276*\353_\275\3326\317\274\315\240(<\300\214f=\333N\034=\266\337\243=\205\305{\275\346\351x=z\347\013>\270r=\276\033_\363={)\000\276iG\303=\207\265\347\274H\000\024\276Q\361\027>\034\312s=\370S4=Vp\236\275\251KY>\323\0239\276\214]S>\334\363\'\276w\200\006\276\371\304\031\276k\3300=2\023\302<S$\r\275;O5=\277\227\003=\245\374\375=\344\355\333=\177\227-><\034\373\275O\005@>\231\352A>\317\312\317\274fe\226=\264\226e>n\311\360\275\331z\'\275\273\367b>y\205\222\274\205T\007\276fz==\260\274G=\236\0246><w\016\276%\265\301=C\250\373=[\226\263<\321uD\276\221\266G\276J\216\310<\tr\\>\272vS>\221\013\224\275\216\353\376=\327\022c\276r\201\333=\326x\377=\000S)\2764S\302\2754\226\311\275s\201w:$\272K=\305\014H=\3350d>\2277\300\274\215\262\355\275\3531\022\276\362Y=>\275u\234=\240\3770\276\251\213Z>\367\377\035\276o\254 >\027V\334\275-\333\331\274\240\220\002\276\360\314\352\275\216\032B>\3235\202;v\305I\276\200\277]\276\332\356C=\312\326\020=\245\277\323=eS]>\367\276\244\2750\tO\276a~B\276\343-z\275d\017\306=U\216[=d\227\327=~)\210=\231<\223\275\013\374\264=\313\3675>fY-\276\261x\216<a\323\244\275!\366\222=\217\200\374=Dg4>J\362\021>\223\320\225=.\2005=Sq\030=\200HU>\227\022W\276\365\367\321=\"\267\322\275\237\023\376;7*]>[\n\276=}\315\016<YS\260\275\rxM\276\345{1>\225\202P\276\324\2124>CA9>~\321\363\275\236\023\236\274\271\332F>\303\352\213=\"\371\370\274\305(\026>\001%]\276A\032\024>\316\273\007\276\347S<>78!>\304a#>\314\360!>U\322\024\275B_8\276\034X\305<\254\230;\276\302\3469\276\3575d>\002b\026\276\371\031e>\212\036;>6\266G>\253\307\326<\241\013\354\275"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
