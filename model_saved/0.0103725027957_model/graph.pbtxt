node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 55
          }
        }
        tensor_content: "Q\355\002>\242\257\212<*|\013>YO\266=#E\366=\251c\245\274~\256\202\275\301\027\033=\014j\325=\331>W\275\237\234\340\274\271xE=R\274\000\276\007(b=J{r\275\227K\325\275\212+\342\275\325SC=\034\376\206\275\r\002\010\276\340\201\270=\021B\345\272qg\217=T+\332=\227^\303=\336Bi\275{\177\235\275\301\025\231=%\0304=\2225\352\275N\362\276\275_B\021\275\000\267\227\274B\325\025=\370\013\274\275\233\237\005\275\345+\'=\313\271\200\275\334\332s\275\376\246\377=V4\261;\024\227\000\276K\314\013\276\022E0=\037W\001>\304\334\003=_p\261\275\026=R\275F\235\357=\022\263-\274z=\326;I\225\215\2750\331\312=\'\235\244\275\212\240\324\275\254p\245\2752\225\332=\005o\244=H\303\321=\035\231\316\275\316/\n\276\032!+;\204pR\274\320 \373=\3268\002>\267g\207=\354r\254\274\006\317\034\274\377\356j=\214\236\234\273\n7\177\275\216\213\201=\271\361\350=Y\253\002>B\350p\275\211%k=1\331\010>\34186=\301\331\330\275#d/\274\034Z\303=\263\205\316;\rA\222=\235\333\251=\335\207\325\275\332\234\263=Y\325\251\275\376{\302=\257\206\373\274,]\366\2754\300\243=(\320K=\242\267\005>\032X\033=\3306\235=C\277\347=T\237\027\275\253\265Z\274\001\032\r\275\326K\274\275 \310\325\274S\273\314\275\025\375\353\275XU\374\274g\325\250\275\313!\315=2\311d=.yd\275\347\346\362\275\"w/\274Y\266\013>\363\004\220\275\377\334\350=\244\257\003>\205\305\222\274G\206\336=\252\256\344\275\016\355Q\274\252\214\004=\224\251\370=\030\224\371<\016\212\322\275C\013~=\344\350\341\275\232\ne=8<\000\276QP\230<\331\002\213\275\317\254\234\275{j\234=\021\204:\275W\231>=)\307&=\237\037l=\363\212\250=t\244\307\275\371[\234=\253\235\274<G \364\275|\355\311\274\224\323\242\275\223\345\341=\347\307\264\275\271\321\000\275\342\347$=\251\241\204\274`\357s=\200\005\364=e\270\324\275\360\335\306=\013\311\360\275\355\226\323=\332\262J<\266\201\265=\327g\331=d\020\241\274\241\352Q\275\312\365\243=\205K\304\275\026\315\364<jOB=\217\310q\275\345o\363\275\267\370\222\275Gu\361=EYN<(0\355\273~\211\346\275\256\007\005>\235\224\035\275\376\261\324=1\222\274\275\211\006\"=\330Y\001>3\370\360<\314\301k\275\037\211\300\275\332\'\270<}\276\262\275\274M\003\2757\274\200\275P\256\366\275\035n\331<\315\342\202\275$y\300=\316+\325\275yb8=h\177\336=\3764~=\347\277\'=\037\272\000\276a\210\360\275\237\031\343\275z\361\330<\374\014S=\327\017\t\276\023}\251\274\215\266\346\275-\236\014=\030{2={\370\\\275\305\312\251\274R\266\346<\340\361\010>\222.\002>1\023\343\274_\324\315\275\rS\304=F\216\306=\2230\274\274^7\234\275\002\006\211=\313\224\250=3\n\204=\355SG\275M\211\014>\317b\357\275\026\234\303\2750\372\347\275\275x\347=L\035\321=\370\237\224<\350\303)=\271\217\212=\370\021\016>o\371\232\274,wh=3\323(=I\302\001>\341\342\000\275-\030\270=L\352I\274C\227\302\274!7\301=\022\352\251\275B\200`=V\362\314\275\233U\372=FP\241=\205\217\345\275V\270\225\275\007A\217<\266\212\324=\2437\r>3\260b<\265)\237=TuE\275\326N\004\275\027\241\375=\345\363\203\274qB\256\275\\T\276=\213?\253\275\300\007\357=-\223\013\276\267E\022=,J\374\273\317\035\034\275h[\260\274N\033\317=\000p\271<\2219\032=\n\212f\275h\211\274\275D\211\222\275\324Nj=-\260k=\001\317\240\275)\037\367=\330\277\260;\263\274\275\275\342\014\316\274u\351\010>t\032\376=4+\304=\216\334\371\274\036\036\266=\036\217g\274cK\010\275\'\254\253=E\201\216=\233\223\327=\037%\236\275\261@\300=\206\266\304\274\360A\371;\330J\231=?\325E=\213\355\203\275\246 \271\275-\333\236\275\375\301\006\276\301\357I\275?\3258\273\367E\222<\220\347\016\275\232D\347=&\016\226\275\257I\014\275\376\017/=\211\\\344\275\337\303\243=wp\340=R\344%<\0368\n>\354`\013\275E\001\324=\005c\355\2759\371\"=\016\305\276\275\37124=Y\273\347<\336\034L;\0210\000\27612\336\274\340\233o=\252K\004=7\361\244\275zB\037\275\227!\257\275q\262\302\273Z\222\253\275\367\251\307\275\027\005@\273\"\255\276=;o\276\275l\t\242<\371\270\322=En\347<\320\016\032\274&C\242=\031\271\002\276I\000\224=\264\313M<\005\352,\275\220\302\331=\022\270\027\275>T\360;v\375\323\273\'\253\001\275x$\010\276,\000\375\275\266\276\013<Q\375\255=\320\021N=e\343\002=b4\241=\316\362\347\275\334\301\352=Dx\024\2757\244\206\2754\350O\275w\213g\275ee\253:X\241\360<&\002\200=\312\373\272\275`\014e=<w\325=\352\021\265\275\337\360m=\375&\363\275\250\310\331\275C\331\362\274k\245\303;\264\032\327<\033\222\346\275\2175\263<\347x\001\276\274\355\207\275\370p\002\276\320\037\361\275R\350 =\361\316\001>\221>\306=\314\206\001> F\216=\024m\001\276\261\224\014\276\375\302\204=\354Y\327=\357\321\246\275\262\010\211\275I\340\311\275\204\356\304\275\240x\326<|s\236<\352F\236<\240j\234=\344\031\316\275\017\216\303=\033\241P=/\003\364=o\250\371=\204T\235\274\010\222\311\275\3472\254\274\357;\202\275\305\333\207\275\307\321\273=y\276\375\275\311b\311=M\221\200\275\266\2105\275\333M <x\337`=\021H\223<A\216\250=~\220\023=?\324\013\276\275K\316=_\007\t\276\302 \010=\274a[\274\3022%\275\"/\242=\007\260\365=\371|\365=\201\355\221\275!*a=\220\332\316\275\372T\345=\375\215g\274\215\310\214=sG\257\275\333|;\275?\307h\275\356\246\013=\363\0376\275\215\321\312\275Ew\000>\215\265l<\271\241j=\000\342\365\275\365\240\203\275\026\347\331\275\311\211\360\275\2331\273<\256vX\275\260A\375\275c?j\275D\005<<W\230\000\275\004_\246=\265\314\263\275\340\220\207\274\2707i=%\236\321<\221\"\006>X\351\023\274\317\332\340\275\217b\346\275\242\010\347=0\034f\275A\354\321\273\010\374\203=\261\201\245=\305\367\215=\253\001\271=\\\222\005>D\254\177\275\261\200\223=kf\354=\034\363\t>\321\310*=\215\241\203\275\311\340\013\276\010\307&=\037\230\225=\373\270\322=8\3751\275^\t\002>\022o\227\275\213U\270=\256\351z\275\0345\2249\266\005s=O\276\010>\234*\363\275B\356w=3\321\353\275&\360\216\275\312\036\001\276\r \352\274T\323\315\273%\t\025;n\324\245;4\"\256;3\'/;\326;=\275;a\005>\026\307\007>\375\034\266\275:\210\360=\013\312b=\001\220\031=\n\364F<\316r4\275\371\302r=\244\370\344=\007p\237:C\026\n\276&\340\007>$mp\275\213\227\354<\'\020\266=\035\323\366=\031\325M=\020=\256\275\216\234\313=}K\362\2755\370\276\274\004r\003=\036\365S=\237o\254=\254?\320\275\003\326\006\276h\027\314=\200E(=7\031\377\275\330\221w=\275\235_=y\304{=\332%\336=R\213\336\275\032\031Z=J+\303\275o\0354=]F5=\354\213[\275JW\014\276B#\024\275d\034\327\275\200f}=H\241v\273\201a\365\275W\377\260=\034\234\004>O<\247=\334\2116=Z\326\252=\rz\315=\273t\004\276\352\357\005\275[\262\265=\265\256p\275\033q\241\275V\310\016=\341\t\340=\302\214\346\275\353f\006>\327J\312=\264\265\231=-\036H=\257\227\355=tY\330\275\342\210\247=,W\253=s8\360=\325\rd\270\323\016/\274\005\227\341\273~\323\257=*\010\255=\204x\226\275\363_\013=\301\327\222=\033\373\n\276\024c\274\275*m\003\276K\010#\275\366%\233=7Ux=%\007\032\274\245\0035<\177\206\324\275\257+\204\275\003\016\r>\370\330\330\274\226$\223=\022\200\210<\026(\220=-\331\230=*S\2368\324\000\220\275l\354\300\272\342\332\361=\350?\343\275BQ\357;\342\022\262;X\340\260=\350&\022;\243X\002\2764\2510=\321b\336=\352z\210\275\233\361\330\274\367\020\321\275\234O\211<\203\024\210\275+c\001\275\344\010\337=\301U\005\275\221\307\201<\'O\210=\362\235i\274\355\264\201<\027`\347=y\207\"<A\216Z<\275\204\272:\300\277\245=\376y\037\274#gS=8\032\272\274=f\357<Q\246\201=Qq\007>\035<\"=\266\366g\275\035t\246\275\035\207\250=.J\201\275z!\312=\r\355\000>\301r\330\275\2166\221\271\207\315\332=\354\274\374<C\326\311=\334\001\001\276\253\362\201\274\356\220\'\275\235m\314=x\240\371=\236\2353=Q]\005\276\217\345\323=\331\'\372\275\330\305\201=\\\024c=\327M\375\274\370\306\356\275\260\213\263\274@\253\310\274r\227\225\275\315ZE=R\265\242\275)\017\220\275\341\354\366\275F\363b\275/\037\035=\001\221<\275Y\201\177\275\035f\353\273\251\032Q=xj\024<\217\t\334=\004\212\223\274\304V\373=d\031\322=\331\236\000=\361]\202\275z6&\274\243\366\350=\"P\254\275\217u\005\276\307H^=^\376\262=\247\n\213\275\247=\214=\326$\005>\177\003\361=\226\035w\275\022B\316\275e\372\233\275\246\203\311=\033\257\024\275\257\210\376<9ui\275[q\206=9=\342=\276\303\312=\247\275\035<o\355\250\275\313\030\242=rpp\275\364\374#\2750W\216=ET\033\275\272\026\315;\200M\305=\277\000\317=,\315\211\274J\303\014>\342\0065=\340#\001>;N_<-2\260\275#\244U=\373u\275=\017\342\t>\337z8=\322[\007>\275\030\312<]\314\316\275t\355~=O\277\004=\032\364\250\275\021\t\t>\354\205\336=\337\024\261=\265\350\302\275\351r\006\275@\034\222=\203-\237=\352#\331=h`.<\352%_=H>\307=l3\363\275\361\305\030\2750p\000\2765o\010>\271\265\317\274\036\307>=\317\024\220\275e%\221\275\024\205\177\273\372\253\314=+\302\354\275\365\244\t>\213G\372\275>c\373\275?\374\013=p\321\246=\245\307\003\276oo\352\274\rK\255=3\000Z=\304\243`=a\267\207=U\331\337\275\n\220\275\275\031p\356=\313\354\010\276\362?\363\275j\315~\274z\274\003\276\303\210\375<\317\343\231=\346&\215\275rYt=\347\266\230=\322*\310=\365<\021\275\327\006\261\275F\245\220=\257m^\275\3705\237\275\220\347\222=\365_\376=d\260\034=\010\203\014\274u\3122=\351\0076=\304\212\\<6}\344\275\247\236\362=\217BL\275d+}=\325\276\340<\256\274*=\363:\274=\215\n\006>,~\362=\374\346\t=4\203\013>\002P\355\274y\035\206\275b\245\255=g\332!\275\251\363\240=W=3<\036l\357\275\256\276\317=4\316\242\274 @j\275\'\3149\275z\275\251\275\234\271P=J{\245=\233\260\222\275!\025\255=\307\271G=\315\257\326=\026A\303\275\2100\274=O/b=!\330\336=)\372\363=\260\357\022\275\370\023U=j\244\t\276\034\306E\273\2167\236=_\234\027\275A\037\316\275\262\204\205\275\300\230\347\274R\007\261<N>\367=Y:\320=\203\325\366={\024\336\275\203\230\n=\206\021\331=\220y\251=wG\343=C\325`=\223\234\250\2741\370u\275\303w\322=\277a\t>\325\356\005>\265\007\306=\307[\305\275\275\006\217=\213\346\366=\270\355:\275\223\330\336=\313\337b=1\270\236=\307\237\222\275d\331\317=u\r\014>\002\022\366\275\254(5;Xy\260\274\271\237\216=\\\264\237=|\013\377\274\005\230\341=\341\032\211\275\017|\221\273\250\n\370\274\362y\216\274\374\032\211\2753\260&\274\235\361\311=\314\2708<87-=f\224Q=F>\373\275\352\374\003>\216g\222\275kk\346\275%Pb\275!\374\260\275\343\272\360<S\234r=R\000\346\275\2713\257<\232\217V=\014\265\375\275W\265\333=\3748P\275S\262\220={\216\014\276\263O\030;;R\235\275 \324\001=j\235t;W\036\221=\013\326\205=\272\341\370=\264\203x;\036Q\003\276\375c\336\273\346\3036=\252\337\260<(\255a= \252\310\275c\232\341\275;\230\r\276\356\237\024=\245v\274=N\317\360=\310\334\014\276\314\360q=\204\277\271\275\260d\240\275\006\373V\275v$\374\275q\323U\275\217(\212<e\304\262=ub\010\276*\375\364\275\326\331\341=\304\301B<\274\215i\275.\305v\275\231\366\345\275\367\001\260=\177n\213\275\t`\352=,\311\203=I\030\303=\302\262@=\256\000^=xEJ\275\233\356\245=\364@\223=\003\370I\275\224\020\273<\002\334\006\276\254v\277<H\312\347\275\356\372\307\275\351\324\001\275\272\250m\274\271\241\370=:\253\362<\253\'\300=Z\306\205\275\232\307s\275\315\336-\275<]\202=q\006\305\275\0249\373\275(\245\242<\342\206\017\275\261\373\304\275\223s\224\275\256\320T=8\033\260\275K\237\016=\3439\335=\265G6\275\032\232\272=r\226\010\276\262.\314\275\006\243\t>\305ZN\274\334\267\217=(\332F=\235\277\230=\027\332Y=\007~\004<n&B\275L\224\325=\262\300\301=A2\361=nh\334=\335\341\227=\203W\363\275\303O\310\275J\036\313<\357\353\214=\271\344O\275\367\017\325\274\014C\261=X\275\215= \030p=V\365\001\275\305\272j\275\241\336\277:\236\241\253\275e\343\265<DQ\377=b\\\231=\227p\016=\002\233\256\275\031%\364=\236\014s=\355r!=\031v\264\275\014Q9\275\371\274\002>^\344=\275\331\331\337\275\373B\276\275\007oQ\275\n\3274\274\202\037\237<7\303\217\27514\260=\347n\246<PK\354\275\252\306\265=R\023\375:\233\216\225\275\003\323\264=6\254\002>b\354\316<\r2\246=Sc\001\275\274\335g\275iV\303\275\351\201\221=}\233\217\275\3676D\2751\037\206=1\233\212\275\332\236\230=L\202\026\275\023_\000\276D\212D=\3712\343\275\207\276\355\275Q\235\361\275nB\354\275\201S\r>\205\377B=vz\302\275\034\344\320=D\037\313\274\217Zo\275\0131c\275\3553\273\275\"\251\250=\005^\221\274\214\257\036\275\332M\321<\351zI=\376\371\367\275\232\237\322\275\013 \244<a\317\270=Q\242\033\275\254\022,\274eB\341=}\313z=\177TF=\004\313\033\275\255\353\302\274E\333\313=\326\243\306\275\376\365\366=p\275`==\354\211=\306\303W=\304\350\021\275\311\205\010=\336\241\014>\232\330\000=\004k\264\274\300\311\221\275\270[c\275.?\031=\273\333\014>A\212\342\2722A\220\275H\000W=G\255l=\027\r\262=\337-\376<\252\372\342\2751y\301\275T\333?=\365U\037\2754\230!\275\316\366\372\275\347\022\253\273Xc\014\276\314\037\253<\007\220\003>\024.\014>*\352|=\362]\030=\251t\262\275\354\220\245\275|\206\252\275\373\347\r\276\315mC\275\316v\234\275\032\366\010\275._\264\275\245\334\217=b\001\217=?\024\341<\311\016\213\274H\036\337<\tW\334\275MI\253\274qI\236=\312\213?=\006:\013<\rIM=\262\375j\275\016A\225=\324\032\227\275\245\275\001\275+G\374\275\tX\312=\250{\240=to\207\275Pp\231\275\035\006\303\275[rf\275!N\211<\313\207\237<\376\017\207\275\036\307\274=\033V\365<4\217\242\275;0\354\275\242\342\320=n\261+\274\305G\316=\233\344\330=\223\021X\275\333\275\223=\263\324\265=\371\323\362<u\005\010\276Vy`=-\252[\275\304\226K\275\211\357\336=1^\343\275\322Y\271\275\350\236\205=\005\312\006\275=c\005\272\353q\310=\336\251\226=\336\340\005\276\340\325\234=\023\r\310\274\305\201\303;\320\031\354=\360\\\017<g\325\212\273\2023\344=0]f\275\353\232\347\274\255X\327:|w\370=^\r\305<\275\002\014=\377\353\210\275o\203g\275\240\305\341\274\022`\"=f\352\351\275p\240\025=\002m\365=\373\321\014>\334\n\033=\254z\003\275\036\226W\275$\310m\273l\273\216=\312\016\317=\005\226i\275J\r~<\310\374\213= \314\332<FO\260=J\315\315\275\207\300\227\275\237A\033=\254\030\214\271C\\@<\342B\365=\273\327\247=\250w\003\276\362Y\276\275d\372\257=\334V\247=>=\277=\237\311\311=\314\342[=N\375\247=-\367\314=u\031f=+\272\363\275I\036$={\2368\275J\353\255\275V?\207=[\346`\275\360\225\366\275\243$\320=\311I\377\275\265\010\235\2749\237g=\373\255^\275\244\024\232\274\236\006\302\274}-\216\275\n\324\263=\306\313\325\275\257\362\322\275\014&&\275\0340\016\276\0036\244\275\316x\036\275\364>\327=p\206\215\274=\272\033=\333\375\347\275b{\026=p\261P\275/\207\277\275t\314\204\2752mR=\024\251a<QN\226\275?]\232=[\204\366\274zB\260\275\224\244\265\275\200\304\341<\366I_\275\210\222\270\273\217\254\202:\213\300r=\353\350\337\273\221\214D<B_0\275\304\2767\275\321\301\003\275\010\207\327\275\235\027\256\275\262\371\274\275\255\265v\275\303\016\342\275\315\213\316\274\264\2125=\341\262\375\275.\036\237\275}:\365=\331\233\340=\355\333\326=\263\371\000>e\213$=\241%\323<a\271m<\351*\215\275\256\213\032=\320\330\277=\004\021\317=J\002\251=1\340\220\275z\3277\275\313\352\205\275\001\251\334\275>G\253\2751\324\230\275P\254\344<|x\365=v\326O;\034\340\320<MJl\275uB\024\275H^`\273\204S\004>\333Q\r\275\312F\302=\033\374\034=\204\240\365\275{\310\036=z\263>=\340c\251<\300\327\250\275\335\301\005=\212\300\253\275o\335q=\003u\370\275\253m\371=\220c\323=|\031\220<\277\001\265=D$\361\273Q\272\013>\261/\334\272=0\037\275\242\376\t>\033\214\223\275bNF=\024\312s\275\263\016\266\275x\272\357\275\307\253\220;\373\031;=\010\026\301=\212\343u\275\263\304\217==\t(=\177~\023=\216\315\203=)\037\230\2749\332\341=\324\tg=\240J\344=\374\204\026\275\354G\001<\31438\275\365\201^\275\330\273\336;\341\272\263\274K&\203\275\022\272\021\275\274\202\001\275\020\254\334=\001\352\311=2\r\220\275@\'W=\257\277\211\2750gN=\t\026\257\275\271\356\357=\242\006\030=\023\017\016\276kD\316\275\366T\020=\177\201\252=\021\022\000>p\324\251=\307U\023=9p\322< \303\027<\307\222c\274v\274\210\275\350\322\337<R\243==\017\271\234\275_\213\257<\020\357\324=\361\214\355=\037\307\t\276\246f\202=\034\234\337=,\n^\274\275\251A\275{\314\221=\2373\323<,C\201=p\034\377=\rC\006\275\360\035\234=^,\274=\013\352\304=GXx<;\256\312=\225N\315=\216\003\216=&j\227\275\006\225\207=\257X\373=\'\216\006\2767\377\235=\201\0276\274%\375\243\274\343\004\375<o\001\231=\274\302\006=<dr\274\307D\005\276\032\264\300\275\177\372\314\275\300\035\276<\337\216\207=\367\010\377\275\271\004\010\276A\261\307;\317\233N=\235\\\354=\\\377\014\276\377l\002>f\214L\275\210Ug\275a\270\n>-t\375=\303\033\364=AP\014\275\035t\t=\021\032\252=\371Z\223\274`S\274\273Uj\206\275C(]\275Y\001f\275\234uL=4\271\215\275\323\310\311\274d\372\316\274\366\032\r\2768\325\246\275\352g\335=_^\003\276\322x\251\275\212\344\010>7\311\345\275^\337\'=\350\343\327=08\020<\326+\t;r[\251=\003Bv\275\310\367\355\275\206E\033\274?fe\275C\371\342=\224\027\247\275\375\371\025=c\355\202=\220\230\342\275\367%0=\245\311\277=\010wW\274\357\232\243\275f1\245=\001\313_=\204\235\255=\020\323\006>H\034\277\275]\230\316\275z\251\210\275\263\3170\2758\227\373;\237__=! \364<\357\217\257=\335g\236\275\202\034m=\327\352\343=\361\004\273=\200\222\337\275\203\355\021=\330,+\275\344\000\354\275\026\351\337=.z\276=\351p\211\275\374^p\275DT\360<9r\264\275TW\364\275w}R<\017\204\205\275\302a\034\274\210(\003\276\217\303\243=\347\203v=kJ\005>\013E\262=B\345\333;\363\204\004\276(\010\355\2743\010\217=\024:\013\2760\374\n>\247.\234=w\235\004\276\341\321\313;+V\235\275\233\r\271\274C\002\217<\313$\252=\262\207\326=\317\217\322\274)a\216\275\374\222\010\274[YK=o\217\014\275\231R\277\275\235\r\263\275\3141\213;\002\357`<\336\032\356<\361\031\343\275\311E\323\275\324\205\016;WR\236\275\2525\215=d\325\261=q\000\033\273\222f\313=P\374\255=\014\336\357\275\223\257\250<\302R\001>\205\337\342\273\265t\244\275=\376\007>s\003\000\276G]\345\274\337\2016\275\017)\005\276\300\257\320\275\300\232\024<\354\222\023\272\346\372\231:\026\314\334\275\200\322\000=\207`\006\276\024\354\305\274+\230\003>2,\002>\366\230|=\256\226\376\274\222^\204\275LY\270\274\224]\004\276D\265l\273\374\311 =\360\031\256\275\350\034\272\274{\r\346\274\325P\206\274\302\367\235\275\250\000\374\274\330.\014\276H\300\233\275\267\336\264\275\314\206\336\275$\305\005>\224\240\367=h\013\332\275u\r\232\275D\320\366:\233$\023\275\014]\001\276hj\244=\261\027\203\275\236=\276=z\254\212<\327\351\360=*\327>=tB\335=z\224\250=\004\002\347\274\300\205\n>\277Q\235\275\232_\254=E\376\005>\345w\007\276&\024\374\274F\332\004>?Z.=r\025\371\275[\221\271\274\303\351\377\275\265\345\005>\014\267\271=\266\356\333<zC\023\275\005\350\216\275\004!E;\030\335o\2757\326\r\275\321\200\347=\262\204\256\275PL\240\274\246\232\"=\212\023\010\2767s\246=\322|R=>i\005>\000\343\352=w`\350=\031\352\014\276\314/\260\275\262P\232\275\366K8<\367\3366=\344\037\333\275Q\221\364=\003j\353<\rX\000\276\257\274\314=C\270\241\2758\214\033\274\370!~\274\313rV\275\216(-=\333\323\324=\\w\010\276.\257N=m\335\004=kk\250\275d\234\004>DC\317=\022c!<\004\227!\275\302\372V=uQ\206<\255\322\264\275\374\017\304\273_\354D=\350\207\225<M\341\n\276*K\365=\302X\277\275\225\370\023=u\274\300=\237\337\244=A\223\215\275\364\235\177\275\271\346d<\345{\370<\211T|\275\236\307\346\2753\346\274;R\361\331\274\244\'\275\275\255\032\374<\215R\342<Wg[\275y-\212\274\361\364\261=\023\216\010\275\237A\222=\311\024\006>\005\210\256\274\316j\346\275P+\310\275\323\232\004>\210Z\315=\255S\2559\360\267\216=\271\310G\275X\263:<\336\306\007\276\274<\004\276\023\331\362<\005\312\324\274V9\234\274Sp\363\275v{\'\2759\246\013>a\303\363\275O\317\026=\360)\352\275\220\263\t\276\024\"\261\275\312\220\207\2753\025\300\275N|\245=\312\230\002>\324\357\000\276\232!\273=\013\031\202\275\250\345\321=\005\242\305\275\357\223\312\274\270Pv\274\205\376\362<\355\200\311\274v\032\"<\2619\036\275lh\372=<\224\201\275\353W\330\275\224 #\274vw-\2751\320\252=\265\n\006>0N\365=\237\377\373\275\352\233\225=r\322\360=\316i\315=R\307\334\275yC\265\275\372\211\374=\315\002\362=\366\026\016>;/\366\274:\226\244=\376J\232=k\331\030<\354\305\261\275\367~\325=?\025\022\275\031\263:<\355\327\307\274\260I\307=\201\216\264\275i\177\347\275\357KT\275;;\253\275\251\017m\274\265M\241=>L\021=\262\256\036\275\310&S=\362\253\376<\251\215\242<\227*\304\275\355M\006>\375X\324=\n\342\374<P|\006>\036\255\244\275#\320\007\276\t\277\227\275-\313m=\355*D\2734v\330=7&\221=\377\255\231\275N\364\177\275sH\353<\213l\267=);\346;\017p\004\276\355\240#=3\334\207=\240\266$=\226\350\000=\247\027\003\2750\241\260=k \272\274\356\254-\275Z\354\351=\225\212\327\2757R\263=\335\300\351\274m\304#=\006\004\n\275\376\037\346=\020\333S\275\270\235\031\275\241\257\377=k?\347=dz\032=\021b\265=a\247\357=\2046\230=>\366\267=3\266C<E\343\203=V\354\010>\316\331\235<\027\271S\275\373\2350\275\275\270m;\244T\014<\033>v=\360\342\014\276\311\334\360\275\366L\014>O\372\204<\3749\200=\375\317\366\274\210\213P=\236\257\306=\032\227\357\273\021\276\357=\332\340\271\275\304;\336\2757N\360\274\367\274\235=|r\274\275\0131\222\274\002\003\t\2761\203\310\275X\340-\275wP\337=\232\332\013\275=\0216<\376}\356<\226\207\010>\374/\007>\263B\333\275ynD\275\331\313\340=\231\230\r\276\2529\030\274D\373V\275Q\300\264=T\322\373;X@\257=\364m\305=\255\200\341\274\325~y\274\363\026\t\276\237\276\013\276\266\020\277=\3117t\275\242}\241\274\323g\257=l\212z\273\316.\024<Y@\251<\317O\213\273np\317\275=!\253\275\300\353[\275\336_\327\274\234\010\321\2734B\323\275W\r\235\273`\177\223\275p\017\306=\227\n\231\275x2\017=+\323u=b\237\371:\310\356\302\274\275P3\275,\352\234\275\273\216\344\275\340\334r\274\330?s=\233\364\006\275\0101\257=\247\212\013\275\306\346Q= \215\217=\"\000\t>\016M\010\276\262\363\027\275\017Ah=\343\344C\275\\\234\350\275QR}\275\362\232\260=\247g\307=\021\246\010\275c\305\224\275pr\276=\251\212\314=c/\335\275A)\231=\303)\213\275x\3154\275\343\364-<BY\251\274i\250\325\275q\215d\274]\223\006>\257^\342\275\211\317\237=\272\020\227=\244\317\007\276\314\235\325=0\324\305\275\252\206\311=t\376V=\000\003\026\274\211\321\300\273S9\231<\211v\215\274\030;\220\275\232\244\324=\306\203\t>\020f\354=\373\316m\275\261\216\374<*]\206= \316\375\275\030H\211=\335\002\361=\270\311J=.,\212\274\035Q\200\275\204A\032\275\272\204\255\273\375\274\375=%\223d<\031\t\377\275wj\351=\340k\n\276D\272\351\275\203\352c\275\341\322\235<\331\327@=at\030\275\266In\275\356\233\312\275\236\225\006\275\230b\367=\034\r?=\316\204\245=)\242%\275\375\234\n>\346\223\337=Z0\317<\361%\271\274R\351!<\262\372\355\275t\306H;\341j-=s\246\003\276\254\026\347\275\307\022\365=b/\360\274\326w\315=}\275c=i_\251=v\246\r>\261\304\375=vq\177:\273\004\364\275\017\345\001=\212\246\265=\317\211Z\2754\254\313=\314+q=\"\354\311=\334\302\025=\025\322\245;\304\n\216=Yy\352=\350\372G\275\370\032\265\275\024\221u\275\2539+\2759\001\247=K\342~<\020\252\271=?\014\314=%\001\210=\261\335\245=\230\361\310:@\351D<\3340\364\275\271\342\035=\303s\215=\224\211[=\353\021\242\275\204\221\227<\037p3\275\016U\000<]\234\345\275?\324\t>\030l\000>\030#\001\276\235\313\203\274\264r\243\275\356\314\331=!wf\275\346Z\300=\345\257\016=b\356N<\247\367\007\276\242^\233\275)\222\307=\235\221\307\275\035\241\311=\025t\327=\346\2414\275n\005\203\275+\301\357=\365.\351=I\374\274=O\264\343=@V-\275)\341\022\275\302\366\033=?\263~=+\005\312\274\317|\315\273\300t\250=\367\003\322\275\321\344\005\276\232\272\277\272\343o\t>l\017\332\275\3707\n\276\324\212\002>qN\362\275\260\350\202=4N\306=OL\331\275\260\266\000\274\241\367\251\275\2577\312=\r\263\225\275\036\347\225\274m\343_=\002\316\337<M\210\231\274&\377\373=\357\r\333\274\224\357\007\276\226M:\275\244+\217=\034\374\254\274\331D\352=\311\024:\2743\362\317\273\n\024\335=J\202\020\274\337\347\362\275\324\357\332\275\352\355\222\275\014Q\204=\226\340\"=*n\335=_{\373\2754\260\222=\267\207\001>S\375\213\274\357Q\320=F\342\327=\362\332N\275[\210\366=\250\000\r>h-\206=\022\372\335\2753\230\000>\023\010\220\275\'\376\013>\t|\377\275\312 \231=(\242\326\275\032\221\211\275\2111,\275.\001\271=,\307\371\275\374\223\207<\027u\006\275~c\371\275{\215\343<]\305\014>\t\250;\273\274A\347\274>\257v==!#\275K\231\300=K\240\370=\230\027\253\274\255N\310\275\n\245\234=\322\345\250<\241p\276=\227\310\004\276-^v\274\232\311\263\274\374\021%=\261\230\250<%\251\005\274\366\020F\273\232\270\005\276\212\017\372\275\251\352^\275\360\213\032=\236\277\355\274\030\376\352=#E\243=\032\236t=\311\325\204\274\266\232\311=\315\024\270=y\361\005\276SC\374=P|\000\275\0241\206\275a\277\215=S1\257\275\305 \373=\212q:\275\206z\377=\333\243\232<\323\177s<\342\326\261\274\363\275\r>\'B\373<\031-\257=\355\212\312\275&\231L=\255\254\255=J\022\270\275\324\021\346=\344-\310<f\215C\275#+\037<r\300\250=\254\203\326=\305\032\320\274c\203\357\275\305\363\352=\001@\000\2760\006\354=xS\272\275e\357\263<\322\213\243={U\006\276\343J\220=\373o\323;\225\362\231=\350Q\\=\302\016\210=H\362<=q\302\017\275J \203\275\321x\324\273\200\215\265\275\312\t\240<\376\030\t\276\020}\366<\365o\302<y\337\225\274\366i\255\275z\330\371\275\321\213^=\332\016\255=UI\322=e\217\3327\367\024}=\0054\240=Q\267\001=\273\377\372\274\315\322\267=jP\250=\221!\261=\331\230\352=\374W\212=\340\334h\275\301\356y=\035\366\216\2754\214\003\276\211,\253=w\270F\275I@$\275\225DG\274\007\245\303=>\305\312\275\321\315t\275\312p4\275\273\003\r\276\336\364\345\273\366\246h=d]\306=\275t\216\275q\237\250\275\266)\335\275D\305\233=\3666\r\276\370\233@=\t;v\273VM\241\275\317\253c=#)\"\275\320\335m=/\365,=i\0301=\244\211\271<\305\202\225=x\237J\275\027\375\277\275\274\353\010>\313\256\257\275\303\357\233\275\213D\225\273[\024\247\274\nc\\\275\023\211<\275\031\341\245\275\355\024\001>\001\320\210\274^\377\274\275}\277\240\275f~\202=\200\010\351=\270\023\364\275\357\201[=\224B\354\274\271\323\001>i\024\003=\236\006\233:\322[\373\274]\322~=\351\362\323=W>\247\275\327\200\234\275\257\204\241\275F\244\244\275\235\210\r\275,\324\341\275\344\034\236\275\315\205\253=?\021\304<2\251\007<\244\242Q;_\307\235=\223\332\216<o\222\275\275 \022\305\275H\326\310\275\036J&\274v\363\001=\247\'\013\276\001\033\250\274\377\305\235<u\366\364\275\320\226\332=\372\r\233=\314!\035\275\225\323\363=_\023A\275$\361z\275<\355\370\274\024\376\227\2741\t\353=S\343\271=L\335)\274\260\235\207\275\242]S\275\014_\r\276\027_s=JV\007>\025y\346=\321k\224=\324TD\275\344\262o=\"b\332=t\003\340\274 \036\252<\2555\027=\257\346`\275\032\213\260=\247\277\274==\325\311\275H\362\025\275=\032\332=Jj~=\024{\000>\272\270\004>\225\324\306=\244\275O\275\352\275\244\274G\267\t>\355\270\255=\201\024+;\373\261V;^f\231=\341q\203\275\213\223\260\275\3124\343\275\013\316\311\275\212K\202\275\246\323\341\275*Qq\275\354\254:\275\010O|=\000z\213\2754(E\273\220\276\271\275\377E9\274%\201\322\275\2056\352\275\272\301\222<\257\365`=K:\351=\255J\220\274\235\022\360<J\232\224\275\357\227\010\276b\323\321\275\375=f=\343\267\002=,I\322=\025\347\005=\200\265\247=l\262\346<\305:}=~\3026\275\223q\325\275\211\236\204\275I\310\362=\357\250J=U\237\264\275\331p\n\276\257J\262=\322\233\240\275\021\336\007\276\321\024\256\275%T\007>\212\211\275\2750|\303=\271\334\344\274\340\270)=\222\242\004\276\215\374\234=\224e\365\275hv\001>\372\260\351=\354w\013\276\220\364\212=\264\"$\274\306S.=w\344\276\275\324*\237=\351\354\235\274\201\340\241<\222\202\007\276\020\323k\275\004\306\242\275\030\027\027=.\350\221\272\200E\306=8\262\360=\333\343\014>\300rV\275.eR=O?\311=\260\\\002>\2568\006>\244\344\370\275\254?\005\276\216\361\267\275w\364\354\273\336\345\241\275W\r\260=\035\371\023:\221o\207=9$\033=<h\275\275\310\321\r>\267\301\361\274\303w\233=K\256\273=\235f\206\275AI\347\275:[B=\235\275I\274\026\213\r>B<\005=\210\271s\274\214\276\336\275\347\333\335\275\250R\262=\353\"\253\274\364T\354=\230lm\275x\002\004\274J\326\321=*\330\243\275\237b\362<\214q\331\275\275h\336\275m\224\340\275\227\375\003>\233\"C\275+\324\312=\321\321\304=R\315\221\275W\3132\274\354\217\351\275\332\205\203=\014\223I\274\356,\236<\'\264R\275\254\266\007\276\031Y\010>\340H\245<\2243\324<\310\307\305\275\"\375\275=\2157\236=\036F(=\211\034\374\274\265\245\003>\247F\245\274)\257]\275\211e\r>\302\327\206<\212\r\016>\337\226\276\275\2010\264\275\254\265|\275;\367P;\003\214\005>w\263\224=~\t\005>\305g\005\276kA\321\274\351\216<=P`\352\275\027\275-\275\213\362F\275\240\r\217\275\340\014\305\275M\263\020\275\033Z\301=\344\313\n\275T\177\237=\2577\377\274\263\223\t\276WfA\275\322\356\254=F\246\014\276\031\202\231=\353\342\236=T\277\004>\335_W\274\244\353\311=)V\274\275\3174(\275\213i\367\275z\363\261=\320\207\265=\366-?\274H\007\374\275!FK\274f\010d\275\254\372?\275\353$\002\276\330\310\370\275\277\360\014>]5\371\275\363O.<\343F\331<\345\001E=\014\376\301<\361D\305=\226\276\314=\204>\006>\222\020E\275\300\310\225<\223e\325;\036\270\354\274\223\342\320\2751x\000>$I \274(A\377=\370\311\274\275w\300\207\274\360\3646=\006\360\007\276\rM\310\275e\313\332\275\342&\374\275\003\013\304=\364\335\233=\240\3472\275\021\037\003\276C\022\244\275\327\357\311=\031\242K\2758\324\202\275f\213\313=\020k\006\276\025\367\004=\025\366?\275&\226\346<+\247\250=\302\001\010<eD\320\275\373S\003>a\220\353=\234\306\000>\2770\206<\204\307\t=0\225\254=\324^\215\275\366\253\361\275\037\260\376;\327%z\274\205d\205=\322R\000\276\220\363\000\275\351\"p=H\320\361=\006g\314=\352\334\245=\354\000\252\275\n\316\'<f\225S<\311\226\247\275\001-\271\275q\037\262\275\362\263\313\275\322\347\006>+\336\n>\340\252\265\275\371\235r\275\255H\306=_\231\331=\354\023\006>\205\330\213\275=\220\002\276{\314\373\274\344\222_=c\326\007>[\372\223<\205k`<\357#\363=\202\223\353=G\205\207\275\367\313\227\273}\205f<\343\231]=\251n\200\272_\200\312=d\371\270\275\370\n\374\275\r3\005>1m\001<\"\345\221\271\361\0303<e\212\255\274z#\003>\227@\231=\206\202\303=K\220G<\252\177\242\275\347\355\230=\216\351\027\272=\370\262=\313\265\311\273\360\254#\2750\022\370\271\372Z\260\275x\002\221<\274\2357\275\223g\347\274{r\213=00\360\275\001{\240<LL\306\275\200\261\013\276\267\220!=\270).\275\305Q\'\275t\0200=\216\314\257=77&\275\265\327\207\275\250\236\372\275\325*s\275\245!\215=\364\213\002<d\271]=\270\343\007=\035\213.<\253b\304\274D}\320=\212\002\374=\0168\373\275\367{.\275\314\224\203=\263p\330\275o`\234=$\242Z=\262\273n=\353\257a=\335`\351\275\360\261\206\275\2505\303=\272\013\261\275\014a\021\275\304\326\237\275Zk\302\273\272\006k=\315\242\007>\273\207\227\274\327u#=\255\025x\275Uq.\275\375)\377=\022\314\262=`\251\377=\230M\211=\217\336\250\274r\316\002\276~e2\275\375h\036=\372\326\003>D\230\306<\025\"\253\275t\353\347=\334t-\275\241\236\237=\030j\341\275\014\322\226\275\313!\366\275\325\362\\\275{\006\364\274%-\325<\3167\305=H\212\374<\025\024\260=\343\322\272<\3666`\274\227\320\216=R\316\310<a(O\275\371\245\317=\215\345\375=\321G\247\275\270\237\300:\021\332\003\276\200\271\261\275\005\013\003\276\271\242\230\274#\2357\274^u!=\212\326\224<\252\345\316\275:<\342\273\224\037\001\274\277\021\367=\260\232\232=\360z\010\276\254=\317=\"Mp\275\353\013G\275_\332u\275\323\333\311=/z\370=\016\202\341\275\322\023\317=m\262\347\275\007S\033=\317\0373\275\353\324\206=O\210+=\262\332$=r\\\203=r\226-\275\366L\344=\211\352\215=*\213\344\275\374@\016:Q\233\261=&\303\346=/\037m=\260\277\206=\250\010\021\275I\236\302=:%:\275\356P\247\275\224\245\257=\376\037\007\276_e\023\275\344\334\225\275\337f==\2421\250;\001\364\354=o\376\354\273\276\026\345=W\026]\274\251\207\226<1#\313\275\326\324\n\276\030T\352\275C\326\206\274\022\'\256=\262\232\350\274\236\010D\274\035+9=\024p\035=9\375\337\275\027\225\232=s\372\000\276\343\037\244=.\306\354=0\367\237\274%\331\270\275(\037l=_\221\303\274\346`\343\275\035\004\245\275\263x\336\274\022)\202\272\030QG<P,O=\361\274\003\275\355\302\354\275|\007\006>\334Q\372=\200=\224\275\221u\335\275\017\333\363\275V\232z<<\370L<lK\301=\350\233z\275/\3175;5M\202\275\270\366\224\275\347\275\320=4\001\352\274\306:t=R\346\374\275Xl\207=\277\276\373=\300\365\362<J^\366=\357\276\205=t,\216\273\325\374\217\273\302\307\344\274W\261\237\275\037\211;\273\244]\227\275n9\002\276\367\314\004>o_\r\274\312\345B\275\346\376\263=&\216\263<\020\205\277=`\230S=L\277\227<\315u\322\275\357\344|=~\347*=\027\t\215\274\374\031\014\276\026A\265=i\321\030;?\035]=\231\376\353\275[\"\334\275\317\331\255=}//=5\275\000\276\251\252\276\275y\221_; \004\235=k\364g\274k8=\275\241\205)=%\366\002\276\262\247k\2752o\311\275\035\227k=d\307\r\276\227\274z=0\266\375=\205\343\347=\341J\241\275@\335\323=\267\316\227\273\262\352\253=\327X(\275\357Q\371;\027\222\262\275\307H/=Q\023\323\275|\260\245\272=\341\010=\036\344\313\272\252\316\306=P\r\376<`m\200\275%\307\330=\330\251\210=D>\340=M\230\323=e\250\270\275\n\231\373=\256\034L=#B\037;z%\354\275\023\007\320=.\310m;I\020\314;y\235\377\275\366\230\224\275\000\242\006>DF\322\275\353\312U=-h\262\275\337\367b;\267\033\216;\221\277\343:\307\323\353\275\3473\213=\254\333\267\275\n\240\246:\241\360\374=\024\320~\275*r\343\275U\211\242<\324\360c=I@t\275\210\203\007>\007\327G=\240\366\374=\213!r=\335y\244\275\202-\264\275r\267\014<\345O\221=;\344\211\275\324:\t\276K\021\263=L\273\242<?\312S\275c~\374\274\\p\026\274,e\263=\325Z\330\274\263\t\336\275\002)\256\275\336\024\256<Ar\347=!]\007>\345T\n\276\177\355\'=X\325\266<\341{\003\273\"\265]\274\200\246\024\275\321w\277\275\244\313\330<<C\314\275\241\301\364\275\236\304\344=XP\236\275W5\370<\333\2760=\365\254\317\275\247\223\231=\252R\262=\364>/=\177\260a\274\333\267\005\276\230\235\262=\366N\006>\341\305\317\275\2017\310=\022m^\273v,m=q\010\355=9\207U\274w\034\267\274h$\332\274[\031`\275.\252\230\273\033\026\260=\347\3302\275%t\020\275\234\312\207\275\314\374\232\274}\272\005>\242Z1\274&\267\271\275\256\365\r=\271\242\340<\025,\361=\343\360\216=\002W\320=HCF\275\242\376\275=\000\037\221\275\313\375\"\274\330nN\2756\212\257=\024K\224\275_\201\333\275\217\236\341=\213\230\010>\235\264\201\275]\245\223<\361\221\000\276\331n\220\274qFU=\200\277\r>3\273\007\275\342oZ\275\367t(\274\311\267\013=\300p\375=^\235l\275\333\344\020\275\2522\305=\315\371\210=\236\317\342=Am\025=\3211\224\274\256dI=\341\243\003>t&\352=s\230e\275\002\274/\274G\344\202=3\372\236=\367Z\023\274C>q=\365\236\216\275\027J\017\275\363B\256\275\342\252\316\275\204?\\\274\222\264\211\275>x\251\275\\\367O\275\304\\9\274\r-\263=\207^\232=\356\247\374\275\260;(\275\017n\336\275\362\275\331\275\t\031\350\274Uh\225\274\351N\'\274\030\252\351\275\276|\277\275\206\037\244\275JQz\275gM\214\275\021\210\230=\247\223\307\275\334\346e\273\324A\266=\233\t\371\275\257\013\004<C$\322=\350L\236\271\0212\347\275\261\377~\2750\016\365=\212\201\313;\332q\331\275c\245\r>\342\006]\275?\341\t\276N^\340=\261\232\254\275O;\232=O%I\275\277s\374\275\254\024\335\275/\0323=+\233\005>WY)\275\323u\177\275\376\247\263\275=+\304=\314\206\r>C\276E=\375bq=\370\255\314\275\220h\010>\353\265\350\274\225\031\242\275\255]\n=p\370\000>M\216\237=j\331\347\274\375,\267\274=\270\362=\226\n\013\275\255$\241=\216\344\273\274c\324\304\275\334\023\036=(&\334\274\032&g\275r\205\337\274(\335\367\275\030J\201<\205\310\000\274d\264\250<\003\010g\274X\207\257\272[\307\257\275\344\205\270<\274\360\273<.\035\256\275*\203\332=c\346\202=\230\225\313=\263nd=\033\2322\275*gd\275R\363\333\274\235\271\030\275|\024\302\275\240\027\371\275|T\300\275\014/\353\275\312Z\025\275\306hM=p\001\266\274(\036\211=M\341\320\274,o\223\275\017\315\027=\nt\247\274q\364\346=\312\010\325\275\3743\r>Se\303=\005-\347\275\007\366\315\275\357\376\367=\301\270\246=8P\202\275\026\227\265=4\363\274\275\005\267p=\3428\240\275\315\244\005>\310\326\337=\210\230\005>/\255\311=\223\264^\275\323S\034\275\254\273\271=\203\224\214<\302p\315\275\337Z\343<>lL=>\327\217=\205G\315\275wZ\252=\307\003#\275AN\255\275\022|\347\275:\301\337\275\300\262\241\275V\223\014>\261[\014\2761\031\367=\267\312\321=\350\202\366=\367\220\225=v\270\300\274\225\327\336\275bc\301\275\327\r\252=\260ND=\244\335\223\274\002\001\274\274\244\020\266<kW\232=\302b\032\275\275U(\275\313\367\r=\255\213\224<\311\360~=V\032\335=+\237\177=\357~\316=5\232f\275\363P>\275E\001\365=\362x\203\275\217\312\275=\036\241\225\275\030\177\374\275\305\033==\001!\301\273\206\375\024\274\324\"V<\033\243\340=\242k\247\275p\017\016\275\234\353\003>*\316\271=\250\372\\\274\205\241J<\004\373\350\275\206\371\355\275,\271\363=\317K\220=++\255\275\235\314\250=\261\274\324\274\\\300\001>\212\367\215\274zZ\010\275C\276\353\2757=(\275\010\244\245\275!\210\014>\371+\345;]8\266\275Z\344\n\276\205\222\243\274z2Y=\202\243\370<\275MG=\231Z\027\274r\241G\273V\322\r=\216\336\343=\334G\n>Z\021V\275\021\023\336\275\366\357\316\275$*\033\275g\374\334=o\331\341=\337!\3615\322\034\251<\326[\267\275\225)\230\274\\\204\266=\260\303\247=[\321\310<s\310\254<\205\250\303\275\241Q\335\273\301\214s=G\034\032=\265N\227\273\253\345\3279\254\030\224=q\247\325\275\260P\374=\013U\340=\224\250\220=L#\330=\272v\\\275\262\370\013>\017\007\375\275?o\225=@\003\307\275\275\210\311=Q\306\303\2754\242\177\274\n\204D\275<J\372=\000?\237\275\256\345\217\275\227\262\032\274\237\244\345\275\235l\337\275\2072\347\275\035\322y\275\277\370\022\273E\025\371\275+\2278=\3241\350<v\324\000>\275\'\010>!\215\355\275\273\231\224=\270)\240\275\003\202\344=-\370\201\275e\215\215\275\\\232\372\274\255\216\303;s\025];G\344\010\276\244\035\013\276\243\2112=\336\203\024\275nx\204=p\021\263\275|}<\275N\344\350=8\371e=\301\314q\274\217\253X\275t\312\304\275\312B\273\275\216G\372=\t\267L=\273\177\210\275\242\261\247=1\216\216=\232G\005\276\3775t\275\377%\002\276a\371\007\276\375\200\267=\276(\336=\306\241\322=\214.7<w{_=\374\021@\275\364\305\353\275\344\221\263\275\335\270\346\275\352\022\222\275,u\264\275\345\376\013\275C\274)=;\213u\271m\025\005\276\263\242\366\274\341\"\257\275M\031\255\275Mf\004\275bMP\274\0258\024\275]\345#<\354\237\005>\264\004\304\275v\325\006=5\236\320\275\031Iu\2747\231\345=\332I\330\275\200\251\341\275\003\375$=\350\331\261\275\006\334\310\275\272\006\013>\207\254\017\275\316\341a=\275\277\256\275\027V\t\276td\375\275\357\330\030\273\331\214X=-$\277;^\356\237=\037x\204\274*/\307=\362\232\353=\207\205V=\257\202\221\275O\022Z\275\253\242\205=\366E\263=\3765\034=+\306\370\275F\200\206=\010\017\243<Swi\275\343\351\337=\341 \273\275ig\212=\362\327\201\275\345\217\256=\205\010S\274q\213B;\210\260g=}\271\n\276}V\342\275Z\024\260=\342\020]\274\375\204#\275\003\254G\275b\246\324<\242K<\2745\251\"\275\310!r\275\301\215\034=\352\312\262\274\267x\323=\n\253\000\276\277\rh\274\r\260B=\332\222\237=G\306\374\275@\242n=\336\036\310\275f\353\004>m\330\341=A\264:\275\224\\6=\326\214\270=\306\312\376<\365\210\352<\336\222\305\275\341O~\275\274\244\250\275\255W\336<f\2702\275\345y\025=\265L\n\276\200\177\r=\342\035\373\275|\362\007>52\275<Y_\240\275\361-\316\274D\034\334=c@\352<\305KP\274\334\267\324=\213|\010\276\311\260\312=\254\026I\275[\271\240\270\330)\035\275y\213\312\275\201t\216=\3748\013=\013BE\275M\036\307<\023\315\273\275\021\261\005\276\240\370\217\275e5\247\274\014{\003\276(\007\366\275\"\003f\274\t\275M\275\306\242\340=\034\305^=:]\311=\344\365\307\274\361\236\025\275\343\335\312=G\245\315=\253\315i\275\002\036J\275\336~\216\275\325\334\330=Qw\345=\372X\223=\375\037\360\275Y\007\267\275\243\310B=\037\306\r>3S\031=g?\251=?\337\364=\342\026\263=\016\333\300;2\030\265<\370q\235=\340\211\253=\244\n\232\275!S\302\275\333\320\227=\256*\002\275\243\200\346=\314f\n><n\347\275I\313\341<Wc\\=\377\255\265\272:\310\037\275\362#\361\275\010\201\374\275\023S\216=\306\277.=\000\034\220\275\230\203\215=\266;\336=\302G\n>]\325{\275\342\243\272=\n#\370<\303&\017=\000\335\376=\004m\243\275\233\030\215\274\232\016\326\275UE\323\275\220k\210<\307\243\002>\275r\275\275D\034\333=\261W\275=Ny\327\275\006\227p\275\300Xy\275\245U\214\274G\235\014>\026\017\247;\343\265g\275\032\306\315<\206\262\222\275\341\323\304\275\251P\363\275\212\037#=Z\217\r\276\306\"\367<\241\244\035\275\315F\253=e\304\302;/\t\343\274\370\254\217\275\260\246\327=J^\227=V\246\010\276\033\210\314\274Yz\n\276ap\010\276$\344\345\275\032e6=\017\340\306=W\306\244<X\001\362;2M\003\276\344\031\243=\016\301`=J9\340=`gj\275Ay\331\275\332\370\013=\2071\027<\002\003X\275pk^\275\321\210\266\272\300J\221\275~ \346\275\377\002\251=;\361m;\020\306\227=J\026\341=\311f\312\275m\'\246=/$&\275g\021\334\2755M=\274\017\222O=X\025\234\275\321\026j\274\367\271\333\273p\351\251\275\324\371\013\273\214\034\300=\307\222\331=\302\342\252\274&\260\273\275\332+\326\274\241\321\314=\320Zq=\302\306\227<\376\304\353\275-\275\361\275\177\265\340=\377\353;\275\362\032\366\275\203\340\265\275\021t\243=8S\007\276J^\r=\320\355_\275R\346\235=\317\177\007>d\002\312\275\025&\335=\323I\277=\252\262X=\021\007\035\275p\205f\275\310\213W=\203nx\273\323\222\266=\261\314\315\275\372\253\t\276d\325.=nJ\225=Z\300\323\27554^\275\376\013\022=\020p\367;\357\n\206\275\256\301\351\274\033\336\002\276\245\226\224=\246\331\210\275O2\371\275\202@\007>\322\264\204=\344\206\t\275oB\377=>n\301<\343/\272\275\243Kd=0\357\340=\234\300\365=\330O\233\273A\001\007\276\034\254\357=\2424>\275\360\320o=\017`\277\273~\"\361=U\013\317\275\262\314\212<\002n\t\276\363\213\232\275\221[9\274A\250h\275\271\217\307\275b\304\312=\213R\316\274\tO\353=\033I\332;\267\340\377<\355}\322=\244\215P\274\251\250\004>\207\013\r\276\304\035\336\275\364\304\212=\242a\306\275\206\225\003>\252\344\361\275\263\237\256\275\352\314\001\276\007\"A\274\334\3375=\277_\234=\354D\325=\274\304P\275<\214\361\275\\\233U=|\002\321=\247W\333\275>\305\274<\204iO=\026b\234=\270\013\361\275\003\263\203=wR\212=r\304\372=\222\226\324\274\327\014\n>\353\265\302\275\235y\205=\371`\207=\000J\342=\277\330\254\275\260\223\354\275^\306\251\275\016\325\216\274\001L\342\275l\214q=e\317{={\230\270=\016\020\326=q\366\223<=\277m\275t\326\201\275\275|\322<\215\014\363\275i\341\275=\246\214\301;\031j\007>\261H\211\275`\027\333\273\220\205\213;\330\261\321\275/.\t\275\355\"\332\275-\227\355<\\O\272\274W\363\024\274\037\024\343=(\307\201\275=&\202=\037B3=G\037\325\2754:\002=\260~\242\275{\221\332\275\335gX=n\3619\274:8\3629v\372\377<x\227\004>\345\317\366=h\027\310\275\222\343\325\2756\225\367\274\0175z\275K\362\272\275\307%\325\274\031\233\006>\242\206\243\274\001\212\235\275\345an=\345p\221\275\215\333\243\275\302z\373=k`\276\275\211@\274\275\365\343\004>\251S\031=g\343\333\275\262j-=\016\003\215;\000.\243<U\225\247\275\313\216\363\2754\010\221\275y\004\026=\023Io<K\312\001\276\317\341\026\273\2570.=\230\364\323\274L\034?=\004z\325=\377\002\231\274MD\221\275p\310\230\275-\022\251\275A\303e<\312\322\346\2743\332]\275U\242\347=\330c\361=!\035\372=8$\260\275\232\377\205\274\326[\270=^\230~\275\026\365\356\275\275\300\252\275.\303\010=\267\337`=]Y\021<I\303\302\275\350/\314\275\371\303\005>\330\035\214=j\203\361=\177\007\343=\303\027\273=\370\226\325=\000C\214\275|h\r=S/\037\274T\340%=W\014\003\276?\310\013>\016\321\241=|\375\036\275^\212\313<\3147L=0\007\366\275\004\317Q<\233\262\366<\274D\377\275\347\021\224\275\356\327\314\274C@\330=I#e<\032\302\305=\245Ki=\035\271q\275\366*\t>\272&w=~t=<S\254\037\275\270\203\000\276#\234\000\276\261\206@\275\356\024*=t\357T=\010x\247\274\347\177\342\275\346\016\233=61/\275\" \205=\313\355X=>>\0008\256\214\205=\271\t\'\275\370J\003\276\207h\306=^\315\323=\213\321\275<=3-=\231\205\352\275\221\363\364=u\367\327<2\257\213=\316\033\374\275\036h0\275\211\200\332;\271\302\r\276\251\n\007=NL\233=s\350\326\275\311\211\321=\320\330S\275o!\260\275\256=D\274\277U\t\276m\020\310\275\223\373\312\274\364\373\251=\327\246\034\275a\207L=Ol:;#\374\216=B(\001\276\372\303\007>\341\322\361=\302\241\223=\264V\357=r\257\276=Dc\036;\266(T\275\037\027\251\275\362!\334\275v\261\300\274q\202\244\275T\267u<\014\010p= \336)\275\264\t\261\275zX\255=\021\210\325\275\265\323\013>\306\344\233\275\301\010f\275\366\001\244=#,U\275\366\266\260\275\036>\350\274\263\265\004=\347J\221\274\254>g=pJU=\210b\207=\203\330D\275\311\232\014>;\331\335\275B\270\341=\034\250\t\276\240\036\371\274\317i\260=\343\001\235\275=\353\252\275\321D\242\275\365\313\362<\323\027\277=\205H\004>\371?\331=\364}\370\275Gdn\274co\005\276qQ\227<\037\225\\\275\234\267\240:\253\246\252\2742\266\330=l]\371\275\240\2744=\347\004\275=\251\336\226\275;\226\273<\204\371\001>\324\266k\275\0272\260\275qeK;0#\303=\277\030\276<\3540\002>\313\330\241\275\210\376k=T\007\306\275\375A\227\275.\177\254\275\010\223\343\274]j\271\275\332M\353=\346z\361<\020\240<\271Vs^<\001;\304\275\332\224\320=k\254\004\276\242>\035\274\246\017\332=@\313\237=h\264X\275K\274\276<=a\005\275A\230x=\230\203\t>\360\344\001>\275\271\254\275\265\233\207\275w\327T<u\224\313=\315R\201\275f\227\\\274\372\220\010\276\257\310\\\275\343\\<=\225\221\355=\t\365\302=E\332\311\275\371/\024\275s\323\220\275\325\256%\274\326X\371\273\351`\300\275\212\305\327\275-\330*\275@\320.=!\027\363=>\255\265\274S{\3309\356\272e=\n\265\341<\351\233\373\275^\032\235<\331\347\371<-\365c=\313\367\t\275%\364E\275zy\252\275\243d\016=zp\254=\240\277\001>\246\264F=\242\350\356=N0\260<\350\354Q\275\214z7\275\016\351\252\275}\037\013>\3259G\275\243\324\322=\317\216\253<\205\200\010>\316\006\226\274}U\t>\032\230\344\275\272M\261=0\346\236\275\3016\272<i\237T=\253\320\257\275@\375\347\275H4\361=L\275\310=?P\000\276\n-\r\275\266Z\253\275\355%\242\275\"\277b=\316s\r>\005\211\214\275\246\371\344\275C\244\336=o\256\232=O{\025\275\241\307\016=\372\367\335=l\"_\275\361\323\n>\325\252\025\274\233\247\212=\014\007\370\275\000\213X\275\2078~\274\010\347\305\275\227\301\377=\313\232\311\275\324\263\326\275\325&\323=\237\244\275\275\310c\304;\2664\006>iv\305\273\207\204\n\275Wn\3759\n\034\206=\016w\301\275\313\t\211\275\206\265\304\275\372\004\307=\233&E=\212\376\013\2767\364\236=u\314\364=\221<\000\276\305\326\271;\314K\n>\257\256\000=N\301v\275i2\375=Rt\353=\317\035O=9\240\316\275Cc\252\275^\242\344\275\003\330\217=\023\014L\275\327\252\025\275\205\315\306=\223\300\265=\033\270\001>\355\'\306\275\2565y=\365W\014\276\004\360>=b\341z=l\030\003\274\327K\t\276\210\005@;\325\205\005>7\341\001=\227\224\224<\235\207^=\013\025\003>\035\177\204\275 \315\342\275pu\346\274\335sz\274@a\021=F\364\023=\372\272\270\273\241\327\314=L]\254=\204\223\027\275\366v\t>`\t\365=\354m\361=\031\371e=\373\006\000\276\252jL\272\026JW\275\210\3645=|0\250=c\206\226=w.\003\276\250yA\275\250\250\251=\212x\317\273Y\223\302\275q/!\275T\tU=:\305,=\027\005\003\274\215\236\215<\231\272\237=g\210\345\275\014OO=\325p6<\321%\262\273\245\202\371=\232V\305=E\005\t\275\333\305\246\275\345\262\200\274D5\347=:\357\246=Xe!=d\312:\275S\033~\274\216\202\201\275\373^5=\242P\222=v\262\214\274~C\240\273p\211\210=\034\032\366\275\346\362\226\275\332y\255=\255\014^\275O\002\212\275Y4\372<\207A\217=\224g\370=&\252W\275\004@,\275\246\355\372;|\211]\273y\'\314=\010$\031\275\365\253\347\275\r\212\037<\276\273Y\273\346\360\036\275;d\262<\032\035\361=\367\362\004=\223\271\314\275\n\224\220=4\263p\275\263\2779=\344g\003>\331U\006\276s\306\277\275\212\263&\274\"\334\275\275\224x\302\275\350\014i\275n\256\000>I\362+\275\326]\201\273\367q\234=\031\202\304=s\252\240\274\370\263\214\275c\206\\=\0017\234\275\214J\203=\264\344\213=\260\363\022\275e(\233=\206\242\306=\322\266V=\264\235\346\275Rq\276=2M\014\276e\204\367=\337mx\275WD\303=\363-\321\275\374\004\201<\317\\\261=\235\325\325\274\005\201\004\275\244\201~=\341\375\334\275\267\354e\272\301\177\246<\301gZ;\315\271\367;\n\362\010\276\246\322\010>\204\344|=\224\247t<\025\302H<\\ \357<x\252\035=r9\314\275\257-\263<\302\r\312\275\336\020\014>[d\226\275\213\225\272\274\220\275\236<\251g\246=\356\353 \274i\261}=\0344\201\275\'\033\345\273\327\302\006\276\353W\302\275\272\206Z\275$\353!<\365F\t>T\255\322\274\255\014\326<\335pq\272\306\246\324\275<!\243=\233Wk;\272t\341=E\032`\274\347y\265=%\035_\275b\362\316\275}\3728=D\210\"\274T\243\022\275W\247N\275\245\002\256=\262\373}\275\366\"\033=@1\030\274O\224\372=\364{y=#q\255=\277ah\2742\276\275\275/\220M=\346;\320\275\261\253+=DF\246=\2345\341<W\223\254\274\210^\301\275\333#+=\221\276\327\275\236i^=\214\266\311\275\226pP=\222\245\353=\307\217\021=\223\374\372\274w\364\275=N\376\006\275\001C\355=\247l\215\275\261 \005>\255\240\263=\t\240\231=\341\212\026\275\264&\354=\177\223\345\275\347\240S\274\257\251\014;\227\331\255\275M{,<\004)-\275\271,;\274XH\377\273\276\276\241\274\203\334\256<}\204\221;\255\351\315<\337\232\361=\254\345>=`f\t>\204\333\014\276!#\244\275\311w\374=\'Nl=~\262\362\275]\273\026;\\\366\252\275\235\367\214\275\n\325\361=}\010\277=\376\262\205\275A\313z=\347\331\307\275E\217\206<\213\234 ;\321\037\331=\357h\007>S2\236=\271g\202=\352\314\342=\030\367^=\332\326\216\275\201\203\244=\034y\346\275e\372p\275\037\324\177<\177X\336\275\207\370\310\275a\220\340=\2209\377\274c\243\346=\334B\327=\224\363\014>J`\344=p\225\007<\226\250\022=\225|\017<w\221\003\275\204D\253=-\300\325=\243\033\264=\215G_\2751\253\351=\006\n\247\274}-b=wt\332\273\003\316\331=\347\037\230=b\244#=\316\346\225;\252C\007>y\226\207=\033\334\251\275\252_\351=\020\005\323<\350\230\323; m\003>|\262\352=\250\035\214\273\202t0=\222*\206\275\245d\231=n\232\010\276Lg\273\275\004\370\204\2751!\377=\3176\013>\316\364\300=\014q\220=\305\220\230=\013E\2559\023\262\367\275\251\022\'=CR\344=v\377\031=K\345\265\274a\201\216=\203\372\335\275Ll\363\275\271\343\006=`\037\277\273\311K\200\275\203\222\245\275\021z\005>U\242\202<\036$\300=\005O\324=Td\'=a\343\367\275\367\224\327=~\350\302;\273\225X=p\221\007\276\265\201\361\275\371\r\212=\256R\r>\260\311\014>mN.\274\304\314W;\235\2638\273s~\321\275\223\354v=\255Z\002>Qx\345\275\003+<\275\3159\260=\213x\t\276=\251P=\014\251\002>\031\024\002\275\2601e\275v\232\222=\307\363\003<@\220\232\275^\242\323<\016\3540=\377\305\037\275Hr,\275\260\000\344\274\030\326\022=h4\240\275\200\320Y\275\240Ss=\245u\203\275#Z\375=\2502\014>\200\2471\275\232\350\213\275\205x\032=\361x\224\275\362\227\206\275\353\275\343=\350\340\374\275\226\\\231=\271\356\317\275\252\t\370\275q\250\263\275\227&\207\275\334\'\016>\255\343.\274a\223\331\275?ct=D\366\361<_\007\216<\354j\025=l\002\246\275\004>\275;\217\024\324\275\335f3=&\362\254\275A\222\335<\232L\002=|\353\312\275\222\355A\275\026\3127=\201M\253\274\330|\006\276\256N\350<$\342\242\275C}\017<\016\312\301=\230\355\003\276S\255\353\275\327\216l=if\356\273\035\337!\275J\366v=\232=\324\275\2100O=Hjo\275;>\007>\205@\264<\3464\341<\232{ \275\301Q\265\275\001\263\245\275k_\227\275\354w\351\272\327\031\321<\252\202\351\273\023\037\371=c\315\022=\0350\032\274\215na=\002\203\007<B\260\357\275\246J\343=\014\372t\275\022\304\265=\313[\341=\005\305\276<d\267;\275\342\266\000=(H2\275S \352\274p-\324=$\016.\274\3426\345<\206\033\354\275\271(h\275\277c\013\276\214)l\275~\023{\275\334):\273\203\357\277\275@\370\225<\034\006\242\275s\302\001\276j\331\013=^h\353\275f\272\334\275w\006\323\275s\000\255=\212@\303\275\267>J=\272\005\352\275\245O\300\275=\330\005\276\340*\375<,q\352=\014\177\250=0\034\224\275HB/=\243\316\270=\355{\270\275\214*\017<@\363\374<m\002q=\213\304\236\271\312\3126=\266??=i\312\337={\224\244=~d\253\275\317\330\300=VsX\275,\2672\275\201)\266\275\304z\335\275d2\351\275@\020\266=\222;d<\266m\303\275\240ac=\266\250U\275\2662y\275\257\211\010\276P\021\037<{-\214\275^O\266\275\'\347q\275\006\243\n>R\317\343;\254\276\227\275\020\234\013\276\275\277\033=\337\277\010\276\0043\364=}\230x<\312\336\215=T\253\235\275j\270\207\275\236\016\357=L[\207\274f\354\204=\310\204\365=\270\340\013\276\024\261\026=\017\013\254=5\346T;N\305\006\2768\033\360=\3064e<Nh\374\274~\337\201\275\3173\016\276\200H<=V\331\240\275x\210\007\275\247v\013=J,\374\274\261J-=^d\372\275rW\323<=\223\370\274\2137\326=\216\360\236=\000\'\254=\261O\237\2750\301\273\275\006\273\202<%\001\'\275\356\227\355=\332\013\353\274[\344\221\275\202\367\273\275\263I\366=\300W\213=\"\014\313=7c9=\017@\316\275\235l\355\275\337\001\326=0\266\013\276\204\306|\275\341\263\317\275\277bC\274q\210\331=\265\212\366\275\322BU<\250\251\016\275.T\273=\013\213\213=v\350\267=LW\256<Y\004\270=d-\001=\260\223\331<u\253\t\274\227\243/:\211\225\353\275\361\025\336\275xd_=X\266\010=-2\377=Z\027\275=+\273\013>\004\017\353\275\025\233\231=\274\031\257=XT\302\275\037\245e=}?\215<\2475\312\275\032Ts=\223\374C\275\361/R\275\212\261\017=\"\331\262\275\344\200%\275\256\213\233\275\201\034\207=\221\263o\274C<j\275I\220\036<T:\361\275\313\324;\2757\013R=4G\371=\347\352\001>.&\007=)\010\345=\007#j\275\314\014\210=bk\010>\"\251\002>\216dO\275\212\271\252=\204\335\007>\324\270\237=W\3072\275\273\206Z\275\340\231\000\274\277-b\275\004k\002=+\307\007\276\362\352\004\276\037\213\314=\222LS=\005\244\226=\277\311r=px\267\275\310\211\326<\271\023\375=\361\240\335\275w2\225\275\023\207\317\275\301\243\277=\327c\365\275\301\377\006>\234\232\002>\0042\267=W\275\256\275Iv\003\276LX\237\275[\025\332\275\227\346C=\357\367\337\275\266\305N\275\031T[\275\201N\345\275\321\256\302\275\344\243\334\274\306\032/</\217\274\275i\345\215\275;~\177=\235\233B=[\327-\274N\304\277<\257=\330=[\274\014>F\276\027<\264\025\302=\212\312\026=w\325\311=\301nO=\320\353\251=\006\254\363\275\215\216\246\275@*\200=\t\236\346\275Kd\272;\274\347\233:o_\201<\324\3660\274l\352\356\274\350\035\025<f\016\036\275\355\360f=\210\245\234=\310\316\275=\325By=\242\206\246;\260\237\336=\027\362\302\2758\362l=:\246(\275c8\312=\235}\223\273F\260\207=\241\004*\275\260\243\220<\261Z\030=\343ga\275u\302l\2745]v\275Z\317\362=r\333\312=\247\302\021\275\211\n\335=\351TS=\361\275\346\275R\344\023=\251b?\274\225l\010>C\204\351\275M4\217=\206+\272\273\341\201\005\276>\302\244\274\271\234&\2744\306\306;1\243\036=\2432\014\276.\263\345\275\325.\262=\314L\206\275m!\267\275\026U\250\274z\336\274\275\030vt;\005\370\370\270\323\324\206\274P2)=2\036\343=\230\343\020\274/PH<\330\372\013>\347\206\221=\353\237\212\275\250\264u=\234\"\305=\346\266\301=\303r\217=d|m=\344\257\t=d\271\267\275\032\302=<\331\327\265<\225\031\377\275\234\335\310\275\230\322\014>\356\375\225<e\203\257:U\325\372;\375OG\275\220h\207=\002\243m=\004\244\r\276</\207=@\264\346\275\235X\307\275\361\245P=v\006*\275\254\002h\275g52=\004\316\361<\010\rr=\353\034\361\275\020\000\337\274{`}=a~<=M\177\200\274\237T\n\276\035\354\213<\207\013\003\275\361\t\251=5D\t\276\006\271\302\275\365\365\357=\353\360x=\332V*\275}\225\262\275\027\260\356=Tp\341\274\350\020\014>U\003\241=]:\014\276\007\217\213=~\3718\275\253K\027\275\023S\322\274)]\233\275\014\200\372\272m\307{\275\344-\247=4\273\030\2750\210p<\0323\201=\330\272\276=\372\305\340=,,|\274\240Z\265<;\210\313=\271\337N=\311\206\235=v\344\243=P\253l\275*j6=t\221n=\013\003\307=\0174\010=Y\340\211\271*\022\276\275\307gm=:mw\275\316\356R=\017\001r\275\021\264\227=[\307\032=\263\023\205<\254\320\326=\371D\007\276\030Y\233=L\261m=[\211I\275\017Me\275\252\224\323\2747\357\000>\005(\220=\321\022\'\275\032\231\335=\232\3524=\271\322\301\2758\225\330=\375\037\372\273pL\255=\343H6=i\275p=\226\003#\2755\377\217\275\362\351\320<\026\232\000\275\306\261\002=\366At<\345\356\037<C\303\002\276W|\340;\\^\317=\001\\\315=\333\010\301\274\350l\014\276n\243\203=\340\177\300\275A\214\302\275N\336\275\275F\020O\275b<\005=\367t\003>\203K\355=X\221\274=\243/k\275\265W\212\274\300\363\357\274Z\204\356\274\301\235\321<\232\352\245<7\345\003\2767>\314=\241\272\001>]\277\260<\247[Y<F\245\033=Nl\232\274:]\255\275w;\031\273W\021\216;\353j\321\273\342f\n\274\375\240\217\275\367\216\r\275G\223\243\275\032\327\326;\207>\261\275\373#\016\275l\031\276\275/}\010\276~\211\314\275L{\257\275\026\262\371=h\376\342=\330\371 =}\020x=\241\252\007\276\374g\227<3(\032=\254g(\275\016\303\346=Uw\375=\333\231\217=\243(\343=DJ\001=\256\\\204=\307\313\206=\273\374\254=?\200\240=\337\264\334\2732\t\277\275m\327\347\275\300,\024\275\207^\206\274X)\254\274\364\262l\275C\3032=\221\322==\313{\271\275$\312\311=\255~\245\275\364JH=\240\311s\275BF\373\273;x\367=s\310:<\036\261\n>/\203\307\275b\271\243\275\25525=8\001\274\275\276\236\323=\260\r\204\275\270\347t=\210\233\325=\0330b;\342\231\222\275/\255`\275\261\275m\275X\222\370<\310\351\241=\224\347\001\276\375\373\244=\002\222\302=p\333\010\2762f\002\276,\335\351\275\352\216\004\275\023\324\374\274\211&\251\273\177\327u\275\356\314\007\276p\322\326=\0004\010>\2300\245\275\300\256&\275l\350\232\275 d\341=82\215=%\240\016\275)\231\003>\257D\374\275c\277\014\276\356\025\211\273\256\346\326\275RL\330\275iv\256=6\327\r\275\222\305u=\230j8<q\264\200\275\025\2732=P\326\356\274\332\207\031\273\2713\262=\223\255\017=\310\376\335\275\030\315\202\275\261\364\233=)\232\213\2742{T=L2f\275\232+a=T\322\306\274.)\237=\375z\261\275\301\310\371\275\350\202|=;\320\371<\203\007\202=\02124=0\305z=\311\210\257<Yy\222\275\201{\302<0J5=.^\265\275\310f\362=\347\361\204\274.\363\315\274\317\300\025\275\227\262\362\274\277\217w\275z#\302<L\370\200=p \201\275\247\330\336\2751Z\371=FC\363=\216m\364\2751\241\332=\216\316\233\275\232\312\347=\006\335\253=\037\t\357==\212|\274\300\022O=v\323\017\275TD\014\275\334\237\243=`\340f=\362\235\321=\330\231`\275\317@?=\262 ;\275\323\357\357=\337\241\311\275\003\246\353=v\302^<\034\223\226=]\2747:\263j\030\275>\347\354\275\224\270\177=\033\302==\343c\231<\263\333\341<\211\316?\2752r\014>\200P\265\275\177\306\001\276k\351F=\241c\324=\316 \201<-7x\273\'\020b\272\313v\212<\016\325m\275\340\371\201=\346\206\216=\303\313\003\275\330\355\302\274\342\372\003\275\024Z?=}(\304\275\257\3725<J\2033=F%T\2753\271\266=9\323\363\275|\234\006\276:\023 \273)\365\363=\275\300j\274$\211\357\273\345Z\225=[o\267\275F\352\237=\333\2506\275\303\330\375\275\310\232\362=eq\327=I[\243\274;\253\254;\327\260\313=\030&\225\275\233v\246\275/\177.=,\342\002>5O\353=\363\030\325\275\345$\223=C\307&=m\355x=\310F\315\274\220\202\320=\205\330\356\275\007\224\005>\021\350c\275\035\234\354\275\317P\344=\272\240\320\275\260\007O\275F\202\254\275ka\241\275G#~=>\320\246<O\275\316\275a\214\331=\363g\204=t\357\203=\203Y\263=O\373\003>\000\232\326\274\261\306\263\274`\264\277\275\362\273\353=\304(\376<d@\032=\207\201\033\275,D \275\265&\002=\235\375\017=\321)\242<V\013\001\275\312k\005>\312\323\017=\266V\035=C\206\241\273;j\377=\235\314\342=eI\272=\376\334\035\274T\206g\275\373\243\305<\357\000\221=\224\275\261\274\033\037\"\275\223\214\276=$\246U\275\001\013\014\276o\254\224=\017\270\266\274\027\330\r\276D\010\205<@\223\356=\225A\226=\206>\345=\307Q\322=\316\'c\275\222\003\360\275\247Z\007>\223\273\342\275:+O\275gv\357=c\240\005>g\033}\275?L\331\275p\312e\274\303\024\006=t\332\271\275\020\326\333<$f\266;\262\335\n=F\000e\275\033\370\367\275\024\320\007=\255\tZ\275\354&\346;\367\302\322=\330\207\004\275=\354\021\2750\342\017\275\2720>=\260\267\212<\262n\263=\031\261\245=\244\031\361=\211\016\272\275$Y\007=\315\326G\275f5K\275\372\226M\274%0\253\275\301\267F\275J\350U<\177of=y\"\314:\335\013\266=M\326\325\275/\343\204=\311\260\217\275_`Z\275\361\350-\275\366]\004>\335A\332<\2724,={z\200\275<\265s\275\311`\001\275D\000\004>\301\221k<l\363\317\275\240\345\373\275\241\205\333=\247\236\227\275\021J\223=\247?\351\275\032\214\365=0\3718\275)f\245=OgJ\275\024!\347\273N\n\374=\216\322\252\275\335\334x\274\251\221\221=\201\007\024\275\243\205\n<\223\345\256=\203\002\217=\273\310\323\275\233\344\002\276\025\367\r>\332\255\207\275\263\346\271\275_\275)=\322}\250=\353\001l=,Q3=Z\024t<\200\253\270\275\021\010\213=\243\303\274=\216D\252\275\342-T\274\377\245\261\275^u\303\275C{D\275\024e\010\276m\355\355=J\350\272=\367vL=\320\216!\275\365\346O=\262\000#<\336\274\210\275\363R\007\276\331\225\272\275R\003+=7\n\345\2752v\243=\205\327\311<<\242\367\275P\261\373<}\203\312\275\322\325\333\275/\\B\274\026\330\274=\2768\316=am1\275\274xG<U\230\221\275H\263\t>\241~\352=\273\227\273<\304\207\216=\246\303`\275\365,T\275/\324\315\275\322\200\003>%\365\244={\312\006=E\n\036\275\007\233\247=\376\000\006\276\204JL\275Hp\357\275\3247\216\275n\345\327=Q\307\315\274x\316\030\275;\322\255\275\023\235R\2744\236\'=\233\n\314\274z\355\217\275\307F\351=\r\325\241=\007\366/\274W.\205=\036$\204=\325L\324\274\224\254\177=\220\t\241\275|w\266\275\304\240\335\275\260v\312\275\003;\222=\232v\220\275\216\001U\274\227{~<\225\031{\275\247v\303=\344\231\312\275\331\251\373=\337\224\003=\021\216P=\332\314\225\274\266FI=s\177\'\274&1\345=`\031\366<\344\026\243=\303N\026=e\205\317=\200 \347\274C\276w=F\275\233\2755Z\217=9\211\032\275\225\305\356=\262\245\007>\350[\276=\202\241\006\276PB\206< \335\306\275\216d\342\274\014\361\344:)\034\302=\316\221\367:i\314[\275\207\2231=c\267\204\275\'\201\031=*t\316=q\267\307=\363\245\231\275\264\356\264=M\364\324=\271\310\001>\232\366\r\276\002b\270\275Z<\356=\311J\313=\324\031\204\275\212\007\276\275\253p1=}\275\001<\212\013\227\274e\303\333=\247\214\317\270\224\246\242\275\324\247/=~\000\006>\306E\244\275\345\002\240\275\206\346\205\274\360\313\203\274\275\026\003>\252\013\267\275V\362O\275_\361\351\275\204\303\214=7\346\336\275\234\341\351\275\266j\333=\205n\247=.\335\264\274\177\221\337\275C\024\t=\003\202\264=d\241\210=\376\037\346=\322[\33098d\001\276}:\376\275\006\004z\275\364\\~<Gv\025\275Q\255\246\274\201\352\253\274,\201\301\274/\302\326=\257\262\n\276cBV\275\254\353\334=\322RN\275\261\200\376=Lm\031=\023Ei\274\023\367\324=\213\r\'=\277\222p= \365z=\350\310\353\275\315\017\001<\247\224\227\275:H\343\274}!\034<\275\277\265\273D\372&=0\010\000=/\033\246\275G-p=\020h\342\275\216I\206\275\217\231\006\276Ul\365\2758\354\315<\3774\223=\320B\312\275+T\344=\327\021\313\274hA\213\275\342K\265=`\323\240=6\034Q<\256$\331\275V\365\212<q\366\216=\224\344\377=\033\237\004>\025\244\305=a\305\217;|\350\254=\345\204\246;\2129c\275wh\t\275\001\347\\\275\304-j<p.\367={\023\273\272\361L\006=\203\2254\275I\253\241=\370\315\307=\032\377L=\330\212K\275k]\321=\343a\002\276|U\006\274d\017\\=\310\272\034\275\266\350\007\276\224\010g\275\037\025\014>\307EN= \361b\275\274\212\n\276i\301\005\276\\\000\217\275\305\024Q=I\tY=@\354\253=(=\000\276\033\331\326\275\177a\326=sRk\275\220\374\021\275&\300\225\275\363\036\000\275\005\236\013=\240=\310\275\231\000\326=D\362\366=\033l\013\276\372]\361=\317n\355\275\200\346\273\275\223G\356\275\210\264\204=W\356\003\276\016\274\275=\035R\233\275\2676\336=K\330\023\275\334~\003\275\372\273\342=\307N\222=\2368\244=\372\272F\275b\224\001=\273t(\275#\366\200<\377k\r\276\306\360\246\274X\257\014>\241\337\360=Zu\243\275^\351\353\273\377\333\263\275\023\336\314\272\244Q\206\275\363\021\206\274\355_\005=\272\257\216\274&\362\221;\224\005\314\275\347\235\274=\272\035\007<\006\367\231\2729\350\370\273\231\266\256=\302x\322\275\347\207\034=\027\226i\275\r\261\314\275C\267\000>\362\363\310=\353\230u;\031U\263\274\321\007^=i\344\275\275\332v\246=5\206*=!\304\350\2730@\005=\335}q\274\242\031c=9i>=!n\253=\216\332\317=\276J\270\275\271\336\245\275k\274\007\275\264\321\204=\263\375\014>\361?\334=rs&\274k@i\275\260\263\332\275\321P\013>\006\020\210\274\373\270\335<Xm\010\276k\377\227=\251\347\005\276A\273\354\275\212K\341\275\211\263\374\275\267\212\305=\206\237\372<\032\357\363<T<\321\275\025\264\253<\273\r\006=\"\223\000\276\205T\251<\3118\030<?Vo\275&\313k=\204x5\275\2335\n\276F\3758\274\207\352?=\034\300\314<\243t\003>\250|v\275\325\256\212\274-Y\360=cj\260\275\217/0\275\347\321\352\275.\257\013>(x\313\274\340\366\250\275~Q\005\276\003b\335=\207&6=\340\324\361=\000p\357\275\350\303\r>\365H\216=6\344P<\337\220\237\275\241<\251\275\200\357\271\274\253q\375\274]\243A\275p\n\010>B\357\237\275\207\341\321\275C\031\252\275h\246N;\205,\246\275\333C\306\275\257\306\353=\022d/\2754\277\230<\261\344W\275\336\037\331=\001\203\004=F4\322\275\306\206\322\274\350\345\\=\024^\303\275[nN\275\027\203\372\275\231\027\025\275^\323\305\273\363\247\352\273-\341\344\275`\347\201\275\366\332\364\274\210\177\330=Fo\t>\247\321\022<\316\r@\275L\274<;U\323\202=\357\227\300=\370\325!\275\353\016\274\275\\3\203\274&\337\272=\262\"8=\024E\325=\022(\221=\272\203\304\275\346l\000\276EK\356\275DkX\275h\211\344=\024\224\003\275\0300\211\275\376\210\311\272\004\037\326=\027K\004>8\246\330\274W`\010\275\335^\374<\341w\014\276\303\004g\275W\337c<g~\003\276\244\004\021=\215\355\004>\r5\236\275U\376\270\275W\374\324=\241k\314=\017\252\321<\367\275\201=\01050\2750\377\352\275\356\255>\275hP\320\275\335\334\337<\3460\001>\002\351D\275\335\003\227=\337\371\220=AG\324\275tk\300\275\216\261\000>-\257\226=\356\265,=h\037\210\275\274\376\352\275?L\021\275U\366\026\275X~\212<9\213\271\275wsQ=\321\030\345=\000\326\327=\005)\003\276P\026\215\274O\341\216\275/$\264<\264\351\323\275\2518\000\276)?\005\276\002Y}<\223\257v=q\005\375\275\346%\240=Y\007\370\275\373\t\247=4\246\205\274S\024\n>a\337\332\273\317!\353=\207\211\340\275\030\324\202\275#\222@=\217\353\364<\330\256\221\275\336\375\005>\341,3<\'2\241\274*V\243=f\364~\275\334+\341\275\260n =\210t\216\275\227\215\226=\331\200\333<\225#\352\275x\026\327\275v\316u=\335\202\244\275A%\t>,]J\275bK\352=\362\224z\275r\331\375\274\027\223\277=\2560\010\276\321KT\275\222\306\005\275\2162\305<\001\271I=vq\307<hB\335=\177\311\300\274@\365\266\275\273\300\254=\251\241\204<m\361\322\275\305\273\004\275\022Y\303\274Y\214\337=q\212\017\274\005\017H=O\364\362\275\376\313\007\276>\r\016>\r\0255\275\223LB<s\307\311=p\307\302=\322Vo=P\361]=\r\312\222\275\342\320\016\275?\344\213=o\233\006>`\220\301<\032r\007>u;\270\275\0356:=\260.\267=\375\205\032\275$\226\240\2744ip\274o9\236\275\010\203d=\004\357\315\274\031\270c=#J\226\275\236\010\351\275b\302;=\267\210\224=\327v>\275ij\005>\330H\256<B\300\371<\311\336\216=.\337\254\275\276=\272=\370S/=\010o\227\275\n\366\230=\006Dv\275\004I\013>\263\371\203=\036w\252=U\234\363=\267\255w\275u\333\037\275f\355\323<\372\3019=\222\377\315<\206\363\000>\231h\250=\274\232\363\275\310\333W\275Q\031\224\275\374\222\234<#\326\230=\365\223A\274f[\033=\371\267\200\274\004\275\013\276$\315\322\275\177yS<\t\235\353=I\"\213\275\345\232\007\276_\217\347\275Y\241\331\274\220\376\257=a\255\363\275\202\356\330;\036\215\242\275z\343\343\275c\003\323\275\235\267\245<\242Xf=\252}\236=\340\215|\275\344u\206=\016\"\264=\276b\327=\177\270\336\275\376\021\217<\230j\202\275\351\350\376\274\261\343\373=\207\000H\275\206\230\006>\247~\303\275W\2579\275\2168\334=q:><\232A\371=\005\252\275\275c\363\207<0\205\371=\356\332\214\2741\231\t>\344\253\3168\366\304\211=\354\265\002>\326\360\352=YN\233=M\246V\275U\020G=|\254\211\275N|\245\275)\013\n>j\355\350\275(\267\006=K&\231<\2746\276=\022\212\247\275\252\313\224\275N\205\225=\020\214\344\275\260<\301=\210\272\232\275\257 \'=C\266\017=\305\311\376<\337\363\256\275L\257;<\346\024s\275\225\212\266=\240s\312\2733\221\234\275\320\353\200\274\335\306|\275a\373:\275/d?\275_`\323\274\304\017\336\275>\256\357\275\3322G=\327kB\275Y\007\212=k!\303;?\032\202\275\0050\000=K\223\320=\361\213\035\275*\'\325=\327DB=\210\270,\275n\244\"=\254v\243\275\255&\275=\231=\311=jyx\274>\326)=\274f\'=\032r\371= \266\357\275\006\353\004\275Kr\366<-\314\020=\335H\324\275\240\006\203<T\305\344=p\002\313=\350\265)\274\236\2522\275\345\010w=\354P\327\275\207\374\300=\240=q\275\350}\211\275\214i\256;[q\353\275\265v\001>\247,O=(\343\250\275\224\213\255=\271/\223<=\346\273=\361\2346\275N\022\302\275E\234\227<qe\235\275Y\271Y=\276F\027=\206\000\024<\353\001\004>\362m\021=6\200\373\275\021\336\203\275\350\336\265\275s\234r=M\272\353\275i\016\344\274\034se\274\227\245\004>c\345\325=\356S\323\275\277\002\010\276\376\035\n>\027@1\275w\307\371=\374(\010\276\341\024\307=W\237\246\275\213\247\265=\025\341\222=\031\215\211\275\251\023$=\340\303\265\275\t5m<h\034\307<{\n\230=q\005\321=G\301\005=\324`\007>?\243\344\275\023\274y\275\2211\322\275\227\217\342=\325jI\275\217`\350\275\355,\006\275~\252\313\275\027z\033\275\330\234\342\275\031\302M<\007\254\032\274\370B\341\274\331N\334=\024^\234\275\017\304\305=\327\305\315\2755\342\214=\243(\265=5g\014\275\361q\304<]\344\343\275\334u\344\2744\2620=9\215\3659\251\351`\275\tr\322;\016;/\275?\367\371\275\301\004\000\276D\216\310\275\305\027\316\275\323x\346\275\377Z\304\275\177]g=\205\177\366\273v\360\007>.\354\373=\317ht=\323\027\352=\021i!\275\214\366\240<\021\231\275;\336+]\275\270~B\275\317I\201=^\3621<.1\222=~\031\220=\223F\226=S\007\327\275m\203)\273\205\371\254\275\177\344\327=\004\220i=\303\373\307\275\375\333\303=\331\256\252=\031~\331\275\301\357\252=lP\256=\244\277\007>\320\007\254\275\003V\300=\370\333\n=\326\311\312=}W\237=\2246\\=\365\304\344=\213h\343=4\026\311\275\334\360\351<\320\275\271=\r\027\230\274\272{\355\275\214f+\275R\006Y\275\"\250\334=u\353\005>T\321A\275%\030\000>\363\367\217=\024\213\n\275K\r\241=\212K\010>/\016\230\275\354\264\006\275\251\006\327\275\337\\6=vD\001=r\201 =|\200e\275Qp\241\275_\224\311=<<i\274\312\357\r\275f\300a\275\233Z\266\274\361\204j\274\250\261\r\276\265O1=0\241c\275\3616\256=\207\256\307<\320\301,=\341\254\354<\366P\007\2767;\345\275Q\301\307<\\x\234=\256-\254\2759\272\231<? \245\275\373@\001>\376\026\217=Y-\312=\303\365o=u\355N=m\311\t\276L\220\220<t\334\334\274_7\027\275\004E\326=\232\t,\275\271w\014\276D\037\001>>\335\232\275\230\330\316\274\314\211\014<W^\205=b \"\275U\335\001\275\014h\013=\210C\324=\237\016\360\275\225\236\000\276\3036\033<\006^\331=GC\204=j\257\n>\315#\347=Q(\230\275\202\214\303=_\267\202\274\376{\314=\275\300w\275\362\220\034\275\014\367,\275E\312\210=\374\027\200\275&\252\t>\363F\242;\241\202\001\276U<\212=L\030X=\307\203\301=\224\357\023=\206\220\313=r/\364;\350]Z\275h\236\r\276gf\205\274\202G\320\275\250\032p\274\'\006\357=\357s\240\274\276\310\377=\020\202\n<\265\247\t>0a\010>\"\257\255\275a\003`=\341\206\267\275`\264\360<2F\014=\342\030T=C\017\217=\215x\367\275\211#\005\275\307g\006>\217[\213\275\347\255\220=\256\357\236=\213\257\306=\212\244\256=\363\273\365\275\236\274\233\275\377\220\002=c5\245=$\225\350\275M\223\236<A\245\312=`\322\005\276o- \275\365\036\376\275\226f\332=\035F\317\275\247\332`\275\037r\344\275=y\n>\366\333/=\373\300\247={\006\004>\031\021\207=\271\004\t\275\250\363\213\2757^\177;\034\313;=\237\014\362=\202\272\020\2757`\271=\003W\003>\241\256\341\272\350\'\272\275\263\340\014\276\341\373\306<\265!\347<\214\331\002=:L\210\275`\226\312\274\322\r/\275P>\242<#\365q\275\n\021\326\274\223t\306=!\266\005>\320b\246=\020\230\345=\313\014\272\273Z\006\r\276 [\265=\277l\n>SD\207= \264\207\275\2671\223=\001\363@\275\375\260\262\275\222&\327\275l\324\230\275\324\354\252\275\301\354Q\274\032gJ\275\261\346\037=W\250\206=\340/\371\275\005\014\375=\002z\244\275\205\205X=\370<\004\276\333\250\263\275\025\345|\275E\350\345=\274J\301\274a&\376\275\344\\\002>:*\236\2757a\300\275\264\'\374\275\232p{\275h\365\324\274\004\301\206==\354\027<\252\'\t\276(\342\214\275\266H\372\275\231\203\326\275C{J\275\002\301\001\276\242i\352\275\331\323\024\275\307?D\274\366\302\013=\006j\256\275Rj\360=\\\230\347=\351\353\006\276\004\361\000>\224\035\006>\364\224R\275]\023\333=+R\237\273\346 =\274\004\n\331=\335Z\006>;\354\310=\361\250\311=\262\241I\275SH\362\273\234\026\220=\361\334\304\274`\304\320\274a\212\010\276a-\315\275\240A\036=\325\351\332\275~\312\200\275W\335\344=\013J\347=R\323\341\274\030\213\007>p\277\364= S\332=\246a\n=\307\224\004>\2613\366\275\202\271S\275[ps=\276\254\217=8&\t>iH\260\275V\225\200=\036h\035\275\277\255\002>\212\363\224=\301\372a=\t\223I=C\274`\275\021-\213=4j\330=z\312\253\275K\005\240<-\374\225\275\231F\004\276t\303$\275>\202%\275\013\312\345\275%\"\376\275\013\252\000>I\316\365\275\237\276\024\275a\223H=\332w\260\275\350\273\356=L\337\007>\2410\210=\003\357\227\274^\016\024<\013\005\246=H?\214\274\231D\355\274l\032U=/@h\275m\327\307==\341\342\275\321\304\256=\372\264\313\275\251\n\233=na\006\273\350E\303\275s\220a=k\031\354\275\007n\370<\276\207\234\272\256\305\006\276\230Se\273\353\270\005\276\214\335&\275(\r}\275\201\010V\275\322\310\t>\004q`\2747\231\000>\236\216\266\275\035=\300\274\356\305\330=%\300~\275\226\221\344<\203\303m<\335t\267<\317\365\373\275 |\302\274\220s@\274\216\256\237\275\374\355\013\275\014*x\273\232=4\274\251\210\302=D\343\316\273X\317\361=\377;b=\312\350\263=\020L~\275@2\220<y\006\271\275it\205;3?\355\275`\343\367=E\027Z=\000\333l\275\315\262\342;\034X\224\275\213\224\256\275\240\013\216=1\014\222\275\247\005\031=\002\035V<\376$\205\275)2\307\275V#\010\275\024\243\252<\275:\n>\242\277<\274\364\342s=\304s\264\275\303\342R\275vC\341=\203\221\334\2756\353B;\335\031\037\275\022\216k\275\302j=\275L\237\001>\\\025\253=\335\032|=\347\364\220\275\322\002\243=\343\310\352;\364\033\347:3z\347\273(B\220=\350d\345\275\264T\332=Noi<\326\354\000>\253\023\004\276\3637$=-\334\330=\341ec\275\275\333\003>_1\244<\354\006\273=\256\344\214=^\346\317\275bAF\275E\232K\274\025\321\270<\365\305\215=V\275\270=X\366\370\275\234\373\025=\021\200\351\275>:J\275\307\305\302\275\250\370\252\275,\276\262\275\355\360L\2740\237\364=\321\314\224=\241\320Z=a\310\303=R\241\t\276\035\352\316\275\367\267\330<2\277k=\234%\361=`7\003\276\355\323\277=\n\210\n>i\333\267=L\332b\275lG\235\274\026\204!=v\335\276\274\325\345\n\276&\240,\275f\362\357\275\270\342:<\347\263\355\275\303\337\034\274i\220\257\275\004b]=f\203\341\275\025)\221=\260\275\274\275\305vE\275\273\003\355:\226#\345=\t|\355=\374\225\265=`\310\223=%\214\275<\217\355B\275\223\025\327=c\331_;SG\373=\235g\263\275\177\371\343=\300V\220=\355\363\231\275A>\307=oyj=\272\262\237=\353\361\367\275ql\374\275\273\323\242\275\005T\302\275k\244\340\274\031\354\'\275\007ij=M\362\004>\014\024\323\275G\253[\275S\233\n>n\216\276=\006\307\322\275\316\375\222\275\032j\033\274\326\005\n\276\030\272\370=\343 ^\275_\237\334<\316,\227\274\333\330q\275\213\013\016\275%\340\013=\014\357\356\275rI\342\275]\260\035\274\211\344j=\025\006\316=\301_\351\275\031\005\013>\233\265r\275\315\302\212\275|\\\226\274\013\244G=g\007\276\275UZ\203=$\247\352\275\312\204\265\275\323\354\232=\262\373\203<K\335\305\275s\035\375=\262\246\256=\236\306\265=\303\005b\275!\255\000:\272B\237=\200\207\317\275\207\240\364;\005\344\344<\260v4;\231\377\213=Y\016\377=\002?\005>`\360\375\275\037\271s\274\261\235\013\276\334\r\237\274\276X\372<\005\206\251\275u\347\251\275\354fs=\025\'\244\275\355\\\002\276\270\276\343<,?\276=t\005\005\275z\2569\274\242\246\025=\r\337\206=\200\355l\275n\222\300=n\314\361\275A\\\245\275\367S\277=\212v0<T\372\303\274\021\215O\275\334\347\306=\364@\250=\332\272\014\276\205Rf\275\200\273\234\275\327\357\021\275\314\311\307=.\243\307\275Y\034\006>8UO=F\200\315=Q\326\366\275\224\326\010>\327\277T\275]\210\317=\3627\323\274\332[X=\274\014\270\275\325\357\335=\233\342|\275\332+==\237r\007<p\212\253\275T\250\371=R\272\235\275?\360+\275\320\240\035=\270<\341=\036/\370=z\212\272\274\316\032\227=k_\306:\032C\277=g\265\263=\371\357\362=\230\014\332=\350\203 \275$F\302\274\300\203&=\005%\214<h\276\224\275<l\255\275d@\260=s\242\255=A\004M=\340F\341=\366\253\023=1\3023\274\020\232\350=\344p\302\275\335\240U\275\210h\332;\263\237L;!\221u=\351-\213\275\322\254\315<\325\332X=\353W\277=b\013/\275(Jh\274\336\346D;\230?\257\273+?\337=k\006\262=\037\0222;\300\275\343=V\261\341\275\311y\314\275\355\234\243=\215P\272\275\244T\233\274+`u\275\354Y\025;5\013\252\275\366\n\344=\017\341\225=~\273\340=\206`\016\274\362U*=\352\366\340\275\354\343\007<\216\003\254=n\343\342\274\311\275\222\274\342\235\n\271\356\007\334=WEr\2753\270\351\275a\236\026\2758\373\247\274\017G\t>\315\227\374<\331\300\300=\315\374\254\274g\201\200\275\312Y><\212\257\315=Q~\365=\342P\202<\234\320\271<[#\245\275\330G\023\275+\377\311=kF\302\275\352(\013>!Y\274=\305\365\356\275`\307\r\275 \224\257=:Y\245\275\003\365\226\275x\362P\275\010\021\267=\345\366\360=\352>\202\275\344\346\036\275\267\224\010\275\326\366\322\274@l\205\275\351}\357=\344?\271=\'(\211\275x\016\006\276m\367\036=\316Z\002>T;\306=\355{\000=8:X=\345 R\275T\232\315=\2713\005\276j\020\206=\273\363\231=\240\276E\275\365\223\020\273\301U\277\274jO\r>\024u\317\275\205\307\311=A\353k\275\007N\276=\304\004\366;q\377\231<\340\206z<\241\025\372\274\333-\313\275\262\t\010>~\344\317;\247\335\343=nJ\375<BF^\275Y\033)=\356\010\347\2758+\261\275\265o\274;\220+\276\275\274\304\362\275\354\230~;\241gL=\303\222\232\275\3266`=\206\273\237\275\2040\207=\231y\212=T\311\306=\355\261\244\275I\252\323\275A\"\224=\373i\233=\343\371\250=\347\213\265\275~\272\240=\375Jz=\276\001\253=g4\232\275Q\376\277=~\264\256=8\300Q<0l\376=Y\243\377=p\213\236\275\240\3368=1u\227=E\343\260\275\033\273\347=\372\027\364=Ykx=\252W\220\275\340\034\014\276}\324\325\275j\224\004\27695\354=2\030\207=N\243\260=\367\252\213\275\350\317\320=I9\001\276\371\323\240=\271\300\344\275bF\325=\273>p\275\034\327b<;f\321\275_6\217\275>*\364=e\261\202\275C\376\250\275\211.\317\275#3\241\275\247\324\276\275\200=\310\274\230?\331=!\224\007>\217uz<\375\255\301\274V\317\000\275:\213\274\275<\245r\275\201\036\347\275\ra\320=\352\342\304=u\236\216\273j\003\236<\242\361\247=\204\320\245\274K\014\342\275\203|$=\260\373\376\275V\207\360\274\306V\217\275\\\230^=WH\212\274\227\327\340=\362;U\272\340(\310\275\255\274\261=\264\275K:\013\n\226\274{\212\320\275\204\346\354\272`*@\275\033\002\001>\257\323\343=\327\313\261\275\205B{=&\320\207<\315s\001\276\257u\014\276\345\320\303=a&\241=\247\334\r>\330\216\305\275\213\177\345;\357U\235=\274\246\335\275V\244P\275\261\222\347\275\021\304,<H]\007>+\022\303\27567\327:\nn\273\275\234\240\362\274\271\314\324\275,\031 =\354l\227\275\030u\321\275\035K^=\363 \016>\312\270#=\236\372\022=/!\270\275?\303R\274\010~\273=\240\345\3549\257\007\355=\344C/<a\325\254\274\341\337\014\276\236v\242=\310\236\316=\031\211\240=\276\243\313\274\213L\300=\'\200\340=c\3246=+\254\364\275;\337v=\027T\354=e`\311\275+v\213=\331zo;jar\275(\344\006>d7B\274 \"\001>\'\262\367=\355s\215=\3452B=\320\216x=\266\300\254<\235\376\235=BF~\275\220M\301\275\201\205\351=\236\276\t>)\376\371=\016FV<$\"\256\275\377X\002\276\260\036\322<\353\341\340\275\230\026\325\275q\251\342=\233X\250\275\023\221\004\276{\354u<\333j\016\274K\342\004\273\367p\212\275\247\0163=\226M\344;\265\300\362\275n\203\252=\233u\033\274m\223\216=\203\345\020\275n\302L\275\210\231\246\275Z\302\304<\235\247\356\275\260\'\224=\220\243\341<v\311|=):l\275\320\357\000>\307W\366<\021\242`\2752\364\n\275*\231c\275\021\247\366<\372\032\324=%\205\372\274\031B\305<r\016\274\275\010\222\346=\3735%=\326\211\321\275\371\371\321={{R\275U4\246=\242\262R\273\200-r\275-\235\336=\036\275\377\275f\006<\275j\360\233=\342\231\317\275\322\010\325\275\376\035Z=d\254\231=\367u\013\276\262\032\030\2740\204\267<;\032j\275uq\002\276NF\017=b_\265\275?\341\214\2752yA=\221\235\003>\2407\250=\305\032e\275\020\017\220=\2577\277\275\"\260\004\276\333\203\003\275\231\343\027=V\353\311\275\357i\252=U\352k\275Wh\206\275C\321\350=z\302\226\273\t\201\275\275<\334\001>\223\3416\274\232c9=\201$~<\007#\261<S\213\375\274U\024\342=\037\022\355\274\240\306Z=B\270q\275\337F\377\274.\222\373\275\002V\031=\245\207%=\245\264B\275~=\321=\022\215\276\275B\031\275==<\373\275h B\274\203\302\233\274i\014\036=\017\341\232\274\017\332\361=^\034\377=\3442\367\275{I\261\275\203gP\275z\345\353\275\270\305\342\275\"\261:=\241\377\013>\257\237,\274\035\346\373=\322;\231=\032a\024=yd\264\275\275V\027\275\302\255\336\275VB\335<\024] \274\253\311\t\276\217\206\001>@\205d=ZW\334\275\221\246t\275\243\217\305\275\223\314\263=\320M;<\372\217q\273\3325\r={\0312\275\261[\276<J\365\233\274<F\323=\264\376\231\273\221e>\274S7B=\005w\254\274\254\340\203=/9\340\273\210\031(<\343C;<V\201\312=-\2562=\237\320\226<\317*\213<\201dE=?D\307=\277f\307\274@\270\225:\330A\365\275\352\222\377\274%\203\306\275\023\207\330=\266\276\300\275M\2616\275z\t\377:\313\0059=\336\223A=\341\240\325=\245\3206\275~\323?\274a\277\352=\242\345\205=\244\2636\275\323\0014=\326 _\275\307\232\252\275\346\035\366\275\306j\007>,\311\245\275\370\304\n\276c\300B=\334M\316=]H\257\275\300t\003>\234\016\346=\016\027\321\275\002LW=\263\376\366\275\023\374u\274\243\206\363<\344\272\253=\004\\\224=\261J\247=\\\330\210=\321\243\'\274\311[==\013c\304=\373\322\033=}\2075<\225\321h=\326\374\352\275\240\220\\\275\023\361\376<qQ\227\275\177\256L<\233\350\000\2761MX\275\200\010\355\275u\225\324\275a\317\266\274\256\332P\275\251w\222=\344\004\247\275Y\005\002\276\322\331\000>\202\331N\275%\204\346\275\304\177\271\275\351K/<M<\374\275\3449\013>@\217V\275\371\246\250\275\366}\345=#\310\272=Kb\340\275\254\311\005>\204\343\216\275\340\330\350=\251\355\014>\374\263\243\275\'\201\343=\354\272\355=\374\326\215=\261\221\320\275\206Z\005>{\031d\275l\232\"=\210^\266\275\214\256\235=\233\366\357<m\204\207=\360\364K=\303\360i\275\302u\331<\2055\266=\354\0175\274\213\251\351=\360\352\354<\255Yh\274\026\361\310=)\336\353\275\373\254\332\274\211o\t\276\355\361\027\274\215+\277\274^\036\013\276\252,\007\272uZ\235=\323\335\005>b\311\n\2760\234\311\275l\231\327\275\224\275\353<\2720\265=\177l\035\275\263\362?\274\032X\344=\034x\301=#\206\036\275\346\373\213=\231*\007\276\220\\\014\276\265A\033<A\025\224\275\322\304\343<\n\251\314= \354\223\275\267\305E=_\357\333\274\271\266O=\316\221\304\275\r\210==@\251\001>\234\326\221<y\032*\275U\230\305\275\376<t\275\2123\340\275\"\316\333\275\304\226\202=M\005\323<4\245\010>\277U\357\272RV\356<\236X\013\276A\331\236\275u\t\322\275\333e>\275:\244\217=\t\035\207\275\357C\330:\"\207\014=\351\206$=\355\342\251<V\211\373\275\nU\025<\233\260\212\275o\251\327\275\252\204\300<\030\241\206=\303\276\266\275\364\357\300=\356\2122\275cb\246\275*\373\324\275\313\250\007=J\214\t>}\363\217\275\356\216\205\274EY\344\274O\210L=x\207\000\275qb\365=\263g\367\275\031\365\212\275i\274\274<\211o\001>e[\372\274u\3208=g\036n\274\225~\"<\344\237\315\275f\2570\275e,\005\276&)\252\275\022\357Y=\r\2051\272w\007\225\274\003H\026=\005\360\246\274=\367\206\275\3313\274<\361_\n>\354\350\255=\344\376\004>_\332y\275F\202\004\275^\336g\275\366s%\275/\016`=\020\210h\275\233\312\001\276i\016:\275\021L\n=%\221\007\276a\234}=>\265\206\275\211R\370=\344M\367\275\256\340h<,\366\317\275g\273\365=\207\254\277\275YY\265=>\036\345\275\257\240m:b\236\001\276\002q\226\274\243\312\010>\240-\370=\256n\327=g\000\204=\355\220\006=h\203\336\275\001\266\365=\022\231\272=\034\212\217<:(\260\275\357\231\324=B/;<\211\300\263=(v\321<\37548\275\020Ve=\232\360\256\273\325W\336\275\365\242Z=\371RR\275Y>\372\2718\267\336=O\237\320\275\025G\253=\237\'\331\275\374;\346=)LP\274~MV=M\220\000\275\020\331Q\273\214\361\243\274\\\341\216=/\002O=>\200\363\275\357i2\275g\331\366\275G\307\221<g\224\014=9\3516\275\356\375\235=\177\266(=\014\253\360\275\200\313\316\274\237q\321\275\355%\351\275\254\222\246\275\016l\210\275\266\030\013>\005\265=\275\343\212\006=1Js\275\355\036\364\275?O#=Ku\013\276\220\310\326=\016\262\254=\225\327\217\275\377\030\221=v\352\222<e\373\312=\021\301L\275\317\036\n>\355\354\350\275\331\230\000\275\264\227p=\316\327\266=\221d\234;\002\324S\275\321\377_\275G\316\301\275\314\255\335\274\317e\267\275\253\266g\273\327\246\371\273\023\366\336=\001G\225\274&>\004\276\233\204L\274VY\214\275\005\325\227=\371\264\260\274d\036\006\276\324\275;\275\374UF=\010\304\336=pmY\275\345V\242=\0275\301\275\307o\225=\210w!=\261@\377=@:\314\274\242\355\277=\027\327\n\276\021^\312=p\024\013>:m\367\275]s\002\274\225\301!=\213\226\363\275\314g\221\275\020J\001\276\234=\204\275\345R\332=\005\224\266=\322\023d=\334{\311=l}\337<\336v\320\275\271&\013>!_\352=k%C:\232+\241\275Q\241\241=k4h\275X\371\030=\032u\334\275\215\335:<\371\330\326\275\205z\273\275\232\235\346\274\352\336\212=\202\037\272\275]\341\241=\344\355\013\276\336\211l=KP\353\275\367.\326\275\303\331O\275\333\255^=\337r\361\275\20036=m\306\350\275V\022\241\275`\335\206\275\000\357\371\275\305\000\204=\026\224\365\275\325\327w<\005\262\257;\272ew\275\371*\355\275f\366\210\273\266\362\220=.\303\247\274]\257\350\274\342\204\010>)\200\006><&\317=\335\225\211=}\350\316\275\016@!=\322s\264\275(\277\230=\017t/=\307\r\003>\320\311\026=\337\345R=tUb=s\270\347\275^\235\001\275\254_\233=7\220\201<\235\207\272\274?\353\327\275_i\364\275\233\271\351\275`/\006>\217\254\005\276y6\323=y\276\257=6\242\354=\321&\007>K:\014\276\362[\306=\215\310\032\275y\005\354=\306\376\013\275\247|\225\2756\200\002\276\264\204\225=?\271\004>\223g\n>\335\341\262\275\215\221\327<\374\320\252\275\266\201\245\275gnf\275t\354\361<\327w\236\275\345\020\266=!}\001>s\345e\275\\\241=\275\304<\354\275$\'\352=\232O\002=R*S=\251\217\000\276\346\014\207=\316\267\361\275\010\014M=\257.\343=\233\316\375\275\364\325\361=A\272\245\275\341u\004>kz\301\274\263t)\275\371\214f=]|^=\017i~\275w\351\014>\215S\234\274\212\004%\275\003\202\013>o&\276=\002ri\275\027\276\017=\256\200\224\275f\2403=\302$\350<M.\204<\351\034\260\275\363\177\226\274\007w\016<*\300{\275\356\224\252=\316a\027=8\277\346=o\201Q\27564\r\276+)I=\204>S=\352\203\246\275\243\262\020=K;\224\275\365S[=\3277\374\274yK\334=e\204\275=\246\342\312<\263\271\001>(\302\203=\'\246~\275!p\251=R\271\323\275\255\330\206\275V\030\230\274~\032u<\226\002\213<\034\202S=\212\312\234\275`ET=\207\247*\275fI\331=\305\362\277\274kL\277=0\313\207=\342\272\300\275\370;t=\217Q\316;\245\002\331<U\240\201\275\327\315\027=*\272\031\275\332\211\246\275&\177\374\275\361\374\204<\220Z\357<\272\327Z=\372\250\022=\256\326\363\275\324\361\224=f\276\245\275\254\241\277=\030\330\353=\366\201\344\275\204/\350=]_\245\275<4@\275\251\353C;\'\355\204=\213c<\275Zz\273<\211{\"\275\223\305\002>\255L\206<T\305\213\275p\225\354\275p\216\317\275\257\367\263\275\2230\272=G\376\201\275\002\034%\275\034\261b\275\3131\331=\313Cj\275<\\\345=;\021?\274Q\265\254\273\314\314\252=u\355\275<\370\312\226;\036\332\245\275$\026\205\275}f!=!\307\226=\017%}\275\000^\004\276%\265$=8d\t\275\256\320\007<\272|\277\274`(\222=1\325\007>\357\033\036= W\375\273\375R\t>\336\364.=\006\370m=\233R\313\274\201D\243\275\246\367c\273\034%\177\275 4\271=\n!N\275(B\222=\272\021h=\000\353E\275\372\346\327=\321\360\000>\323p\265\275\033P\002>\266W\253\274B\243\345\275\034e\312=\345y\225=h*M\274~\222\354=\260(R\275\003\244\336\275\326\267_\275*\021\321\275\302\302\377\275\203\366\355\275I\326\326\275\261f%=>\347$=\211<\351=~G\200\275\276\036\206=\021%\345=\322\342X\275\234\342S\274\027&\270\275\034\363S=\036\305\242\275\231\236\n>ti\327=\212\260\370=\373Gm\274\206S\200\275\207\032\000\276\235\026\335\274\374x\352\275\360\330Z\275\376\220\217=\036\022\337=\305H0;\236Z\320=\330A\013>\2508\333\273kw\352\274\264\034\216\275\237\241\001<\\\3208=\305\300x\275\267[\311=\317\213\203<\r\325\373=\376?\263\274\322t\333\2745\354\005=Q8\210=\013\246\357=\210\251\002\276Y\'\016=G\243\260=\256+\006\276\210%J\275}\320\203\275\r\261\001\274z\n\324\275I\377\344\275\215P\362\275\360@\365\275O]\005>\310\366\351\275U1\366\274\023\253y=\001\024\231=\315\317\316\275\251I\255=~\301\347:\335\273\276\275\362\221\335=\361w\372\273\304\313\261\275X\004F=Z\264\003>\210\206X\273\372\344\336=jJ\272\275\354L\354=U\030\234\275[E\372\275\233h\035<\361\266*=\223\333\235\275\364\213\306\275\306\330\263\275\313\257\222\274\254\332\337\275=\035\201=Tl\277<\235\327\364\274l\274\305=C\257\200=\337\324\021\275*\241\273<\235\313\005>Ga\360\275\177y8<\202nb\275\021\375\217\275u\353n=UX\375\273T\277\276=a\301\306<\327P\001>\251\313\035\275\026:\005>\022\t\377\275g\321\234<\325\2209<\241\257\327<\211?\275=\264\004==6B\370\273i\031a\275>\354\254=\377\276\273=\347\213\000\276*\274\333\275*\304#<\202:\017\275\226O\376=\320[\235\275\223\212\272;\210\302Z=*\213\n\276 {\346\275F\250A=\032\275\010>\032w\337=\372\324\325\274\200\t\372=%\001\n\276\236\260\356\275f^A<\'\021\000\276,\3313\275\021\020&=L]\t\276\016\021U\275\017i\265=g\335\347\275\'\035p\275\365v\253\274$}\204\275\350\314\355=E<\002\276+\332\343=\334\301\n>\317\'x=\351\342\"\275=M\345=\370.\023\275\322\261\367\275\361\374\247\275\357\367\246=\210>\306\274\223\336\211\275\354\353\234\275\316vO:\272a\312\275+\034\3058\263\222\364=+7\306=\240\202\372=)N\352\275\210\212\205\274\361lO\275\355\320M=\375\204\330=Y\315,=\337\373D\275\023\274\371=\300\006B\274?\023\n>\314\374\227=%;\350=:\221\247=\244\267Y;\356\224;=d\031f\275\000\237\267=\262\342\004>\313:\313=\032\024>=\334[\204\275z\210\265=\307xu\275J\257\231=\351\037\177=\327\ri=\271\243g\275\316\247\313\275\362\377\323=\335\254\200=Z\360\004\276\351\323\014>\273\377\337\274G\026\235\275\335\246\254;\366x\274\275\354n\001>\016|\230\275\375\235\263\273\2564\372=\013\252\376;\027\352\271\275\016\367}=\367<\270\275\332Y\331=\232\254\226=H)\010>\323\206\271\273yL\205\275\243a\361=\234\327\246=\372\343\340=l\261:\275J^x=\354{a<\002A\274=\377\320\352\275\034\227$9\342\367w=\243h\251\275k\010\327=\000\200\336\274\033\330\354=\344\235\014>\360B\003>\3556\225=\031\311`\275\\5.<\352\244|=3\223\347\275\355\312\302\275\350\2564\275\033.\341=T`\246=\022\233\244\275U\266\007\275\237\000\332=\003\367\305=\360\210\354=\270uI=O\254\231=#4X\275\206m\020\273\357\007\222=\336\025\213\275\026B`=S\031\371\274\235+R<\333\375\323\275JL\000\276\\\256\252=\3036\000>\005!\330=\303\177\300;\020\221\302\274\266\r\207\275*z\r\276\034;\342=\342 \315\275\235\000@\274\214J\350\275\356\002\322\275\352\252\307\275E\177\317=\234\033\367=\255\306\352\275\234\321\213\275Kh\305=AE\307=b\213\376\275\267\\\010\275\375\227\315\275\\\253#\275\223\302\000\275n)\246\275\033i\213<\274\243\n\276@rY\273+A&=\2663\243\275\205V.9\234\246\201\274\324s\035;\240\360\027\275\350 b=\375\322I=\232U\353=bv\274=PP\325\275*\225\243=\025\304\351=\223\2630\275\303\035\345=Wh\247\275\026\002\215=Y\217X=\336\340\244=\251\217\n=H\364|=4\315\177=\366\262s=V\001\345;\322\020\231=\257\t\301=R\265\014>\257\362\334\274\2749\234\273\244\366\r>\005R@= \264\224\275cz\235\275\354s\330;a\311\320=\232\333\346=\261\270\t\276fg\272=\356K\003=(\203\315<\377X\026\275\005\304\177=\241\330\375=\211Q\013=\323\376\230=&\027\265=\024\201\255<\346\221\304\275P\372s\275E\031\330=\004H\311\275\306D\307\275\303g\006>\323g\245=\232\\\005>\240Q\312\274\350\310G\275a8\213\275\250\237\351<)?E=j\260\367\275\304\353i=}\216\324=\227\242{\275\"\013\000\276\273c\200=\367\225\371\275\271\236\316\275ur\317=\3472\364\275\016\353\005>D[\352=b\225\211\275\266\310\321\275\001\257p\275M\225\272\275\335N\335=wk\033;*\3661\273.\032\313=\244?\300\275\261\266\352\275R\346w=\313o\362<\300\362\376\275\321\307L\275\310\177/\274\177\244\370\275\361\233c\274>\247\333\275\373\274S=d\034\370=\204~\240<r\261\314;B\r\257=\037Xn<7|\351\275\302C\356=\215\203\032\275?X\217=\277\356\221\275\221q\206=Y\331\370\275\366\216\034=8n\233=?\266\320\275|F\003\275!\240\3728v\253\200\275\267\341\t\276pr\333\274\007\352\204=gf\254\275K\316\005>5\227g\274\271\307\007\276l\235x<\270\021#=\364r\004>\230\336\335\275J\360\367=\324\022\326=%\247\000\275\316\271\007>.\340\222=\031{\367\274\251J\220=\336\024\361\275\336\003\244\2753\263\261=\0362`\274\020]\222\275\3011\262\2757\300\337=\"\301\325=\340\232J=\202\260\365=\003\362\317<a\233\006=k:E=\032\014%<\256Q\255\275B\254\224\273\227\006\350=\236\360\201\275c\317#\275\242^\244\275\301\217\031\275\363\014\226\275\305>\372\275\336\355\223=b\327\250=k\311u<\263\214k\275\315b\270<\177\343\002>\236\255\254\275\002\335\214\274\215\365\r>\341\305\273\275\307\013\003\276dV\250\275r\300\260\275\330\357\264\274\304R\374=\330+\260<i\236g\273E\266\215;\320v\254\275\351\001\215\275\374\242\240=)8\267\274\223\302\031=:j\013\276V+\t=f\353\344\275U\024\r>\343:\016\276\276\313\243<t\033\007>46z<\033<E\275\240\006\211<\264`l\275\213\316\317\275j\202X;\332\017.<\272%\271\275\023z\310=y\"M=\002\370\013\274<1\373=\266\310\331\275\305\347\371=\023H\025\275\317t\310\275\365M\205=\206.\374\2756;m=\327\332]\275\2679\014>\2202\253=\030\244K\275\036\307\276\273\331 \370=\223\300\255=\203\366T\2752b\026=\216J\033<\262\256\217=L):\275\t\"m=\3417\214\275\260[\274<I\250\300\274\276GN=\362\373\235=\001J\034\275,\306v=QJ\226=3W\350=$\241\250<\302\230\341\274\022\244\327=\347\202\312<\346\346\263=\025(\242=\264\200\357\275\351\264\331<\230\345F=\277R\305;\036h\362\273t\234\217\275\005i\032\275\253\257:\274\301D\007\2754\235\315\275\371+\300=\351\342\013\276\206\021\013>?\227B=\253\257\347<\031\362{=\217\177\336<DT)\275\274Pm=\247\357\344\275\301\311\303\275\234\246\353=#0\010=as\236=+\001\306=CV\341\275\257)\233\275\032l\373=\247\236\207\274*\025a\275AM\306=E\233\266\275\3740\247\275T\3330=\325\324\263=\237X\333=\245\372\016\274a\002\343\274\241]\362=\nf\274\274\332\270,\275e\233\311=\2641D<\246y\311\275\227\227\337\275\300\226\261=8#\311<\245&\253=[\340\234=\315\242\362=q>\325\275g\014\337<\333\367\342=\361\317\247\274\271p\274<\246n\340\275cK\227\275\316\005\360\275C\010\372\274&>\365\275\356\267\277\275\235\364\336<\230\310\244\275\203\321)=\272\306\343\275O.I\275}\353l\275\301\277\277\2741b\t= X\004=G\200\264=\252K\001=\232\316\327\274\376\352\307\275\221\034`\275*\344~\274\005>\177:\322\356\266=u\343\346=\324\030l\274\243b\352\275\224\272m=!\300R<?\271\267\274pD4\275\321Q\323\275>)\350=$6\345=\232\342~\275\243\272\247<I\327\230=\3461\255\275A\300N\275\007\013\202<\262VP\273\233=\242\274\371\355Q\275\306d\322=}/\'\2759\322\375\274k\231\310\275\352-k\274<!\222\275)\227\314\275\201J\373\275G\367\333<\024\322\341\275\311\021E=\272m\350\2754\233\317=\306L\327\275#B\272=a\207R\275\302\2513\275\342\014\303<v\314\207\274\005NZ\275\177d;<X]\025\275\242\264\310\275J\366\232\275\373\364\225==\260\317=\2524\035=y\220\343\2756\010\301\275\251\245\255\275F\212;\275Q:\307<DE\211\275\201\030\260=\030OD\273\226?\262\2755>\367\275\372[\003>\360\307\317;x\\\205;\220\260\002\275\350\216h<JF\212\275\327\242w=\375.\215=mn\252=\313o\366==W\252\274\230I\341\274\261:\225\274\246(\355\275]=\256=\252g\247\275\260\273\202\275\325\341\250\275\226\032\316\274:\021\246=Y\373\246\275(\344#\273\376!\211\275\361\223\252\274J\322\214\274\243A\022=H\252\321=\343\304\253=/\214\300=6\345\374;V\177\302=LAi\275\357\254T\275\254|\236\275J\252\325\275\255:\314= \307\t\276\211~\202\274\025C+<\334\rr\273T\316\031\275gW\016=\247)\211\274t\'\223=g0\353\275\0242\255=\276R\251;\2724h\273\257\232\226\275\336W\355\275\266\334f\274f\344\324\272\203S\241\275\276\322\002\276\246\345x=m\262\003<\334\233\202\274\245\252\253;\0307\245\275dn\215\275\332Q\234<\353\002\276=J\000\320\273\271\334\326\275\264DG=K\317\275<y\0257\275\253>\300=\347S\016\275\260\017\036=v0S=d\250\256\275+\340\204\275\356\366b\2759\330\231\273\305\377\t\276NL\t>S\035\245\275\325O(=N\026\310<\355\320\252\274\363\033\003\276\0375\374=\373\251\005>\271k\310\274\334\374|\275\234}\203=\330b\270=\035\226\301=\020\263\313\274i{\353=o(f=\215\240G\2754\316$\275\201s\201=\342\221\005\276\243\200\315\273\223\273\331=\004\342\257=\005\033q=\025|\275\275X\221\327</\270\233\275\\P^=\016-\336\275\322\251\225\275\007 p\275\3016\301=\215\263\216\274\241\003m\274\324\245\262\275C\006\006><mP;~\307\033\275\366<\036\275<\340\226\274\267\t\034\275\205\203\244\274s\227\367\274\024\030\207=\317\037\014>\255X\345\274W\306\n\276{{\301\274\356$~=\023\327\033\275\326\334-\274V\256\225\274p*\307\275\243\036d={\374\205<\377\242\302\273j]\227=\020B\013\276Q\031\274\275\"\315\322\275\354\3710=\031\231\361\275\241\341\217=\0202\226=/;\264\275{\371I\275\220\022\317=\2720\347=-\263\271=\\q\356\275\377\270\360\275S]\311=\326I\210\275\340\216\351\275\347\024\275=t\265\213\274`\203\374=\343\370\250\275 e\362\275\366Q\354\275\022Tr<\271\220P\275\357\310\261\275?T\303\275]\350\211\274f\022`=\341.\351\275p\021\366;M\365b=\034\245v\275\227l\017\275W\307y;\345\246^\275b\272\216=\335^\350\275\321\352I=\363\177\334\274D3\035=-\244H\275:\303\262=EB\317\273\203(q=\330\332\221\275\037\014\216:\331\275\216\275\2713\230=\t\324\001\275]\301\321=\357 \n>\"\243\236\275\305\337\n=m\204\013>\356\341\010>L\010\341\274L\027\344=\332\016\016>I\250\343=\205\302\245<P\337\354=T\025\277\275\301\312\325\275g\376\030=,_\327\275\376\373\205=\323c\274\275\023H\365=\232\263\215<\306[\335<ZM\262\275[\r\214\275E\020%\275\256\333v\275G+\274\274Nn\024;Ha\356=\273\233\003\276\2322\202\273\266-\243<\022d\253=M\311\362\275\202\307\356<t\202\370=\275\365\004\2762i\347;%\210\016=V\024[=\314m\327=j\333\257=\346<\365=\307\250\263=\3602\211\275.@\020=\347d\220=\\\206q=\030\304\232<P3+=,\274\317\274\243%\266\275\234\225\342=\177\024!=\364j\256\275\255\205\226\274\353Vp\275:\352q\275oA\355\274l.\236<\223\204\302\273\243\024s\274v\253\362\275^M\371\274&\320\247=\337\027\346;e\221\362\275g:B\275\002\241\220=\361\366\327=\301\277\240\275mUX=\353\357\260=\353\272>\275Pq\352;u,9\274N\277;:F\347Y\275\332d\376=\343K\213\274\000\037\027\275D\302\224<%\326\201\275\213\r\221=\274\325\272<.\200\033=\002F\272\274Po\242<t\035\215\275\304(J=\360\250\211\275\324\206\r=\266\226\350\275\261R\346\275\232\355\244\273tR\224=5\374\023=\014,\210=\024\013\004\276j\320\316\275}W\376\275\344o\336=\266\340\266\275\334\224{\275\334\314\001>/\221~\275\020\241\332\275\300y\261\275\277Q\234=\027Y;\275\016\001\212=\316\342\311\274\264\010\177=\006\342\313\275\010\264;=@\307\252==\316p=\206\216X\275\264|\013\276\367q\033\275\223\014\207\273?\213\203\275\003\334\005>\315\001\344=t\351\t\276\266:\203=\344\210\324\275\373\034\010=\366\302Z\275\021\007\211=\236\002\006\274>\326\\\275\326]\226<B\'\000>\013M\232<\350;\224=\221\221\304=\301,\336=\331x\354\275\201 \223\2750a\354\274y\366\347=\327=\203<\314X\000\274\251W\371\275\375\370\315\275\226\017\251\275+\225\275=\335/\340=(h\340\275%\027\267\275\232\224\315\275\333\334T=xk\r>a\346\223<f\033K\274\220\305\232\273T\211#\274}\336\004>\362\205\321=-\226\200\275.\344T;\266T\003>U ]<\362;\213<\314u\240=\233\214o=\264\235\333=\342\036\263\275\354i\345\274v\006\006=\tB\240\275V\235C\274\250\311?\272]l\215=l4\345=\365T\261<\224\201\365<\177\242\366<p\337u\274\022m.\275\361\224Z\275\265P\246\275\265\260\005\275\3741\304=\3661\306\274b\350\237=\0077\006>/\302\206\275W+\317<\270\305\275\275h\032\013>v\271\247\273\001\351\342=d\246d=D\260\354=\350\362\305\275l\257t=\320m\003\276\270\004\243=\021c:\275\352\345\347\275,\244\210=\363\3644\274%\201$\275\033zK\274\t\362\270\272\\\200\301=\320\305\361\2759\324\006\2762\374y\275\211\370\277<\256\275\206=\033\236\370=\225\303\310\275<\343\346\275\026\325\351=,\210\312\275M\340\254<`\262\013\276\277\032\202=\207xt=J\2172=\267\227\227=\222?\221\275/\036\003>\246\342\214<\016\320\345=V\001\235=\335Q\013\276\205\247\246\275\373~N\275L\341\367=\234\303S<+\236\321=/\313\t\276\312\355\315=\251\232\233\275tn0;\373\244U<\322\200\226=\024vS=\315\255\374\275|\336\222\275\365<\310=\t\357\346\275\362\236\264\274\233/\262\274s?0\271\372\211\026=\370\233\257=nl\022=\027H\327\275g\251\344<E4\257\274c_\t\276\260\022o=i\210\360\275\033\377\215\275uo\343\275\314\022\001>\301\353\260\275\213D\000\276\033\026\032\275\311\373v\275\235\213\251=R\3150\275\330N\206\275JX\357<d\246\n>\241~\202\275\325h\021=P\342\317\275n\322\223;\226\032\007\274\nh\343=o\023\270\275d\303\003\276\341p\325=\373\270\340=\372:\365=4:\016>\351\227\253\275\347)0\275\264\004\027=\035\317\252=,\203\330=S\267a<\256\320\300<\203f\313\274J6l;j\t\203={\244&\275\0330\226\275O\032g=<\203\301\274\253\277X<#\006\241=\322\227\245=\274\314\027=l\214\214\275\256\307\217\275\260P\230\275a\310\003=\342w\211=Mp\317<\000\025\277\275e\027\223\275g\260\t>\365\361\355\275\226\241\304\275\2042_\275*zD=2\325\215;}\264\362\274\017\243\275<0a\246\274a\266\267=8\251\325\275 \247\367<m\225\224<+\265\004>\'\343\212=ET>\275%\251H\275\014`g\275D\337\007>\332\212\310=Qw\302=\002\212\177\275\035\365\271\274@a\343=\301\006\324\274\333\007\330=Kg\t\276\233r\n\274\306&\226\275\367\231>\274\325V\r\276}\352(\275\270\327\332=\335[\337\275\367\220\267\275\002\344Z=\263\370\004\276#RU=>-\267\2756\024\\=25\212\273\355l\372\275\302\034\251\274\310W\323\275g\240\305\275Z6o=k\221\250\275#\317\224\274\243\276\242=\3713\013\274\342\373\362=!\345\375\275\001B\273=\353=\307=\010\037\241\274g{\034\275k6\231\274\373\255\037\275\273kp\272\247v\203\275\365\356Q\274\200\246}\2757e\264\275\274#\353=\336o\233=\256\246I\275P\331\177=\273\001\212=+\220\307\275F\316\234\274\255\301\010\275\005eG\273[\360\236\274&\037$\274-\370\206\275\365\243\243=\2634i<\000\003\266\275\227\371\224=-E\254<\"s\005\276\220I\231\275(\362`<\242\274\313=\307\316\254=\n\321\205\274I\3212\275\221\325\251\2753\202\233\275l\213 =\rtT=\271\266_\275\311(,;\342\014\340\274r\257\313=E\275w<\370fZ=\333\247\334=2*^=\273?\366<Hc\005=u\341(\275O\013\006\275}r\215=\311\272\321=\256\212\367=\333\243\020=\217@\203\275#\016\250\274T\351.\274\375\315\231\275\007\355\333\275\243&\215\275\244\031\373=\376\\\202\273# \274\275h\222\374\275\036\276\027=\362\t\'\275@9m\274{\273\353\275\360\360\204\275\344p==\314m\247=\323\272\323\275\367\340S=\332\267\270=_g\000<\261w\333<2\273\317\275\020B\241\274\271\272\006\276\025\350\t\274\271\\\365:\271;\254=\005\n\020\275b&]<\255Ln=d\'\226\274=Fm=\305\321\022;Q\227\217\275u\273X\275\273\007\232=\236O\371\275\367\036\t>\350t\227\275\354\245z<#\r\017=\2623\220=\270\225\222=GF\354=\206)\233=R\013q=\371)\005\275\337F\001\276\244L\r>\2170\001\276\261\207\250=u\362\261=4\t\333=DC\337\275\236[\212\275\252r\344=!\036\206\275!y\016\274\361\324\233=z\331\341\275Z\360\t\276{\313\362\275\217\315\365\275;\204\244=\245\\\342\275\202J&;\332e\014>\311\016\254\275\317J\302\275\020\010\350\275M\346\020<?\262\346=9\223\321\275:@\221=\335\026\274\275\243\327p\275n\377\244<\025\205\375\274>\311j\275f\001\004\276\352\022\312\275\234o\354=%\224\206\275z(\013>\242\313\014>\205\317\321\275\350\276\324\273A\030\317\274\212h\353=\250\236\350\275\317\351\353\275\334\205\007>e\002\253\275%\333\371=\314=i\275F.\257;\221\274\r>\006m\334=i\353\375\274\314\277\216<\036q\301=\\\330\361=]I\204\275\n\037\204\275\013\032\240=\360\251I\275\316\344\364;\006\235\373=\251\377\263\275\226\324\316<\004\234\334<l\270\320\274\362\362\003\276\020\353\234\274\000{\'\275c\"\252=\302\177\345\275p\035\016>\245\000\365\275\354\204\243\275\020b\350\275\300\216\250<%\252\375\275\361\023\303\275e\211\232<8\343\010\276\362\025\357;#Q\207<\241;\006><(U=\240\317\233\275\337l\331=\002\316\205=Il\314<\264=\361<\242\217\246\275\317\302\236\275\007\341\376=\204\260\341\275(k\230\273\325&\002\275\032|\310\274\225O3\275\247\270P\275)-\001>\253\026_\272\337_\013\276G\001\001\276\316\300\366\275\331\277\253\275o\017\002>\033\007\253=\330F\375\275\244\273\013=&]\213=\360\227\355\274n\335\225\274\251\356\211\275!n\013\276\025\203\215\273\257\370\332\274\360\243\277=p\342\021<\311\242l\275[\215\260<\241\362e=a]\312\275\357\220C=`\177\345=\n\217H\275\345au\275\333d\301\275\352\014\202=8\341\010>\327\355\376\275\335 \336=\263QE=k\005\374<\037\021p\273\262\204\301=\203m\312\275\0235]\275\301\304e\275\232F\027\275\240f$\2722\340\226\275\022g\026\275\227D\211\275E\345\005>\r\014\271\275\r\240\223\275Db\000\276]\217\365<9H\263=\272\\D=\003!\256\275+C\367\275u\361\225=\253b\365\275\247\204b<\243]\270\275\354\251\221\275\350\312\360=B\002\235=\233NV=\370\211\327=\360\265\376=\3234\275=p\314\326\274\304\234\253=n\205\333<N\353\372\275\033\346\343\274\215N\224;\204@\330\275H\007A\275\r\341\315\275\267I\003\276\207\211\265\275\313;\005>G\230\266=\371Z\272\275\215\037\204\275\374G\004\276w\201c\275\214\356Q\2747g\213\275\213W\372;:8\204\274\240\257.\275\361\252\340<*4k\272\252\002\355=1\331T\275\177M\273\275\024\244(=\375\347\226=zy\310\275&\362\004>\375\272\347\274\365\330\234\273\204\356\222\274\307\344u\275m\253\353\275`\0354==\204\014\275\t\3773\273\360\004\025<\312\247)=\327m\260\275\"\274\335\275<r\204=\300\274\005\276\304\222\275=\261\223\375=\233\326 \275\025 \301\27579\\<\237\022\363\275\207\335\203\275u\320\310\275\017\n\312=\320\030\335\275-\236:<\377\240\247\275\277\274\230\275\256\230b\274\207\242\263\275\017\362\354\274\3305g\274];\236\2753\314\367\2751\360\303\275\331%`:j\256\232=\303+\255=\\\242\005>\301\2272\275\242\263\222;0r\261=\361\324\242\275\2432\271\275\264P\232\274\256K\345\275sq\246\275\325V\307\275\343>\303\275\327\363\207<Jg)=9\247\276\275\227\356\006\276\372\265\'\274\354<\016:\224\222\000>2\246\317\275\343\361\316<\200\360\246=v\365\356\275\\\312b\275\001\301\256=\277\n\342=\222\265-;\371\236\t\276\240:\267<3\022\311\275g\320\304=\277\317\366\274O.\221\275\333C\205=\362/\330<\205(\352<\032a\363=9\260\246=\203\251\375<\373`%=\322\036\227\275x\346\324=\251\272\344\275\345\301\343=\223$\351\275\265\225m\275\216\224\n>\n3\326=\346M\237\274\217\'\n=\234\237\372<\212\0345\275Z.\017=]z\005>\344\277\255<\006\316\244\275\033\207\246\275\232\337\222=\026\277\203\275\305\223\244={\242\247=8\243\220=B\032\357<\334)\303=\226\224\321=\354\021\305=D\005\377\275\307]\202=8q\335=\327\344\266=\274\013N=aV\245=g\347\005\276\002\033b<\230\265\315\275n\237\360\275\"N\336=\031X\t=\330\230#=\310$\177<K7\227=8\315K\275|\331\013=Q\017\207\274r\255\t\276G\352\371<@\277\370=\244tD\274}B\331\275\316l\264=U\251==.F<=\267\313\217=#\225\017=\335>O=P\033\262\275\2532\302\275\336\010\304=I\005\316=\366\000\200\275\225k\264=\315`\217\275\301\214\014\275\221\2779\275>\213\365\275F\350\236\272p^\317\274\033\317\311=\350\"\005>\027\371H=\253eq\275\343\247k\275>\230h\275\341\tK=#\203\245\274\376\204\004=\374e\273\275\276V\253\275\t;\372=\004\341\376\2754?^=p\000\325=\216\231\255\275a\376n\273=\014\201\275\326\"g\275G\002\225\275X\255k=\254\377\257=\276\006P=\2208\373\275\313\274\327\275\315\210_=\372/A\274\037jC\274\363\354a\275\224\217v\275w\2012=\260\261\371<\021\352\220=\210\216\266\275\\\375\207\275\257M\330\274X\270b=\357\371\246=!R\025=\375\202\235=\324\204\255=\335\025\363\274\024]\273\2756]\244<\032\225Z=\264\330\336=?\211\002>\245(\202<.dR\275d\350z\274\351W\241=\230\302\230=\267\222\227\275P\375\343=+\264b=\350\217\274=\233S\336\275\307>\014>\247\006\203\275T\202\324=\n\036\263\275\302\256\002<\033Z\254\275\221\356\323=O7\232\275\366\217\214=C\244\271\275\312\325\034\2755\212\202<C6\016\276AP\r>\205\022\352\273\270G\212\274S\240\313=\023\372/\275\2622R=\373^^=\264\213\231=W\2434=6\367\365\275=\177B=\314i\266\275\267\0165\275\037\020\223\275\223\201\313\275\302\372T\275\310\317\313\273>\216\325=\364k\325\274\330\342\325=\371\310,;w\237\366</\345\315\275mZ\000\276%\361L=\3116\237\275_\312\267=\314\372%\275p\267\033\275\020\376#\275\303\032\017\275W\324\341\275^a.\2758\227m\274#l\370=\211\252\003>\315W\262;\260*;\275\246*\217=\003O\347=\235l\207\275\244\210\\=\342\n\230<\221a\257\274\365\303.\274\220\321\002\276\236\271\317\275y\022w=F\271~=\027\023-<\302\025\016\276\007Yj\274\017\362-\274\334T\363\275\t\375l=\314$\270\275F\244\334<\314\177^\275\034\317\"=m\224\267\274@Z\224\275|\004{\272,u\025\275:?\322\274\243\225\037\274p\211\320\275m\335\004>\0130\215=\261}<\275&\376\236=\305\306\205\273\314<\267=j\221F\275>\233\201=\233;\201=\342\316\377=\3248\272\275d\261\241\274Hk\305\274\360k\006\276\207\342\331\274-\237\n=_\343\363;\302\353\352\275R\356\007>\332\266g\274\027\304\207\275\373\267\245=2h\274\275J\031]\275<;\367\275\271\245\t\2768\tv=\204jc\274\033Dn\274\314_\231=\355j\005>d\177\273=\'p\336\275\315\200\370=\254N\027<\033J\342=\033\242\003\275=\257\237=\213\027\007;\351\207\207\275\362\017\010\276\230rb:?\3323\275\320\345Y\275W\313\372<\037\354\362\275\273\177\003\275U\265\236\275\010g\201<q\324\227<S\264(<\331\213\371\275X\303\250\275\350\312\276\275\222\3120<\n^\262\275H\345\000\276X\346\277=U`G=\260\315\374=\";9\274\2159\323\275\021\220Z=\341b\003>;\226\"\275\264\017&\275W\021\355<\217\236\355\275\330\230\270<\211\234\014=\250\305\002>k\361j\272\2379\367=\274\376\006>\336\243\t>\007D\304\275\205E\237:v<\272\275\004}\330=Q\243\032=\265\353>\2759\347q=\307\023\034<\342\216\355\274\253p\004\275\275\227A\275\201\034\234\2751A\376=\375\314\243\275\026\240+\274b\014\334=&>\335<\271\022\310\275\203\347E=\221m\250\274\330|\316=\256Z\270=\257LH\274\263\277\316=b\273\023\275\254\026\334\275\215\236\201=!1\207=k+A\275\017\252\316=*nX\274\003~\247<\'\"\271\275\003/\016=\350\277\337\275\316\232\002\275\020\270r=a=\003\276>\330|\275E\200\337\275y\243\003\276\242\322\036\275\352\335r=\036~q<\306\357\251=\022n\201<\266\037\252<\301\372\266=\341\213\327\275\002#\272\275\213I\361=\262\320\236=Z\237S<E\322\262\2755k\356<\037T\235=E\025\\\275\364\341+=N5\016>(VK=lp\320\274]\355\263\275\241$Q\274\3373\326\275\344\037\344=\235\013E\275\250\010\243\275\177\022\206=b\036\335<\277>:\273Tp\007>\270\216\363<\221|\317\275v\370\361=\346E\013=eR\003\275zw\236=\002\3206\275e+*=]}\242\275\310\227\344\273x|]<c\002\300<b:\010\276\337\334\033<\370\222A\275\377\335\207<\351\266\214=\305\013\231\275W7\r=\270<\261\275]J4\274\214J\013\276\020\177\307\275\000S\013>\245o\010>D\n\307\274Z\017\251=\310\213\211=\303L\276\275\230\316\007\276\344\203\320=D7\003\274N\2178\2756\347\374=)]N=]\243\025=\346\006\302\274\315\210=\274\322\036\231\2753\016\232\275~#\312<W\357\360\275\253\002\326\275\3330\235=8\204w\275\314\204\277=\343\207\004>N\036(\274\373;\360=\320\243\303=\241\300\010>e\245\270\271\315O\245\275J\264\343<\315\265\321=M\002|=\213,\033=\222\027\223=\215\317\323\275\033\326\237=\336\265\231=\326\271\274\2752\226/\272\001\3502\275\220\257\007\273\211\251:<\373\231\003\276\n\'8:s\001\004>1)\215=7\337\270\275!\250\352=(\236\373\274u\242\241=\314\362\233=\037\303\202=E!\357\273\025\255\007>rU\211\275\353+v\275;!\005>\213\031~=\236w\310\275\227F\272\274\217Nc\275\323\304j<\261\026\270\275\363\260)\275\241\026\004>Z\260]\274Q\237\306\275\223\351p<R\000\347=O6D=\004\032\007=q8<=\326\225<\275\001\3516=\317z\340<\370\216\204\275\255R\002\276\201\376\334\274#1\216<\343\226\001\275\321\207x=\357E\257\275\363D\366=\233_\322\275{\250\253\275\r\336+=\363\177\214\275|\200\204=1\"\322=\276+\312=\220\262Y=;ZW;\207]\257=\312Jg\275\324x\262\275o\212\325\275\272)E\275\330]R=\3066\240\275\020\353\203\275I/\023\275\017\270\233\275\241\325,\2747I\020=Cc\307=T&\361=\237J\361\275\250\306\231\275\014~\253=m\3162=\256\234\024\275\032/\324<\230G\034=/\004\270=,+-\275\034\030\024\275I\270\003>^S\340=\232B\362\275s\247&=\335\201\305=\021Q\005>:!\263=\007\265\002>\002\314\202\275(q\273=\373\264\r\276\021\375-\275\220,\325=\306\223c=G#K<yp\352:\026.\\\275Bi\216=\355\002S\275\215M\020\275\225\261\r>\022\214\023\275\236\235\036\275\000\327g=\351\371\347\275\030\370\307\275\"S\360\274\034\210?\275b\032/\275h\203\257\275\323s\241=\"}\003\276\215\230\007>\302\353\235\272\333\255\363=+A,\275\363\275\216=_\353\352\275c\271P\275\322*\372\274\375\024\206=\033+V\275\006_\337\275!H\230=)\276h=\007\201\214\275\322\226\335\275\005\262\003\276\317\371\316\274\313\212\003>\021\031\277=\241\r\251=\207\337Z\275\233\371\377\275\233S\223=\367\351\350\275\330\350\372;!E\240\275\240\351\247\275\346\300\261<\205\224Z\274\233\301;<\001\340K=\321K\376=\210\314\244;\256\322\250<m\237/\275\242\034\304\275\303\231\226\275\216C\274=;\315H\275\025\272\344=F\213\266<y}\027=3\321\261=\325I^<\302\365k\275,\317\203\275\345\3606\274M\334\331\274GD\001=04\205\275\310\001\003\276\210N\362\274\333\257\010>u\007\321\274=\311\342=\205\334\n>@\036\257\274S\340F\275\201\031\377<\231O\006\276A\301\261=x\3700=H1\206\274W\333\026\275\016\373\205\274\203M\302\275*U\014\276\316v\006\276\303\246\200\274\372\307\021=S\333\t=\212\014\010\276\014\316\360\275\257\314\004\276\244\031\370\273|?\005\276pK\342=2\357T=}\320\275\275A\363D\275\2040.=nD\236=\316\356\267\274\232a\252<\333\312\272=\335\\\266\275h\360\026\274\250y\267=\030\323\351=j\352\317\275Ny\230\274\221\033\271=\270 \310=ex\201\275~\333\002\276M\034F=\303c\005\275\3645<={\267j;\207\206\261\275Q\347X\275^\307\235\275g\350\324=\346\344\t\276\341\243\370=o!C=\270V\222\2757\235\030\275\022\364?=\020\026m\275\004\206}<\317\244\r>Wl>\275\331/\250=\224\350\\\275\206\nH:^j\335\275X\342P=\r5\310<\207\217_\275\240\326\013>K.B\275\310\223\361=\366\376\365=\335P\344=H\230\221\275\336\247\354\275\266\331\277<\244A\035\275\251\366\302\275L\200\274=\223\334\225\274?\247\337\274/KS=h3\277=\220\244\321=\031\320\270=JM\327<\300\254\367=\351\034\354=}\374t\275\035S\236=\376\325\255<s\344\327\273\336\332!=\243m\253;3\302\356=R6R\275\216\212\007\275\241\t\363\274\247\2336=\\\t<\275\334\261\373\275\324\320v=\265\211\355\275\314\236^\275PB\247<\300B\314=6\000\223\275\320\307\t\27692\275=\355+\314= \000\006\275\370m\257<\355\311\337\275\362\251\305\275\222\210\366\273/w\302<\010\264\004\274\031\007\232\274<\336\r>\0327\326\275\216t\227=\nx\231\275\215\303\177<\265h\253\275.\003\260\273H9\255\275\0044\327\275\261|\355= \377\315=\322z\301<\276 \363<A\340\347\275\261\014\322\274\234,\230=\026\372\302\275y0\205;\230\355\371\275z$\017<\"=\323\275\340`\347\274\220\340\343\273\240`\273=\3617\007\276X\373.=\204\014\377=\235\324\r>.\357\326<\272\270\"=\301\266w<$\030\003\274#\215\t\276|\201,\275\307<\370=\225\\\300\275\027n\256=\374\200\245\275?\221\252\275r\035\002=\274!\332<\350r\014\276y?\204=\033\223\367\275V\025\010\2768\313\357<\014\347\013\276\317\257\315<;\372!=\326\177\335\274\267t\331\274?\377z\275\274a\221<\305\316)\275^\353\010>l\200\372=\214\374\375\275\022\327\305\275$\"9\275\314!\362=\004[\350\273\024lZ=):\305\275\372\013\303\273\313|\227=H\203,\275m%.=?\306\207\275\212-\242\275%\311\365\275\215\350\310=\244E\316=2-\223\274u^\233=\235\020Y\275\'\367?=O=\275=\374\265\347<5\313\373=\227\336\245\275\325@u\275o\223\026=\216h\333=P\023\311=\230g\306\274\372\212C<\263rW\273ou =\330\361\220=\226/\275\275\264\314R=\3309\221=C\020\031\275\027`\005>2a\326<\256\315n\273?M\n>\314\342\261\275\372\327\346=\361X\304=\354\312\307=\351F#=\257\301E=\007\230\266=\231X\235\275\375\332L\275\201I\316=_>G=\247z\371\275mX\254\275d\270\261\2744=\306=z\250\275\274\3244\305\275\205\277\026\275\265\372\267<\363\361\302\275\250\026\324=\373\037\316\275e2\247=\'c\372;\245\330\306\274`wD=\304F\331=\201\270x\274\\\363\211=\373\214\356\274\233#b=\356=\342=\227\236\267=B)\336\275\327\257\270\275\033\233Q\275\310/\365\275\271&\003<\2740H=\214\250\327\275\010\231\307;\227Fd\275\'\336\331=7\231\271\275c9\205:+\205\231\275G1\327\275A\256\223\275x\3234\274\267\303\030<\223\022\n>\344\277\310=:\306\244<\200\256\r\276\0244\016=\2562\315\275)H\364<\014r\260;\347\221#\274M\000\352\275\264\302%:\306\366\212\275\006\336\000>=\002\300\273\363\245\201\274\2421\350=\231s\264\274#\331\320<\350\365\222=\334\'\341=O\r+=\307\253\306<\025\326\304\275\0336G;U\\\300=\266\013\234\275F`\000\276z\347\350;\200d\271=\220\206\222\275h\300\247= A\373\275~]\000>g\251\221\275\013\312,\275\177,\276=\235\236;:\245\313\307\275\216\370\254=\371\244\036=#\033\276\275\214\033\217=\247\r\004\276\352\371\024\275\344\272\355=\326&o=\312\003\'\274\307\352\315\275t\371!\275\212\024\\<\311&)\275\373\016\223=$:\241<z\020\344=LJ\266\275\017ZV\274\221\034\222\275{s\341=]\024\254=o\367\274;$\240\245=\263G\370\275\224y\t\275\356\377.\275\327f\022\275\250\022\244=\333j,\274\211\031\231=j\276\003\276\361\347\313=\rM\273=s3s=D\212z<\216B\t>\340\235\304=\203\024\243<\031)\273\271\316>w:\376\342F\275\220\275\004>B\376h\275\273\231\310\274\033\250o;,%\323\274\231\033\250=\211Gw\275n\304\351<A\036\226\275\323\201\236=\210\327\217=\326\336x=\204\253\247=V:\207=\210d\212\275^)\355=\275\252\014\276\364\233\310\274\210\244\203\273Uot\274\"r8=\273\322@\275\016\215\211=\300\224\345=\375ol=\332\254\020;L\333\253=\035\243\307=\225\330\000>\251h\255\275V\031\016\276\324\000U\275\311v\212=p!]\275\351\256\240=\300<L=(\ts\275\224\264d\275\245`\310<\222\217A<<\017\241<`\272\372;\254/\016=\357\354\216\275O\372\304\274\253\n\006>i\'9=\001(\300=\237\261\273\275\255\366\263\275\233O3\275\3143\223=s\313\030\275y &\275,\236\240;|\311\260\274>\241\301\275\313J\256\274]n\004\275\356\332+=\304H\216\275\004\362\352\275\312\354\323<\2070\244\274\000\347\203\275AB\306\275\217\245\023=,\236\002>Es\330\275R\205\223=\317\211\007>\275\301\257\275\230 \324<Z8G=\352\354\003>o\313O\274\037\247\203=:\004\272;\036f*={\\\234<\266-\254=\355T\325\275%G\037\275X\245\r\275&\313\363\275\212\251\243=\304M\017=\345\364\017\275\363\032O\275\341\310\255=\021\034\336\275\t\361\317\275\317\340\316\275:\222\360=\254\001\336\275\245\273]=\320\317D=\177<\001=\033\303\261\275\t\177\215<gP\n\275\202\272\307=!\322\373=\233\005\t>\032\005\221\275\370lJ\275\343\276\000\276F\274r=\245\370\321\275\231M\320\275\323\360\267\275\204\353|\274t@\006\276-}\006\273M\200M=@\330\374=*\034\301=|\342\372\273B/\254;\243@\302=\256\212\245=E\347\230=l\307w\274k;\260\274O\226\231=\342\365\206<\344\376\237\275N\267\275\274j\246O\275c\"\003>\330\n\016>\336\331*\274\261\213\356=\265\311\307\275aj\357=\343\354\271\271>\375\365\275\370\266\263=\210Y\002=\250#\213<\251\363%\274N\231\004>\362\324\315\274]\346\356=\020\366\002={\251\226=*\314\316=\023Y\n\276|\267&\275\003\230x=\206\255\220=\365{\004=z{\347=?\260\022\27526\337;(\336\206\274\205\204a=I\306t=\270*\214=N\300\375\275W!\242=\231\331\001>\021\tb=\340\362\021=\315\311\241\275\003\020\242\275\371\203\242=\216\206\203\274uu2=C\212\212\274\213!l=\300\317\207\275\367\376B\275\363N\t\276\334\251\211\275t\203\365\275\346Za=\367]\342=J\217`\275\321\004\221=.\367Y\273_}\246\275L\350\363\275\242\260y=x\227\"\275\026\341\014>\307\026\211=\314/\316=U\340\315=7\027\364\275\t?\355\275Ub\271<\340\'v=\\\002}<x\356\234\275\275P\252\274\213,\360\275\007\3771=&*\017\274\205{\001>8j<\275:\210\352==@\372\275J\263\252\275\0330\367<\244}\334=\365\372\010\276\1770,=\250][<\354 \362\275\203\301\310\274\214\372\331\275\216\025\227=\212\316\212\275\213\001\212\275w\265s\275:\033\014<\007\001\231=\\5=\2746\2675=/\270-=!$\247=\327o\322=\313\037\334;\211w\014=|s\327=:\031:\275\311\331\220<\023\'+<-E\277\2746\263\205=y%\262\275\021\255\333=s\332>\275\002\316\267<\2724\315\274\356\354\330=6hS<VO\202=k\301\336=\233]\253\275\344\211\211\273l\257\221\275\2622\311\275\366|z\275\205\3700=Nb\346=\260\036\310\274\351K\033\275\\Z\335\275\r\241\347;ii\010>\031\003\247\275\022\022\n>e\027u\275Lqz=\r\252\313\273F\006\215\275\275t\337\275\237#\304=\332\207\356=F\020\335\275\362\035\330=VV\013\273|\267{=f\242\270<\211y\344\273\026\364\341<,A\247=>\361\233\275\260\024\004=/\363\310\273\007d6\275\350\034\216=\310\255f\275\367\347\307\274\233\027\355\275\257P\266=\271\242\217=mMT=\323\026\220\275<uC;\304\352\004>]\276\306=iSj\275y7\'\275\331\220E<\327t\245=\327\312Q\274\246~\026<\241WI=\021e\032\275\306\254\353\275\214A\003>h\n\371=;=\261=\352\317\203\275\'\212\376=\r\224\261\2712{\276=\327\267p=\344\022u\275\341\027\235=1D\r\276\240\226\316\275O\016\250\274\340\261\035=n\276\361\275ao\001=\320\023e\275\346|,\275p\350;\274\276\024@\275\373\230\372\274\301*P\274\237\201\006\276V\202\363<8$\373=P\304\376\275B\010\361<\223\324\257\2733\345c\272\237\004<=^h\356\274\262+B\275\304\272\211\274\373\320\003>Y5E=~B\367\275\257p\242\275\232\333\323<H\177\304\275/\202\245=\0326\275<\325\037n<\204g\260\274c\356R=\035A\327<?\224\007\276>/\202\273P\332\305\274f\377\005\273\177\333\204\274RT\266\275j^\312\2750f\250=\320\224\377=\274\320V\275?7\005>\032\221C=\3700\224\275z\026\364=NQ^=\242\330\251\275\330\034\212=\363\373B\272B\345\033\275\246<\255\275pC\t=\277K\007\276ul3\275\3305%\275i\217\350\2752\364\177=\ry\004>\334.\r>\231\233 ;\215\263\330=\267\361\001>R\013=;\323\372\002>\013\237\023=\376\225\242\274\372N-;\273\360\255\275//\276\275\021\264\001\276_\177\222\275&\013\231\275\322\267\177=,KW=\207\331\302\274\363#2<\362\357\301<\270\316z\275\275\327n\274\335`\350={i\312\275\271\346\003>\213<G=)\340\332=\345\306\334=]n\312\275B\003\335<P\021w=\242\226\004=P\\\302\275\223\010B=l,\307=N\014\002\276w\007\330=\371o\301<\304\212\356\273\"G\237=\374\377\364\275\301\345\272\274\221\032\333=d\003k\275u-\266=m\317\004=\335\016\350=\353O\327\275\n\032\343=\2155\277<\314\226\213=\211l\\<Z\003\n\276\270*\231={\316 \275\242\334\r\274uV\205\275\266\331\310=\226\177\233<-\203\206\274R7\317=\257\313\t>\020\375\354\275\227.\036\274\321\236\351\275\307\206g=\350=)\275\203\036\262=zzi\275\rT\330=\360\373\317=\327x\320\274\255Q\'\275j_A;%\020\326=\344\364\234=T\274\t\275(\335\320\275/>\251\275\230l\006>9#\014=\026\300\267\275\032\325~=\344\342\206=\377%\373=s\265\335\275\r\004\233\274#,\264;\212H\227\274`\210\245=\322)\302=\255\234\225\275\t-\235\275\224\267\247=\246\245\246\274\326z\375\275\215\262?\275\351\336\372\2754.\306=\203I\306\275\223\n\332=\'w\357\274]P\350\275\240i\251=|]\302\275 \034\335\27535;<\325m\352<7\340[\274u\246\026\275\024\353\001\276\025\215\253\275\351!]\275k\242\227\274\231\n\356\275K\362\027=W\230\226\2738\245\006>\213K\246\275\026\260\352\275\021\275\223<\355\314+=\221\303\212\275\262\030\367;]\022\363\275z\341\362=\375{\211\275\315\300\201=vy\320=\027\037\205\275S\302\332=b\311\342\275\321s\321\275\371Jm\275\315\206H\274\243p\330=\'d\364<\206\217\363<\332\025\212=\r\316\337\275Z\216\221\2756\033\223<\036C\333;\315W\366<<O\214\273\226\t\343\275\010\226\372;F\022\240\275@L\010\276\266-\007\276\313o\251\275\266\366\231\275\257\352\301=xG\227\275\262cg\275A)Y\274]r\300<\213k\r\274\\m\004>\245\341h\274\"\021\315=<!\246\275\321^\227=\025\315\240\275\350\313\314\275Ta\244=\255L\302\274\2117\016>J\360\005>z\024\255\275bu\004<M\032\317<-\250\315=)\\\245=\237\210\370\274\262l\022\275p\303a=\337v0=Fd9=\254qF=\244\325\375=024;\3544\315=\225\361\345\275\027\307\014>\303\033}=C\2036\275!\300m=\204\357A\275\363\265\240\275\006Eq=u\\\240\275\035\306\244=\351o\177\2753(\214=*\037\364\273aa\265=z\277W\274\236iv\275u\327\327\275\352\276\\<\004\002\347\275\005U\003\276:vd\275\316g\003\276b\341j=\202P\310\274\213\036h<\350o\377\275\337\347k\275&\033\016>c\275\204\275_b)=\305\373\034=\210*\025=\337\340\221=G\201\213\275\030]\243<\301\323\347=z \236\275\271\275\023\275\350\021\261=\252\200\334\275_m\004\276t\225H\275K\326\230=\351\373\356\275\362=\240\275\353\356\222\275O\303\231<6\361\354\275\263X\n>q\002\n>\"\255\253=\361\212\373=\303\315\267\275s\240\272=\\\277\265=\303\226\236=7\355)\275sw\245\273\340a\003>3\263\245<N\340\r\276z\343\271=\021o\311=+\241\312\274\303\350\204\275/\232\214\275R\350\343\275(\254\267=6\363\350\275\231\215\210\275T\335\030\275\016=u<\245\322\007>\347\251\014=\261\034\205\275\232\035P=BC\337;\376y\326<6\250\240=\215\273F\275\371^\246=\rn\002\276\205v~\275\317q!<\024hl=\031\234\260\275\245O\\=\247\275\241\273y\206\367\275\0025\342=\225\371a\275\351\214\327=d\006\022\275\231\374l=`\376\362\274\'h\227\2753\243\321\274\003\000\366=\343\225\007>U\336\340\275\005\0339=\302\310\006\276\230C\267\275\344\354\000\275\263\255y=\032&F\275\371\271\265<\200\377\n\275ZJ\327=YLE=\356[%=\221\t\364=\323\366%<\013M\227\275\322d\327=\313\201\003\276\347\325\214\275}\213\260\272\345\355\t\2752\333\025=\341\220+=N\310\352<\273\210\252=\021<\001>\223&W\2754\226\310\275I\231\203\275\243\315\000>\225\203\227\275\306\263\213;\345\336\362=\214(\335=ZV\003\276\345\322\350\275\017^C\275\232\007\374\275\276k\242\275\317\3720<N\2603\275\321$_=V\275\323\274\257\221\344=p1\277=\232\266\343\275i\207\201\275\203ay\275\031\306\t\2761\217\265=V)\210\275\324\306\360\275\275\225\005>\033\343\025\275V\321\247=v\177\245\2751{\263<\301\256@=\306;<=\177\313\013>\231*\300;\251\t,=\301\305Q<R\275S\275Q\364A=\360\210\366\273\013\337L<\341\302<=\022\321 \2758HW<V\017\r>@\354\213=\210\223\003>\252\373\177\275\243x\300<\020\360\250\275\376$\374\275b\210\257=\345\362\232\275\031\252\303;I\tW\275\242t\007\276+ \311\275\221\037d\275\016\372\207\275C\230\214<x\t\273=z\016\332\275-\213\t\276\023T\331;\370`\n>\371\233\255:w\247\030\275\243x\371\275\265_B;\245\234*=hs\352\275\340C\323=F^\304;\311\313\246\275X\253\237\275\202\316\001\276e\232u\275\376`\336\275\314*\226\275\214\032~=\366\226\007\275g\357\301\275{,\257\275\237\322\017=\204\220\351\2757\315\351<\267\210\320\275\252\366\323=\336B\222<\347\367\002\276\352-\010\276\223.&<V\367\330\275\3062\232=\374\266\031\274h\243.\275\0002\373=\364\033^\275\3649\240=u8I\2750-\267<\214\325\222=\327\324K\275:\245q\275\240\203\020\274\013\\\227<DW\241\275\253A\310=\275\274\n\276\025\021\333<\204?^\274\377\025\275=\243\275\212\275\2316\032=M\240\212\2759\"\235;\330\302\303\275\343\036\224\275\022P\244\275X\237\327\275\246\360\177\275\235@i;\352|r\275nEm=\331\302\355=\002L\257=\245\217\006>\311`\034\274<\351\001>\204\345\311=\274(\237\275\352\373\206=J!\305\274UgK<4\301\n\275\220\034\256<\325a\302=\231\274\304\275CVu\275*:\007\276t\007o\272t\006\265\275ev\014>g\374\240=\013\336\271\275w\366\251\275f\320\204\274\321\005\253\274\304]\000\275:\nO\274\223d\207=\343g\004>Q1\207\275\353ce=\373N\243\275\274(\344=/\251s\275b\262:\275\343\364*\275D\007\224<\342\271\260\274\231eS\275\275c\373=\364\230\261\275\346\246\344=Q\243\252=`\336\013>\263\022R\275\371\315E\275\'?\273=\030Ct\2757p\351<q\270\275\274x\020\n\2761\255\365=h\237\304=\325f\376\275i[\347=7z\312\275\336\022{=\010#\330;\330r\335\275[S\345=^D\004\275\366\0322\274YxF\275,s4\275_\245\341=\263&\010>\001\313?= \302\030=\022\324\360=\306+\212=G\031\224=\300\204\014\275\315\350\375=\317\223\314:4z\304\274\233\344\327;\025\311\371\274xu\325=-R$=\370R\252<F\356\013\275\336\230\036\275(b\372\273\354&L\275\262\356\352\275\014\263\022;\006\271\300=_q\351=&\362\235=\036\335\366\275\374C\350\275@\313\216\275\365\214!\275\347\0305=\252@\010>\010=\212\275\311\037\014<\243\271,=j\005\351=\322\314\342\274\037\322\032<\242\241\305\275]V\350=\2778U\275\330\021\025<\000\003\271\275\332\220\336\2759\032\206<\257S\006\276\004\034^\275\331\031(\273\334.\372\274!,\343=\360i\311=\330\377\350=a\320\273\275<\336+=\336\362\360=w\321\274\274\374\346\002\276\360\016\227\274\000\311`=\2111\372<d\242$=\t}\344=\223 \341\274\006\3162\274\260g\016\275%\317\025;\276\217\235\274j\t\351<H\264\210=A\306o\275\033\204r\275\243\023\251=o\021\022\275\274\342v\275\363{\267=\027\313\230=\000\r\005\276\027\237\236=+h\333\274\t\235\366=m-\010\275\031\245\351<C\355\000>\261d\005\276\311D\245\275\220\004\320<\362\326\362\275)O\211=\276\374\005=\022L\262\275\335\2548<\2776\n=l2\005\271M\216\326=F\252\354=\336\332*\275\246\263\243\275\366\n\221=\276n7=9\025\351=+\020@=&H\301=Y\376\373\272\275\354\340=\263\351\344\274\322\3140=\223\240\221\275H\357\274=&/\010\276O\247\355\274{\366\315=B6\\\2758v\013\276\207P\3369\227]l\275\266\034\264=8\030|:\333\246\277\275\314n:\275i;\356=\313r5\2754#<\275?\017\235=%\004M\275AD\335=\240t\311\274p\201\323\275\337\250F\275\212k\301\273\376\362l\275\226\352\177\275\327\r\241=o\233\272:\002\177\006\275\0016\224\275\246\223\211\273\031\250\n\276\351\226\007\276u\021\t\275\331\372?=3\375\350\275e\345c<]\353\263=\241yQ\273\207>\232=1mI<\330\270n\275\231\223\000>\014\013\377\274\302\\\217=z\360S\275\223J\363\275\030Ng=G\205\240\275\247\363\034\275\277\355\300\275)9.<\2207\276=_\215\201=\022\017K;\255\271\320\275\025D\225\275\000\331\324=\177\005\245=c\315B=r\255\004\276\316\255\265=}\373\372\275Otd\275r\272\003>O\032\251<\211\2306=\247\355\305=`d\304\275\037\214\376\275M\236\024\275|T\363=\362\'\346=ii\005\276h\306\251<H\007\007=\377\242\330\273\337\245\363=\255q\260<H\217\343={\352\250\275:\304\225\275\021 \005\276S\360\353\275\0038\251<\"-\230\275\336\006\354\273@\036\352\275\320\001\300<\313\215\233\275Ed\032\275:w\312<\032\375;=\240\322\377\275\303\361b=\020\223\002>\376\2771\275\220\215F\274\304T\234\275\204\374\235\274\035\345R\275\016\214\002\275l\222w\275\360.\345=Y\3343\275n\023\344\275\214\021\210\275\366\256\272\275\277-\026\275\001\353$=\247 >=\313\367\241=N\370\200=Q\326&<;\000\374<?\277\325\272\311\351\230\275\034\234\224\275`\215\004<yp[< \303?=\322\004\312=\t\350s=s?\343\275XH\207\275k\274\254=\311\t\241=\233\360\327\275\2060T\274\036y7=1\316h\275\206\225\013\2767I\375\275A\024\337=y\371\326<t\312\302\275\3337\210=\240\357\373=\215L\020=\226\265\325=\035\277\276<\3740t=\023\216\315\275a\2052=\307\242\242\275\204\214y=* \361\275,\002\305\275>0X\275\352\223\222=\021z<=4D\221\275\343\227\002<\210\214;\275\234dd=aX\004>\203\r\260;\021\006\242=3\r\003>\356\r\237\275\'P\234\273\231l\257\275\215kG=\317\016\234<A\004\244=\264\201\016<\265\200\335\275e\211\256=\317\364\022=\210\230\223\275\"I\017\274\232ze<\007\215\215\2759\026\004\275\3452\010>\005\365\306\275H\217\013>\360l\033=\356\254c=&\\\373=}\374\350=e\322\014\275\020\366\t\276\342\244\302<\302\354\356\275b\240\243\275\\\204A\275\306\216\327=\264\351\274=FO\360=\203\370\322\275\264\260\014\276Sfv=\034r\323\275\263/\016=]\245\030;\376+\374\275zt\210<\325\035l=\017\347\311\274 \251\360\275\236\375\t>>\305/=\305w\373=G!\354=\2603\315\275\354v\330\275z\302\233<)\006\271<\211d\341\275z<\251\274\363\346\026\2759M\255\275i\255\224:CE =\003\346F<X\003&=\350\035\333\274\r\362\216=\021\346\005=x\217\370\275&\206\002\276\322 \210\275\344\374\007\276\"\222\203=\302x/\2757/\226=\344J\302=\321\007\271\275\346\n\002\276oq\231\275H\252m=\262\3231=M\361\014\276\333\025\242=C\213\301\275\3457\027=+\027\371=\377ca=\336\201\007>\306\004\243=.\251\247=\302 \007\276\324s\257\274Jo\255=\330\370\242\273\253Ej\274a\327\300\275sy\267\271\310\335c\274\326\310\177\275f\203\332<M<\347=\376\002\373\275\321\"\244=\372N\274\275Z\257\307\275\004\032\357\275\360\300\321\275\351<\240=\017/\334=\243\226\013\276\345\332\323=\240(\005=s\001\233=0\016t\275yb%<\255Y\206\275\256\236-\274r\024\335\275o\333\000\275\371\275\014\276y~\221=.\215f\274\261\303\t=\335\353\010>,M7\275h\207\207=\352\325\004\275\3306\276\275\222\220\245\275\022\270\354=R\236\234=_*\205\275\233\247\342=\357p\264\275\323uV\275\217]\230\275\253\237\322;4\002E=6\257|=\010?\257=/\037\242<\261\003\214\274\343\352\203<\351\255\235\274\374ox=\371\217\346\275\267\021\t\276\014%\277\275\331\205N=2\327\333\275\346\313\251\2737`\366\275qm\210<\351\364\344\275\324h\275=\210\300\n\273\220s\275=\357\210-=A\027\275\274d|\210\275)|9=\240\263\242\275\207\204\216\275\345%\337\275P\'\307=\321\033.=s\002%\274\370)\034\275\355f\n\276\304\031s\274a\210\000\275L\034\330=\037\021\355=\270\026\253\275\335\"\260\275\000\232\375\275\022\263t<\301\367\207\2755 \301=\345\003]\275Y\021\201=\304\003\312\274\212\326\313=l,\001\276s\364\261\2749X\237\275\300}\367=9\276\305=\221\365\231\274Nl\035=tq\217\275\237\270\367\275\006|\301=K\356\361:\033\216\275\275\200\'\002>\317X\251=\022\013\334\274F\222\244<a\260\375=j.\n\276\347\314\001=\370\210\t\275W\264\253=$\3045\275\030x\317=n\032\n\276\340\036d\275!\250\301\275\365P\311\275\037\302\233<\006e\337=tf\326\274U\035\205\274,\222\003>/Q\177\275\210\335\000>\347\332\241\275\234\002\343=C\260\264=\235\366\336=\017v\004=\375O6=k\352\226=\365t`\274b\021D=\336\310a\274\234g\\=\004\321\252\275\274<\233=\250\322\323<\244\205\256\275\377A\264:\352\257S\275\035\372/=^\246\334\275\322Y\014=\217k\217=\275^\227\274\220\000\336\273\177\014\005>#5\333\275\207\270\226\275\307\203\261\274\351_\315\275\271\252\373\275z\362\250\275\372p\277<\370#)\275\005j\215\275p\307\210=\244\241\242\274\307p\021\275\347K\311=I\351Q\275\254\324%\274<\031\t<J\026\320\275X\251\240\275\336/\003>cQ\313\275~\336\006\276\2763\362\275\227I\007>\013\017\005\275d\332%=\221\273\366\274#\024\300\275\367\036\r\276\177-|=\362e\254<\3275\246\275\010\234p=<\250\223\275D\270\003\276\262\371\326\275zx\255\273\362\227U\273\264\232\270\274P\327R=a\265p=\321\371\317\275\035\260\213\275_v\336\275\023t@=,\335\356\274\253\361\236<\377\n\205\275E\277\330\275\023\243\000>\002i\373\275\347\205\346<\0346\215<\272Z\235=k\025\231<e(\003\276\331 /\275\337@\255=YY\216=j}m=\324\232\000\275~h\370\275\203d\013\276_\231\'; q\223=$\373\221=3\034\253\275\2757;;\307C\372\274\003-\237\275S\370\334=\000R\322\275\033\201\202=\311\213\002\276t\256\205=VC\371;\342\223\311\275\023\224\260\274\002.\303=[\305\027\274e\337\372<\311\340\200=%k`=\373\264\"<\272\311\352\275\330\216T\275V\372\257\275ba\177=\254\335\303\274[\'\215\274F\230\\\275_\374\221\275\270s\024<\346\3579=l\232\355=\017\']=\033\340\321\275!\315\235=Y\232\334=\261\300\035=\314{\004\276\2528(=\037\013\364\273\275\267\372<\225i\272=\200\330P\275\024\027\r>\344\236\020\274\337Q\n\275\321\035\203=;j\227\275\262\000{=\005\035\255=\327_\257\275\006\330\340=f\227;=y\033.\274_\215\202=\027\304\350\275\273A\371\275\244\255c\275\252\307X=\222\\K\275\262\363\333\275xT+\274\003\004\374\275\036\343\370=\304\234\366=vLU=\221\376<<\214\3120=L\213\000=\324\364\222\274\035\357@<F\344\232=N\027\326\275`\214\007>Ox\351\274\351\t\236<c\3757\275\373\225\007>\214]\354\275\335]\317\273{\275\367\275\024\335l\275\014\243\320\275%$\001\275h{\361\273\240\002g\274\372U\326\274GF\t>7\033\254\275 {\232\275l!N\275@\235\006\276\027\207\213\275\370\267\202=F\244\311<\200\330\353\274\007\r\014\275\\\374\210=\325\322\214\275\315WM\275\330g\371=B\304@=n\343\337=\212\345\242\275\033\366\312=\177\034\221=\337\233\n\276\346\300\273\275@\363\341\275O-\272\274\343E\327=S\013\236=^\3006\275\340\271\307=\035\236\272\275\246\301\255=|~`\274\216\250\305\275\263\234\321:\367\266\234=\210\324)\274\326\217\300=\377\343\022=A/\276\275_s\004=\376\246C\274\031g\243\275\000\317\003\275k\343i<\240\371\\\274\345/\221=\332\242\210\275\276\325\022=vj\350\275\240\213\245=\327\021\335\274\252\2622\275\234\014\331=\267\006\305<\n\004\203\275]/\232\274\251\221M\275\355\265\320=M(\333\275\023\322\027\274 P@\274\354\376\014\276\337r\010>\032\225\n\276\221i\005>MV\t\275r\351\351\275\325\233\260\274\352\347\250\275\320E\357=\205\235\266<CeT\272VB}<`\316\354\275#\322&\273\272\264\357\275\266\326#\272\244\340\302\275\222\315\335\275Q\332\337\274FQ;=\347\212\022;\003F\333=\003Y\244=\315\031\203=\261V\261=da+=w\326\256\275S\210G\275\377S\274\275\"NX=S\262\r>\314<\200=\353\247\372\275\335}^\275\312\021\370\275\276V\260\273g\314D\274\315Y\013\275[\020\n>fAm<q\227\275\275q\201\020=\2241\224\274\0004\340\275\266f\351=\004\003\010>\t\\\275\275p\232[=\357\277@=\253K\031=P\373\210\275\207DG<yP\202=/\336\256\275\177\332+=\023)\370\275\013\034\371=\275=\333\274\267k\014=\201]\304=\002m\026\2755\020\301=\036\223\001=\273Q6\272Yb\272\275Q\204\221\274]X\264=\006\177\302\275\034\375R=p\353\337=\2654\375\275\r\324\007>}\025\240\274\203\210E=M\301\010\276`A\244=\277\'\003\276\306\342\267=\361\324\225\2751>K\274\354w\262\275Q\200\376\275\204\270\215=v\355\314=\272\370\304\274\306Y\001=*\224@<\014\377\241=\254\221\201\275\207m\316=\001\360\005>r\300\246=J\001\n=\274\226\007=\203(\320=\304n\354=\333\360H<82o=\367L\353\275\233\362\313=U\203==S\213\302=\2734\340=[\305(=\256-B=b\324\014\2763\364\211\275!\275\265=&/\205\275\327V\227\275#c\027\275\023F\307\275,^\225\275\203\270k\27547+<&\030\204\275\230$\r=\035\370\342\275\255\211\301=\271Z\344=7|\376=\023[W=V\024\344;\250\331u=\023\023p=\313\177\036=\306\031\267\275b\266%\275\275\250\357:\370\244Z\275\000{\276=\255\251\256\273\004\010K\274*\213\302\275\357K\004\276\252}\010>\022$\014\274\224\215\227\275\207k\337\275KM\317=\300U\021=\306\217\337\275\225\264\002\2761\305\r\276\311\201=\275e\257%=\000\205\321;c\200\n\276\032K\205<M\376\230=\303\204Q;\2755\316=\030\334\004;\347B\311\275\243\247*=\263\202\322\275\311\000\304=\230\217\336=\206\246\333\273h\354\331\274m\355\372=n\273M=\003\215\242<\023\277\034\275\005m/<+-:=Q\t\242=\204\376k=\032\034=\275\356\001\341<\002Rq\274\002\213~\275_\"u=\322p\013>^\017g<Z\223\005>Fr4=\203\323^=\357^\247\275_\006\345\275\303\244\374\274\307\003\353\275\234\211\023\275\367j\207<\321a\206=&}\313\275\345\351\361=\365t\325;Y\324\337\275%\370\274=\322(\375=\335\304P<=\267;=\217\215\255=\341q\252\275\361\311g=\212~\277\275\354d\251=+\"\340=\336n\370<7;\356<\023\343\306=\271\252\303=\010\326\306\270\330\257,=<D\277=\322\247\002\276\310\222\300=\363\350\330\275\372C\005>\2118\233\274\300d\375\275\263\031\253\274J\223\205=\370\3111=\274\"\343<x\307\322\275\345\245;\275\276\367\233=\023\311\324=E\204\324=\226\200^\275\005N\001\276\241\222\343=R\263\321=\330\225`\275\231D.\275\335_\344=t\2047\275\360\270\316<0\010\354=,\347\330=\212\017E\275\034G\"\274\353\237\001\276\202_\360\274X?\233=\\a\214\275\007b\340\275$\247\n=|`\317\274\202\353\306\274\260\016\034<\236\234\353<\363\202\001\276\325E\t>\252\225\331=\036\303J\275\223\245\337=+\302\302\274\'g\273=\311\325t=,4\304\275HqL\275~\231\343=Ni\240=\n\177\360\275B\306\026=\315\316T\275\004\334\220\273\305_\002\276_$\366\275\370\313\254=\001;\364<\355\245\375=\217a\275=\366\016J=\304m\273=U\335_\275\264,\271=T\322\005\276\212\014\374=\231{\377=\216\313\003\271\201;S\275\274\253\271\275q\315\343\274w\274\033\275G\360\302=\257\376\212=\344T\270;\r\353\024\275\225\t\266\275\225{B\275\004\035\330=lN\243\275\300\246\274\275=\356I\275\213\253A\274\231\234\275<dq\235<?\203\005>\ta\323\275p\207\013>v\032\324=\372\344\374\273\r4\261=\022$\363=*\200\r\276\215\214\312\275\rZ\247\275\235~\317\274\331\031\264=\306s\347<\262K\032=\206e\344=\276H\227\274\254\273\366\275\234\370\'=\005\241\307\275\374J\200\275\3373\331\274\234\223\243\273\rn\377=\367\013\324\275\342\227\221<\0264\002\274\311\201\220\275*\323\202\275 \370\245=?I@=\'\331\003\276\301\315\302=]d\252=\255\325\347<|}\274=\237`\t\276\344\267\356=a\003\306=\331Z\304\274\341\272\263=\231\2627=Z\026\200\2752\204\207=\331:\372=\277=r\275\335I\232=\030|\010\276M4\213=\241\342\261\2754X\342=\024\"\275\275\006\257\007\276\357\341\261:\311x\001=\261r\013\276\275K\247=@\237\006>\026\366R<\227O1=0\n\\\273b\347\010>\257#\014\276\221\227\243=~h\273\275\234\013\261\275k\304\003\276\347o\n=\rk\331\275\377\023.\2757.\334\275\0206\000;n\316\003>\014!\r=mo>\2755\206\216\273]{\321=\261h\220\275\341\270\t=LW\305=\250\255\211<z\213\333\274\323\233\r\276/f\257<\317y\255=\264\006\345\275\225\264\204\275g>\t>F\200\003\276\236\301\014\276\216n\250\275\242l\312\275*\200\350<\261\241\333=m\026\377\275~\331\037\275\323g\321<\301K\360<5\350\3027\232u\305=\274\254\376\275\250\201\206\275W\355\261=\017r <\277e\314\275\3551\306\275\027\214\232\275K\200\227=\0308]\275\257\2006=\242\'\r>\323\372\232=p\006\006\275\027\337F=n}\202\275\201p\023\275\213\221\232=\241\331\250\2741-\336=E.\344<\"\273\005=\r<\270=\036\241\222=F\247\235\275\2747\321\275\221%m=\374\003\212<\030\360\322=zC\256=\221\257\272=m\nM<1\013\260\275\\\352\304\275a\346\244\275[\246\322\275\245\010\303\275\336\366\007>GG\000\276>~\002\276\253\276\330=\337\n\254<}t\362\275LE\216={^\332\275\216\226\023=\262\351\342\275\222A\014\276\034\253\314\274\202%\347\275?\032\254=\240S\000<\024\250t\275cF\267=\345\002\202=\206\217\005>C\206\274\274\"\367\216\275\r\231\244=\223\324\241\275cW\312=#\242=\275\006\232\345\2756\264\023\275\304v\254\275nt%\274#d\256\273\272\237V\275\332\242\314=i\255\361\275\330\024l=\'\213\016=\014\240\347\275l\326\252<\312j\332=.\\\260</\014\337\275mX\352=-/\341\275\210\323\266=\336\354\257\275\341K\217\275\272$\006>\355!\246=i$\315=\227d\316:\202\'\000=E\237*\275\031\002\003<\254\212\375=\302\254\330=C1\213\275\270\211\013\276\356\262\325\2754\223\350\275\343\344\322:\027\366\232<,c\314\275\223\370\304=\203\374\324\275\014\347\005=\035\313\301\275\242\354\351\275/\030\035=\375@\372=\032\372\027=\202*\363<]\002\336\275\204\004\220\274#X\241\275]z\366\275\254(W=D\343\002\276$\217\213=\245\022\237\274\020\230\021\2746\2467=\235\270\225=\263+ \274\372\006\010\276\366\334\360\275$\213\315\275\254t\331\275\253I\271\275T\245\377;\346M\005\276u\275\362\275\016_\246=\340P\360\275\021\257\374\275\206\033\316\2758r\216\275\344\354\n\276\261\327\013\276\324\030\366\274\312\270\265\275B+D\275*\023\014\276\336\241)\273\334,\350\274\t\244\200\275;S\343=\305\311\372<\235,\210\274r\332\243<&=E\275\355z\031\274Yb\213\275\345\004\336=)1\375\275\276\240\277\275M\033n=\344\342\336\275\344\017\233\274\340;\177\275y^\245=.]\r\276\252\304\370=\241V\231:\223\337\331=$v\002\276\025@b=\033\257\277\274\256\362%\275\027\024\002\275\321\305\200=t\311\272=\243z\'=T\001\002\276\013\261\n>B\214\215=Q\371\034= *\314=@1\233=\321m7\275\252}&=\367\371\236<\357\344\355\275\306f\026\275\266\253y\275\\\\\264<\372m*\275\035k\t\276|\r9\275\371\263p\275u\251:=\003\177\310\275\310\274\322\275\363\032\014>\017\312\273\275\356&>\275f\373\025;I6\223\275i\234\202\275\301\267\327\275\331\213o\275\020|\363<\\4\336=\202\213\007\276\373\255\361\275\217\274\014\275t\270\270\275\306\214\301=\\@\275=A\303\312\275]j\006\276\326\370\242:\271\214\373=\323\341\247=8h\010\275\344\223\005\275V\303\246<\225\305\301;\373\235\001\275\354\260\001\276\031\364\211=\025]*=0H\203=\014\032Z=X\262\035\274F5\275\274#\274\004>9\311\342=\364y\350=\326E<\275\273\tV\275\363]|<X]\264<57[<\304\314\005\276\025?\263=H\320)=wv\000\276;\207\266\275u\356\231=O\336\350=\027\273\261\275\375=\330\275\266\216\356=\257\271\r\275\266\232\253<heE\2750\262\t>\035v\314\274\212\274F<?\310\341=\233\337\326\274G\013\212=K\032\010\276\335\204\271<\247&b\275I\024\006\275|\265\204=\362\357\247=r\035\340\275\036\356B=\314\204\305=\274\274n\275\245\274\356=>\365\311<\306|g=\310}\262;D\257\262=]Cz=\264\302\370=\321B:\274\324\336\n>\037\361\373<\373\302\276=A\034n\275\003-\006>&\204;<\003.\217=o\216\023\275\341\225\224=\235p\255=w\035\352<\205d\221=\032t\352\275!\305\n\276\207\225\276=B\370\307\275>\306\002=f\222\031\275\343\314\347=\036\217\310<3\236\263=\244W\005<4`\261=3^f=\20365\273\357n\274\274k\252\362\274\255}\010\276z\231a\273a\036\211=\353\212\005\274\204\3277\275\310\374\373\275\343\237\324=\320\275\363\274\262\231\203\274C\317\320\275@s?=\307u\270\275\273\037\305\275\266\036\036=\350\\\357=E\014\007\276>\301\310\275\201\013\'<!\350\306=\031-\n=`2\242<b\203X=@l\210\275pI\320\2755Q\307=Ss\204\275/\224\356\274\307c\267\275\264\202\304\275\204\347\r=\n3g\275@\263\246\275u\334\r\276\337E\366=\345m\302\275\327\355\005\276\301\223\344<\312\235\321<\276\035\007\276\253 \010>\243\252\350\275\307\231\227\275\200\346\375\275\'\\`=J\251\261\275\230 \320=.GW\275\264\257\363=\350\362\256<W~\t\276\373k\323\275\025au\274\3325\254\275\225\025W=\320\343\247\275@\227\343\275e\351%=\001S\232\275w\310\005\276Q\017\375\275\237\242\013\2762t\304=\372\270\305=dTI\275fU$=s\0006\273\300\020\253\275H\033\002<;\216\227=F\230\235=\013]\370=\376\303Q; \215\334\275_\262\240=-\263\234=\242\217]\274\320\250\016<\262\343\272=\224#\253=:\335\001\276\213,\r\274\353K\314\275x\016\334\275\022\026\275<M\255\313\275s\313\366\273*\351\207\275\001\013\204=\354q\t<\322\031\004:\322\302\270=\204\302\356<*~\304=\313\\\231\275.\\\242\275\003W\263\275}:\247\274rK\221<\223\340m\275\350\331\360=\320\037y\274{\375\254\274\316\361\332\275\242:\324\275\\\222\250\275/\325U=fi\326=\360\366\235\275\237I$<Rj\271;FE\210=\236\267\353\275 \345\352\274\307\363\251\275\231\373\004\2750\275\013\276\277`\241\275\346\032\231\275N\365\356=\177?\354=\3717\252\274\242\016\'<*\371\357\275\346\250\340;\312g\333<\"I\333\275\"\343\276\275\323\201Y\275w\032\257\274\261\335\304=L\213\341\275\367x\025\275Z87\275\334\315\337\275W\020\270<I\206#=\303\325q\275\034 \356<G\301o<\336K\335\2743/E=\356\331r:\235\266\r<=\240\241=m\205\351=b|\224\275R\350\214\275\272T\313\274\205\346\376=\324`\263\274s\325\215<\226\326W<\3532\000>w\344i=\362U\220=\352\343m\275\2375P\275A\320\032\275\031#\335=\231\000\372\274\256\314\010\276\307\343\306\275\204D\265<\372\330;\275\342\351\003\276\'\353\363;\240\254\250\274UNg=d|\206\275\206\022\247=\321%V=x1,=dZ\234\275\327\271\203=*\246Z=,l\306\275p\351\306\274I\276\t>j\305\307\274k\210\035=\021\017[\273\ti\304=\333\032\036\275\342\374\304=m@\232=\364K\353=\3574\276\275\266F\r>\367\320\366\274\234\337\263\275;\230\235\275\250,\r\276b]*\274\316\201\277=\356\035\370=\005\327`=\351\206\365\275\334L\032\274\313\255\003\2769*@\275\027\024\323<\214\270\373\274\345\262\035=\024\247\006>\376c\273\274X5P\275\"D\006\276L\006\203<\250\231\262\275\233\257y\274=\345\276=\372D\345=\307\315\354=\260\323\"=\374h\336\275\252\233\226=%\0325=\265\032!\275A\310\206\274\313\360\361\274\211\004T=\334_\307\274\320D\006>\273\222*=BK\240<\277\251\t\275\216;+=\356_O\275\251\346\313<\305\330\217=\310\376D=q\247\004>Sf\263=\216\345M\275\311\357\000>\024\210\337\275\326\210\003>\270\364m\275\322\0073\275P\021\337;@r\256\275\222c\\=\361A\021;\367\327\374=\304Q5\275c\003\026\275\301\333&\274?M\003>?+\320=\223uY=\201^\277=\334\304\372\275\236a\362<?\260\223<\253\001\217\275\"\353\236\275\t\264\266\275\323Yc<\360\353Z=\tG\373=\217\232Z\275\326\372\357\275\'\037c\275\311\275\001\276\3719\223=K\017\226=\030u\000\276\212\230\336=\027H\353<\276aH\274\234\222\266\275M\270\207\275\n\032\321=\200Dt\274I\277g=k\350\005=I\001S\275!Uf\275\366\356\363=@\272\237\274u\316\332\275\022ZC<\332\336(=\265\220\362\274\206\r\332=\260g\037\275MC\036\274\327-N=\320V\033<\340{\271:\342\372\003\275J\007\226\275e0\320=M\376\272;m\304\354\275\270\250\000>\345FC=Q:\372\274\010\016\036<\027g\215=\215\007\207=\270\275\274\273U\016\033=_g\211\275\353\235\272\2758\222\303=:\215x\275,\252\006\275\317\376\227\275\213[\325\275\212\203\362\275\n\332\335;\365\306+\275S\235\254\275\231\257\345=\235\204\337\275\212\334H;\nx\330\275Hc\371=\267Q\262=\006%]<p\234\371\274&\372\221=9Dt\274 \270\213\275:\360\367\275\251\367)<\354\214\314=qq$\275\212\206\240\275\370\214\025=\"d\211=\266\274\354=\030S\r\276I.\"\275\333\034\332\274\274L\225\275\342\350\360=\022\257\364\275\027=\347\275P>\316=\203\206\257=\337\350\037\275\323\370\004=Z.\314\274\347\024\202\274\335\271\220=D\023\377\274\001N\340=7\3266<\003\363.=r0\377\275\177\237J=\204W\255\275{,\000\276\373+\202\275\'g\026\275\306Y\004=E\360\327\275\003W\356\275\233l\255\275;6%\274O\032\222=\305\317\327\274\025BX\275\351i\205\275\t\315\335=\344\341\\\275\214\261\223\275\203u\\=\022\327R=\274\331\255=)e\212\275\365n\325<<:\274\275\353\236.\275F=\326=f&\240=\010\260\213=\035+\'=\254\256\250=\232\310\r<\233E\361\275\r\225\341=\370\242|\275\205\260\351\275GT\336<D\274\020\274\272[\354\274\221\324\276\275\022\205p\274\240A\260<\331\000\357=\204\"\003=\005|k\275\206\252\361\275a3a=\340a\231=\345D\335=\374\343\350=p\365\204=\225]\014\275\244\344S\275-\013\243=\344\363%\275\303\300\246\275\330\325\033<\312\224O=c\340\222\275\370<\362=\302\302\022\275kM\247\275\334)\033=0F\324\275\355\222\315=\377\313\322<\314\275\366=\232\r\260=J\333\207<\234&\352;!\243\n\276D\362f=\005\3275\275\376F\315=\327y7=e\240\273=\'\210\031=+\344G\274\036\036\253=t\312\007>rJ\305\275z\033u=\311\022\005>m\351}\275x\265\221\275\r\001$\273\004ej\275\3026\324=H\274\306\275oo_\273\307\332\264\275b\274\302\275\367\274\002\276\212;\203\275L\257\325=\353\372\235\274\223\001\217\274\026\322\300=\334\244\353=\252i\014>\021\301\0239\256G\321=yH\326\275\257\301\327\275_T\231\275\302\202\023\2721M\317=BT\263\273\301\326\004>\017\357/\275\362[\013>\260\005\207=\237\215\r\276\2739\373\274\253\335\264<\014\034}<\252\355\004\276\300\020\343\275\253\200\340=^*Q<\ny\240\275\262\336\001\276\376\236\260=Pg\377=\234\025%=\025#\010\276\345g\232<\020\276\006>\244\004\006\276\3327s\275\tk\204=\001\021d\275\261j\375\275\266\332z=<\271\346=\365\\\010\276\215\2113=\263|+=\010J\023=\22666=\324[d\275\356\010%\275P\031\034\275\264J\367=\3142.<\007\037\335\275\253_\t<V^\232=\316|\247=7\036\275\275\242z\321=\307\232\371\275O\213\222\275\026E\322\275Ov\221\274|\230~:\t\n\245=)\245\200\275o\372\004\276\013\217\324=\214Z\007>\331\371\345;\276\225\332=\020\246\003\276F\t\231\275\356)H\275\213\tv=\203\017\315=>\350D\275\266\r\366\275V=\275\274}\2251=l\211\324=\3670\364\275ik\004=d=\267\275\277\302\250\275\303\'\213\275\370xD\275\246(\265=\241T\013>6+$\275\213\031\023=\341\331\376\275wWw\275`\032D\275\343F\037\274\304+\347=3\323\267=\321\006\201=|v\017=\270\262\345\275G\377\246=\034\347\205<\3205\016\2769\2657\275\247\271@\275\210\245I\273K\244\013\276x\266\007>f,\300=\212#\356=\374\301\250=\"\264\276=\243[\225=\"\223=\275]\331\332\274\360zY=\177\356\210=\204W(\275\211C\251\275\223#\344\275\352L\240=?\347\252\274-]\032\274A\366\206<\264\026\377=\274\335\224=\033\327C\274\356.Y<\205\336)\275M\373\364:2\351\264=C\341\255=S\023\005\276\342\244\363\274\264(\005=\357n>\274\207!\253\272!]\024=\234\326\374\275;k\376\272^\372v\275m\256n=Z-\233\275\246a\376=\212\200V=\305Z\014>\024\325\371\275\315[\261=\330\004\226\275\374\301\322=\224\355S=i\367J=\030\021d=\037{\002\2750\333\261<\324o\001>V\223E\275iC\312\275\252\307\237\275,\010\r\276@x\270=\235\014\201\275Zp\317=\021L\320=;5\363=\221\363\250\275O\3766=\366\252\256\275\030VL=/z\303=\334\216\217=i\262\t>\204\346\343\275#\020W\275\034{\000<S\364\032\275\265\300\260=\001\000\326=\367(\362<\031e\"\275}\021\004\276B\364\350\275F\235\260\274\010\251\241\275\302\231\036\275%\201\322\275h\305\200=%\225\234=\327\350T\275\372M\210<?\024\343\275\025\331\005\276\200z?<D\364.<\254\032|=Y\345\240\274\340H\367\275-\022\367=\363.\035=VJH=\362+\325=oq\315<Z\014q\274\\\377\255\275\201@\371\275\027P\240=X\335\323;\273\311\203\274u\213\201\275\332\'>\274$[\253<\006\304T<\001\373\331\275\n\025?\274\313\233,=\352\271\374\272\373\340\271\274\211\243\332=r.\226\275/\216k\275\304U\315\275\317\355\351=L\020\023=O,\203;\024\264\273<\346m\324\273\024\270\003\276u\000\014\276\303=P\275Q\371\325\275\020\240\327\275\3365\307\274\252\335\355\275\330\352\001>$\202\205<\256k\000>G\310\340<\347N\372\274\243\212\014\2751\337\251=\333\002\325\275C\353\013><}\"\275}\335\361=\235\251\240=\nl\006>\351j\277\274\320\312\270\275\347\334s=\315\363\232\275\207\312f\2754\3211=\344\024\035\274\005\245\223=\004\273\306<\316\371\276\275\374I.=3\005@\2758\'\n\275\325\260\317\275?\247\200\275S\352\352=\025\242\r=\r\336\005\276\354\247#\275\3745\026\273OY\007\276\370\356\246:<,Q\275\307\234\337\275F$\341\275u\n\360=\036\361E=2\271\376\273\371\027\355\275\t\215\034\275\205\303\274=\007\010\r=\203\312\346\275\302\366\245\275\247:\205\275\022\025\026=\254\216\216\275<]\030=\220\367s\275\016*A\275\n\340\223:t\036\007>u\t,=\\o\256<\215\342\r>\372\337\261=]\r\257\275KH\334=wD\325\275=Q4\275\n\303\002\275O\257}\275\036\017`=Q\376\004\276\232\345>=5\200o=\221\206\215<\273)\341\275\377>\354;P\231\022;qeW=#\256\341\275=\374\273=\377\321\360\275\257\355\245=\327\004\244\275\000a\322\274\356\264\003>.sR=\205\355\002\2766\306\321<!\357\374=\261}h=5L\271\275R\014\316:kE;\275\356O\362=\315\231\007>h\003\330=9\361\223\275\r\016\037\275\306\372O=\251\366\361=\354\277\342\274\232d\303<m\314\300\275\237\236\004>\214\317\303=\232\340\035\275\024\262\010>F6\245<=\215=\274\257n\307=_e$\274\227\205\004>^\214\032\275vy8\275\246A\214\275\031\032\025\274\010h\304\274\331\3440=\223^\t>[<\370\275\241\352\224;\234\0052=\335\324\206\275\247\017\327=\024\241\\\275\241\271\023\274\251\377\252\275\317}\277\275\024\262\216\275\031\275\007>n\003\372=\211Z\267\275G\212\247=\005h\347;S\217\016\275\\\314\001>c\251\000>\302\013\330=\3023\222=`\017T=\313{\265=\344\215\300\274@\003\241\274\247\025h=\306\262=\275\3076\'\275\200S\335<\3073\336=?\231\317=/\364\305\275t:\315=5 \242=\236\007\016>/a\002\275BUJ=\275\221\303\274\332;\332\274\267W\014>F@\'\275\337?\272=\221\254q=W\377\223\2754:\315:\261q9=\315\373r=F\033\225=\022\032\237\274\023\036\002>\036\203\277\274\270\022\310=\210\227\014>\223\236\007\276\035u\003\276\007\330\n\276\321\025\320<K\343\014\276\214\347\036=\033\031\342\275&\206\275=\251\303\r>\211\233\367=\306\032)=\202?\251\275\372\002\227=\207\224i=\262\220\367=\225\333Y\275\200J\326=\342\001\367\275\324\361\260\275\016\033\353\275\\\362\256\275\276a\212=\024\270\004=\316]\310\275\r\234\n>\232\3518\274\374\222&=\373\277\233\273\346\016\010>\375\222\312;\257\'%\275\342\037\277=X \223\275\261\033\216\273P\347\320\274\014\003\266\275\331\333\004>\342\030\210;\270F\246\2756\352n\274\010\030\250\2759\227A<\203\021W=\\\"\335\275\032\366\372<\346\315\375\275\364\222\206=\"u\026\275\177\347r\275c\372\037=\347Mm=\356\210\025\2754\360\013>z\212\243\275\311\327 \274T\323$=h\036\324=\221L\264\275\253\213\242\274\372T\347\275[\265\r>\261\300\320=\267\320\211=\310\333^\2757\267\261\275R\177\372=!\353\326\275\327[I\275z\006\372=\257]\246=h\357\215\275\220\236\346=\340R\261=\211\371=\275\377l\004>\347;\260=[\354\361=K\227n\274?\346\t>\357:\016\275y\016+\275\336\376\303<\010\364\000\275\201n\372=\247uU\275\215\345\240=x\242\352\275eh\253=\327D\236=\212O\007>\026@\223\275\277\256h\275\342\206\274=\342\311h\275\374^\361\272\210\027$=\227\243\277=\207\322\347\275=\261\376\275\327L3<`[\341\275\326\242\006>6\r\346\275m\263\354\275\206y\260\275\226\272\343\275w2\212=\220\372\367=)\"\236={\275\306:\321g\000=%\370\310\275-[\n\275\214=\321\275\030_\311\275\360\257\001>\311\'\033\274<\244\371\275x\326z\275\035\272\316\275<\363\005>\304\325\246=\021\005\260<@\216\321\274GH\004\276,\310\274<\214-\303\275\004|$=\215\007\325\274*~\037\275\213\2338=`\222\315=T%\227\275\277\347\224=\325\240\245\275\276\rm\275D\336\374\272p\206\350\275\025\240\014\276\355\320\310=p%\020=2q\275=\334)\n>\n\261\000>:\364\370=\224y\232\275*\356\201=\241)\227\274\237\233\207\275@\330\316<)\225\270\275l\227\372\275\002w\374\274\354\301&\275|A\217\275?\224\323=\007\330\r\275]\262\007>\375$\217\275eN\333\273\275j\224\274)\3377\275w\3001\275E\362\301<o\243\217\275g\022\331:\223\342C=\225O\264=\370\243R\275\224\211\341\274\361\"\270=\023\352\246\275%\020\324=\247\227\237<\303\253\206=\301\275\332\275\3227.=\357\343\273\275N\213;<*\000\242=*\325\267\275\343|4\275K\320i=\001\020\323=`\215\006\275\374N\001>\312D =\220\253\307=f\361\317<X\005q\275J\275/=\t\212M\275>\211\n\276\240=R\274\\\006\006\275(\343\347\275\373/\227=\355\262\313\275Y\331\321=\315t\004>\017\212\t>\370,c\275x\276\353=\377A\337=~N\337\275\022~\215\273V\2515\275\250/N\275o\032\013\273\347\267\214\275\321>]\275kh\376\275B\215x=\267\341\320=\021\265\256=\007\243\013>\255\275\027=\271<[\275\344\217\327\275\352\224\324\273`\221\305\275-\n\354\275\261$\300\275r\r\366<\356OK=\237\002\232=\303\247\004>\205\213?=\021A\214\275\014\267\316=\372\306\023=\025\035\t>=\220h<\233\241\014>\341\004\233=\327\363\374=\026\270\241:/\205\010>\212\001\363=\350\010\270\275\261\272\003>\021\235\370\275n\257\360=\027\230\326=#\245\276=\"\216\230\273\371I\201\274\346\277u\275\235\212\236\273\365\240\326\275\304\036\005<\023?\003\276u\300:=\370\361\232\275P1x\275w\2217;\343\216b\275\231\324\023=Xx\352\274Mt\316\275\202\266\'=\023 R\275\212[\217\275\242\035\333\274v\350\336=\"\353|\275]\231\233\275ef_\275\276\232\260\275e\344\204=s\261\245=\303I^=(\232\335=\316\356\013\276\260c\215=\255=\001\276\326X\333=\352\272\371\274Wj\254\275\237\347\360=\034\313\354<\2113\007\276WK\355\275\273\3311\275b\255g\275\307\264Z<\265\231\213\275@\246#\275eo\202<\316Z\222\275\021\272\231<\344\263\240=\247Q\240=d\321Y\275RX\362\274a\211q\275\232\364\007\276\004\262\306<\226p*<\360\371\240\275m\307\234=b\357\270\275-\260l=Ik\305\275[-\276\275X\343\206\275\027|\377\275/\305\022=\300\337\200\275\322\375\3749\'K\374=\221m\235=\311\260\257\275\230\217\\\275\214|}\275\250\205k=\216\032w=\246\336.\275\210\253\013\276o\242\240\275\324\327\240=\010T\325=h\203\r\276\2231\201\274\300H\343\275\306\245\031\275\002\362\327=\026\177\317\275\336\352\267\275\360\361\013\275\025k\322\273r\3328<|y\232=\030h\363=\3354\363\274R\n\303=\010t\274\275\231\014n=\345\227\001\276:\271\314\275\316M\211\275\r \340\275\\\005\005>K\315\r\276\006\003\317\274\3179\014<i\216,=\010\320\277=\274\277\236\275\362T\305\274\nb\252=\216\\\266\275\351^F\275y\214P\275e$\236\275\266)\223\275R\263\240=\035\2272=\264g\266<\262\373\313\274\'\230m\273R\001\236\275%j\222=\013\333\'\275\312rx=\3507\371=\353\341\014\273\230g\n\276\332\370\213=\025\031\262=\372\274\205=\321IT\275\304\276\000=\245\257\252=R\355\306=\271\227\275=\354\032\315\2753VX\275\020\274\372\275X\370\320\271^6\354=^c\354=\364\316\006\276\350\334\257=\030\343\253=B\375\267\275\341*\n>O\201U\275,u\237\274\204\024\t\273[\312\005\274\370\305)\275v\314\370=9\333F\275\035\021\342=\374\275x\275\245\356\215=t\303R=F\025P\275\306\332\360=\235vo\275\311\310\351\275\ny\337=\002\243^<S\235\307=9\216\010\275\373\\q\275\313\352A=\033\222D\274q\215\253\275\265\312\212\275\200*\237\275\031(\333\274(\252\312\275\333o\224=\000\346\352=\321[\004\276\007E\t>T\313\271\275\371\343S=\250e\336\275\'^\265\274\236H\330=\353\256\234\275\275\0008;\336&\251\275\212\376>\275\322\026G\275\2737\215<|\325\306\275\365\'[\275\246\233\367\275\373\261\332\275\376\346\346\275\253\237\361:\303v\r\2764\3706\275\004\026K\272_h\344;r\352\\\275\250\302\372=\275\207==\005\350\\=\241\004\357\275\032\261\256\275\256\363\206=\235\363\307<\2040\352=p-\374\275\201\353\227\275z\371\326=q2\362=\033\215\263\275\205\230\316;\264\326\312\275YH\312\2741\177\320\275\215\n\202=\271\317\r>\036\364\000>\240n\017=/\331\251=~eA\274\335X\252\275U&\200\275\013\264Y\274\026c\340\275\232\310\322\275V\247\207\275\255\2512\275EZ\234=\374mc\2748\264\276\274\354!\t>\200\010\324\275\355 <;\275\343\277=\333\356V\275\021d\204\275\026\201\247\275\213\007\323\274\211f\254=\2408\007\276w\260\331=1\324`\275\177\222\317\273\036\002\2169{n\221\275P\014\276\275\361\202S=4\004\216=\310I\250=~Y\353=\334\035p8K\332\001\276\361\265\266\275(\327\316==\371\351;\367\343~\275\253\333\227\275\254\357\232=2\212D\275/)~\275\305\273\351\275\324c\023\273[x\363\274\332k\201=^V\345=T\267\001>\036\"\370=\370\216\235=l\302\274\275\343\215]\275+\210\3179\257\372\365\275S+\362=|\256\032\275U\312\311=\371\370\000\276S\225\235=#@`\274#\344\002>t\376\264\274?\223\262\275sd\037<G9\205\274\022U\312=\364\365V<\366\275\006>\262\311\t\275\266Eq=\007\320\001>\005\326\347=\242\261\306\274\006\003\027\275\341\350\363=\254`\r\276\367\035\"=\275\255&\274\266\266\327\275~(\033\274\307\211\245\275\\\226\343\275 Q\337=\345@\302\274\240\374;=\275*}\275^\271\241\275\034\'\352\273R@Y=\276\034\346\275\363\235\000\276\337\231\306\275\005\036-\2746\263\250;\001u\271=uc\010\276>\r\031<^ji=\207y\037\275\004\214)=\2059\367=\304\2701=\355\002\367\275i\217\270=\021C\345\275\276c\010\276-\350\300=\233\357\245\274\013\357\001>/\013q=\346\326\361<e\216\266\273\362\013\235=\357\312\231<7&c=u\324\241<ad\023\275\237#x\275d\233\025\2751\221\270=O\321\312=\314wt=<E\343=\251?\217\2759\365\271<\322P\317\273,e\215\275\212\207\332\274\2479\003\276K\207\035\274\213u\312\273\024d\327=\212|\037\275\001\307f=?\277\212\275Wu\023\275\030\216\274\275\013\230\360=x\364\001\276l \202=\301c\003<\275\275\t\276\t$\245=\342\037\252=q\267\211\275\254\014\r=\2453\262\275\333\277S=U\366\302\275\373L\330=3t\236\275%z\306\275\002\233\272\275a\202\302=!\274\262\275\037N\265=\013\314\266\275q\r(<*\313\330<S3];a\210*\275\211\261\244=\312 \216\275\267\344\262=Z\030\005\275\317f]\273q\007\203\275\360\223\312\275\347\013E=\377\227\004\276\267\213F\275h\033\t>\030Y\360=@o\007\275\262\372@\275\332n\203\275t\337\033=+\317\204;\334\022\372=b\352\014>\215\177\350\274\372\362_\274\262(\201=\264(\272:\222\231\n\275\270\217M\275\254I\002>\321&\272<\372\204><EHx=P\233\036=\234\367-\275\n\333\302=\210U\013\276\305\300\t\276\326\354\251\274\327\031\n>?u\270\275\307\033\215;\253\227\026\275v5\322\275\342\370\314\275&d\006>\223X\367\275\320\200\002>\220\207\343\272\030ht\275*\216X=\200\257\006>no\210=\343J\236\274\0239\354=\311//\275b\374\243<\347r\211\274\036_\336\275\357\'q=\242>\360\274\237\265\372=M\212\013\275\255K\333=\306:\305<\362\'\001\276\240m\315<\002x\337<\007\245$\275m1\315<\331\343\346\275\263\350\323\274I\267\322<U\214\353\275U\177t\275\031\267>\275\240\357/=\263\010\315:\312\017\r\276\tV\346\275\233\365\225\275\331A\237=\307Z\331\275\302\200\001\276e!\201\274+\233\302\275\300\341\006>I\272?\275\005[\352;\3207(\275Qa\030=\211\370\337=\265_\003\276\004(\341\275\264\344\013=\365\276\n\276]\305\253\275y,\267=\220\211\257=F\264X=\366>\213\274\\\231\217=\220X\201=Z\301\372\275\004\366\351\275H\"\025\275\312A\375\274K\354\203=\316\356\003>B\333\233=y\275_\274X8<\272\006/\"<\345\024\261\275\226\355\216\275\310\345\017\274\301\331\204\274\333\204\010=\246\307\014\276;\234\206<T\021\210<\374\263\270\274c\\\317=\354\202\323\273\202\003B\275o\332(\275\323\234\264\274\316\241L\275[\335\211\275\007M@\274\334\300\231\274\327\336\326\275\212\r\331\275\275*9;eO\200=\376\305\315=\2377f=9\213I\274q\220\321\275\226\335\265=\214i\245\274#\372\r>\016V\231= \002\224=\332\274\000<a\270\014>`\315\253=\361n\253\274c$\217=hS\356\274\035#\253\275#\270\320\275j\220\250\275\236\221\324=\2424\346\275\345:\231=I6\366=W\221`=\230\271\240\275\246\361\261\275s\316\224\275\207\370\220=\361\232\004>QL\334=\222\317\013=\210B\334=\016C\207=\366\3063=Z\024\357=\031\205\324=#5X\275`\3519=O4\221\275\216\264\357\275\226;\372\275\377\235V=\305&\'=\3770\302\275\016\252k=+\002\215\275\003G\251\274\351]\357\274\356\332\256=`$\216\274<\236\236=E\266\256\275;a\307\274\321\240\327=v\340\347\275n\354 \275\215x\330\274\323\327\234\272V\330\303\275S3\"=`\225\370=\326[\366\275\2547\325=\0262\237=\024y\371\275F(\016\276\351\222\000\276^\310\000>!\2751\275\353\336\227\273\335\2279<\215\342\263\274\262\247\013=\003@\026=^i\271=\001D\312=\220\356\355=\332\005\223<\334\232\325=\244\017\223=\231\001\361=\367s\307\274\230\014\233=\2338\261\275\355\310\344\275/Q\005\276Z|\t\275\351\214\202\275\247i\r\2765\202\344<\227\376\336\275a2\365\274\033\037\372\275\217\246\277=\343\255\306=\362!\005\276\026\207c\274\204\224c=\025\310\325=5\231\362=mf\234;\342\004\300\275)\315\215=aND=\204U:\275\223S\\=\t\232\331\275\363\276j=,\356\211=\252C\201=Vp\207\2755,\276<\3772^=\026A<\275\022\250\t\276\316_4\275\034\307k\275QS\254\275\334|5=\n\243\005\276\225?\270\274@{\t\276#\206\277=\377\035Y\274\337\024\232\275>\n\217=\336\261\272\275#\231:<\321O\314\275h\276\240=d\t \274A,\214\275|\371E\275\243o\375\274\345\275p\275d\312\246=\264R8\275T,z\275(\212\365\275#t\267\274\024\031\311\275\247\340\211=4\'m<\217\227\220=\314B5\273\265\013s=b\371\262=6\020\r\275/\233\223\274\330\256\005\273\313\020\253\274\370\244\230=\2559\340<\305\273\230=)N\316=\205\302\352=\223\215\273=s\334M=\244;o=da\237=C\255\361\275<\326\363\275A\303\364=\202\260!\275\250\365\255\275\272\322\014>f\025\001\276\024\241\010\276\263\266\347=\004\321\':\277\262\347<\305\255\271\274\223u\t\2752\270\224\273\270\250\374=\330u\314=\241\017\r\274\267\321\016\274r\236\010>:\345D\275\302h\223=\312\3158=\013H\233\275\343\235\225\275\303R\364=\220/\343\275\\\203\350=\031@\262=\2346\360=VS\371\275W\320\262\274Qq{\275j\353\230\275\270\003+\275/\316\303\274\317\227\345\274\324\267h\272\327\365\350\275\261\002\005>\3209\241\275\321\210\367\275!0\n=\224\346\360<\311\373\244\275>\266H\275\272\231D<\352\030\257=(\253\226=k7\032=\232D\366\275\025\363\240=t\333\336\274\255\364\343=\253C\331\275\010>W\275O\254\215\275\352\033\273\275\367\323\233<\354\351\363\275\325\365\364=\246\237\370\275e\274\000\2768\024\331<\244b\352=H\272;=\256^\031<\002C\272\275\244\270\n>\307\256\204<\337d\221=\225w\356=\235\026\t>>\302\261\275\214\262\t>\003\334\252=H\255\355\275\026f\251\275\016F\230=R\367\270=f\263\236\275m\265\004=\225\366\275=\032\254y=\302\207v=\2716\014=\025^\216=Mk\216\275\342S\003\276\216\003U=M=\006\276F\353\300<\332\325|=\301\366\256=\203\030\326=\005\305\016\275\326\222\250<\"\027\250\275\273\020\225=v%\340=\032]\376\275\350\305s=\035lK\273\220\024-\275P\243\204\275\025&\377\275\243s-\275\255\265\330=\314\257\302\274%\025l\275\342\264\364<V\n+=m3;\275\006\325\325:\374L\310=\003l*\275Lx\203\275\230\\5=h\027\312=\2123\007\276\267\367\371=P\266\304=S\tN\274\277\261u\275\177+\014>\227\200\220<\272\247j\275\005\255\241\2756\337\316\274\3402,\275\355\3211<\356\251\207\275<(\321\275\224\265\377\275\327Iv<\222\360\234\275\025q}=\031Z\214\275l\300b=)\366k=\311@\203=_3\212<\227U-\274\352\037a<\021\031\207=pL\225=f\356J\275)q\245\275\260\237\314<\030\311\203\275@\024\372=\237\252*\275Y:\016>\017\256<<C\303\030\274U\024\323=\341\326\217<\226\315\236=\200\317\242\27554w\275\326\245\210<\367x\005>\021\025\014>Mc\330\275\331\\\205\273\3318_\2754\267\027=\245\273\242\275\010@\t>\312W\212=dD\243=s\215\345\274\355R\t\276\313\350\214\275\363\030\212=\375[\304=\036\305q\275BG\022<i\320G\275\342\0167<\360]}=t\034\014\276\354A\235\274h4\276=|\244\025\274\203\227\253=\205n\243=\374\376\221=\321\010\010>X>\202=\025\234\n>\322 4\274&\027\213=AI\342\275<X\266=\275\2634=\223\333x\275V1#=\013e\227\275\202?\215\274\277?\300=nOK\2759FH\275\347\337\274=\000Xn\275\244E\344\2752U\363=\225\200\251=Q\352q\275|\265\311==U\000=\362\002\312\275\211\316\356\275\223$\025\275Z\226\002\276Nt\252=\263\033\006\274</\002<\335\234\357\275\300\233\303=\227\\\342=\301\362\206\275\327\037\327=W\221\311\275\207e\210\2754\251\337=?\237\315=0(\003\276\"F\351<\023\354\260\275z\025\272\275*\246\301\275zN\306<k|A=\213\257\216=\032D\344\275k|\372=H\302f=\rz\375\2751\n\340=\211\253\014>cD\270<(P\377=B\262\003\276\335\254\031=\265\234S=\360\311\007>\000\231\316=J\026\003>\263\353\300<bK\266\275\334\265\306\274\035\310\241\275\t,J=\247\350\357\2758\240\216\2749\264\000>\251V\203\275-\336\353=h\266\374=\\:\n>>G+= =\232=\240\016\212\275\3540\r\276\264Bz\275\"\201\345\273\211\220L\274\236<\361\275\217\252\332=m\335\000\274\031\227%<\223\233\002\276n\t\302=\362AY=\323\266\211\274\211\367\363\275\235\225\033=\250\317\221=\201\204\234\275\221K\237\275\r\006\330=\336\302\020\274\215\312\270=\037\363g=@\217Z\275\205\246b\275Y\2428=\001B\351\275"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\274h\256\274\330\233\207=2t\322<\320\262\245=\315\231\177=\311\232\273=\234s\255\275\274.\302\2755[\373\275\254\372\r\276#\203@\276=:\313=\257\255Q=i\373}\275c\022e>\314\225\016\276\333\304\340\275\204\216\240=\360|\031\273\240\234O>\203\261\004>-\362\210\275\256A>>Ne=\276\240G\246=\256=\247\274\371\317\321\275{.\032\276s\301\t\276\305\363\225\275\225%\021=g\226*\275b\000C>&s\360<E]\035>\270\003*>\031&5\276\211s\335\275\253*Z>R5=>^V\322\275\326?a>z\245\031=\317A[\276\311\346e\275\307\317&\276{$8>\206^\263=\322\217\010>\375\026\030\274\210\312\363\275\006\346\373=\372:\010\276\303#\002\275\373\336;\272\225\270\010\276\rz\304\274\360\376_\276\023\357\333=]\300;<+\rR>)\312!\276Lb\027\276C\214\">\310\333(\276\312\317<>\330\031;\275\277\353\257\275q\316\263\275@1c\276>\302h=\2407\274\275\251\242\017=\374 \024\276\274\026-\275\001>3>\266\364\330\274\272d\226\275\311\370\002\2755\265\301=1\201(>\274\201\002>\234O\374=\352\216*>P\240\031>+\367U>\005\266@=e\252\250=[\257A\276{\224\351\275]\002\325\275\233\300)\275\343e\t>\205m\004>\364?\367<\001\367\302=\206\302J>\266V\361< 8\022>\375\211X\276\326\357\030=lME>\2531A\276S,\274\274&\354\013\276\322\005H>A\321\252\275\201{,<\034\337b>\200,8<E\376\022=&\262\030>\350,K\276\nd\032\275?\342$\276k\360W>x\364\017\276w\3418\275\240VD\275\217\353\245\273\370\346\274={\277I\276\246\200W>\004^\035\276\313\003(\276gI\365=\206M\273\275\004\254\376=\262\034.=j\367<\275\030\263U\276v6\004\276\252\003\025>\266.r<\367\253\020>\303\020\330\275\225\356_\276\343*\356;\366{\201\2751I!\2760\307\277\274\2260_=n\026\275\275\306\312\010\275_m\037>\016\221\006\276\024f\217\275\010LR;\253\226\022\276\237)\230<\021[\355=^\242\371\274\216CM\276\326\031\303=g\321\010>\324iW=\361\013a<\266\260\250\275\005h4>\3765\276=\326\271%\276\021\235v=LoN<\373\034a>\204`\364\275\364\2473\276\036=\020>[Q\244\274 \355\255=\235\342\357\272\317\236\301=\"\356c\276\311\240\237;\370\037\025\276\020\3539\276\312\360]>\303\347\206=f\321\020\275\320\316`>A\366\246=1\254\254\275\230\303\017> U\255=@\027[<]z!>\267f\025=\313JD>\304\347V\276\214\372\253\272\2131e>\231\371\006>\217\000T\275\321\262S>\302\311/\276\233\230b\276$\206N\276<\265K>\332\266d>\311d6\275*\361\300\275D\031M>=\243\355\274J\023\357=R\212\316=\302\354\263\275\003<\002\276\317\006T=\275~,>\006C\263=\234\311\373;\366\034\005>q\322Q\275\336p\031\276r\246j\275`\227\312\270\225\242u=\354\244\031>\035\355\363\274\276E\007>\013y\240=\017^\356\275\252hd\273\311\224\233\274\016oh\275M\233C\276\352\351 =\375\224\212\2756*[\276E\301K\276\370\346\232<\363\013\336;\003\245\270\275\222\027B>*+\305\275\312\230=\275Y)\002>\232\257\024\275l\237F=2\252^=\312\007\341\275~)\232=[\251\020\276\235)W=iS\275\2757\027\322\275\325\215\262<^\271>\275\241\211>\276C1\004=S\020\'\2760q\r\276T\005\327\275\233\201;\275;wP\276\371\326<\276\246\224P\276\225\265\301=H7C>~\2421\276\020\333\022\275\350\267\023>\341-(>\344\326C\276>\014\004\276\317\312\341\275\203\370\241=\204~O=\036\315*\276\367\225\362=\214\205<\274a\200(\276\2519D>vPS>\321\217\314=8\005.\2752,R<~\030\370\275\263\355^=x%\361\275\372C\020>Y8\314\275\257\342\001\276\363G\233=Ld\310<\241O2>Q\020:\2763\232\002\275\000\345(>S\336\360=\260\2043>\235\0138=%\010\202\275!2a>N\033U=\217C/\276\241\2121\275\013\"\025>\016a\273\270\332jV>\035\275\261;R\2231>\223\343\023\276T^<\276\032U`>y\251\r>\217\024e=S\250@>P-\"<\r/\240=\336\200\n\276?\203?=\027\375\304\274\232\213\357\275,\2023\276 \224\224=l\331\360\275\241\350\002><\250\025\276\036\370\310=\374\317\\>\225\353n\275@\320T=\035\251)\275Z[\277=\225\rK\276\255R+=\032\2609>v%\022>\352(8>\334\022\021>v}\037>\307\234\311=\301\344*>\247:\001\276\020\345\247= c=\276\037\224G\276\256FR>7\325,\276\347\016>\276\217*\256\275Kh\375=M\3278>\3236\270=S\177\246\275\227\375\2629\014\257\367=\323\036\374=\240aJ\276\245\026c\276\333d\366\275\304\242\355=\321^I>\031\344\025>\262\003\203\275\"\343\002>\205\353\315=\304G+\2764\300%\276\254^Z\276b\205\020\276\023\221\203=\373)\210\273\200\322\332<C\330\335\275V\035\002>s\205\220=\335\213.>\363!\014\2769\370$\276\356\373\267\275/h\035>\000\357\277=\r\240>\276\225\225\243<\223\376\t\276\022\3511\276e\2337\275r\327N>\202\352\313=/\n(>\027\375\032\276N\216w=\322\240S\276\357\262\227\275\340\251\013=\32446\276AT\361\275\314\'\356\274UI\006\276d\312\014\276\245\316E\275\306\210\022\275=\346\220=8\244\037=\004B\342\275\313\230F\275\370\031T>\317\2026\275s\024\262=\262\314c=PC\\\275\034\312\355\274>u\241\275\244n\350\275\266\213\344\275\231\013&>G\367[\276\375|C\276\326\353C=..>>\223\223\034;\304W\214\274Z-\232=F\273\027\276\325\316#\276Bd\016\276+?\214\275&<7\2764\027O\276B\243W=<\n\006>\024CP\276\272\361\274\275\340\230\226\275\016\262\354\273\373,`>\000\276\367\275A\360g\275\240\013\013=\201\334?\276\306<2>\373\340\024><\0165=T%X=\001\337\325=\334\344L\276\20636\276\030\231\006\276\345~\026>\257p\256\275\311`F\276gi:>\233\351\237\275\212?\027\276Z\020\t\275\355\337q=\214\3573\276\305\255\024\274\210\003?>\307\356\035\276\017\220\326<\332x\345=i\016\356=~\245\252=\213\232\365\275\344\002\024>\030\247V\276\277$p<\266\372\223\275\341jL>\277c\223\274a \354\275\324\265R\276\235Pi=\234?\026\2767\270O\275X\022,\276\262\350]\275 \000F>\237&H>\375\344\001\276(\333+>\335:\033>\232\031\031>\221A\'>\320\307d>\260P\310<\271\034$\275\376\375(\276NA\323=\212\3041\273\004E\r>\241\230\274=\006\335\220=\221iO\276:\342\265=cd\334\275\256\022!<\244\262\320\274\361\005\021>\265\354\361\275S}\021\276\253\010@>I6y\2751M9>\013\354\333\275p\321,\275\036\267`>\200\265\310\275b\344\257\275\353\355!>9g[=\311\263\342=\321\266\233\275\004\203,=\230\245\r\276Y\343\222\273\365\331\034>+\373\370\275\nTI>\025\372\006=F$\231\275\203\302;>H\277N\276\377\277$>q\206D\276\246\037\310=\212S\217\275\rw\314=X\021B;\316L\214=\250 \n\2762\r\n>\243\327\372\275\326\340\340:\312\304\305\275v\263\340\273\224\237\002>\311=\236\272s\356\007>\247\336\034>\273\203*=\302Z\036=?t\351\274\333\344\235\274\303+z\275f\343\031\276j9;=6\224#\276\245HT\276hg\301=\326v\377=\304\005\006\276\360e\350<p\241i\273\347#5>w\2007\276E\311/\276J\302\277\275h\257Z\276\036<\364:h\217\303\275e\002G=\036\245\006=\221n\000\276\210\3257>l\013Y\276\276\276L\276\364+6\276(\341\213=\370\372\310=i\345\343=u\035\020\275%\034\">\342S#\276\345+?=K?N>M{\035>\331\003\305=L\231\r=\322\365\004\276Gq\242\275\300Ub\276B\363#\276i/+>\366O\014>(\237O\275\001\217\351\272Q]\274=C\332\031>\276\004J>HD\234\275\025\346\214\275\217]\002>vF\001>\227\2732\276\023\374]\276>\210\023<il\020\276]\367#\276\322h\343\275\261NK>\255\241\021\273\265\325\265=\200\252\014>\236p\213=\215w-\276\346[\355\275\225\322*\275\244\233\255=\263\240\263\275a\276U\275\002\337\217<36\267\275c\311\271=\273K\021>\n\332<\276\240<\345\275G\013\304;\376wU\276O\2456\276\363\355\">(S\313\275\241t\034\276lm\220=!\262l\275\360\200\310<\350 \277\274\347\014\230<;\225?\275\003\276\007\276\315Vb\274\261KG>[\370\367\274\226f\247<&\026O>:\230\035>9\267A>\"<\017\276\333KA>\247N\313\275\315\230T\276H\300\301\271\231g\005\276o\034\220\275\220\333\233=\304\254\032>\235\331\032\275dJU>j\217\321\2750\264C\276}\274\025>lP\020\276\267\256N\276\370d\022\276\240(\025\276\245O\217=\242\306\003\275\013\364\337\275u\007b>\017\306*>H\216\213\275\356\263f=%\374\016>%\275@\276k3^\275\252\n\361\275iJ#>\016\2623>\203B\004=\353WT\275FC\010\276\276\272\244\275\021\026\217=\310e\361\275\013g\033>\002J\201\275\031M6=\326\'O>X\270\024\2768\006\r>\225\275)\276\233\202\275=\300\302\250\275~o+\276\244\347D\275b\311`\276\234*\214\275_\177\033>IK\034>v\275c\276\207\220A\276\347\026\273\274\227Y\310=6M\264\271*B1>\301\223\017>B\000\267<\355\035\032>\026\026\204=\254\276\025>i\001\352\275\271\374@=\033\2432\276o\227M\276\232\250\310;e\n\224\275o\207\275\274T{3\275\273\304\"<\215rB\276(a9<uI\010\276\262\245D\276\033\263\027\276\014\372\034\276\357\377\310\275\006\2457\276\311k<>\027\240\311\273\272(\020>\252BF>\252\365\327=a\0003=\020\223\016=w\366c>\210y\321=Uu\020\276\237\360-=|1%\275\340\017Y>\033!\032>\241\300\016>\347d\n\275\317\3579\276\256\347\340=\305\375s<\263uI\276\353\257]><\356.>\242\321\205=\366\350\305\275\t^\027\276)G\200:f\313\230\274;\254\262\274\0261/>\026\222R>\356h,\276\366\302\263\273P\004I=p\330\326=\315h\364=r\210\364\275\353\016\260\274\224\223\224\274MC\010>\305=\024\276*\275S\276\006\265i=\200\254\177<\205\236\032<\242\360,>\215%\014\276r\246%>\274\367\222\275w\265\322\275$LZ>\366d\001\276\325\032\251=X\323\'\274\342\340\240=$\"\007\276u\276\301\275z\357\007\276\2615D\276Y\237\004\276\216\220\032>O\224\033\276\016\tA>\007\207/\276\227\210>\276\241F]\275\036x\210\275\002\2128\276U\340\261=wq\257<N6\261<\353\2256>\036Q\177\275\271\010R>\370\264\000\275O&\244\275\324!\255\274sz\032\276\365\340\302=6w6\275\372\362L\276y/7\276\034\213\313\275\225R\211\275\266\254\021\275\275\376R\276\203\253a>\336\214\007>\013\0053\276\350\246(\276.9W\276\036!C\276\323\004\223\275==R>y\372[\276\226\340d=R\"|=.|\337\274\277|\006\276\265\342\036\276|\033,<\372[;>\212?[>\275\217V>\300\237|=\270[\367\275\261\205\320=~qR=\214c(>z\252\027\275\226\210\330=\n\347:\276+\355\363<\037~\346=u\305\022>H\261\316=\3026\314=J\222/\276\235^\317;?P\002>]}\\>\210\031\026\2759\322\027>\242\314.\276?\003>\276\325\225\355=RT\226\275\034\335q\2751\340I>\344\236\341<?I]>\025n\255=\254o\271\275^\307`\276\363O,\274~?F\276c\345d\276\262\222\316\275\271\257\271\275\004\254\202=\373\201\332\275\225\250\016> \344I\276\0247\315\275\375\206\342\275\364\314S>\203\305N\276O`\352\275\211\357\001\276\264b\001\276\245\256\033\276\242\003\033\276~$C\276x\003-\276\036\034&\2767&:\276\"\317\341\274\033\031(>\261\310^\276S\343\024>?\340\334=\303\252\321\275@\326&>\363\362Y\276\253\263\257=IBJ>\2741->\374/:\276(\275G\276\336\260\020\274\033\367,>{\272\222\275\021\374Z=\254\363\024\276w\253\336=\373A\322=\374\256\374=l\340[\276\245\225C>\256\370\032\276d\317\305\275<\364Y\276<\023\025\275\035\377\237\275\350\027d\276\271\371\006>\205\016\017=\202\0303\275\355\2727\274\024\013\306<\232\261\310\275\237 \345;\324\353Q>\322\222\026>\222y8\276\217i\203\275YE\013\275f\r\257=\256\005<>\033I\212=\361\t!\276_\222\377<>\342\362\275Go\027>)\223\037\276\344\275:\275\203\317\321=\352jV\276\221\243\332=.\250=\276\323\301\224<\336\372\362=\035\307\010>B\3617\276l\010\233\275\226\2130\275\344b\251=n2\352<\247\023\350\275\326sR>\244\316w<\323\000^\276qX\037\275>\007\031>\r\007\006>\341~V>\364\343X\276\333\341\262=\207g^\276\007P\\>\277\310\366=\247\371\246\274z\037\274=\031\270\203=mjB>N\331\023\275\364\272]>\267J/\276\367zG>{w\361\275f\230\240=7\351\355=\021\004\317\275\366\035\004>\224\rQ>5\212\305<ZC\256\274\214\217M>\0274;\276\357\304L>\375\007I\276\272;*\273\022\004S>\013\t\255\273\213y\233\273)G\231\275X>\017\276`4\377\275o\\Y>o2\367\275 \335B\2766\2265>\2446\035>\272\371\276\274\237@E>\272M\224\275\230\310I<.M6>c\357\r\276j\303\022=\317\032E\275\"\335\032>\367\374Z\276hV\300=\227\236J=\007\026\005\276\356hB>\362\277E\274\371\016\036<\232?l=j\034S\275%\000\226\274\016\242n\273JMF>\245a\007>\272oX>\225\000D\276\260U\245=\330AZ>k\2322>\n\342\035\276\304H^>=@\017=\257\"\002\276\321\311\036<Cz\030\276\366\270U>\231d.=\247\tP\276/Y\313=\2252\033>\362`\005\275\260l\245\275\032\337\337\275\344y\205=\360\251\033\276\230\377\346=\362=\035\276\223\311\203=\277&\340=\tl\t>\3246K=\026K\257:\371?~\275\352y\223=\372I^\276z\343\006>,[`>jl\332=\336\365\003\276.\200\305<\'\017\372<\\v7>\324\001(>a\347\210\275\326f\014\276\3017T>`\014M\276\\jF\276L,D>Vl\332<\006\371R<e\354\237\275\024\2664>4M%>\316V\313\275\234\237E=\003X\342=\016\242+>\350\247E\276\340\235\266\275\245T\262=~\334\273=\314\340?\276\313)M>\033\252\t\276O\253\334\274\245\rM>}\0221;\221\335\013\276\025n7\276\227\222b\276\227R\024\275\304}\r\276\016\022\234\275\326\213\215\274cH\202=-\035C>\236L\213\275\276=6=\300.\t\276\371y\246=\331\337\323=\026\"S>\037\352\034>\373\260\357\275`DL=\013A\253=HM\020>\000j\250=\024\"\331=\326\032\002\276SJ3\272\305Oa\276\376?8=Y\236\036\276\231\000\n>Xu!\276\273\\]\276j\242\343\275\353\3027\276tMU>$9\272\275\324`;>o\334\332=\201\337h\275;\210H\276\031\030\034>\264\211\263\2743\310Z\276\225}\272\275\013\247\343;\034ZA\276;J\252\275\355D!>\024\270\305\274;%%>6\230\367\2751\322\036\276\353\242\276\274\3174\241<\201\375;>\314\2745\275BuG>\025l\033=\346\326\025=M\317\254\275\315#l\275\257x\032\275\361\355\204\272ot\316=\356 \260=p\273H\276H\334O\276sRL>i\364 >\310\237F\275\214\352\177\275\357U4\276\254\233\242\273\303\317M=s\235\203=\362\312I\275\236\207N;7\\\t\276\221\014\200=\311\023\010\276>\251b>:*\253\274\002+\022>\217\005\340<a\034\356=\364\364\007\276+\346\365=\003\3720>0w\340\275E\0228>\210Q@>\205r%>\317\205Y\276\237a\t>\\db>\267\224^>\024\230c=\022\'\n\275\237\006\027\276\224~{=\177\344\347\274\334PG=5);\275x\334P\276\205\375\343=w\3300\276\303S\313=\210\272\367\275\346\0020>\\\316U>U\377\'\276\374\230\231=\312\367:\275\"Ph=\305\363K=\335\350\022=\256:_>\251\240\347\275b\002;\275:E\271\274OK2>o\375H>\025\207\340\275X\n\256\274\210\277\037>2/\336=K\227\216\275\315\217\346=\335v4\276\243\244\302\275tP\305<\373\227\035\275jS\001\276\"^\021\275\235E\026<\344\364+>{4\301=U7e=z\2323>\023\271\340=\275\310\t\276_\210#\276\362\037M\276#\274a\276\270\334%\275}\345\360\274C\306X>:\204\030\276\224\320\022>~\240\360=wM\332=\276\364#>BK\260\274\217L\262\275\270}\033\276\340vI\276X\374\030>\333}\226\275\026\351\334=\370\306\202\275\321\273R\276\000\245\221=\221\364\016\275C\'A>y\033j\275A\225\270\275>\376\314=Q\363G\275\177\245\266<\205\207\001=E\205\037>\332\241\204\275\2517\214=\221md>{\277M\276\014\317\033=\333Z/\276!=\242=%\214\271\275\251\257,>.\265\323\274$\254\355\275\034\327F\276\332i\223\275N\214\016>\031\277\014\276\261\270*\276@\375\007;\231g\005>\333\035\367=@\006F\276\332\036W>n\t\321=u\304\034\276 jB\276$\014\364=G\236?>\247\367\277\275VS*\276\227u\024\276\235\023\367=\373\303H>\325O\033>\t\311\367\275)\300]\276\237K,;?;\021>\327cR\276H/\016\275\3223\006\276!%\037\2769k\336<.\301\267;\314\314@\276\316;)>\3679\273\275\3416\343\275\344\251_>\016\201&=\374\315\216\275vO\204\275I\360\331\2759\361\017>)\257\024\276\003\234\223\275o=K>T\261)\276\032\251(\276\024\317\017\2755\267G\276\372M\372=2t2\276X\207H\276\014\343\006>\213\341)>\276\037\027\275|I\010>\372\2253>\367I\317;\236o\255=\206\240\317\275P<\025\276xt\t<\224\0361\276A\306\270\275*s7\276\245\350\223\274x\215#>\025\023\375=\0367\034>\236\362\305\275\357M\026>,\274?\275/\246\002\274\263\344\265=w+}\275m~\347\275\307+\250=O\334\021>\365 \312\274\206\002\362\275\374Ve\275qc\336\275\301\362F\276sd?>\252\277Q>\312\257?\276uC\306\274\211\3630>\233\241\226\275\314\351\030=Z\304+\276<\005_\275\243m\217<D\236a>\271\253\252\274\001M=\276\010\267\r>K\361.>\262\034\214=\257:\311<\005\374\311\275\023\'\304=d\354\227=\007\016\331=\325\370G>\305\351T>MJ\004\276.v\243=\272\263\261<\363\006.>\3366\241={W?>\013\025-\276\225,\005=\217rR\276\277\326\303\274\257\021\242\275$\177 =\362N$>\207\245b;\270\237=\2762/\326\275\216,Y>z\370\257=\343WZ>@\236\364<\'R(\276\252\245[\275\330t7\275\024\301;>W0\223\275\230\306Y>\326DQ\275\360\223Z<\204\200\n>\362\3170>A^V\276\357\"V>?\200\245=H\003:>\257\364\005>\2160R>\340\250Z=\221\334\355=\273\340\260;E^\022>\361\244 >&*Q;\021\370\344=\340D@\276\000>\304=f\rk<\232,\327\275s\352a\2760a\\<\330^\031>\207y\025=\214D\005\276g\251p=\224\356@>\231n\232<\211\230O>XR\032<\206\020A\276\252\314\035\2767qU\276@hQ\276%\230\000\276D\201P\275\252NR\276\365\251H<\021\327\302\275j,J>\006\354\t\276\016\206\027\274K\264\n\276K&H\272\007\023]>\205\241\030\276\017O5\276\203\245\201\275\276\216\257\275\304\345\010\2760o\250\275B\372\001>\003W8\276B4Z=\022\266(\276\236(\036=\307\332\256<H\202D\274`l\010=\366\215\224\275\\\025\317=tgF\276\334\366\223<O\013\374=d\023\261=n\302\007\276P\353:\276q\035\341\274\265\232O\276\025\255\270=%\000s\275z\032\022\276\207|\005>:8\335\275$\r]\276\316\300U=B\265\327\275q\215\326\275\013\0311\276[#\353=\374\271\3107\020h\256=!\017$<\337\301A=\264\333\225:\302\334\266=\254\177>\276\232\256\275=\215\2621\276\317\261\242=\"M\330\275\355\257)\2767\037\330=\241\355a\276\347?\010\276\n\302\274=`\177d\276yM\023<2\255c>\376F\017>\013\372\017\276\302\007\n>\350\365\332\275q\326\034\2763g\013>\255\271\034>\357e\004>e\037\242=\352Z!>\346\002X>\253NC\2750\304I\2762\037X\276\201\2612>1\253\374=\014:\003\276\035E\014\276\316\235\"=\r\362\235=\217~\361;\313\265e>\032W\003>\323T$<G\305\347=\315?V=L\035)\276\267\0241\276rCW\276\343g\310\275`\304k=8\2349>\006\370v=\317:\014>#\316\316\275\200cf\275\323u\233\275?GZ>z@\345\275\322\2160>^@\035>\366]&>r\\5\276\222\\Q\275\207\262/\2761\306@>\232\367\371=\373\365\034>\232h\006\276\232UG>R\026\203=)m\253\275%\225\264\271`\253\315=\233\201/>\301\215\266\275^\322\005\276\277\n\256\275\030\027\331<\243,R\276\255\355d>b8\227\275\003V\014=0\3070>\010\223};<\324,>\373\246\226=\215\266\037\276\303\356\372\275]\201\230\275\367\2473>\273ea>\364\240\206=\244\260U\275\220\346\271=\023M\245\275q\305O=5\262b;:a\013>\210bM>\010\344X>\'J_=\370\337A>\013\376\244=\375\006\020>\373\316^\276\225}8=\"{\036<\237\227`=\332U\272=\377\223^=/\0062\276\275|D>\252\034\243=\023\331\006\276U\256\247\274\275\335g=\023\006\315=\037\207\254;c\236\026\276M\305(>\267\306\254\272yk2>)@\271\275\235P0\276\006\224[>:\376=<\255\234\203=p\333Z\276\212\240\016\275\333\031\241\275\304\320\324\275\331\217s=&b\202=\236\n5>W^\032>\362\366\355=4\335\347\2757J\260\275\337\027>\276\n7\026>\262`\367\275J\370\232\275\302\034\021=8T7\276\271\265\335=\271,\303\275\206\177G>//\002=\224\032\205\275\334\350~=\202\247\235\274|RR>\313\211\236=\227\3050>\204@+>\025\324\005>8A\343=er\270:\332nB\276\243\3657>\203m\207\275z\n\031\275\232\333\301\275\201\234/\276\215\005\000\276\307\250\022\276\275\375\202=%{\356=o\3726\275\322\311\004\276Z\n\253<M\375\027\276\363\276W\2768\204\003\276\216*<\276\263m^\276\\e*\275\367\326[>J_@\276x\265\235=:\247\3059\320\205M>\343\036+\276o\216\007>\024a\371\274\250\256\200\275\216c\306\275\177\352\344\275V\3736=~\006\335=\032\037R>O\270 \274\352\344\001\276\331\337\334=\031k\362=i\374Z>\355L@\276-\220\266\275{m#>{x\340=\302 ^\276kW\037\276\3651\257\275Mp\007>G\354\357=\271\305\013\276\345\204\205\275\257l<<T{\313=\265\243`\276\350\376\333=5\0273<\335\371\302\275]rh\275\332\365\250\275\261b\370\275\261\201\310\275X\336p\274|\201B\276\260\222\355\275\010\317L>~\220\265<\0052\022>b\027(\276\260\216\236<@\265_>\2167c>\317[\'>\216<\357=\310\234\033=\342\2109=Y\222\207\275k\211\333\275x\3011>\231{W>\302\037\360=fp<>\306\206\r\275\014\036\032\275\036\310\221=\336\200\033\276d\376\317<\364?\027>F1\024>\346\027\020\276m\261\231=\220\257$\276\n\027N>A\332\t\276\t\246.>\312.\314\275W\370\366=-\230\311\2758\241\262=<\256r\274/\234\351=?[<\275\025\000\217\275\030\216\222\275\033@5\276E\314:>z\207==L\224\'=\247\004\347<\233U\222\275\307%\006>_vR\276\033/\363=\372\350A\276\010\363\226\275\217h\203\275\211Ae\276[\274\342\274(\3302\275\213+\016>U\307E\276\300\030C>\365\201\003\276D2\272\275\003\001\373\275\350\217\327\275(\303&\276>\317\n>k\200M\276\326pD>\334!\033>\255\224\n=\221+\336\2753\353\256<\351\270\266=iV\017>\227O\370=E\000\333\275\212\201]>\347\0223>\261\371=\2754\250T=B\275C\275\2503\'>\303\220\211\275\216\n\311=\371\n/>\377\352\347=]0\200\275\036\310\036\275+\342\r\276\234\305\031>\317[\035>S\\+>\317\037\320=\323\253\031>\235\253\017\275\002^\214\2753\'^>)\267\350=\320\331\016\275`\025P\276\330\262\336=c\331y\275{k\026<\320\214%>\2539\201=\031\213\331:NB\377\275FG!>\227\277\'\276\330w6>Qq\366\275\356\345\255<\007\311\213\274x\220\346=\325\322?\275hx\002>\247\000\355=\325|\227=\254,U>D\274R:\356\277\214\2758j\313\275\377\025\242\275/\367;\276\205l\216\275\326\321\230=\307o\205\275t\360\322=\336\034Y\276\356\307\367=\013\246E\276\335\025O>U\346I\276\265\031\020>\023\336\t\276X\307I\275k\306\005\276\205\214\226\275\3575\225<k\241\'\276\265\274\257\275=\021\367\275f?\366\2754\343\362=\310\336\350\275\004\254\032\274\231b\t>*\335|<\035\222\031>\312\254\272=\004\357?\276a\001\024\274~0D\276\354\331\333\274\\\207\330;\177\006\351\275\337\337\275;\201\333\315<LLN\276\212\0003>\353\272Q\276nJ\374=/\034<\276\202Z\313\275\331\257\272=\007\031\035=h\334F\276\364?\351\275\344\317[>\273\322&>Rk\024;k\010R<FB\206=Z.\266\275Y\005]\276+Z\252\275p\353\214\274\372\350h\274\306\212\006\276\026g\233\274\364\367\021\275\234\276\276=&\026\324\270\263\003\020>\315\214Z\275\30022>\312\020\035<\303\220I=\017\312\304<ff\004\275\237@6>\326\262\270;\340#I>B\3750=\337\262\324;\335i\335\275\2549Y\276f\226F>\017\260_\276F\020I>g\001G\276\343i\023\276\306\204X\276\324S\033\276\237#\261\275\253\352\'>W\2002>T\376\244\275\207 b\276\373\241\037>\354j\220\275\333\341&\276\032%q\275\361\325*>t\005\236\274\005z\346\274B\007A\276\233~\327\275S\266\322=\357(\367<\002SZ\275\232\002\000\276\361z\225\274l$Y\276\356(7\276\250\3378>M\252\030\274HX\251;u\334E\275\227e\251<\2151\001>\364\300\230\275\352\231e>u\177~=D\314\024>\276\341\273\274\3623\013\276*\226_\276\224::\276a\266\021>KA\353\275\344\371E\275\244\224|=(\352\376\275\270s\354\275\302\305\223=\271\301\366\272a1\336\275l\021;=w>^\275\216\317\374\275\032\343\037\276\032\200\251<1\036\240\275?\027\304=r\013\324\275qrd>\005\014l\275\362\201\\>\234/+\276a\276V>\255.\205\275\337\360>\274%\210e>^$\312\275>O\306=\036\347L\276-~\212=A\',\276vk\223\275\267-\316=\013uP\276&<P>\013\365\367<b1\006>[t\251\275\'\006\216<\3159\321=\321>\264\275\345/%\276]\326a>V\362\003\276\325\216\031>{W_\27670\200=\214m\370\275i\322\305\274\203=\310\275\225\337\223\275f\225\255\275E\0172>\010\330?>V\277H>D\177\006>#\272a>\221\254\035\276\034y->\r`\355\275\246\025\337\275\327\\\232=\241\306J<7\215\345\275\002\216*\275\233\016\225\275\243\242\201\275\'J&\276\336\'\260=ZC%>a\322\265\2759\266\020>\241\363\256<\357\330\037\275@\354\355<\202%\002>@\221\014\275\202\021\r\276\262\203\233\2747h\212=I\320\001>\305\257&<\266\347F=\250u\307\275\ty?>W\035\026>\246\241I\276g+\311\275\034\227\216=L\227\032>\325\354\263=\253S!>\333<\\>\2062J\276T\300\221\275\010\003?\276\320\325\037<0v\"\275\224\206J\275\233\311c\276\361\010+>\254\206\261\275\320\323\327=&\312-=\372>\352\275\027\256\263=\250\326\332\275h\350\364\275\317t\376=\370\2333=\233\240\367=VP\221={]\236=\205\2513\275\344\363W>\217\353b>lbe=-\307\204\274\237\317\037=OF\'\276\211\355\302\274\263\247B>\240\323\025\276\332\376\350<i\374\362=\364\277\026>\010hb\276\267\341\371=\267\003\356=\022\021\244\275\200\313\344\275\370Q\220\275\332\331P>\026-\r\276/=\354\275\022\2458\276\236\243\003>rv\004>\000\367B>8\177\246\275X\235\321\275\214m\022>\356@\354\275q\034\215\275\324t]>\023\027\031>\244\366\"=Bu\335=\312\"D\275h\250r\275\351\035\020>I\316\375\275\330#5\276\312;\020>\330f\214=\034V\r>\202\262I>94\005\276\343`\371=\311\267\t>\274\345\334\275\256\2377\2761(\313\275v\267\374=\031O\260\275Y\374\206=2\207\034>H\212\024>\234\035\016\275v+\037\275\342\3330\276t\332\216=\243\000\227;\355\326\004>g-\014\276\334<b=2\217\324=Y+\016\276\225W\"\276{V\207=\002\3557\276\014\327B>\24108>\240\271W\276\314\214K\276\327{\037\276\275U>>\371\361\031\276<K\265\274!\020\372\2754\216\313\275\352&\r\275~\020\036\274\303\306\032\276\222\207w;d\342\304=\344\267J>\354\370>\275\244_\204\275\n(O=`\366\274=s\274\370=\301_D> \203\361=\365\372\035>\032\\\210\274\030\326\234\275\327B\224\275\347\261\222\275U\325\302\274\312\010V\276O\035\226\275\321z4>\246\3744>\253Wk=VF\321=&\001\365\275?vF\276\335\332\250=\341}P\276\0169\016>\314\272\263\273\223\362\211\275\2066\225\275n\200\271\274\306b\254\274\033\262L>\021\3650\276\'\341d>|\266\031\276n\346?>[\333\272\275\245\361Y\2756\262\326=\331\246\016>\326\354Y\276\224\223\364=6a^=\336\353t\275\314\036d>\336\332\365=\222@\361=}\000\257\273_\235\245\275\277\242\322=~}@>\367\243K\276pn\024=\366i\331=\360\017Q>\3224\227\275\334?W=\342Ew\2759\2466>\273o\354\275\235\341~\274\203\214\251\275\300\3011>\234b\312\274\244b\027>\342\201\254\274\321vS>L\2732\275\351\3740\276\036\306\256\274^\226K>\234\264\221=\312\244\005\276&\346X\276\251\236\340\275 \331\275\275\255\\\017\275\267\355\244\274\312\023\336=`E\250\275C\374\324\273\203\356\356\275D*}=3\023\t=5\3304\276\254\344\024>UM9\276\340\207\221<\363G\251=\t4C\276rf\352=2\252\017>\362\232(\276J\305\354\274\350\363\361\275D\323\\>\270\354c>\216GN>H\335\326=y\300c\276\342\324P>\234+d>\3066O>\267\207>\276@\031O\275\251\024?\276\026ob\276#U_\276\033\201\002\276\"\023\266=P\301|\275\204\360?\276\305ZP\276\344\006S>\010\210:\274\362\nK\276\260\237\234=\300\244;>T\020P>h\202\001=\013o/\275\036TX\275\231\234\004>F\2342>\302C\344;\275\255\232=\263$\202=\210\016\225\275\235\260t=](\261\275\3771\014\276\311\0014\276I/5\276\366\3346>\222\2564\276\204\241`>C\n(>\306\222\024>\203\313B\276d*L=\216S\002\276$\255b\275\210\200\025<\273>)\275K\352>>\247\014\036>\246\336Y\276\303\315d>Y\334\210\275u\037\273\275\323\370\220=!\021\">\004\373\243\273Z\331\005=^\222\307\272d\323Z\276\237\006\265=j\224K>\2027\276\275&>-<\375\302\276\275q\023\305=\357\265\000\276\203\375\023\276o\211\235\273\025a\\\276\213\307D=n{,\276:\242\002>]\347;\276F*K=\330\300b>\2651\212\275\335Y!\276C\356\t\276d\033\004=\272\003W\276\021\314\261=\363\'\010\276\345j\361\275\2729\345\275\027SD>\210wB\276s\016U=\347\250\037>\r\031\016>\002\000\030>g\334+>\350(T>\264\210\237=i\223\335=Ez\373\2759T\332=XP\250\273\344\n\304\275\2064q<\265\331\313=\274,\302<\304\340.><b\003\275\247M\035=\250\334\021=b\332\003\275\261\250\035\276\375\340\261\275-\351\224\275\314l\363=\210\027;=\253q\t>\034\261\275=\324T\354\273\212\335Q\276O\022F\276\001\363\t\276R\005\315=\235\364\001\276j$_=\306MY\276\277\332$>cw\'>Y7S>\376H\301\274\227\274\n\276\273\225%<\3505L<\024\014\200=;\0343>K*z=\361q\271\275\336\2536\275]\nS>`\226]\276n]\337=(\031\003\276\214<T>\007\336^=\322l-\275</a>g\357\270=\275\303\316=P\364\016\276\022K>>\266\312\364\275\335\270\347\275\331\307\000\276\t\334\023=f\301!>kV\203\275i\266c\276bb3>\267\365\347\275\275Q\010\276]<\331\275b\346^\276\005>\003\276KK\006\275\210\317\351\2750\224\030>\001\357(>\315\256\014>\366u0\276\r\200\276\274o\332Y\276\235;<<\217\346\254=\233\023\r\276\303_a\276\034\372\027>\034\343a\276\340\371>>\265\337\216<\324_\312\275\262\307\350=\264\230\267<\254\202N\276\234\r/\275\316rJ>\304\353A\276W<%\276~\326D\276\271\343\232\274\225\227G\276k\347D=xrH\276\226\022E;\265q\242=\t\261\247=\017\376\271\2757\301\246=Z\377\330=X+\345=\347\260Z\276~\007;=\224\034\312=1\363\333\274\360\257\006>\277:\355\275\305n\356=\366\301\354=\271\350\005=\031\213\030=\370\375\'\276\1770\366\275\347Ue>V@\343\275\316\307\274\2754\251\214\275\024>\350\275\270\363\330\275o\235\n\276A9\005>\246G\372\274t}\200=\t\224&\276\355\035\253=\245\210_>\316\003S>\030\266,>\315E\036\276\330\003\024>HY6\274\245\376+\276\341\0014\276\342\2232<sfU>\327\312A\275\337Y\244\275\356(\004\276\323\r\376\275<\244\315=\252y9>2\307#>\343\006G>\210M\211=\324\365\347=\355\376\311\275\260\312\355=b\214]\276\031\345\005\273\257\020Z=\247*\266\274E \367=\270ca\276\222\203F\276.&\366=Wv\022>\374\325\025>\001sw=Y\"\272=\347Z\030>\255\216\">\200\203\206=\303\276\302\274\022\336\001\276\205\252\352\274\373\276\003\276\2107\212\274Z\374K\276GOb>\265\365;\276\324\242\377=\027\211\020>X\266L\275\341\347U\276\313\261*>l}\225=\300x\343=\301q\177\275\217\022d\275\315gc>t\352B>#\030\361<\370\305*=c\0046>\225\321\307\275\244\\\354\275\325\026\013>\272\226E>_\316\341\2753:\345<\216\323\022>\245m\350\275\234sZ=d\334%\276A\371\307;\331\347\030\276\267R3\275eU\257=*\234\266=\010\233\225\274\2211\004=\242\3328>\306\243\205\275M\216\263\274B.\005<s|<\275\352\247?=\241\246S>\254\1777\276\027\264\021\276\033\214Q>\361\027\326=\304\336\262<\357\034\035>1j\212=\375\372b\276\356\231\022>A\210Z>P+\210=\037R\264\2751,\327\272\223y\274\274\306h\020=In(=\305\ne>\337\254%>\335 ->\212l\t\276\026)\001>|Xp\275\327+\320=\363\335\014>\231\330\347=dE|\273i\273\007>\364P\345\274\2047\216=*wb>\030(I\276<BZ>Xu\240\272\331UF>\362\271(\2768d\307\275s+a\275\200f\202=f\303\374=y\371\243\275\177\225\277=\020\271\263=\334ZX\275h^a<\263\031V>?\033\022>B\252\006\275h}\207;\036RD\276\350\013\207=\250_\341\274\210\033\274=\030\261<>g\035%>\253\375@>\\\244\025>\275\261\221=\227\274\377\275\212\332\306=\312\346\024>/\243\005\276\262bV\276\352\257(\276]@R\276!\323T=\225s5\275\344Y\267\275@\212;\276\257\253,>\026\254\324<;/\272==\310#>z\241(\276e\346\352\275\227\327W>\212@\345\275\016\256_>\371\025\365<\367\275\035>\303\367\240=a\003$\275\035\030\333<2\357\320=\014\237>>>bN>\330\314W>,\331\375=\236uF\274\315\027\232\275@\264T>[\332<\276\000lT>d\246e>\352\252\027>\304J]>#\377\363=v\221\251\274\215\370\267\274\2461\021\276\224J\016\275\0034^\276\270vV>\237\337\254\275\211\271h\275Z1c\276f\272\200\275\337m\315=\2711\316\275*\226\255\275\014\3401>\343\237/>hTX>\302\243\032<p\364\273\275\220\242\205=\362\312\314\275q\3019>\267\316\"\276\310\353.><&+>{^\024>\300\314%>\025\036\205=\030\265>>@\240\355=`e*>n\320\234<3J\271\274\311+\255\274\014\362\035=\331K\033\276j\300\274=iJO>\214\374\346<\212:2\276\"?\005>\231\323\357\275\241;\244\275\330)\221=U\000\342\275\237P7\276=i\003>\177%\212=\006!\252\275\271*\377\275y\310\214=*\244U>\366\222\243\274\251\025O\276\317\266\261\274]_9\275^\247%\274f\232_>\303\334\347=\000\374[>$\336!\276\246x\357\275\214\231\033>\342\361:>\262\223L>\366\332\356\275T\201c>\227\371T\276e\351F>\3035r\275\337\307\213\275`e->t48\276]6\243\275<i \276\362A\035>g\221\023>E5a>\251\243M;z\216P\276\315\246:\276\304\204\325=\2428\n=\314\326Z>N\364\375=\003\311P=}\031\021\276\314\032$<\002i\210=\232\311\036>b\357%>[\017\330\275q\251!\274\035\310\027\275\3252\356\275\224v\030\275\366\336/>\354\324{<dp&\273f\037F=Jr\037\276\315\206<\276\033\034=\275\031\232\250\275\331\005\252=\310$Q\276:\315\026>c\335d>\343\036T>E-\256\275\342\352\005\276\236\3765<\264\261\212\275B\346B;Ya\375\2758e\207\274\220\370\236=\006A\315\275\274\2752\275t\304O=\247\271\027>8jM\276\340\257\'\276\340la>\266\214\347\275\366o\010>LA\231;\002O\271\274\331\2668>]nE=\253\3062\276C\271\371\275M&\324=\246\314#>\237y\016\276\207\3377\276\3575\335\275\311\001+>\266#\241\275?\202\024\275\353\\\352<\032\250\350<\317t\022\2756t\257\275x\211U>6\252\244=1\235&\275\332\227\346=e\325\333=\212\264\333\275!,\344=\372\317\374\273\010Z\350=\260\031\225\272\300:\033>5\223\365=\233\203\004>8p\326=\300d\311=\226\226\226=9\003\000>k\225\326\274\354\260I=\037\214\216\275\366\362\005>y~\252=\265\3562\276\253=`=\017\025$=U\377\257<\306Wc\276w\264&\275\"\262\027>F\354\255\275\262\022\304\275\261\0108\276\244&D>d\377y\275Q\364Z\276u\016\010\276\327\201\263\274\233\217/>\0317j=\2679\000>r\333\374\275d\323G\274p\030T\276\264!B\276\325\267\203\275\037\010\202\275#^\247\275\345\036\306\275a\330W\274\211\266\007=}\311V>{\215\361\275\263\306\344=\356Vf=\301\200\253=\204\241/\276{\275J=\220d\023=\325\216M\276\243\204\t>\306\275d=19\263\275\302\330Z\276%oe\276.\214\261<:\202Q>\2512\317\274\034]~\275C\201\021=\'\201\374=\212\205\004\276e9#>\324v\23290vd\276T\336\010\273r\1775>0\017\351=c3G\275QT\t>\2200K\275Z\237M>\264(s\275+\337\302\275z\246\256=\355\002\024>\211\273\315=\342\335\370=b;.>\014\377\027>\014x\020>{\261\202=+\317c\274B`3\275D#\242\275\345\316_\276\351\323\221=!`\314\275\342UL\276\345\267\n=ip?>\305#\">\037\335\230=\310\030\227\273\252{\"\276\376!<=\260\3450>\375\217H>\270\030\242=\362\241`\276\343\r^\276 \232\004\276\345\260\267=\257\367&=K\344V\276\253\003\017\276k\312\036=\322\277@=T\230(=\366\0320\275{8\327\275\210\342y\275\n\231]\276\022hI=\007jd\275B\233\004\276\002\322B\275\317o^\275s\267b\276\031\232D>\256\034w\275F\205\225=\224W\324\272\014\014\211\273^\245-=\025I\203\275\314\267\031>\343\347\007\276b\021\026>\212\345\220\273\237\267\020\276\221-\024\276\244\270\325\275\303\205\033>\344\267\346=\214\264\355;\215\267e>\237%#>\205O\246\275\0070e>V\262\031\275\270\037\r>\206Af\273\363\240:;L%\372=\363\221_>M\334\212\275\230+D=Fl\035\276\026\355\026\276\361D\017\276\254\0378\276\223\250c>t\345\024=z\374%>\333&4\276\371\024\016>\014w\272=V\330\300\273\212Z\321=\023\322&>\330*\213\275\007IX\276\247\371\'\276l\305\237=\364\262\305\275-\t\273\275\343\213\200\275\336\370;\276\340^0\276*\004S>\013\244G\276d\226\026>\307E-\276\226\365E\275\354C\235=\030\236\004=\301\351O\276C\234/\276\022\203.\275[\213\322\273`CG\276W9<\276\0306\217=\335\333$\275\255X\246\275\032\373\026\275\352\'\214\275|L\007\273\372n \276\347EX>Y\026\344<\224\242\351= ]\\=/4\345=\320fK=yqD>u\342\177\274\376W\217=\004\313_=\352\371\"\276\245\245\014=_\306@\276l\371\006\276&\210\232\275*k\212;{\273\220<_\250\210\275\200\204\230=\305g\327=\3053\224\275\274d\244\2754\316U>\372\273\353;U\2121\276\337\330L\276Po\307\273iz\020\274\216\203\"\276\302\305\013\275\264k:\276z\364\033\276\272b4\276@\362{\275\321\227\213=f\370S>c\331\014\276\235*\n>Yv*\276\322\0012\276\351\'\273<\226\325L>\357\250\306<\311\365Q>)\256T\27617\203\274\355\325->\272\247I\276C\370\037>\027]\273\275\223RI>\347@\370\275fU6>E\1770\276\313\310\020>\345dM\276\241\r\003\276\266\'\241\275\222\254]>l.\266\275\356rA>X\224\t\276\242i\035>\360\231\341=\203^\r\276\022\013M;\322Q\335<x\356}=\005|T\275\2114\267=\177\366\227\275\260\323\023\276{\302\356=\014\355=\276\247\273\360\275\314\257\270;\226 \010\276\032\321\357<\306l[>CJW>\372\320+\275(\334\">\0334?\2765\021v\275\027\375z<\325\005c=^\370\260=\240\310\311\275\274\003\013\276\253t\032>z\242\"\276\326`\305<x\335@\276r\353+=\370\\a\276\006\332\006\276&h\325=\354\342F>\350\031_\274\260e*\275\3309>\276\014\316\002\276\362\211\344\275\030\334:\276w\260I>\234\021\376\275\032WS>\306\206T>\275\332B>EJ\303=4T/>\253\033F=\221\010\245\275\360\204e<\254-\254=k\365:\276O\3669\276\202+\032>\221d\221\275.\251,\275G\344\020:\202\036 \276\326\365\262=0/\002>\251i|<*\367\334\275\034t\310=\013\321P>\273pE>\325\271\344\275\250\246\211\274,\335o=J\257\261\275\206\000\007\276\305\001f\275Ck0\276\326\237\016;\027g*>\207F*=\241\032\313<o;\\\276\217\\]\275i\271#\276O\030\340=\263\265F\276\236\341P>\007\373)>*~\227\275\262N\005\276\r\273\252\275\321\224\274\2755U\327\275\207\260\030\275n\320\302\274\203\246e\276\213\0378>518=\2359\254\275\331(\257\275\2177\301\274\275^\017>\221A\337\275>:E;\332\225\375\2751a>>YL\237=\332\243\215=\220o3\276\246\361M\276=\341\345\275\300\216S>\217\3422>~\373)\276\377n\033=\234\n\355\275\035\003\352\274\223\3432>\366_@>\321\225\005>\000\004\">A.\020\276\2259\022>\017\317,\275\'$\027>\266D\233=H)2\276e\206B\276*`\310=]WE>QXD=\203\351\r>>\330@>1.\027=\346\300\334\275^\315\272=9a=\275\001\027R>\035[\302\274\203\357\362<\035\033N\276\320}\005>\257\274~\275\343\323\016\275}/J\275\n\024\351<\213\200\017\275\014\016\300\274`m\036\276\361\021,=K\020J\276\377qF\275\265\267x\274\024\207S>a\331\002>\313\247%>\251\262\314\274u\205+\2764\032\023\275\320\013\363\275^\364\272\275\332*\321\274\001\252\033\275\275\272\267\275\266\213\000\276\223\261k\275\324\257\323=\322\361\036>\214\033.<\355\224G>&77\276\033\335,>\246\252;>\022\247\322=\377_,>\377\306R=2W\234=l\304K=\377\027\036\276\276e\032\276\337\255\240\274\371w\276\274\002\3679>\323\335\337\275\306\327\021\276Q]N\275\351\te>(M\331=\275q`\276oy\007>C\026G=o_<\275\302T\315=Z\203M>r\331\006\276!\036.\276\022\236\317\2711\312\204=o\306\255\275\217Q2\276\0145\370=\3112\370\275\031\323\t>h\346\000\276\315\002,\276\r\2169\276\332\021\021\276y\014;\275&\270+>\256<\007>\205\253\317=\3116V\275\2635\\<=\237\235=y\307\030>l\t]\276\013\263S>M\003W\275+v\252=\335\304\316\275\352\\K>\004\343\264\273\251k\023\274\242\353\343\275\033\241\220\275\334A\236\275E\234\014\273 \220\345\274\261\270\030>\240\013\316\274D\262\237\275U\315R\276^\226\213\275\376\344\004\2764\234\326\274\363\307\312\275\024W0\275\303\027\203\274eby=\256\371M>\270\013\013:]\246\033\276\020\260\216<\243\254\254=\212\036Q\276!F\334=pw\260;\007 1>\234\031\n\275Y\026H\275\237\2548\275\203\207\004\276m9\237=\034U\004>LP\344\275\237\353U\276=\322[\276I\221$>\326\307.>,/p=\2224\320:&\003A\276|\233\375=\217Q\256\275jp\272=\357\331s\274\000\020\201\274xDS>\217\200\252\275\247\314X>n\241\014=\346me>\244\177Z>\276\004G=osA>\"\216\035>6\\p=E\030\367=\314\2601\275}\232\343=\3764\037\274>\276I\276\232\232/\276\321\326\275<\206\375=\276?\215e\275\225\315\356=\365\2079\276\232\357D>\316\335\273\275\247L&\275p\376\254=\3404\342\274\313L\261\2750\375M\274\363\262\366\275O\330\274<\327t\315=h$K\276\326\304W\276F\037\340=\245\'\021\275~\252\371\275\006&=\2762nZ\276\264;V\276\261\344\025>RX\244=\224\022 >\361\371\321\275\321\r\267=PN;=\2651\010>\004h\377=e\232\025>\337\371\000>\324x6>wE\036\275\307bg<\242;G=v\263X\275\245#\337\275\n\365\023<\002r%\276\372\033A=tC\026>\220,Y=\331\370<;\330+\013>@\247\364\274#1\362\273\016\325\360=\230-\r\276\020\205<=\261V\227\275\351\177\270=KJ\353\275y:U>\345\234\364\273\276\2300>\326^\036>\222\367\277=\257\362\256\275X1\236\275\rD\264\272fhd\276\341\202$\276\260\007\007\275w\252*>\204\272\r>\t\345\214\275?\2426>)\006\034>N\331\373\275\204\363\034\276Q\231\341\275\227\037$\276y\037\027\276x\315\315=\223F\330=t\254\013>\347\270+>\331\305\035>\305\023\251=\3428(\276(\273d\276MV#\276\022@\306=Y>\242=;\313B>\336F5\276a\203I>\375\212\001\276\200\036\347\275\206u\030\2729\001R>!q\006\275\031>2\276\321\343\037>\324\032\306\275\215\270c\276\336\302K\276\253.b>\005r\245\273\320\354)<\361\311\243<,h\207\275n\303g;\342\006\t\276\276GX\275\365\257\r>l\2374\276\315\357|\275Q\220I>!7D\276\250+\037=\237\335\375\275\321\036\276<\222\363\307<\301\326\333=^\003Z>\323 \014\276A\216\223\274D\010=>N\242\274\275C\342\273=\326\2400\275\001Y\010>\000\311G\275\242\362\337\274=\217\334\275\3413[=\r%,\276\311-P>F\316i\275Znf=\372\274c=wJ;\276\244h\024>+K\320\275\372z%>+\333\002\276\005\277\226=\017\355a\276\356\202D>\247%\371<\304k\216=\357N\260\275\250\360\t=\035\273\342=\376\371\034=\320\243\035\276\014Q\021\276\2079A>\224t\313=\375\034F\276\264/:=\033\\\205<*\243\036>D\343\004=\250\253,\276\250\366\316=\230\rd>\273\224\036\276\206\206D\275\234\2217\276\034\223c>z&\022>\253[\200\275\332<8\276&\210Y=$G:>\270v\">\361\273\344=\'K[\276\244\310\020>\346\341U\276\363\034#\276\206U\225<p\203\017>OR\021\275<\271\356\275H\274=>Y\246\254<\357m\265=\001\314\">|\372\010\276\035\235u\274\001\2452\276\306\3540>i\270a;\0258\2579\262\002 \276\365\027N=-\234\232\275y\236\353\274+\n\007\276\361T\360\275\004\367\\\275\275\375\n\275\254 1>\254\254!>\036b\"\276\252\001\001\276\372\272^\276\346M\024>*\236S\276\373\245\217\274\201\370a\276,&\307=+\340M\276\216\311u=\013\215\336=M\251i\274\305N\217\272\211\254\r;J\362P>\006j->\256&&\276Y\376}\275\342\270^==\253\333\274\242\023\226=9\003\340=y\356<>s\301\302\275@7\010\276\033\000\016=\007o\027>+5\016\275\233\023\250\275\025\263!\276\017~E\275\370\373\177=4\307O\275\202\001\242\2747gd\276\335\223\275=\274M >y-$\276\r[\333=\243@\264\275+US\275i\256b\276s\237\020>\251\006\301="
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
