node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "X"
      }
    }
  }
}
node {
  name: "HistogramSummary"
  op: "HistogramSummary"
  input: "HistogramSummary/tag"
  input: "input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y"
      }
    }
  }
}
node {
  name: "HistogramSummary_1"
  op: "HistogramSummary"
  input: "HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 55
          }
        }
        tensor_content: "\233X}<S&\202=O\332\334;\227I\005>4K}=(\260M=\016\306\346\275]\243\252\275&\341\221=\243g(>f\024)>RUE=\334\267\037\276\357F\233=\364\246\225=I\257\220\275S\336\241\275\3154F\275-s\252\275\026\'\340=\230\265\036\276\250\243\010>^I\237=\301\335\022;\"\247\265=T\204]:\352\301\237\274\375\3166>]\300\t\276\000\315\023=xz+>\216X<9s\266\002\276\034P\271<\364\354\266\275\361\2440\276\370\263\333<\034\031\226\275\027#\301=\277\001\356<\374a\037\276\244\'6>:\361\020\276q\375\353\274W\251\003=\246\345\370\274\243\267\035>\245T\253=\325\322\276\273t`\227<\313\265v=\352\210\007\275LU >\010\026&>\013\024\367=^9\001\276\372\000\252=J\331\302\274x\312\'>\320%J=Ybx=\365\331)\276\241\322\314=\177:\026>\204 (\276gH\2309\330u\337=\247\t\315\275\276`\312=\017\346%=y\203\205=\354\315^=\257\377\261\275\377\230d\275\357\233\"\276\272\177+\276\365\243,\276\002\230\010\276\237\0360\275\255\323\233<\202\376b\275Kt\034\276\374;\237<@W\200\275\n\3356\276%\326%\275\027-%\276^KK=\217b\333\275\220\346\035<\007\231\255=h\333\320=\331(D\275\255h\326\274z\350 \276M\001?\275\367\225->\305=\236\275\333\317\027\276\311Ui\275\202@\275<\242i\255\275\347k\300\274\206p\335<\201h\016> \222\201=:\245\307<H(\277;-x\304\2753\037\036\276\261\213\362=\313\373\334\275[\325\\\275lU\274=9\325\016\276\262\325\021\276^\305/\276\002\030\313\275\024\327\022>\025\222\214=\336\322(>xz\032<x%X\275e`\026>H\340\n>\305\027!\276\032Wx\275\025(\025\276\375\256\301\275z\205!\275\n\275\n\272W\027Q\274Yc+<g&A\275G\215\336\275A^\231=~l\023\276X\247\264=\037\264\017>\255\315\005>\037\372\261=\337\210\263=\371M\250\275\204\337\206\275\277\227$=g\255\265\274\213\337\025\276\364\3217\276\270\236\337;\210h*=\311\377\213\275\331\'\023<Amq\273\207\233\277\275d[\007\276\277i)>oU\341\275U\357\354=\312\315\350=dC\026\276c\r\374\275\333\245\205<\2732\376:T\005\266\275\312\317\017>2v#>T\320+\276\357\254\020>[1K<<a\010\276\307\007\274\275\250\372#\275\006\"\262<\251\365\274\275g\324~<\343&\032>\3628\022>H\345/\276<\023;=\247\n\r>\325\256\365\275|\251\247\274F\003h<N\3559\275.~0>$\3000>\275\243\014\2756q\313=\367\272\030\276V\016 \276\265\326\261=\2429&<U\024\005\276\006\3266\275\366n\366\275\206\275\031\276\t\2103\275\255M\031\276{\001p=\001Q\264=\024\232\037\276\321\221\035>>\2312\276sa\275=\340A\353\274\010\367\304<,\214\022\276\366\351\207\275h\347\362\275\204\332\267=\327\022\216=sf\022>\037\210,>\356\353\222\274Sc`=a\021\020=\020\372\r>\323\210\365\275\004\374\375\275F\363\321=\333no=\275\326\364\275|\031\031\276\3106\026>d\257\031>\006<2=6\024\023\276\233\366,\276\234\323\366\275\2463\225=\312N&>)\351\246\275\360g\023>W\200\006\276\274\266\246=4\343\030>n\360\230\275\256{\357\275?\001\200\275\273EP=\256\251\276\275\177\246\202=\014Z\345=\037!N\2757\362\262;TM\210=jrn\275b\\\210=\343\034\033=\231$$\276\010v\340\275D`\024=\232P\024=\220]\334\274\354\243/\276a\354[=\305\"\002\276@ \010\276\027M\020\276h\235\266=h\232t=wI|\275\364\217\035=\371\225.\276\337\311\225=R\n\232\275\213\271\t\276\214\226\217\275G\r\017\275b\017@<=\360t=\021@\020\276\264\365\031\276f1T\275rw\242=\226\036\353=1\342\177=f\313\237=\221\201/>/wx=\324a\005>\345\306\021>PU6>x\367\247=\325\\Q=hr\215\275\203\214\364=\225\333\212=\230?\332<p\013,\275E\240\'\276\244\240\373<S\241\004=\2607\316=\260\323\006=U\333j\275WGi=\233\223\315=\224\n\367\275\307\245\241\274\333]a\275\367dr\275\343R\034\276\241\212\240=\350>\020\276%\347\n>\257\036\263=Qi\273\273\344\023\037>h\310\021\275\344\343\216=l)\017>\'\377\331=\006P5\276y\372\266\275\233\270\346\274\223\\d=\357\375+\276Y\027Y=\264{%\276t`]\275\243\315\236\275\370\024\n>\2628\231;\013\213 \2761\0348\276\316\205\247\275\037*\010>\036\264\336=\304K4>\346\010;\275\312r\343=\264\365\215\2759\221\342=\232Ug\275Y3\224=ts\033>ay,>nO\346\275\016~\352\275\217\\#>Q\206\325=\266gv=+\244\340=\240\375\201=1\300\314\275\370\355\231\275\231\t\225=\346\026 =\030\221I\275o\300\013\276\302,\277\273\220\201/=\214\314\203<\202+\361=\256\353\224=t\031\320\274\332^7\276O\001p=[\366\n\275\251\2621>\003\341\377<\305\306\254\275Ri\352=\330_\004>\242\005\032\275\374\350\326\275\216\310\231\272\236\327\210\275-b\200\275\2153\032\276R\223\352\275\250+\224=\026\310\355\275}\307\017\275\207\277\210=\031\3054\276\020J7\276\032$y\274\332>\'\276\327\304\240\275egP\275\221\330\004\275oa\014=\025 0>n\326\006>\274\022%\276\233]2\276#\2765=\352\371\004\275\332\256\230\275p%\n=\266,\017>\344-\013\276\266X\002<;I6>\010\300{\275U\030\356\275m\360,>1\232\211=\260\352\373\275?_\310\275)v \275t\260\005>m\342Q\274(\204\001\275\270\326\330\275\245\201)\275\t\225\032\276\346G\206=\003\n\376\275\017\274\031<\353\363\251\275\341\242 >W\254,>\347\350\373=\226s\304\275\300\277&>\344h\235=\25192>\317\221h=\027\247\301=:\370\006\275rH\322=\316\n\277=\n[\024>\252\216\377\275%\235\r>\211a;=\277E3\275lHL<9\261\001=\337\2454>\214\307\001>\032\235\035>/\3136>\240\r.\275\027N6\272\311\323\327\275!$\021\276\230L\'\275\231`\330\275\373\3705=\332+2\276_\361\253\275ZGj\275B\306\203=)\2216>\361\342N\275\036?y\274\3134\037>\302\204\261=[bq\275\212\346$>q3/\275\021\326\213\275\334 \215<\024\371\026>r\3546>Pz\021>\216s\345\275\256Qq;~k\031\276E\267\036>\361\356\240\275\361p\343=\264\3345\276\322\303f\275\310\341\313=\360L\004\276\355\327\013>7\202\006\276\305\032a\275\316\366\013\276\037A}\275\346\0339\276\242]\002\276\353o\357=\326\227\021>_\214\232\275\262\223&>{Y<=uk5>yG[=\263\214\353<\027\371\023>\027\307\254\275\236\021\367\275<8\221\275Oi\376\275B\014\230\275\310\036\273=\023f\226=\315\263\305\275\027\037\374=\363T\345=\021R\010\276\221\003\276\275U\r\021\276\333g\037=\226O\025\276\250\252\"\275\023\300!>g\317\374\275@\263\231=\263\200\034>E\2156>\337\362#=\313\265\240=\342\362\202=>J\355\275\250=\326\275.e\020\276&\267$\276\370\006\t>\251k\262\273\002a\373=\304\261\026\276\257\2656\274\357+,\276q\000\351=\231\215\023>\272\3033\275\nD\213=,w\020=\006\320!>\260$\001\276@\027\"=\364\007\006>\245\335\360=\2069 <dW\014\276#\020\205\275\373\327\300\275\r~\270\2758\336,\276\025\202\027>3\023\022\276Z\213\313\275\245\353\354\275\302;\333\275`|2=\260\001\362=\342T\371\275\025\307\315\275SK(>\rh\023>\311L.\275=A\300\275\240\224\270\275\246;\325<qY\233=\370[\007\273+9\024\275/W\024\276u\226\017\276\313<U\275\204}\237=\350 ->(\365\302=\270\2174>\021\322\">\344\024\221\274hP\305\275\345\227\370=\206\232(<\260\\\004\276w\024\035\275]\352#>9\367\215=\233\3540>\234S\202\275\n\345X\275+0\305\275\304\231\331\275\330\341\253\274\262\017\341\275\243[1\273\361\3008\2762\367\033>\035\301\023=\r\324b\275\274\325\204=\203A\020\276c\322\351\275\225e\310=\300-K\275\322@\013>\306\312<=sF\304<$K\365<\004y\017>\363:\316\274P\376\321\275\031\250\354\275\312X\374\275Du\240=-\235\241\275\342\005\020\276\254\210E\275\3112\270\275\206\223\273\275VQ\231=G\223\247\275\331\302\222=\315O\305\274\321\357\301\275\032.\322<n@m=\033\250\202\275\026\236\323\275e\0303\276\024p\216=f\325(\276\237\305\240\275\022\021\273\274\013\001\377=\235Y#\2767\r\r>+\270q=\243\231\347\274\304\202,\274\223\346\t\276\231\375\230\275\031!\265\275\305G\r>\224\2472=\245\254\375\275\225\366\363\275#\215p<w\222\027>\253\247\325=\022\202\313<\262\034\241\275Ei\314\275\337\374/\276\333\306\004\274\236\310\321\275\321\256\226\275\023\016\022>\001F\033\275\020\207\021>(\367\n>\236\360G\275\3113\355=\337$*=\251\363+=R\325\302=\nJ\007\276\234\016\035\276!s\001=\270\371\005\276\213\021[=\263\323%\276\323\306\371\273-Z\024>\313\226 \2765|(\275%\006v=>\350\027\276G\370=<\327j\013>\341\n\367=\362S,>;\316\035\276\241\n\233\275\222\3043>\270&\353<m\222\355=\006 \262= \373+>\212a(\276\262\214\021\276\355\177\303\275q\362\014=B\016\352=\\\"\253\275\231Y\r\2763.\301\275RJ\366\274\221\020,<\032\250\024=\r\316.\276OK\203\275\250\337!>\330S7\276\\\t\246\275\354\363\277=\263\250\213\275\370W6>t\205\202\275\274\026\010>\253\266\025>\225K!>\342\022\246<`\\\023\276\r\237\253\275C\245\372=\37457\276qk2=\236\270\277=\220\204\336\275`\244\266\275\276\355\030\276\365~\353=\240\035\222\275\021o\300<H\031\265=\233y >\007\351\213==\327\000>\3608\310<\013\334E\275\347\032\275=\323\324;\275<+\241=\036\371&\276\013\t\367\274ZE\002\276\321\310\031\276wK\216;(Rh\2759$\245\274\035\033\035\276\213x\220\275\257}\255\275\347\n6\275e$\312=\373\325\365=\323\356\351=\3453==\023\017&=<J\034\276O\365\020\276\\\215\014\276\215\022\360\274D\216/\276y\351+>\302\351\353=\026l5\276\022Xf=\371\000\017>/\262\002>\'\210\307=\231\007$>\323{[=d\325\n>\037\022!>-K\034\276\351\326\254\274\245u\022\276e\342\211=z2$>\250\177\r>\203F\255\275\240\266\313\275SP\360\272\351\330\272\275\372\257\315=nY4=#;\036>\360d\311\275\243\244\014\276LE\247;NW\216=\214\'p=e\024\032=5\354\013>E\252\010>\220_\351\275\253\212^\275\270\201\345<{\253\356=s$x<\351\327\312=S\237\241\275n\347\205<V\227\323\275\224\000%>\006\030\356=\324R\033\276\020\032!\276\224\345\\=.u\'\276\020\3537\275_\237\321;\177\026\246\274>\361\324<\256\355J<f\301\001<\240\370\320<`\231\220\275+\311\202\275 \337\034>\027\374^\2756\004\026\276\024(\236\275\260@#=\"{k=qG\014>\325\215$\276\351\227\204=)\327\'>_\202\331=\250M\r=\036q\007\274J\017\026>\341\245\244<\242)\001>]>\363\275>\301\277\275\344w\243=\022t \275[\374U=\247\214\260\275\301(\037>\317 5\276Y\344\">\027\033\013>\253J\262=l\375\030\276\217}\202\275U\224\324\2722\3534=,\351\030\276pUL=?\005*\276r\367\316\275\274\021\261<xV\231\2750\213<=@|\023\276\241u\036\276\254+ >\372\227\251<}t\242\274V\355\277=p\322\363\275\3466z\275\357\223\003\275\345\t}=^\t\260\274w;\017>\021\226\234\275\254\3556\276\345\330\264\275{\245@\275Y\206\240\275Uv\213\274!F\247=\n\242N=\326\003\343=K24>q\001\342=ac\347=\216\236\004=\313\344\346\275z\271\326<\362)\013=\032\273\000\276p\323\313\273\252>\335=^\276\241\275X\241\202\275\275\350\347\275\314\'-\276bS9>S\341\245\275b\324\017\276\263\220\204=\367=\327=l%\320\275 \231\014>\247\374\241\275y\225\306<\245T5\275d}!>\375\236\323\275\266@o\275-c\211\275\3118;\274\325?\365=+MN\275z\345\260\275t\273y\275{\263\206<*\024$\276\363\361\237\275\254\'\336\275\303*K=\222\031\t>\342\233\325;\344\322\345=\316\371\252=\370\342b=\346\264\024\276_\246\351\275\372q\305;i\337\351\275X]\t>\3156\267=LZ\303<\271\202\212\275@\257\006>\030[R\275\203s\026\276\3700*\276>o\014>~,*>\022\235n=\335y]=\245\346\t>jua;\177E\305\275U\371\032>\344;\'\276\237\353\021>\346\033\307\275\323\013\205\2746\371/>\267\335\334<\363.\n>8\324\025\275\003\311\021>\315\250\305<+\017\006=\303\340\217=\203+K:^<\310=\265\324\364\275\311\222$\275\254\203 >\257\204W\275Z\250\r>\337\255\343\273\327\334\372\275\230\016E=;\376\346\275|\305\020>\237=\027\276\333\303/\276\200\255\241;\353\274\351\274\232\002\036\276Ou\260\275f\316\350<\036\261W\272\3129}<\201\261\376\275\323 \001\276\265I\027\275c[n=\364\254\321\275\370\354<\275\350;\270=\267\231/=Q\276\324<0\273\232\275#`\014\275\013p\002\274F7~\275\326\177\212\275Z\372\r>,`\227=;\331\250\273\224\2217=qB\024=\241\232\203\275\277\250\204\2743\250\235\275\3704\217=\276\363\270;A*\346=\306\027\254\274/v.\276eq\033\276\016I\311<k\202\232\275\025\213\032\276c\373\207\274z]\027\275\262\364\032>\202\3647=\031\n\205=\352\\F\275\302\t\367;\200=\004\276QK\236\275\201\017\242\273-\r\226=sf\255=\226\376\355\275\374\335C\274<F6>m\201\027>\303\343\025\276\225\325\350=\246\222\330=x\344\005\276\001\256\010>L\341\257=\373\010\r\276]H^<\265\350!>U\225\033>\243?\000\276\264\203\370\275\360\232-\276Qj\352=\362\331n\273\246\203\376=\314\363\242;\320\3411\276\0360\342\275/\341\355\272\271\201\301\275\271\226B=\337\214\342\275\020P\311\275\355^|\275p\367\213= \226\360\275d\247\234\275J<\010\275b\016\242=ko.\275g\261\233\272K5\030\273\206ym\273V>\205=Z\352F\275q\245\027\275\263\031\037=\220>$>\265UY\275\211\310\002\276:\016(>(\335\364\2751K\223\275\251?\035\276\2277\022>\331\2678>\251o\332\2756j\356=L\254/\274\375\346\205\274\316\233\\=\334\330\230={\333\031>\256\237\003=\032\254\t\276\371\366o<\033\366\271=B\0229\276\300ng\275\246\205\217\275I\273\003\2764\336$>`\232\332=\345\204%\276o\032\254=]q\344;e\"\030\276\251\0133>\014S1\276\337\000*\276g\027\232\274>\030\371=\r\262!\276\333\301\"\276B\376\t<*\314\020>\322\347\207<\027_?\275\252\331\244\275\233\304\361\274\374(\274<\244\236\031>\215\322\021\276\0277\322=\305\360\317=\327\032\367\274\322?\306<\356\330t\275\344\265K\275\237f\006=4Xo\275\204N\214\275\241\315\367=N\220\262=\265\213\201\275\262q,\276\220\262\243\275\020~\274=\252\000\014>i\265\014>\362:\006\276c\226e=\325\013\002\275\363\275\025>/\272\250\275b\370+\276\237\356\224;~\230\000>\332r\017>\004o\346<)4\036\276\346/\317\274\005\273\033\276\214}\222\275\233\260\024>]*\301=\035]\264\275\276\t\304\274^U\213=,\001 \275i\310R\274\304\300\362<Q\371 >\005\350\216=L\274\356\275O\272\235<=\014(>\316\354\010\275\03200\276vT4>\266\301\010\276v\030\371=\241\263\326<;tA<\'\002\000\274\334t\201\275K\260\376\275\356\260\027\276@\265\265=\270y\014\276\2562(>j\315\t>\351\034L=:/\306=\025\334\273<\244\016\n\276L\252\267=|\013\321=\353m\013>p}5>1\024->\215\2313\276\3519\001\276@\244\003>\021\340\205\275&\327\251\275\253\024\324\275\202<$>\363\206\026\276C(\227\274\374\005\n>\0270\356\275\204\315\307=\345\"U=\255N\r\276]\3408>|Z\326\275\355\036\362\275]Tp=\204\217\244\275Xy\251\2752\r\020\276\316h\300=\007}M\275d\306.>G\244\033\276l*\037\276\3229\222\275\361-\003\2752 3\276\260\301\030>\310t\205\275\240EE\274,\316U\275QR\331\274\250\031.\276\306\260<=\234\3354>\001\323\027\276\t,\272\274\235\335\336\275\254\254\273=~\0106\276\303\336(>~z\343;\314\227\373\275N\301\'=o\345\\\275\2237\334=\267\'2\276/\003\247=TE+\276\031\326{:\017T\001\276\242\353\251=\351V\017\276<\002;\275\034\2440\274\336\3660>\372\336\374=p\2303>\352tl\2750\2534\276\266y}=\3566\001\276\326@\371=##\036>\031%5\276q1\274=l\333\213<\2222,\276\020\320a\275\207\032\'\276k\371!\274\316&9><\262F=\344\221\017=\003t\355\275\272fz\275\027i\300\273\32483>\220\364\020>+\336\013\276y\0170>\332q\014\276\210]#\276\n`\316\272K\205\273=\302\204\307=\230\325\330<\312\030c\275|\2605\276\340\255\360=\256\241\004\276iA)\275\244/\314=\314*\250\275*_\254<X\014\332=\344\024\n>\210t\032=\334\305\237=9)\341\272u\177\270\274\330\010\337<d\204\366=\232\214\230\275\003V4\276\354@\034>&l\246=\246\021\037=\266~%;c\014\361\275Y\206,\276:\315\342=\020S\261\275\027\242\215\270\'\3418\276\267\346\037>\262v\313\275\354\202\024\275\275\375\367\275\371\001\215\274\256X\371=%s\001>\004CM<\233\311(\275\r\0210>Z\312\231=\375%\'<\203+/>{<\215\275\007\005\240=\304rC\275y7\307\275\225J\037=\3314\312=DI\220\275>\024r\274HY\362\275\312\363\256\275o\353\035>\024\270V\275)A\302\275%\333T\273\353`|\275\354#\'>\362\227\013=\250\241\320=\370\022\356\275\247\306\323\275\226\203\203\275\302\323:=#\316\004=\376\357\260\275X\344%\276\272JJ=\265\003h<x\342\255\275\351Y\004\276\220\336+=\301\246\262\275\025\272\033\276\000\251M\275\261\2073\276~\003\210<K\354\275\275\330\347\376=N\207\027\276\237\366\016>\310\372J\275[\027\\\274\000\353\271\275\233l4\2761\250w\275\242|2>Tw\277;@v\177<\347\207U\273\327?\265\275x=\226\275\r\334\263\275pA7\275\357\342\023=\322W\333<U\335#=v\247\022\276\245q.\275\223\351}=W\004w=\351f\217=/\256\346=\221\272\364\275T\306!\276\360\334\254=s\315\213\275d\266P=\273\263\260;\277\270\341=\326\306f<c\267\211=[\263v=\377\367\234=\364f\346;-\342\243=U\017\225\275\302\220a=/\363\014>\325_v=\350\007\265<\022C\220<\354\213\364=\342\3354\2763\3300\276\2713\017>\"\3617>\021\341\303=+\273\216\274\334\371\335=.\0050\276\336\375\024\275\224\027\377<#~\331\275\275_\345=\033K\035\276\016,\037\275j\335\314\274\302=0\276\265\313\033>9\237\301\275\215\246y\275\345\2311>d\266.=\223\313\220\275\331Y3\276J\030$>\315\257\030\276t\247\"\275\002\302\311=\225\301\035>\232\261\033>Cf0>\203!\230\275Fz\313<f>\351\275\322W}=\327\';\275U\235\005\275/\320\314\275\232Zw=q\034%\276\005\025\002\274\352T\314\275\353h\263=\'\0064\275\332\243\003>\314\3325\275;\377\231=\353\360\317\271\260\243\360\275\257\317\006>\256\227\024\276xI\211=Sh\023>c\255\226=&\323D=\216&\362\275\243o\331\275Q\344\t>W$\312<%\001\222=3\333\022=<\006(\274\322\366\241\275~\236\366\275qY2\276\230\242\316=\020\376~\275\024\240\335=\033\354\204=\254\022\000>h\234\002>&\177\234=p\003\330=\t\274\310\274aZ$>\235\223M=\313\010\004>\320$g\274[z\207=\033\211\r\276\246Q\r>\245\242W\274jF\270\274\306\270{\275\266\215)\276\340R\316=?\333\376\275\n\3147>\216-!=\261_\312\275[%\227=\375\302\375\275\263\373\033\275\006*4\276\'\3450>\231\022\216=f\003g\2757\260#\276r\375\212\275\265\345\365\275\256yx=\025s\236=\013\376\266\274\335>\313\2745\tB=|\2410\273#\r\373=.\305\003>:\256\214=\3641\317\272\3036\371\273(\200\017\276\333\211\300=\317L+\276\250t6>(3\305=\210\265\376\2756L\010=\267\315/\275\222a\023\275*\310\321\275\317\267\032>P\254\034\275\306\023(\276ZD\">\220\271\275\275\313v\261\275\366\3768>\3663\204\275\177\263\026>n\2303>\364ag\275\215\250/>NO|\275&\312\006>\200\3555\276w\235\006>\007\372\256\274\207\365\264\273\274r\314=\264m\034=f|U\275\352\306 \275*\2018\276\364\360\321\274U\215\367\275O\356\331\275l\356\302\2755\002\361\273\253\261\374=%\020E=\251\001\t>C\026\245=\266\363\331\2749\0375\276\322\263\"\276\326l\336\274\225\340#=\000H\314\27539y=\027m\260\275\033(\337=\022\3747\276\360e\351\275\274\357\317\275\336n\330\273\273\366!>\325\253\205<\362\367\356<,b\352\275W5E\275\264\257\351\275(\003\367=\266}\246\275\217\311\215<\375X\013\275x/+\276%\375\033\276Ry\232\275_\237\326\275\323\276\024\276\205\n\334\275{\325\007\276dN4\275>\307(\275\0040/\275cu\013>f]7\274MM\340\275\212b\317\2746>\252<\002\351\335\275\206\215&\276\010_\304<\202V\022\276\345P\017\276\313\301\034>\010N\001\276\267\331\236\275(\037\352=\036h\354=\216#\345\275\032\217\346=\333UI\275K\242\305\275\311\013\212\275\317\354\304;j\'~<2\260\024\276\357\',\276\333!\352=\345\332\363=p\327\321\2755\336\002\276\261i\315=\020\320.\276OL\336\275X\016\377=\2718%\275\r\303\370=\027~\356=u?\342:L\302%\276\016\177\233\275\203\320\327\2759\305\n\276\223\302\232\275S\235\241=\215\002\346;Z\247e<\000\'\n>\355\374\331\275I3o\275\365\212\206=\310\r\016=\374x\036\276\366\317\322\275\376I\r\276\211\363\256\274\356\266\323\275\017@\211\275\211.\321\275`1\"\276\253\211P;\334L%\276^\376*>\nD\t>\037)*>T\346\266=[\2636\276*\343->\272\250\317\274\377S\212\275vX\016>P\230\357\275\322\006\334\275\203xq=\363\271\352=\202#\236\275~\261,\276\013R\014>\341\226<=\014t?\2752\177\274<\262\340\306;\334\200\021=\251q\204=\036\220[\273\204\273\016\276\276\374\337=O\0339\276,\000\016\276\027\253\r\276\246s\232=r\001)>Ri\013>\233\255{<\356\274==\276\037\005>o\263\266\275!\317\353\271\251`7>y\033\363\275\313[\177\275.\277A\275\223\377\256\2756_W<\346\222\210=j\325\210<\355\234\301=\241\364;:\372\273\220\275e^\022\276\005+k=;\364\236\275\270\253\272=\323\253\373=@|\213\2725\321\037=1E/\276\016\301+\276\345\367\233<\261\266;\274|U%\276\037\302\001\276\367\343\262\273\027\250\010>\245\346(\276\313\204\002=\355\232#\276\323P\021;\227\267\371=\326\333q\275\r\305\255\275\227\300\203=E\312\323<\362_)\276J8\270=S\227x\275\315\354\277=\233\276\366=m\225\202\275x\377\007\276\217\251\265=\366\247\205\275Px)\275\220T\253\274{\247\211\275\203\313\000\276\003\366Z\275\035\n]=\230\304+\276Q\002L\275?\261\033\275\225\315\034>\220\362\234=V\234\251=\216]\370=\320CY=<\035\232\275\352Cl\274\246\376\223\274\315\232\037>\313M\020>\246\216\016>\334\332\347=\275\233\016\276|\323%=\021\036\321\275\r\224)\276\0032\346\275\013v*><\2513\276\247\322\033\275\247Z\002\276AC\010\275!\341\017>\323`\210=\204\375\032\276R\321a\275J\231\036\276c\242\377\274Z\277&\276\232\301\274=\212,\222=[\315\t>\216\000\n>\355\352\242\275\3664\210=K5\342<$\244\316\275\267\217\025=\230\346$\276\225\014\211=\016YY=\315{\'\276\2133\353=\306:s\275\247~\337<\376gv\275\212\203\226=\247\221\225\275\307\213\002\276\"\024\031=\361\027\203=V\217\203=\034x$\276\337\010\277\275\240\377\362\275{\002\207\275\325\025\234=\253\321\t\276gP\204=\211\317\230\275r\316\314\275\340\243\316\275*\220\372\274<<\277=\364\235\353\275\262\260\005\2749\010\371=\024;_=\271j\343\275m\223 >\376\216\000\276I<\004\275W\353\347=I2\004>\010\241,\275\200\243\333<++\032\2763S<=\216X\364\272)\252^9\030\225\204=d\312T=\023\363\221=\275j\352\275\323!7>\255\245\240<Rh\364=\217k\026\276Od#\275\177\026\020<\315\232\353\275\327\214q\275[{\312=\223\333\216\274\n>2=\334\257\227=i\254\232\274\334/(\276\204\331\372\275\265x{=\320\301@\275\360#\341\275\n\241\273\275\263m\004\276\274_#\276\214\342\017>\261\367\022\276\320\327(\276\304\n\020\275K\234\">\236\022\017\276Z\336>\275\234,@\275\360N\007>_\243\025>7\253\230=\325\214\022\276\223.\036\275\231\362\036\276\304\314\023\274\254\362x<\334\216\241\275\231\024D\2752\315m=\320\275\232\275)\325\302=!\252\027>c\321\024=f|?=h\340K\274\217\347\302\275\252\3072>\250\3170>]!8>\343\244\215=\337\264\037\276\304&\020>\361=\256\275\360\312g<k\270)\275\337\270\n>y\335o\274\335\230\013>}\244#>t\261h\275aD\257=\247\217\366\274\374\3554>\025E\'=P\215\010\276\031;}=IPG\2745\216^=\343Y==X\335B\275~\251\266\275(\007D<\005\r\031=\317\201\342=\252\365\337\275TB\334\275\351\3261>1\'\022>\007H\335\275\032/4>\364Th=\315\302\221=\276\003\311\275[\337\002\275H\007\344\275\305L\363;\316a\334;\355\357\000=\250\022\010=\312C\206\274\007T!\276`\244j\275\\\272\212\275F\031T=]\224\030\276\306E\350=\2231\014>\004\253\344\275\242s\353==\322\370\2741\205\371<\016!<\275\243\025\323=\023\261\n>\rK\346\274\\}\231=\321\302\r=\321K\224=:\022\263\275\366P\234=\010B\346=\004A\301\275\t2\254\275\307\202\322<\006\323\376=\343\356b=\016S)\276\n\247\026=\037.$>\022\330\024>[v)\276tW\267\275|O\037=57w\275\341\363\007\276\374\235\262\275\314\2661>\\\3005\276AMp\2754\376\261<\000;\232==2\017>Qq(\276;h\251\275\307\006\261\275\357-8>Lj\356\273\302\005\223=\326-\"\276\266\331\017>\366E\t\276T\267\315\275\300\366#>&\024c\275\325\236_=\344\374$\2765\245\245=\303G\325\273\014\340s=y\331\357\272\305\373S\275\nF|\274Yb\267\275\\\n*>\231\254\230=\204Om\275\324\354>\275\005\244\005\276\304\261\265=\0239\244\275\210\002\257\275\234\233\261=\266#\021=b\331\253=\356V\024>\003\327%\276\267x\021>\361J\240=3)\037<V\247V\275\014\237\316=nd(=\333\345\355\275$\2328\276\252W\275=\024O\001\275\010vb\274\324\253\000\276\267n+\2761H/>d\223\005\275\217\371b=\277\257\213=\301\010 \276\322\351\016>\202\353\026>\3650\342\275z\036\026\276C\266\334\275\216v\371\275B\212\022>m\241p=\207\371/\275J\264\225=\275=W;%2\214\275\366g\315=\274\301\335\275K5\007>\377|{\274\340a\352=\221\367\332\275\261\026\220\275!\321\n\275G\357`=\034H\202\275+L\036\276R+\226=B\322\360\274\352-\004\276\250\326\342=\241\355\224=\333\3208\276\004\037)>n\264N=\264)2>\330\r\332=8\332.\275YCd\275\351\270\021\276\305uN<\242[\037>\000:l;a\271\036\275f\3448>\n_\261=Y\214\030>\267d\016>\024\240\013>\277\311\003=_\265\006\275s\201\307\275\026\001\320\275s\366\305=\223$\336=K\004C=\353\027\000>\221=\316\274\227_\004<P<\343\275V\204+\276\356\300\361:\247M\344\275\021J\354=\3073\273=\0050\373;\345\211\332\275\202l\203=V\272L=FC\261\275j\217\351=\"\362 \274\305\2653>\377\360S\274\360\3166>\306\226\227<Ez\217<j\260\343\275\300N\033=\000Y\214\272\377h>=\330\372\036>\347\2428=j\023\004\276\314\203\234<d\317\367\275\030e\025>6\0000\276\002\356\230\275:\007\242;\206\323\317\274B\343\314=e?\256\275q=\357\275~\244\320=j\265,\2760\243w=\326\310\300=\3445S\275}jW=,7\227=1\2761>I\251\243=\266\n@\275\252Y\330\274\0062\342=3\004/\276HA,>\240Uo<\371\246\036\276\365S\374\275Xs\363\275{w\">o\004\227<l|\314\275\300r\030=k\255%\276\247\024\031>zP\367<A\352\375\275lR&\276\340\304\020\276\003\252v\274\002\003)\276\020\214\273=\247\345\264=\255T\245=\341B\332<=\251\266==[|\275\263\003\004\276c\024\034\276\003\2237>[\325\001\276\275\032\003\2763\245D\275\247?\r\276\350\346\211=\006\320\313=\302^\316\275!\266\331:\317#\373\274\326}\274;5\247\024\276#\354*=\311\367^=\350\177\004>\203c \276\222<\r\276\0101\332;\032v\023\275\026\005\016<J/8=ff|\2742<\026>\020\274\325\275\370\342\026<\376\207\257\275\3274\007\275|\314 \276[L\225\275\317J:\275\021\335\372=\333\204\263=H)(=\320\3720>eB\353\2751\236m=G\n\301=z\316\237\2740L\">.<-\276V\335!>\2468\267\273v\004\203<\036\354H=+\2668=\251\273\303\275Z\'\352=C\017K\275\0165\216\275\026\341X=\006<!\275\014\036Z\2740\237\225<\321\024$=zG!=\243\245\231=\343\342\332=\371\271\t>\341\241&>]\303\013>\232`\305<[\350C\275\202V\214\2752\n\206\275\237\351\235\275&\267z\275?\311\213=@j\256=Aa\327=\353\327&<\n\242\030\276.\231\346=!\212\001>\365d\276\273d5\202=\267\341\217\275\225\253\366\275J\006\273<\247\337$\276\345\241\263=\356c\311=\304\267\374=\216\213\017=\356:\302<\3643\350=x.\006>/\2200>\330\210\216=-U6>\006H\313<\266\234\345\275E\2743=\233\314y=lq\231\274\321n\202=\255_\221\275a1\023>\270\023\235<Z\316!\2762A\254=Wn\354\271\336\326&\276\342\265C=\267>\352=:d#\276\013#@<\312$c=/\016\021>\202\331\377=E\035\"<\361\010O<\313\260\006\276\233\236\204=\257\362\016>o!x=gK\362=.c\004>4\\9\276\0377\233\275\262\376\321=t\270\035=&\322\304\2730\246\'\276i\300\362\274\245g)=k(\213=\332%\375\275\324g\314=He\027>\033\231\013<D\371\367=\205N2>Ud\270\275>\224\340\275\021\232\323\275\020\032z=\365\373\020>\265\264\023>\342\332\251\275yn\311\275\274wS=\367\352\373=\251\332\356\275e\3411\276I\357\017\276\261\271)>\312\213\016>J\257\305\275\273\363\317=\355\204\036>\t\332C\275\325\t\263\275\005\244\004\274\000L!>\344\357l=/\233Y\275@\367\230=Wr\032\275t\270)=)\241$\276\322X+>[M,\276y\360\355=g\020\263\275\026(*>\013\375\035>\303Q\327:\032\354*\275\265\266\226<\026\027\244\274\272\365\317=\351l+\276R\313\024\275xj\032>\030\335\021>\357r+\276A\240\365\275\303i6=\251Y\013\276\340_\030>\362Q\206;6\373\257\275\232_#>i\031\367=\201=\237=\256\'&>\333\201/>\223\t.>\237\277\223=E\2072\276\275\253\003=si\314=\370\246%\275x\037&\275\033_\206:H\3008\276F\376\203=\206\004\252\274\270\'\305<\267F!\276\332\237\200<\203\233%=\007y\n\276Lu0>\344\003\023\27651\277\2734\367+=0\005\214<bV\257\275\270\234\341=\215\3038>2C\203=^\266(\276\020\305\306=%\212\210\2755\013\007>4\204\">P+V\2747\215\025>\311\316+=\210\372\"=l\374\277=!2\231\274\323\243\014>W\377\300\275U\264\"=\210(\253<\034],\276&$\213=A\024\347=5\t\312\274Jd\256\275\211\340(\276<\377\224\275\257\317\227=\251\361\'\276\200\333\225\274g\204\007\2768\266\310\274p\177\r>\r<\376\275\237i\276<bo \276\342\2330\276z  >+a\241=\303\345*>\264\017\207=\247E\253\275jT\271=[A`\275\016(,\274\233s\324\275\253\245+<\314\240\034=\212\021\001>\202\023\232;\216\335\264=\000`\355\275\255n\304\2741\303\300\275\336\033\321=\245\345\300\274X\310\r>UR\341<\001C\000>\031\331\353=t\036\024\276\250\305\037>P\345\035>\215\010\364\274\344\247\001>\260\342\325<\315\256\350\275_\265<\275g\004\360=\236\343\231\273_CF=\355\346\314=\356\006\334=p\306J=\021m\234<\354v\371\275\216\206\241\275eu >3\237\177=\026\235\375\275`\252\263\275On\014\276\256\224\362=\225\355\022\275Ew\022\276\340\016\316=kL<<\270\332\222\275|\005\272\275my\302=\332\235\240\275\344\376\214=\312h\273=aFm\275\273,\214=M\334\320\275,\313\'\276\324\207\216=\241\334\234<#\211\273\274\003\275\006<\363x\312\275hQ!>\263\253\330<5}\344=\255\013+>\364*\367\275\226> \276\020\275\255\275\256\027w=w\373\327\275w8$>!\2258>9\327\013\276\206m\311\274\244\365\r\276\372}z<\374Q^;c\257/\276hT9>\032\351S\273\244\r\211=\251\311\220\275Y\035d\275\027m\353<\215\002m\275\332\003\316=\023D\026\276\002\"8\276\305\277\347\274\330\350\211\274\302\241\250=\326\242\312\274\344\225\'=\211\257+=*\320\027;:\023\217\275s\377\006\276\231<\231<\21369\276[3,\276\206\327G\275!\242\244=\016\2224\276\006\322(>\032\335\014>\227\207\224\2759\366\362=`\277{=\306\277\264\275\026\n\237\275\300\356\r\276\031\372B\275\363\333\216=\020\017\202\275\016\n\323=ZK\246\275J\247\034\276\225\362,>c\226\016=ll\227\274\005\004\305\274\031\273\034\276W\244\364=\216\017\366=\267\363X=\330\274*>u\253\025<R\364\037>^F\206\275\203t\314=\"]\277\275u7Y<o\257]=\027\2168\276A\245\247\275\302\222P\274\211^(\275\250`\n\275\'\002\275\275\034z\003\276\2470\302=\333\301\024>\245Y0\276\221o\232=\001r\372\275V ,>\354j\300<\207\003\017;\016\351\036=\260\312\237\275\363,*>\212\032\232=\360\365\305=\230\207\207=/R\224\273\376\212\321\275\306\006\275=\005\331\265\2753\3526\274\211m\014>\207\300\331=\221{f=\336\273\031>\260\010J=\310\211\022\275\210%\030\276\375\027\026\276Q\317C\274v3 =\247\003\202=\230\010\037\276I;\224=\326a\215=1\302\024=\354\0177=)\3530>D\325\243=xU\356\275w\2420\2766s\001\276\200\271H\275r\314\307\275\243+\023\276\306\252\262\275\236\231\013\276t\225A;\006o\207\275K\'\256=\246\034\211=\357\263\273\275\241\270\345\2759\312\n>\316\231\004>\"\270\351=\344\364\256=\313\261:=b\317\"\276\314\330\254\275\247_\237\275{\031\275=<\031\355\273\336\262\277=\006\227\303=9\226 >\237\037\241<\356>\352\272\001x\t>g\341\274=\207\222\311=\257*\007\276~\020)>c\004\r\2757\334\010;\227\247\021>V<\201=L\233\327=j\371=<,\273\323=\227S\037>\237\024\263\275\247(\327\275]K\244=\253\257\t>e\320\261\275\221M\010\276\016\231\016\276r\n0\276\267:p\273\236\023\027<9\360\'\276B3$\276\013\267 >\375=\351=\025Z`=\330^\323=\321\366 \276\202\025\'>+7\005\276A}\344\2753\312\371=\004\200\330\274\262\253)\276\343\322\t\276\304\303\340=\036O\017\276\260\361\266\275\310_\372\275d+-\276\227\014\007=\345\310\005\275\353\366\027>(\020&<\252\332&>\212\311\001=7\317\216=\033,\020\276\025\215\t>a5+\276z\030\240=\021\235\324\273+\272\357=c9\023\275\322\244\030>\312\251:=\026iK\275\241\004\210=\034u\370\275\365\2073\275g\372\367=o\267\255\275X{\324\275t\220^\275nA\r\275\2336\262\275\374\231\346=\370\2739\275_\326\334\275\014\236\367\275\327{4>3\271\311\275\r2y;KH\206\275)C\016>\0379\006>\n\315\246\275\004\006\024>\232\251n=\230s\005>\372\017\257=P\253\035>\225C\344\275\365`\244=\027c*>\202\375\356=\232\356\017>\201\343\345\275\220D\355\274\304\313\324\274\225\313\036\276!\177\035\276MLc=\375\303\037>Y\000\022>\343e%\276\256\267\347\273\006\177\t\276+6\342=\036\014\177\275/\302\307\272TT0\276%n\366\275\236\301\007\2765\027\215=\206\215\004>\3041\006\276\252\226\375\275\'\231\223<.\222\333\275\374\206\030\276\222t\027>\322\340\024=%0\027\276cb\223=E\205X=\314\354\337\273@\366J=s\213d=\001\337\261=GN\003>\371\264\206=\250\345\324:\364\305\355=\246,+>ex\033==K4>\020\026z\275\032\370\262=b\213&>\2016\345=N\367\311\275\223\366\036=CO\000>t\240\332\275\240w\033\276\271\365\006\276\351\256\017\276\323c\343=7\347\322\274\207\334\353=U\246?=\212\030\354<!#3>\3612$>\030O\035>o\374\r\276\310h\253\275\342\"\317\275\243!\033\2753\242\342=\231\215\370=\022\263.\276w).>\200\3405=\260\247\370=\244\251\033>\027\331\312=\372\0222>T\356\361=oB\247=\017r~=G\243\235=\034\177\271\275\371T(>!\000\233=A\374#\273\034\235\005=\273\273\r>=\317\220\274\"\207\251\275Ho\006>U\217\024\276\353n[\275\006\177\006\275 \025z\275\267\223\264=\203\014q\275J[Q\274\322\271\342<\260\223\356\275V\270\377=\020\313\343=\233\327\001>\233\312\016\275\356\2301\276\334\234}\274\342\233\362=b\364{=9\350\005> \241\026>\203b\266=\t4\255=\200\217*<C\335\206=\350l\212=^\366\240=\320\363k\274\312\331\321=\n\020\271<)\233\221=\001b\236;\211*l<\366\360\353\273\216\322U\2756\316\246\274\325\255\355\275\300\337&>\345\237\026>B-\036<\313\231\361=\247\3707<\177\031\322=:\236\301\274\203\016\205\275\316\245\313\275B\235\221<\026\220\225\273i)(\276/b\270=g\323*>w\364\016\276\0173\n>\354\353\023\276\342\201+\274Q\363\021\275\257\265\004>\004\033)>\023\270\264\275}\003u=\276\3675>\244\257\034\276\250\367\032\276}\230\031\276\035\305\367=m\t\274\275\233. \276A;\220\275\230j9>+k\033\276\272&\236\275\275x0\276B\322\365\275\320x\'\275\367\257,\276\252\367\236=\306\016\266\275\202\t[=\247\376\013>\224Z(\276z\301\373\275\031\352\347=g\020\n>\353\305\374\2753\201\221=\332#\003\275\300m5\276F\255\023>\346EH=fv)\276\013\230\001=\177&%\276E59>\207\226\n\274\332Q\205=o?$=\352>\010\276\270\201\250\275f\tj=\275\353\210\274\251\375:=BE\000\274\376\230\255<\337\365\347=CN1\276\234r\\=\027\346\021>\216\341\252<\034\001\005>\350\036\010\276\301\204\330=>\035-\276\214\263\365<\312X\023>}\007/>Z\">\274&\324\217=\260\354F=\014\020\312=jVz\275\346]\002<\270\236\035>\236\032\316\275\003\373y=D\017\232\275\n^\003\276\375w\371=\010\204\276=\317\252\'\275)\213\003>\267=\027>\311\037\363=\3102%\2761\376\027\276L\017%\276\024\300\252<\356\005{\274:S%\276s\002\005>\325\322\266\2751\342\241<\024&O\273\004\037\316\275\256\240\320\274\243:%\276\340\375\227=\37277=S\337\363\273\324\311\262\2758\201G=\023\322\037>\014=\251=?%\217\274\256\r\367=3\233\002=\235\227A\275\244O\341=\334\3322>>\267->\007\320&>@\204\002\276Z\327U\274\271yY\275V\212$>\235K\324=\246\327\024\274\302\337\024=\310\255)=n\3578\275{\3526\276\236\374\256=\326\3172>\226\003\212=vD\302\275\36281=2ec<\226)5>\007E\027>\246e\304\275\025W\306\275\233[!>\355\213$>\220A\315=\200C\232=\377\306\362= e\026=\"%\353;f\0057=\345\177\372=\2576\317<\260\363\031\276~\251\"><\343\220=@\324\356\275\030\006\325<j\215\031\274\277/\037\276\256\313\003\276\365\267\256=f\347\351\273\245\031\211\275\363\324M\273\340F\323=e\322\316\275\377\305\345=\352_\023<\315\324\362\275\374\216\217\274\346M-<\026\036\305<\006\247\350=`\002e\274\304\201w\2749m\331\2756x\036\276\275\031i\275\240\344\230\275\331\271\000\276B?\037>!\352[\275\242W\036>\223\257\260<\236\350\213=+\317$\276\t\344\024>!_\337\275\324\322\340\275\244rt=E\2441>,\030\200\275Ac&>\371\271\322=\257\220\321<\263\316\354\275\334\222(>\364C\006>\236\'\'>\316\363\354\275\267\"\337=*\205\277=\260\306\263\275\220\335\265\274u\006\021;\031\364\373\275\273\215\021\2758L!\275\005\206\032=Z\2746\276\364\356\027>\036\341\027\273\340<9>\342\3772=\244H\022\276&8\017=T\243!\276\021\254\037>\321v\347\275\030\276\346=U\325*>\000\201\355\274\334\2043;y\237\336\275\313m.>\247\347:;C\022\351\275\322-\220<\205\232(>_=\n>\023\251\246\273\355\247\347\274\312V\014\275\355(\277\275\346e\005>W-\\=\275\371*>_\316\235\275\26798>A\307\002\276\263x\216=\375z\002\276\251C\316=\"eo\273\325%*>\302\002(>jf\026;\360\345F\275\266\277$>R\0247\276AU\335=#\314\026\276/\377y\275~\374\204<\026@\370\273:6\036\276x\274\032\276\324\006\265\271S\327#\276\3149\264\274y\311\245;\375T\033>8\341\017\276\227\2217\276\264\267/\276OF\237\275\035#\321\274y\316\020\276\344L\236;\213\235$>B\355\005>\037\334\320\275\200h#\276%\005c<\207\203\021\275\241\342\"\276\306\350\027>$\"X<\000*0\276\264\265\201=\215\031\244=rw\350\274sN\354\275\247~\034\276}Ba\275\303U\327=\331\321(\276\260\3045=0Gz\275\212f\255\275\234\n\\<\177\356\246=\375-\244\275\357\322\354=\224\353\000>S]\002\276\024\236\271=\256\275\033\276@\213\303\274\030\354\257\275\"\234\331\275\373d\207<\337\263\262=\236S/\2758fI=\177\253)>\210\247\003\276\311\362\017\276\362\"\007\2762\000\253=n\223\201\275\205\013.\2766\0176\276\353\332\213=\302\207\263=\315\236\000>\330\030\006\276\006\301\024=1\3268=\260\304\244\275_\260\016>@d\014\276\0252f=\244b\356<`g\377\275<\350\350\275l\336\336\275 \350\226\275V\r\t>\000_\372\275_\324+>D\255\001>$\223k\2756\354\n<\223\250\342\275\3746H\275\205\207\035\276x\207\250=\210E\350\275\220\356l=\272\316\336\274\000\024\327=2\341\373\275)N\353\273\271\3361>\"\325\275<\301\364|=\005Kr\275\342\367f\275\027\371\244=\010k\205=\367[\013\276\335/\263<8\3578\275.\245!>N\347+>Az\020\275\3513\205\275R\354#>J\261\016=>Pq\275\2256\221\272\373\250\025>@}\301=R\330\002=\275\002\031\276l\246\000\274\200\273\034>\332\206\002\276\255\266\352=p\230\013\275\363&\324\275\006\233\004\276\353\002>=\031\031)>,\215\236<\264\324[\275[86>\274\250\034\2763\017i=\241\253\247=D\373\026\276\037\234\366\275G\234\237=D:\222\275\034\374w\275\276]\r>\205N\014\2767\3608\275\n\220X<*\266\374=\233\013\002>\343\264\215=\300O\262\275\031 1<c\373D<h\366\007>b\342\305\275-g\267\274IA\022<3H\344\275\212?$>\205#\037\276\370\372y\275t47=6\240\260<\327\336\016\276\003\313U=\300\276\033\276V\205\231=,\245\'\274\r\245\013\275wQ8=\201e\n\275s\201\252=\336\207\227\275\203\224\037>\262\002\'\276\030Y =\020\020\333;\007%\251=Mk\031\275\303\260z=\267|\362\275\303\375\037\275\037\227.\276r\366\230=\032\230\3239\037\233\247==\213/\276\271\320\001\276\226%\353\275G\354\333\274\037R\254=i\367&<Vb\017>\326\237\'=\002-\r>GV\022=\251\026\005>\362\366\213\2754\257\030\276\313Q$>\242-8>l1&=\000\221\325\275\307\326\361\2752\0359\276\372\356,\274\006\277\217=82\356\27434\330\275a\026\010\276%\246\"\276\021\'\013>\027\3540<9\007N=\364\335\375=\006\257#\276V\367\n\275\250\215*>\025?\275\275\247c\023\274\320\364\001\276a\033I=\340b\250\275\374c\203\275\004\241\265=\313P\276=\036#\031\276\352\326\006>\033\343\203\275\267:@=\212 \017>\037\311O<#\223\216=\325\374\'\276XQ+>\201}6\276I\036\266=\343\017\023\276\260\200\270;\324\212\331\274`Dw<\006\352\377\275\210\026H\275\331_f=x\242\200\275\226\357\322\273\273s\367=)\312\013\276)\245\311=\024\213\264=\213)\010<\344F\262=\204\375\263=\031\240\014<U\211\373\275jO\347<\nZH=\321\253+=G\323+\276\037\270\303\275E\237\352<\232\301\023\275\320\2345>\r\356\000\274+7@=\222p\206=r\300\274\275I\353\362;\013\337\351=\002n\261\272\004\231\354=\342\224\322\274\347J\266\275s\376\212=L\30309H\r)>-X\220<ihK=\322B\'>\342\316g=b\200X=\004\360\375\274\322\334\361<\240\341\036\276\274\3450\276~\212\017>\350\2055\275\335\244\303\2752\027\310\2733\204x=\004\006c\275\013C\347=\360\2473>a\225\253\275\'5*\276\264\334\351\275\212,\205=A3\020\276;\203:=\351}\n;Q0\215<s7\301\274im\024>\377^\211=\261\256\333\275\302\366\t\275\222K\303=\013\360\010\276\32083\276`\"\263\275\020$\032\276 Z\024\276S\'\267\275\360\366\037\276\204\342\010\275\234##<4Ud\275C?h\275\232\267\'>$\010\334\275B\225\035\276>\234y\275i\274\032>(d\346=\217\265z\275\206\250%>@\301\250<\216E\000\276!\001\204\275\326:\007>\342N\300=\230\272)>\261\364_\275\323\313\326=\242\212\003<R\217\036=\203\2620\274^9:=J\241\031\276\255c\273\275\'\365$\276]&t\275\345\325\345\275\227\335\324\2745?\014>A\201\'>\221\343\343\274\t?\372\275\322N$\276\214gS\275U\326\377\275(\022\027\275\316E\024\276\356i\226<\\\305X<\234}\271\275\377\021P=\231\316\025>\207\035E=\330\004\220=\022@\025>\017\224\222\275|\323\020=L\250\030>\246\240$\275\376JW=\0148\t\276F\222\242=A\232\206\275Z5\201\275\016F>\275\212N\030\276\021\3511>\371\211w=Z\217$>g\274\232=e\036\353=\346\020\246=\203\221\230<t\003$<\n\377%\276\360\342\330\275\3716\007\276\351\365,=nN\354=Il#\2766Z\007\2761}Y=\331\323\360=\217F->\234\251\241=^34\276L\2231>(0\033<\272\212\001>=v\016=9\324\r>:d\336\275\022\213\277\274=\033w\274NR;\275\351\2373>L\266\025\275U\236\035>*\320\241\275\004\345\014\276\376\2012\275\212\335\'>\237I?=\317\007\247=DG|\275+V\376\275[\027\"\2755\215\373=\350\233g\275\031M3<\276\207(>G\225\356\275\373\272(\276\t\210\357<\3404\\\275L\033/\276\304$\325<\210m\346\275\036\260\343;\350[\203=W\204@\275\311b7\276\352\254\310<\007/\255\275\323\202\031\275\023\025\377=\246\362K=\254z\257\274M\272\004>\323\034\233\275\"\3632>{\'\024\276\300\356\227=.2\205\274\254\\\264\275\271\006\234;\020Q\356=pB\377=\021\003\377\275\320O\204\275N\375\376\275*\033%>\311\212\014>\354\216|\275\022-\000>i\215\323\275\273\375\274=\322I\321\275\031\320\320\273=\271\022>\246\3076\276|D\352\275\310\0026>\357\217\207\274Q\t\371\273@\350G\275n\375G\275#%\347\273\356\003\017\276\272\336\344=\261\352\231\275Fg\223=B{\367=1\341\024>\035\216\366=\200e\006\276\264\310\0329\032\324/\275\333\"$\273\227`\370\275\246l\226=|\313M\274n\206\031\276\261U\364\275\005\352%=\246h\035\276\023\375\022\274-\254\013\275\241\341\016\276I\372\013\276#<\316<\326\325$>%\227\227=D\274\202\272\re4\276}\340 \275\265\372\306=\037r\331=\267\305\367\275zb\315<\035\r\260=*\246~\275{\221\350=\325X5>\343\347\265\275.8\332\275\315\351\217\275\376\033h\275\024\202\204<D\224\n\275\270\256\034>\316t,\276\r\267F\274L7\320\275\254\0177=\225k,\276\240^\320=\325`Z<\204\372\213\275\374\206\227\275F\032/>L\314\344=\370\004L\274\313o\"\276)\r)>8b\241=6A\202=\315\230!\276\r>\030>\371\311~\275j\230\237\275xh\364=^t\354<z\363\315\275\245\244\271\275\222\221#\276\024i,>Y>+>\252\243\244\275j\301\276\275\277\367\230\275J\310P\275s\207>\275\225\315\235\275\341?\">*O\271<\362k\333=r\325\026\2763$\345=\005\310\257=fjF;0\341\371<qu\372\275nk\302=~\n->\263+o\275\334\314\376<\021\211\213=\323\3031>&\033\244\275j\024&\276\232\270\361=\236\260+>E\360-=\006p\333<\267n3>\355w\212=\303p7>\242#\036\276;\251s\275\277\203\231\275Ee\024>\300\257\300=\247jK\275\245\330\303\274\036\177\327\275D[\247\275\337\310\345=J\224\303=\370\260\027\275\256\001\016>S\312\322=$\237M\275\221\306\266=\210\373\037\275\327\352W=\300\241t=\247{\300\274\006^\021=\354\245\036>8V\274=\365\235\010>\301#\202\275yL\332\275U>$\276Rc\036\275\360\227\340=I\335\001=\010L\006\276\034\302\027=\341J\010>\211_\036\276\243\332+>H\366\021\276\230\316\007\276\223T!\276}\201\345\275\357\267\211\273\336\215(>+\010G\2754\262\323=\343\321\233;\223{_=\026\361(\276\333\t\206\275V\276\035\275H\275\210\275\270\321\377\275\221\271\203\275T\372\267\275\'\302\367=\351\216\207\274^\367\327<\003\2426\275#\266\030=\220\370/>&N\326=\004\372\014\276\251\307\340=\213\365\252=\337\267)\275\035i\326=\321\331\000\276\341\267\007=p\376\213\275\325\314u\275\002\264\235=\342\026<=\\2\271=\021\357\'>g\377\367=3e\001\276\372*9=G\315\206<\265&\320<\201\013\362\275D\0146\276\256\245M=\226)\260=4y\017=\270\345[=v\255\270\275`\212\022\275\314p==Y\027)\276[\013\234=\215\362\t\275\257e\303\275D\270\214=\002\346\333<\245\000\266\275\372\201\\\275\356T\311=\332b\372=\351\216T\275\341\310\222\275\334\350\355\275\031Y\353;8*;\274\340,\242\275\003\266\326\275\035\024\033\276vI3>\006\037S=\3317\341=\210\022,>\335\321\342\274.\023\241\275<_\264=p\210\314:.\340\006\275\305\n%\276\307\353\306\275\266)a={\356\322\275>\264\352\274\354\275\210;\232\343\200=S\325\263\275q\016\330\274R\325Y\27507+>U\377e\275\343\327\231\275\310\032\217\273\231Z(=\230S\037\276\370\202\023\276\275\005\234=&\237\007\276iW\375\2752\024\302<(6+=/\377)>\004W\311\275\021\372\326\274\374.\334<\227C\227;\374\036\240\274S\276a\275D\367\023\276\311O\020>p\t\342=\204E\236=_m\234=+F3=L{4\276#\034.\276\033\222\252\275.\207\355\275\354{\320\275\321&>:\276L\376=\226\2240>\236\216\202=\360\020~<\3673}=h\244(\276\301\202\032>\035\245\206=\211\253\323=\234\r8\275\3214\332\275\227\344\\\275\006\026\376\274\366\003,>\322d \276|\021\323=\262\223\036<\366z\026\2738\034\037>\014\253\022\275\227\3530>\tY\016\275`\036 \276\206\225\003>\323\231\357=|\266\204\275\024Hp\275\276\221+>\321\225g\275\2179\254\275fg\314=\034\016n=\222t\323;\261\010\332\274\260f\303\275o7\201\275\274\310\345\275\016j5>\366\350o\275\251\026*\276/\270\022>O\231\352\274\273\266 >\201I:\275EB\036=53\236=\024\242\261=.\267d<t\324\256\275}\206\226<\333\310\205=^\300\236<\241\027_\274S\361\034>\271%\026\276i\361C<f\254\352\273 \245\022<\235c&>\301\026\030\276\001\3053>\331\325%>B\036\212\275Qp\004\276l\003\017\276\004\305;=\356\223\260\275\226\367\322=\373\372\031\276\037\370\373=*\0356\276\020\336\252\275\0367\243=\362g<=\305\232\356\275\026\220\251;\353j\032>\031\342O\275\370\344p\275\007\324\033>\277\215\031>|\323\333\275|1\023=@\3223\276.5\254=6%$>y\225\025\276CW\224<\022r\346=\244\177\246\275q\340S\275\323\377\257\275z\014/\276$\240z=!\272+>\341\017\037\276\321a\254=q\006\313\274\r\026-=\364(\271=\\u<=E4\373=\373@(\276UI&\276\324\342J\2749\265\223=\2005\307=h_\017>:\300\002\276\323\245\022>\"\275\023\276<\272\001\276%}\037\276\354\256\022=\244\351\027>0\211\354=J\357\360\275b\234\004\276z8\035\276\346\274!\2765\346\'>1\207\216=\037\2745>\253\224\256\275\223\025\273<\023\360\245\275I\315\272\275CD\273\275\245\322j=\242\374\373=\260H\375\275%\362\014>\341/\366\275\020\212\014>\206\031)\274\000K\362=\210\376\255\275\204R\247\275\n\000\320\275\364\373\375=\243o\331\275\024\2005>\370{\377\275G\360+\276\340\231\232\275M\325%>S)\032\276\360n\207\275\350\366\r\276G\201\036\276\356\334\371=\367\346\021>\343\224\227\275\311\271\320=:\351\351<\222\205\r>\314\262\331=\345\217\032>\232\373(;Ej\003\276\321\345\277=-\264\345\275\343\226u=y+>=N\311\r=\213\345%\276d\037\262;\263\014\233\275d\016.>\247R\361<\347\244|<\234\202<\275g\241\031>\360V\027\275o\006;=\025\013\021>\273\3321<\361\202\327\275\352\"\307\275\220\226\242\275\250\262&>\'\230\002>,,3\276\241I\342\275\273\3677>\336\362)>\000\323L=4j#>5\220\356\275\266X&\276\010Fy;\333\033\210\275f\252\315\274Mb\307=\023\341\021=M\007\303\275\316g\037\276X\205\260\274):\363\275\374-2=\373\234\212=\264C\216\2747\312\325\275\323\221\001>\244y\027\276\026\374\366<N\2548\276?93>\022\007#>\021\245|=\203O1\276\237\277\001\276\314\201\027=\347g?\275\"\037\026<\346\033\010>\221Z\030>zd\212=\007/\253=\335B\325=a{\204=\0075\001>!0{=U\023\305=M\321\034=\252\365o\275\301\027\274\275\223\323\030\276\373\233\337=\230x5=%\337\3479U5\246\275\335\375\030=\201\033\\\275z\233\307=\353\206\233;\241\317\362\275r$\013>\366,\373\275\313\363\003\276\243\374\030\274IZ\001>\265\006\315<J$\361\275O\234q=6\017\r>h\270\356=f\0007\276\313++=\255#)>\302\347\373\275\233\266)\276\267e\363=D\256S\275)\353j\275\352@\260\275\'\252\373\275\320\373\030>N\220\360\275\353F\375=~\347\214=}\3105>)\273B=R+*>\023E\262\275\334\222\023\275\227Y\177\275\255\231\202\275\031{2>nZ\220\275\244\230\232=\230C\234;\240\n\236=\336|M<\262\257\033\276|\307\265\273\020b\211\274\371\026y\274\221\340\021\276r\343\024\275- \356=Wv\222=\220\272\234\275\267\313?=\247\215U=_\236\034=\277\\6\274\242\353\206<_y#>!,$>\305;\360<\221\335\303<{d\356\274\0240\032\276\016\264\026>h\315\250<\2362\034</\2638>\351\'q\275\016\220\303=\257\361\321\275Yv\330=\354\234\251\274%4\232=2\225\000>\346\350\272=\201l\002>_2%>\302\030\004>BZ\032\276\001i8\276AW\007=\016\t\037\275D>!\276\025\352\027\276\026\301\220\275+\023\027>\343\372\201=\364\037\245\274z\364\224=\270\213^:\256\t\360\275\031\\\362=\214\361\036\275\274\233\036\276\220rm=\203\375\223=\300o\363\275\177\300\362=\330]\352\275Q\326z=\003s\324<\224\030 \275S\272\005\276\3113\274\275\004\357\007>\371d\004>\273l\267\274\374!\037>J\035\002\276\007\314C=*\373\363\2754\005,>\307\214\026\273\nB\r>Fx#\276\366\010\300<u\253\031\276\034\270T=]\223\227\275\231\021\205=\234B\362\275\322\t\200=hQ)\276|\301\020\276\356\300\013>\'\023\255=>7\335\275\334g\321\275&\341\235\274,\320\016>u\203\357\275\r\214\034\275\345G\365\275N+\036\276\336O\242=\362\340\034=\214\3002\276\017\264\337=J+\030\276\310\213\270<\372*\343\275\327\356\016>C\353\010\276\'\206\003\276\365P\'>\270\363\302=\216\030\224=\334\3033>\321\272N=\325\364&>\274\231k\275\207\264\277<\277J \276\212MI\274\232d\341=\205\235\230\275$\243\313\275\305u&\276\2037\242=c\327\305\274\220\323\245\275\204\255\234\275\303\343#\276\226\006\206\275\275gv=e3\302=3pq<G\376\201<\331\210\036>\306\204%>\275`\245<\026\2506>\217\213\263=\200D\003=\303\212\274\275=\237W<\031\354\260<}q4=\331\243\360=\306\334\261\275ec\017>*(\r<\257\210\016\276\322\210\336\275\266\263L\273\241\267\256=O,\225=\"\310\347<\335w\001>cq#>`\336:=%\2543>\310\227\001\276$C\336=Y\2615=B\232\250\2757f)\276LF-\276\362\357\326<\030\350\316=\320|\262=\272\2143\274\024\3075\275\237\021\'>f\235\352\2755\276\274\275\356\321\312=\363C\261=\224\276\">\316;\031>\317\255\246\2755\347\301=D82\276\013\371\014\276\310C\007\275\272\334\027\276\273U\254\2755\2504\276\3373:\275nV\001>\030\010\034\276\262\036\177=OQ\036>\356X6\274\330\254\037\276p\"\262\275\005m\035\276\203\353\222=\27501>\207\275\376\272\214\335\374=\200\301\275\275\255St\275\267\253\357;\'8X\275)#\337\275GjI=\332\014l\275\023\323\030\276\302U\305\275o\2018>\031\314\247=\020A\221\275:\2054\274\177\223\277\275\274\230?\275\331?\024>\022z\343<3p\3359\023\265\242\275\274\275\001>\017\3166>\010]N<\207;\366\275\345\353\254\275\324\036B<\265ds=!\016\240=i\3666>\306\212\247\275rs@\275\223\244\030\276U`\233=\377R\002=z\351\374\275OU\014\276\274\352\020\275\343\017\214=\035\245\255\275\271\351\036>\021LY\275\007Op\275\257\345\007=\306\344.\276\230\263\356=\2762\026\272\005\374\017=\354\013\355\275\002\334.\276\016\350\"\276i\327 >\353!\025\276\340[\322\275\222\177\007>\342\305$>z\307\354\274\355\036\014=\373\253G\275\247\332\236=\253!\340\275\255x\322=Y\231\324<#\215\237=\037\335\360\275\363C\260\275\332l\263=\264j\223\275{)\t\275k\204\013\276\272\341\364\275h~!\276\017\370,\2756{F=\026gw\275\030\205\345\275*w\005\276\021*\321\275\357\354\010=\020A\010\276\356\201\346\274\254\254\326\275Ay6\276\315\3200\2763\004\310\274\330:J<\001\3333\275\r\363\334=\266\364\341=\335\243\000>\325m\253=\365\225h\275/\314\r\2760\202\020\276\312n2\276\247\336\236\274\034#\\=\215|\031\276c\371\003>\327\034\n\276\036\320\352=4\246)\276\270Q\013\276\310x1\276\213\2070\276\373/\003>X\217[\2755_\312\275\000\3722>`\214\023\276q|\343=\3314\274\274p\255\262\275\377\221\346=\025Q,\276\262\017\372\274EUO\275,\211\276\2755bH\275\0163\305=\'P\241=4\036\274<\314\364\350\274W\356\262=\351n\020>\211\035\253=hh\037>\335\001\016\275@P\034\276\316\203\014=\277\014\274\274\345\236\360\275/\215\264\275\301,\032=\326\351\031>2\013\035\276%\332D=\326\217\013>\352\366\217=\205\304\330<;\345#\276l\253\027>\003\365\316=\311_J\273\325\216\214\275\263\307\033>\2042C\275\277\261\332\275\205\035\224=\017\035\236<W\230\251\275\223\205e=\370\037\352\275,\364\214\275\'\030\354=\356\234\\\275\324_|=\301}\001\276\350\342\022\275\252z\034>\363Q\021\276y\341\014=w\360\373=Q\263\254\275N\331\017>f\2720>\231t\354<\"@\232\2758m\006=\264\241\245\275\226\302.>@_\201;X\357-\276\037\3573\276u(\334<;\306\233\275\352\010\035>S\225G=WnH\274\264&*\276\226\344\023\276@A\263\275\3377\326=z\307\014\276&\267\333=m\254-\276\334\331\300\275&\030\253=(\260\004\276\205&\320=\215\302$=\326]\247<\367+\330=\275q\274<\264\263\007=\221\036\206=H0\215=\270#w=\367.\211\275|15\276)v.>\315\230\"\276\2412\277=\364\377\204=\336\246\210=|\300#\276)pM\275\2145C\275\031\225\032>\203\367\010>\350\275\211=5\310y\274^]o=k\276\201=u\271\022>\335\365\035>\224\230!\275\301\331V<\344\225#\276\3614e=\261\2718\2762\323\252\275\257$\242<\036\036\350\275\220g\256\275\337*\340\275\223\256(>Ba*>\3402\233=\266\313f=\0270q\275\311c\036\276e\351\006>\275\307\213\275\310\225\025=\234S\032=\361\365/\276\266\363\370=tu\217==\271-\276\004\255y\275\023\251\031>U\023\201<\261\376:=\325\007\343\2757\233\005>]\351\325\2750\270`=<\363\340\275/\212\252\275\212\207\037\275\3739\033\275\276\203(\276\026\351\025\276T\030)>cU\034\276R{\024>\206\203n=\0302i\274p\306B\275\r\373+\276M-\001\276\245 \203\275V\325\t>e\211\017\276\302\367\275==n\037>\035T\316=\202\240\240\275\026\210\201\275\215T\225=\324\013)>\244\375\254\273\262\200\033>\302\302I=Q\372\341=\352(\014>\010Uf\275\237\213\263\272$\267#\273g\330\247\273\3013\363=#L\022>b\221\006>V\232\374<\366\336\006=t\351\251\275\307\2323>\300\006j=\377m\323=\033\2608>\247\315W=3\310\303\272\007\030\020\275#\003_=m\233\333=\020\277\266\275Ks[\275\002\2142=\337N\350\274\362=\354\275W\205(\276J\246r\274j\305\207\275TX&\276\313\342\202=\365\016\260=/\227(\276\301\302J\275\346\373\372\275\371\260\250<\274\3521\276\245\210\305\275\3627I=\013\337\'\275X\315\362=^z\r=\n\215\034=\027{\266\275\367\201\013>\325\007\224=\346\276\230\275\354\367\223\275\262\243/>\312t+>\267\343\017\276i\006.\276l\307\026>\3468\027>\321\025!\276\262y\317=\212h\026\276:\017\353\275\27493\276\344\367\204=3\374%<\034\366\314\274\366\r*>\355\352\005>\270&6;\032\245\213=\236\307(\276\230O\003\276E\327\304\275\264\311\334<\364\213\010>\3749\010\275\020\276\006\276W\353\313=\231~+=\316\252\314<\356V\334<\231\350\241\274PA#>{\266\234=\362\201L\275\267i%>Xfc;\217\"\313=c\206 =\235v\247=\372\016G\271\003\005\177=v\233\257=\375\374\247\275\305\340\375=&\0305\276-\304\013\275\335\354\t=>\206\210=\232\017\253\274\302\204\307<-K\264\275\016e&\276]3\261=\302\324\030\2751\2061>\033\222\366\275l\370 =\363^\336=\271B\000>\246\2151>\020O\312;*\345\350\275j9\013\275\373u \276\026\200\355=\337-F=:a\207=\211=\036\276&\227\277=\341\310\021>*\340\232\275\rz\227<\r\203\225=\222\310\215\275l}Z\275\365\246R\275G\342Z=\026\177\375\275\223b\224= \035\373\275\037*\005>\251]\022>\332\255\025\274\352\263\233=c<3\276L\205\345=s\304\000\276\310*\271<\344\3007\276\217M\004\276\014g\211=\361_8=\021\264?=\024\276\022\276\231\203X=\323l\026\274\234\307\274\275I\305\205\274u\217\347\275HMc\275\326\351\031\276\013\215->\253\366\371=\333\363\010\276\324\303\022<\331\030\273\275N\0367=\240\367\347\275\237\375\t>i!\027\276\366\352\236\274\276D\010\276\210k`\275\244\302\303=\007H\216=V\2758\275A/\324=l\'\010\276\021\333\345=*b\222=\207DL=\303\350\226=!e\036>\236\346\007>8\002\257\275\225\312\316\275\326\342)\276\204\3425>g\024\007\274[\360\337\275\rs\232=\267\375\024\276\004;\'>\267>\001\275\336[\350\275\2262\240\275\001\3731>S#\277\275\250\344\004\275\265)\024>\310\241\374\275\031]\201\275\340\274\254\275\201\236\201\274\331\347L\275\373&.\276\304\265\226=P_\010>\322\337,>\313@\032>B+\330=\264Q%\276\230\346\000\276&\3276\276\205\3336>\267\000\240=I\0200\276Z\306\025>\367\014\030>WG\347\275\350\264[=\272S\242;9\200\033\276~\201\352=C!\013\276\\\234\210\275\330n\316=b\010\327\275\317\353\205\275\203b\374\275\205\226\310<\271T\033\276\033\304]\272T\264\266\275+\311\322\275m\2324\276\\\314-\276\207\0336<\230\355\216=\354?\233\270\357\036\024>\270\035\"<7\324\030\275\027\305\210=y\364\337=\307\316\037=\312$9\2764\336c=\025\335)\274\r\362&=\257\242\215=\326\230\263\275\343xX\275\005T\'\276l\\\245=\265\314\026>\"0\"\276e(\376\275\031\nQ=2\266\361=\345\357\001\275U\3502>w\333\353\275PD\301\275\021e~=\355\322n=9\017l=\004n\344\275\000\321\311=\322\213\010>WK\251\275\274r@=\030\004\275\275P,\267\275\025v\310\275\020\331\351\274\034\225\024>\322\233C=\"\020\236\275\233\257m\275\255\003\360=\225s\305\275\304\354\340=H\264K=\206\350\\\275\1776\227\2734N\030\276\3627\026\276\211\032,\275|\302d\275\355\\\233=\331\313\032=,\243^\274\227Z\344<\351\010\310=\357\n\377\275p;\267=Jxj\274\\R\355\275\345]\267\275\264\303\211\275\230\004\006>\005\002\377\274\356H\301\275\250\267c<YT\017>\247\007->\225>\023\275\020_\243\271\235Y\t\276\014\024\364\2751p\373;\267\024\013>\225\t\353\274G\225\272\275\317\371\222\275iL\t=\\\256\367=r\221\346=\326\331\025\276\233\025,>\014\320\205=]\373z=\021\227\023\275\352\210)=\026D\020=\017NJ=\231q2\276\264\314\256=\303\t\014>:\"\026>\374\007\355\274-%\347<\245\211\n;\246\2535>\2538\331=\377\271\016>C\264\"\276\254[\200=+W\320=\223\010\025>}\341\"<p3\216\275\001\002\346\274\026!j\275\301\017m=\r\026\235=\206\370\246=V\364\274\274\253v\265=r\r\031\276\201P \276\361\376\210=9<\002=P\200\351=\356R\347<\261\3330\276_X\267\275\356U\357<F 6>\030\217l<\230\233\231=\306J\374\273v\321 \276\001\232\'\274\236\r\035>\261Y\022>\365y0>\026\031\333=\215\303\341\275\r\224\022\276\026\261\377\275lO5>:\332]=\356\334\216\275\024\'I\275\263\233\315=4e\027\276\373d\375\275!\036)>\234\350=\275\246\354D;\260=\001\274\230Y(>\360 r\275\235\370!\275/M\005\276Q0*>\232\242\000\276\314\211!\276\232\\\024\276\025\242\036\276\307\024\377\275\333\366\006=k\023\n\276r\036\337=F+\225\275\226%\311\275\3240\255=\310\016]\275\023\377\374\275. \256\275\241?\037>\3653h=\301\347\211\275\253\303\007>Z\214\005\275\320\330o=\010\010\021>\365P\030\275\010oN=\024X\001\275\344\244\330=\327\005 >\224\244\236=,e\241\275\313\206F<\300\301\">\302\326\t\276it2\275\020|*\275\273]\216\275\034;\305;\014<\222<\027\036\237\275\360\200\371\275\271B\010\276\224\'s\274\033V\036>\245\026\016\276O\226\352=b\003\006=l\274\362=\266\274\252\275\2071\t>\032\2471\276\0012\031>\375r\t>\274\007\010>d\303\216\275\305\0064>F\035f=\000H6=\363\317\221=\303\343.\276\314\3203\276N\320k=\312\261\304<\033-j<7\262\207\275G\003\350\275\265\2108\276\t\005.\276l\366\371=\n\217\202=\306t\2578\241~a\274\264\336\001\276\340V\373\275\037\036\333=\220D\"=\275{\236\275\276*6>{\2037\276hx\016>7\360\n\276\320r\316\275\253w\352=\272\3301=]\306{=\313\275\013\275\231\327\217<Q\237!;\244\257@;\301\263\237<\024\371\352=\322\256\000\276\322\332\000\276\355U\017\276\261\014\267\2747\307{<w\340\030>\300\312\216\275\324\255u=$f\271=\201B\361\275:\204\372\274\235\352\334\272\201\222\302=w\334\200\275Ix%>h)\267\275TB#\276\243C\211\2741Jo<\217C7\275\306\001\330=y\236\004\275\203\363\001\276Pqh\2750S\035>\321\304?=8\221\203=\324\253\237\275\3550\021>\225O><\217\207\342\275$dT<k\277\013>\001\315\314<\337\003\274=\327\013\031\273\243\031\377\275\243\014~=\251I\226=\034\317\320\275\002\010\253=\017\361\004\275\026\350k<\327\323\372\275\243\200\305=\211\276\237=_\007\246\275@{z\275\236\343C\274\260\251\237;4\217\036\276)\033\250\275\267\322 \276\207\030!>\323F\305=\005$\371=\230\014J\275\351\2316\276\234PM\273\273\344\005\276\333 ]\275;Y\347\275\223\257\036>\273\343\233\273\245\256-\276j\306F=\250\014\220\275\"\230\013>\312o\261\274\2342p=Uz\022=\275J\014>\374\302)\276$\373\241;tgm\275\021\no\275\255\036!\274U\277\352\275B\323\351\275P\210\262=\371\034\347=\236\002a=;\200\377=\"5\271=\206\354\265=\023\251\256<\230&y<--\243:X\301\210\275Kv\r>k\005\316<\350\337\214\2751!\201=+R\342\273l\310q;\322\330\373\275\312B\371\275\272\275.\274\2551\027\276\233M\005\276\275)\222\274\223S\002\276i\036\254=\277!\034>e\024*\275\271\3029\274,\244\007\276\250m\371\274N\364\345=\302-\354<t\224\021\276\t\003,\276\000\014$=\033\217\240=d\203-\276\306\016\204\273C\013\006\276\224I\023\276\362\232\212\275\220(\261\274\016?a=\307\3060\276\257<A\275\t\332\275\274=l6=`o?=\265g\227=s\2400\2765\2217<\251\203\000>\323\245\001>\0238\221=\027!\345=\231\300E\2754#\225=F\250\021>\204\243\200\275\274]\n>\0276\330=\251\322&\276\000\374\330=\354\240\026>\023>\214\275\032\317\006>\337\021/\276\267Y.\276\367\321\017>Y\001Y=y\212R<h\300\324\273 f\326<\345\266\334<\322,\034\275\030q\343\275?\216l=\326V\350=\021\247+\276\022}\336\275\251G4>]\231\264<\222h\313\275}A\212\272\306\336 >Z)\301\275\303\334\243<\361S\267\275\212\276\325\275\324\234\233=1Y]\275\305\r\235=\314\364\031>\210\227\261=\250\034\261\275\213\"\007>\013\263>\275\021\356\262=N\330\037>xN\346\273\255\366\025\275\346\0378>p\207_<Tl\235=\202\305\267<\342X\251<p\360\032>\305\273\347<q\371\327=\t\313\345\275\253\227\022\276\330\256\205<\226\213O=\025s\266\275\211N\312=\317\350\014\276v\3741\275i\252\241\275>\230\352<&5\314<F?\024\275Kf\375\275\364\\\332\272\177\202\373=9\332|\274\003\235\250\274\356\001\241\275\354Y/\275\031\347\342\275\354d\034=$Y\355\275\363\201\007\276\"\021\206=\316\303\006>\303\300\036\276\022\246\031\276\310\304j<\177\245\275=\255X|=R>X\275\354\374\202\271\330\331\036>\034\370$\276\331\3006\276\372\0346\276}\347\"\276\217\007\036\274!.\312=0y\256\274\222\3646>\311\271\354\275\030\330\265=C=\213<\340\323\034>)\'\014\276\213\376\006>&\206\266=d\244\010\276<\237\377=h=\010=E\350\200=b-\237\275\030\2026\276U:&>\313\007\330\275\321[$\276\245\313\017\275}\317\314=\037R+=\004\367\215\275\376-\274=\177\266\001\273\001\266b=;\027J=\307\342\335=l=\271\273\271\332\374=1\317\005>\323\345\267\275\002\327\"<{\023)\276r\n\325\274\035\336\017>\006p\306\275\213\'\332;\374\351-\276@\334\340\274\n\252\016>\322\r\243=I\347\310<A\233.;\002\006\036\276mT\350\275\260\014\021>\2576a=\371\3576=\215\216\001>\364z\226<\033\212\003<\"\277\233\275R\3639=j\335k;\035\001\034>M\322)\276A\243}=\262\221\317=/\213\201=K\314\251\275\251\267\254\275\302U\310\275{T\035=A\372\365=\\\024\025>\201^\027\276Ij#\276PJ0>\003E.\276\312\354\337\275*P\201\275Oh\216\275\266Y,\276\324\304\003\274B\324\034\276\261\022\272=\324\016\377\274)\207j=Q9\177<N\236\">b\354v\275\375FP=\001\205T\275\202\202->\202;\211\274\340\247\323=1\262\037\275\372~-\276T>\367=\246H\005\27463<\274Y\235%\276\376\001#\275!\014w\273\303\270\022\276\3765s\275\347\362\314\275\267{\316\275\366\300\024>\303\232&\276\002\313\236\275\336 \311:U4E\274X4\322:\271\010D\275F\027\305\274\327\364m=\260\252\242<[l\336\275\324!\\\275\360\236\211=\005\tJ\274\t\370%\276!\010l=\037\0002\276-A\014\276\213\365`\275\226JR<q\346\n>\352\364\024\276;\372\">K\376\017=\311\377\254<\320e\214=0\352\311\273\314\267\343=]\364\205=\003z\322=\361u)>>\002\030\276[\332\300=\362o\260=\204+\215<\367\231\362\275\201\032\023\276\274\373\r\276\377U/<\010\260\001>\014\365\320<?\311U\273k\257(>\334\201\311<*qb\274\321\203\345=u\267v=\3575\005>0s\000=`\031\n\276*\307\014\276\306\334\024\276\343E\314<J}D\275\306\361\321;\271\217\316\272b\212\344\275\\\300$>\275\335\362=!b\253=\214\305o=\\\314 >>\316\257=@\210\350=\346\3114>\270\354\001>x\241\310<\023\254\370\274gF\020\276(\334\n\274\335\220\032>\375d7\276\337\365\030\275)\214\020\275\210\233E=\036{\254=\366=\014\276v:\323\275J\205\340\275\342\252\372\275\334\312\323\275f\360\335=\304\013\034>io$\276\261k\025\276\245\001\270=\230\371\006>L\330\255\275\372\362t\274\334\350\263=\'\362\310\275\001r6\274\316\370J<h\021->\3752\256\275#\217 \276.\345\274<\355\r\361\275\300\327\014=\365g9\276\202@\021\276\330\002Z\275\n\213P\275 \037\370\274\316\264\315\275\310n\343=\013\234\t>\003>\357=u\310\340\275\221<\014\274(\216[\274&\341\323\275\205\326\030\276\016g\207=Mk\016>\221\264\241\275%\361:=\234\305z=P\230l\275z\337\301=\345\207y=>\213\207\275\247\326\013\275(k/>x\\\n<1[\313\275\353N-\276\014B\n=\201\345\372=|\351\235=\360p\305\274h\207\000\274\247S\231=Bg\177\275;\235->5\227\366\275\314u\254\275I\303t=\362\203\233=1\305\330=\"S#\274\226p\334\274B\373\363:\025\020\035>l\333\321\274\330\332j\275\033\037\273\274\266`\313\274\372\374\266=\211\1775\276\367\323\275\275r\313l\275\027/2>J\024\307=\312\3078=\332:Y9SF\213=\210,\307=\245\325\034<3\217\026\274\321>\271\275\375\246\032=\024\225\326\275CH\251<(K\275=\307\222\357\275\265\2612\275\033\305 \276u\254I<5\341\317=]\t7\276\354\001!\275\3432\326=g\216\t\275\261\207\022>*\330\r>{\000\036>\333\252&\276\tgj=\343Q)\275\354\276\244:\334\344\362=\223\026\212=\365~N\275C\264\323=P\257\265=T\375\030>\275q\007>+\347\032>\t\037\022\276\2617\027\276F\231R\275\270\2142\274z9\346\275\245\202\036<\316h\370\275VL\020\276\177e\010\273\300\273\257\275\341{\361=4\323$\275d\266\365\275\211\341\362\275^\275$\276\254\0108>\366\232\n>\3552\343=#\333\016\276\202N\242\275\234G\020>\374_\363\275\205\205\254\275\265k\034\275\305\235\021\274N\254\340\275s\206\262\275\304DB=\363\250\027\276\230|\352=\\7\304\274\207\333\034=\031\255\236=%d\373=r!\250\274fpI=bD\001>>\242\034\276\201Z\013>gId\275;-T<;\235\021>\350\202\365\274\362\230\373\275v\3358>5J\356=\223\003\334\275v\020\017\276&\006\221\275\304\'\265\275z\247\370<\034\320\266\271\335\277\037=<\030\355\275;\013&\276\366\025\376\275\372\030\003>.|\234\273\36032>\314\3665>yy\273=\2456\351<c\021\217\275g\377\002=\352\260\003\276\354\027/\275\374\036\373\274q\270B<\373\256\334\275=\353Q=\212\271\027>\021\211\245;W;\301\275\020\261Q\275\030\025a\275\263\243\000>\037-\277\275Y\334\244;3~\010>\244\265\033\275\017\\\274\274|4\223=\2747\037>\254\370\342=\020\177\034>fl\005>f\233\272;+\354\252=\022\370\'>\213$\004\276\2424\256<\335\211\314\275\345\272\021\276&\223!=9\3315\276\003\3307>\266(\256=\206\177\304=0\375m\275\273\334\">4\r\\\274\033`#\276\n/\213<m\021\335=\243\220\'\276h\035\025\2764\302\022\276\n:\366\275\007\303\337=\317\310@=\203\177#\275\363]\010\276U\377\312\275\354M!>Y\314\231=\353\353\312\275\352\252\247=\277_\020=\330kg=\273Z$\274x\367\203\275qmH<\333!\234<?\236#>\361)U=\020:\245=s\342\272=\341i\016\276G\270r=E\023\001\276MN/\275\232l\032>\037\241\037>\222-\317\274[\364!\276qf\016=X\r\025=Z\3111<\036F\312=o\000#>\216l\337\275\371\353\014>`Pc\275\320(,\276\245\276Z\274\377R\214=^8\002>K}\272=FL \275\274c/\276\351\373!>\207\263\214\275n\363\014\274sN\026>\257\215+>\272\024\227=\305\230\260\275\t\\\373\273\234\306\177<J\374\006\276u\217*\275)\2549\275\347\310\246<\227P\361\275i\222\217\2752\351\210\275\227\303\243\275\355\346\'\275_<c=\310\1772<\031Jr=\266\267/\276_\204#>\356e\366=TZ\301\275C\'j\275\205\n\030>$D%\276]\033\">Z\000\345\275\344\021V=\316\205\'>\371-\271=\313\267\317\275\361Q\254<~\031b=\235\204\316=\202i\356\273\032hR\275\341U\r\276\007\245\t\276f\200\315=\372\2644\273\373O\262\272?\256\343<S\364\204;\307l\334=9?%\276I\377\371=\337\356\357\275-\374\214=gx!>\360\205\271=y\365/>_e\021:\353\212\003=W\215\222<\013F\014\276\356\023\213=\202\350i\275\345\354/\275\240#\305\275Q\260\203\273\275\272\031=:\264q\273 \2126\276\377\030\350\275\263ec=T\026\032>\336k\336\275\035K\334\275v\341\324=\222\317\266=nz\322=\032\007\001\276q^\000>}_\236\273zK\216\275\2657(=\317\2020\275\277\022k=\221\030a\274\371S_\274\326G\025>92\036\275K(\367=&x\031\275\032\010\225;H\010;=SE6\276h$\003\276\003W\356\275\27608>\304B\000\276\214\261\241\274\253)\033\276\242\267\035>/{\352\274\237\013\016\276;@\374\275s\331\275=\005\234\265\275ZW\227\274\343\257\347\275\355f\023\276\016\372\224=T\210\372=\234\237\020>5Q\277<)\357l\275zS\215\275\n}\352=\314A\262;\234\230\031>\214\306\210\275p\205~\275*\321\353=\'\343\024<\270\0378=@\310\373\275N\220\375\274G\240Z\275\326(\024\276\374F\315\275=G\376\275\275>\271\275\022/7\276\003\277\355\274vm\260\275;\256Z=Rz\253=\376-\311==\300\223\275\014\363\353=)F\003>)\357\321=\252 \255\275\006=\007>\033\033\374=\326\240\034\273L\300h=\035m \276\315N\226:\025*\026\276G\254\226\275\333\230Y<3\\\263=\330@\352=\007w\362=P\241\324\275\300\\\231\275f\320\303=\346\224Q\274\247\233\373=\305\216\231\274W\325\207<\342\361\267<\031\301\003\276\236\2623>Ue\023\276$\246\201=\314\337m\275\276\305_=fds<\222*5>\241\272\t=+\247J=o\032\005\274\272\361%\276\273$\\<\033Q\313=\276\237\202<9\001\316=\035W\027\276x\321\001<\317\305\275\275\345t\221=\037\177\237=\000-\266\275\"d\221\2736\256\005\276\315\371\034\275\025\224\226=\200}\035\275&q\262\275\t\270\346<\221\364\033\276L\2457>m$\350\275m\344\317=\372+\330=\346\023\013>\300#_=\223\353\'\275\000k>:\03557>\333\375\370=g\247\t\276\301\301\310=:\237\007>R\321%>\035R\305\275au&\276\315\316\222\275q<\322\274\217K3\276d\357\001=ji\n\276\262\334\364=R\330\000=\240\264\201\275\354\215\034>\205\231`=\014$#\276;\2130\276(\323\034>\241\255\323=u\355=\275\252t\023\276ci*\276h~\224\275\224\236x=\220_\016>\003b\223\275Y\337\324\275\361\230\247=\231\255\340\275;\2432>\020\360\037\276\227~\332=\305\017\027\276\020\370\267=Y\233\345\275e\317\364<\006\207\222;\013\0042>\037\272\270=\262{\321\274O6\352=\333\373\031\276>]\030\276;^\245=\014\177\234;\301\250\274\275\265\347\236=\337/\247\274\275~\260=\311B3>\375:0\274\377n$\276#\375\223=\034\361S=\345\031\276=\227\330\342=\301\225\373=\024SR=\232\370\266=\017\3710> v\327\275\311\307\311\275\037\r\303\275\3252\270\275\240\204\222=\342\253\003>V\322(>;\3543\276\212z\003>L\222\034>\312z\246=1x+\2758M(>\327\255\321=\313Q\317=\304`\316\274c\r\037;#P\263=_W.=\351\036\004>J:\037\276\204\2377>\2739#\276\230\231\376\275\030J0\2762\252\336\275\3713\'>\271q\263\275l\002y\273\211\3304\276\265>\255=n\322\000=0\335?=\033\034\200=1\"\210\275p\313\302\275\222\223\377=\221\320`=\311\320\364\274}\302\337\274\337\007\261\267Sk\031\276>\220(>\352\0278\276\037\311\026\276%\300\203\275\222\246\030\276\236\226\265=\262\333\023\275\340\367z\275\363\211\243<\0007\253=\224\314\355=\010y3\276\2608\367\2757Z5\276\313\262\032=\317<\270\275p\014\001>q\266+>\004K\215\275%L\206<\004\242\004>\312,\214\275\302,#>\262\2541>V\2503>QLi=\245\'/=\0276.=\245\346}<\362U\241\275\352,\r\276\357\261\332\275\350\302N\275\\\304\310=\265#b\274\311/6\275)\350\362\274\270\207\002=\373i\217;w/C=\274\337\211\275\236\324\337=\327\304\313=5\345\333=K\244\364=>\356\223\2750\0146\276\254_r\275U\361\374\275\006\314\245\275)P\344=\300\351\333\275\025,\313\275`\227$\276)\3030=\007\272k\27557\243=\340\2150>\221Z\237\275\206B\345\274\253\337\366\272\020\275,\276+\035\276\275\032\320\233\275\01702>\001x\237\275Co\315=D\316\007\276\230uO\275\312\367\031>\234\253\000>\277\214 \275$\020\032=pW\251\275uJ\021>\357\034\223\275\322\177\251\275O\006\334\273\"\251O\275\335\310%\276\354\233.>0P\177\275j\255\n\276\003\216\005\276\266-\211=\327ug=\321\322\013>,\363(>p\302\036\276\372t\007>\032\320 \276\032=\036\276M\254\324\275\037\363\341=f\027\205=Q\254\370\275\242\3260\276\016\231|<f@\347=B\234\003=\275K\353\275\221\242;\275\241\346\217\275<5A\275\310]\260=\265\314\331\275Qks\275\213\347\227=#f\337=A\034\n>w?0\276\017\027;:0\204#>\022\253\013>\263\026S=.\217v\275\3407\343<\\<\365=\027w\303=\247\327\326=\232\007(=\251j\361=<2\002>f!/\276\224;\220<\234\243\036=1\236D\275\305g5\276\r\026\274=\210\275\277=\200\001\030>\342\235-\276\020\002\304\275\367\365\2158U\226\001>$\020\362\275@\340\227\275\301\214\017=\373q6>T\0203\276\327=\017\275\243~\017\276u\352\025\276\371\037\320=\254\350,\275M\276\027\274\307\024\221=p\371U\275\222\202\030\276\376\201\351=\350J\221\273\332\370\364\275\234\213\330\275\364\266\324\275H\341\305\275-\342p\275\221\325\225\275cR0>\025\342\367<\347\337\364=\345,!>\215\024\240<A\254\031\276+\250\225\275i\027\347<q\200\001\276\376\244\206\275\377\332\342\275\340 \246\275r\276\247\275W\371\235;\020!%>T;\003\276\314\232!>9\021\014>\226E\212<\264+\307\275\236\245X=\200\257\211\275\254\363\267\2753\354b\274\201\217\323\274\332@\032>\376\017\024\275\324\375\r\276\237\252\236:\261f$\2768\342\030\275-?h\274d\267&\276\3643\363=\226K\022\275\311\000\037\275\376J\221\275a\000\034\275\367\321\301=\2335\277\275\033\231\327=\223\201\203=\026|\r>\007\224\026\276\250!\337=\tS\034<\275\253\036\276Khg\275m\221-=)\201\372\2757H\256\275N\203\274=\002\215\330=\3332\026>3\337\225\274m\274\036\276\351\307\027\275Z|\235\275a\020\362\275W@3\276\021:&\274x\200\027\276\377\330a\275\366\022\306\275P\3306>\030\367\303=Uo\210\275O\313\021\275$>,>\010\357W=\214\245)>\203\017\"\276D\337\334=\030%\251\275\346\304\261<\277^\304\272\253\361\027>\362.\275=\301\013M=\247\327\215<\373\201\331\274\006iV\275\233c\024<T*P\275\367\355\327\2752j\355;\220\332\n\275<A1=\212Y\341=\020\310\340=ND\272\274T\211\334\275\036ri\275\365=\346\274^-w=\247\316\013\276\016\236\033>\304\0168>\220\327\032\276\261\266$>e\0330>\346\033\033>\335K\017>7\332\005\275(\341\252\274\020\354\344=\256[\223=_\031\252\274\247\210\340\275\02033>\\\236\224=\246\321\304=\026`/\276\0042\004\276\021\201\270<%b\240=\302|4\276\235]\304\275\274W2\276q\342\237=J\356(\275\364\303j\275\260\246\306\273\276t\304=\213\033\r\274\222zd\274Xb8>U\337\210\275&\2475\276-\340*>\tp\023>/\037.>\000\253\337\275\302\254\t=\225{^\274\265R\213=\3546G\275\321p\355\275\332;&>\037\375Z=\311}B=\r\222\027>\340])\275\305\003\271=\304\340\260<\037\210\373\275\301q6>\"\216[=\014\247\321=D\371\">w\225\273=\311$\325\272\034/\377\275\220\226y=\305\374\257\275Q\233`=\277\260\301=\323x\350\275\302O8\276Uj|\274\014\',=1\301)>\224\326\014\276\026\356#>g\n\\=\327\'\337\275\361H\022\276\211\357\311\275\330\321\020>\356F\033>\336\210\276\272\272\257\017>!.X\2757\252\031>x0\305\275\321\311$>f\260\313\275b\353\005>\232\202\351\274\030\310\000>\215\366\203\275\271^7>\177\245\304\272Z\235\302;*\263\030>m\204\204<\357\211t\272\343\365\034>_+\252\275\033\365)>\032\226\236\275\024h*<\036\260\004>\330#\016>\277X3\276\347\036\230\275\342\257<=6\310\277\275\315\3345\276\365\346\032\276l\215\"\276<\314S=L\017\025\276\373\317\377\275<\323\023\276p\272\022\2758\353\300\275\014/\262=\224\263\245;\030W^=Uf:\275\272\346\336=\201\024\264\275\220>\262\275Y\347\252\275{\225\370\274!\324\035\276\034\271\276=\006QF<8M\244\275i\343\002\274\001B\032>rF\\\275s\306\265<Y\335\355\275\214\025\240\275\345P\033\276?\006\035\276\007Qc<\325\263\300\274\226\341\330\275\307\361\350\275OH\030\276\000A;\275\207G\'\275\320\277\335<\033\026\302=\247r\375\275\363U\030\276p;\344\275c+1>\314\224\207=?\265\374\275\016\221\221<\3032\254\275\350\2147\276\217\325\033\276\177\360T\275\235\244\t\275y\2177\275\335\372\023\276K\2570\276m\317#>\322\251\275<\314!9>\364\332\001>wp3>\362b\236=\010:\254=,_\030>\344\305\352\274%\212\346\275\275\232\373\274\273\355\203;\314\336\231=D\373\240=\322\254(\276\001<\262\275\367\210K\275E\2648\276\315\n\364\275\300zS\274N\205\273=\306\320\317\274\216; \276\345\215\360=\214\013\256<\343:\261\275\333 \234\272{\372\035\276\237*\311=\002\350\033=\232\353\220\275=;\277\275\253\2467\276\226V\363\275\353\003\306\275\027\371\241\2756l\363\275\236<\243=\r\244\013\276\241\rl\275\266u\014\275\366`:\274\031=\036\275H\252\227\275\272\0271\276\343\001\026\275+\007A=g\025\344=0\236\327=58\005>\377\235\371=\220\343\342\274\200\333\223:>p\t>\301o.>\235\2158=\203c\030\2732\251`\275\332\304\013<t\274\306\275V\240\231\275\177F5\276\314\343\204<u\260\250\275\325\023K=\002Z\321=SDo\275Z{\376\275\255\250\027>\026\352\244=\004h\232\275\0333\321=\"\036{=_*8>\005\252\270=p\303\237\275W\013\214\27521\213\275\346\225\243=\034\304\275=4\354\375\275\371\000\311\2755\265\333\274\335\215\343\275\017~\027>\375\033P\272\336Ld\275\273%\312\275\3616\201<\246\030K=\t\027\243<\322\261\021>\270\353\036\276b\002\231:\231L\306\274\214\277\323\275gv\243\272$}\327\275\277\201)>\373\031\224<\266\350$\273\276\325\320\275a\231\031\276\375\317\215=])\222\275\020\264\n\276\321\314#>\272\263\345\275>\024\023>em\026\276T\200\272\275\350\2750\276hh6\276o\341i\275\200)\236\274\036Q\263\274\330\335\310=\3634o\274\245Z\246\275\n\216\341\273\340,2>Ct\014\276w\264+\276\246\252\351\275\025y}\275\234\032!\276\237V/>EZ\006=\242\361F\274\260 \036;\331\331\017\275a\t\257\275\2307\356=\016c\030>\334\031A=\034\3713\275\177h*\276\221&\020=\347\260a\275\327#_\275\220\354\334;\324\013\007\276V=#\276\351\'\031\275\366\014\251=\334\322\303\275\336\351\241<b\r\210<\352\204\377\274~\243\362=\210~\225\273\355{C\275\214\205\326<7\203#\275\310H\374\273u;\036>\216\312*\276\306\351!\2768`\227\275b\225\311<\025\260%\276\364f\211=YLi=*p8>\3751*\275;\345$=7\204\017=\255\332\367=\266/\010\276w-\016>H\010W=\020&:\275\036\252\314\275\002\377\241<\250A\005\276\264\032\212=I4\372<\2778\334\274 \322\010\276\214\353\346=\022\356\020\276z\27558L\371\r\276\201D\030>\371\251\313=\220\343\272\275\354\036\240\274\016&\033>\230\310\313=\t\\\335=\320\022\241\273\262\271\354<\312\310\020\276\372\362\350;\035\356)=\202\234h=\350\221\365\275\236@\002\276l\007r\274\2728\337;\327?\005=\350\240{:\000\3240\276\035=\227=k\351\366\275\223\263\252=\334\215%<oC\254\275\353\223\r>\017o5><^\247\275,u\216\275D~\243<\r\271\310\273\253\0202\275\343}1=\334\325\270=\022\331O=\231*\304=\376\216y\275\250d->\311\320\227\275S<4\276\235W\214\275\314\312\351\275\344=\336\275bH\030>j\264\213<\205\177\326=\224B\236\274\354\025\235=\266\320\325\274\222fk\273\236y\002\275\342\306\347=w\217%=]Y\304\274|\037\022\275 \277\374\274\327]T=\010\020\271\275\010\224E\275\237\000*\276E}8\276\021\312\031>\027W\'>\037+\331\2756G\337\273\347nO;\244yC=\215}\355=\024\215\251<\365\325\366=\354!C==\246\245={_-\276\246\225m=\234Q\373\273\221D\300\273\3573\023\276!\250Z\275\242\005&=\177\303\033>\343\215\324=\r\215\354=\274g\037>\272\314D\273\345m8\276du\326=W\317%>t\337O\2756\033&<\2229\363<\323a\207\275#O\005>\260\224Z=\336\205\202\275\373>\270=\206t\205\275\341\345\335=\215\207\320\275\005\264\'\275\241\372\205\275#\232\026\276qMg<\234\332\346=\264c&>Pn\025>`\263\221\273\365\253\317<\314/}=Q\351(>\335\352\210\275\027\332\314\275yR\226\274\3370\214\275\022\037\334=\213\027%\276Pf\"\276\366G\035\2757\333\276=BD2<L\211\316=\264\016\010\276\022\3364>\344&\263\275.\343\225=g\010*>q\261\227=\344\211\264=\305\345\253;\207\024\340\275W\022{=\'H\350\275f\337\005\273lr\000\276\372~m\275\365\332$>\330\207\233=\226RS=\036$\252\274\231\0269=\027\244\037\276,\266\250=;\350\030\275\030\2723>|U$=1$m\275$\017\036\275I\220\341<\214\234\345=v\276(>\222\232]\275\377(\236\275|\007\316=\'\010\210\275~\n\247\275k\234\000\276w\230\020>iJ\036\276\2129\036>3l\205=\312\\\233\275\242v\313\275\325i>=\333,\340=0J2>\010\357\n9\032q%>\323\321\'\276\246aT=\376\0316>p7\256\275P\206\205\274\007\022d\275\267\3277<\206e\024>\266\3457\276\3557\260\2749\214\253=\227\216\013\276i\3101=\236\013\351\275\\\230\235=68M\275\016d\353<\023\241z=0\277\021>6mM=\332@\275=\224B\"=\224\206)=7\305\006>\333[#>\224\346,\276\230\333\246=\216\246\203\274\334\361\035\275\316\324\013\275v\004\331\275\240j\227;\306Xf=\207|\204=\215h\345<\244\027\314=\365\361\013\276y\203@\275\246\t-\276\217)\"\276\3602\216\275\246l\231=)j\317\275\332I\006>\177\010^:C\003n<x\240F\274v\267\370<\336\220I\275\002y\344;\212Px\275\262-\377\275\345\337K<\3437\335=\3610\n\273,%U=\\\200\355\275\331 \350\275\237\240\336=\000I\303\274\005\345\305=\310R \276+\3007\276\367\266I\275\013\344\023>\247\317\305=D!&=\310\226\010>\323+\021\276\262\343\271=>\261\247=\316\303\214\275(_\277\275\254\237\'\276\234\205+=\354\320\320\275\253\226\347=\033I3\274S*2\276\200>\206\275\003\354\207=\350q\222\274>\036\027\276eo\321<\306L\320\275\3024\366\274\247\264\327=\021Z\n\276\366\306\211\275\241)\265=\344\336\221\275q\235\r\276-\215!\275\'\313\006\276\363\244\353=\340=S=\n~\336=\025\006\234\275\317\317\025\276\205\233\377=w\224\270=k3\236\275\020\314\314\274\255\251\302\274U@)\276r\355\014<X>\227;@q\372=Za)\276n\226\024>/\223\227<\326\246P\275\220\336\254\275\355\244\t\276y\222\027=+#9>n\255\254\273\206w\252\275\n\223\003\276s;\025\276\202\314\014>\331q\004=\221\375\206=*:9\274\317\273+=\235\213\'\276\300v\">\t\031%\276\227\217\302<\0019%\276\003\023\226=\217\325\307\275i\201\310<E\000#\276;q\270\274\021\034\317\275\030&\340\275\035\317\032\276!\243\255\275\365\317\234\275\300O\036\276*\007\207\274\006\367\373\2752\370\222\275/\022\227\275\373\014F\275\350\315\334= m3\276X4\265\275eI\350\275\t\017\273=\212%\023>\244\303\340\274\224\205A<\221\375\233\274;|\205=\350\233\024\276\342\217\000\276\013\233\207\275\262\260\375\275\270\236\006\275\344\326\341=\2556)\276\000\373\360\275\315\212\004\276\372\307\022\276\363\226\260\275\244\313\206=4\001\017>&m}=ns\365=\265\215\375=\020\246\273\275t\311\377=3]A\275\232\373\326\275\206\272u\2753D\265=\335\315\335\274\027\321\010\276rB$>\304\016\356=\234\370\013>vX\346=\036\235\020\2762\366\037>\324\323\037>\025\034w\274t<t\275\365\330%>:\2523\276\"k4\276(>]\275\n\2724<\344\300\001>C7\024>\250\222\237;3\244\230=\326\256M<\256\005\364\274\"\220\355==#\304\274\326\261\334\275\337\246\t\274\244|v<\263E2\275\355\312\310\275\223l\273\275\241\020Z\2753\355+\276\317s\317\275\366\267\273\275\351h\022\276A*\267\275\314\214\236=T>\253=G\2702>\260\220\367\275\323g\'=|\267\236<\210\\\024>Ac\326<-C\223\275B\022$>\364\310\236\275+\020\013\276\341\3116\275z\005\356=\274\2041\276\217*o=\307A\014>\033\335i\275\364\313\372\275%\r\227\275J\340/>\213\"\267\275\371\242\377\275\tVn=T\253\321\274\2122\025>66\304=\000(\214<\272U\360\275\374`\316\275\352\036\341:x\322\302\275V\376\331\274\r\272\037\276\231\310\231=\340\234\210=B\026Q\275\210\352\006\2764j\310=^h\'>R[\036=\232D\034>\310*2\275\374b\272<\255#\006>\376\341f=\355\225\224\272\343HC=\2119O\275\t+\036\276\375f<=\212WI=\374+\t>\224<\251=o\n\342\275\334\3169\275&\205k\275\327>\2346\005\027)\275\225\026\262\275\226\250F\275\311\035\365\274y\355\026\275k\202\033\276mve=\250\\\035<\341<3\275\2340\342=\273\032\326=\375\367\306=\003\345\273;*\220\002\275\031\317\344\275\000\037\265\275\264E\346;\214w\312=$\367 =\026\010!\275T\016\371=#=\313\275\351\256\242=I:%\276\365\277\272\272\004\177\001>\345r[\275\371\325\033>\377\254\346\275-\206\270=\261\216+=\341\375\035<~\262T\275F\246,={\206\357=6\271o=Q#\031\276\026\237\247=\211\330n=\002\343\343=\3660\007=\241\315\025\275\004\224(\275X\004\027\275\017\327\237=|b\013\276K\266\244<\031^-\276\344g\032>\374\354q\275v*\376\275\226Y&>\265\377f=_P\034>zI\010\276\260\204.>\264\344\240=\200\333\367=\266\211\003>\222p\243=\264F\275\274F5\360<\033\255\325=\257\330\224=\204\223\031>D\206\243=\341\245\205\275\207$\003>\326\252\200=u[\376=i\335\252\275:\321\237=\3010\275\275\357\222\325=9\0279\276\315\023\275=\205\2526>\350\272{=N\335(\275\3650\274=\266I\242\275\256C6>\036\317q=,\336\254\275\202\001}\274j\021\277=\222\344\267\275\311\223\r>\202\253@=\312\230\253\275\347\376\243<\227[\321=nx\227\273.s\037>\375\326*>x\0014>\376\322\255\275\025\231\335=\277\247\351=9\r\002>nT=\274\210\276\005\276_N\266\275\325\013M=E\344q=\257\302,\276tz\014>!P\241<\256\"\235=\030\026#\276\364\311\264=Uo\253=\246\334\">7\303\260=>v\304<\346\334#\276\206\203\"\276\214z\010\276\2128\205<\374\323#>l\352\352=\221Q\t>%\242\346\275\244\'>\275FV\202\275\233\021\t=O\n\223\275\214\324!>\"M\317\275\351\307\022\276w\345\327\275K\210\037\275\277\202&\276\313P\002\273\225\235*\2760N\240\275"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "input"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/bias/Assign"
  op: "Assign"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/read"
  op: "Identity"
  input: "fully_connected/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\355\350Y\276\262r\\=\303\r/\275\035A\034\276x\227\331\274\241\200\222\275\346\204\033\276\265m\316<8\342\203\275\030\256\307=\255\243P\276\003\327r;\341\313\213=\355\365\002>4\245H=Qv+\2761iK\276\365\376\256\275lY>=\247\010\233\2746\235\027\276\032\365\242\275\303nQ>\245\376U\275&\317\355=\'\004G>\370\361M<\017\217\"\276\233\271\250= t1\276\215\300P\274\265Xe=/\342t\275\243X\266\275O\364b>\235eV>\212\023\024\276\024D\205\274\362\024\001\274\350\307<>\224\200\007>\257}\261=\226\010\306<\310\203B\276e\t\031\2768-K\275*\240\302\275b[\243\273\256\250\330=!\272a\273\357\177H>\317\027c=o\377=\275Y8b\276;AK>5\034\366\274\001\321\3659\340\371\360<\332\020=\276{\225\277<\000\344W>\372\323/\276\243\310A\276`dC>;P_>\227\377;\276Od\333\275\225\256\036>\335y\241=\352\224\014\274\314\007(>\201f-\276\227\035\033=\245\2036\276\345\244\302\275\204\r\311\274\2203\311=-\372\240\275\325\365C\276\332t\232\275k\331\222=\232{\010>$+d>\303~\246=\245Z9>}H\234=o\265#>\330\"K>6\276\037\276\334\017\333=\305\310\246=6\212\272\275H\014N\273=$\n\275\333\2649>-\357d\276\245\004\206=\006\237\021>\211\024\233=Z\275\027>\003\253c>\207\300\361\274!\030\\>+(C\276\257\241\263\275\273\306\001>\005\001T\274G!\277=\376\325\375\2750\277g=\327\252\331\275\024I\376=\304\037=>z\261[\2766\226?>\010\243^\274\n/Z=\314\207\332\275\247Tb\276\330\020\205<\320A\221\275\272\3134\276\322K\312\274\016]/>\031\316d>\364P\324=\204Qx\275\310\216]\276\307m\306=\323\006 \275/\300\317=,\357\236\275\252\206\r\275\323b\376<\207\213\022\276\210\253\007>F\2534\276\372[\027\276\211)\020\276\266\234\357\275\353\025\031\276/\211A\276\330\326\356\275\323\311\031\276\234\337c=\351\205K\276\332\233/\276\375\315\377\275\365\263\317=\3005\001>Ds\314=v\2767\276\3016\223\275\010\375\260=G\036\034\276\216\311\007\275\033=\273<\345\370H\276@A\t>\355^\306=\3677\306<\371\203\206=n\306B>\037\222\335<\277\323\361\275\036y\030=\232`\013>\242,d\275\'\201F\275z\242,>\003\036%>\311\351\3539\375\306A\275f\323\370=\315\235L>\260h\261=\274\034\036\275Xyx=\375\217\331\274\343\\Z\276\207\022\034>\037\004,\276\027\\\262=\366ud\276\231\321:\276\242C\036>\332\3428\276\323BT\276\0030^\276G\352\367\275f\343`\276\242\305J<\275\202W>.\277=<X\226\203=^B\365=\352\343\257=\361\375\032>e\246^\276\347\326<\276\227\236\235\275\013\353\t\276\336\301\340=\252\335\334=wB\\\276\037\204\367=:\317\360=\317\261\356\275ZW\261=X\006\352<Z\037#\276\330\036\241=p\305\004\276c\307\217=\372b]\275\206\330 \276Z_3=\233\342S\276\223\324\004>\002_\270=g&3>\253\210\240\275x,G\276\317\273\r\276e\n3>B6\003:\300\336\213=\202]\211\275\260\0335\276\326A_\2767\241d>p\367#\275\337\235\025>(\310\214=\3360(\275Mj%=\375!X\275\261M\223\275\276\264\333=Qh\230=\025\343N>\017q[>\243\213\014>\213_\007>\342\273\'>\300\364\355=\327\250\017\276]?\324\275g\271K>X\2676>\303\337B>L\272G\276\350\326X\276\330\030\264;I\227\310\275\262\037\010\276\220\266\255\275&\240\204=ugI>\370n\017>\324b\025<0\036\273\275\002\2552>6\023\005\276\315\234p<8\005B>\217\233\205=\360\330\007>\217&\355\275\013\374\005\276y\3140\274?K\315\275Y/\301=\206SK\275*\337,\276=\245}=;QC=\000MQ\275_\024\270\274\024A{<\225\335\303\275\276h@>\216\'\216\275\013\336\331=z\275\'>\244\315\224\275\252\322G\276#\'\245\275\355F\222=u\272M=\244\271a\275\346\311_>\022\341\336\275\2719?\275\315\224\'>K\037X\276\246\202\t\276\337\376\235=R;\235\274\036o\024\275\301\021\316;\265\364A>k\002\330\275]\221\345\275\215\315\260\274\000:%\276\342\000\024<\217\315\352<\017\027\260\275{\004\302;\222/\032>\271\017\263\273t\022E\276\267\036I=z\001\000\276\254\267\035>P\300G>>\3315\275*\206\277=\002\367b\276\n\206\r\276\322YQ=\274\337\000\276\237\244\226=v)(>;1\202\275\2541!\275H\347\350\274\341\226e\276\331\311\363=\335\247\246=~>\375\275X|.\275_4\035>\333]\264\275q\2777\275Z\356H\276B\004\343\275\203\202\021>\203,\020\276\312|\372;J\207\211\275Kl\210=\212\001J=7\311=>Jn\237=>\317\353\273\203j\034=S/\330\275\304\206\255=\022\314\356;<1\026>\236GP\276@\207U>\207V\373=W\256\000><\034e=!y\313\274\336\005\013>\236\275N\276\000B\313=\313\016\270<\017[\"\276\202\247R\276\202U\247<\360\023Z\276>\366\276= %\225\275\344X\200<\274h\236=,\341}=\373\036E>\316\336\356< ^\256=\217\327!>|\261T\276Q\205\274\275\241;*>\336\255\030>\355\0037\276\"\016h\275\334D1\276\200Y\347=Y\212\223=\304\272\234\275tE\211==R\037\276\323\276\177=|t\034\276\275\230\254=\t\003\327\275\205\377V>\333\371\n\275\000f\255=41U>\300&\006>\367\220\'>\342s\r\276*\334\327=R\342\325\274\317Da>\276\260\235\275\362\t\001\276\206\331)\276\243\226\225=\'\025\320\274\030\231\032\276\262F!\276\001\313%>\216~^<\303\007\212=\375\177\006\276\3560\306\274\373\264m;@\376\223\275\223\333\306=l)Z\276S\026S\276\037\022x:\351\t^\27639\201=\201&\321\275\r\200\320\275\323V\254=>\301\262\275tu\023\276\010\257.>\241\360A\276,\226\013\276\310\326%>_\367\003\275\210\201\337\274\003\231\340=\'\267d=VT5>\263p^>$\3312>\246\316=>\356\235\023\276[\023\275=g\031\007\276\332\013\201\275\"<J>\024\332\032>:H\373\275JkU\276\014\030N\276\026\0374\276\037\342\336=\230\033\022>tg5\276\357\326e\274\350\324D\276>\213\327=\325\215-=\322\325\343=Tuc>\255e\273<4\024\002\276\2341#>\332\\7\275cY\221=iD\311;m~\201<b;\236\275\257\226\266=\243\337\010\274\262p\036\274G\303\r=\326\022\001>\020\024\031\276\341d]\275\253\264\342=B\020\376<\340UW\276\266`K>\364>\034\276\232\350\367=0\3502\276\344\003]>\202Z\266<\304cq\275\033wO\276\372q(\276\301\014\036\2760\215L>\361\263\260\2752\377_\276\240\314\266\274\207\023D\275\367\211a>0\301:\276\347\\\006\276\277{H\276Z\270\237\274\324q\347\275V\225\257=\317c2\275\271\225\035\2752\177\313\275\375\362\376\275n\t\345=^\332\344\275\031Nn=!\240\010>\325Q\025>\322h\"=Va=>1\"?>\230-\241< {\373\275Bg\033\2769\241\231=\2533B\276y\333+>\032\266\034>\276\3308\276\n\360\333\275\361\360F\276G\340C\276\316\362B>.C\036\272\002ve\276\374\345\026>\274M\255\275g\240=\276\334$\026>\335`S>\340\2612\275\233n\027\275H\265&>\022\021\233\274\372\253P\276\2038\247\275\36736\276\"\301\324\275)\364\255<\366le>\t\246\035=\351-\253\275\207?\022>Pb\030>\261o\301\274\003\245\'>\265\235`\276\250,\r\275\366\314\266<\222\222\035>4\002\230\275\340\332\253=\350\001\020\276\317\374\234;\304\220\376<\3643>\276N\230/=\036\3249\276ZJ\363\275\300\347]\276_\242\372\275\312\355d\272~\\\336\275z\2346=\363c\251<R\230>>eX.>F}T=\2640\227\275\315MG\276r\344\023=\2066\022>\203Z\212=\256\257\014>h\342A\276\\\254Z>e\342\264\275\241|\221;<YY>n\342A=L\005\002\276\254\3621\276\315hU=\020o\345=)\330\'>\373I\231\275:\226\013\276\265x\004>\007\225\330\275\272\353\033>q\311\002>\375\356d>\333Q;\276x\3269\275\330t8>\275\303L>\253\360{<\220\177v=\371s\026\275\223\177>>\361\266\267=\355\200?\276\240\030R\276\275\275\276\275\347\353 \276\037o\321\272?\262\372=[VH\276\236&\234\275\333AM\276\345\347]>\317\364\001\274\316\2529\276J&a>\253x\337\274 e\212=}\272O\276\235OL\276\200\233\026\276\3149\245\275B\2711\273\206\035\321\275\'\343D> \340G\276,\213\"\276&;\224\275\2565\014\275d\310->\273\030$>*i!>!\235Q\276s\177%=.\363\013\276+\025)>]D\352\275\025MF\275\315\274\004=\217\261\251\2757\037}=8\200\321=4\317P\276S\265\266\275\270nQ\276\327\022\r=r\342\334=\222\324\030>\036\224L\276\377,\213=\002\234-=OKH\276\270\2171\276\371%\010\276\316hV>\"6\321<\0178q\275\026k\022>\354\013\215=\213\256s=p\277\007\275\223\372\032>o\376U>\003\355\035\276%\317\331=\251\335\t\276w\322V>\000\304(>\021\234l=\331\336\366\274\375\301.\276\206\217\020><\177\207=\312V\373\275[\020\250\274N\221\302\275\210_\264\275\033(:\27628\212\274\304A\341\275\372\030|\275\022j%\276}\346\255=5\2069>b}=>\223\006\002\276\017\007\321=p+V\276\366Dh\275\374\233\327=\342\246Y=\247\007b>\326\253\376\275\220\024 \275\255\026\035\275\317X\266=Y\275\377\275\263\372\367\275@\346!\275\227\206 =\334\202#>-\215F>\201\334;>\325m\320=\243\3045>\0202M>\305\360>>\273\001\026>\201\027\016>\2715\017>cqD>\306\211X\276M\334\374=MU\301=\212\037a\275\007\320\257;l1a=\271d=>88M<\317\026\273\275h\2003>\213\036\030\276\342\033\214\275\307\306\300=\247{\266\275\205\'\034=\354:\240=d\255\315=\014P=>v\230.>\264J1>\372}P\275$\276\023>\221\242\000>\340\345\356\275\277\035q=C\227-\276#\220Z\276\323\325\260=\013\305/==\375,\275\036\253\n\275\270m\343\275\303+<>\267\216V=\223\372\236\275\224\320\036\276\023i\022>\253\217\n=\360R\210\275\374\201,\276\2426\241=<7\002>\341\3477\276\370o\334=\242)y\275Nd\262\275\026W\005\276\255\265\330=\254-b\276\301\007\t>\376\010R\275\3164J>I\216\001=\247\261\233\275\266p\307;\004\260_=\230\222\017\276\240VO\276\250\216{\275\025\303g=I\274K\276\026\311\302<\3736D>}VD\276\004\025\021\2768)\367=h\2012\274\320\312\031\276r\034\263=G\316\004\275u^\264=sE\243=\340p#=ld\247<\223-\t\276\013B5\276?p\016\276`s\266=\275\314\251\275Y\240\312\275#\005n=\327 \017>@\200\004\276\343!\000\276\244\027\235\274\001BW\276mK0>\371\361\211<2\351\256\275a\274\017>l\314\033>0\364a\276\316\273\032>\035\026%=\371\337\237\275\241\r\010>D\316<\276\361\\b=\206c\027\276\214P\263\275\177\324U>\"-U>\307\347}\275\367pp\275\274\254\026\276\003u*>\335\353\035=[\005\337=\024\236\007\276S\270\003>i\364q=\353\t\032>s\246\333\274=\240\363\274 ~<>QG\223\275(\222+>\362\203,\276\375\260J\276\317}-\276\024YR\276\271o7\276\353s\252\275-\004<>\017\177\213=\000eV\276\245\223W>e\325\257=~\342\304\275\373\274->\006=a\275\213\241E>6\027|<\034p\017>\223\272\024>\254\207T\276I\374\224=GtW\275/@\000>ck\216\273\205\350R\274}F\004>\375\212\031\276\177\032a>\244\022\005\276\264\205\203=\232\027\006\276\244M\265\275\213\3322>cm)\273\255kX\276\000\2014>\024\004)\275\257\257Z\276\223Y\225\275\014\337O>\250\2043>8y_>(\263\023>\263A(\276\222)\032>\246[\354=\236\017\002>\025\206y\275\253\207\221\275\217\203\016>C\004\020\276w\304Z\276U\221\344\273\205\335M=\260\352[\276A\037d=\273S\275<\373k\362\274f\317\'\276\204J\342\275\364v\262=\"\347c\276MR,\275\234O\032=\002\354J>$\'\222=cf\345=\356D`<x\311\r\27688\316=\001\377)\276\305Q=\276\351\330\371<5\233\260=\323l@\2761\306\241\274\240b\'\276\376\270\027=p\235?\275\274\205\252=\206\324m=\243\212-\276&7\240=\023IU>V\3475>\2771`;1\311\374\274\202#\262\274i\2177\274\241-\357\2758`e\276\342i$>ze$=\275d\211\275\020\325>\275\262\216N=\342\335A\276/\033 >~m\026\276\341IO>:Z`\276\373\205I\276\362\035\006<\335\344\204=Y<E>\313bk\275\231\034\232\275\334\356A\2754\2703\276D\373\215\275mrL\276\210\261\001<\\(\257\275\361|\017\276Um\343=5\365G\276\364 \200<3*\014\275\0346\243\275)\210;\276\026\037\343<\250\3124\276\345+\241=#:\">r}\202<d\013U\276\324\371\307<N\022s=\275$\233=\274v\r=\3248\035>%\226<\275KN\232=\2435\341=\253\336\350\275\014U\352=\266\354\\\275\363,l\275\2159&>l\245\024>\244e:\276r?\014=\251\\\202=\'\035\246<\234\274\r\276-\347\002>\034p\020\276\022N\345\275\354\240\002>\272\250\224\274\315Kf=<AY=\273i\035\276\t\237W\276\234\'N\276\356\342-\274@\227\230\273\356\276\031>O\2667=R\245\354\275\277iF\276\261\002\266\275\204_\360=\216\211\216=\270>\022>M\370\023=\257A\024\276\324m\000>\221\"\333\274\035\337\263=\026R[\275#\343\335=\342\320\230=\274\257\311\275\036\223d\275\212\277#\275\021\351/\276O\253S\276yL\263;\2551\324=EE\225\275\321\277}\275\274\251\317<\246\244\027>)%7\276q\\V>36\253\275\347\3549>\314\r\023>/y\001\274\363E$<\007\232\226=\247\266\226\275\017\306\001<U\225\016>sg\314=\365\030\366=\317\214\276<\363H\217\2726\010D>u\022\314=K$\026\276\266\354/\276>\366\t>\013\331#>\351\321\275=\344c\354\273|J\341<\030\367W=)]U>@\230M>\301md>\253T:>\010\033N=\n\030\214=)\016\355\275M\200\223\275 ;\345=\312\002`>\t\241\367=\333\272G>|0\336=\307wM\276\331\325\007>\306\341\276<1\205[>5\323\035=\342p[\275\004\200\342<\'\2343\276IJ\000>\r\347\001\276<8%\276\307\233@\276\223\3200\276+N\n\276\005\211%<=()=\201\023\346=\014\2373>>\253D>\205.\320\275R\244\037\276#O\017>\211\251\370=\002\317\310=\221s\001;\343 \276=\247\034\313=s-\210\2750q\324\275S\275?\276k\377\301=*\347\307\275\361\363\222=\206J\017\276\253I^>e9]\276\254\257%>\006\271\247\275m\n\205=;\217\227\275\276K\216=\257>\240\275\007\263W\276\322>d>\032\306\323\275\'\025\036>\344\231W=\314\370\226=\007\355`>\317\"\314=\020q\356\275\357\272\254\275\334o.>\352\374J\275\267FN>\312\320c\275\304\352\250\275Y4X\276`|\005\275\300*]=.\273+>\035{\357\275\326\343\224=\360JO\276\274\251;>n\362?\276\203V\313<<\373$\276\007\343 =\302l\007>D\210l\275\2277\004\276\360\207\300=K\007^\276\372\230c\276Z}\n\276\322s\205=\221%q\275\022#E\274\241\370\t>\306\3367>b\3254\276t\234\253=\253\210\375\275\326\266\270\275/\026\031\2757\271=>wO`\276\302\345\377<\373D!>\271\330\016=\2714Q\276\235\232\371\274\003\3168=>uH<\240\365\200<\255c\322\274\335?\026>!\3675>D5\351=.\371\234\2750g\n>\027\032\024\276n\346Q\276\373rX>s\"\322\274\2407\367\2747\031v\274o\225F\276tn\221\275\205\316\236=\246\220\177=[\361\000>\332bL\276\324\334D\276A\003\000=\r\030\321\275\001\2300\276\311\346\342\275\023!\217=\335\203\267=UB\347\275\262\270U=\355\014\316=\217\330\003=\245#\237\275\315q%\276\371\3229\276\275US>\344\2263\275\t\215Z\276W\\\031>\037`\355=\225\320\006\276~\222&>}\374\312\275#\024\031\276-\341`\276o\242\017=L\242\216\275\257%7\276\202\220\006\276B\002\260\274:7\277=[\320\024>V\000\345\275\02406\275\241\177V\276\227\231\027\276\320j\024>\331\304C=hp\021>\337\005r=A\\\334\275\313\336L\275\3338\024>\372\207\313=-i\364\275\026C\277\274\341\311f\274\026\024\"\276\207\220\242=$\260U=\212\036\234\275\217\277\033>z}\003>\nh\231=\237\266n\2752f\254=\017TZ\276?MQ>\313\326\024>\326+g<\365Z\007\275\023\346\256=\004x\311\275\266J\351=>\321W=\304w\332=*\254\022\274\217o4\276\025d\'\276b\335\214=y\353\300\274\335\221\231<\337\245!=\311\t;\276>\352a>/\302[<\230A\377=\321:?>\2662\177=X\276`\276\007\353L>\007\023\263\275\376\252\334=9\026\201\275\214\235\356=\233C[>\345\217\206\274\323\216\215=I\327\034\275\221\364\254\275\373\266A\276f\220\266\271\242~\r\276\342\240\026\276]\036\t\276\031\0000\275I\264:=ii\013>m\237:=\274M\022>\321\230K\276k\233\\>\227G\355\275\265\312R\276\337^\356\275\356\332Y>f|E\276\244\001?\276xg\026>>\276\253={<\236=J\2627>a\017\226\275\337\260^>(s\021\276MH_>\361\233\353=r\027\252\275\346\022,\276#\247\252=\236>\'>\177\301\371=\245\372\017\274\343\300\374=Y?\363=\344\340V>1\330\'>\334\2205>\335\361\030>c\r\032=\017=\t>L\2377>\t^-\276R\360\002\276\351K\337<\274\355P>\354\366\325\274\355/\340\274\276e\225=\013\201\037\276B\377k\275\200\217|=-\247c\276\356,d>\301\362\327=\257L6\276#,\267\274|\200i<\225\273^\276\2014\034\275\203(\217=\0302i=\017\267Y\275\031e_>\022\356\003\276\241\324\030>\347 +>\033\2749\276S\212\310\273\312\356\224=_\276@>\n%K>D\237W\276S\214\004>%\265A>\0132\245=\266\3301>}\335\275\275\261j\021\276d\030\023>\034d`>m\331\014=\2451<\276\224\312\022\276\355\017\033>5\tu\275;\265\010>N/\031\276\016\211\035>1\200\215=\303\276<=s\331:\276\236VV>8W$\275\263\252>>\375\327\333=`\246Q\276\214f?>\222\034\020\276\315\253\030>\262*)\276\373\317t=\334\260^>\237\347Y>\277\350S\276\236G:>\021\251\367=\346\"\206=\355\351\031\276\250\n\214\275\037\244\020>\204\000:=\"\003\013\2740o\355=n#^\275\341k\320\274e4`>?\347\037\276\225+3=\002\267S=v\316\224\275U(\305\275r\313\200\275r\273\032>\031S\350\275\366\212U>L\272\277=*]\034<\353#b\276\020\245\016><\343\257\275\034\317\227\275\332\230\025>8/\346\275\000\343\302;l\326\233\275\277\367\016>V\331\345\275\235\363\006\276G?*>\"\307A>\204\306\'>X\016\001>\310d\204\275\000\221\246\275-\035-\276\250\201>>\027\2637=\373\3666=\312\206\036\276\275\317D\276\016\340\010>6\007\234\275\242?(\276s\327\223=\301OB>3\231\355\275\257\240\333\275\260\333,\276U!^\276\026\262\014=\340\333\203\275>;\355=\025\321\346\275M\346\231\275\213N\347\273L\\a\273\003\267D>Q\024\346\275\335\220\272\275j?\341\275\024\354\020>\321\354-\275\231`\210=1i\364\275\333x!\276l\202\307\275\234\0021>\370\034\214=l\345R\276\215\341L\273\214N\332<%ZY>\3373?>\031\212r\274\321\355\n>P~(\273\\\314\225\275uM\352=\310<9>\372\355\314\275~{\362\275u\177\024\272xb\342\275\263\031\020\276\305\020\346=%[0\274\356\0004=n\333\037\274\360\211M>\365j\360\275\231\023*\2764yB>\240\304\r\276\372\320\010\276\271L\021>\305\355S=\220\t_>\307sR>\321\223\214\275\337I\032\276h\237\255\274\302\260\005\276\321o\372\272e\200\030>\r\202^\276\236\341@>\363\256<=\242\224\270\275m\022\342\274\261==>\354\271\312=\002\2059>\372\363\221\275~\373k=7}\261=\346\037\277\275\014\204.=\242\253\274\275\205\266\331\274\242\311(>e\314;=\242\342\220\275\326\3529\276\315\246F=\017\377\224=B\r8>\365w\021<\033\006f=JOP\276H\336\034\276\221)c>zD\207\272.\000\343\275/\017!=~\276\031\276<\364&=\256(7>\364Z?\276\024\253\372\274\020\211[=\202\370\253;n\3410\276\\E0\275i\025\363\275\352\362\206=\344\204\365\274\322\342*\275\367|\027;\260h6>\267\022$\276^\037\\>\263r\022\276/V\244=Vz\017\276\241\030\225\275\373\364\260\275\364(\2249\307\364>=\367\215(\276\221S\276\275L\262\t\275\367\354\326\272\354/W>\220\2626>\330\344e>\tk\004>\310\r\">\341\325\246=\002:\250=\303\267\214\275\336w\013>\217\271\227\275\352\327\023\276\372\013\025:\250\026\035=\241\241R\276B\265C\276O~\275\275\202[\316\273S\022\246=\025M\034>\256S\262\275\343\232\003>\241\033\t\276\313a\031\275b\233\221=\325\271$>\014\205P>\332\310\034=5z]\276\316\001M\276\221h\215;\037\373`>\003\316\n\275_?{<p\'\355<d\355\263\2749J\240<T\340\245\274 }\202\275\203LO\275\362&\276\275w\031\242=?\366\326\275^\370\272=\025\340\010\274e\215\320=\3325j\275):q=~\206C=17\200\275\314\003\022\276\214\3036>\253\203\344\274T\300K=\\\262\213\275\010?_\276\"\020\210\275\206\216\314=\347\261s\275\267E\335=\031~D\275\"Q\310=&\361\347\275\005\3423\276`\027\035\275\316\344\032\275\207\307\346=)\253\037\276\330\330\334\275K\307\004>\246\262\220\274\365+\246:\034 \216=\337\014a>\223I\313=\2342\372\274!\234=>\323\312\370=\3343\354=\r\022O>\017\265\325=\025z\212=\t\326@\276F\322W\275\312zX>k6Q\275s\357#\276T\233\021>5\373\256=m\371\240\275\255S\035>k\232\315=\340\275>\276_\370a\276]\n\327\275\306\\h\275&\017C>t\246\214=*\250\020>\r\211A>\277oD\276\313(\374=*\355a\275\370T5\275A\364\357=\301\027\032>\301(U<\246\016\301\275\321&\335\275e\213@\276\364\032\301=\020:9\274\260\342<\276\212\215\025\276\330\246E\276(\353/>z\"\311\275r\201y=&Q\024>\257\014\003;?[u\275\035\374,\276;\365*\276wj`=$^I>\t\241\225\275\373\211\207\275\207g\276=\274\350\335\275GH\'>\227D->\304\006\004=\n\206f=\362\230c\275\230\312\232=:\257\013>\32107\276b5\312=@\377\303<\226\335L\276\210~S\276j\370Q>\347\332\006>\031\010^>j\024\016=\334\366N\275Y\031\271=\220q#>\332<\333=\316\311m=\206\257 \276\205rQ>\002)E\276r\267\021>C6\223\275%\rE\276\030n\342\275\026\356\016>M3\200\275\014\350\203=p\354\024\276\314*\026>\272\373\'\276\307\3673>\276B =g\221#>\253\217n\275\245\3313=\t\257\245\275o\216&\276\361n\232=\361\324\362\275\364C\306\2742\203\006\276\203\004B>)\243L\276&/\026> \346c>\032+d\276\010\201\350=\026\361U\275\007\236a>\022\017M>!\250\010\276\312Z\010>\025g\350=\324w\311=\"b\023\276@\023 \276N\'\316=\257\317U>\257\260\376=\271\037\325\274\323\232\010\275T\021R>\247\2541\276S\322o;\277&\025>\033f]>\300\371\000>\014\305C<\377\246\357<F\362\216\275HAp\272\016\272*>1\337\\\272\254\311\013>\244bK\276\332G\215=t\242\243<R\2319\276\224\326\233=r[F\276\"\264>\276\336\346I>\217\036`>\025S#\276H\302`>\250\264M\276\212l\315=G\"\035\276\305\212[\276)e\363\274\025\361\301=\201\220\265<]\367|\275\036\252\026\275\033\036(>\204\\\016>c\311c\276J\3352\276\374\020,>\215\260;\275\234\0219>\327\203\010<\262h\\>\210\333\252=\375\235F\276\327\371c\275\201\313\302<G\211\230\275*pP>\003;`\276\037e\276\275^\310O\276\240\274|\275\016\303\034=B\001\'\276\203?6\274pp%\276\210x\375\274\235\340\321\275\275\004Q>+\252\n\276\217\351\302=\025Y\313\275%\333\230\275\363\317\024>4\221\026\275\027\224,\273@V\t>\346\336\220\275\241\346\034=<KN\276(\211I>\316\003\342=#H\035\2766\2622>D_\271\274\207\021\020\276\262\270V\276I\265!>\260\361V<\360\231=\276\024L\003= \202\277\275Zu0\274\240XB\275\372i\314=\330\215w\275\317\037\220\275\037\262\037\276\003\206\202=_\344\025\276\3679e>\t\357y=H\203\316<V1!>\372\302 \276\351\347\210<E\376\031\276)4U\276G\247?\276\004#\226\275\261.\177\275\301\237\007>\rQ.>v\320\202\275\003\\\036>o\\M\2752\035O=\267\312\t\276im\252=\256\230O>\316\226\005\276k?/\276\207\337O\276\237\307e\276\235\264\027\275\010HJ>\033e\306\275\335\330l=\262\364$>\326\"\020:\276\214\367<.\323\276\275|z^>g\331b\276\tD\353=\3118\303\275`Es=R<\374\275N\035\340<\273m\345\275\\\274Q\276\033\267\010\276\242\330?\276q\255\375\275&\2760\276U\371\331\275\207\3778\276\272\267\266=\232pH\276N\\>=\202\227\033>x\250^\276.\273 =\203\230\234\274\345\035\220=\314g\r=gpK\276u\347\014>Gf\345\275\272w\357\275i\240I>\200\036\256=\251/\254=[\366\037>\306\212T>\230\260\033=\244\321\255=\275\325a<\\i\177=\002\346\334\275\357\034\246\275<\2137\276\301K\r\276\000\377I\276\220\247\343\272A\222e\276\235W\354<]\030\201=z5\002>8k3>\215\001\237:9\016\026>q\177a>p\237\221=\233|R\276fsD>\205O\210=\014B\004>\256\352H>\005\350\253=\035\334?\276\372\262\020\276\305\304\t\276m\031\246\275L\200\002>\024=\026\276p\223Q>\024\362\006\276\232<\221<\216\215\370<\'\225\215\275\246;W=\303\337\317\275p\314\237\275\n&\265<\344s\275\274r\336\303=&\227-\276\247P9\276\323\300U>\331^\320\275\350+e>#o\234<J\250\r=\336\307\340=\026\341\256=\004\344-\275\315#\347\275f\336\"\276v\310<=\033\365\360=\321^\005=}\254\317\275\023_Q>J\031\346=T\314\016\276\327\231=>\235\264\000>\246\0241\275a.\273=m\327\'>\242b\006\276\373^\211<\001M)\275f\251F<0\315\240\275\367\205\017=B|`=\2215K\276T6\226=\271\205\315\2751u\233\275\322\024Z\276j&\300=\245I\005>\320h\372=\026\221\260\275bdm\275\243\001\034\275\375\300\364\275w\211}=\277\204L>\304\377!\276]\373\372=\210i_>\234\317\365<\354\r\352=B\277\021\276c\016S\276z\002\205\275\230\345\362\275xf\271\275\372Ku\275\367\030\273=X\021%>\022\"P\276\341\207\r\276\367\004@\275\334B\013\275\301\004:>\3550\316=K\032}=\204\251B>\267sE\276\250\305\376\275u&\026>F\006Q\275!w\244=\030\362n\275\260\205w\274\005\356$\276\335\257\255\275\226\365\t<\215\310\327\275d\206\221=\267=\363<Y(\'\276\347\351\241\275O\317\334\275H\273\363=\254\303\001\276`\022\220\275\001\241Q>\027\1779\274\326\2022\276\325<6>\215|\216\275\002#?\275\366\025\030\276J\t[\276h\374Q\276i\263X\276\360!@\276\322hF\276b\231\314\275/b\304\275\210ai=w\222z<)\315\313<\201\306]>+\300l=y\024P>\2609\221=\002\320\355=\330U\360<+{J>9q\262\275\254\331\273\275,\275U=\353r\006>2\347@=\354\356M>\244\211\216\275\035\t\345\275\220\342\336<\267\215\311\274lQ\\>\'\023m<\230\302\325=\033\260\014>\241!b>\2136\026\275T\215\370<s\3625>\005X\210=]\316I>m\336O>8\273\003\276\327X\364\275\272\\\n\276>A\267\273(Z\034>\032\366\372=\210\266\345=Q<(>\210S\244=\301\252[\276\234P\241=\255\320[\276\237\207\253\275\261\344\243\275\206\246\032=7\352\336\274~t\370\275R\314Z>y\274\213=\221\265Y>\230\320\307\274\211\225c\276\030\245\313=R\232\003>\326\227\336=-CD>w\010:>\341\216\376\275}\250\243==S3<\273\014&>4d\036\276%\'\315=\244O4\275\366\336\207=8!\344\273\232\206\304:\277\261\373=\263\331\363\275Q\256W\276\007\336\013>xEP\276]\036\312<W\030\354\274m}\006>\2063;>\325\234A>]\365\356=z\177.\276\302\231^\276A\255)\276\372\t\030\276\332\360\356\275\341*\341<\243\336\'\276F\352]\276\327/^>\353\020\312\274\210E\005\276\234G\323=\263\035C\276\215\371\367\275D\020\343<\216\337\321\275g\204\360=\263\277.>\007D\226\275>5c\276\213\312\002>6\027 =\235\334a>\370  <\332A\250\275[\227+\276\037\3403>\034o\215\275\266\222\\>\001\326\375\275\2608\230\274\211\246\232\275R\231\'>\375\024\005>\037A\276<=`$<\002?\022\276\370\306H\276\335\327\032>\000{D>*\207O\276\273\312Z>\270\001\264\275\214L\322=\371\332\001>\273P\335<X\311\217=\002h.=\334d\206\275z\221\224\274\177\250\350;~\327\213=\217E\213=O\227R\275\002bC<&\240\004\276\234\342\274=\001\235\000\2761\332\225\275\0229\007>U\275\010=q\363E>\201W\260=Z`[>u\263.\274x\273\277\273\244Q\n>X|O\276^t\t\276\266\2038\274\370\031\372=c\213\024=4DI>yI\211\275u\224\340=D\215J\276\'C\266<\013{\n\276\361:/\276\265\253Z>!\223E\276\360j\374<Q\230\223\272\320\"#=TH\013>!\300$\276S\312\223=[\240V\274\031\3772\276q\336X=\320\207Z>\254\275J>\'\224Y\276\233Q\026\276\307D\230\275\332\025\023>Q]_>s\023\272=\232\002\003\276\356\r3=B\241\032>Y\233O\276>z\330\275)&O\276\002,\225<\343 &>\324\237\332\275I5\363\275\013\033?>M\246\264=\261\245\036\276\2644i\275\214\0349=$,\305;\243\330\037\275T\242\275=\227\315\356\275\375\030\010>K\2313\276\301\253\302=K\345\360<b\341\215\2757Hi<[\372\020\276J\267\217=\270\230\036\276Ss\323=J*\'>h\241\201;\034\347(>\304\3364=\013O\017\275\210x;\275\006\351G\276\251\226\032\276\032Wa>\303\344\023><h\327<\300\273\363<\353\336:\276\345\226T\276\202),=\220\366\335=4\237x\275\305\217\014>I\013\301=IEO\276\006Z\217=~s\325;\034G\n>T_\327\275\'\242\312\275\260\341\"\276t\202\204\275a\177\210;\350\314V\275\t]<=\213\311\034>\361\024\037\273\247*\037<e\274\203=1\030(\276\223\313\313\275\315!\230\275\177i\372\275\275\223\266;=\315+>\216Y\217=\333~\r\276\354H+<\304l\311\275\324\233O=\256\302\311\275\322\257u\273\225Q\026>\365T\250\275|\304\237\275\031G;>\227\322z\274\247i\360:\240\350X\276\316g\002\275\200\377N>\304<\251=y<\377=\372+N>Q\204$>Ke\361\275W\236s\275q\3071>\033\263F>j7\034=\007)\r\276\256\213\375\274f\302/>\271\240\317=\037WT>o{r=\010\325r=7=s:E\177@\276Y2\t>\375\345\273<\245*\013<dd\263=s\312\216\275\032\031\001>\3475*>y\224;\276\2261\244\274nfL<Y\315\017\276\017!c\276\234\242\276=\360\255\\=4\372\346\274\002\234[>\022\352\215\275f\221\252\275\336>#<\320\0201\276\322V\213\275\325\217\224=\003\304\245\275K\035A>\207h@\276\276\036b>\034\207\363\274P\370H\275\276\326c>\203\370\234=1\3741\276\276\0338>\272\343I>\347\363C\276S\225A\276U\020\010\276RP\002>$,\307\275\312]_>\201k?\276\233\315!=c\304\002;\237\321\023\276\305\301L>\241\302\026\276\262\\\033>\366\244e={(\360\275w\243!\276g\017\217\273_\2571\275xe\246\275\340cX\276\307\265\346=\323%\t\275hO\305=\026@*=\260p\362\275\0003*\276\246\205\030>\'(\r>\266\225\034\276\227\207Y\276l#!\274\274\241\314\275x7\303=\342@7\276O\377\251\275\266\237@\276/\233\203\275v\302d\275\020\260Q>m\230\301\275bi$=\341\327\213\274\271d\264=-\202\341\275\223D\237\275\362M7>AEX=\244\202\321=\315P\372\275\016\343\002\275u\2372<\307\327\226\275/\303\032\274\247\223\006>c\204\2019\251\260\320\273\3600\n>\336s6\276\343f\020<\266\266\031\275rt\000=\254\316\317\275\r\014+\276\254\273\312=\202\001\'\276\355\275T\276\214X1>\242M\232=]\376\313\2756\005\260\274\017:B=\214\035\007>\013\232\216\275\231\214\004\276se\246=\002\337I>Q\253W\276]\273\252\273+KH>\213\256\315=\027\311\004\276vr\357=\036:2\276\351\214\375\275[\035b\276\202{\354=\3347\243\275\345\337U\276\264\351l\275\353\016\\>|\376\345\274\302\2640>e\273 =\220\336\331=\252\221N>D\347\017\276\2554\270= k=>\232\3400\276V\362\343=h\305|\2744\213\333=\271\376\354=E\022*\276\335\360P<<\2142>M\275\"\276v\367P\276\356\000\355\275\234\211->\266\335\'\276\346\301\311\275\016d\254\275\246\014+\276Hy\243=x\313A=\017\361\\\275j\274\265=\021\361m=\257M\010\276\257\341&>\240\317\351\275|\267\033>\354#>>\017\254;=\377\371\241\275\203\032\214=\267\025\315=\347x\210\275\342K\331\274d\0008<D<\263\2722\377S\275\351\320\014\276\260\244\003\276,\342$\276T\006X\275\023\340\277\275\341}\227=V\343\266=k0\236=\267\013\261\275\241\253\036\276_\"0>\'}\r\276[\242\005;\310\341\317=\371VQ\276\311\325Y>\256Uw\275X\315O>\344\237\226\275\203\374]>}\225#>\221\331\323=\005\025I>_m\341=\341\225~:\316\207\265<\235\211\223\274A\320\247=\273\271\212=\313\t/>\003 />g\347g=u%@>\343=\304\275\000\360\221=\354\351\240\275\330\352\031>\362V\354=\354\0203\276\372\237\">sU]\276\367\326\027=V&Y\276\027b[>*\0073\273~\334V<\023\353\311\275T\317\303<\240\377\365=\3364Q\276\347\034\342=?\3051>/\363\224\275g\235\237\275#\357J\275$0\"\276\350\036\204=\306\2725>\261`%>\217\376\002>\343\264M\276X\366\251=\213u =\337}d\276\253\336\310\275\\\350U\276\245\212E\276\215r\035\276\247\364\212\275\336\271\205\275p\255_\276w\221\221;\205\215\022\275CM\036>\001EE\276\362\026*;|\016\253=\315\324\240\275\331\364\2129\260s\020>.\253e>\243\216\013>\247\373B\275\003\331\235\275\221\206L\276\020\372\317\275\341l|\275\356\233\032\275\301\301\033>\370T\310;$T\217\275\252\315I>\372\320\025=c(\013\276\216\3179\276\252!\335\275\274\n\325\275(m\242\275\004+\341\275\224\350>>f3:\276\003\020M>_\216\325\273e\017\230=\022R\274\275Co\255\273]\227\016>:\216\021\276\226\341\234\275\357\030\"\276f&2>69\234\275)\346\202=4\266\254\273N\230\007\276\023\016@\276\2428\241=RA\032\276\311\031\361\275\031\"n<\001\372R\276\261.i=\215\027\270;\025\205\035>#\3133>\224\231\177\275\264\377\006>\016\303q=\241\031^\276P\267!<\352\330\031\276\245\336 \276[O\\>\202\275C\276\227\3225\276_\367\010\275\256T\362=\354\007\353\275H\2539\276r\2168\276\260\"\214\274\217\367(\276P\305\'<\r\322\213\275n\033\202=pw\320=\203\320\220<\360\000\232=\350_d>\002\213&=K\r\271\275\2279\213=\323\244#\276\'\3350=\033\240\250<\301\256\026=x\r=>8\270#\273%u\024>Z\376K\276\364\347\016>\320\230\300<?K\'>\002\034\r\276\341\2607\276\204\373\005>\305\201+\276*\216\251\274\t\362\037\276\232\342\265\274\232IF>7Od=\225KD>?\211S\276\314\332A\276\344\375G>1{\260\275\223\000\031>\333P.>\331fE\276\033B3\276C\\M\276\n\364\330\274\2316\n\276\004\214\026\276cB\365<\257\302!\275\324\032)\276\317\355\213=\250\032c>\342)\002\276\331\327\261\275\355zb>us-\276<\343\026\276\357N\206=\251\217\275= 9\351=4\271?>\221\261O>\265\t\010>\303\226\230\275\226\024z\275\375\247\310\275\013\032K>#:^\276\204\216\263=\312^\211\275\3364\376\275\255)\254=\344\303\353\275\320c\220=\211J\027>\264$\017\276\rx\220=\177\226\"\276\223G\315\2745--\276\250\221G=\030G\005\276)Jc=\005`\332\274\371\207\206=d\220P\276\003\2327>-j\350=\310\031G=}\374\177=\216#Y\275\031J\253\274z\2447>lp\343\274=\244d=\"\225G=\260:.=\027\372R\276\336\250\266=\352\266\330\275\304\033\247\2747\263\347\275@\245U\272\2632\345=lw\014>\245`\026>pL\223;\357\1776\276\024\366\006\276\313fc\276\n$\t>\352 -\276,\307A\275\000\360Z>c\252y=\313\250\325\2758\350\373=\207\321\374\275\360\274_>\326\2048>Ves=\343\254Y>]g\037>\261\356!\274I\362 >\005\266\006\276\215C\331:\036.\024\276\263\307\032\276f\332\314;\221S6=\\f\344=\"\261\263\274\211\240R\275\007d\024\276\026\235M\276\014\275_\275\300k\326\275\226\362]\276\235\244\312=\302\373\333\275\017lE\275S_9\274\364K,\275x\201L\275\332\363$\276\010\200\031<^A\025\274\333\025\377\274H\373C\276\201\316\030>\350x_>_u$=l@\244=\366\367\024\276@\2707\275&\224Y>\341P\025\276e\337E>\371\315\r>\207\321\242\275\251iK=\r*a\276\264\262\237\275\207I\305=\247\016\030>*\007\013=\273\004\311\275]\360\370\275\353\2075=W\267u\275\201\010p=%\002\001>7\307\022\275\2727\336=\353\353\371\275\267\266\250=l\004d>xAX\276\316X\332\275Bp\266=\315$\343\275\200\226\247=o:\227=\365\246\206=\302\3419\276\371B<\276\266\235\020\276\362\311\027\276<\336\032=4\254!\276J\341\263\275Z*\030\276\010M]>q\300e=\177\274;\272\215=\207=\031q\035\275V\3248\276\267\354\354\271ds\305\275\356\251l=o\2349=\2032Q>\220\224G\276\232s\227\275>\236Z\275\035\246E=\364\035M>\006b6>\255V\240\275\263\230\310\274\271\371\263\274K\313\200=\340\034M>\\\266\033\276zH\311\275IR\346\275?~\302\275\360\025_\276+\274\352<\266\0240\275dUv\274\252@6>\210T\263\275\321\3321>\007\023#>@!p\275u\263/>\252\025\354=d\277\025=hd\311=\314\325\036>\301\277$\276\360\202\222\274\357\327S>\027\201\316=4~+\276x\343\267\275\221\332\327\275\322\207\230=\273\376\035>-Y\377\275\036\013k\274MJ]>\244\375\014\276\037\0336=\346\265A>\377\303C\276\234@P\276\362v\266=\000\'=>OMT\276o|5\275\010I\361\275*&@>\206\242\016\275R\035 >W\2333>=\025/\276\337k\033\276\nq7>\314\237->\235\377G>\272\340#=\006\353\370=[3\033\276\330\313\335\2755(\372;F$\356=,\031J\276\304N\202\275\325\037\245\274\"\315\035=\200\243\345\275\3674,\276\357\300$\276D\201Z>\302j\347\275\006\342\320=\213\224->I\005\017\275,\022\013>\246\\%\276\274\213\364\274)\362\215<\314\037\372=\2506\\>\357\213\\\276\235<\233\271\257(,\276\010\235\307:#\344\244\273\263J\332=\300%\t>8\006\334\275\003L\321<\'\323\202\275\371\343\372\275\242\023\200=\213;\001\276j\037!\276j\277\t>B\325$\275\371\210q=Xd`\275\257\277.\276x96=\264\311\216=*\301\025\276G\235\312=\304\371+\275dQ\375\275\237\276\t\275\373\203D=`4K\276\320\304\223=\220\253H>\341$\016\276=\315#>)\003\211\275\224\273W<\367cG>\301\361.>D\032\017<\337\210Z>\262\337\256\275\3151\270\275\311\246\003\276Y5\033\276?\367\025\274p\326\320\275\006\250\256\275cFN>\364\3002;<>j\2752\271\\>\356\021E\276X\325\213=\336L\">\263\316\233\275\022.\354\275\347\022\214\275\340\373Z>\216\032\214\274\257E\345\275\231v\024>\267\271A\275Ko\020\276\276\000\027\276\261ab>\317\035\305=\303\355?=`X\363\275G\016\323\2751G\010>\213kg\275\3434\303\275gZ8\276$\375\342;v=\006\276y\335\374\275p6^\276\021\0347\276E\340\332\275R\241\243\2759&E>\302\201\253\274\316!\212\272\027\030\321\275!\344\000=xS\217=\000Z4=I=\342\275M\265\'>&\211\246\273J\301H<&\353\277\2753\177\242<\343\2140>\271\357!\276\227-\375;\337\314\321\275tf\006\276*\365\355;\231\323\346=E1\356=?\234a>L\224)\276\352\356&\275\036|*>\367\374z<\013 ->\323M\034=S\022\007>\331n6\276\3016\205<g\237B=\300\334\362\274\252\355\005\274\3767\304=\355\031}<\300\022#\276\351\364Y>\033\3129\276Z\263[\276\351\200\313\274\201\320\010>\036\025\345<\277\nE\275\352\210>>\204\3103<?zc\2760\353\213\275I\004;\275\254\252\377=N\255\272\275O\312\203<\321R\014\276\326\314\267\275\304\360\022>\312\257\242\275F5\244=Yx\'>\262\335U>\210\301\013>\216\203\004\274\321\245\260\275&\350\303\275\272\353@>8\374W>K\2018\275F\336Z\276\345eK>\030 ;\276$\232+>\302\274Z\275Eu\332\275S\302\026>\305_\006=\322\030\035>\206Q\260=\226z\263=\227\231\021=\211c\307=\370\311\035\276\367\022K\275\377k\206\275}\227\002<\224\256\202=b<}\275;\341\017\276\305\216\326\274[\264+=\233\243\352\275\337\367F\276\253\014\260\271\250/#\276\0145-\276\322\242\272\275\376\317A>0G\221=\"4\007\276A\242\274=n~H>\320\253\023>\273\026@\276\337\025\307=\305\240U\276(,\366=\321\210\021\275<\353B>J/\022\276\241T\032\275\3344\006\276?\341&\276\237\035\007> M\032\276\277\000A>\222\013\036\275\277$]\275\266\377\221\275t\315[>]\251\237\275\331B\341=\362O0>\225w\004>n\326\270=V^\312=\0212\025>\2031S>Q\254\016\276\002\241w\275R\213[\276^F\356=\033y\024>\312\276\307<\215\005\262=\261\"\035>\332\204\351;\324W\254\275\225\251\371<\240{\243=\331G\342=\225\344)\276m|C>\350\271Q>4}\331\275\344\266\r>j\251_\276\315\265<\276{b8\275FH \276\325\345`>+|z=\323\315d\276\307\314\205=\337\035\372=z\2068\276\333\017\276\275\373+H<\3100\274\275Qx\247=#\220\352\275\236O\240=3\302\'\276\211\216\013>u#\003>\270n\320\275,\2130\273f\375X\276W\311c\276\272V\016\276\220\364?<\n\340X\276\322\304\323\273V\301$>\224`\362=\270\313\270=\344\354k=\300B\262\275[\264\014=\256R\227\275\314\2744>!\2200\276\216\350}\275\307\0327\276\034l\226\275Wv\322=/I3>c\235!>\356a\"\275\340\020\030\276@\237\204=\231\346\255<\205\240\357\275\021e\017>W\206\332=\210\207#\276U[P\276`\270\217\275\2433\374\275u\263\353\275:\367\260\272\253\3049\276\010\350\017>6\303\000=\0306\"\276\231\253\036\275\352i\260=\236\250\224\275_\345>\275\207\004\343<\315\252P\276\242\245c\276\n\353\035\276\3322\316\275\251\005O\276a/X\276@\335F>\340\021\351\275su\200=\337\004\266=\016y4\276{}\225=<\273\364\274\001\356\200:\022\201#\276\327C\204\275<\301\262\275\243Z \276lv\013\276\271\253#=s\363o={6\223=\251t\\>\177\245c\276\375{\367\275F\247W=L\306\325\275\376\321\221\271\013\344\023\276j=(\276\261\263\014>\021\211\010=#\263[\276\250\343\177\275\021\037\243=\374\272\">)\271\267\275Z\374\225=p//>\341]\375=k\353P\276\322\312\262=\310\004\361\274\rd\025=\242I\221=+\226\325=F\001y\275\317\213\033\276J\374<\276\036\267@>\025\002\351\275\220-\231\272\274A*\276\035T/>\340\344\331=4\342\377\275\037\356%\276\234\364\t\276\033\267\342\275o\000V>\330{\310\2755\214F\276i\346\256=i\220[>\202DQ\276*71\276\232^n<{\331\245\275@4\233\275b\234.\276\306\364\020\276U\317\035>\254\261\014\276d{\016\276\340\377\026>\356\211\332\274\352\223\362=9\230B<\336]\000>3<v;M6Z>S\361\264\275\345s\t\276\332)=>\002`\\\275M\331=>\250\016\303=t\010\000\276\226\035A\276K\317\022\276\034\224\004>\007\353\016>\013\241\204;\212T\215=z\200\022>t\2607\276\351\372f=AIb>%X\016=\033\255M\275:,\322=\333\021\r\276\323\037\274\275\230\245\313\275Y\347\323<g\201 =\013\213\033\275\344\357a>\304\254\347\275\367@\231=%\205Y>\010\253\032>\302\005^>\300\036\013=\315me\275\226\206\310=\367\252\244\275Q\003\026\276\201\002\036=iW\026\276;4\240\275\021eR>\331\020\002>Z0\353\275\005-\315=\000*S\276\006N\353\275eD\000>\004\327^=\375\025\024=\254o=\276fY;\2765\3224\276\323\227\203=\354\335;>\377P\"\275%r!=\233\371\n\276\035\215\242\275\356`\n>@\354O\276\010-\367=K\274\013\276~%\217\2752mK\276cI\037\276X\260U><\200\310=A \276\275\035\255\\\276\207\312\221=\261W\n>\326}\023=\251n9>\231M[>\3211k\275\227\236\342\274\311+\230=G\035\305=Gu\372\274Oe<=\257h\225\274\322\245\036\276\307\207\231\275w\267\024\276h{Z\275\211\360\000\276:J\013>L\374O\276\273m\003\274!<\020>\211\331S>\370\220e>\264\267X>p\0062>\352\316\000>wsN\276\223\260\322\275\014l\336\275Jg0\276\250\200[>\340.\035\2769A\'>kD;\275\243E\014\276x\001\021>v\314\216\275\034^\254\275\206\350\026\275vx\227=\3017T>\346\222\340\273=\010\246:f\303\261<9\220\226\272d\001\031\276\343,:>\341\250K\275{\344\003\275\001R_;\204\321G\276y/\221=\330\252\274\275\224\016V=\326M\033>\330\203\001\275\254[R>\363W\215=\023\377a>\302]]=\223\323#\276A\025\253=\232\226\010\276\363\316\231\275\364!\005\275m.\003>\304\210U\276]A\371\275\251\255\034\276\200\341:\276\002\365\003\272\023#d>\347\324A>\210\232\021\276\224\005D>\347.\034>\005\311>>j\200\313\274\214\336=>\306r\217\275\256\250\200=\236\270S\272\376\313\352=\003o\003>;/!\276`*\307=!\221\025\276\210\227\033\275\354r\214\274\243w\\\276\236i\355\275\322\\\357=\273@Z>4\024\247=\177\232\350\275-\255\341=M%T\275;\0042\276d\254\315\275\217\037\310=o\267\336<\010\'\364\275\270\363_\276\177\326\037>O\300\323=\"\211\250\275%\324\216\275WQ\014=\310\347\271\273Xe\261=\023(\273=\336n\370\275\026\340.>7\tc>q\251p\275\004\236\004\275\244\325e\276g\225\347=4\2025>\2355\250=\253\254>\274\270V\035\276cN\276=\\J\"\272\250\343\355=\203\302\373\275\016\374\361\274\307\236Y>\"1Q>\373\024\314\275\355\244\005>n^[>\306:\013>C \376\275\034\336\232=\277\230P>\206\310\254<\030\3524>q\2206\275\365uI>4u\361=RF\324\274o~\362\275\004\252\272<\027\260\035>m\373\004>\010\301\033\276\036\212+\276y\233\027;t\240%>F\016\365=\264\306c\276\350W4\2765\201a\275$8\311\275\257\024[>\266ux\275\364\270Z\275\200\300G\276h?+\273\266\033\205=6\220\366=7Z[\274\374\002\335=f\013J\275\022\250\003>G\263$=\351\3134=0\367`\274\273jX\276\232{\004\276\377\325P>\352\277n;R\372\347;\315\357^\276\204}\016\275\210\275\246=\030L\265\275\361),>\301\341\347\274\354d\246=k\0335>\267S\251\275b\363`=\022M\030\276w\3375=_\257\223<\274b\320\275o.\375\275\210\256!>G\005\357\275\366\303\343\275\253\322\027\276\231v2>\313X\324=\212-\023=9\235?=b\326A\275]\267;=|T\214=\246\266H\276a\206_\276\327\225L>"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Assign"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/read"
  op: "Identity"
  input: "fully_connected_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/HistogramSummary/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.X"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary/tag"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.y"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_1"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_1/tag"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21650634706
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 39
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/weights/Initializer/random_uniform/max"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/weights/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/weights/Initializer/random_uniform/mul"
  input: "linear_regression/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/weights/Assign"
  op: "Assign"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/read"
  op: "Identity"
  input: "linear_regression/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "linear_regression/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.73205077648
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 42
    }
  }
  attr {
    key: "seed2"
    value {
      i: 49
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/sub"
  op: "Sub"
  input: "linear_regression/bias/Initializer/random_uniform/max"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform/mul"
  op: "Mul"
  input: "linear_regression/bias/Initializer/random_uniform/RandomUniform"
  input: "linear_regression/bias/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Initializer/random_uniform"
  op: "Add"
  input: "linear_regression/bias/Initializer/random_uniform/mul"
  input: "linear_regression/bias/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/bias/Assign"
  op: "Assign"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/read"
  op: "Identity"
  input: "linear_regression/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.weights"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_2"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_2/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression.bias"
      }
    }
  }
}
node {
  name: "linear_regression/HistogramSummary_3"
  op: "HistogramSummary"
  input: "linear_regression/HistogramSummary_3/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  op: "BiasAdd"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  op: "Sub"
  input: "output"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  op: "Div"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/limit"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  op: "Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  op: "Range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/start"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range/delta"
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss"
  op: "Mean"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "HistogramSummary"
  input: "HistogramSummary_1"
  input: "linear_regression/HistogramSummary"
  input: "linear_regression/HistogramSummary_1"
  input: "linear_regression/HistogramSummary_2"
  input: "linear_regression/HistogramSummary_3"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss/mean"
      }
    }
  }
}
node {
  name: "ScalarSummary"
  op: "ScalarSummary"
  input: "ScalarSummary/tags"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "learning_rate/Assign"
  op: "Assign"
  input: "learning_rate"
  input: "learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "learning_rate/read"
  op: "Identity"
  input: "learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  op: "Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Rank_2"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  op: "Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Shape_3"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Prod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  op: "Cast"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  op: "Rank"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  op: "Range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/start"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Rank"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range/delta"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/range"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/range"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  op: "Neg"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  op: "Square"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  op: "Div"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/reduce_batch/Sum_grad/Tile"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Sum_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul/x"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss_grad/tuple/control_dependency"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "linear_regression/mean_squared_error_regressor/xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/Square_grad/mul_1"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Neg"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/tuple/control_dependency_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/squared_loss/squared_loss/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected_1/BiasAdd"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Relu"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "input"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm/pack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/Rank"
  op: "Rank"
  input: "global_norm/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm/range"
  op: "Range"
  input: "global_norm/range/start"
  input: "global_norm/Rank"
  input: "global_norm/range/delta"
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/pack"
  input: "global_norm/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "Div"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/tuple/control_dependency_1"
  input: "clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ScalarSummary_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "ScalarSummary_1"
  op: "ScalarSummary"
  input: "ScalarSummary_1/tags"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_2"
  op: "HistogramSummary"
  input: "HistogramSummary_2/tag"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_3/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_3"
  op: "HistogramSummary"
  input: "HistogramSummary_3/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_1/pack"
  op: "Pack"
  input: "global_norm_1/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/Rank"
  op: "Rank"
  input: "global_norm_1/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_1/range"
  op: "Range"
  input: "global_norm_1/range/start"
  input: "global_norm_1/Rank"
  input: "global_norm_1/range/delta"
}
node {
  name: "global_norm_1/Sum"
  op: "Sum"
  input: "global_norm_1/pack"
  input: "global_norm_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_1/mul"
  op: "Mul"
  input: "global_norm_1/Sum"
  input: "global_norm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_1/global_norm"
  op: "Sqrt"
  input: "global_norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_4/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_4"
  op: "HistogramSummary"
  input: "HistogramSummary_4/tag"
  input: "global_norm_1/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_5/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_5"
  op: "HistogramSummary"
  input: "HistogramSummary_5/tag"
  input: "fully_connected/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_6/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_6"
  op: "HistogramSummary"
  input: "HistogramSummary_6/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_2/pack"
  op: "Pack"
  input: "global_norm_2/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/Rank"
  op: "Rank"
  input: "global_norm_2/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_2/range"
  op: "Range"
  input: "global_norm_2/range/start"
  input: "global_norm_2/Rank"
  input: "global_norm_2/range/delta"
}
node {
  name: "global_norm_2/Sum"
  op: "Sum"
  input: "global_norm_2/pack"
  input: "global_norm_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_2/mul"
  op: "Mul"
  input: "global_norm_2/Sum"
  input: "global_norm_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_2/global_norm"
  op: "Sqrt"
  input: "global_norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_7/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_7"
  op: "HistogramSummary"
  input: "HistogramSummary_7/tag"
  input: "global_norm_2/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_8/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_8"
  op: "HistogramSummary"
  input: "HistogramSummary_8/tag"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_9/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_9"
  op: "HistogramSummary"
  input: "HistogramSummary_9/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_3/pack"
  op: "Pack"
  input: "global_norm_3/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/Rank"
  op: "Rank"
  input: "global_norm_3/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_3/range"
  op: "Range"
  input: "global_norm_3/range/start"
  input: "global_norm_3/Rank"
  input: "global_norm_3/range/delta"
}
node {
  name: "global_norm_3/Sum"
  op: "Sum"
  input: "global_norm_3/pack"
  input: "global_norm_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_3/mul"
  op: "Mul"
  input: "global_norm_3/Sum"
  input: "global_norm_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_3/global_norm"
  op: "Sqrt"
  input: "global_norm_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_10/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_10"
  op: "HistogramSummary"
  input: "HistogramSummary_10/tag"
  input: "global_norm_3/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_11/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_11"
  op: "HistogramSummary"
  input: "HistogramSummary_11/tag"
  input: "fully_connected_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_12/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_12"
  op: "HistogramSummary"
  input: "HistogramSummary_12/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_4/pack"
  op: "Pack"
  input: "global_norm_4/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/Rank"
  op: "Rank"
  input: "global_norm_4/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_4/range"
  op: "Range"
  input: "global_norm_4/range/start"
  input: "global_norm_4/Rank"
  input: "global_norm_4/range/delta"
}
node {
  name: "global_norm_4/Sum"
  op: "Sum"
  input: "global_norm_4/pack"
  input: "global_norm_4/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_4/mul"
  op: "Mul"
  input: "global_norm_4/Sum"
  input: "global_norm_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_4/global_norm"
  op: "Sqrt"
  input: "global_norm_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_13/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_13"
  op: "HistogramSummary"
  input: "HistogramSummary_13/tag"
  input: "global_norm_4/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_14/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_14"
  op: "HistogramSummary"
  input: "HistogramSummary_14/tag"
  input: "linear_regression/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_15/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_15"
  op: "HistogramSummary"
  input: "HistogramSummary_15/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm_5/pack"
  op: "Pack"
  input: "global_norm_5/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/Rank"
  op: "Rank"
  input: "global_norm_5/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_5/range"
  op: "Range"
  input: "global_norm_5/range/start"
  input: "global_norm_5/Rank"
  input: "global_norm_5/range/delta"
}
node {
  name: "global_norm_5/Sum"
  op: "Sum"
  input: "global_norm_5/pack"
  input: "global_norm_5/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_5/mul"
  op: "Mul"
  input: "global_norm_5/Sum"
  input: "global_norm_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_5/global_norm"
  op: "Sqrt"
  input: "global_norm_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_16/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_16"
  op: "HistogramSummary"
  input: "HistogramSummary_16/tag"
  input: "global_norm_5/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_17/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0"
      }
    }
  }
}
node {
  name: "HistogramSummary_17"
  op: "HistogramSummary"
  input: "HistogramSummary_17/tag"
  input: "linear_regression/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_18/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradients"
      }
    }
  }
}
node {
  name: "HistogramSummary_18"
  op: "HistogramSummary"
  input: "HistogramSummary_18/tag"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/linear_regression/mean_squared_error_regressor/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "global_norm_6/pack"
  op: "Pack"
  input: "global_norm_6/L2Loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/Rank"
  op: "Rank"
  input: "global_norm_6/pack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global_norm_6/range"
  op: "Range"
  input: "global_norm_6/range/start"
  input: "global_norm_6/Rank"
  input: "global_norm_6/range/delta"
}
node {
  name: "global_norm_6/Sum"
  op: "Sum"
  input: "global_norm_6/pack"
  input: "global_norm_6/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm_6/mul"
  op: "Mul"
  input: "global_norm_6/Sum"
  input: "global_norm_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm_6/global_norm"
  op: "Sqrt"
  input: "global_norm_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "HistogramSummary_19/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias:0/gradient_norm"
      }
    }
  }
}
node {
  name: "HistogramSummary_19"
  op: "HistogramSummary"
  input: "HistogramSummary_19/tag"
  input: "global_norm_6/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam/read"
  op: "Identity"
  input: "fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam/read"
  op: "Identity"
  input: "fully_connected/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
}
node {
  name: "zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 55
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 55
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/bias/Adam_1/read"
  op: "Identity"
  input: "fully_connected_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam/read"
  op: "Identity"
  input: "linear_regression/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/weights/Adam_1/read"
  op: "Identity"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
}
node {
  name: "zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam/read"
  op: "Identity"
  input: "linear_regression/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1"
  op: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/Assign"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "linear_regression/bias/Adam_1/read"
  op: "Identity"
  input: "linear_regression/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
}
node {
  name: "train/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "train/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "train/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_fully_connected_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/update_linear_regression/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate/read"
  input: "train/beta1"
  input: "train/beta2"
  input: "train/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train/beta1"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train/beta2"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "train/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/update"
  op: "NoOp"
  input: "^train/update_fully_connected/weights/ApplyAdam"
  input: "^train/update_fully_connected/bias/ApplyAdam"
  input: "^train/update_fully_connected_1/weights/ApplyAdam"
  input: "^train/update_fully_connected_1/bias/ApplyAdam"
  input: "^train/update_linear_regression/weights/ApplyAdam"
  input: "^train/update_linear_regression/bias/ApplyAdam"
  input: "^train/Assign"
  input: "^train/Assign_1"
}
node {
  name: "train/value"
  op: "Const"
  input: "^train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train"
  op: "AssignAdd"
  input: "global_step"
  input: "train/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Loss is inf or nan"
    }
  }
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "CheckNumerics"
  input: "^train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@CheckNumerics"
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^control_dependency_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/bias/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/bias/Assign"
  input: "^linear_regression/weights/Assign"
  input: "^linear_regression/bias/Assign"
  input: "^linear_regression/mean_squared_error_regressor/squared_loss/avg/Assign"
  input: "^learning_rate/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^fully_connected/weights/Adam/Assign"
  input: "^fully_connected/weights/Adam_1/Assign"
  input: "^fully_connected/bias/Adam/Assign"
  input: "^fully_connected/bias/Adam_1/Assign"
  input: "^fully_connected_1/weights/Adam/Assign"
  input: "^fully_connected_1/weights/Adam_1/Assign"
  input: "^fully_connected_1/bias/Adam/Assign"
  input: "^fully_connected_1/bias/Adam_1/Assign"
  input: "^linear_regression/weights/Adam/Assign"
  input: "^linear_regression/weights/Adam_1/Assign"
  input: "^linear_regression/bias/Adam/Assign"
  input: "^linear_regression/bias/Adam_1/Assign"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/save/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "fully_connected/bias"
        string_val: "fully_connected/bias/Adam"
        string_val: "fully_connected/bias/Adam_1"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/weights/Adam"
        string_val: "fully_connected/weights/Adam_1"
        string_val: "fully_connected_1/bias"
        string_val: "fully_connected_1/bias/Adam"
        string_val: "fully_connected_1/bias/Adam_1"
        string_val: "fully_connected_1/weights"
        string_val: "fully_connected_1/weights/Adam"
        string_val: "fully_connected_1/weights/Adam_1"
        string_val: "global_step"
        string_val: "learning_rate"
        string_val: "linear_regression/bias"
        string_val: "linear_regression/bias/Adam"
        string_val: "linear_regression/bias/Adam_1"
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
        string_val: "linear_regression/weights"
        string_val: "linear_regression/weights/Adam"
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/save/shapes_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 23
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/save"
  op: "SaveSlices"
  input: "save/Const"
  input: "save/save/tensor_names"
  input: "save/save/shapes_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "fully_connected/bias"
  input: "fully_connected/bias/Adam"
  input: "fully_connected/bias/Adam_1"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Adam"
  input: "fully_connected/weights/Adam_1"
  input: "fully_connected_1/bias"
  input: "fully_connected_1/bias/Adam"
  input: "fully_connected_1/bias/Adam_1"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Adam"
  input: "fully_connected_1/weights/Adam_1"
  input: "global_step"
  input: "learning_rate"
  input: "linear_regression/bias"
  input: "linear_regression/bias/Adam"
  input: "linear_regression/bias/Adam_1"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "linear_regression/weights"
  input: "linear_regression/weights/Adam"
  input: "linear_regression/weights/Adam_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/save"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/restore_slice/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/restore_slice/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice/tensor_name"
  input: "save/restore_slice/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/restore_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_1/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/restore_slice_1/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_1"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_1/tensor_name"
  input: "save/restore_slice_1/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/restore_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_2/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_2/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_2"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_2/tensor_name"
  input: "save/restore_slice_2/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "fully_connected/bias"
  input: "save/restore_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_3/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_3/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_3"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_3/tensor_name"
  input: "save/restore_slice_3/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "fully_connected/bias/Adam"
  input: "save/restore_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_4/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_4/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_4"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_4/tensor_name"
  input: "save/restore_slice_4/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "fully_connected/bias/Adam_1"
  input: "save/restore_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_5/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_5/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_5"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_5/tensor_name"
  input: "save/restore_slice_5/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/restore_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_6/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_6/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_6"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_6/tensor_name"
  input: "save/restore_slice_6/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "fully_connected/weights/Adam"
  input: "save/restore_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_7/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_7/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_7"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_7/tensor_name"
  input: "save/restore_slice_7/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "fully_connected/weights/Adam_1"
  input: "save/restore_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_8/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_8/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_8"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_8/tensor_name"
  input: "save/restore_slice_8/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "fully_connected_1/bias"
  input: "save/restore_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_9/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_9/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_9"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_9/tensor_name"
  input: "save/restore_slice_9/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "fully_connected_1/bias/Adam"
  input: "save/restore_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_10/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_10/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_10"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_10/tensor_name"
  input: "save/restore_slice_10/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "fully_connected_1/bias/Adam_1"
  input: "save/restore_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_11/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_11/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_11"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_11/tensor_name"
  input: "save/restore_slice_11/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "save/restore_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_12/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_12/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_12"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_12/tensor_name"
  input: "save/restore_slice_12/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "fully_connected_1/weights/Adam"
  input: "save/restore_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_13/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fully_connected_1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_13/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_13"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_13/tensor_name"
  input: "save/restore_slice_13/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "fully_connected_1/weights/Adam_1"
  input: "save/restore_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_14/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/restore_slice_14/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_14"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_14/tensor_name"
  input: "save/restore_slice_14/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global_step"
  input: "save/restore_slice_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_15/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "save/restore_slice_15/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_15"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_15/tensor_name"
  input: "save/restore_slice_15/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "learning_rate"
  input: "save/restore_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@learning_rate"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_16/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias"
      }
    }
  }
}
node {
  name: "save/restore_slice_16/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_16"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_16/tensor_name"
  input: "save/restore_slice_16/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "linear_regression/bias"
  input: "save/restore_slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_17/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_17/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_17"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_17/tensor_name"
  input: "save/restore_slice_17/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "linear_regression/bias/Adam"
  input: "save/restore_slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_18/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_18/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_18"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_18/tensor_name"
  input: "save/restore_slice_18/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "linear_regression/bias/Adam_1"
  input: "save/restore_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_19/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
}
node {
  name: "save/restore_slice_19/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_19"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_19/tensor_name"
  input: "save/restore_slice_19/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "linear_regression/mean_squared_error_regressor/squared_loss/avg"
  input: "save/restore_slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/mean_squared_error_regressor/squared_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_20/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights"
      }
    }
  }
}
node {
  name: "save/restore_slice_20/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_20"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_20/tensor_name"
  input: "save/restore_slice_20/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "linear_regression/weights"
  input: "save/restore_slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_21/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam"
      }
    }
  }
}
node {
  name: "save/restore_slice_21/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_21"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_21/tensor_name"
  input: "save/restore_slice_21/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "linear_regression/weights/Adam"
  input: "save/restore_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_slice_22/tensor_name"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "linear_regression/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/restore_slice_22/shape_and_slice"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/restore_slice_22"
  op: "RestoreSlice"
  input: "save/Const"
  input: "save/restore_slice_22/tensor_name"
  input: "save/restore_slice_22/shape_and_slice"
  attr {
    key: "dt"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "preferred_shard"
    value {
      i: -1
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "linear_regression/weights/Adam_1"
  input: "save/restore_slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear_regression/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
}
versions {
  producer: 9
}
