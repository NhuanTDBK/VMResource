/usr/local/lib/python2.7/dist-packages/theano/tensor/signal/downsample.py:6: UserWarning: downsample module has been moved to the theano.tensor.signal.pool module.
  "downsample module has been moved to the theano.tensor.signal.pool module.")
/usr/local/lib/python2.7/dist-packages/sklearn/preprocessing/data.py:324: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.
  warnings.warn(DEPRECATION_MSG_1D, DeprecationWarning)
/usr/local/lib/python2.7/dist-packages/sklearn/preprocessing/data.py:359: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.
  warnings.warn(DEPRECATION_MSG_1D, DeprecationWarning)
Loading data
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Normalize complete
Preparing sliding window dataset...
Initialization
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
estimators/FeedFlow.py:88: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (y == None):
estimators/FeedFlow.py:90: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  if (X == None):
[0;31m---------------------------------------------------------------------------[0m
[0;31mJoblibAttributeError[0m                      Traceback (most recent call last)
[0;32m/usr/lib/python2.7/dist-packages/IPython/utils/py3compat.pyc[0m in [0;36mexecfile[0;34m(fname, *where)[0m
[1;32m    202[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    203[0m                 [0mfilename[0m [0;34m=[0m [0mfname[0m[0;34m[0m[0m
[0;32m--> 204[0;31m             [0m__builtin__[0m[0;34m.[0m[0mexecfile[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m*[0m[0mwhere[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m/home/ubuntu/NhuanWorking/VMResource/experiments/experimentBruteFuzzyACO.py[0m in [0;36m<module>[0;34m()[0m
[1;32m     10[0m [0mbruteGrid[0m [0;34m=[0m [0mBruteForceGridSearch[0m[0;34m([0m[0mn_sliding_ranges[0m[0;34m=[0m[0mnp[0m[0;34m.[0m[0marange[0m[0;34m([0m[0;36m2[0m[0;34m,[0m[0;36m11[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     11[0m [0mbruteGrid[0m[0;34m.[0m[0mtransform[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 12[0;31m [0mbruteGrid[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mdata[0m[0;34m=[0m[0mdata[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m/home/ubuntu/NhuanWorking/VMResource/estimators/BruteForceGridSearchACO.py[0m in [0;36mfit[0;34m(self, data)[0m
[1;32m     53[0m [0;34m[0m[0m
[1;32m     54[0m             [0mgridSearch[0m [0;34m=[0m [0mGridSearchCV[0m[0;34m([0m[0mestimator[0m[0;34m,[0m[0mparam_aco[0m[0;34m,[0m[0mn_jobs[0m[0;34m=[0m[0;34m-[0m[0;36m1[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 55[0;31m             [0mgridSearch[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mX_train[0m[0;34m,[0m[0my_train[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     56[0m             [0moptimizer[0m [0;34m=[0m [0mOptimizerNNEstimator[0m[0;34m([0m[0mgridSearch[0m[0;34m.[0m[0mbest_estimator_[0m[0;34m,[0m [0mneuralNet[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     57[0m             [0mneuralNet[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mX_train[0m[0;34m,[0m[0my_train[0m[0;34m)[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/grid_search.pyc[0m in [0;36mfit[0;34m(self, X, y)[0m
[1;32m    802[0m [0;34m[0m[0m
[1;32m    803[0m         """
[0;32m--> 804[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_fit[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0mParameterGrid[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mparam_grid[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    805[0m [0;34m[0m[0m
[1;32m    806[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/grid_search.pyc[0m in [0;36m_fit[0;34m(self, X, y, parameter_iterable)[0m
[1;32m    551[0m                                     [0mself[0m[0;34m.[0m[0mfit_params[0m[0;34m,[0m [0mreturn_parameters[0m[0;34m=[0m[0mTrue[0m[0;34m,[0m[0;34m[0m[0m
[1;32m    552[0m                                     error_score=self.error_score)
[0;32m--> 553[0;31m                 [0;32mfor[0m [0mparameters[0m [0;32min[0m [0mparameter_iterable[0m[0;34m[0m[0m
[0m[1;32m    554[0m                 for train, test in cv)
[1;32m    555[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/externals/joblib/parallel.pyc[0m in [0;36m__call__[0;34m(self, iterable)[0m
[1;32m    808[0m                 [0;31m# consumption.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    809[0m                 [0mself[0m[0;34m.[0m[0m_iterating[0m [0;34m=[0m [0mFalse[0m[0;34m[0m[0m
[0;32m--> 810[0;31m             [0mself[0m[0;34m.[0m[0mretrieve[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    811[0m             [0;31m# Make sure that we get a last message telling us we are done[0m[0;34m[0m[0;34m[0m[0m
[1;32m    812[0m             [0melapsed_time[0m [0;34m=[0m [0mtime[0m[0;34m.[0m[0mtime[0m[0;34m([0m[0;34m)[0m [0;34m-[0m [0mself[0m[0;34m.[0m[0m_start_time[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python2.7/dist-packages/sklearn/externals/joblib/parallel.pyc[0m in [0;36mretrieve[0;34m(self)[0m
[1;32m    755[0m                     [0;31m# a working pool as they expect.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    756[0m                     [0mself[0m[0;34m.[0m[0m_initialize_pool[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 757[0;31m                 [0;32mraise[0m [0mexception[0m[0;34m[0m[0m
[0m[1;32m    758[0m [0;34m[0m[0m
[1;32m    759[0m     [0;32mdef[0m [0m__call__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0miterable[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mJoblibAttributeError[0m: JoblibAttributeError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/usr/bin/ipython in <module>()
      1 #! /usr/bin/python
      2 """Terminal-based IPython entry point.
      3 """
      4 
      5 from IPython import start_ipython
----> 6 start_ipython()
      7 
      8 
      9 
     10 

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/__init__.py in start_ipython(argv=None, **kwargs={})
    113     kwargs : various, optional
    114         Any other kwargs will be passed to the Application constructor,
    115         such as `config`.
    116     """
    117     from IPython.terminal.ipapp import launch_new_instance
--> 118     return launch_new_instance(argv=argv, **kwargs)
        launch_new_instance = <bound method MetaHasTraits.launch_instance of <class 'IPython.terminal.ipapp.TerminalIPythonApp'>>
        argv = None
        kwargs = {}
    119 
    120 def start_kernel(argv=None, **kwargs):
    121     """Launch a normal IPython kernel instance (as opposed to embedded)
    122     

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/config/application.py in launch_instance(cls=<class 'IPython.terminal.ipapp.TerminalIPythonApp'>, argv=None, **kwargs={})
    540         
    541         If a global instance already exists, this reinitializes and starts it
    542         """
    543         try:
    544             app = cls.instance(**kwargs)
--> 545             app.initialize(argv)
        app.initialize = <bound method TerminalIPythonApp.initialize of <IPython.terminal.ipapp.TerminalIPythonApp object>>
        argv = None
    546             app.start()
    547         except ImportError as e:
    548             from IPython.utils import py3compat
    549             ipy = "ipython3" if py3compat.PY3 else "ipython"

...........................................................................
/home/ubuntu/NhuanWorking/VMResource/<string> in initialize(self=<IPython.terminal.ipapp.TerminalIPythonApp object>, argv=None)
      1 
----> 2 
      3 
      4 
      5 #!/usr/bin/env python
      6 # encoding: utf-8
      7 """
      8 The :class:`~IPython.core.application.Application` object for the command
      9 line :command:`ipython` program.
     10 
     11 Authors
     12 -------
     13 
     14 * Brian Granger

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/config/application.py in catch_config_error(method=<function initialize>, app=<IPython.terminal.ipapp.TerminalIPythonApp object>, *args=(None,), **kwargs={})
     84     message, and exit the app.
     85     
     86     For use on init methods, to prevent invoking excepthook on invalid input.
     87     """
     88     try:
---> 89         return method(app, *args, **kwargs)
        method = <function initialize>
        app = <IPython.terminal.ipapp.TerminalIPythonApp object>
        args = (None,)
        kwargs = {}
     90     except (TraitError, ArgumentError) as e:
     91         app.print_help()
     92         app.log.fatal("Bad config encountered during initialization:")
     93         app.log.fatal(str(e))

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/terminal/ipapp.py in initialize(self=<IPython.terminal.ipapp.TerminalIPythonApp object>, argv=None)
    324         # and draw the banner
    325         self.init_banner()
    326         # Now a variety of things that happen after the banner is printed.
    327         self.init_gui_pylab()
    328         self.init_extensions()
--> 329         self.init_code()
        self.init_code = <bound method TerminalIPythonApp.init_code of <IPython.terminal.ipapp.TerminalIPythonApp object>>
    330 
    331     def init_shell(self):
    332         """initialize the InteractiveShell instance"""
    333         # Create an InteractiveShell instance.

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/core/shellapp.py in init_code(self=<IPython.terminal.ipapp.TerminalIPythonApp object>)
    279     def init_code(self):
    280         """run the pre-flight code, specified via exec_lines"""
    281         self._run_startup_files()
    282         self._run_exec_lines()
    283         self._run_exec_files()
--> 284         self._run_cmd_line_code()
        self._run_cmd_line_code = <bound method TerminalIPythonApp._run_cmd_line_c...Python.terminal.ipapp.TerminalIPythonApp object>>
    285         self._run_module()
    286         
    287         # flush output, so itwon't be attached to the first cell
    288         sys.stdout.flush()

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/core/shellapp.py in _run_cmd_line_code(self=<IPython.terminal.ipapp.TerminalIPythonApp object>)
    387 
    388         # Like Python itself, ignore the second if the first of these is present
    389         elif self.file_to_run:
    390             fname = self.file_to_run
    391             try:
--> 392                 self._exec_file(fname)
        self._exec_file = <bound method TerminalIPythonApp._exec_file of <IPython.terminal.ipapp.TerminalIPythonApp object>>
        fname = u'experiments/experimentBruteFuzzyACO.py'
    393             except:
    394                 self.log.warn("Error in executing file in user namespace: %s" %
    395                               fname)
    396                 self.shell.showtraceback()

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/core/shellapp.py in _exec_file(self=<IPython.terminal.ipapp.TerminalIPythonApp object>, fname=u'experiments/experimentBruteFuzzyACO.py')
    334                     if full_filename.endswith('.ipy'):
    335                         self.shell.safe_execfile_ipy(full_filename)
    336                     else:
    337                         # default to python, even without extension
    338                         self.shell.safe_execfile(full_filename,
--> 339                                                  self.shell.user_ns)
        self.shell.user_ns = {'BruteForceGridSearch': <class estimators.BruteForceGridSearchACO.BruteForceGridSearch>, 'In': [''], 'MinMaxScaler': <class 'sklearn.preprocessing.data.MinMaxScaler'>, 'Out': {}, '_': '', '__': '', '___': '', '__builtin__': <module '__builtin__' (built-in)>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': 'Automatically created module for IPython interactive environment', ...}
    340         finally:
    341             sys.argv = save_argv
    342 
    343     def _run_startup_files(self):

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/core/interactiveshell.py in safe_execfile(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, fname=u'/home/ubuntu/NhuanWorking/VMResource/experiments/experimentBruteFuzzyACO.py', *where=({'BruteForceGridSearch': <class estimators.BruteForceGridSearchACO.BruteForceGridSearch>, 'In': [''], 'MinMaxScaler': <class 'sklearn.preprocessing.data.MinMaxScaler'>, 'Out': {}, '_': '', '__': '', '___': '', '__builtin__': <module '__builtin__' (built-in)>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': 'Automatically created module for IPython interactive environment', ...},), **kw={'exit_ignore': False, 'raise_exceptions': False})
   2485         # Python inserts the script's directory into sys.path
   2486         dname = os.path.dirname(fname)
   2487 
   2488         with prepended_to_syspath(dname):
   2489             try:
-> 2490                 py3compat.execfile(fname,*where)
        fname = u'/home/ubuntu/NhuanWorking/VMResource/experiments/experimentBruteFuzzyACO.py'
        where = ({'BruteForceGridSearch': <class estimators.BruteForceGridSearchACO.BruteForceGridSearch>, 'In': [''], 'MinMaxScaler': <class 'sklearn.preprocessing.data.MinMaxScaler'>, 'Out': {}, '_': '', '__': '', '___': '', '__builtin__': <module '__builtin__' (built-in)>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': 'Automatically created module for IPython interactive environment', ...},)
   2491             except SystemExit as status:
   2492                 # If the call was made with 0 or None exit status (sys.exit(0)
   2493                 # or sys.exit() ), don't bother showing a traceback, as both of
   2494                 # these are considered normal by the OS:

...........................................................................
/usr/lib/python2.7/dist-packages/IPython/utils/py3compat.py in execfile(fname=u'/home/ubuntu/NhuanWorking/VMResource/experiments/experimentBruteFuzzyACO.py', *where=({'BruteForceGridSearch': <class estimators.BruteForceGridSearchACO.BruteForceGridSearch>, 'In': [''], 'MinMaxScaler': <class 'sklearn.preprocessing.data.MinMaxScaler'>, 'Out': {}, '_': '', '__': '', '___': '', '__builtin__': <module '__builtin__' (built-in)>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': 'Automatically created module for IPython interactive environment', ...},))
    199         def execfile(fname, *where):
    200             if isinstance(fname, unicode):
    201                 filename = fname.encode(sys.getfilesystemencoding())
    202             else:
    203                 filename = fname
--> 204             __builtin__.execfile(filename, *where)
        filename = '/home/ubuntu/NhuanWorking/VMResource/experiments/experimentBruteFuzzyACO.py'
        where = ({'BruteForceGridSearch': <class estimators.BruteForceGridSearchACO.BruteForceGridSearch>, 'In': [''], 'MinMaxScaler': <class 'sklearn.preprocessing.data.MinMaxScaler'>, 'Out': {}, '_': '', '__': '', '___': '', '__builtin__': <module '__builtin__' (built-in)>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': 'Automatically created module for IPython interactive environment', ...},)
    205 
    206 
    207 
    208 

...........................................................................
/home/ubuntu/NhuanWorking/VMResource/experiments/experimentBruteFuzzyACO.py in <module>()
      7 scaler = MinMaxScaler()
      8 data = scaler.fit_transform(pd.read_csv('sample_610_10min.csv',index_col=0)['cpu_rate'])
      9 
     10 bruteGrid = BruteForceGridSearch(n_sliding_ranges=np.arange(2,11))
     11 bruteGrid.transform(data)
---> 12 bruteGrid.fit(data=data)
     13 
     14 
     15 
     16 

...........................................................................
/home/ubuntu/NhuanWorking/VMResource/estimators/BruteForceGridSearchACO.py in fit(self=<estimators.BruteForceGridSearchACO.BruteForceGridSearch instance>, data=array([ 0.01174036,  0.00980706,  0.01684848, ...,  0.01742507,
        0.01540528,  0.0142082 ]))
     50             }
     51             estimator = ACOEstimator(Q=0.65, epsilon=0.1, number_of_solutions=130)
     52             neuralNet = NeuralFlowRegressor(learning_rate=1E-03, hidden_nodes=n_hidden)
     53 
     54             gridSearch = GridSearchCV(estimator,param_aco,n_jobs=-1)
---> 55             gridSearch.fit(X_train,y_train)
        gridSearch.fit = <bound method GridSearchCV.fit of GridSearchCV(c...'2*n_jobs', refit=True, scoring=None, verbose=0)>
        X_train = array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
        y_train = array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
     56             optimizer = OptimizerNNEstimator(gridSearch.best_estimator_, neuralNet)
     57             neuralNet.fit(X_train,y_train)
     58             X_test_f = self.data_source[self.train_len+1:self.train_len+self.test_len+1]
     59             y_pred_f = optimizer.predict(X_test)

...........................................................................
/usr/local/lib/python2.7/dist-packages/sklearn/grid_search.py in fit(self=GridSearchCV(cv=None, error_score='raise',
     ...='2*n_jobs', refit=True, scoring=None, verbose=0), X=array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), y=array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]))
    799         y : array-like, shape = [n_samples] or [n_samples, n_output], optional
    800             Target relative to X for classification or regression;
    801             None for unsupervised learning.
    802 
    803         """
--> 804         return self._fit(X, y, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...'2*n_jobs', refit=True, scoring=None, verbose=0)>
        X = array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
        y = array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
        self.param_grid = {'Q': [0.65, 0.7, 0.75], 'epsilon': [0.1, 0.2, 0.3, 0.4, 0.5], 'hidden_nodes': [array([55])]}
    805 
    806 
    807 class RandomizedSearchCV(BaseSearchCV):
    808     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python2.7/dist-packages/sklearn/grid_search.py in _fit(self=GridSearchCV(cv=None, error_score='raise',
     ...='2*n_jobs', refit=True, scoring=None, verbose=0), X=array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), y=array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
    ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), parameter_iterable=<sklearn.grid_search.ParameterGrid object>)
    548         )(
    549             delayed(_fit_and_score)(clone(base_estimator), X, y, self.scorer_,
    550                                     train, test, self.verbose, parameters,
    551                                     self.fit_params, return_parameters=True,
    552                                     error_score=self.error_score)
--> 553                 for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.grid_search.ParameterGrid object>
    554                 for train, test in cv)
    555 
    556         # Out is a list of triplet: score, estimator, n_test_samples
    557         n_fits = len(out)

...........................................................................
/usr/local/lib/python2.7/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    805             if pre_dispatch == "all" or n_jobs == 1:
    806                 # The iterable was consumed all at once by the above for loop.
    807                 # No need to wait for async callbacks to trigger to
    808                 # consumption.
    809                 self._iterating = False
--> 810             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    811             # Make sure that we get a last message telling us we are done
    812             elapsed_time = time.time() - self._start_time
    813             self._print('Done %3i out of %3i | elapsed: %s finished',
    814                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
AttributeError                                     Thu Jun  9 00:18:24 2016
PID: 18346                                    Python 2.7.6: /usr/bin/python
...........................................................................
/usr/local/lib/python2.7/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
     67     def __init__(self, iterator_slice):
     68         self.items = list(iterator_slice)
     69         self._size = len(self.items)
     70 
     71     def __call__(self):
---> 72         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (ACOEstimator(Q=0.65, const_sd=0.1, epsilon=0.1, ... number_of_solutions=130, number_of_weights=None), memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), <function _passthrough_scorer>, array([1000, 1001, 1002, ..., 2997, 2998, 2999]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...90, 991, 992, 993, 994, 995, 996, 997, 998, 999]), 0, {'Q': 0.65, 'epsilon': 0.1, 'hidden_nodes': array([55])}, {})
        kwargs = {'error_score': 'raise', 'return_parameters': True}
        self.items = [(<function _fit_and_score>, (ACOEstimator(Q=0.65, const_sd=0.1, epsilon=0.1, ... number_of_solutions=130, number_of_weights=None), memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), <function _passthrough_scorer>, array([1000, 1001, 1002, ..., 2997, 2998, 2999]), array([  0,   1,   2,   3,   4,   5,   6,   7,  ...90, 991, 992, 993, 994, 995, 996, 997, 998, 999]), 0, {'Q': 0.65, 'epsilon': 0.1, 'hidden_nodes': array([55])}, {}), {'error_score': 'raise', 'return_parameters': True})]
     73 
     74     def __len__(self):
     75         return self._size
     76 

...........................................................................
/usr/local/lib/python2.7/dist-packages/sklearn/cross_validation.py in _fit_and_score(estimator=ACOEstimator(Q=0.65, const_sd=0.1, epsilon=0.1, ... number_of_solutions=130, number_of_weights=None), X=memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), y=memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), scorer=<function _passthrough_scorer>, train=array([1000, 1001, 1002, ..., 2997, 2998, 2999]), test=array([  0,   1,   2,   3,   4,   5,   6,   7,  ...90, 991, 992, 993, 994, 995, 996, 997, 998, 999]), verbose=0, parameters={'Q': 0.65, 'epsilon': 0.1, 'hidden_nodes': array([55])}, fit_params={}, return_train_score=False, return_parameters=True, error_score='raise')
   1526 
   1527     try:
   1528         if y_train is None:
   1529             estimator.fit(X_train, **fit_params)
   1530         else:
-> 1531             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method ACOEstimator.fit of ACOEstimator(Q...number_of_solutions=130, number_of_weights=None)>
        X_train = memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
        y_train = memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
        fit_params = {}
   1532 
   1533     except Exception as e:
   1534         if error_score == 'raise':
   1535             raise

...........................................................................
/home/ubuntu/NhuanWorking/VMResource/estimators/ACOEstimator.py in fit(self=ACOEstimator(Q=0.65, const_sd=0.1, epsilon=0.1, ... number_of_solutions=130, number_of_weights=None), X=memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), y=memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), **param={})
     77             self.n_hidden = self.hidden_nodes
     78         self.archive = param.get("archive")
     79         if param.has_key("top_k"):
     80             self.top_k = param.get("top_k")
     81         self.score_fn = FeedFlow(self.neural_shape)
---> 82         self.score_fn.set_weights(self.optimize(X,y))
        self.score_fn.set_weights = <bound method FeedFlow.set_weights of <estimators.FeedFlow.FeedFlow instance>>
        self.optimize = <bound method ACOEstimator.optimize of ACOEstima...number_of_solutions=130, number_of_weights=None)>
        X = memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
        y = memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
     83         return self
     84 
     85     def predict(self,X):
     86         return self.score_fn.flow(X)

...........................................................................
/home/ubuntu/NhuanWorking/VMResource/estimators/ACOEstimator.py in optimize(self=ACOEstimator(Q=0.65, const_sd=0.1, epsilon=0.1, ... number_of_solutions=130, number_of_weights=None), X=memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]), y=memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
   ...0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]]))
     41         self.y = y
     42         if self.archive == None:
     43             self.archive = construct_solution(self.number_of_solutions,self.neural_shape)
     44         self.sorted_archive = self.calculate_fitness(self.score_fn,self.archive)
     45         weights = self.calculate_weights(self.archive.shape)
---> 46         self.archive = self.sampling_more(self.sorted_archive,weights,self.epsilon)
        self.archive = array([[ 0.05252899,  0.03308701, -0.0269657 , ....  0.        ,
         0.        ,  0.        ]])
        self.sampling_more = <bound method ACOEstimator.sampling_more of ACOE...number_of_solutions=130, number_of_weights=None)>
        self.sorted_archive = None
        weights = array([[ 3.98914345],
       [ 3.9894228 ],
    ...02],
       [ 1.28943523],
       [ 1.26661476]])
        self.epsilon = 0.1
     47         self.sorted_archive = self.calculate_fitness(self.score_fn,self.archive)
     48         for i in np.arange(self.max_epochs):
     49             # try:
     50                 # print summary_writter[-1]

...........................................................................
/home/ubuntu/NhuanWorking/VMResource/estimators/ACOEstimator.py in sampling_more(self=ACOEstimator(Q=0.65, const_sd=0.1, epsilon=0.1, ... number_of_solutions=130, number_of_weights=None), archive=None, weights=array([[ 3.98914345],
       [ 3.9894228 ],
    ...02],
       [ 1.28943523],
       [ 1.26661476]]), epsilon=0.1)
    137                 l = index
    138         return l
    139 
    140     def sampling_more(self, archive, weights, epsilon):
    141         # pdf = 0
--> 142         len_of_weights = range(archive.shape[1])
        len_of_weights = undefined
        archive.shape = undefined
    143         next_archive = np.zeros(archive.shape)
    144         for index in np.arange(archive.shape[0]):
    145             i_pdf = self.choose_pdf(archive.shape,weights)
    146     #         for item in np.arange(archive.shape[1]):

AttributeError: 'NoneType' object has no attribute 'shape'
___________________________________________________________________________
